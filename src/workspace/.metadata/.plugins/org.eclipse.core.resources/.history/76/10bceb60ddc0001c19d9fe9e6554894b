
ws2.elf:     file format elf32-littlenios2
ws2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00131814 memsz 0x00131814 flags r-x
    LOAD off    0x00133814 vaddr 0x08131814 paddr 0x08133284 align 2**12
         filesz 0x00001a70 memsz 0x00001a70 flags rw-
    LOAD off    0x00135cf4 vaddr 0x08134cf4 paddr 0x08134cf4 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         001317bc  08000000  08000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000058  081317bc  081317bc  001337bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a70  08131814  08133284  00133814  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  08134cf4  08134cf4  00135cf4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000230  00000230  00135284  2**0
                  CONTENTS
  7 .sdram        00000000  08134e48  08134e48  00135284  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00135284  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  001352a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000165dc  00000000  00000000  00135cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00006081  00000000  00000000  0014c2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006a86  00000000  00000000  00152335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001598  00000000  00000000  00158dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000027f9  00000000  00000000  0015a354  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004ada  00000000  00000000  0015cb4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  00161628  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00161638  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  001642de  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  001642e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  001642ed  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  001642ee  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  001642ef  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001642f3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  001642f7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  001642fb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00164306  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00164311  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  0016431c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000040  00000000  00000000  0016431f  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a8a  00000000  00000000  0016435f  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006f4ea  00000000  00000000  00168de9  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
081317bc l    d  .rodata	00000000 .rodata
08131814 l    d  .rwdata	00000000 .rwdata
08134cf4 l    d  .bss	00000000 .bss
00000230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08134e48 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ws2_bsp//obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 obj/default/mem.o
08000208 l       .text	00000000 frame_buffer_memory
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
0812c39c l     F .text	00000008 __fp_unlock
0812c3b0 l     F .text	0000019c __sinit.part.1
0812c54c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08131814 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0812f014 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0812f128 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0812f154 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0812f248 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0812f330 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0812f41c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0812f5f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08133274 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0812f86c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0812f9a8 l     F .text	00000034 alt_dev_reg
081321e8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0812fca0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0812feac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
081304e4 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08130724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08130b84 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08130ce4 l     F .text	0000003c alt_get_errno
08130d20 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08134d1c g     O .bss	00000004 alt_instruction_exception_handler
0812ee0c g     F .text	00000054 _isatty_r
0812f534 g     F .text	0000007c alt_main
0812c230 g     F .text	000000c0 _puts_r
08134d48 g     O .bss	00000100 alt_irq
0812eb34 g     F .text	00000060 _lseek_r
08133284 g       *ABS*	00000000 __flash_rwdata_start
08134e48 g       *ABS*	00000000 __alt_heap_start
0812e0e8 g     F .text	0000005c __sseek
0812c6fc g     F .text	00000010 __sinit
0812c554 g     F .text	00000078 __sfmoreglue
0812f5d4 g     F .text	00000024 __malloc_unlock
0812d7d4 g     F .text	0000015c memmove
0812c6e4 g     F .text	00000018 _cleanup
0813110c g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0812edb0 g     F .text	0000005c _fstat_r
08134d00 g     O .bss	00000004 errno
0812e064 g     F .text	00000008 __seofread
08134d08 g     O .bss	00000004 alt_argv
0813b248 g       *ABS*	00000000 _gp
08132068 g     O .rwdata	00000180 alt_fd_list
08131130 g     F .text	00000090 alt_find_dev
0812d68c g     F .text	00000148 memcpy
0812c3a4 g     F .text	0000000c _cleanup_r
08130c68 g     F .text	0000007c alt_io_redirect
081317bc g       *ABS*	00000000 __DTOR_END__
0812c2f0 g     F .text	00000014 puts
0813138c g     F .text	0000009c alt_exception_cause_generated_bad_addr
081300a4 g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0812ef58 g     F .text	00000064 .hidden __udivsi3
0812f284 g     F .text	000000ac isatty
08134cfc g     O .bss	00000004 __malloc_top_pad
0812c74c g     F .text	000004c8 __sfvwrite_r
0812dfbc g     F .text	00000054 _sbrk_r
0812ed50 g     F .text	00000060 _read_r
0813326c g     O .rwdata	00000004 alt_max_fd
0812e354 g     F .text	000000f0 _fclose_r
0812e6d0 g     F .text	00000030 fflush
08134cf8 g     O .bss	00000004 __malloc_max_sbrked_mem
0812f458 g     F .text	000000dc lseek
0813324c g     O .rwdata	00000004 _global_impure_ptr
0812da58 g     F .text	00000564 _realloc_r
08134e48 g       *ABS*	00000000 __bss_end
08130a94 g     F .text	000000f0 alt_iic_isr_register
08131004 g     F .text	00000108 alt_tick
0812c71c g     F .text	00000018 __fp_lock_all
08130a48 g     F .text	0000004c alt_ic_irq_enabled
08130f68 g     F .text	0000009c alt_alarm_stop
08134d10 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
08132040 g     O .rwdata	00000028 alt_dev_null
08130704 g     F .text	00000020 alt_dcache_flush_all
08133284 g       *ABS*	00000000 __ram_rwdata_end
08133264 g     O .rwdata	00000008 alt_dev_list
0812f8a8 g     F .text	00000100 write
08131814 g       *ABS*	00000000 __ram_rodata_end
0812f190 g     F .text	000000b8 fstat
0812efbc g     F .text	00000058 .hidden __umodsi3
08134e48 g       *ABS*	00000000 end
0812fbe0 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
08133248 g     O .rwdata	00000004 vga_mem
081317bc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0813055c g     F .text	0000007c alt_avalon_timer_sc_init
081302c0 g     F .text	00000224 altera_avalon_jtag_uart_write
0812c70c g     F .text	00000004 __sfp_lock_acquire
0812d5a8 g     F .text	000000e4 memchr
0812e824 g     F .text	00000310 _free_r
08131608 g     F .text	00000180 __call_exitprocs
08133254 g     O .rwdata	00000004 __malloc_sbrk_base
08000000 g     F .text	0000003c _start
08134d14 g     O .bss	00000004 _alt_tick_rate
08134d18 g     O .bss	00000004 _alt_nticks
0812f634 g     F .text	00000104 read
0812fa14 g     F .text	00000068 alt_sys_init
081314f0 g     F .text	00000118 __register_exitproc
0812ff4c g     F .text	00000068 altera_avalon_jtag_uart_close
0812c208 g     F .text	00000028 .hidden __mulsi3
08131814 g       *ABS*	00000000 __ram_rwdata_start
081317bc g       *ABS*	00000000 __ram_rodata_start
08134d20 g     O .bss	00000028 __malloc_current_mallinfo
0812fa7c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
081312c8 g     F .text	000000c4 alt_get_fd
0812e300 g     F .text	00000054 _close_r
08131474 g     F .text	0000007c memcmp
0812fb3c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08134e48 g       *ABS*	00000000 __alt_stack_base
0812fb8c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0812e1ac g     F .text	00000154 __swsetup_r
0812c5cc g     F .text	00000118 __sfp
08131c38 g     O .rwdata	00000408 __malloc_av_
0812c718 g     F .text	00000004 __sinit_lock_release
0812e010 g     F .text	00000054 __sread
081311c0 g     F .text	00000108 alt_find_file
08130760 g     F .text	000000a4 alt_dev_llist_insert
0812f5b0 g     F .text	00000024 __malloc_lock
0812f7bc g     F .text	000000b0 sbrk
0812e674 g     F .text	0000005c _fflush_r
08134cf4 g       *ABS*	00000000 __bss_start
0812d930 g     F .text	00000128 memset
0800003c g     F .text	000001cc main
08134d0c g     O .bss	00000004 alt_envp
08134cf4 g     O .bss	00000004 __malloc_max_total_mem
0812fadc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0812e144 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0812e444 g     F .text	00000014 fclose
0812cd9c g     F .text	0000080c _malloc_r
08133270 g     O .rwdata	00000004 alt_errno
0812cc14 g     F .text	000000c4 _fwalk
0812ee60 g     F .text	00000084 .hidden __divsi3
0812e700 g     F .text	00000124 _malloc_trim_r
081317bc g       *ABS*	00000000 __CTOR_END__
081317bc g       *ABS*	00000000 __flash_rodata_start
081317bc g       *ABS*	00000000 __DTOR_LIST__
0812f9dc g     F .text	00000038 alt_irq_init
0812f738 g     F .text	00000084 alt_release_fd
08131428 g     F .text	00000014 atexit
0812e14c g     F .text	00000060 _write_r
08133250 g     O .rwdata	00000004 _impure_ptr
08134d04 g     O .bss	00000004 alt_argc
0812e458 g     F .text	0000021c __sflush_r
08130864 g     F .text	00000060 _do_dtors
00000020 g       .exceptions	00000000 alt_irq_entry
0812c734 g     F .text	00000018 __fp_unlock_all
0813325c g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
081308e4 g     F .text	00000050 alt_ic_isr_register
08133284 g       *ABS*	00000000 _edata
08134e48 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
0812ffb4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
081309bc g     F .text	0000008c alt_ic_irq_disable
0812e06c g     F .text	0000007c __swrite
08133258 g     O .rwdata	00000004 __malloc_trim_threshold
0813143c g     F .text	00000038 exit
0812ccd8 g     F .text	000000c4 _fwalk_reent
0812eee4 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0812c710 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08131788 g     F .text	00000034 _exit
081305d8 g     F .text	0000012c alt_alarm_start
0812eb94 g     F .text	000001bc __smakebuf_r
0812c304 g     F .text	00000098 strlen
08130e0c g     F .text	0000015c open
081308c4 g     F .text	00000020 alt_icache_flush_all
08133278 g     O .rwdata	00000004 alt_priority_mask
08130934 g     F .text	00000088 alt_ic_irq_enable
0813327c g     O .rwdata	00000008 alt_alarm_list
08130804 g     F .text	00000060 _do_ctors
0812f050 g     F .text	000000d8 close
0812f398 g     F .text	00000084 alt_load
0812c714 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   4:	08400014 	ori	at,at,0
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	008204f4 	movhi	r2,2067
 140:	10935204 	addi	r2,r2,19784
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	008204f4 	movhi	r2,2067
 158:	10935204 	addi	r2,r2,19784
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xf400012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6b517 	ldw	r2,-25900(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6b517 	ldw	r2,-25900(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	068204f4 	movhi	gp,2067
    ori gp, gp, %lo(_gp)
 800000c:	d6ac9214 	ori	gp,gp,45640
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	008204f4 	movhi	r2,2067
    ori r2, r2, %lo(__bss_start)
 8000014:	10933d14 	ori	r2,r2,19700

    movhi r3, %hi(__bss_end)
 8000018:	00c204f4 	movhi	r3,2067
    ori r3, r3, %lo(__bss_end)
 800001c:	18d39214 	ori	r3,r3,20040

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <__alt_data_end+0xfc000024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	812f3980 	call	812f398 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	812f5340 	call	812f534 <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <__alt_data_end+0xfc000038>

0800003c <main>:
#include <stdio.h>
#include "mem.h"


int main() {
 800003c:	defff404 	addi	sp,sp,-48
 8000040:	dfc00b15 	stw	ra,44(sp)
 8000044:	df000a15 	stw	fp,40(sp)
 8000048:	dc000915 	stw	r16,36(sp)
 800004c:	df000a04 	addi	fp,sp,40
    printf("Hello from Nios II!\n");
 8000050:	010204f4 	movhi	r4,2067
 8000054:	2105ef04 	addi	r4,r4,6076
 8000058:	812c2f00 	call	812c2f0 <puts>

    for (int y = 0; y < 480; y++) {
 800005c:	e03ff615 	stw	zero,-40(fp)
 8000060:	00001506 	br	80000b8 <main+0x7c>
        for (int x = 0; x < 640; x++) {
 8000064:	e03ff715 	stw	zero,-36(fp)
 8000068:	00000d06 	br	80000a0 <main+0x64>
            vga_mem[y * 640 + x] = 0;
 800006c:	d4200017 	ldw	r16,-32768(gp)
 8000070:	0140a004 	movi	r5,640
 8000074:	e13ff617 	ldw	r4,-40(fp)
 8000078:	812c2080 	call	812c208 <__mulsi3>
 800007c:	1007883a 	mov	r3,r2
 8000080:	e0bff717 	ldw	r2,-36(fp)
 8000084:	1885883a 	add	r2,r3,r2
 8000088:	1085883a 	add	r2,r2,r2
 800008c:	8085883a 	add	r2,r16,r2
 8000090:	1000000d 	sth	zero,0(r2)

int main() {
    printf("Hello from Nios II!\n");

    for (int y = 0; y < 480; y++) {
        for (int x = 0; x < 640; x++) {
 8000094:	e0bff717 	ldw	r2,-36(fp)
 8000098:	10800044 	addi	r2,r2,1
 800009c:	e0bff715 	stw	r2,-36(fp)
 80000a0:	e0bff717 	ldw	r2,-36(fp)
 80000a4:	1080a010 	cmplti	r2,r2,640
 80000a8:	103ff01e 	bne	r2,zero,800006c <__alt_data_end+0xfc00006c>


int main() {
    printf("Hello from Nios II!\n");

    for (int y = 0; y < 480; y++) {
 80000ac:	e0bff617 	ldw	r2,-40(fp)
 80000b0:	10800044 	addi	r2,r2,1
 80000b4:	e0bff615 	stw	r2,-40(fp)
 80000b8:	e0bff617 	ldw	r2,-40(fp)
 80000bc:	10807810 	cmplti	r2,r2,480
 80000c0:	103fe81e 	bne	r2,zero,8000064 <__alt_data_end+0xfc000064>
        for (int x = 0; x < 640; x++) {
            vga_mem[y * 640 + x] = 0;
        }
    }

    for (int y = 0; y < 240; y++) {
 80000c4:	e03ff815 	stw	zero,-32(fp)
 80000c8:	00001906 	br	8000130 <main+0xf4>
        uint16_t color = 0;
 80000cc:	e03ff90d 	sth	zero,-28(fp)
        for (int x = 0; x < 320; x++) {
 80000d0:	e03ffa15 	stw	zero,-24(fp)
 80000d4:	00001006 	br	8000118 <main+0xdc>
            vga_mem[y * 640 + x] = color++;
 80000d8:	d4200017 	ldw	r16,-32768(gp)
 80000dc:	0140a004 	movi	r5,640
 80000e0:	e13ff817 	ldw	r4,-32(fp)
 80000e4:	812c2080 	call	812c208 <__mulsi3>
 80000e8:	1007883a 	mov	r3,r2
 80000ec:	e0bffa17 	ldw	r2,-24(fp)
 80000f0:	1885883a 	add	r2,r3,r2
 80000f4:	1085883a 	add	r2,r2,r2
 80000f8:	8087883a 	add	r3,r16,r2
 80000fc:	e0bff90b 	ldhu	r2,-28(fp)
 8000100:	11000044 	addi	r4,r2,1
 8000104:	e13ff90d 	sth	r4,-28(fp)
 8000108:	1880000d 	sth	r2,0(r3)
        }
    }

    for (int y = 0; y < 240; y++) {
        uint16_t color = 0;
        for (int x = 0; x < 320; x++) {
 800010c:	e0bffa17 	ldw	r2,-24(fp)
 8000110:	10800044 	addi	r2,r2,1
 8000114:	e0bffa15 	stw	r2,-24(fp)
 8000118:	e0bffa17 	ldw	r2,-24(fp)
 800011c:	10805010 	cmplti	r2,r2,320
 8000120:	103fed1e 	bne	r2,zero,80000d8 <__alt_data_end+0xfc0000d8>
        for (int x = 0; x < 640; x++) {
            vga_mem[y * 640 + x] = 0;
        }
    }

    for (int y = 0; y < 240; y++) {
 8000124:	e0bff817 	ldw	r2,-32(fp)
 8000128:	10800044 	addi	r2,r2,1
 800012c:	e0bff815 	stw	r2,-32(fp)
 8000130:	e0bff817 	ldw	r2,-32(fp)
 8000134:	10803c10 	cmplti	r2,r2,240
 8000138:	103fe41e 	bne	r2,zero,80000cc <__alt_data_end+0xfc0000cc>
        for (int x = 0; x < 320; x++) {
            vga_mem[y * 640 + x] = color++;
        }
    }

    for (int y = 240; y < 480; y++) {
 800013c:	00803c04 	movi	r2,240
 8000140:	e0bffb15 	stw	r2,-20(fp)
 8000144:	00001a06 	br	80001b0 <main+0x174>
        uint16_t color = 0;
 8000148:	e03ffc0d 	sth	zero,-16(fp)
        for (int x = 320; x < 640; x++) {
 800014c:	00805004 	movi	r2,320
 8000150:	e0bffd15 	stw	r2,-12(fp)
 8000154:	00001006 	br	8000198 <main+0x15c>
            vga_mem[y * 640 + x] = color--;
 8000158:	d4200017 	ldw	r16,-32768(gp)
 800015c:	0140a004 	movi	r5,640
 8000160:	e13ffb17 	ldw	r4,-20(fp)
 8000164:	812c2080 	call	812c208 <__mulsi3>
 8000168:	1007883a 	mov	r3,r2
 800016c:	e0bffd17 	ldw	r2,-12(fp)
 8000170:	1885883a 	add	r2,r3,r2
 8000174:	1085883a 	add	r2,r2,r2
 8000178:	8087883a 	add	r3,r16,r2
 800017c:	e0bffc0b 	ldhu	r2,-16(fp)
 8000180:	113fffc4 	addi	r4,r2,-1
 8000184:	e13ffc0d 	sth	r4,-16(fp)
 8000188:	1880000d 	sth	r2,0(r3)
        }
    }

    for (int y = 240; y < 480; y++) {
        uint16_t color = 0;
        for (int x = 320; x < 640; x++) {
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	1080a010 	cmplti	r2,r2,640
 80001a0:	103fed1e 	bne	r2,zero,8000158 <__alt_data_end+0xfc000158>
        for (int x = 0; x < 320; x++) {
            vga_mem[y * 640 + x] = color++;
        }
    }

    for (int y = 240; y < 480; y++) {
 80001a4:	e0bffb17 	ldw	r2,-20(fp)
 80001a8:	10800044 	addi	r2,r2,1
 80001ac:	e0bffb15 	stw	r2,-20(fp)
 80001b0:	e0bffb17 	ldw	r2,-20(fp)
 80001b4:	10807810 	cmplti	r2,r2,480
 80001b8:	103fe31e 	bne	r2,zero,8000148 <__alt_data_end+0xfc000148>
        for (int x = 320; x < 640; x++) {
            vga_mem[y * 640 + x] = color--;
        }
    }

    for (int i = 0; i < 480; i++) {
 80001bc:	e03ffe15 	stw	zero,-8(fp)
 80001c0:	00000a06 	br	80001ec <main+0x1b0>
        vga_mem[i * 640 + i] = 0x0FFF;
 80001c4:	d4200017 	ldw	r16,-32768(gp)
 80001c8:	01414084 	movi	r5,1282
 80001cc:	e13ffe17 	ldw	r4,-8(fp)
 80001d0:	812c2080 	call	812c208 <__mulsi3>
 80001d4:	8085883a 	add	r2,r16,r2
 80001d8:	00c3ffc4 	movi	r3,4095
 80001dc:	10c0000d 	sth	r3,0(r2)
        for (int x = 320; x < 640; x++) {
            vga_mem[y * 640 + x] = color--;
        }
    }

    for (int i = 0; i < 480; i++) {
 80001e0:	e0bffe17 	ldw	r2,-8(fp)
 80001e4:	10800044 	addi	r2,r2,1
 80001e8:	e0bffe15 	stw	r2,-8(fp)
 80001ec:	e0bffe17 	ldw	r2,-8(fp)
 80001f0:	10807810 	cmplti	r2,r2,480
 80001f4:	103ff31e 	bne	r2,zero,80001c4 <__alt_data_end+0xfc0001c4>
        vga_mem[i * 640 + i] = 0x0FFF;
    }

    while (1)
        printf("meme\n");
 80001f8:	010204f4 	movhi	r4,2067
 80001fc:	2105f404 	addi	r4,r4,6096
 8000200:	812c2f00 	call	812c2f0 <puts>
 8000204:	003ffc06 	br	80001f8 <__alt_data_end+0xfc0001f8>

08000208 <frame_buffer_memory>:
	...

0812c208 <__mulsi3>:
 812c208:	0005883a 	mov	r2,zero
 812c20c:	20000726 	beq	r4,zero,812c22c <__mulsi3+0x24>
 812c210:	20c0004c 	andi	r3,r4,1
 812c214:	2008d07a 	srli	r4,r4,1
 812c218:	18000126 	beq	r3,zero,812c220 <__mulsi3+0x18>
 812c21c:	1145883a 	add	r2,r2,r5
 812c220:	294b883a 	add	r5,r5,r5
 812c224:	203ffa1e 	bne	r4,zero,812c210 <__alt_data_end+0xfc12c210>
 812c228:	f800283a 	ret
 812c22c:	f800283a 	ret

0812c230 <_puts_r>:
 812c230:	defff604 	addi	sp,sp,-40
 812c234:	dc000715 	stw	r16,28(sp)
 812c238:	2021883a 	mov	r16,r4
 812c23c:	2809883a 	mov	r4,r5
 812c240:	dc400815 	stw	r17,32(sp)
 812c244:	dfc00915 	stw	ra,36(sp)
 812c248:	2823883a 	mov	r17,r5
 812c24c:	812c3040 	call	812c304 <strlen>
 812c250:	10c00044 	addi	r3,r2,1
 812c254:	d8800115 	stw	r2,4(sp)
 812c258:	008204f4 	movhi	r2,2067
 812c25c:	1085f604 	addi	r2,r2,6104
 812c260:	d8800215 	stw	r2,8(sp)
 812c264:	00800044 	movi	r2,1
 812c268:	d8800315 	stw	r2,12(sp)
 812c26c:	00800084 	movi	r2,2
 812c270:	dc400015 	stw	r17,0(sp)
 812c274:	d8c00615 	stw	r3,24(sp)
 812c278:	dec00415 	stw	sp,16(sp)
 812c27c:	d8800515 	stw	r2,20(sp)
 812c280:	80000226 	beq	r16,zero,812c28c <_puts_r+0x5c>
 812c284:	80800e17 	ldw	r2,56(r16)
 812c288:	10001426 	beq	r2,zero,812c2dc <_puts_r+0xac>
 812c28c:	81400217 	ldw	r5,8(r16)
 812c290:	2880030b 	ldhu	r2,12(r5)
 812c294:	10c8000c 	andi	r3,r2,8192
 812c298:	1800061e 	bne	r3,zero,812c2b4 <_puts_r+0x84>
 812c29c:	29001917 	ldw	r4,100(r5)
 812c2a0:	00f7ffc4 	movi	r3,-8193
 812c2a4:	10880014 	ori	r2,r2,8192
 812c2a8:	20c6703a 	and	r3,r4,r3
 812c2ac:	2880030d 	sth	r2,12(r5)
 812c2b0:	28c01915 	stw	r3,100(r5)
 812c2b4:	d9800404 	addi	r6,sp,16
 812c2b8:	8009883a 	mov	r4,r16
 812c2bc:	812c74c0 	call	812c74c <__sfvwrite_r>
 812c2c0:	1000091e 	bne	r2,zero,812c2e8 <_puts_r+0xb8>
 812c2c4:	00800284 	movi	r2,10
 812c2c8:	dfc00917 	ldw	ra,36(sp)
 812c2cc:	dc400817 	ldw	r17,32(sp)
 812c2d0:	dc000717 	ldw	r16,28(sp)
 812c2d4:	dec00a04 	addi	sp,sp,40
 812c2d8:	f800283a 	ret
 812c2dc:	8009883a 	mov	r4,r16
 812c2e0:	812c6fc0 	call	812c6fc <__sinit>
 812c2e4:	003fe906 	br	812c28c <__alt_data_end+0xfc12c28c>
 812c2e8:	00bfffc4 	movi	r2,-1
 812c2ec:	003ff606 	br	812c2c8 <__alt_data_end+0xfc12c2c8>

0812c2f0 <puts>:
 812c2f0:	008204f4 	movhi	r2,2067
 812c2f4:	108c9404 	addi	r2,r2,12880
 812c2f8:	200b883a 	mov	r5,r4
 812c2fc:	11000017 	ldw	r4,0(r2)
 812c300:	812c2301 	jmpi	812c230 <_puts_r>

0812c304 <strlen>:
 812c304:	208000cc 	andi	r2,r4,3
 812c308:	10002026 	beq	r2,zero,812c38c <strlen+0x88>
 812c30c:	20800007 	ldb	r2,0(r4)
 812c310:	10002026 	beq	r2,zero,812c394 <strlen+0x90>
 812c314:	2005883a 	mov	r2,r4
 812c318:	00000206 	br	812c324 <strlen+0x20>
 812c31c:	10c00007 	ldb	r3,0(r2)
 812c320:	18001826 	beq	r3,zero,812c384 <strlen+0x80>
 812c324:	10800044 	addi	r2,r2,1
 812c328:	10c000cc 	andi	r3,r2,3
 812c32c:	183ffb1e 	bne	r3,zero,812c31c <__alt_data_end+0xfc12c31c>
 812c330:	10c00017 	ldw	r3,0(r2)
 812c334:	01ffbff4 	movhi	r7,65279
 812c338:	39ffbfc4 	addi	r7,r7,-257
 812c33c:	00ca303a 	nor	r5,zero,r3
 812c340:	01a02074 	movhi	r6,32897
 812c344:	19c7883a 	add	r3,r3,r7
 812c348:	31a02004 	addi	r6,r6,-32640
 812c34c:	1946703a 	and	r3,r3,r5
 812c350:	1986703a 	and	r3,r3,r6
 812c354:	1800091e 	bne	r3,zero,812c37c <strlen+0x78>
 812c358:	10800104 	addi	r2,r2,4
 812c35c:	10c00017 	ldw	r3,0(r2)
 812c360:	19cb883a 	add	r5,r3,r7
 812c364:	00c6303a 	nor	r3,zero,r3
 812c368:	28c6703a 	and	r3,r5,r3
 812c36c:	1986703a 	and	r3,r3,r6
 812c370:	183ff926 	beq	r3,zero,812c358 <__alt_data_end+0xfc12c358>
 812c374:	00000106 	br	812c37c <strlen+0x78>
 812c378:	10800044 	addi	r2,r2,1
 812c37c:	10c00007 	ldb	r3,0(r2)
 812c380:	183ffd1e 	bne	r3,zero,812c378 <__alt_data_end+0xfc12c378>
 812c384:	1105c83a 	sub	r2,r2,r4
 812c388:	f800283a 	ret
 812c38c:	2005883a 	mov	r2,r4
 812c390:	003fe706 	br	812c330 <__alt_data_end+0xfc12c330>
 812c394:	0005883a 	mov	r2,zero
 812c398:	f800283a 	ret

0812c39c <__fp_unlock>:
 812c39c:	0005883a 	mov	r2,zero
 812c3a0:	f800283a 	ret

0812c3a4 <_cleanup_r>:
 812c3a4:	014204f4 	movhi	r5,2067
 812c3a8:	2978d504 	addi	r5,r5,-7340
 812c3ac:	812ccd81 	jmpi	812ccd8 <_fwalk_reent>

0812c3b0 <__sinit.part.1>:
 812c3b0:	defff704 	addi	sp,sp,-36
 812c3b4:	00c204f4 	movhi	r3,2067
 812c3b8:	dfc00815 	stw	ra,32(sp)
 812c3bc:	ddc00715 	stw	r23,28(sp)
 812c3c0:	dd800615 	stw	r22,24(sp)
 812c3c4:	dd400515 	stw	r21,20(sp)
 812c3c8:	dd000415 	stw	r20,16(sp)
 812c3cc:	dcc00315 	stw	r19,12(sp)
 812c3d0:	dc800215 	stw	r18,8(sp)
 812c3d4:	dc400115 	stw	r17,4(sp)
 812c3d8:	dc000015 	stw	r16,0(sp)
 812c3dc:	18f0e904 	addi	r3,r3,-15452
 812c3e0:	24000117 	ldw	r16,4(r4)
 812c3e4:	20c00f15 	stw	r3,60(r4)
 812c3e8:	2080bb04 	addi	r2,r4,748
 812c3ec:	00c000c4 	movi	r3,3
 812c3f0:	20c0b915 	stw	r3,740(r4)
 812c3f4:	2080ba15 	stw	r2,744(r4)
 812c3f8:	2000b815 	stw	zero,736(r4)
 812c3fc:	05c00204 	movi	r23,8
 812c400:	00800104 	movi	r2,4
 812c404:	2025883a 	mov	r18,r4
 812c408:	b80d883a 	mov	r6,r23
 812c40c:	81001704 	addi	r4,r16,92
 812c410:	000b883a 	mov	r5,zero
 812c414:	80000015 	stw	zero,0(r16)
 812c418:	80000115 	stw	zero,4(r16)
 812c41c:	80000215 	stw	zero,8(r16)
 812c420:	8080030d 	sth	r2,12(r16)
 812c424:	80001915 	stw	zero,100(r16)
 812c428:	8000038d 	sth	zero,14(r16)
 812c42c:	80000415 	stw	zero,16(r16)
 812c430:	80000515 	stw	zero,20(r16)
 812c434:	80000615 	stw	zero,24(r16)
 812c438:	812d9300 	call	812d930 <memset>
 812c43c:	058204f4 	movhi	r22,2067
 812c440:	94400217 	ldw	r17,8(r18)
 812c444:	054204f4 	movhi	r21,2067
 812c448:	050204f4 	movhi	r20,2067
 812c44c:	04c204f4 	movhi	r19,2067
 812c450:	b5b80404 	addi	r22,r22,-8176
 812c454:	ad781b04 	addi	r21,r21,-8084
 812c458:	a5383a04 	addi	r20,r20,-7960
 812c45c:	9cf85104 	addi	r19,r19,-7868
 812c460:	85800815 	stw	r22,32(r16)
 812c464:	85400915 	stw	r21,36(r16)
 812c468:	85000a15 	stw	r20,40(r16)
 812c46c:	84c00b15 	stw	r19,44(r16)
 812c470:	84000715 	stw	r16,28(r16)
 812c474:	00800284 	movi	r2,10
 812c478:	8880030d 	sth	r2,12(r17)
 812c47c:	00800044 	movi	r2,1
 812c480:	b80d883a 	mov	r6,r23
 812c484:	89001704 	addi	r4,r17,92
 812c488:	000b883a 	mov	r5,zero
 812c48c:	88000015 	stw	zero,0(r17)
 812c490:	88000115 	stw	zero,4(r17)
 812c494:	88000215 	stw	zero,8(r17)
 812c498:	88001915 	stw	zero,100(r17)
 812c49c:	8880038d 	sth	r2,14(r17)
 812c4a0:	88000415 	stw	zero,16(r17)
 812c4a4:	88000515 	stw	zero,20(r17)
 812c4a8:	88000615 	stw	zero,24(r17)
 812c4ac:	812d9300 	call	812d930 <memset>
 812c4b0:	94000317 	ldw	r16,12(r18)
 812c4b4:	00800484 	movi	r2,18
 812c4b8:	8c400715 	stw	r17,28(r17)
 812c4bc:	8d800815 	stw	r22,32(r17)
 812c4c0:	8d400915 	stw	r21,36(r17)
 812c4c4:	8d000a15 	stw	r20,40(r17)
 812c4c8:	8cc00b15 	stw	r19,44(r17)
 812c4cc:	8080030d 	sth	r2,12(r16)
 812c4d0:	00800084 	movi	r2,2
 812c4d4:	80000015 	stw	zero,0(r16)
 812c4d8:	80000115 	stw	zero,4(r16)
 812c4dc:	80000215 	stw	zero,8(r16)
 812c4e0:	80001915 	stw	zero,100(r16)
 812c4e4:	8080038d 	sth	r2,14(r16)
 812c4e8:	80000415 	stw	zero,16(r16)
 812c4ec:	80000515 	stw	zero,20(r16)
 812c4f0:	80000615 	stw	zero,24(r16)
 812c4f4:	b80d883a 	mov	r6,r23
 812c4f8:	000b883a 	mov	r5,zero
 812c4fc:	81001704 	addi	r4,r16,92
 812c500:	812d9300 	call	812d930 <memset>
 812c504:	00800044 	movi	r2,1
 812c508:	84000715 	stw	r16,28(r16)
 812c50c:	85800815 	stw	r22,32(r16)
 812c510:	85400915 	stw	r21,36(r16)
 812c514:	85000a15 	stw	r20,40(r16)
 812c518:	84c00b15 	stw	r19,44(r16)
 812c51c:	90800e15 	stw	r2,56(r18)
 812c520:	dfc00817 	ldw	ra,32(sp)
 812c524:	ddc00717 	ldw	r23,28(sp)
 812c528:	dd800617 	ldw	r22,24(sp)
 812c52c:	dd400517 	ldw	r21,20(sp)
 812c530:	dd000417 	ldw	r20,16(sp)
 812c534:	dcc00317 	ldw	r19,12(sp)
 812c538:	dc800217 	ldw	r18,8(sp)
 812c53c:	dc400117 	ldw	r17,4(sp)
 812c540:	dc000017 	ldw	r16,0(sp)
 812c544:	dec00904 	addi	sp,sp,36
 812c548:	f800283a 	ret

0812c54c <__fp_lock>:
 812c54c:	0005883a 	mov	r2,zero
 812c550:	f800283a 	ret

0812c554 <__sfmoreglue>:
 812c554:	defffc04 	addi	sp,sp,-16
 812c558:	dc800215 	stw	r18,8(sp)
 812c55c:	2825883a 	mov	r18,r5
 812c560:	dc000015 	stw	r16,0(sp)
 812c564:	01401a04 	movi	r5,104
 812c568:	2021883a 	mov	r16,r4
 812c56c:	913fffc4 	addi	r4,r18,-1
 812c570:	dfc00315 	stw	ra,12(sp)
 812c574:	dc400115 	stw	r17,4(sp)
 812c578:	812c2080 	call	812c208 <__mulsi3>
 812c57c:	8009883a 	mov	r4,r16
 812c580:	11401d04 	addi	r5,r2,116
 812c584:	1023883a 	mov	r17,r2
 812c588:	812cd9c0 	call	812cd9c <_malloc_r>
 812c58c:	1021883a 	mov	r16,r2
 812c590:	10000726 	beq	r2,zero,812c5b0 <__sfmoreglue+0x5c>
 812c594:	11000304 	addi	r4,r2,12
 812c598:	10000015 	stw	zero,0(r2)
 812c59c:	14800115 	stw	r18,4(r2)
 812c5a0:	11000215 	stw	r4,8(r2)
 812c5a4:	89801a04 	addi	r6,r17,104
 812c5a8:	000b883a 	mov	r5,zero
 812c5ac:	812d9300 	call	812d930 <memset>
 812c5b0:	8005883a 	mov	r2,r16
 812c5b4:	dfc00317 	ldw	ra,12(sp)
 812c5b8:	dc800217 	ldw	r18,8(sp)
 812c5bc:	dc400117 	ldw	r17,4(sp)
 812c5c0:	dc000017 	ldw	r16,0(sp)
 812c5c4:	dec00404 	addi	sp,sp,16
 812c5c8:	f800283a 	ret

0812c5cc <__sfp>:
 812c5cc:	defffb04 	addi	sp,sp,-20
 812c5d0:	dc000015 	stw	r16,0(sp)
 812c5d4:	040204f4 	movhi	r16,2067
 812c5d8:	840c9304 	addi	r16,r16,12876
 812c5dc:	dcc00315 	stw	r19,12(sp)
 812c5e0:	2027883a 	mov	r19,r4
 812c5e4:	81000017 	ldw	r4,0(r16)
 812c5e8:	dfc00415 	stw	ra,16(sp)
 812c5ec:	dc800215 	stw	r18,8(sp)
 812c5f0:	20800e17 	ldw	r2,56(r4)
 812c5f4:	dc400115 	stw	r17,4(sp)
 812c5f8:	1000021e 	bne	r2,zero,812c604 <__sfp+0x38>
 812c5fc:	812c3b00 	call	812c3b0 <__sinit.part.1>
 812c600:	81000017 	ldw	r4,0(r16)
 812c604:	2480b804 	addi	r18,r4,736
 812c608:	047fffc4 	movi	r17,-1
 812c60c:	91000117 	ldw	r4,4(r18)
 812c610:	94000217 	ldw	r16,8(r18)
 812c614:	213fffc4 	addi	r4,r4,-1
 812c618:	20000a16 	blt	r4,zero,812c644 <__sfp+0x78>
 812c61c:	8080030f 	ldh	r2,12(r16)
 812c620:	10000c26 	beq	r2,zero,812c654 <__sfp+0x88>
 812c624:	80c01d04 	addi	r3,r16,116
 812c628:	00000206 	br	812c634 <__sfp+0x68>
 812c62c:	18bfe60f 	ldh	r2,-104(r3)
 812c630:	10000826 	beq	r2,zero,812c654 <__sfp+0x88>
 812c634:	213fffc4 	addi	r4,r4,-1
 812c638:	1c3ffd04 	addi	r16,r3,-12
 812c63c:	18c01a04 	addi	r3,r3,104
 812c640:	247ffa1e 	bne	r4,r17,812c62c <__alt_data_end+0xfc12c62c>
 812c644:	90800017 	ldw	r2,0(r18)
 812c648:	10001d26 	beq	r2,zero,812c6c0 <__sfp+0xf4>
 812c64c:	1025883a 	mov	r18,r2
 812c650:	003fee06 	br	812c60c <__alt_data_end+0xfc12c60c>
 812c654:	00bfffc4 	movi	r2,-1
 812c658:	8080038d 	sth	r2,14(r16)
 812c65c:	00800044 	movi	r2,1
 812c660:	8080030d 	sth	r2,12(r16)
 812c664:	80001915 	stw	zero,100(r16)
 812c668:	80000015 	stw	zero,0(r16)
 812c66c:	80000215 	stw	zero,8(r16)
 812c670:	80000115 	stw	zero,4(r16)
 812c674:	80000415 	stw	zero,16(r16)
 812c678:	80000515 	stw	zero,20(r16)
 812c67c:	80000615 	stw	zero,24(r16)
 812c680:	01800204 	movi	r6,8
 812c684:	000b883a 	mov	r5,zero
 812c688:	81001704 	addi	r4,r16,92
 812c68c:	812d9300 	call	812d930 <memset>
 812c690:	8005883a 	mov	r2,r16
 812c694:	80000c15 	stw	zero,48(r16)
 812c698:	80000d15 	stw	zero,52(r16)
 812c69c:	80001115 	stw	zero,68(r16)
 812c6a0:	80001215 	stw	zero,72(r16)
 812c6a4:	dfc00417 	ldw	ra,16(sp)
 812c6a8:	dcc00317 	ldw	r19,12(sp)
 812c6ac:	dc800217 	ldw	r18,8(sp)
 812c6b0:	dc400117 	ldw	r17,4(sp)
 812c6b4:	dc000017 	ldw	r16,0(sp)
 812c6b8:	dec00504 	addi	sp,sp,20
 812c6bc:	f800283a 	ret
 812c6c0:	01400104 	movi	r5,4
 812c6c4:	9809883a 	mov	r4,r19
 812c6c8:	812c5540 	call	812c554 <__sfmoreglue>
 812c6cc:	90800015 	stw	r2,0(r18)
 812c6d0:	103fde1e 	bne	r2,zero,812c64c <__alt_data_end+0xfc12c64c>
 812c6d4:	00800304 	movi	r2,12
 812c6d8:	98800015 	stw	r2,0(r19)
 812c6dc:	0005883a 	mov	r2,zero
 812c6e0:	003ff006 	br	812c6a4 <__alt_data_end+0xfc12c6a4>

0812c6e4 <_cleanup>:
 812c6e4:	008204f4 	movhi	r2,2067
 812c6e8:	108c9304 	addi	r2,r2,12876
 812c6ec:	11000017 	ldw	r4,0(r2)
 812c6f0:	014204f4 	movhi	r5,2067
 812c6f4:	2978d504 	addi	r5,r5,-7340
 812c6f8:	812ccd81 	jmpi	812ccd8 <_fwalk_reent>

0812c6fc <__sinit>:
 812c6fc:	20800e17 	ldw	r2,56(r4)
 812c700:	10000126 	beq	r2,zero,812c708 <__sinit+0xc>
 812c704:	f800283a 	ret
 812c708:	812c3b01 	jmpi	812c3b0 <__sinit.part.1>

0812c70c <__sfp_lock_acquire>:
 812c70c:	f800283a 	ret

0812c710 <__sfp_lock_release>:
 812c710:	f800283a 	ret

0812c714 <__sinit_lock_acquire>:
 812c714:	f800283a 	ret

0812c718 <__sinit_lock_release>:
 812c718:	f800283a 	ret

0812c71c <__fp_lock_all>:
 812c71c:	008204f4 	movhi	r2,2067
 812c720:	108c9404 	addi	r2,r2,12880
 812c724:	11000017 	ldw	r4,0(r2)
 812c728:	014204f4 	movhi	r5,2067
 812c72c:	29715304 	addi	r5,r5,-15028
 812c730:	812cc141 	jmpi	812cc14 <_fwalk>

0812c734 <__fp_unlock_all>:
 812c734:	008204f4 	movhi	r2,2067
 812c738:	108c9404 	addi	r2,r2,12880
 812c73c:	11000017 	ldw	r4,0(r2)
 812c740:	014204f4 	movhi	r5,2067
 812c744:	2970e704 	addi	r5,r5,-15460
 812c748:	812cc141 	jmpi	812cc14 <_fwalk>

0812c74c <__sfvwrite_r>:
 812c74c:	30800217 	ldw	r2,8(r6)
 812c750:	10006726 	beq	r2,zero,812c8f0 <__sfvwrite_r+0x1a4>
 812c754:	28c0030b 	ldhu	r3,12(r5)
 812c758:	defff404 	addi	sp,sp,-48
 812c75c:	dd400715 	stw	r21,28(sp)
 812c760:	dd000615 	stw	r20,24(sp)
 812c764:	dc000215 	stw	r16,8(sp)
 812c768:	dfc00b15 	stw	ra,44(sp)
 812c76c:	df000a15 	stw	fp,40(sp)
 812c770:	ddc00915 	stw	r23,36(sp)
 812c774:	dd800815 	stw	r22,32(sp)
 812c778:	dcc00515 	stw	r19,20(sp)
 812c77c:	dc800415 	stw	r18,16(sp)
 812c780:	dc400315 	stw	r17,12(sp)
 812c784:	1880020c 	andi	r2,r3,8
 812c788:	2821883a 	mov	r16,r5
 812c78c:	202b883a 	mov	r21,r4
 812c790:	3029883a 	mov	r20,r6
 812c794:	10002726 	beq	r2,zero,812c834 <__sfvwrite_r+0xe8>
 812c798:	28800417 	ldw	r2,16(r5)
 812c79c:	10002526 	beq	r2,zero,812c834 <__sfvwrite_r+0xe8>
 812c7a0:	1880008c 	andi	r2,r3,2
 812c7a4:	a4400017 	ldw	r17,0(r20)
 812c7a8:	10002a26 	beq	r2,zero,812c854 <__sfvwrite_r+0x108>
 812c7ac:	05a00034 	movhi	r22,32768
 812c7b0:	0027883a 	mov	r19,zero
 812c7b4:	0025883a 	mov	r18,zero
 812c7b8:	b5bf0004 	addi	r22,r22,-1024
 812c7bc:	980d883a 	mov	r6,r19
 812c7c0:	a809883a 	mov	r4,r21
 812c7c4:	90004626 	beq	r18,zero,812c8e0 <__sfvwrite_r+0x194>
 812c7c8:	900f883a 	mov	r7,r18
 812c7cc:	b480022e 	bgeu	r22,r18,812c7d8 <__sfvwrite_r+0x8c>
 812c7d0:	01e00034 	movhi	r7,32768
 812c7d4:	39ff0004 	addi	r7,r7,-1024
 812c7d8:	80800917 	ldw	r2,36(r16)
 812c7dc:	81400717 	ldw	r5,28(r16)
 812c7e0:	103ee83a 	callr	r2
 812c7e4:	00805a0e 	bge	zero,r2,812c950 <__sfvwrite_r+0x204>
 812c7e8:	a0c00217 	ldw	r3,8(r20)
 812c7ec:	98a7883a 	add	r19,r19,r2
 812c7f0:	90a5c83a 	sub	r18,r18,r2
 812c7f4:	1885c83a 	sub	r2,r3,r2
 812c7f8:	a0800215 	stw	r2,8(r20)
 812c7fc:	103fef1e 	bne	r2,zero,812c7bc <__alt_data_end+0xfc12c7bc>
 812c800:	0005883a 	mov	r2,zero
 812c804:	dfc00b17 	ldw	ra,44(sp)
 812c808:	df000a17 	ldw	fp,40(sp)
 812c80c:	ddc00917 	ldw	r23,36(sp)
 812c810:	dd800817 	ldw	r22,32(sp)
 812c814:	dd400717 	ldw	r21,28(sp)
 812c818:	dd000617 	ldw	r20,24(sp)
 812c81c:	dcc00517 	ldw	r19,20(sp)
 812c820:	dc800417 	ldw	r18,16(sp)
 812c824:	dc400317 	ldw	r17,12(sp)
 812c828:	dc000217 	ldw	r16,8(sp)
 812c82c:	dec00c04 	addi	sp,sp,48
 812c830:	f800283a 	ret
 812c834:	800b883a 	mov	r5,r16
 812c838:	a809883a 	mov	r4,r21
 812c83c:	812e1ac0 	call	812e1ac <__swsetup_r>
 812c840:	1000ee1e 	bne	r2,zero,812cbfc <__sfvwrite_r+0x4b0>
 812c844:	80c0030b 	ldhu	r3,12(r16)
 812c848:	a4400017 	ldw	r17,0(r20)
 812c84c:	1880008c 	andi	r2,r3,2
 812c850:	103fd61e 	bne	r2,zero,812c7ac <__alt_data_end+0xfc12c7ac>
 812c854:	1880004c 	andi	r2,r3,1
 812c858:	1000421e 	bne	r2,zero,812c964 <__sfvwrite_r+0x218>
 812c85c:	0039883a 	mov	fp,zero
 812c860:	0025883a 	mov	r18,zero
 812c864:	90001a26 	beq	r18,zero,812c8d0 <__sfvwrite_r+0x184>
 812c868:	1880800c 	andi	r2,r3,512
 812c86c:	84c00217 	ldw	r19,8(r16)
 812c870:	10002126 	beq	r2,zero,812c8f8 <__sfvwrite_r+0x1ac>
 812c874:	982f883a 	mov	r23,r19
 812c878:	94c09636 	bltu	r18,r19,812cad4 <__sfvwrite_r+0x388>
 812c87c:	1881200c 	andi	r2,r3,1152
 812c880:	1000a11e 	bne	r2,zero,812cb08 <__sfvwrite_r+0x3bc>
 812c884:	81000017 	ldw	r4,0(r16)
 812c888:	b80d883a 	mov	r6,r23
 812c88c:	e00b883a 	mov	r5,fp
 812c890:	812d7d40 	call	812d7d4 <memmove>
 812c894:	80c00217 	ldw	r3,8(r16)
 812c898:	81000017 	ldw	r4,0(r16)
 812c89c:	9005883a 	mov	r2,r18
 812c8a0:	1ce7c83a 	sub	r19,r3,r19
 812c8a4:	25cf883a 	add	r7,r4,r23
 812c8a8:	84c00215 	stw	r19,8(r16)
 812c8ac:	81c00015 	stw	r7,0(r16)
 812c8b0:	a0c00217 	ldw	r3,8(r20)
 812c8b4:	e0b9883a 	add	fp,fp,r2
 812c8b8:	90a5c83a 	sub	r18,r18,r2
 812c8bc:	18a7c83a 	sub	r19,r3,r2
 812c8c0:	a4c00215 	stw	r19,8(r20)
 812c8c4:	983fce26 	beq	r19,zero,812c800 <__alt_data_end+0xfc12c800>
 812c8c8:	80c0030b 	ldhu	r3,12(r16)
 812c8cc:	903fe61e 	bne	r18,zero,812c868 <__alt_data_end+0xfc12c868>
 812c8d0:	8f000017 	ldw	fp,0(r17)
 812c8d4:	8c800117 	ldw	r18,4(r17)
 812c8d8:	8c400204 	addi	r17,r17,8
 812c8dc:	003fe106 	br	812c864 <__alt_data_end+0xfc12c864>
 812c8e0:	8cc00017 	ldw	r19,0(r17)
 812c8e4:	8c800117 	ldw	r18,4(r17)
 812c8e8:	8c400204 	addi	r17,r17,8
 812c8ec:	003fb306 	br	812c7bc <__alt_data_end+0xfc12c7bc>
 812c8f0:	0005883a 	mov	r2,zero
 812c8f4:	f800283a 	ret
 812c8f8:	81000017 	ldw	r4,0(r16)
 812c8fc:	80800417 	ldw	r2,16(r16)
 812c900:	11005a36 	bltu	r2,r4,812ca6c <__sfvwrite_r+0x320>
 812c904:	85c00517 	ldw	r23,20(r16)
 812c908:	95c05836 	bltu	r18,r23,812ca6c <__sfvwrite_r+0x320>
 812c90c:	00a00034 	movhi	r2,32768
 812c910:	10bfffc4 	addi	r2,r2,-1
 812c914:	9009883a 	mov	r4,r18
 812c918:	1480012e 	bgeu	r2,r18,812c920 <__sfvwrite_r+0x1d4>
 812c91c:	1009883a 	mov	r4,r2
 812c920:	b80b883a 	mov	r5,r23
 812c924:	812ee600 	call	812ee60 <__divsi3>
 812c928:	b80b883a 	mov	r5,r23
 812c92c:	1009883a 	mov	r4,r2
 812c930:	812c2080 	call	812c208 <__mulsi3>
 812c934:	81400717 	ldw	r5,28(r16)
 812c938:	80c00917 	ldw	r3,36(r16)
 812c93c:	100f883a 	mov	r7,r2
 812c940:	e00d883a 	mov	r6,fp
 812c944:	a809883a 	mov	r4,r21
 812c948:	183ee83a 	callr	r3
 812c94c:	00bfd816 	blt	zero,r2,812c8b0 <__alt_data_end+0xfc12c8b0>
 812c950:	8080030b 	ldhu	r2,12(r16)
 812c954:	10801014 	ori	r2,r2,64
 812c958:	8080030d 	sth	r2,12(r16)
 812c95c:	00bfffc4 	movi	r2,-1
 812c960:	003fa806 	br	812c804 <__alt_data_end+0xfc12c804>
 812c964:	0027883a 	mov	r19,zero
 812c968:	0011883a 	mov	r8,zero
 812c96c:	0039883a 	mov	fp,zero
 812c970:	0025883a 	mov	r18,zero
 812c974:	90001f26 	beq	r18,zero,812c9f4 <__sfvwrite_r+0x2a8>
 812c978:	40005a26 	beq	r8,zero,812cae4 <__sfvwrite_r+0x398>
 812c97c:	982d883a 	mov	r22,r19
 812c980:	94c0012e 	bgeu	r18,r19,812c988 <__sfvwrite_r+0x23c>
 812c984:	902d883a 	mov	r22,r18
 812c988:	81000017 	ldw	r4,0(r16)
 812c98c:	80800417 	ldw	r2,16(r16)
 812c990:	b02f883a 	mov	r23,r22
 812c994:	81c00517 	ldw	r7,20(r16)
 812c998:	1100032e 	bgeu	r2,r4,812c9a8 <__sfvwrite_r+0x25c>
 812c99c:	80c00217 	ldw	r3,8(r16)
 812c9a0:	38c7883a 	add	r3,r7,r3
 812c9a4:	1d801816 	blt	r3,r22,812ca08 <__sfvwrite_r+0x2bc>
 812c9a8:	b1c03e16 	blt	r22,r7,812caa4 <__sfvwrite_r+0x358>
 812c9ac:	80800917 	ldw	r2,36(r16)
 812c9b0:	81400717 	ldw	r5,28(r16)
 812c9b4:	e00d883a 	mov	r6,fp
 812c9b8:	da000115 	stw	r8,4(sp)
 812c9bc:	a809883a 	mov	r4,r21
 812c9c0:	103ee83a 	callr	r2
 812c9c4:	102f883a 	mov	r23,r2
 812c9c8:	da000117 	ldw	r8,4(sp)
 812c9cc:	00bfe00e 	bge	zero,r2,812c950 <__alt_data_end+0xfc12c950>
 812c9d0:	9de7c83a 	sub	r19,r19,r23
 812c9d4:	98001f26 	beq	r19,zero,812ca54 <__sfvwrite_r+0x308>
 812c9d8:	a0800217 	ldw	r2,8(r20)
 812c9dc:	e5f9883a 	add	fp,fp,r23
 812c9e0:	95e5c83a 	sub	r18,r18,r23
 812c9e4:	15efc83a 	sub	r23,r2,r23
 812c9e8:	a5c00215 	stw	r23,8(r20)
 812c9ec:	b83f8426 	beq	r23,zero,812c800 <__alt_data_end+0xfc12c800>
 812c9f0:	903fe11e 	bne	r18,zero,812c978 <__alt_data_end+0xfc12c978>
 812c9f4:	8f000017 	ldw	fp,0(r17)
 812c9f8:	8c800117 	ldw	r18,4(r17)
 812c9fc:	0011883a 	mov	r8,zero
 812ca00:	8c400204 	addi	r17,r17,8
 812ca04:	003fdb06 	br	812c974 <__alt_data_end+0xfc12c974>
 812ca08:	180d883a 	mov	r6,r3
 812ca0c:	e00b883a 	mov	r5,fp
 812ca10:	da000115 	stw	r8,4(sp)
 812ca14:	d8c00015 	stw	r3,0(sp)
 812ca18:	812d7d40 	call	812d7d4 <memmove>
 812ca1c:	d8c00017 	ldw	r3,0(sp)
 812ca20:	80800017 	ldw	r2,0(r16)
 812ca24:	800b883a 	mov	r5,r16
 812ca28:	a809883a 	mov	r4,r21
 812ca2c:	10c5883a 	add	r2,r2,r3
 812ca30:	80800015 	stw	r2,0(r16)
 812ca34:	d8c00015 	stw	r3,0(sp)
 812ca38:	812e6740 	call	812e674 <_fflush_r>
 812ca3c:	d8c00017 	ldw	r3,0(sp)
 812ca40:	da000117 	ldw	r8,4(sp)
 812ca44:	103fc21e 	bne	r2,zero,812c950 <__alt_data_end+0xfc12c950>
 812ca48:	182f883a 	mov	r23,r3
 812ca4c:	9de7c83a 	sub	r19,r19,r23
 812ca50:	983fe11e 	bne	r19,zero,812c9d8 <__alt_data_end+0xfc12c9d8>
 812ca54:	800b883a 	mov	r5,r16
 812ca58:	a809883a 	mov	r4,r21
 812ca5c:	812e6740 	call	812e674 <_fflush_r>
 812ca60:	103fbb1e 	bne	r2,zero,812c950 <__alt_data_end+0xfc12c950>
 812ca64:	0011883a 	mov	r8,zero
 812ca68:	003fdb06 	br	812c9d8 <__alt_data_end+0xfc12c9d8>
 812ca6c:	94c0012e 	bgeu	r18,r19,812ca74 <__sfvwrite_r+0x328>
 812ca70:	9027883a 	mov	r19,r18
 812ca74:	980d883a 	mov	r6,r19
 812ca78:	e00b883a 	mov	r5,fp
 812ca7c:	812d7d40 	call	812d7d4 <memmove>
 812ca80:	80800217 	ldw	r2,8(r16)
 812ca84:	80c00017 	ldw	r3,0(r16)
 812ca88:	14c5c83a 	sub	r2,r2,r19
 812ca8c:	1cc7883a 	add	r3,r3,r19
 812ca90:	80800215 	stw	r2,8(r16)
 812ca94:	80c00015 	stw	r3,0(r16)
 812ca98:	10004326 	beq	r2,zero,812cba8 <__sfvwrite_r+0x45c>
 812ca9c:	9805883a 	mov	r2,r19
 812caa0:	003f8306 	br	812c8b0 <__alt_data_end+0xfc12c8b0>
 812caa4:	b00d883a 	mov	r6,r22
 812caa8:	e00b883a 	mov	r5,fp
 812caac:	da000115 	stw	r8,4(sp)
 812cab0:	812d7d40 	call	812d7d4 <memmove>
 812cab4:	80800217 	ldw	r2,8(r16)
 812cab8:	80c00017 	ldw	r3,0(r16)
 812cabc:	da000117 	ldw	r8,4(sp)
 812cac0:	1585c83a 	sub	r2,r2,r22
 812cac4:	1dad883a 	add	r22,r3,r22
 812cac8:	80800215 	stw	r2,8(r16)
 812cacc:	85800015 	stw	r22,0(r16)
 812cad0:	003fbf06 	br	812c9d0 <__alt_data_end+0xfc12c9d0>
 812cad4:	81000017 	ldw	r4,0(r16)
 812cad8:	9027883a 	mov	r19,r18
 812cadc:	902f883a 	mov	r23,r18
 812cae0:	003f6906 	br	812c888 <__alt_data_end+0xfc12c888>
 812cae4:	900d883a 	mov	r6,r18
 812cae8:	01400284 	movi	r5,10
 812caec:	e009883a 	mov	r4,fp
 812caf0:	812d5a80 	call	812d5a8 <memchr>
 812caf4:	10003e26 	beq	r2,zero,812cbf0 <__sfvwrite_r+0x4a4>
 812caf8:	10800044 	addi	r2,r2,1
 812cafc:	1727c83a 	sub	r19,r2,fp
 812cb00:	02000044 	movi	r8,1
 812cb04:	003f9d06 	br	812c97c <__alt_data_end+0xfc12c97c>
 812cb08:	80800517 	ldw	r2,20(r16)
 812cb0c:	81400417 	ldw	r5,16(r16)
 812cb10:	81c00017 	ldw	r7,0(r16)
 812cb14:	10a7883a 	add	r19,r2,r2
 812cb18:	9885883a 	add	r2,r19,r2
 812cb1c:	1026d7fa 	srli	r19,r2,31
 812cb20:	396dc83a 	sub	r22,r7,r5
 812cb24:	b1000044 	addi	r4,r22,1
 812cb28:	9885883a 	add	r2,r19,r2
 812cb2c:	1027d07a 	srai	r19,r2,1
 812cb30:	2485883a 	add	r2,r4,r18
 812cb34:	980d883a 	mov	r6,r19
 812cb38:	9880022e 	bgeu	r19,r2,812cb44 <__sfvwrite_r+0x3f8>
 812cb3c:	1027883a 	mov	r19,r2
 812cb40:	100d883a 	mov	r6,r2
 812cb44:	18c1000c 	andi	r3,r3,1024
 812cb48:	18001c26 	beq	r3,zero,812cbbc <__sfvwrite_r+0x470>
 812cb4c:	300b883a 	mov	r5,r6
 812cb50:	a809883a 	mov	r4,r21
 812cb54:	812cd9c0 	call	812cd9c <_malloc_r>
 812cb58:	102f883a 	mov	r23,r2
 812cb5c:	10002926 	beq	r2,zero,812cc04 <__sfvwrite_r+0x4b8>
 812cb60:	81400417 	ldw	r5,16(r16)
 812cb64:	b00d883a 	mov	r6,r22
 812cb68:	1009883a 	mov	r4,r2
 812cb6c:	812d68c0 	call	812d68c <memcpy>
 812cb70:	8080030b 	ldhu	r2,12(r16)
 812cb74:	00fedfc4 	movi	r3,-1153
 812cb78:	10c4703a 	and	r2,r2,r3
 812cb7c:	10802014 	ori	r2,r2,128
 812cb80:	8080030d 	sth	r2,12(r16)
 812cb84:	bd89883a 	add	r4,r23,r22
 812cb88:	9d8fc83a 	sub	r7,r19,r22
 812cb8c:	85c00415 	stw	r23,16(r16)
 812cb90:	84c00515 	stw	r19,20(r16)
 812cb94:	81000015 	stw	r4,0(r16)
 812cb98:	9027883a 	mov	r19,r18
 812cb9c:	81c00215 	stw	r7,8(r16)
 812cba0:	902f883a 	mov	r23,r18
 812cba4:	003f3806 	br	812c888 <__alt_data_end+0xfc12c888>
 812cba8:	800b883a 	mov	r5,r16
 812cbac:	a809883a 	mov	r4,r21
 812cbb0:	812e6740 	call	812e674 <_fflush_r>
 812cbb4:	103fb926 	beq	r2,zero,812ca9c <__alt_data_end+0xfc12ca9c>
 812cbb8:	003f6506 	br	812c950 <__alt_data_end+0xfc12c950>
 812cbbc:	a809883a 	mov	r4,r21
 812cbc0:	812da580 	call	812da58 <_realloc_r>
 812cbc4:	102f883a 	mov	r23,r2
 812cbc8:	103fee1e 	bne	r2,zero,812cb84 <__alt_data_end+0xfc12cb84>
 812cbcc:	81400417 	ldw	r5,16(r16)
 812cbd0:	a809883a 	mov	r4,r21
 812cbd4:	812e8240 	call	812e824 <_free_r>
 812cbd8:	8080030b 	ldhu	r2,12(r16)
 812cbdc:	00ffdfc4 	movi	r3,-129
 812cbe0:	1884703a 	and	r2,r3,r2
 812cbe4:	00c00304 	movi	r3,12
 812cbe8:	a8c00015 	stw	r3,0(r21)
 812cbec:	003f5906 	br	812c954 <__alt_data_end+0xfc12c954>
 812cbf0:	94c00044 	addi	r19,r18,1
 812cbf4:	02000044 	movi	r8,1
 812cbf8:	003f6006 	br	812c97c <__alt_data_end+0xfc12c97c>
 812cbfc:	00bfffc4 	movi	r2,-1
 812cc00:	003f0006 	br	812c804 <__alt_data_end+0xfc12c804>
 812cc04:	00800304 	movi	r2,12
 812cc08:	a8800015 	stw	r2,0(r21)
 812cc0c:	8080030b 	ldhu	r2,12(r16)
 812cc10:	003f5006 	br	812c954 <__alt_data_end+0xfc12c954>

0812cc14 <_fwalk>:
 812cc14:	defff704 	addi	sp,sp,-36
 812cc18:	dd000415 	stw	r20,16(sp)
 812cc1c:	dfc00815 	stw	ra,32(sp)
 812cc20:	ddc00715 	stw	r23,28(sp)
 812cc24:	dd800615 	stw	r22,24(sp)
 812cc28:	dd400515 	stw	r21,20(sp)
 812cc2c:	dcc00315 	stw	r19,12(sp)
 812cc30:	dc800215 	stw	r18,8(sp)
 812cc34:	dc400115 	stw	r17,4(sp)
 812cc38:	dc000015 	stw	r16,0(sp)
 812cc3c:	2500b804 	addi	r20,r4,736
 812cc40:	a0002326 	beq	r20,zero,812ccd0 <_fwalk+0xbc>
 812cc44:	282b883a 	mov	r21,r5
 812cc48:	002f883a 	mov	r23,zero
 812cc4c:	05800044 	movi	r22,1
 812cc50:	04ffffc4 	movi	r19,-1
 812cc54:	a4400117 	ldw	r17,4(r20)
 812cc58:	a4800217 	ldw	r18,8(r20)
 812cc5c:	8c7fffc4 	addi	r17,r17,-1
 812cc60:	88000d16 	blt	r17,zero,812cc98 <_fwalk+0x84>
 812cc64:	94000304 	addi	r16,r18,12
 812cc68:	94800384 	addi	r18,r18,14
 812cc6c:	8080000b 	ldhu	r2,0(r16)
 812cc70:	8c7fffc4 	addi	r17,r17,-1
 812cc74:	813ffd04 	addi	r4,r16,-12
 812cc78:	b080042e 	bgeu	r22,r2,812cc8c <_fwalk+0x78>
 812cc7c:	9080000f 	ldh	r2,0(r18)
 812cc80:	14c00226 	beq	r2,r19,812cc8c <_fwalk+0x78>
 812cc84:	a83ee83a 	callr	r21
 812cc88:	b8aeb03a 	or	r23,r23,r2
 812cc8c:	84001a04 	addi	r16,r16,104
 812cc90:	94801a04 	addi	r18,r18,104
 812cc94:	8cfff51e 	bne	r17,r19,812cc6c <__alt_data_end+0xfc12cc6c>
 812cc98:	a5000017 	ldw	r20,0(r20)
 812cc9c:	a03fed1e 	bne	r20,zero,812cc54 <__alt_data_end+0xfc12cc54>
 812cca0:	b805883a 	mov	r2,r23
 812cca4:	dfc00817 	ldw	ra,32(sp)
 812cca8:	ddc00717 	ldw	r23,28(sp)
 812ccac:	dd800617 	ldw	r22,24(sp)
 812ccb0:	dd400517 	ldw	r21,20(sp)
 812ccb4:	dd000417 	ldw	r20,16(sp)
 812ccb8:	dcc00317 	ldw	r19,12(sp)
 812ccbc:	dc800217 	ldw	r18,8(sp)
 812ccc0:	dc400117 	ldw	r17,4(sp)
 812ccc4:	dc000017 	ldw	r16,0(sp)
 812ccc8:	dec00904 	addi	sp,sp,36
 812cccc:	f800283a 	ret
 812ccd0:	002f883a 	mov	r23,zero
 812ccd4:	003ff206 	br	812cca0 <__alt_data_end+0xfc12cca0>

0812ccd8 <_fwalk_reent>:
 812ccd8:	defff704 	addi	sp,sp,-36
 812ccdc:	dd000415 	stw	r20,16(sp)
 812cce0:	dfc00815 	stw	ra,32(sp)
 812cce4:	ddc00715 	stw	r23,28(sp)
 812cce8:	dd800615 	stw	r22,24(sp)
 812ccec:	dd400515 	stw	r21,20(sp)
 812ccf0:	dcc00315 	stw	r19,12(sp)
 812ccf4:	dc800215 	stw	r18,8(sp)
 812ccf8:	dc400115 	stw	r17,4(sp)
 812ccfc:	dc000015 	stw	r16,0(sp)
 812cd00:	2500b804 	addi	r20,r4,736
 812cd04:	a0002326 	beq	r20,zero,812cd94 <_fwalk_reent+0xbc>
 812cd08:	282b883a 	mov	r21,r5
 812cd0c:	2027883a 	mov	r19,r4
 812cd10:	002f883a 	mov	r23,zero
 812cd14:	05800044 	movi	r22,1
 812cd18:	04bfffc4 	movi	r18,-1
 812cd1c:	a4400117 	ldw	r17,4(r20)
 812cd20:	a4000217 	ldw	r16,8(r20)
 812cd24:	8c7fffc4 	addi	r17,r17,-1
 812cd28:	88000c16 	blt	r17,zero,812cd5c <_fwalk_reent+0x84>
 812cd2c:	84000304 	addi	r16,r16,12
 812cd30:	8080000b 	ldhu	r2,0(r16)
 812cd34:	8c7fffc4 	addi	r17,r17,-1
 812cd38:	817ffd04 	addi	r5,r16,-12
 812cd3c:	b080052e 	bgeu	r22,r2,812cd54 <_fwalk_reent+0x7c>
 812cd40:	8080008f 	ldh	r2,2(r16)
 812cd44:	9809883a 	mov	r4,r19
 812cd48:	14800226 	beq	r2,r18,812cd54 <_fwalk_reent+0x7c>
 812cd4c:	a83ee83a 	callr	r21
 812cd50:	b8aeb03a 	or	r23,r23,r2
 812cd54:	84001a04 	addi	r16,r16,104
 812cd58:	8cbff51e 	bne	r17,r18,812cd30 <__alt_data_end+0xfc12cd30>
 812cd5c:	a5000017 	ldw	r20,0(r20)
 812cd60:	a03fee1e 	bne	r20,zero,812cd1c <__alt_data_end+0xfc12cd1c>
 812cd64:	b805883a 	mov	r2,r23
 812cd68:	dfc00817 	ldw	ra,32(sp)
 812cd6c:	ddc00717 	ldw	r23,28(sp)
 812cd70:	dd800617 	ldw	r22,24(sp)
 812cd74:	dd400517 	ldw	r21,20(sp)
 812cd78:	dd000417 	ldw	r20,16(sp)
 812cd7c:	dcc00317 	ldw	r19,12(sp)
 812cd80:	dc800217 	ldw	r18,8(sp)
 812cd84:	dc400117 	ldw	r17,4(sp)
 812cd88:	dc000017 	ldw	r16,0(sp)
 812cd8c:	dec00904 	addi	sp,sp,36
 812cd90:	f800283a 	ret
 812cd94:	002f883a 	mov	r23,zero
 812cd98:	003ff206 	br	812cd64 <__alt_data_end+0xfc12cd64>

0812cd9c <_malloc_r>:
 812cd9c:	defff504 	addi	sp,sp,-44
 812cda0:	dc800315 	stw	r18,12(sp)
 812cda4:	dfc00a15 	stw	ra,40(sp)
 812cda8:	df000915 	stw	fp,36(sp)
 812cdac:	ddc00815 	stw	r23,32(sp)
 812cdb0:	dd800715 	stw	r22,28(sp)
 812cdb4:	dd400615 	stw	r21,24(sp)
 812cdb8:	dd000515 	stw	r20,20(sp)
 812cdbc:	dcc00415 	stw	r19,16(sp)
 812cdc0:	dc400215 	stw	r17,8(sp)
 812cdc4:	dc000115 	stw	r16,4(sp)
 812cdc8:	288002c4 	addi	r2,r5,11
 812cdcc:	00c00584 	movi	r3,22
 812cdd0:	2025883a 	mov	r18,r4
 812cdd4:	18807f2e 	bgeu	r3,r2,812cfd4 <_malloc_r+0x238>
 812cdd8:	047ffe04 	movi	r17,-8
 812cddc:	1462703a 	and	r17,r2,r17
 812cde0:	8800a316 	blt	r17,zero,812d070 <_malloc_r+0x2d4>
 812cde4:	8940a236 	bltu	r17,r5,812d070 <_malloc_r+0x2d4>
 812cde8:	812f5b00 	call	812f5b0 <__malloc_lock>
 812cdec:	00807dc4 	movi	r2,503
 812cdf0:	1441e92e 	bgeu	r2,r17,812d598 <_malloc_r+0x7fc>
 812cdf4:	8804d27a 	srli	r2,r17,9
 812cdf8:	1000a126 	beq	r2,zero,812d080 <_malloc_r+0x2e4>
 812cdfc:	00c00104 	movi	r3,4
 812ce00:	18811e36 	bltu	r3,r2,812d27c <_malloc_r+0x4e0>
 812ce04:	8804d1ba 	srli	r2,r17,6
 812ce08:	12000e44 	addi	r8,r2,57
 812ce0c:	11c00e04 	addi	r7,r2,56
 812ce10:	4209883a 	add	r4,r8,r8
 812ce14:	04c204f4 	movhi	r19,2067
 812ce18:	2109883a 	add	r4,r4,r4
 812ce1c:	9cc70e04 	addi	r19,r19,7224
 812ce20:	2109883a 	add	r4,r4,r4
 812ce24:	9909883a 	add	r4,r19,r4
 812ce28:	24000117 	ldw	r16,4(r4)
 812ce2c:	213ffe04 	addi	r4,r4,-8
 812ce30:	24009726 	beq	r4,r16,812d090 <_malloc_r+0x2f4>
 812ce34:	80800117 	ldw	r2,4(r16)
 812ce38:	01bfff04 	movi	r6,-4
 812ce3c:	014003c4 	movi	r5,15
 812ce40:	1184703a 	and	r2,r2,r6
 812ce44:	1447c83a 	sub	r3,r2,r17
 812ce48:	28c00716 	blt	r5,r3,812ce68 <_malloc_r+0xcc>
 812ce4c:	1800920e 	bge	r3,zero,812d098 <_malloc_r+0x2fc>
 812ce50:	84000317 	ldw	r16,12(r16)
 812ce54:	24008e26 	beq	r4,r16,812d090 <_malloc_r+0x2f4>
 812ce58:	80800117 	ldw	r2,4(r16)
 812ce5c:	1184703a 	and	r2,r2,r6
 812ce60:	1447c83a 	sub	r3,r2,r17
 812ce64:	28fff90e 	bge	r5,r3,812ce4c <__alt_data_end+0xfc12ce4c>
 812ce68:	3809883a 	mov	r4,r7
 812ce6c:	018204f4 	movhi	r6,2067
 812ce70:	9c000417 	ldw	r16,16(r19)
 812ce74:	31870e04 	addi	r6,r6,7224
 812ce78:	32000204 	addi	r8,r6,8
 812ce7c:	82013426 	beq	r16,r8,812d350 <_malloc_r+0x5b4>
 812ce80:	80c00117 	ldw	r3,4(r16)
 812ce84:	00bfff04 	movi	r2,-4
 812ce88:	188e703a 	and	r7,r3,r2
 812ce8c:	3c45c83a 	sub	r2,r7,r17
 812ce90:	00c003c4 	movi	r3,15
 812ce94:	18811f16 	blt	r3,r2,812d314 <_malloc_r+0x578>
 812ce98:	32000515 	stw	r8,20(r6)
 812ce9c:	32000415 	stw	r8,16(r6)
 812cea0:	10007f0e 	bge	r2,zero,812d0a0 <_malloc_r+0x304>
 812cea4:	00807fc4 	movi	r2,511
 812cea8:	11c0fd36 	bltu	r2,r7,812d2a0 <_malloc_r+0x504>
 812ceac:	3806d0fa 	srli	r3,r7,3
 812ceb0:	01c00044 	movi	r7,1
 812ceb4:	30800117 	ldw	r2,4(r6)
 812ceb8:	19400044 	addi	r5,r3,1
 812cebc:	294b883a 	add	r5,r5,r5
 812cec0:	1807d0ba 	srai	r3,r3,2
 812cec4:	294b883a 	add	r5,r5,r5
 812cec8:	294b883a 	add	r5,r5,r5
 812cecc:	298b883a 	add	r5,r5,r6
 812ced0:	38c6983a 	sll	r3,r7,r3
 812ced4:	29c00017 	ldw	r7,0(r5)
 812ced8:	2a7ffe04 	addi	r9,r5,-8
 812cedc:	1886b03a 	or	r3,r3,r2
 812cee0:	82400315 	stw	r9,12(r16)
 812cee4:	81c00215 	stw	r7,8(r16)
 812cee8:	30c00115 	stw	r3,4(r6)
 812ceec:	2c000015 	stw	r16,0(r5)
 812cef0:	3c000315 	stw	r16,12(r7)
 812cef4:	2005d0ba 	srai	r2,r4,2
 812cef8:	01400044 	movi	r5,1
 812cefc:	288a983a 	sll	r5,r5,r2
 812cf00:	19406f36 	bltu	r3,r5,812d0c0 <_malloc_r+0x324>
 812cf04:	28c4703a 	and	r2,r5,r3
 812cf08:	10000a1e 	bne	r2,zero,812cf34 <_malloc_r+0x198>
 812cf0c:	00bfff04 	movi	r2,-4
 812cf10:	294b883a 	add	r5,r5,r5
 812cf14:	2088703a 	and	r4,r4,r2
 812cf18:	28c4703a 	and	r2,r5,r3
 812cf1c:	21000104 	addi	r4,r4,4
 812cf20:	1000041e 	bne	r2,zero,812cf34 <_malloc_r+0x198>
 812cf24:	294b883a 	add	r5,r5,r5
 812cf28:	28c4703a 	and	r2,r5,r3
 812cf2c:	21000104 	addi	r4,r4,4
 812cf30:	103ffc26 	beq	r2,zero,812cf24 <__alt_data_end+0xfc12cf24>
 812cf34:	02bfff04 	movi	r10,-4
 812cf38:	024003c4 	movi	r9,15
 812cf3c:	21800044 	addi	r6,r4,1
 812cf40:	318d883a 	add	r6,r6,r6
 812cf44:	318d883a 	add	r6,r6,r6
 812cf48:	318d883a 	add	r6,r6,r6
 812cf4c:	998d883a 	add	r6,r19,r6
 812cf50:	333ffe04 	addi	r12,r6,-8
 812cf54:	2017883a 	mov	r11,r4
 812cf58:	31800104 	addi	r6,r6,4
 812cf5c:	34000017 	ldw	r16,0(r6)
 812cf60:	31fffd04 	addi	r7,r6,-12
 812cf64:	81c0041e 	bne	r16,r7,812cf78 <_malloc_r+0x1dc>
 812cf68:	0000fb06 	br	812d358 <_malloc_r+0x5bc>
 812cf6c:	1801030e 	bge	r3,zero,812d37c <_malloc_r+0x5e0>
 812cf70:	84000317 	ldw	r16,12(r16)
 812cf74:	81c0f826 	beq	r16,r7,812d358 <_malloc_r+0x5bc>
 812cf78:	80800117 	ldw	r2,4(r16)
 812cf7c:	1284703a 	and	r2,r2,r10
 812cf80:	1447c83a 	sub	r3,r2,r17
 812cf84:	48fff90e 	bge	r9,r3,812cf6c <__alt_data_end+0xfc12cf6c>
 812cf88:	80800317 	ldw	r2,12(r16)
 812cf8c:	81000217 	ldw	r4,8(r16)
 812cf90:	89400054 	ori	r5,r17,1
 812cf94:	81400115 	stw	r5,4(r16)
 812cf98:	20800315 	stw	r2,12(r4)
 812cf9c:	11000215 	stw	r4,8(r2)
 812cfa0:	8463883a 	add	r17,r16,r17
 812cfa4:	9c400515 	stw	r17,20(r19)
 812cfa8:	9c400415 	stw	r17,16(r19)
 812cfac:	18800054 	ori	r2,r3,1
 812cfb0:	88800115 	stw	r2,4(r17)
 812cfb4:	8a000315 	stw	r8,12(r17)
 812cfb8:	8a000215 	stw	r8,8(r17)
 812cfbc:	88e3883a 	add	r17,r17,r3
 812cfc0:	88c00015 	stw	r3,0(r17)
 812cfc4:	9009883a 	mov	r4,r18
 812cfc8:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812cfcc:	80800204 	addi	r2,r16,8
 812cfd0:	00001b06 	br	812d040 <_malloc_r+0x2a4>
 812cfd4:	04400404 	movi	r17,16
 812cfd8:	89402536 	bltu	r17,r5,812d070 <_malloc_r+0x2d4>
 812cfdc:	812f5b00 	call	812f5b0 <__malloc_lock>
 812cfe0:	00800184 	movi	r2,6
 812cfe4:	01000084 	movi	r4,2
 812cfe8:	04c204f4 	movhi	r19,2067
 812cfec:	1085883a 	add	r2,r2,r2
 812cff0:	9cc70e04 	addi	r19,r19,7224
 812cff4:	1085883a 	add	r2,r2,r2
 812cff8:	9885883a 	add	r2,r19,r2
 812cffc:	14000117 	ldw	r16,4(r2)
 812d000:	10fffe04 	addi	r3,r2,-8
 812d004:	80c0d926 	beq	r16,r3,812d36c <_malloc_r+0x5d0>
 812d008:	80c00117 	ldw	r3,4(r16)
 812d00c:	81000317 	ldw	r4,12(r16)
 812d010:	00bfff04 	movi	r2,-4
 812d014:	1884703a 	and	r2,r3,r2
 812d018:	81400217 	ldw	r5,8(r16)
 812d01c:	8085883a 	add	r2,r16,r2
 812d020:	10c00117 	ldw	r3,4(r2)
 812d024:	29000315 	stw	r4,12(r5)
 812d028:	21400215 	stw	r5,8(r4)
 812d02c:	18c00054 	ori	r3,r3,1
 812d030:	10c00115 	stw	r3,4(r2)
 812d034:	9009883a 	mov	r4,r18
 812d038:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d03c:	80800204 	addi	r2,r16,8
 812d040:	dfc00a17 	ldw	ra,40(sp)
 812d044:	df000917 	ldw	fp,36(sp)
 812d048:	ddc00817 	ldw	r23,32(sp)
 812d04c:	dd800717 	ldw	r22,28(sp)
 812d050:	dd400617 	ldw	r21,24(sp)
 812d054:	dd000517 	ldw	r20,20(sp)
 812d058:	dcc00417 	ldw	r19,16(sp)
 812d05c:	dc800317 	ldw	r18,12(sp)
 812d060:	dc400217 	ldw	r17,8(sp)
 812d064:	dc000117 	ldw	r16,4(sp)
 812d068:	dec00b04 	addi	sp,sp,44
 812d06c:	f800283a 	ret
 812d070:	00800304 	movi	r2,12
 812d074:	90800015 	stw	r2,0(r18)
 812d078:	0005883a 	mov	r2,zero
 812d07c:	003ff006 	br	812d040 <__alt_data_end+0xfc12d040>
 812d080:	01002004 	movi	r4,128
 812d084:	02001004 	movi	r8,64
 812d088:	01c00fc4 	movi	r7,63
 812d08c:	003f6106 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d090:	4009883a 	mov	r4,r8
 812d094:	003f7506 	br	812ce6c <__alt_data_end+0xfc12ce6c>
 812d098:	81000317 	ldw	r4,12(r16)
 812d09c:	003fde06 	br	812d018 <__alt_data_end+0xfc12d018>
 812d0a0:	81c5883a 	add	r2,r16,r7
 812d0a4:	11400117 	ldw	r5,4(r2)
 812d0a8:	9009883a 	mov	r4,r18
 812d0ac:	29400054 	ori	r5,r5,1
 812d0b0:	11400115 	stw	r5,4(r2)
 812d0b4:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d0b8:	80800204 	addi	r2,r16,8
 812d0bc:	003fe006 	br	812d040 <__alt_data_end+0xfc12d040>
 812d0c0:	9c000217 	ldw	r16,8(r19)
 812d0c4:	00bfff04 	movi	r2,-4
 812d0c8:	85800117 	ldw	r22,4(r16)
 812d0cc:	b0ac703a 	and	r22,r22,r2
 812d0d0:	b4400336 	bltu	r22,r17,812d0e0 <_malloc_r+0x344>
 812d0d4:	b445c83a 	sub	r2,r22,r17
 812d0d8:	00c003c4 	movi	r3,15
 812d0dc:	18805d16 	blt	r3,r2,812d254 <_malloc_r+0x4b8>
 812d0e0:	05c204f4 	movhi	r23,2067
 812d0e4:	008204f4 	movhi	r2,2067
 812d0e8:	10933f04 	addi	r2,r2,19708
 812d0ec:	bdcc9504 	addi	r23,r23,12884
 812d0f0:	15400017 	ldw	r21,0(r2)
 812d0f4:	b8c00017 	ldw	r3,0(r23)
 812d0f8:	00bfffc4 	movi	r2,-1
 812d0fc:	858d883a 	add	r6,r16,r22
 812d100:	8d6b883a 	add	r21,r17,r21
 812d104:	1880ea26 	beq	r3,r2,812d4b0 <_malloc_r+0x714>
 812d108:	ad4403c4 	addi	r21,r21,4111
 812d10c:	00bc0004 	movi	r2,-4096
 812d110:	a8aa703a 	and	r21,r21,r2
 812d114:	a80b883a 	mov	r5,r21
 812d118:	9009883a 	mov	r4,r18
 812d11c:	d9800015 	stw	r6,0(sp)
 812d120:	812dfbc0 	call	812dfbc <_sbrk_r>
 812d124:	1029883a 	mov	r20,r2
 812d128:	00bfffc4 	movi	r2,-1
 812d12c:	d9800017 	ldw	r6,0(sp)
 812d130:	a080e826 	beq	r20,r2,812d4d4 <_malloc_r+0x738>
 812d134:	a180a636 	bltu	r20,r6,812d3d0 <_malloc_r+0x634>
 812d138:	070204f4 	movhi	fp,2067
 812d13c:	e7134804 	addi	fp,fp,19744
 812d140:	e0800017 	ldw	r2,0(fp)
 812d144:	a887883a 	add	r3,r21,r2
 812d148:	e0c00015 	stw	r3,0(fp)
 812d14c:	3500e626 	beq	r6,r20,812d4e8 <_malloc_r+0x74c>
 812d150:	b9000017 	ldw	r4,0(r23)
 812d154:	00bfffc4 	movi	r2,-1
 812d158:	2080ee26 	beq	r4,r2,812d514 <_malloc_r+0x778>
 812d15c:	a185c83a 	sub	r2,r20,r6
 812d160:	10c5883a 	add	r2,r2,r3
 812d164:	e0800015 	stw	r2,0(fp)
 812d168:	a0c001cc 	andi	r3,r20,7
 812d16c:	1800bc26 	beq	r3,zero,812d460 <_malloc_r+0x6c4>
 812d170:	a0e9c83a 	sub	r20,r20,r3
 812d174:	00840204 	movi	r2,4104
 812d178:	a5000204 	addi	r20,r20,8
 812d17c:	10c7c83a 	sub	r3,r2,r3
 812d180:	a545883a 	add	r2,r20,r21
 812d184:	1083ffcc 	andi	r2,r2,4095
 812d188:	18abc83a 	sub	r21,r3,r2
 812d18c:	a80b883a 	mov	r5,r21
 812d190:	9009883a 	mov	r4,r18
 812d194:	812dfbc0 	call	812dfbc <_sbrk_r>
 812d198:	00ffffc4 	movi	r3,-1
 812d19c:	10c0e126 	beq	r2,r3,812d524 <_malloc_r+0x788>
 812d1a0:	1505c83a 	sub	r2,r2,r20
 812d1a4:	1545883a 	add	r2,r2,r21
 812d1a8:	10800054 	ori	r2,r2,1
 812d1ac:	e0c00017 	ldw	r3,0(fp)
 812d1b0:	9d000215 	stw	r20,8(r19)
 812d1b4:	a0800115 	stw	r2,4(r20)
 812d1b8:	a8c7883a 	add	r3,r21,r3
 812d1bc:	e0c00015 	stw	r3,0(fp)
 812d1c0:	84c00e26 	beq	r16,r19,812d1fc <_malloc_r+0x460>
 812d1c4:	018003c4 	movi	r6,15
 812d1c8:	3580a72e 	bgeu	r6,r22,812d468 <_malloc_r+0x6cc>
 812d1cc:	81400117 	ldw	r5,4(r16)
 812d1d0:	013ffe04 	movi	r4,-8
 812d1d4:	b0bffd04 	addi	r2,r22,-12
 812d1d8:	1104703a 	and	r2,r2,r4
 812d1dc:	2900004c 	andi	r4,r5,1
 812d1e0:	2088b03a 	or	r4,r4,r2
 812d1e4:	81000115 	stw	r4,4(r16)
 812d1e8:	01400144 	movi	r5,5
 812d1ec:	8089883a 	add	r4,r16,r2
 812d1f0:	21400115 	stw	r5,4(r4)
 812d1f4:	21400215 	stw	r5,8(r4)
 812d1f8:	3080cd36 	bltu	r6,r2,812d530 <_malloc_r+0x794>
 812d1fc:	008204f4 	movhi	r2,2067
 812d200:	10933e04 	addi	r2,r2,19704
 812d204:	11000017 	ldw	r4,0(r2)
 812d208:	20c0012e 	bgeu	r4,r3,812d210 <_malloc_r+0x474>
 812d20c:	10c00015 	stw	r3,0(r2)
 812d210:	008204f4 	movhi	r2,2067
 812d214:	10933d04 	addi	r2,r2,19700
 812d218:	11000017 	ldw	r4,0(r2)
 812d21c:	9c000217 	ldw	r16,8(r19)
 812d220:	20c0012e 	bgeu	r4,r3,812d228 <_malloc_r+0x48c>
 812d224:	10c00015 	stw	r3,0(r2)
 812d228:	80c00117 	ldw	r3,4(r16)
 812d22c:	00bfff04 	movi	r2,-4
 812d230:	1886703a 	and	r3,r3,r2
 812d234:	1c45c83a 	sub	r2,r3,r17
 812d238:	1c400236 	bltu	r3,r17,812d244 <_malloc_r+0x4a8>
 812d23c:	00c003c4 	movi	r3,15
 812d240:	18800416 	blt	r3,r2,812d254 <_malloc_r+0x4b8>
 812d244:	9009883a 	mov	r4,r18
 812d248:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d24c:	0005883a 	mov	r2,zero
 812d250:	003f7b06 	br	812d040 <__alt_data_end+0xfc12d040>
 812d254:	88c00054 	ori	r3,r17,1
 812d258:	80c00115 	stw	r3,4(r16)
 812d25c:	8463883a 	add	r17,r16,r17
 812d260:	10800054 	ori	r2,r2,1
 812d264:	9c400215 	stw	r17,8(r19)
 812d268:	88800115 	stw	r2,4(r17)
 812d26c:	9009883a 	mov	r4,r18
 812d270:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d274:	80800204 	addi	r2,r16,8
 812d278:	003f7106 	br	812d040 <__alt_data_end+0xfc12d040>
 812d27c:	00c00504 	movi	r3,20
 812d280:	18804a2e 	bgeu	r3,r2,812d3ac <_malloc_r+0x610>
 812d284:	00c01504 	movi	r3,84
 812d288:	18806e36 	bltu	r3,r2,812d444 <_malloc_r+0x6a8>
 812d28c:	8804d33a 	srli	r2,r17,12
 812d290:	12001bc4 	addi	r8,r2,111
 812d294:	11c01b84 	addi	r7,r2,110
 812d298:	4209883a 	add	r4,r8,r8
 812d29c:	003edd06 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d2a0:	3804d27a 	srli	r2,r7,9
 812d2a4:	00c00104 	movi	r3,4
 812d2a8:	1880442e 	bgeu	r3,r2,812d3bc <_malloc_r+0x620>
 812d2ac:	00c00504 	movi	r3,20
 812d2b0:	18808136 	bltu	r3,r2,812d4b8 <_malloc_r+0x71c>
 812d2b4:	11401704 	addi	r5,r2,92
 812d2b8:	10c016c4 	addi	r3,r2,91
 812d2bc:	294b883a 	add	r5,r5,r5
 812d2c0:	294b883a 	add	r5,r5,r5
 812d2c4:	294b883a 	add	r5,r5,r5
 812d2c8:	994b883a 	add	r5,r19,r5
 812d2cc:	28800017 	ldw	r2,0(r5)
 812d2d0:	018204f4 	movhi	r6,2067
 812d2d4:	297ffe04 	addi	r5,r5,-8
 812d2d8:	31870e04 	addi	r6,r6,7224
 812d2dc:	28806526 	beq	r5,r2,812d474 <_malloc_r+0x6d8>
 812d2e0:	01bfff04 	movi	r6,-4
 812d2e4:	10c00117 	ldw	r3,4(r2)
 812d2e8:	1986703a 	and	r3,r3,r6
 812d2ec:	38c0022e 	bgeu	r7,r3,812d2f8 <_malloc_r+0x55c>
 812d2f0:	10800217 	ldw	r2,8(r2)
 812d2f4:	28bffb1e 	bne	r5,r2,812d2e4 <__alt_data_end+0xfc12d2e4>
 812d2f8:	11400317 	ldw	r5,12(r2)
 812d2fc:	98c00117 	ldw	r3,4(r19)
 812d300:	81400315 	stw	r5,12(r16)
 812d304:	80800215 	stw	r2,8(r16)
 812d308:	2c000215 	stw	r16,8(r5)
 812d30c:	14000315 	stw	r16,12(r2)
 812d310:	003ef806 	br	812cef4 <__alt_data_end+0xfc12cef4>
 812d314:	88c00054 	ori	r3,r17,1
 812d318:	80c00115 	stw	r3,4(r16)
 812d31c:	8463883a 	add	r17,r16,r17
 812d320:	34400515 	stw	r17,20(r6)
 812d324:	34400415 	stw	r17,16(r6)
 812d328:	10c00054 	ori	r3,r2,1
 812d32c:	8a000315 	stw	r8,12(r17)
 812d330:	8a000215 	stw	r8,8(r17)
 812d334:	88c00115 	stw	r3,4(r17)
 812d338:	88a3883a 	add	r17,r17,r2
 812d33c:	88800015 	stw	r2,0(r17)
 812d340:	9009883a 	mov	r4,r18
 812d344:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d348:	80800204 	addi	r2,r16,8
 812d34c:	003f3c06 	br	812d040 <__alt_data_end+0xfc12d040>
 812d350:	30c00117 	ldw	r3,4(r6)
 812d354:	003ee706 	br	812cef4 <__alt_data_end+0xfc12cef4>
 812d358:	5ac00044 	addi	r11,r11,1
 812d35c:	588000cc 	andi	r2,r11,3
 812d360:	31800204 	addi	r6,r6,8
 812d364:	103efd1e 	bne	r2,zero,812cf5c <__alt_data_end+0xfc12cf5c>
 812d368:	00002406 	br	812d3fc <_malloc_r+0x660>
 812d36c:	14000317 	ldw	r16,12(r2)
 812d370:	143f251e 	bne	r2,r16,812d008 <__alt_data_end+0xfc12d008>
 812d374:	21000084 	addi	r4,r4,2
 812d378:	003ebc06 	br	812ce6c <__alt_data_end+0xfc12ce6c>
 812d37c:	8085883a 	add	r2,r16,r2
 812d380:	10c00117 	ldw	r3,4(r2)
 812d384:	81000317 	ldw	r4,12(r16)
 812d388:	81400217 	ldw	r5,8(r16)
 812d38c:	18c00054 	ori	r3,r3,1
 812d390:	10c00115 	stw	r3,4(r2)
 812d394:	29000315 	stw	r4,12(r5)
 812d398:	21400215 	stw	r5,8(r4)
 812d39c:	9009883a 	mov	r4,r18
 812d3a0:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812d3a4:	80800204 	addi	r2,r16,8
 812d3a8:	003f2506 	br	812d040 <__alt_data_end+0xfc12d040>
 812d3ac:	12001704 	addi	r8,r2,92
 812d3b0:	11c016c4 	addi	r7,r2,91
 812d3b4:	4209883a 	add	r4,r8,r8
 812d3b8:	003e9606 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d3bc:	3804d1ba 	srli	r2,r7,6
 812d3c0:	11400e44 	addi	r5,r2,57
 812d3c4:	10c00e04 	addi	r3,r2,56
 812d3c8:	294b883a 	add	r5,r5,r5
 812d3cc:	003fbc06 	br	812d2c0 <__alt_data_end+0xfc12d2c0>
 812d3d0:	84ff5926 	beq	r16,r19,812d138 <__alt_data_end+0xfc12d138>
 812d3d4:	008204f4 	movhi	r2,2067
 812d3d8:	10870e04 	addi	r2,r2,7224
 812d3dc:	14000217 	ldw	r16,8(r2)
 812d3e0:	00bfff04 	movi	r2,-4
 812d3e4:	80c00117 	ldw	r3,4(r16)
 812d3e8:	1886703a 	and	r3,r3,r2
 812d3ec:	003f9106 	br	812d234 <__alt_data_end+0xfc12d234>
 812d3f0:	60800217 	ldw	r2,8(r12)
 812d3f4:	213fffc4 	addi	r4,r4,-1
 812d3f8:	1300651e 	bne	r2,r12,812d590 <_malloc_r+0x7f4>
 812d3fc:	208000cc 	andi	r2,r4,3
 812d400:	633ffe04 	addi	r12,r12,-8
 812d404:	103ffa1e 	bne	r2,zero,812d3f0 <__alt_data_end+0xfc12d3f0>
 812d408:	98800117 	ldw	r2,4(r19)
 812d40c:	0146303a 	nor	r3,zero,r5
 812d410:	1884703a 	and	r2,r3,r2
 812d414:	98800115 	stw	r2,4(r19)
 812d418:	294b883a 	add	r5,r5,r5
 812d41c:	117f2836 	bltu	r2,r5,812d0c0 <__alt_data_end+0xfc12d0c0>
 812d420:	283f2726 	beq	r5,zero,812d0c0 <__alt_data_end+0xfc12d0c0>
 812d424:	2886703a 	and	r3,r5,r2
 812d428:	5809883a 	mov	r4,r11
 812d42c:	183ec31e 	bne	r3,zero,812cf3c <__alt_data_end+0xfc12cf3c>
 812d430:	294b883a 	add	r5,r5,r5
 812d434:	2886703a 	and	r3,r5,r2
 812d438:	21000104 	addi	r4,r4,4
 812d43c:	183ffc26 	beq	r3,zero,812d430 <__alt_data_end+0xfc12d430>
 812d440:	003ebe06 	br	812cf3c <__alt_data_end+0xfc12cf3c>
 812d444:	00c05504 	movi	r3,340
 812d448:	18801236 	bltu	r3,r2,812d494 <_malloc_r+0x6f8>
 812d44c:	8804d3fa 	srli	r2,r17,15
 812d450:	12001e04 	addi	r8,r2,120
 812d454:	11c01dc4 	addi	r7,r2,119
 812d458:	4209883a 	add	r4,r8,r8
 812d45c:	003e6d06 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d460:	00c40004 	movi	r3,4096
 812d464:	003f4606 	br	812d180 <__alt_data_end+0xfc12d180>
 812d468:	00800044 	movi	r2,1
 812d46c:	a0800115 	stw	r2,4(r20)
 812d470:	003f7406 	br	812d244 <__alt_data_end+0xfc12d244>
 812d474:	1805d0ba 	srai	r2,r3,2
 812d478:	01c00044 	movi	r7,1
 812d47c:	30c00117 	ldw	r3,4(r6)
 812d480:	388e983a 	sll	r7,r7,r2
 812d484:	2805883a 	mov	r2,r5
 812d488:	38c6b03a 	or	r3,r7,r3
 812d48c:	30c00115 	stw	r3,4(r6)
 812d490:	003f9b06 	br	812d300 <__alt_data_end+0xfc12d300>
 812d494:	00c15504 	movi	r3,1364
 812d498:	18801a36 	bltu	r3,r2,812d504 <_malloc_r+0x768>
 812d49c:	8804d4ba 	srli	r2,r17,18
 812d4a0:	12001f44 	addi	r8,r2,125
 812d4a4:	11c01f04 	addi	r7,r2,124
 812d4a8:	4209883a 	add	r4,r8,r8
 812d4ac:	003e5906 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d4b0:	ad400404 	addi	r21,r21,16
 812d4b4:	003f1706 	br	812d114 <__alt_data_end+0xfc12d114>
 812d4b8:	00c01504 	movi	r3,84
 812d4bc:	18802336 	bltu	r3,r2,812d54c <_malloc_r+0x7b0>
 812d4c0:	3804d33a 	srli	r2,r7,12
 812d4c4:	11401bc4 	addi	r5,r2,111
 812d4c8:	10c01b84 	addi	r3,r2,110
 812d4cc:	294b883a 	add	r5,r5,r5
 812d4d0:	003f7b06 	br	812d2c0 <__alt_data_end+0xfc12d2c0>
 812d4d4:	9c000217 	ldw	r16,8(r19)
 812d4d8:	00bfff04 	movi	r2,-4
 812d4dc:	80c00117 	ldw	r3,4(r16)
 812d4e0:	1886703a 	and	r3,r3,r2
 812d4e4:	003f5306 	br	812d234 <__alt_data_end+0xfc12d234>
 812d4e8:	3083ffcc 	andi	r2,r6,4095
 812d4ec:	103f181e 	bne	r2,zero,812d150 <__alt_data_end+0xfc12d150>
 812d4f0:	99000217 	ldw	r4,8(r19)
 812d4f4:	b545883a 	add	r2,r22,r21
 812d4f8:	10800054 	ori	r2,r2,1
 812d4fc:	20800115 	stw	r2,4(r4)
 812d500:	003f3e06 	br	812d1fc <__alt_data_end+0xfc12d1fc>
 812d504:	01003f84 	movi	r4,254
 812d508:	02001fc4 	movi	r8,127
 812d50c:	01c01f84 	movi	r7,126
 812d510:	003e4006 	br	812ce14 <__alt_data_end+0xfc12ce14>
 812d514:	008204f4 	movhi	r2,2067
 812d518:	108c9504 	addi	r2,r2,12884
 812d51c:	15000015 	stw	r20,0(r2)
 812d520:	003f1106 	br	812d168 <__alt_data_end+0xfc12d168>
 812d524:	00800044 	movi	r2,1
 812d528:	002b883a 	mov	r21,zero
 812d52c:	003f1f06 	br	812d1ac <__alt_data_end+0xfc12d1ac>
 812d530:	81400204 	addi	r5,r16,8
 812d534:	9009883a 	mov	r4,r18
 812d538:	812e8240 	call	812e824 <_free_r>
 812d53c:	008204f4 	movhi	r2,2067
 812d540:	10934804 	addi	r2,r2,19744
 812d544:	10c00017 	ldw	r3,0(r2)
 812d548:	003f2c06 	br	812d1fc <__alt_data_end+0xfc12d1fc>
 812d54c:	00c05504 	movi	r3,340
 812d550:	18800536 	bltu	r3,r2,812d568 <_malloc_r+0x7cc>
 812d554:	3804d3fa 	srli	r2,r7,15
 812d558:	11401e04 	addi	r5,r2,120
 812d55c:	10c01dc4 	addi	r3,r2,119
 812d560:	294b883a 	add	r5,r5,r5
 812d564:	003f5606 	br	812d2c0 <__alt_data_end+0xfc12d2c0>
 812d568:	00c15504 	movi	r3,1364
 812d56c:	18800536 	bltu	r3,r2,812d584 <_malloc_r+0x7e8>
 812d570:	3804d4ba 	srli	r2,r7,18
 812d574:	11401f44 	addi	r5,r2,125
 812d578:	10c01f04 	addi	r3,r2,124
 812d57c:	294b883a 	add	r5,r5,r5
 812d580:	003f4f06 	br	812d2c0 <__alt_data_end+0xfc12d2c0>
 812d584:	01403f84 	movi	r5,254
 812d588:	00c01f84 	movi	r3,126
 812d58c:	003f4c06 	br	812d2c0 <__alt_data_end+0xfc12d2c0>
 812d590:	98800117 	ldw	r2,4(r19)
 812d594:	003fa006 	br	812d418 <__alt_data_end+0xfc12d418>
 812d598:	8808d0fa 	srli	r4,r17,3
 812d59c:	20800044 	addi	r2,r4,1
 812d5a0:	1085883a 	add	r2,r2,r2
 812d5a4:	003e9006 	br	812cfe8 <__alt_data_end+0xfc12cfe8>

0812d5a8 <memchr>:
 812d5a8:	208000cc 	andi	r2,r4,3
 812d5ac:	280f883a 	mov	r7,r5
 812d5b0:	10003426 	beq	r2,zero,812d684 <memchr+0xdc>
 812d5b4:	30bfffc4 	addi	r2,r6,-1
 812d5b8:	30001a26 	beq	r6,zero,812d624 <memchr+0x7c>
 812d5bc:	20c00003 	ldbu	r3,0(r4)
 812d5c0:	29803fcc 	andi	r6,r5,255
 812d5c4:	30c0051e 	bne	r6,r3,812d5dc <memchr+0x34>
 812d5c8:	00001806 	br	812d62c <memchr+0x84>
 812d5cc:	10001526 	beq	r2,zero,812d624 <memchr+0x7c>
 812d5d0:	20c00003 	ldbu	r3,0(r4)
 812d5d4:	10bfffc4 	addi	r2,r2,-1
 812d5d8:	30c01426 	beq	r6,r3,812d62c <memchr+0x84>
 812d5dc:	21000044 	addi	r4,r4,1
 812d5e0:	20c000cc 	andi	r3,r4,3
 812d5e4:	183ff91e 	bne	r3,zero,812d5cc <__alt_data_end+0xfc12d5cc>
 812d5e8:	020000c4 	movi	r8,3
 812d5ec:	40801136 	bltu	r8,r2,812d634 <memchr+0x8c>
 812d5f0:	10000c26 	beq	r2,zero,812d624 <memchr+0x7c>
 812d5f4:	20c00003 	ldbu	r3,0(r4)
 812d5f8:	29403fcc 	andi	r5,r5,255
 812d5fc:	28c00b26 	beq	r5,r3,812d62c <memchr+0x84>
 812d600:	20c00044 	addi	r3,r4,1
 812d604:	39803fcc 	andi	r6,r7,255
 812d608:	2089883a 	add	r4,r4,r2
 812d60c:	00000306 	br	812d61c <memchr+0x74>
 812d610:	18c00044 	addi	r3,r3,1
 812d614:	197fffc3 	ldbu	r5,-1(r3)
 812d618:	31400526 	beq	r6,r5,812d630 <memchr+0x88>
 812d61c:	1805883a 	mov	r2,r3
 812d620:	20fffb1e 	bne	r4,r3,812d610 <__alt_data_end+0xfc12d610>
 812d624:	0005883a 	mov	r2,zero
 812d628:	f800283a 	ret
 812d62c:	2005883a 	mov	r2,r4
 812d630:	f800283a 	ret
 812d634:	28c03fcc 	andi	r3,r5,255
 812d638:	1812923a 	slli	r9,r3,8
 812d63c:	02ffbff4 	movhi	r11,65279
 812d640:	02a02074 	movhi	r10,32897
 812d644:	48d2b03a 	or	r9,r9,r3
 812d648:	4806943a 	slli	r3,r9,16
 812d64c:	5affbfc4 	addi	r11,r11,-257
 812d650:	52a02004 	addi	r10,r10,-32640
 812d654:	48d2b03a 	or	r9,r9,r3
 812d658:	20c00017 	ldw	r3,0(r4)
 812d65c:	48c6f03a 	xor	r3,r9,r3
 812d660:	1acd883a 	add	r6,r3,r11
 812d664:	00c6303a 	nor	r3,zero,r3
 812d668:	30c6703a 	and	r3,r6,r3
 812d66c:	1a86703a 	and	r3,r3,r10
 812d670:	183fe01e 	bne	r3,zero,812d5f4 <__alt_data_end+0xfc12d5f4>
 812d674:	10bfff04 	addi	r2,r2,-4
 812d678:	21000104 	addi	r4,r4,4
 812d67c:	40bff636 	bltu	r8,r2,812d658 <__alt_data_end+0xfc12d658>
 812d680:	003fdb06 	br	812d5f0 <__alt_data_end+0xfc12d5f0>
 812d684:	3005883a 	mov	r2,r6
 812d688:	003fd706 	br	812d5e8 <__alt_data_end+0xfc12d5e8>

0812d68c <memcpy>:
 812d68c:	defffd04 	addi	sp,sp,-12
 812d690:	dfc00215 	stw	ra,8(sp)
 812d694:	dc400115 	stw	r17,4(sp)
 812d698:	dc000015 	stw	r16,0(sp)
 812d69c:	00c003c4 	movi	r3,15
 812d6a0:	2005883a 	mov	r2,r4
 812d6a4:	1980452e 	bgeu	r3,r6,812d7bc <memcpy+0x130>
 812d6a8:	2906b03a 	or	r3,r5,r4
 812d6ac:	18c000cc 	andi	r3,r3,3
 812d6b0:	1800441e 	bne	r3,zero,812d7c4 <memcpy+0x138>
 812d6b4:	347ffc04 	addi	r17,r6,-16
 812d6b8:	8822d13a 	srli	r17,r17,4
 812d6bc:	28c00104 	addi	r3,r5,4
 812d6c0:	23400104 	addi	r13,r4,4
 812d6c4:	8820913a 	slli	r16,r17,4
 812d6c8:	2b000204 	addi	r12,r5,8
 812d6cc:	22c00204 	addi	r11,r4,8
 812d6d0:	84000504 	addi	r16,r16,20
 812d6d4:	2a800304 	addi	r10,r5,12
 812d6d8:	22400304 	addi	r9,r4,12
 812d6dc:	2c21883a 	add	r16,r5,r16
 812d6e0:	2811883a 	mov	r8,r5
 812d6e4:	200f883a 	mov	r7,r4
 812d6e8:	41000017 	ldw	r4,0(r8)
 812d6ec:	1fc00017 	ldw	ra,0(r3)
 812d6f0:	63c00017 	ldw	r15,0(r12)
 812d6f4:	39000015 	stw	r4,0(r7)
 812d6f8:	53800017 	ldw	r14,0(r10)
 812d6fc:	6fc00015 	stw	ra,0(r13)
 812d700:	5bc00015 	stw	r15,0(r11)
 812d704:	4b800015 	stw	r14,0(r9)
 812d708:	18c00404 	addi	r3,r3,16
 812d70c:	39c00404 	addi	r7,r7,16
 812d710:	42000404 	addi	r8,r8,16
 812d714:	6b400404 	addi	r13,r13,16
 812d718:	63000404 	addi	r12,r12,16
 812d71c:	5ac00404 	addi	r11,r11,16
 812d720:	52800404 	addi	r10,r10,16
 812d724:	4a400404 	addi	r9,r9,16
 812d728:	1c3fef1e 	bne	r3,r16,812d6e8 <__alt_data_end+0xfc12d6e8>
 812d72c:	89c00044 	addi	r7,r17,1
 812d730:	380e913a 	slli	r7,r7,4
 812d734:	310003cc 	andi	r4,r6,15
 812d738:	02c000c4 	movi	r11,3
 812d73c:	11c7883a 	add	r3,r2,r7
 812d740:	29cb883a 	add	r5,r5,r7
 812d744:	5900212e 	bgeu	r11,r4,812d7cc <memcpy+0x140>
 812d748:	1813883a 	mov	r9,r3
 812d74c:	2811883a 	mov	r8,r5
 812d750:	200f883a 	mov	r7,r4
 812d754:	42800017 	ldw	r10,0(r8)
 812d758:	4a400104 	addi	r9,r9,4
 812d75c:	39ffff04 	addi	r7,r7,-4
 812d760:	4abfff15 	stw	r10,-4(r9)
 812d764:	42000104 	addi	r8,r8,4
 812d768:	59fffa36 	bltu	r11,r7,812d754 <__alt_data_end+0xfc12d754>
 812d76c:	213fff04 	addi	r4,r4,-4
 812d770:	2008d0ba 	srli	r4,r4,2
 812d774:	318000cc 	andi	r6,r6,3
 812d778:	21000044 	addi	r4,r4,1
 812d77c:	2109883a 	add	r4,r4,r4
 812d780:	2109883a 	add	r4,r4,r4
 812d784:	1907883a 	add	r3,r3,r4
 812d788:	290b883a 	add	r5,r5,r4
 812d78c:	30000626 	beq	r6,zero,812d7a8 <memcpy+0x11c>
 812d790:	198d883a 	add	r6,r3,r6
 812d794:	29c00003 	ldbu	r7,0(r5)
 812d798:	18c00044 	addi	r3,r3,1
 812d79c:	29400044 	addi	r5,r5,1
 812d7a0:	19ffffc5 	stb	r7,-1(r3)
 812d7a4:	19bffb1e 	bne	r3,r6,812d794 <__alt_data_end+0xfc12d794>
 812d7a8:	dfc00217 	ldw	ra,8(sp)
 812d7ac:	dc400117 	ldw	r17,4(sp)
 812d7b0:	dc000017 	ldw	r16,0(sp)
 812d7b4:	dec00304 	addi	sp,sp,12
 812d7b8:	f800283a 	ret
 812d7bc:	2007883a 	mov	r3,r4
 812d7c0:	003ff206 	br	812d78c <__alt_data_end+0xfc12d78c>
 812d7c4:	2007883a 	mov	r3,r4
 812d7c8:	003ff106 	br	812d790 <__alt_data_end+0xfc12d790>
 812d7cc:	200d883a 	mov	r6,r4
 812d7d0:	003fee06 	br	812d78c <__alt_data_end+0xfc12d78c>

0812d7d4 <memmove>:
 812d7d4:	2005883a 	mov	r2,r4
 812d7d8:	29000b2e 	bgeu	r5,r4,812d808 <memmove+0x34>
 812d7dc:	298f883a 	add	r7,r5,r6
 812d7e0:	21c0092e 	bgeu	r4,r7,812d808 <memmove+0x34>
 812d7e4:	2187883a 	add	r3,r4,r6
 812d7e8:	198bc83a 	sub	r5,r3,r6
 812d7ec:	30004826 	beq	r6,zero,812d910 <memmove+0x13c>
 812d7f0:	39ffffc4 	addi	r7,r7,-1
 812d7f4:	39000003 	ldbu	r4,0(r7)
 812d7f8:	18ffffc4 	addi	r3,r3,-1
 812d7fc:	19000005 	stb	r4,0(r3)
 812d800:	28fffb1e 	bne	r5,r3,812d7f0 <__alt_data_end+0xfc12d7f0>
 812d804:	f800283a 	ret
 812d808:	00c003c4 	movi	r3,15
 812d80c:	1980412e 	bgeu	r3,r6,812d914 <memmove+0x140>
 812d810:	2886b03a 	or	r3,r5,r2
 812d814:	18c000cc 	andi	r3,r3,3
 812d818:	1800401e 	bne	r3,zero,812d91c <memmove+0x148>
 812d81c:	33fffc04 	addi	r15,r6,-16
 812d820:	781ed13a 	srli	r15,r15,4
 812d824:	28c00104 	addi	r3,r5,4
 812d828:	13400104 	addi	r13,r2,4
 812d82c:	781c913a 	slli	r14,r15,4
 812d830:	2b000204 	addi	r12,r5,8
 812d834:	12c00204 	addi	r11,r2,8
 812d838:	73800504 	addi	r14,r14,20
 812d83c:	2a800304 	addi	r10,r5,12
 812d840:	12400304 	addi	r9,r2,12
 812d844:	2b9d883a 	add	r14,r5,r14
 812d848:	2811883a 	mov	r8,r5
 812d84c:	100f883a 	mov	r7,r2
 812d850:	41000017 	ldw	r4,0(r8)
 812d854:	39c00404 	addi	r7,r7,16
 812d858:	18c00404 	addi	r3,r3,16
 812d85c:	393ffc15 	stw	r4,-16(r7)
 812d860:	193ffc17 	ldw	r4,-16(r3)
 812d864:	6b400404 	addi	r13,r13,16
 812d868:	5ac00404 	addi	r11,r11,16
 812d86c:	693ffc15 	stw	r4,-16(r13)
 812d870:	61000017 	ldw	r4,0(r12)
 812d874:	4a400404 	addi	r9,r9,16
 812d878:	42000404 	addi	r8,r8,16
 812d87c:	593ffc15 	stw	r4,-16(r11)
 812d880:	51000017 	ldw	r4,0(r10)
 812d884:	63000404 	addi	r12,r12,16
 812d888:	52800404 	addi	r10,r10,16
 812d88c:	493ffc15 	stw	r4,-16(r9)
 812d890:	1bbfef1e 	bne	r3,r14,812d850 <__alt_data_end+0xfc12d850>
 812d894:	79000044 	addi	r4,r15,1
 812d898:	2008913a 	slli	r4,r4,4
 812d89c:	328003cc 	andi	r10,r6,15
 812d8a0:	02c000c4 	movi	r11,3
 812d8a4:	1107883a 	add	r3,r2,r4
 812d8a8:	290b883a 	add	r5,r5,r4
 812d8ac:	5a801e2e 	bgeu	r11,r10,812d928 <memmove+0x154>
 812d8b0:	1813883a 	mov	r9,r3
 812d8b4:	2811883a 	mov	r8,r5
 812d8b8:	500f883a 	mov	r7,r10
 812d8bc:	41000017 	ldw	r4,0(r8)
 812d8c0:	4a400104 	addi	r9,r9,4
 812d8c4:	39ffff04 	addi	r7,r7,-4
 812d8c8:	493fff15 	stw	r4,-4(r9)
 812d8cc:	42000104 	addi	r8,r8,4
 812d8d0:	59fffa36 	bltu	r11,r7,812d8bc <__alt_data_end+0xfc12d8bc>
 812d8d4:	513fff04 	addi	r4,r10,-4
 812d8d8:	2008d0ba 	srli	r4,r4,2
 812d8dc:	318000cc 	andi	r6,r6,3
 812d8e0:	21000044 	addi	r4,r4,1
 812d8e4:	2109883a 	add	r4,r4,r4
 812d8e8:	2109883a 	add	r4,r4,r4
 812d8ec:	1907883a 	add	r3,r3,r4
 812d8f0:	290b883a 	add	r5,r5,r4
 812d8f4:	30000b26 	beq	r6,zero,812d924 <memmove+0x150>
 812d8f8:	198d883a 	add	r6,r3,r6
 812d8fc:	29c00003 	ldbu	r7,0(r5)
 812d900:	18c00044 	addi	r3,r3,1
 812d904:	29400044 	addi	r5,r5,1
 812d908:	19ffffc5 	stb	r7,-1(r3)
 812d90c:	19bffb1e 	bne	r3,r6,812d8fc <__alt_data_end+0xfc12d8fc>
 812d910:	f800283a 	ret
 812d914:	1007883a 	mov	r3,r2
 812d918:	003ff606 	br	812d8f4 <__alt_data_end+0xfc12d8f4>
 812d91c:	1007883a 	mov	r3,r2
 812d920:	003ff506 	br	812d8f8 <__alt_data_end+0xfc12d8f8>
 812d924:	f800283a 	ret
 812d928:	500d883a 	mov	r6,r10
 812d92c:	003ff106 	br	812d8f4 <__alt_data_end+0xfc12d8f4>

0812d930 <memset>:
 812d930:	20c000cc 	andi	r3,r4,3
 812d934:	2005883a 	mov	r2,r4
 812d938:	18004426 	beq	r3,zero,812da4c <memset+0x11c>
 812d93c:	31ffffc4 	addi	r7,r6,-1
 812d940:	30004026 	beq	r6,zero,812da44 <memset+0x114>
 812d944:	2813883a 	mov	r9,r5
 812d948:	200d883a 	mov	r6,r4
 812d94c:	2007883a 	mov	r3,r4
 812d950:	00000406 	br	812d964 <memset+0x34>
 812d954:	3a3fffc4 	addi	r8,r7,-1
 812d958:	31800044 	addi	r6,r6,1
 812d95c:	38003926 	beq	r7,zero,812da44 <memset+0x114>
 812d960:	400f883a 	mov	r7,r8
 812d964:	18c00044 	addi	r3,r3,1
 812d968:	32400005 	stb	r9,0(r6)
 812d96c:	1a0000cc 	andi	r8,r3,3
 812d970:	403ff81e 	bne	r8,zero,812d954 <__alt_data_end+0xfc12d954>
 812d974:	010000c4 	movi	r4,3
 812d978:	21c02d2e 	bgeu	r4,r7,812da30 <memset+0x100>
 812d97c:	29003fcc 	andi	r4,r5,255
 812d980:	200c923a 	slli	r6,r4,8
 812d984:	3108b03a 	or	r4,r6,r4
 812d988:	200c943a 	slli	r6,r4,16
 812d98c:	218cb03a 	or	r6,r4,r6
 812d990:	010003c4 	movi	r4,15
 812d994:	21c0182e 	bgeu	r4,r7,812d9f8 <memset+0xc8>
 812d998:	3b3ffc04 	addi	r12,r7,-16
 812d99c:	6018d13a 	srli	r12,r12,4
 812d9a0:	1a000104 	addi	r8,r3,4
 812d9a4:	1ac00204 	addi	r11,r3,8
 812d9a8:	6008913a 	slli	r4,r12,4
 812d9ac:	1a800304 	addi	r10,r3,12
 812d9b0:	1813883a 	mov	r9,r3
 812d9b4:	21000504 	addi	r4,r4,20
 812d9b8:	1909883a 	add	r4,r3,r4
 812d9bc:	49800015 	stw	r6,0(r9)
 812d9c0:	41800015 	stw	r6,0(r8)
 812d9c4:	59800015 	stw	r6,0(r11)
 812d9c8:	51800015 	stw	r6,0(r10)
 812d9cc:	42000404 	addi	r8,r8,16
 812d9d0:	4a400404 	addi	r9,r9,16
 812d9d4:	5ac00404 	addi	r11,r11,16
 812d9d8:	52800404 	addi	r10,r10,16
 812d9dc:	413ff71e 	bne	r8,r4,812d9bc <__alt_data_end+0xfc12d9bc>
 812d9e0:	63000044 	addi	r12,r12,1
 812d9e4:	6018913a 	slli	r12,r12,4
 812d9e8:	39c003cc 	andi	r7,r7,15
 812d9ec:	010000c4 	movi	r4,3
 812d9f0:	1b07883a 	add	r3,r3,r12
 812d9f4:	21c00e2e 	bgeu	r4,r7,812da30 <memset+0x100>
 812d9f8:	1813883a 	mov	r9,r3
 812d9fc:	3811883a 	mov	r8,r7
 812da00:	010000c4 	movi	r4,3
 812da04:	49800015 	stw	r6,0(r9)
 812da08:	423fff04 	addi	r8,r8,-4
 812da0c:	4a400104 	addi	r9,r9,4
 812da10:	223ffc36 	bltu	r4,r8,812da04 <__alt_data_end+0xfc12da04>
 812da14:	393fff04 	addi	r4,r7,-4
 812da18:	2008d0ba 	srli	r4,r4,2
 812da1c:	39c000cc 	andi	r7,r7,3
 812da20:	21000044 	addi	r4,r4,1
 812da24:	2109883a 	add	r4,r4,r4
 812da28:	2109883a 	add	r4,r4,r4
 812da2c:	1907883a 	add	r3,r3,r4
 812da30:	38000526 	beq	r7,zero,812da48 <memset+0x118>
 812da34:	19cf883a 	add	r7,r3,r7
 812da38:	19400005 	stb	r5,0(r3)
 812da3c:	18c00044 	addi	r3,r3,1
 812da40:	38fffd1e 	bne	r7,r3,812da38 <__alt_data_end+0xfc12da38>
 812da44:	f800283a 	ret
 812da48:	f800283a 	ret
 812da4c:	2007883a 	mov	r3,r4
 812da50:	300f883a 	mov	r7,r6
 812da54:	003fc706 	br	812d974 <__alt_data_end+0xfc12d974>

0812da58 <_realloc_r>:
 812da58:	defff604 	addi	sp,sp,-40
 812da5c:	dc800215 	stw	r18,8(sp)
 812da60:	dfc00915 	stw	ra,36(sp)
 812da64:	df000815 	stw	fp,32(sp)
 812da68:	ddc00715 	stw	r23,28(sp)
 812da6c:	dd800615 	stw	r22,24(sp)
 812da70:	dd400515 	stw	r21,20(sp)
 812da74:	dd000415 	stw	r20,16(sp)
 812da78:	dcc00315 	stw	r19,12(sp)
 812da7c:	dc400115 	stw	r17,4(sp)
 812da80:	dc000015 	stw	r16,0(sp)
 812da84:	3025883a 	mov	r18,r6
 812da88:	2800b726 	beq	r5,zero,812dd68 <_realloc_r+0x310>
 812da8c:	282b883a 	mov	r21,r5
 812da90:	2029883a 	mov	r20,r4
 812da94:	812f5b00 	call	812f5b0 <__malloc_lock>
 812da98:	a8bfff17 	ldw	r2,-4(r21)
 812da9c:	043fff04 	movi	r16,-4
 812daa0:	90c002c4 	addi	r3,r18,11
 812daa4:	01000584 	movi	r4,22
 812daa8:	acfffe04 	addi	r19,r21,-8
 812daac:	1420703a 	and	r16,r2,r16
 812dab0:	20c0332e 	bgeu	r4,r3,812db80 <_realloc_r+0x128>
 812dab4:	047ffe04 	movi	r17,-8
 812dab8:	1c62703a 	and	r17,r3,r17
 812dabc:	8807883a 	mov	r3,r17
 812dac0:	88005816 	blt	r17,zero,812dc24 <_realloc_r+0x1cc>
 812dac4:	8c805736 	bltu	r17,r18,812dc24 <_realloc_r+0x1cc>
 812dac8:	80c0300e 	bge	r16,r3,812db8c <_realloc_r+0x134>
 812dacc:	070204f4 	movhi	fp,2067
 812dad0:	e7070e04 	addi	fp,fp,7224
 812dad4:	e1c00217 	ldw	r7,8(fp)
 812dad8:	9c09883a 	add	r4,r19,r16
 812dadc:	22000117 	ldw	r8,4(r4)
 812dae0:	21c06326 	beq	r4,r7,812dc70 <_realloc_r+0x218>
 812dae4:	017fff84 	movi	r5,-2
 812dae8:	414a703a 	and	r5,r8,r5
 812daec:	214b883a 	add	r5,r4,r5
 812daf0:	29800117 	ldw	r6,4(r5)
 812daf4:	3180004c 	andi	r6,r6,1
 812daf8:	30003f26 	beq	r6,zero,812dbf8 <_realloc_r+0x1a0>
 812dafc:	1080004c 	andi	r2,r2,1
 812db00:	10008326 	beq	r2,zero,812dd10 <_realloc_r+0x2b8>
 812db04:	900b883a 	mov	r5,r18
 812db08:	a009883a 	mov	r4,r20
 812db0c:	812cd9c0 	call	812cd9c <_malloc_r>
 812db10:	1025883a 	mov	r18,r2
 812db14:	10011e26 	beq	r2,zero,812df90 <_realloc_r+0x538>
 812db18:	a93fff17 	ldw	r4,-4(r21)
 812db1c:	10fffe04 	addi	r3,r2,-8
 812db20:	00bfff84 	movi	r2,-2
 812db24:	2084703a 	and	r2,r4,r2
 812db28:	9885883a 	add	r2,r19,r2
 812db2c:	1880ee26 	beq	r3,r2,812dee8 <_realloc_r+0x490>
 812db30:	81bfff04 	addi	r6,r16,-4
 812db34:	00800904 	movi	r2,36
 812db38:	1180b836 	bltu	r2,r6,812de1c <_realloc_r+0x3c4>
 812db3c:	00c004c4 	movi	r3,19
 812db40:	19809636 	bltu	r3,r6,812dd9c <_realloc_r+0x344>
 812db44:	9005883a 	mov	r2,r18
 812db48:	a807883a 	mov	r3,r21
 812db4c:	19000017 	ldw	r4,0(r3)
 812db50:	11000015 	stw	r4,0(r2)
 812db54:	19000117 	ldw	r4,4(r3)
 812db58:	11000115 	stw	r4,4(r2)
 812db5c:	18c00217 	ldw	r3,8(r3)
 812db60:	10c00215 	stw	r3,8(r2)
 812db64:	a80b883a 	mov	r5,r21
 812db68:	a009883a 	mov	r4,r20
 812db6c:	812e8240 	call	812e824 <_free_r>
 812db70:	a009883a 	mov	r4,r20
 812db74:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812db78:	9005883a 	mov	r2,r18
 812db7c:	00001206 	br	812dbc8 <_realloc_r+0x170>
 812db80:	00c00404 	movi	r3,16
 812db84:	1823883a 	mov	r17,r3
 812db88:	003fce06 	br	812dac4 <__alt_data_end+0xfc12dac4>
 812db8c:	a825883a 	mov	r18,r21
 812db90:	8445c83a 	sub	r2,r16,r17
 812db94:	00c003c4 	movi	r3,15
 812db98:	18802636 	bltu	r3,r2,812dc34 <_realloc_r+0x1dc>
 812db9c:	99800117 	ldw	r6,4(r19)
 812dba0:	9c07883a 	add	r3,r19,r16
 812dba4:	3180004c 	andi	r6,r6,1
 812dba8:	3420b03a 	or	r16,r6,r16
 812dbac:	9c000115 	stw	r16,4(r19)
 812dbb0:	18800117 	ldw	r2,4(r3)
 812dbb4:	10800054 	ori	r2,r2,1
 812dbb8:	18800115 	stw	r2,4(r3)
 812dbbc:	a009883a 	mov	r4,r20
 812dbc0:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812dbc4:	9005883a 	mov	r2,r18
 812dbc8:	dfc00917 	ldw	ra,36(sp)
 812dbcc:	df000817 	ldw	fp,32(sp)
 812dbd0:	ddc00717 	ldw	r23,28(sp)
 812dbd4:	dd800617 	ldw	r22,24(sp)
 812dbd8:	dd400517 	ldw	r21,20(sp)
 812dbdc:	dd000417 	ldw	r20,16(sp)
 812dbe0:	dcc00317 	ldw	r19,12(sp)
 812dbe4:	dc800217 	ldw	r18,8(sp)
 812dbe8:	dc400117 	ldw	r17,4(sp)
 812dbec:	dc000017 	ldw	r16,0(sp)
 812dbf0:	dec00a04 	addi	sp,sp,40
 812dbf4:	f800283a 	ret
 812dbf8:	017fff04 	movi	r5,-4
 812dbfc:	414a703a 	and	r5,r8,r5
 812dc00:	814d883a 	add	r6,r16,r5
 812dc04:	30c01f16 	blt	r6,r3,812dc84 <_realloc_r+0x22c>
 812dc08:	20800317 	ldw	r2,12(r4)
 812dc0c:	20c00217 	ldw	r3,8(r4)
 812dc10:	a825883a 	mov	r18,r21
 812dc14:	3021883a 	mov	r16,r6
 812dc18:	18800315 	stw	r2,12(r3)
 812dc1c:	10c00215 	stw	r3,8(r2)
 812dc20:	003fdb06 	br	812db90 <__alt_data_end+0xfc12db90>
 812dc24:	00800304 	movi	r2,12
 812dc28:	a0800015 	stw	r2,0(r20)
 812dc2c:	0005883a 	mov	r2,zero
 812dc30:	003fe506 	br	812dbc8 <__alt_data_end+0xfc12dbc8>
 812dc34:	98c00117 	ldw	r3,4(r19)
 812dc38:	9c4b883a 	add	r5,r19,r17
 812dc3c:	11000054 	ori	r4,r2,1
 812dc40:	18c0004c 	andi	r3,r3,1
 812dc44:	1c62b03a 	or	r17,r3,r17
 812dc48:	9c400115 	stw	r17,4(r19)
 812dc4c:	29000115 	stw	r4,4(r5)
 812dc50:	2885883a 	add	r2,r5,r2
 812dc54:	10c00117 	ldw	r3,4(r2)
 812dc58:	29400204 	addi	r5,r5,8
 812dc5c:	a009883a 	mov	r4,r20
 812dc60:	18c00054 	ori	r3,r3,1
 812dc64:	10c00115 	stw	r3,4(r2)
 812dc68:	812e8240 	call	812e824 <_free_r>
 812dc6c:	003fd306 	br	812dbbc <__alt_data_end+0xfc12dbbc>
 812dc70:	017fff04 	movi	r5,-4
 812dc74:	414a703a 	and	r5,r8,r5
 812dc78:	89800404 	addi	r6,r17,16
 812dc7c:	8151883a 	add	r8,r16,r5
 812dc80:	4180590e 	bge	r8,r6,812dde8 <_realloc_r+0x390>
 812dc84:	1080004c 	andi	r2,r2,1
 812dc88:	103f9e1e 	bne	r2,zero,812db04 <__alt_data_end+0xfc12db04>
 812dc8c:	adbffe17 	ldw	r22,-8(r21)
 812dc90:	00bfff04 	movi	r2,-4
 812dc94:	9dadc83a 	sub	r22,r19,r22
 812dc98:	b1800117 	ldw	r6,4(r22)
 812dc9c:	3084703a 	and	r2,r6,r2
 812dca0:	20002026 	beq	r4,zero,812dd24 <_realloc_r+0x2cc>
 812dca4:	80af883a 	add	r23,r16,r2
 812dca8:	b96f883a 	add	r23,r23,r5
 812dcac:	21c05f26 	beq	r4,r7,812de2c <_realloc_r+0x3d4>
 812dcb0:	b8c01c16 	blt	r23,r3,812dd24 <_realloc_r+0x2cc>
 812dcb4:	20800317 	ldw	r2,12(r4)
 812dcb8:	20c00217 	ldw	r3,8(r4)
 812dcbc:	81bfff04 	addi	r6,r16,-4
 812dcc0:	01000904 	movi	r4,36
 812dcc4:	18800315 	stw	r2,12(r3)
 812dcc8:	10c00215 	stw	r3,8(r2)
 812dccc:	b0c00217 	ldw	r3,8(r22)
 812dcd0:	b0800317 	ldw	r2,12(r22)
 812dcd4:	b4800204 	addi	r18,r22,8
 812dcd8:	18800315 	stw	r2,12(r3)
 812dcdc:	10c00215 	stw	r3,8(r2)
 812dce0:	21801b36 	bltu	r4,r6,812dd50 <_realloc_r+0x2f8>
 812dce4:	008004c4 	movi	r2,19
 812dce8:	1180352e 	bgeu	r2,r6,812ddc0 <_realloc_r+0x368>
 812dcec:	a8800017 	ldw	r2,0(r21)
 812dcf0:	b0800215 	stw	r2,8(r22)
 812dcf4:	a8800117 	ldw	r2,4(r21)
 812dcf8:	b0800315 	stw	r2,12(r22)
 812dcfc:	008006c4 	movi	r2,27
 812dd00:	11807f36 	bltu	r2,r6,812df00 <_realloc_r+0x4a8>
 812dd04:	b0800404 	addi	r2,r22,16
 812dd08:	ad400204 	addi	r21,r21,8
 812dd0c:	00002d06 	br	812ddc4 <_realloc_r+0x36c>
 812dd10:	adbffe17 	ldw	r22,-8(r21)
 812dd14:	00bfff04 	movi	r2,-4
 812dd18:	9dadc83a 	sub	r22,r19,r22
 812dd1c:	b1000117 	ldw	r4,4(r22)
 812dd20:	2084703a 	and	r2,r4,r2
 812dd24:	b03f7726 	beq	r22,zero,812db04 <__alt_data_end+0xfc12db04>
 812dd28:	80af883a 	add	r23,r16,r2
 812dd2c:	b8ff7516 	blt	r23,r3,812db04 <__alt_data_end+0xfc12db04>
 812dd30:	b0800317 	ldw	r2,12(r22)
 812dd34:	b0c00217 	ldw	r3,8(r22)
 812dd38:	81bfff04 	addi	r6,r16,-4
 812dd3c:	01000904 	movi	r4,36
 812dd40:	18800315 	stw	r2,12(r3)
 812dd44:	10c00215 	stw	r3,8(r2)
 812dd48:	b4800204 	addi	r18,r22,8
 812dd4c:	21bfe52e 	bgeu	r4,r6,812dce4 <__alt_data_end+0xfc12dce4>
 812dd50:	a80b883a 	mov	r5,r21
 812dd54:	9009883a 	mov	r4,r18
 812dd58:	812d7d40 	call	812d7d4 <memmove>
 812dd5c:	b821883a 	mov	r16,r23
 812dd60:	b027883a 	mov	r19,r22
 812dd64:	003f8a06 	br	812db90 <__alt_data_end+0xfc12db90>
 812dd68:	300b883a 	mov	r5,r6
 812dd6c:	dfc00917 	ldw	ra,36(sp)
 812dd70:	df000817 	ldw	fp,32(sp)
 812dd74:	ddc00717 	ldw	r23,28(sp)
 812dd78:	dd800617 	ldw	r22,24(sp)
 812dd7c:	dd400517 	ldw	r21,20(sp)
 812dd80:	dd000417 	ldw	r20,16(sp)
 812dd84:	dcc00317 	ldw	r19,12(sp)
 812dd88:	dc800217 	ldw	r18,8(sp)
 812dd8c:	dc400117 	ldw	r17,4(sp)
 812dd90:	dc000017 	ldw	r16,0(sp)
 812dd94:	dec00a04 	addi	sp,sp,40
 812dd98:	812cd9c1 	jmpi	812cd9c <_malloc_r>
 812dd9c:	a8c00017 	ldw	r3,0(r21)
 812dda0:	90c00015 	stw	r3,0(r18)
 812dda4:	a8c00117 	ldw	r3,4(r21)
 812dda8:	90c00115 	stw	r3,4(r18)
 812ddac:	00c006c4 	movi	r3,27
 812ddb0:	19804536 	bltu	r3,r6,812dec8 <_realloc_r+0x470>
 812ddb4:	90800204 	addi	r2,r18,8
 812ddb8:	a8c00204 	addi	r3,r21,8
 812ddbc:	003f6306 	br	812db4c <__alt_data_end+0xfc12db4c>
 812ddc0:	9005883a 	mov	r2,r18
 812ddc4:	a8c00017 	ldw	r3,0(r21)
 812ddc8:	b821883a 	mov	r16,r23
 812ddcc:	b027883a 	mov	r19,r22
 812ddd0:	10c00015 	stw	r3,0(r2)
 812ddd4:	a8c00117 	ldw	r3,4(r21)
 812ddd8:	10c00115 	stw	r3,4(r2)
 812dddc:	a8c00217 	ldw	r3,8(r21)
 812dde0:	10c00215 	stw	r3,8(r2)
 812dde4:	003f6a06 	br	812db90 <__alt_data_end+0xfc12db90>
 812dde8:	9c67883a 	add	r19,r19,r17
 812ddec:	4445c83a 	sub	r2,r8,r17
 812ddf0:	e4c00215 	stw	r19,8(fp)
 812ddf4:	10800054 	ori	r2,r2,1
 812ddf8:	98800115 	stw	r2,4(r19)
 812ddfc:	a8bfff17 	ldw	r2,-4(r21)
 812de00:	a009883a 	mov	r4,r20
 812de04:	1080004c 	andi	r2,r2,1
 812de08:	1462b03a 	or	r17,r2,r17
 812de0c:	ac7fff15 	stw	r17,-4(r21)
 812de10:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812de14:	a805883a 	mov	r2,r21
 812de18:	003f6b06 	br	812dbc8 <__alt_data_end+0xfc12dbc8>
 812de1c:	a80b883a 	mov	r5,r21
 812de20:	9009883a 	mov	r4,r18
 812de24:	812d7d40 	call	812d7d4 <memmove>
 812de28:	003f4e06 	br	812db64 <__alt_data_end+0xfc12db64>
 812de2c:	89000404 	addi	r4,r17,16
 812de30:	b93fbc16 	blt	r23,r4,812dd24 <__alt_data_end+0xfc12dd24>
 812de34:	b0800317 	ldw	r2,12(r22)
 812de38:	b0c00217 	ldw	r3,8(r22)
 812de3c:	81bfff04 	addi	r6,r16,-4
 812de40:	01000904 	movi	r4,36
 812de44:	18800315 	stw	r2,12(r3)
 812de48:	10c00215 	stw	r3,8(r2)
 812de4c:	b4800204 	addi	r18,r22,8
 812de50:	21804336 	bltu	r4,r6,812df60 <_realloc_r+0x508>
 812de54:	008004c4 	movi	r2,19
 812de58:	11803f2e 	bgeu	r2,r6,812df58 <_realloc_r+0x500>
 812de5c:	a8800017 	ldw	r2,0(r21)
 812de60:	b0800215 	stw	r2,8(r22)
 812de64:	a8800117 	ldw	r2,4(r21)
 812de68:	b0800315 	stw	r2,12(r22)
 812de6c:	008006c4 	movi	r2,27
 812de70:	11803f36 	bltu	r2,r6,812df70 <_realloc_r+0x518>
 812de74:	b0800404 	addi	r2,r22,16
 812de78:	ad400204 	addi	r21,r21,8
 812de7c:	a8c00017 	ldw	r3,0(r21)
 812de80:	10c00015 	stw	r3,0(r2)
 812de84:	a8c00117 	ldw	r3,4(r21)
 812de88:	10c00115 	stw	r3,4(r2)
 812de8c:	a8c00217 	ldw	r3,8(r21)
 812de90:	10c00215 	stw	r3,8(r2)
 812de94:	b447883a 	add	r3,r22,r17
 812de98:	bc45c83a 	sub	r2,r23,r17
 812de9c:	e0c00215 	stw	r3,8(fp)
 812dea0:	10800054 	ori	r2,r2,1
 812dea4:	18800115 	stw	r2,4(r3)
 812dea8:	b0800117 	ldw	r2,4(r22)
 812deac:	a009883a 	mov	r4,r20
 812deb0:	1080004c 	andi	r2,r2,1
 812deb4:	1462b03a 	or	r17,r2,r17
 812deb8:	b4400115 	stw	r17,4(r22)
 812debc:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812dec0:	9005883a 	mov	r2,r18
 812dec4:	003f4006 	br	812dbc8 <__alt_data_end+0xfc12dbc8>
 812dec8:	a8c00217 	ldw	r3,8(r21)
 812decc:	90c00215 	stw	r3,8(r18)
 812ded0:	a8c00317 	ldw	r3,12(r21)
 812ded4:	90c00315 	stw	r3,12(r18)
 812ded8:	30801126 	beq	r6,r2,812df20 <_realloc_r+0x4c8>
 812dedc:	90800404 	addi	r2,r18,16
 812dee0:	a8c00404 	addi	r3,r21,16
 812dee4:	003f1906 	br	812db4c <__alt_data_end+0xfc12db4c>
 812dee8:	90ffff17 	ldw	r3,-4(r18)
 812deec:	00bfff04 	movi	r2,-4
 812def0:	a825883a 	mov	r18,r21
 812def4:	1884703a 	and	r2,r3,r2
 812def8:	80a1883a 	add	r16,r16,r2
 812defc:	003f2406 	br	812db90 <__alt_data_end+0xfc12db90>
 812df00:	a8800217 	ldw	r2,8(r21)
 812df04:	b0800415 	stw	r2,16(r22)
 812df08:	a8800317 	ldw	r2,12(r21)
 812df0c:	b0800515 	stw	r2,20(r22)
 812df10:	31000a26 	beq	r6,r4,812df3c <_realloc_r+0x4e4>
 812df14:	b0800604 	addi	r2,r22,24
 812df18:	ad400404 	addi	r21,r21,16
 812df1c:	003fa906 	br	812ddc4 <__alt_data_end+0xfc12ddc4>
 812df20:	a9000417 	ldw	r4,16(r21)
 812df24:	90800604 	addi	r2,r18,24
 812df28:	a8c00604 	addi	r3,r21,24
 812df2c:	91000415 	stw	r4,16(r18)
 812df30:	a9000517 	ldw	r4,20(r21)
 812df34:	91000515 	stw	r4,20(r18)
 812df38:	003f0406 	br	812db4c <__alt_data_end+0xfc12db4c>
 812df3c:	a8c00417 	ldw	r3,16(r21)
 812df40:	ad400604 	addi	r21,r21,24
 812df44:	b0800804 	addi	r2,r22,32
 812df48:	b0c00615 	stw	r3,24(r22)
 812df4c:	a8ffff17 	ldw	r3,-4(r21)
 812df50:	b0c00715 	stw	r3,28(r22)
 812df54:	003f9b06 	br	812ddc4 <__alt_data_end+0xfc12ddc4>
 812df58:	9005883a 	mov	r2,r18
 812df5c:	003fc706 	br	812de7c <__alt_data_end+0xfc12de7c>
 812df60:	a80b883a 	mov	r5,r21
 812df64:	9009883a 	mov	r4,r18
 812df68:	812d7d40 	call	812d7d4 <memmove>
 812df6c:	003fc906 	br	812de94 <__alt_data_end+0xfc12de94>
 812df70:	a8800217 	ldw	r2,8(r21)
 812df74:	b0800415 	stw	r2,16(r22)
 812df78:	a8800317 	ldw	r2,12(r21)
 812df7c:	b0800515 	stw	r2,20(r22)
 812df80:	31000726 	beq	r6,r4,812dfa0 <_realloc_r+0x548>
 812df84:	b0800604 	addi	r2,r22,24
 812df88:	ad400404 	addi	r21,r21,16
 812df8c:	003fbb06 	br	812de7c <__alt_data_end+0xfc12de7c>
 812df90:	a009883a 	mov	r4,r20
 812df94:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812df98:	0005883a 	mov	r2,zero
 812df9c:	003f0a06 	br	812dbc8 <__alt_data_end+0xfc12dbc8>
 812dfa0:	a8c00417 	ldw	r3,16(r21)
 812dfa4:	ad400604 	addi	r21,r21,24
 812dfa8:	b0800804 	addi	r2,r22,32
 812dfac:	b0c00615 	stw	r3,24(r22)
 812dfb0:	a8ffff17 	ldw	r3,-4(r21)
 812dfb4:	b0c00715 	stw	r3,28(r22)
 812dfb8:	003fb006 	br	812de7c <__alt_data_end+0xfc12de7c>

0812dfbc <_sbrk_r>:
 812dfbc:	defffd04 	addi	sp,sp,-12
 812dfc0:	dc000015 	stw	r16,0(sp)
 812dfc4:	040204f4 	movhi	r16,2067
 812dfc8:	dc400115 	stw	r17,4(sp)
 812dfcc:	84134004 	addi	r16,r16,19712
 812dfd0:	2023883a 	mov	r17,r4
 812dfd4:	2809883a 	mov	r4,r5
 812dfd8:	dfc00215 	stw	ra,8(sp)
 812dfdc:	80000015 	stw	zero,0(r16)
 812dfe0:	812f7bc0 	call	812f7bc <sbrk>
 812dfe4:	00ffffc4 	movi	r3,-1
 812dfe8:	10c00526 	beq	r2,r3,812e000 <_sbrk_r+0x44>
 812dfec:	dfc00217 	ldw	ra,8(sp)
 812dff0:	dc400117 	ldw	r17,4(sp)
 812dff4:	dc000017 	ldw	r16,0(sp)
 812dff8:	dec00304 	addi	sp,sp,12
 812dffc:	f800283a 	ret
 812e000:	80c00017 	ldw	r3,0(r16)
 812e004:	183ff926 	beq	r3,zero,812dfec <__alt_data_end+0xfc12dfec>
 812e008:	88c00015 	stw	r3,0(r17)
 812e00c:	003ff706 	br	812dfec <__alt_data_end+0xfc12dfec>

0812e010 <__sread>:
 812e010:	defffe04 	addi	sp,sp,-8
 812e014:	dc000015 	stw	r16,0(sp)
 812e018:	2821883a 	mov	r16,r5
 812e01c:	2940038f 	ldh	r5,14(r5)
 812e020:	dfc00115 	stw	ra,4(sp)
 812e024:	812ed500 	call	812ed50 <_read_r>
 812e028:	10000716 	blt	r2,zero,812e048 <__sread+0x38>
 812e02c:	80c01417 	ldw	r3,80(r16)
 812e030:	1887883a 	add	r3,r3,r2
 812e034:	80c01415 	stw	r3,80(r16)
 812e038:	dfc00117 	ldw	ra,4(sp)
 812e03c:	dc000017 	ldw	r16,0(sp)
 812e040:	dec00204 	addi	sp,sp,8
 812e044:	f800283a 	ret
 812e048:	80c0030b 	ldhu	r3,12(r16)
 812e04c:	18fbffcc 	andi	r3,r3,61439
 812e050:	80c0030d 	sth	r3,12(r16)
 812e054:	dfc00117 	ldw	ra,4(sp)
 812e058:	dc000017 	ldw	r16,0(sp)
 812e05c:	dec00204 	addi	sp,sp,8
 812e060:	f800283a 	ret

0812e064 <__seofread>:
 812e064:	0005883a 	mov	r2,zero
 812e068:	f800283a 	ret

0812e06c <__swrite>:
 812e06c:	2880030b 	ldhu	r2,12(r5)
 812e070:	defffb04 	addi	sp,sp,-20
 812e074:	dcc00315 	stw	r19,12(sp)
 812e078:	dc800215 	stw	r18,8(sp)
 812e07c:	dc400115 	stw	r17,4(sp)
 812e080:	dc000015 	stw	r16,0(sp)
 812e084:	dfc00415 	stw	ra,16(sp)
 812e088:	10c0400c 	andi	r3,r2,256
 812e08c:	2821883a 	mov	r16,r5
 812e090:	2023883a 	mov	r17,r4
 812e094:	3025883a 	mov	r18,r6
 812e098:	3827883a 	mov	r19,r7
 812e09c:	18000526 	beq	r3,zero,812e0b4 <__swrite+0x48>
 812e0a0:	2940038f 	ldh	r5,14(r5)
 812e0a4:	01c00084 	movi	r7,2
 812e0a8:	000d883a 	mov	r6,zero
 812e0ac:	812eb340 	call	812eb34 <_lseek_r>
 812e0b0:	8080030b 	ldhu	r2,12(r16)
 812e0b4:	8140038f 	ldh	r5,14(r16)
 812e0b8:	10bbffcc 	andi	r2,r2,61439
 812e0bc:	980f883a 	mov	r7,r19
 812e0c0:	900d883a 	mov	r6,r18
 812e0c4:	8809883a 	mov	r4,r17
 812e0c8:	8080030d 	sth	r2,12(r16)
 812e0cc:	dfc00417 	ldw	ra,16(sp)
 812e0d0:	dcc00317 	ldw	r19,12(sp)
 812e0d4:	dc800217 	ldw	r18,8(sp)
 812e0d8:	dc400117 	ldw	r17,4(sp)
 812e0dc:	dc000017 	ldw	r16,0(sp)
 812e0e0:	dec00504 	addi	sp,sp,20
 812e0e4:	812e14c1 	jmpi	812e14c <_write_r>

0812e0e8 <__sseek>:
 812e0e8:	defffe04 	addi	sp,sp,-8
 812e0ec:	dc000015 	stw	r16,0(sp)
 812e0f0:	2821883a 	mov	r16,r5
 812e0f4:	2940038f 	ldh	r5,14(r5)
 812e0f8:	dfc00115 	stw	ra,4(sp)
 812e0fc:	812eb340 	call	812eb34 <_lseek_r>
 812e100:	00ffffc4 	movi	r3,-1
 812e104:	10c00826 	beq	r2,r3,812e128 <__sseek+0x40>
 812e108:	80c0030b 	ldhu	r3,12(r16)
 812e10c:	80801415 	stw	r2,80(r16)
 812e110:	18c40014 	ori	r3,r3,4096
 812e114:	80c0030d 	sth	r3,12(r16)
 812e118:	dfc00117 	ldw	ra,4(sp)
 812e11c:	dc000017 	ldw	r16,0(sp)
 812e120:	dec00204 	addi	sp,sp,8
 812e124:	f800283a 	ret
 812e128:	80c0030b 	ldhu	r3,12(r16)
 812e12c:	18fbffcc 	andi	r3,r3,61439
 812e130:	80c0030d 	sth	r3,12(r16)
 812e134:	dfc00117 	ldw	ra,4(sp)
 812e138:	dc000017 	ldw	r16,0(sp)
 812e13c:	dec00204 	addi	sp,sp,8
 812e140:	f800283a 	ret

0812e144 <__sclose>:
 812e144:	2940038f 	ldh	r5,14(r5)
 812e148:	812e3001 	jmpi	812e300 <_close_r>

0812e14c <_write_r>:
 812e14c:	defffd04 	addi	sp,sp,-12
 812e150:	2805883a 	mov	r2,r5
 812e154:	dc000015 	stw	r16,0(sp)
 812e158:	040204f4 	movhi	r16,2067
 812e15c:	dc400115 	stw	r17,4(sp)
 812e160:	300b883a 	mov	r5,r6
 812e164:	84134004 	addi	r16,r16,19712
 812e168:	2023883a 	mov	r17,r4
 812e16c:	380d883a 	mov	r6,r7
 812e170:	1009883a 	mov	r4,r2
 812e174:	dfc00215 	stw	ra,8(sp)
 812e178:	80000015 	stw	zero,0(r16)
 812e17c:	812f8a80 	call	812f8a8 <write>
 812e180:	00ffffc4 	movi	r3,-1
 812e184:	10c00526 	beq	r2,r3,812e19c <_write_r+0x50>
 812e188:	dfc00217 	ldw	ra,8(sp)
 812e18c:	dc400117 	ldw	r17,4(sp)
 812e190:	dc000017 	ldw	r16,0(sp)
 812e194:	dec00304 	addi	sp,sp,12
 812e198:	f800283a 	ret
 812e19c:	80c00017 	ldw	r3,0(r16)
 812e1a0:	183ff926 	beq	r3,zero,812e188 <__alt_data_end+0xfc12e188>
 812e1a4:	88c00015 	stw	r3,0(r17)
 812e1a8:	003ff706 	br	812e188 <__alt_data_end+0xfc12e188>

0812e1ac <__swsetup_r>:
 812e1ac:	008204f4 	movhi	r2,2067
 812e1b0:	defffd04 	addi	sp,sp,-12
 812e1b4:	108c9404 	addi	r2,r2,12880
 812e1b8:	dc400115 	stw	r17,4(sp)
 812e1bc:	2023883a 	mov	r17,r4
 812e1c0:	11000017 	ldw	r4,0(r2)
 812e1c4:	dc000015 	stw	r16,0(sp)
 812e1c8:	dfc00215 	stw	ra,8(sp)
 812e1cc:	2821883a 	mov	r16,r5
 812e1d0:	20000226 	beq	r4,zero,812e1dc <__swsetup_r+0x30>
 812e1d4:	20800e17 	ldw	r2,56(r4)
 812e1d8:	10003126 	beq	r2,zero,812e2a0 <__swsetup_r+0xf4>
 812e1dc:	8080030b 	ldhu	r2,12(r16)
 812e1e0:	10c0020c 	andi	r3,r2,8
 812e1e4:	1009883a 	mov	r4,r2
 812e1e8:	18000f26 	beq	r3,zero,812e228 <__swsetup_r+0x7c>
 812e1ec:	80c00417 	ldw	r3,16(r16)
 812e1f0:	18001526 	beq	r3,zero,812e248 <__swsetup_r+0x9c>
 812e1f4:	1100004c 	andi	r4,r2,1
 812e1f8:	20001c1e 	bne	r4,zero,812e26c <__swsetup_r+0xc0>
 812e1fc:	1080008c 	andi	r2,r2,2
 812e200:	1000291e 	bne	r2,zero,812e2a8 <__swsetup_r+0xfc>
 812e204:	80800517 	ldw	r2,20(r16)
 812e208:	80800215 	stw	r2,8(r16)
 812e20c:	18001c26 	beq	r3,zero,812e280 <__swsetup_r+0xd4>
 812e210:	0005883a 	mov	r2,zero
 812e214:	dfc00217 	ldw	ra,8(sp)
 812e218:	dc400117 	ldw	r17,4(sp)
 812e21c:	dc000017 	ldw	r16,0(sp)
 812e220:	dec00304 	addi	sp,sp,12
 812e224:	f800283a 	ret
 812e228:	2080040c 	andi	r2,r4,16
 812e22c:	10002e26 	beq	r2,zero,812e2e8 <__swsetup_r+0x13c>
 812e230:	2080010c 	andi	r2,r4,4
 812e234:	10001e1e 	bne	r2,zero,812e2b0 <__swsetup_r+0x104>
 812e238:	80c00417 	ldw	r3,16(r16)
 812e23c:	20800214 	ori	r2,r4,8
 812e240:	8080030d 	sth	r2,12(r16)
 812e244:	183feb1e 	bne	r3,zero,812e1f4 <__alt_data_end+0xfc12e1f4>
 812e248:	1100a00c 	andi	r4,r2,640
 812e24c:	01408004 	movi	r5,512
 812e250:	217fe826 	beq	r4,r5,812e1f4 <__alt_data_end+0xfc12e1f4>
 812e254:	800b883a 	mov	r5,r16
 812e258:	8809883a 	mov	r4,r17
 812e25c:	812eb940 	call	812eb94 <__smakebuf_r>
 812e260:	8080030b 	ldhu	r2,12(r16)
 812e264:	80c00417 	ldw	r3,16(r16)
 812e268:	003fe206 	br	812e1f4 <__alt_data_end+0xfc12e1f4>
 812e26c:	80800517 	ldw	r2,20(r16)
 812e270:	80000215 	stw	zero,8(r16)
 812e274:	0085c83a 	sub	r2,zero,r2
 812e278:	80800615 	stw	r2,24(r16)
 812e27c:	183fe41e 	bne	r3,zero,812e210 <__alt_data_end+0xfc12e210>
 812e280:	80c0030b 	ldhu	r3,12(r16)
 812e284:	0005883a 	mov	r2,zero
 812e288:	1900200c 	andi	r4,r3,128
 812e28c:	203fe126 	beq	r4,zero,812e214 <__alt_data_end+0xfc12e214>
 812e290:	18c01014 	ori	r3,r3,64
 812e294:	80c0030d 	sth	r3,12(r16)
 812e298:	00bfffc4 	movi	r2,-1
 812e29c:	003fdd06 	br	812e214 <__alt_data_end+0xfc12e214>
 812e2a0:	812c6fc0 	call	812c6fc <__sinit>
 812e2a4:	003fcd06 	br	812e1dc <__alt_data_end+0xfc12e1dc>
 812e2a8:	0005883a 	mov	r2,zero
 812e2ac:	003fd606 	br	812e208 <__alt_data_end+0xfc12e208>
 812e2b0:	81400c17 	ldw	r5,48(r16)
 812e2b4:	28000626 	beq	r5,zero,812e2d0 <__swsetup_r+0x124>
 812e2b8:	80801004 	addi	r2,r16,64
 812e2bc:	28800326 	beq	r5,r2,812e2cc <__swsetup_r+0x120>
 812e2c0:	8809883a 	mov	r4,r17
 812e2c4:	812e8240 	call	812e824 <_free_r>
 812e2c8:	8100030b 	ldhu	r4,12(r16)
 812e2cc:	80000c15 	stw	zero,48(r16)
 812e2d0:	80c00417 	ldw	r3,16(r16)
 812e2d4:	00bff6c4 	movi	r2,-37
 812e2d8:	1108703a 	and	r4,r2,r4
 812e2dc:	80000115 	stw	zero,4(r16)
 812e2e0:	80c00015 	stw	r3,0(r16)
 812e2e4:	003fd506 	br	812e23c <__alt_data_end+0xfc12e23c>
 812e2e8:	00800244 	movi	r2,9
 812e2ec:	88800015 	stw	r2,0(r17)
 812e2f0:	20801014 	ori	r2,r4,64
 812e2f4:	8080030d 	sth	r2,12(r16)
 812e2f8:	00bfffc4 	movi	r2,-1
 812e2fc:	003fc506 	br	812e214 <__alt_data_end+0xfc12e214>

0812e300 <_close_r>:
 812e300:	defffd04 	addi	sp,sp,-12
 812e304:	dc000015 	stw	r16,0(sp)
 812e308:	040204f4 	movhi	r16,2067
 812e30c:	dc400115 	stw	r17,4(sp)
 812e310:	84134004 	addi	r16,r16,19712
 812e314:	2023883a 	mov	r17,r4
 812e318:	2809883a 	mov	r4,r5
 812e31c:	dfc00215 	stw	ra,8(sp)
 812e320:	80000015 	stw	zero,0(r16)
 812e324:	812f0500 	call	812f050 <close>
 812e328:	00ffffc4 	movi	r3,-1
 812e32c:	10c00526 	beq	r2,r3,812e344 <_close_r+0x44>
 812e330:	dfc00217 	ldw	ra,8(sp)
 812e334:	dc400117 	ldw	r17,4(sp)
 812e338:	dc000017 	ldw	r16,0(sp)
 812e33c:	dec00304 	addi	sp,sp,12
 812e340:	f800283a 	ret
 812e344:	80c00017 	ldw	r3,0(r16)
 812e348:	183ff926 	beq	r3,zero,812e330 <__alt_data_end+0xfc12e330>
 812e34c:	88c00015 	stw	r3,0(r17)
 812e350:	003ff706 	br	812e330 <__alt_data_end+0xfc12e330>

0812e354 <_fclose_r>:
 812e354:	28003926 	beq	r5,zero,812e43c <_fclose_r+0xe8>
 812e358:	defffc04 	addi	sp,sp,-16
 812e35c:	dc400115 	stw	r17,4(sp)
 812e360:	dc000015 	stw	r16,0(sp)
 812e364:	dfc00315 	stw	ra,12(sp)
 812e368:	dc800215 	stw	r18,8(sp)
 812e36c:	2023883a 	mov	r17,r4
 812e370:	2821883a 	mov	r16,r5
 812e374:	20000226 	beq	r4,zero,812e380 <_fclose_r+0x2c>
 812e378:	20800e17 	ldw	r2,56(r4)
 812e37c:	10002726 	beq	r2,zero,812e41c <_fclose_r+0xc8>
 812e380:	8080030f 	ldh	r2,12(r16)
 812e384:	1000071e 	bne	r2,zero,812e3a4 <_fclose_r+0x50>
 812e388:	0005883a 	mov	r2,zero
 812e38c:	dfc00317 	ldw	ra,12(sp)
 812e390:	dc800217 	ldw	r18,8(sp)
 812e394:	dc400117 	ldw	r17,4(sp)
 812e398:	dc000017 	ldw	r16,0(sp)
 812e39c:	dec00404 	addi	sp,sp,16
 812e3a0:	f800283a 	ret
 812e3a4:	800b883a 	mov	r5,r16
 812e3a8:	8809883a 	mov	r4,r17
 812e3ac:	812e4580 	call	812e458 <__sflush_r>
 812e3b0:	1025883a 	mov	r18,r2
 812e3b4:	80800b17 	ldw	r2,44(r16)
 812e3b8:	10000426 	beq	r2,zero,812e3cc <_fclose_r+0x78>
 812e3bc:	81400717 	ldw	r5,28(r16)
 812e3c0:	8809883a 	mov	r4,r17
 812e3c4:	103ee83a 	callr	r2
 812e3c8:	10001616 	blt	r2,zero,812e424 <_fclose_r+0xd0>
 812e3cc:	8080030b 	ldhu	r2,12(r16)
 812e3d0:	1080200c 	andi	r2,r2,128
 812e3d4:	1000151e 	bne	r2,zero,812e42c <_fclose_r+0xd8>
 812e3d8:	81400c17 	ldw	r5,48(r16)
 812e3dc:	28000526 	beq	r5,zero,812e3f4 <_fclose_r+0xa0>
 812e3e0:	80801004 	addi	r2,r16,64
 812e3e4:	28800226 	beq	r5,r2,812e3f0 <_fclose_r+0x9c>
 812e3e8:	8809883a 	mov	r4,r17
 812e3ec:	812e8240 	call	812e824 <_free_r>
 812e3f0:	80000c15 	stw	zero,48(r16)
 812e3f4:	81401117 	ldw	r5,68(r16)
 812e3f8:	28000326 	beq	r5,zero,812e408 <_fclose_r+0xb4>
 812e3fc:	8809883a 	mov	r4,r17
 812e400:	812e8240 	call	812e824 <_free_r>
 812e404:	80001115 	stw	zero,68(r16)
 812e408:	812c70c0 	call	812c70c <__sfp_lock_acquire>
 812e40c:	8000030d 	sth	zero,12(r16)
 812e410:	812c7100 	call	812c710 <__sfp_lock_release>
 812e414:	9005883a 	mov	r2,r18
 812e418:	003fdc06 	br	812e38c <__alt_data_end+0xfc12e38c>
 812e41c:	812c6fc0 	call	812c6fc <__sinit>
 812e420:	003fd706 	br	812e380 <__alt_data_end+0xfc12e380>
 812e424:	04bfffc4 	movi	r18,-1
 812e428:	003fe806 	br	812e3cc <__alt_data_end+0xfc12e3cc>
 812e42c:	81400417 	ldw	r5,16(r16)
 812e430:	8809883a 	mov	r4,r17
 812e434:	812e8240 	call	812e824 <_free_r>
 812e438:	003fe706 	br	812e3d8 <__alt_data_end+0xfc12e3d8>
 812e43c:	0005883a 	mov	r2,zero
 812e440:	f800283a 	ret

0812e444 <fclose>:
 812e444:	008204f4 	movhi	r2,2067
 812e448:	108c9404 	addi	r2,r2,12880
 812e44c:	200b883a 	mov	r5,r4
 812e450:	11000017 	ldw	r4,0(r2)
 812e454:	812e3541 	jmpi	812e354 <_fclose_r>

0812e458 <__sflush_r>:
 812e458:	2880030b 	ldhu	r2,12(r5)
 812e45c:	defffb04 	addi	sp,sp,-20
 812e460:	dcc00315 	stw	r19,12(sp)
 812e464:	dc400115 	stw	r17,4(sp)
 812e468:	dfc00415 	stw	ra,16(sp)
 812e46c:	dc800215 	stw	r18,8(sp)
 812e470:	dc000015 	stw	r16,0(sp)
 812e474:	10c0020c 	andi	r3,r2,8
 812e478:	2823883a 	mov	r17,r5
 812e47c:	2027883a 	mov	r19,r4
 812e480:	1800311e 	bne	r3,zero,812e548 <__sflush_r+0xf0>
 812e484:	28c00117 	ldw	r3,4(r5)
 812e488:	10820014 	ori	r2,r2,2048
 812e48c:	2880030d 	sth	r2,12(r5)
 812e490:	00c04b0e 	bge	zero,r3,812e5c0 <__sflush_r+0x168>
 812e494:	8a000a17 	ldw	r8,40(r17)
 812e498:	40002326 	beq	r8,zero,812e528 <__sflush_r+0xd0>
 812e49c:	9c000017 	ldw	r16,0(r19)
 812e4a0:	10c4000c 	andi	r3,r2,4096
 812e4a4:	98000015 	stw	zero,0(r19)
 812e4a8:	18004826 	beq	r3,zero,812e5cc <__sflush_r+0x174>
 812e4ac:	89801417 	ldw	r6,80(r17)
 812e4b0:	10c0010c 	andi	r3,r2,4
 812e4b4:	18000626 	beq	r3,zero,812e4d0 <__sflush_r+0x78>
 812e4b8:	88c00117 	ldw	r3,4(r17)
 812e4bc:	88800c17 	ldw	r2,48(r17)
 812e4c0:	30cdc83a 	sub	r6,r6,r3
 812e4c4:	10000226 	beq	r2,zero,812e4d0 <__sflush_r+0x78>
 812e4c8:	88800f17 	ldw	r2,60(r17)
 812e4cc:	308dc83a 	sub	r6,r6,r2
 812e4d0:	89400717 	ldw	r5,28(r17)
 812e4d4:	000f883a 	mov	r7,zero
 812e4d8:	9809883a 	mov	r4,r19
 812e4dc:	403ee83a 	callr	r8
 812e4e0:	00ffffc4 	movi	r3,-1
 812e4e4:	10c04426 	beq	r2,r3,812e5f8 <__sflush_r+0x1a0>
 812e4e8:	88c0030b 	ldhu	r3,12(r17)
 812e4ec:	89000417 	ldw	r4,16(r17)
 812e4f0:	88000115 	stw	zero,4(r17)
 812e4f4:	197dffcc 	andi	r5,r3,63487
 812e4f8:	8940030d 	sth	r5,12(r17)
 812e4fc:	89000015 	stw	r4,0(r17)
 812e500:	18c4000c 	andi	r3,r3,4096
 812e504:	18002c1e 	bne	r3,zero,812e5b8 <__sflush_r+0x160>
 812e508:	89400c17 	ldw	r5,48(r17)
 812e50c:	9c000015 	stw	r16,0(r19)
 812e510:	28000526 	beq	r5,zero,812e528 <__sflush_r+0xd0>
 812e514:	88801004 	addi	r2,r17,64
 812e518:	28800226 	beq	r5,r2,812e524 <__sflush_r+0xcc>
 812e51c:	9809883a 	mov	r4,r19
 812e520:	812e8240 	call	812e824 <_free_r>
 812e524:	88000c15 	stw	zero,48(r17)
 812e528:	0005883a 	mov	r2,zero
 812e52c:	dfc00417 	ldw	ra,16(sp)
 812e530:	dcc00317 	ldw	r19,12(sp)
 812e534:	dc800217 	ldw	r18,8(sp)
 812e538:	dc400117 	ldw	r17,4(sp)
 812e53c:	dc000017 	ldw	r16,0(sp)
 812e540:	dec00504 	addi	sp,sp,20
 812e544:	f800283a 	ret
 812e548:	2c800417 	ldw	r18,16(r5)
 812e54c:	903ff626 	beq	r18,zero,812e528 <__alt_data_end+0xfc12e528>
 812e550:	2c000017 	ldw	r16,0(r5)
 812e554:	108000cc 	andi	r2,r2,3
 812e558:	2c800015 	stw	r18,0(r5)
 812e55c:	84a1c83a 	sub	r16,r16,r18
 812e560:	1000131e 	bne	r2,zero,812e5b0 <__sflush_r+0x158>
 812e564:	28800517 	ldw	r2,20(r5)
 812e568:	88800215 	stw	r2,8(r17)
 812e56c:	04000316 	blt	zero,r16,812e57c <__sflush_r+0x124>
 812e570:	003fed06 	br	812e528 <__alt_data_end+0xfc12e528>
 812e574:	90a5883a 	add	r18,r18,r2
 812e578:	043feb0e 	bge	zero,r16,812e528 <__alt_data_end+0xfc12e528>
 812e57c:	88800917 	ldw	r2,36(r17)
 812e580:	89400717 	ldw	r5,28(r17)
 812e584:	800f883a 	mov	r7,r16
 812e588:	900d883a 	mov	r6,r18
 812e58c:	9809883a 	mov	r4,r19
 812e590:	103ee83a 	callr	r2
 812e594:	80a1c83a 	sub	r16,r16,r2
 812e598:	00bff616 	blt	zero,r2,812e574 <__alt_data_end+0xfc12e574>
 812e59c:	88c0030b 	ldhu	r3,12(r17)
 812e5a0:	00bfffc4 	movi	r2,-1
 812e5a4:	18c01014 	ori	r3,r3,64
 812e5a8:	88c0030d 	sth	r3,12(r17)
 812e5ac:	003fdf06 	br	812e52c <__alt_data_end+0xfc12e52c>
 812e5b0:	0005883a 	mov	r2,zero
 812e5b4:	003fec06 	br	812e568 <__alt_data_end+0xfc12e568>
 812e5b8:	88801415 	stw	r2,80(r17)
 812e5bc:	003fd206 	br	812e508 <__alt_data_end+0xfc12e508>
 812e5c0:	28c00f17 	ldw	r3,60(r5)
 812e5c4:	00ffb316 	blt	zero,r3,812e494 <__alt_data_end+0xfc12e494>
 812e5c8:	003fd706 	br	812e528 <__alt_data_end+0xfc12e528>
 812e5cc:	89400717 	ldw	r5,28(r17)
 812e5d0:	000d883a 	mov	r6,zero
 812e5d4:	01c00044 	movi	r7,1
 812e5d8:	9809883a 	mov	r4,r19
 812e5dc:	403ee83a 	callr	r8
 812e5e0:	100d883a 	mov	r6,r2
 812e5e4:	00bfffc4 	movi	r2,-1
 812e5e8:	30801426 	beq	r6,r2,812e63c <__sflush_r+0x1e4>
 812e5ec:	8880030b 	ldhu	r2,12(r17)
 812e5f0:	8a000a17 	ldw	r8,40(r17)
 812e5f4:	003fae06 	br	812e4b0 <__alt_data_end+0xfc12e4b0>
 812e5f8:	98c00017 	ldw	r3,0(r19)
 812e5fc:	183fba26 	beq	r3,zero,812e4e8 <__alt_data_end+0xfc12e4e8>
 812e600:	01000744 	movi	r4,29
 812e604:	19000626 	beq	r3,r4,812e620 <__sflush_r+0x1c8>
 812e608:	01000584 	movi	r4,22
 812e60c:	19000426 	beq	r3,r4,812e620 <__sflush_r+0x1c8>
 812e610:	88c0030b 	ldhu	r3,12(r17)
 812e614:	18c01014 	ori	r3,r3,64
 812e618:	88c0030d 	sth	r3,12(r17)
 812e61c:	003fc306 	br	812e52c <__alt_data_end+0xfc12e52c>
 812e620:	8880030b 	ldhu	r2,12(r17)
 812e624:	88c00417 	ldw	r3,16(r17)
 812e628:	88000115 	stw	zero,4(r17)
 812e62c:	10bdffcc 	andi	r2,r2,63487
 812e630:	8880030d 	sth	r2,12(r17)
 812e634:	88c00015 	stw	r3,0(r17)
 812e638:	003fb306 	br	812e508 <__alt_data_end+0xfc12e508>
 812e63c:	98800017 	ldw	r2,0(r19)
 812e640:	103fea26 	beq	r2,zero,812e5ec <__alt_data_end+0xfc12e5ec>
 812e644:	00c00744 	movi	r3,29
 812e648:	10c00226 	beq	r2,r3,812e654 <__sflush_r+0x1fc>
 812e64c:	00c00584 	movi	r3,22
 812e650:	10c0031e 	bne	r2,r3,812e660 <__sflush_r+0x208>
 812e654:	9c000015 	stw	r16,0(r19)
 812e658:	0005883a 	mov	r2,zero
 812e65c:	003fb306 	br	812e52c <__alt_data_end+0xfc12e52c>
 812e660:	88c0030b 	ldhu	r3,12(r17)
 812e664:	3005883a 	mov	r2,r6
 812e668:	18c01014 	ori	r3,r3,64
 812e66c:	88c0030d 	sth	r3,12(r17)
 812e670:	003fae06 	br	812e52c <__alt_data_end+0xfc12e52c>

0812e674 <_fflush_r>:
 812e674:	defffd04 	addi	sp,sp,-12
 812e678:	dc000115 	stw	r16,4(sp)
 812e67c:	dfc00215 	stw	ra,8(sp)
 812e680:	2021883a 	mov	r16,r4
 812e684:	20000226 	beq	r4,zero,812e690 <_fflush_r+0x1c>
 812e688:	20800e17 	ldw	r2,56(r4)
 812e68c:	10000c26 	beq	r2,zero,812e6c0 <_fflush_r+0x4c>
 812e690:	2880030f 	ldh	r2,12(r5)
 812e694:	1000051e 	bne	r2,zero,812e6ac <_fflush_r+0x38>
 812e698:	0005883a 	mov	r2,zero
 812e69c:	dfc00217 	ldw	ra,8(sp)
 812e6a0:	dc000117 	ldw	r16,4(sp)
 812e6a4:	dec00304 	addi	sp,sp,12
 812e6a8:	f800283a 	ret
 812e6ac:	8009883a 	mov	r4,r16
 812e6b0:	dfc00217 	ldw	ra,8(sp)
 812e6b4:	dc000117 	ldw	r16,4(sp)
 812e6b8:	dec00304 	addi	sp,sp,12
 812e6bc:	812e4581 	jmpi	812e458 <__sflush_r>
 812e6c0:	d9400015 	stw	r5,0(sp)
 812e6c4:	812c6fc0 	call	812c6fc <__sinit>
 812e6c8:	d9400017 	ldw	r5,0(sp)
 812e6cc:	003ff006 	br	812e690 <__alt_data_end+0xfc12e690>

0812e6d0 <fflush>:
 812e6d0:	20000526 	beq	r4,zero,812e6e8 <fflush+0x18>
 812e6d4:	008204f4 	movhi	r2,2067
 812e6d8:	108c9404 	addi	r2,r2,12880
 812e6dc:	200b883a 	mov	r5,r4
 812e6e0:	11000017 	ldw	r4,0(r2)
 812e6e4:	812e6741 	jmpi	812e674 <_fflush_r>
 812e6e8:	008204f4 	movhi	r2,2067
 812e6ec:	108c9304 	addi	r2,r2,12876
 812e6f0:	11000017 	ldw	r4,0(r2)
 812e6f4:	014204f4 	movhi	r5,2067
 812e6f8:	29799d04 	addi	r5,r5,-6540
 812e6fc:	812ccd81 	jmpi	812ccd8 <_fwalk_reent>

0812e700 <_malloc_trim_r>:
 812e700:	defffb04 	addi	sp,sp,-20
 812e704:	dcc00315 	stw	r19,12(sp)
 812e708:	04c204f4 	movhi	r19,2067
 812e70c:	dc800215 	stw	r18,8(sp)
 812e710:	dc400115 	stw	r17,4(sp)
 812e714:	dc000015 	stw	r16,0(sp)
 812e718:	dfc00415 	stw	ra,16(sp)
 812e71c:	2821883a 	mov	r16,r5
 812e720:	9cc70e04 	addi	r19,r19,7224
 812e724:	2025883a 	mov	r18,r4
 812e728:	812f5b00 	call	812f5b0 <__malloc_lock>
 812e72c:	98800217 	ldw	r2,8(r19)
 812e730:	14400117 	ldw	r17,4(r2)
 812e734:	00bfff04 	movi	r2,-4
 812e738:	88a2703a 	and	r17,r17,r2
 812e73c:	8c21c83a 	sub	r16,r17,r16
 812e740:	8403fbc4 	addi	r16,r16,4079
 812e744:	8020d33a 	srli	r16,r16,12
 812e748:	0083ffc4 	movi	r2,4095
 812e74c:	843fffc4 	addi	r16,r16,-1
 812e750:	8020933a 	slli	r16,r16,12
 812e754:	1400060e 	bge	r2,r16,812e770 <_malloc_trim_r+0x70>
 812e758:	000b883a 	mov	r5,zero
 812e75c:	9009883a 	mov	r4,r18
 812e760:	812dfbc0 	call	812dfbc <_sbrk_r>
 812e764:	98c00217 	ldw	r3,8(r19)
 812e768:	1c47883a 	add	r3,r3,r17
 812e76c:	10c00a26 	beq	r2,r3,812e798 <_malloc_trim_r+0x98>
 812e770:	9009883a 	mov	r4,r18
 812e774:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812e778:	0005883a 	mov	r2,zero
 812e77c:	dfc00417 	ldw	ra,16(sp)
 812e780:	dcc00317 	ldw	r19,12(sp)
 812e784:	dc800217 	ldw	r18,8(sp)
 812e788:	dc400117 	ldw	r17,4(sp)
 812e78c:	dc000017 	ldw	r16,0(sp)
 812e790:	dec00504 	addi	sp,sp,20
 812e794:	f800283a 	ret
 812e798:	040bc83a 	sub	r5,zero,r16
 812e79c:	9009883a 	mov	r4,r18
 812e7a0:	812dfbc0 	call	812dfbc <_sbrk_r>
 812e7a4:	00ffffc4 	movi	r3,-1
 812e7a8:	10c00d26 	beq	r2,r3,812e7e0 <_malloc_trim_r+0xe0>
 812e7ac:	00c204f4 	movhi	r3,2067
 812e7b0:	18d34804 	addi	r3,r3,19744
 812e7b4:	18800017 	ldw	r2,0(r3)
 812e7b8:	99000217 	ldw	r4,8(r19)
 812e7bc:	8c23c83a 	sub	r17,r17,r16
 812e7c0:	8c400054 	ori	r17,r17,1
 812e7c4:	1421c83a 	sub	r16,r2,r16
 812e7c8:	24400115 	stw	r17,4(r4)
 812e7cc:	9009883a 	mov	r4,r18
 812e7d0:	1c000015 	stw	r16,0(r3)
 812e7d4:	812f5d40 	call	812f5d4 <__malloc_unlock>
 812e7d8:	00800044 	movi	r2,1
 812e7dc:	003fe706 	br	812e77c <__alt_data_end+0xfc12e77c>
 812e7e0:	000b883a 	mov	r5,zero
 812e7e4:	9009883a 	mov	r4,r18
 812e7e8:	812dfbc0 	call	812dfbc <_sbrk_r>
 812e7ec:	99000217 	ldw	r4,8(r19)
 812e7f0:	014003c4 	movi	r5,15
 812e7f4:	1107c83a 	sub	r3,r2,r4
 812e7f8:	28ffdd0e 	bge	r5,r3,812e770 <__alt_data_end+0xfc12e770>
 812e7fc:	014204f4 	movhi	r5,2067
 812e800:	294c9504 	addi	r5,r5,12884
 812e804:	29400017 	ldw	r5,0(r5)
 812e808:	18c00054 	ori	r3,r3,1
 812e80c:	20c00115 	stw	r3,4(r4)
 812e810:	00c204f4 	movhi	r3,2067
 812e814:	1145c83a 	sub	r2,r2,r5
 812e818:	18d34804 	addi	r3,r3,19744
 812e81c:	18800015 	stw	r2,0(r3)
 812e820:	003fd306 	br	812e770 <__alt_data_end+0xfc12e770>

0812e824 <_free_r>:
 812e824:	28004126 	beq	r5,zero,812e92c <_free_r+0x108>
 812e828:	defffd04 	addi	sp,sp,-12
 812e82c:	dc400115 	stw	r17,4(sp)
 812e830:	dc000015 	stw	r16,0(sp)
 812e834:	2023883a 	mov	r17,r4
 812e838:	2821883a 	mov	r16,r5
 812e83c:	dfc00215 	stw	ra,8(sp)
 812e840:	812f5b00 	call	812f5b0 <__malloc_lock>
 812e844:	81ffff17 	ldw	r7,-4(r16)
 812e848:	00bfff84 	movi	r2,-2
 812e84c:	010204f4 	movhi	r4,2067
 812e850:	81bffe04 	addi	r6,r16,-8
 812e854:	3884703a 	and	r2,r7,r2
 812e858:	21070e04 	addi	r4,r4,7224
 812e85c:	308b883a 	add	r5,r6,r2
 812e860:	2a400117 	ldw	r9,4(r5)
 812e864:	22000217 	ldw	r8,8(r4)
 812e868:	00ffff04 	movi	r3,-4
 812e86c:	48c6703a 	and	r3,r9,r3
 812e870:	2a005726 	beq	r5,r8,812e9d0 <_free_r+0x1ac>
 812e874:	28c00115 	stw	r3,4(r5)
 812e878:	39c0004c 	andi	r7,r7,1
 812e87c:	3800091e 	bne	r7,zero,812e8a4 <_free_r+0x80>
 812e880:	823ffe17 	ldw	r8,-8(r16)
 812e884:	22400204 	addi	r9,r4,8
 812e888:	320dc83a 	sub	r6,r6,r8
 812e88c:	31c00217 	ldw	r7,8(r6)
 812e890:	1205883a 	add	r2,r2,r8
 812e894:	3a406526 	beq	r7,r9,812ea2c <_free_r+0x208>
 812e898:	32000317 	ldw	r8,12(r6)
 812e89c:	3a000315 	stw	r8,12(r7)
 812e8a0:	41c00215 	stw	r7,8(r8)
 812e8a4:	28cf883a 	add	r7,r5,r3
 812e8a8:	39c00117 	ldw	r7,4(r7)
 812e8ac:	39c0004c 	andi	r7,r7,1
 812e8b0:	38003a26 	beq	r7,zero,812e99c <_free_r+0x178>
 812e8b4:	10c00054 	ori	r3,r2,1
 812e8b8:	30c00115 	stw	r3,4(r6)
 812e8bc:	3087883a 	add	r3,r6,r2
 812e8c0:	18800015 	stw	r2,0(r3)
 812e8c4:	00c07fc4 	movi	r3,511
 812e8c8:	18801936 	bltu	r3,r2,812e930 <_free_r+0x10c>
 812e8cc:	1004d0fa 	srli	r2,r2,3
 812e8d0:	01c00044 	movi	r7,1
 812e8d4:	21400117 	ldw	r5,4(r4)
 812e8d8:	10c00044 	addi	r3,r2,1
 812e8dc:	18c7883a 	add	r3,r3,r3
 812e8e0:	1005d0ba 	srai	r2,r2,2
 812e8e4:	18c7883a 	add	r3,r3,r3
 812e8e8:	18c7883a 	add	r3,r3,r3
 812e8ec:	1907883a 	add	r3,r3,r4
 812e8f0:	3884983a 	sll	r2,r7,r2
 812e8f4:	19c00017 	ldw	r7,0(r3)
 812e8f8:	1a3ffe04 	addi	r8,r3,-8
 812e8fc:	1144b03a 	or	r2,r2,r5
 812e900:	32000315 	stw	r8,12(r6)
 812e904:	31c00215 	stw	r7,8(r6)
 812e908:	20800115 	stw	r2,4(r4)
 812e90c:	19800015 	stw	r6,0(r3)
 812e910:	39800315 	stw	r6,12(r7)
 812e914:	8809883a 	mov	r4,r17
 812e918:	dfc00217 	ldw	ra,8(sp)
 812e91c:	dc400117 	ldw	r17,4(sp)
 812e920:	dc000017 	ldw	r16,0(sp)
 812e924:	dec00304 	addi	sp,sp,12
 812e928:	812f5d41 	jmpi	812f5d4 <__malloc_unlock>
 812e92c:	f800283a 	ret
 812e930:	100ad27a 	srli	r5,r2,9
 812e934:	00c00104 	movi	r3,4
 812e938:	19404a36 	bltu	r3,r5,812ea64 <_free_r+0x240>
 812e93c:	100ad1ba 	srli	r5,r2,6
 812e940:	28c00e44 	addi	r3,r5,57
 812e944:	18c7883a 	add	r3,r3,r3
 812e948:	29400e04 	addi	r5,r5,56
 812e94c:	18c7883a 	add	r3,r3,r3
 812e950:	18c7883a 	add	r3,r3,r3
 812e954:	1909883a 	add	r4,r3,r4
 812e958:	20c00017 	ldw	r3,0(r4)
 812e95c:	01c204f4 	movhi	r7,2067
 812e960:	213ffe04 	addi	r4,r4,-8
 812e964:	39c70e04 	addi	r7,r7,7224
 812e968:	20c04426 	beq	r4,r3,812ea7c <_free_r+0x258>
 812e96c:	01ffff04 	movi	r7,-4
 812e970:	19400117 	ldw	r5,4(r3)
 812e974:	29ca703a 	and	r5,r5,r7
 812e978:	1140022e 	bgeu	r2,r5,812e984 <_free_r+0x160>
 812e97c:	18c00217 	ldw	r3,8(r3)
 812e980:	20fffb1e 	bne	r4,r3,812e970 <__alt_data_end+0xfc12e970>
 812e984:	19000317 	ldw	r4,12(r3)
 812e988:	31000315 	stw	r4,12(r6)
 812e98c:	30c00215 	stw	r3,8(r6)
 812e990:	21800215 	stw	r6,8(r4)
 812e994:	19800315 	stw	r6,12(r3)
 812e998:	003fde06 	br	812e914 <__alt_data_end+0xfc12e914>
 812e99c:	29c00217 	ldw	r7,8(r5)
 812e9a0:	10c5883a 	add	r2,r2,r3
 812e9a4:	00c204f4 	movhi	r3,2067
 812e9a8:	18c71004 	addi	r3,r3,7232
 812e9ac:	38c03b26 	beq	r7,r3,812ea9c <_free_r+0x278>
 812e9b0:	2a000317 	ldw	r8,12(r5)
 812e9b4:	11400054 	ori	r5,r2,1
 812e9b8:	3087883a 	add	r3,r6,r2
 812e9bc:	3a000315 	stw	r8,12(r7)
 812e9c0:	41c00215 	stw	r7,8(r8)
 812e9c4:	31400115 	stw	r5,4(r6)
 812e9c8:	18800015 	stw	r2,0(r3)
 812e9cc:	003fbd06 	br	812e8c4 <__alt_data_end+0xfc12e8c4>
 812e9d0:	39c0004c 	andi	r7,r7,1
 812e9d4:	10c5883a 	add	r2,r2,r3
 812e9d8:	3800071e 	bne	r7,zero,812e9f8 <_free_r+0x1d4>
 812e9dc:	81fffe17 	ldw	r7,-8(r16)
 812e9e0:	31cdc83a 	sub	r6,r6,r7
 812e9e4:	30c00317 	ldw	r3,12(r6)
 812e9e8:	31400217 	ldw	r5,8(r6)
 812e9ec:	11c5883a 	add	r2,r2,r7
 812e9f0:	28c00315 	stw	r3,12(r5)
 812e9f4:	19400215 	stw	r5,8(r3)
 812e9f8:	10c00054 	ori	r3,r2,1
 812e9fc:	30c00115 	stw	r3,4(r6)
 812ea00:	00c204f4 	movhi	r3,2067
 812ea04:	18cc9604 	addi	r3,r3,12888
 812ea08:	18c00017 	ldw	r3,0(r3)
 812ea0c:	21800215 	stw	r6,8(r4)
 812ea10:	10ffc036 	bltu	r2,r3,812e914 <__alt_data_end+0xfc12e914>
 812ea14:	008204f4 	movhi	r2,2067
 812ea18:	10933f04 	addi	r2,r2,19708
 812ea1c:	11400017 	ldw	r5,0(r2)
 812ea20:	8809883a 	mov	r4,r17
 812ea24:	812e7000 	call	812e700 <_malloc_trim_r>
 812ea28:	003fba06 	br	812e914 <__alt_data_end+0xfc12e914>
 812ea2c:	28c9883a 	add	r4,r5,r3
 812ea30:	21000117 	ldw	r4,4(r4)
 812ea34:	2100004c 	andi	r4,r4,1
 812ea38:	2000391e 	bne	r4,zero,812eb20 <_free_r+0x2fc>
 812ea3c:	29c00217 	ldw	r7,8(r5)
 812ea40:	29000317 	ldw	r4,12(r5)
 812ea44:	1885883a 	add	r2,r3,r2
 812ea48:	10c00054 	ori	r3,r2,1
 812ea4c:	39000315 	stw	r4,12(r7)
 812ea50:	21c00215 	stw	r7,8(r4)
 812ea54:	30c00115 	stw	r3,4(r6)
 812ea58:	308d883a 	add	r6,r6,r2
 812ea5c:	30800015 	stw	r2,0(r6)
 812ea60:	003fac06 	br	812e914 <__alt_data_end+0xfc12e914>
 812ea64:	00c00504 	movi	r3,20
 812ea68:	19401536 	bltu	r3,r5,812eac0 <_free_r+0x29c>
 812ea6c:	28c01704 	addi	r3,r5,92
 812ea70:	18c7883a 	add	r3,r3,r3
 812ea74:	294016c4 	addi	r5,r5,91
 812ea78:	003fb406 	br	812e94c <__alt_data_end+0xfc12e94c>
 812ea7c:	280bd0ba 	srai	r5,r5,2
 812ea80:	00c00044 	movi	r3,1
 812ea84:	38800117 	ldw	r2,4(r7)
 812ea88:	194a983a 	sll	r5,r3,r5
 812ea8c:	2007883a 	mov	r3,r4
 812ea90:	2884b03a 	or	r2,r5,r2
 812ea94:	38800115 	stw	r2,4(r7)
 812ea98:	003fbb06 	br	812e988 <__alt_data_end+0xfc12e988>
 812ea9c:	21800515 	stw	r6,20(r4)
 812eaa0:	21800415 	stw	r6,16(r4)
 812eaa4:	10c00054 	ori	r3,r2,1
 812eaa8:	31c00315 	stw	r7,12(r6)
 812eaac:	31c00215 	stw	r7,8(r6)
 812eab0:	30c00115 	stw	r3,4(r6)
 812eab4:	308d883a 	add	r6,r6,r2
 812eab8:	30800015 	stw	r2,0(r6)
 812eabc:	003f9506 	br	812e914 <__alt_data_end+0xfc12e914>
 812eac0:	00c01504 	movi	r3,84
 812eac4:	19400536 	bltu	r3,r5,812eadc <_free_r+0x2b8>
 812eac8:	100ad33a 	srli	r5,r2,12
 812eacc:	28c01bc4 	addi	r3,r5,111
 812ead0:	18c7883a 	add	r3,r3,r3
 812ead4:	29401b84 	addi	r5,r5,110
 812ead8:	003f9c06 	br	812e94c <__alt_data_end+0xfc12e94c>
 812eadc:	00c05504 	movi	r3,340
 812eae0:	19400536 	bltu	r3,r5,812eaf8 <_free_r+0x2d4>
 812eae4:	100ad3fa 	srli	r5,r2,15
 812eae8:	28c01e04 	addi	r3,r5,120
 812eaec:	18c7883a 	add	r3,r3,r3
 812eaf0:	29401dc4 	addi	r5,r5,119
 812eaf4:	003f9506 	br	812e94c <__alt_data_end+0xfc12e94c>
 812eaf8:	00c15504 	movi	r3,1364
 812eafc:	19400536 	bltu	r3,r5,812eb14 <_free_r+0x2f0>
 812eb00:	100ad4ba 	srli	r5,r2,18
 812eb04:	28c01f44 	addi	r3,r5,125
 812eb08:	18c7883a 	add	r3,r3,r3
 812eb0c:	29401f04 	addi	r5,r5,124
 812eb10:	003f8e06 	br	812e94c <__alt_data_end+0xfc12e94c>
 812eb14:	00c03f84 	movi	r3,254
 812eb18:	01401f84 	movi	r5,126
 812eb1c:	003f8b06 	br	812e94c <__alt_data_end+0xfc12e94c>
 812eb20:	10c00054 	ori	r3,r2,1
 812eb24:	30c00115 	stw	r3,4(r6)
 812eb28:	308d883a 	add	r6,r6,r2
 812eb2c:	30800015 	stw	r2,0(r6)
 812eb30:	003f7806 	br	812e914 <__alt_data_end+0xfc12e914>

0812eb34 <_lseek_r>:
 812eb34:	defffd04 	addi	sp,sp,-12
 812eb38:	2805883a 	mov	r2,r5
 812eb3c:	dc000015 	stw	r16,0(sp)
 812eb40:	040204f4 	movhi	r16,2067
 812eb44:	dc400115 	stw	r17,4(sp)
 812eb48:	300b883a 	mov	r5,r6
 812eb4c:	84134004 	addi	r16,r16,19712
 812eb50:	2023883a 	mov	r17,r4
 812eb54:	380d883a 	mov	r6,r7
 812eb58:	1009883a 	mov	r4,r2
 812eb5c:	dfc00215 	stw	ra,8(sp)
 812eb60:	80000015 	stw	zero,0(r16)
 812eb64:	812f4580 	call	812f458 <lseek>
 812eb68:	00ffffc4 	movi	r3,-1
 812eb6c:	10c00526 	beq	r2,r3,812eb84 <_lseek_r+0x50>
 812eb70:	dfc00217 	ldw	ra,8(sp)
 812eb74:	dc400117 	ldw	r17,4(sp)
 812eb78:	dc000017 	ldw	r16,0(sp)
 812eb7c:	dec00304 	addi	sp,sp,12
 812eb80:	f800283a 	ret
 812eb84:	80c00017 	ldw	r3,0(r16)
 812eb88:	183ff926 	beq	r3,zero,812eb70 <__alt_data_end+0xfc12eb70>
 812eb8c:	88c00015 	stw	r3,0(r17)
 812eb90:	003ff706 	br	812eb70 <__alt_data_end+0xfc12eb70>

0812eb94 <__smakebuf_r>:
 812eb94:	2880030b 	ldhu	r2,12(r5)
 812eb98:	10c0008c 	andi	r3,r2,2
 812eb9c:	1800411e 	bne	r3,zero,812eca4 <__smakebuf_r+0x110>
 812eba0:	deffec04 	addi	sp,sp,-80
 812eba4:	dc000f15 	stw	r16,60(sp)
 812eba8:	2821883a 	mov	r16,r5
 812ebac:	2940038f 	ldh	r5,14(r5)
 812ebb0:	dc401015 	stw	r17,64(sp)
 812ebb4:	dfc01315 	stw	ra,76(sp)
 812ebb8:	dcc01215 	stw	r19,72(sp)
 812ebbc:	dc801115 	stw	r18,68(sp)
 812ebc0:	2023883a 	mov	r17,r4
 812ebc4:	28001c16 	blt	r5,zero,812ec38 <__smakebuf_r+0xa4>
 812ebc8:	d80d883a 	mov	r6,sp
 812ebcc:	812edb00 	call	812edb0 <_fstat_r>
 812ebd0:	10001816 	blt	r2,zero,812ec34 <__smakebuf_r+0xa0>
 812ebd4:	d8800117 	ldw	r2,4(sp)
 812ebd8:	00e00014 	movui	r3,32768
 812ebdc:	10bc000c 	andi	r2,r2,61440
 812ebe0:	14c80020 	cmpeqi	r19,r2,8192
 812ebe4:	10c03726 	beq	r2,r3,812ecc4 <__smakebuf_r+0x130>
 812ebe8:	80c0030b 	ldhu	r3,12(r16)
 812ebec:	18c20014 	ori	r3,r3,2048
 812ebf0:	80c0030d 	sth	r3,12(r16)
 812ebf4:	00c80004 	movi	r3,8192
 812ebf8:	10c0521e 	bne	r2,r3,812ed44 <__smakebuf_r+0x1b0>
 812ebfc:	8140038f 	ldh	r5,14(r16)
 812ec00:	8809883a 	mov	r4,r17
 812ec04:	812ee0c0 	call	812ee0c <_isatty_r>
 812ec08:	10004c26 	beq	r2,zero,812ed3c <__smakebuf_r+0x1a8>
 812ec0c:	8080030b 	ldhu	r2,12(r16)
 812ec10:	80c010c4 	addi	r3,r16,67
 812ec14:	80c00015 	stw	r3,0(r16)
 812ec18:	10800054 	ori	r2,r2,1
 812ec1c:	8080030d 	sth	r2,12(r16)
 812ec20:	00800044 	movi	r2,1
 812ec24:	80c00415 	stw	r3,16(r16)
 812ec28:	80800515 	stw	r2,20(r16)
 812ec2c:	04810004 	movi	r18,1024
 812ec30:	00000706 	br	812ec50 <__smakebuf_r+0xbc>
 812ec34:	8080030b 	ldhu	r2,12(r16)
 812ec38:	10c0200c 	andi	r3,r2,128
 812ec3c:	18001f1e 	bne	r3,zero,812ecbc <__smakebuf_r+0x128>
 812ec40:	04810004 	movi	r18,1024
 812ec44:	10820014 	ori	r2,r2,2048
 812ec48:	8080030d 	sth	r2,12(r16)
 812ec4c:	0027883a 	mov	r19,zero
 812ec50:	900b883a 	mov	r5,r18
 812ec54:	8809883a 	mov	r4,r17
 812ec58:	812cd9c0 	call	812cd9c <_malloc_r>
 812ec5c:	10002c26 	beq	r2,zero,812ed10 <__smakebuf_r+0x17c>
 812ec60:	80c0030b 	ldhu	r3,12(r16)
 812ec64:	010204f4 	movhi	r4,2067
 812ec68:	2130e904 	addi	r4,r4,-15452
 812ec6c:	89000f15 	stw	r4,60(r17)
 812ec70:	18c02014 	ori	r3,r3,128
 812ec74:	80c0030d 	sth	r3,12(r16)
 812ec78:	80800015 	stw	r2,0(r16)
 812ec7c:	80800415 	stw	r2,16(r16)
 812ec80:	84800515 	stw	r18,20(r16)
 812ec84:	98001a1e 	bne	r19,zero,812ecf0 <__smakebuf_r+0x15c>
 812ec88:	dfc01317 	ldw	ra,76(sp)
 812ec8c:	dcc01217 	ldw	r19,72(sp)
 812ec90:	dc801117 	ldw	r18,68(sp)
 812ec94:	dc401017 	ldw	r17,64(sp)
 812ec98:	dc000f17 	ldw	r16,60(sp)
 812ec9c:	dec01404 	addi	sp,sp,80
 812eca0:	f800283a 	ret
 812eca4:	288010c4 	addi	r2,r5,67
 812eca8:	28800015 	stw	r2,0(r5)
 812ecac:	28800415 	stw	r2,16(r5)
 812ecb0:	00800044 	movi	r2,1
 812ecb4:	28800515 	stw	r2,20(r5)
 812ecb8:	f800283a 	ret
 812ecbc:	04801004 	movi	r18,64
 812ecc0:	003fe006 	br	812ec44 <__alt_data_end+0xfc12ec44>
 812ecc4:	81000a17 	ldw	r4,40(r16)
 812ecc8:	00c204f4 	movhi	r3,2067
 812eccc:	18f83a04 	addi	r3,r3,-7960
 812ecd0:	20ffc51e 	bne	r4,r3,812ebe8 <__alt_data_end+0xfc12ebe8>
 812ecd4:	8080030b 	ldhu	r2,12(r16)
 812ecd8:	04810004 	movi	r18,1024
 812ecdc:	84801315 	stw	r18,76(r16)
 812ece0:	1484b03a 	or	r2,r2,r18
 812ece4:	8080030d 	sth	r2,12(r16)
 812ece8:	0027883a 	mov	r19,zero
 812ecec:	003fd806 	br	812ec50 <__alt_data_end+0xfc12ec50>
 812ecf0:	8140038f 	ldh	r5,14(r16)
 812ecf4:	8809883a 	mov	r4,r17
 812ecf8:	812ee0c0 	call	812ee0c <_isatty_r>
 812ecfc:	103fe226 	beq	r2,zero,812ec88 <__alt_data_end+0xfc12ec88>
 812ed00:	8080030b 	ldhu	r2,12(r16)
 812ed04:	10800054 	ori	r2,r2,1
 812ed08:	8080030d 	sth	r2,12(r16)
 812ed0c:	003fde06 	br	812ec88 <__alt_data_end+0xfc12ec88>
 812ed10:	8080030b 	ldhu	r2,12(r16)
 812ed14:	10c0800c 	andi	r3,r2,512
 812ed18:	183fdb1e 	bne	r3,zero,812ec88 <__alt_data_end+0xfc12ec88>
 812ed1c:	10800094 	ori	r2,r2,2
 812ed20:	80c010c4 	addi	r3,r16,67
 812ed24:	8080030d 	sth	r2,12(r16)
 812ed28:	00800044 	movi	r2,1
 812ed2c:	80c00015 	stw	r3,0(r16)
 812ed30:	80c00415 	stw	r3,16(r16)
 812ed34:	80800515 	stw	r2,20(r16)
 812ed38:	003fd306 	br	812ec88 <__alt_data_end+0xfc12ec88>
 812ed3c:	04810004 	movi	r18,1024
 812ed40:	003fc306 	br	812ec50 <__alt_data_end+0xfc12ec50>
 812ed44:	0027883a 	mov	r19,zero
 812ed48:	04810004 	movi	r18,1024
 812ed4c:	003fc006 	br	812ec50 <__alt_data_end+0xfc12ec50>

0812ed50 <_read_r>:
 812ed50:	defffd04 	addi	sp,sp,-12
 812ed54:	2805883a 	mov	r2,r5
 812ed58:	dc000015 	stw	r16,0(sp)
 812ed5c:	040204f4 	movhi	r16,2067
 812ed60:	dc400115 	stw	r17,4(sp)
 812ed64:	300b883a 	mov	r5,r6
 812ed68:	84134004 	addi	r16,r16,19712
 812ed6c:	2023883a 	mov	r17,r4
 812ed70:	380d883a 	mov	r6,r7
 812ed74:	1009883a 	mov	r4,r2
 812ed78:	dfc00215 	stw	ra,8(sp)
 812ed7c:	80000015 	stw	zero,0(r16)
 812ed80:	812f6340 	call	812f634 <read>
 812ed84:	00ffffc4 	movi	r3,-1
 812ed88:	10c00526 	beq	r2,r3,812eda0 <_read_r+0x50>
 812ed8c:	dfc00217 	ldw	ra,8(sp)
 812ed90:	dc400117 	ldw	r17,4(sp)
 812ed94:	dc000017 	ldw	r16,0(sp)
 812ed98:	dec00304 	addi	sp,sp,12
 812ed9c:	f800283a 	ret
 812eda0:	80c00017 	ldw	r3,0(r16)
 812eda4:	183ff926 	beq	r3,zero,812ed8c <__alt_data_end+0xfc12ed8c>
 812eda8:	88c00015 	stw	r3,0(r17)
 812edac:	003ff706 	br	812ed8c <__alt_data_end+0xfc12ed8c>

0812edb0 <_fstat_r>:
 812edb0:	defffd04 	addi	sp,sp,-12
 812edb4:	2805883a 	mov	r2,r5
 812edb8:	dc000015 	stw	r16,0(sp)
 812edbc:	040204f4 	movhi	r16,2067
 812edc0:	dc400115 	stw	r17,4(sp)
 812edc4:	84134004 	addi	r16,r16,19712
 812edc8:	2023883a 	mov	r17,r4
 812edcc:	300b883a 	mov	r5,r6
 812edd0:	1009883a 	mov	r4,r2
 812edd4:	dfc00215 	stw	ra,8(sp)
 812edd8:	80000015 	stw	zero,0(r16)
 812eddc:	812f1900 	call	812f190 <fstat>
 812ede0:	00ffffc4 	movi	r3,-1
 812ede4:	10c00526 	beq	r2,r3,812edfc <_fstat_r+0x4c>
 812ede8:	dfc00217 	ldw	ra,8(sp)
 812edec:	dc400117 	ldw	r17,4(sp)
 812edf0:	dc000017 	ldw	r16,0(sp)
 812edf4:	dec00304 	addi	sp,sp,12
 812edf8:	f800283a 	ret
 812edfc:	80c00017 	ldw	r3,0(r16)
 812ee00:	183ff926 	beq	r3,zero,812ede8 <__alt_data_end+0xfc12ede8>
 812ee04:	88c00015 	stw	r3,0(r17)
 812ee08:	003ff706 	br	812ede8 <__alt_data_end+0xfc12ede8>

0812ee0c <_isatty_r>:
 812ee0c:	defffd04 	addi	sp,sp,-12
 812ee10:	dc000015 	stw	r16,0(sp)
 812ee14:	040204f4 	movhi	r16,2067
 812ee18:	dc400115 	stw	r17,4(sp)
 812ee1c:	84134004 	addi	r16,r16,19712
 812ee20:	2023883a 	mov	r17,r4
 812ee24:	2809883a 	mov	r4,r5
 812ee28:	dfc00215 	stw	ra,8(sp)
 812ee2c:	80000015 	stw	zero,0(r16)
 812ee30:	812f2840 	call	812f284 <isatty>
 812ee34:	00ffffc4 	movi	r3,-1
 812ee38:	10c00526 	beq	r2,r3,812ee50 <_isatty_r+0x44>
 812ee3c:	dfc00217 	ldw	ra,8(sp)
 812ee40:	dc400117 	ldw	r17,4(sp)
 812ee44:	dc000017 	ldw	r16,0(sp)
 812ee48:	dec00304 	addi	sp,sp,12
 812ee4c:	f800283a 	ret
 812ee50:	80c00017 	ldw	r3,0(r16)
 812ee54:	183ff926 	beq	r3,zero,812ee3c <__alt_data_end+0xfc12ee3c>
 812ee58:	88c00015 	stw	r3,0(r17)
 812ee5c:	003ff706 	br	812ee3c <__alt_data_end+0xfc12ee3c>

0812ee60 <__divsi3>:
 812ee60:	20001b16 	blt	r4,zero,812eed0 <__divsi3+0x70>
 812ee64:	000f883a 	mov	r7,zero
 812ee68:	28001616 	blt	r5,zero,812eec4 <__divsi3+0x64>
 812ee6c:	200d883a 	mov	r6,r4
 812ee70:	29001a2e 	bgeu	r5,r4,812eedc <__divsi3+0x7c>
 812ee74:	00800804 	movi	r2,32
 812ee78:	00c00044 	movi	r3,1
 812ee7c:	00000106 	br	812ee84 <__divsi3+0x24>
 812ee80:	10000d26 	beq	r2,zero,812eeb8 <__divsi3+0x58>
 812ee84:	294b883a 	add	r5,r5,r5
 812ee88:	10bfffc4 	addi	r2,r2,-1
 812ee8c:	18c7883a 	add	r3,r3,r3
 812ee90:	293ffb36 	bltu	r5,r4,812ee80 <__alt_data_end+0xfc12ee80>
 812ee94:	0005883a 	mov	r2,zero
 812ee98:	18000726 	beq	r3,zero,812eeb8 <__divsi3+0x58>
 812ee9c:	0005883a 	mov	r2,zero
 812eea0:	31400236 	bltu	r6,r5,812eeac <__divsi3+0x4c>
 812eea4:	314dc83a 	sub	r6,r6,r5
 812eea8:	10c4b03a 	or	r2,r2,r3
 812eeac:	1806d07a 	srli	r3,r3,1
 812eeb0:	280ad07a 	srli	r5,r5,1
 812eeb4:	183ffa1e 	bne	r3,zero,812eea0 <__alt_data_end+0xfc12eea0>
 812eeb8:	38000126 	beq	r7,zero,812eec0 <__divsi3+0x60>
 812eebc:	0085c83a 	sub	r2,zero,r2
 812eec0:	f800283a 	ret
 812eec4:	014bc83a 	sub	r5,zero,r5
 812eec8:	39c0005c 	xori	r7,r7,1
 812eecc:	003fe706 	br	812ee6c <__alt_data_end+0xfc12ee6c>
 812eed0:	0109c83a 	sub	r4,zero,r4
 812eed4:	01c00044 	movi	r7,1
 812eed8:	003fe306 	br	812ee68 <__alt_data_end+0xfc12ee68>
 812eedc:	00c00044 	movi	r3,1
 812eee0:	003fee06 	br	812ee9c <__alt_data_end+0xfc12ee9c>

0812eee4 <__modsi3>:
 812eee4:	20001716 	blt	r4,zero,812ef44 <__modsi3+0x60>
 812eee8:	000f883a 	mov	r7,zero
 812eeec:	2005883a 	mov	r2,r4
 812eef0:	28001216 	blt	r5,zero,812ef3c <__modsi3+0x58>
 812eef4:	2900162e 	bgeu	r5,r4,812ef50 <__modsi3+0x6c>
 812eef8:	01800804 	movi	r6,32
 812eefc:	00c00044 	movi	r3,1
 812ef00:	00000106 	br	812ef08 <__modsi3+0x24>
 812ef04:	30000a26 	beq	r6,zero,812ef30 <__modsi3+0x4c>
 812ef08:	294b883a 	add	r5,r5,r5
 812ef0c:	31bfffc4 	addi	r6,r6,-1
 812ef10:	18c7883a 	add	r3,r3,r3
 812ef14:	293ffb36 	bltu	r5,r4,812ef04 <__alt_data_end+0xfc12ef04>
 812ef18:	18000526 	beq	r3,zero,812ef30 <__modsi3+0x4c>
 812ef1c:	1806d07a 	srli	r3,r3,1
 812ef20:	11400136 	bltu	r2,r5,812ef28 <__modsi3+0x44>
 812ef24:	1145c83a 	sub	r2,r2,r5
 812ef28:	280ad07a 	srli	r5,r5,1
 812ef2c:	183ffb1e 	bne	r3,zero,812ef1c <__alt_data_end+0xfc12ef1c>
 812ef30:	38000126 	beq	r7,zero,812ef38 <__modsi3+0x54>
 812ef34:	0085c83a 	sub	r2,zero,r2
 812ef38:	f800283a 	ret
 812ef3c:	014bc83a 	sub	r5,zero,r5
 812ef40:	003fec06 	br	812eef4 <__alt_data_end+0xfc12eef4>
 812ef44:	0109c83a 	sub	r4,zero,r4
 812ef48:	01c00044 	movi	r7,1
 812ef4c:	003fe706 	br	812eeec <__alt_data_end+0xfc12eeec>
 812ef50:	00c00044 	movi	r3,1
 812ef54:	003ff106 	br	812ef1c <__alt_data_end+0xfc12ef1c>

0812ef58 <__udivsi3>:
 812ef58:	200d883a 	mov	r6,r4
 812ef5c:	2900152e 	bgeu	r5,r4,812efb4 <__udivsi3+0x5c>
 812ef60:	28001416 	blt	r5,zero,812efb4 <__udivsi3+0x5c>
 812ef64:	00800804 	movi	r2,32
 812ef68:	00c00044 	movi	r3,1
 812ef6c:	00000206 	br	812ef78 <__udivsi3+0x20>
 812ef70:	10000e26 	beq	r2,zero,812efac <__udivsi3+0x54>
 812ef74:	28000516 	blt	r5,zero,812ef8c <__udivsi3+0x34>
 812ef78:	294b883a 	add	r5,r5,r5
 812ef7c:	10bfffc4 	addi	r2,r2,-1
 812ef80:	18c7883a 	add	r3,r3,r3
 812ef84:	293ffa36 	bltu	r5,r4,812ef70 <__alt_data_end+0xfc12ef70>
 812ef88:	18000826 	beq	r3,zero,812efac <__udivsi3+0x54>
 812ef8c:	0005883a 	mov	r2,zero
 812ef90:	31400236 	bltu	r6,r5,812ef9c <__udivsi3+0x44>
 812ef94:	314dc83a 	sub	r6,r6,r5
 812ef98:	10c4b03a 	or	r2,r2,r3
 812ef9c:	1806d07a 	srli	r3,r3,1
 812efa0:	280ad07a 	srli	r5,r5,1
 812efa4:	183ffa1e 	bne	r3,zero,812ef90 <__alt_data_end+0xfc12ef90>
 812efa8:	f800283a 	ret
 812efac:	0005883a 	mov	r2,zero
 812efb0:	f800283a 	ret
 812efb4:	00c00044 	movi	r3,1
 812efb8:	003ff406 	br	812ef8c <__alt_data_end+0xfc12ef8c>

0812efbc <__umodsi3>:
 812efbc:	2005883a 	mov	r2,r4
 812efc0:	2900122e 	bgeu	r5,r4,812f00c <__umodsi3+0x50>
 812efc4:	28001116 	blt	r5,zero,812f00c <__umodsi3+0x50>
 812efc8:	01800804 	movi	r6,32
 812efcc:	00c00044 	movi	r3,1
 812efd0:	00000206 	br	812efdc <__umodsi3+0x20>
 812efd4:	30000c26 	beq	r6,zero,812f008 <__umodsi3+0x4c>
 812efd8:	28000516 	blt	r5,zero,812eff0 <__umodsi3+0x34>
 812efdc:	294b883a 	add	r5,r5,r5
 812efe0:	31bfffc4 	addi	r6,r6,-1
 812efe4:	18c7883a 	add	r3,r3,r3
 812efe8:	293ffa36 	bltu	r5,r4,812efd4 <__alt_data_end+0xfc12efd4>
 812efec:	18000626 	beq	r3,zero,812f008 <__umodsi3+0x4c>
 812eff0:	1806d07a 	srli	r3,r3,1
 812eff4:	11400136 	bltu	r2,r5,812effc <__umodsi3+0x40>
 812eff8:	1145c83a 	sub	r2,r2,r5
 812effc:	280ad07a 	srli	r5,r5,1
 812f000:	183ffb1e 	bne	r3,zero,812eff0 <__alt_data_end+0xfc12eff0>
 812f004:	f800283a 	ret
 812f008:	f800283a 	ret
 812f00c:	00c00044 	movi	r3,1
 812f010:	003ff706 	br	812eff0 <__alt_data_end+0xfc12eff0>

0812f014 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f014:	defffe04 	addi	sp,sp,-8
 812f018:	dfc00115 	stw	ra,4(sp)
 812f01c:	df000015 	stw	fp,0(sp)
 812f020:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f024:	d0a00a17 	ldw	r2,-32728(gp)
 812f028:	10000326 	beq	r2,zero,812f038 <alt_get_errno+0x24>
 812f02c:	d0a00a17 	ldw	r2,-32728(gp)
 812f030:	103ee83a 	callr	r2
 812f034:	00000106 	br	812f03c <alt_get_errno+0x28>
 812f038:	d0a6ae04 	addi	r2,gp,-25928
}
 812f03c:	e037883a 	mov	sp,fp
 812f040:	dfc00117 	ldw	ra,4(sp)
 812f044:	df000017 	ldw	fp,0(sp)
 812f048:	dec00204 	addi	sp,sp,8
 812f04c:	f800283a 	ret

0812f050 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 812f050:	defffb04 	addi	sp,sp,-20
 812f054:	dfc00415 	stw	ra,16(sp)
 812f058:	df000315 	stw	fp,12(sp)
 812f05c:	df000304 	addi	fp,sp,12
 812f060:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 812f064:	e0bfff17 	ldw	r2,-4(fp)
 812f068:	10000816 	blt	r2,zero,812f08c <close+0x3c>
 812f06c:	01400304 	movi	r5,12
 812f070:	e13fff17 	ldw	r4,-4(fp)
 812f074:	812c2080 	call	812c208 <__mulsi3>
 812f078:	1007883a 	mov	r3,r2
 812f07c:	008204f4 	movhi	r2,2067
 812f080:	10881a04 	addi	r2,r2,8296
 812f084:	1885883a 	add	r2,r3,r2
 812f088:	00000106 	br	812f090 <close+0x40>
 812f08c:	0005883a 	mov	r2,zero
 812f090:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 812f094:	e0bffd17 	ldw	r2,-12(fp)
 812f098:	10001926 	beq	r2,zero,812f100 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 812f09c:	e0bffd17 	ldw	r2,-12(fp)
 812f0a0:	10800017 	ldw	r2,0(r2)
 812f0a4:	10800417 	ldw	r2,16(r2)
 812f0a8:	10000626 	beq	r2,zero,812f0c4 <close+0x74>
 812f0ac:	e0bffd17 	ldw	r2,-12(fp)
 812f0b0:	10800017 	ldw	r2,0(r2)
 812f0b4:	10800417 	ldw	r2,16(r2)
 812f0b8:	e13ffd17 	ldw	r4,-12(fp)
 812f0bc:	103ee83a 	callr	r2
 812f0c0:	00000106 	br	812f0c8 <close+0x78>
 812f0c4:	0005883a 	mov	r2,zero
 812f0c8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 812f0cc:	e13fff17 	ldw	r4,-4(fp)
 812f0d0:	812f7380 	call	812f738 <alt_release_fd>
    if (rval < 0)
 812f0d4:	e0bffe17 	ldw	r2,-8(fp)
 812f0d8:	1000070e 	bge	r2,zero,812f0f8 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 812f0dc:	812f0140 	call	812f014 <alt_get_errno>
 812f0e0:	1007883a 	mov	r3,r2
 812f0e4:	e0bffe17 	ldw	r2,-8(fp)
 812f0e8:	0085c83a 	sub	r2,zero,r2
 812f0ec:	18800015 	stw	r2,0(r3)
      return -1;
 812f0f0:	00bfffc4 	movi	r2,-1
 812f0f4:	00000706 	br	812f114 <close+0xc4>
    }
    return 0;
 812f0f8:	0005883a 	mov	r2,zero
 812f0fc:	00000506 	br	812f114 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812f100:	812f0140 	call	812f014 <alt_get_errno>
 812f104:	1007883a 	mov	r3,r2
 812f108:	00801444 	movi	r2,81
 812f10c:	18800015 	stw	r2,0(r3)
    return -1;
 812f110:	00bfffc4 	movi	r2,-1
  }
}
 812f114:	e037883a 	mov	sp,fp
 812f118:	dfc00117 	ldw	ra,4(sp)
 812f11c:	df000017 	ldw	fp,0(sp)
 812f120:	dec00204 	addi	sp,sp,8
 812f124:	f800283a 	ret

0812f128 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 812f128:	defffc04 	addi	sp,sp,-16
 812f12c:	df000315 	stw	fp,12(sp)
 812f130:	df000304 	addi	fp,sp,12
 812f134:	e13ffd15 	stw	r4,-12(fp)
 812f138:	e17ffe15 	stw	r5,-8(fp)
 812f13c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 812f140:	e0bfff17 	ldw	r2,-4(fp)
}
 812f144:	e037883a 	mov	sp,fp
 812f148:	df000017 	ldw	fp,0(sp)
 812f14c:	dec00104 	addi	sp,sp,4
 812f150:	f800283a 	ret

0812f154 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f154:	defffe04 	addi	sp,sp,-8
 812f158:	dfc00115 	stw	ra,4(sp)
 812f15c:	df000015 	stw	fp,0(sp)
 812f160:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f164:	d0a00a17 	ldw	r2,-32728(gp)
 812f168:	10000326 	beq	r2,zero,812f178 <alt_get_errno+0x24>
 812f16c:	d0a00a17 	ldw	r2,-32728(gp)
 812f170:	103ee83a 	callr	r2
 812f174:	00000106 	br	812f17c <alt_get_errno+0x28>
 812f178:	d0a6ae04 	addi	r2,gp,-25928
}
 812f17c:	e037883a 	mov	sp,fp
 812f180:	dfc00117 	ldw	ra,4(sp)
 812f184:	df000017 	ldw	fp,0(sp)
 812f188:	dec00204 	addi	sp,sp,8
 812f18c:	f800283a 	ret

0812f190 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 812f190:	defffb04 	addi	sp,sp,-20
 812f194:	dfc00415 	stw	ra,16(sp)
 812f198:	df000315 	stw	fp,12(sp)
 812f19c:	df000304 	addi	fp,sp,12
 812f1a0:	e13ffe15 	stw	r4,-8(fp)
 812f1a4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812f1a8:	e0bffe17 	ldw	r2,-8(fp)
 812f1ac:	10000816 	blt	r2,zero,812f1d0 <fstat+0x40>
 812f1b0:	01400304 	movi	r5,12
 812f1b4:	e13ffe17 	ldw	r4,-8(fp)
 812f1b8:	812c2080 	call	812c208 <__mulsi3>
 812f1bc:	1007883a 	mov	r3,r2
 812f1c0:	008204f4 	movhi	r2,2067
 812f1c4:	10881a04 	addi	r2,r2,8296
 812f1c8:	1885883a 	add	r2,r3,r2
 812f1cc:	00000106 	br	812f1d4 <fstat+0x44>
 812f1d0:	0005883a 	mov	r2,zero
 812f1d4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 812f1d8:	e0bffd17 	ldw	r2,-12(fp)
 812f1dc:	10001026 	beq	r2,zero,812f220 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 812f1e0:	e0bffd17 	ldw	r2,-12(fp)
 812f1e4:	10800017 	ldw	r2,0(r2)
 812f1e8:	10800817 	ldw	r2,32(r2)
 812f1ec:	10000726 	beq	r2,zero,812f20c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 812f1f0:	e0bffd17 	ldw	r2,-12(fp)
 812f1f4:	10800017 	ldw	r2,0(r2)
 812f1f8:	10800817 	ldw	r2,32(r2)
 812f1fc:	e17fff17 	ldw	r5,-4(fp)
 812f200:	e13ffd17 	ldw	r4,-12(fp)
 812f204:	103ee83a 	callr	r2
 812f208:	00000a06 	br	812f234 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 812f20c:	e0bfff17 	ldw	r2,-4(fp)
 812f210:	00c80004 	movi	r3,8192
 812f214:	10c00115 	stw	r3,4(r2)
      return 0;
 812f218:	0005883a 	mov	r2,zero
 812f21c:	00000506 	br	812f234 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812f220:	812f1540 	call	812f154 <alt_get_errno>
 812f224:	1007883a 	mov	r3,r2
 812f228:	00801444 	movi	r2,81
 812f22c:	18800015 	stw	r2,0(r3)
    return -1;
 812f230:	00bfffc4 	movi	r2,-1
  }
}
 812f234:	e037883a 	mov	sp,fp
 812f238:	dfc00117 	ldw	ra,4(sp)
 812f23c:	df000017 	ldw	fp,0(sp)
 812f240:	dec00204 	addi	sp,sp,8
 812f244:	f800283a 	ret

0812f248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f248:	defffe04 	addi	sp,sp,-8
 812f24c:	dfc00115 	stw	ra,4(sp)
 812f250:	df000015 	stw	fp,0(sp)
 812f254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f258:	d0a00a17 	ldw	r2,-32728(gp)
 812f25c:	10000326 	beq	r2,zero,812f26c <alt_get_errno+0x24>
 812f260:	d0a00a17 	ldw	r2,-32728(gp)
 812f264:	103ee83a 	callr	r2
 812f268:	00000106 	br	812f270 <alt_get_errno+0x28>
 812f26c:	d0a6ae04 	addi	r2,gp,-25928
}
 812f270:	e037883a 	mov	sp,fp
 812f274:	dfc00117 	ldw	ra,4(sp)
 812f278:	df000017 	ldw	fp,0(sp)
 812f27c:	dec00204 	addi	sp,sp,8
 812f280:	f800283a 	ret

0812f284 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 812f284:	deffed04 	addi	sp,sp,-76
 812f288:	dfc01215 	stw	ra,72(sp)
 812f28c:	df001115 	stw	fp,68(sp)
 812f290:	df001104 	addi	fp,sp,68
 812f294:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812f298:	e0bfff17 	ldw	r2,-4(fp)
 812f29c:	10000816 	blt	r2,zero,812f2c0 <isatty+0x3c>
 812f2a0:	01400304 	movi	r5,12
 812f2a4:	e13fff17 	ldw	r4,-4(fp)
 812f2a8:	812c2080 	call	812c208 <__mulsi3>
 812f2ac:	1007883a 	mov	r3,r2
 812f2b0:	008204f4 	movhi	r2,2067
 812f2b4:	10881a04 	addi	r2,r2,8296
 812f2b8:	1885883a 	add	r2,r3,r2
 812f2bc:	00000106 	br	812f2c4 <isatty+0x40>
 812f2c0:	0005883a 	mov	r2,zero
 812f2c4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 812f2c8:	e0bfef17 	ldw	r2,-68(fp)
 812f2cc:	10000e26 	beq	r2,zero,812f308 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 812f2d0:	e0bfef17 	ldw	r2,-68(fp)
 812f2d4:	10800017 	ldw	r2,0(r2)
 812f2d8:	10800817 	ldw	r2,32(r2)
 812f2dc:	1000021e 	bne	r2,zero,812f2e8 <isatty+0x64>
    {
      return 1;
 812f2e0:	00800044 	movi	r2,1
 812f2e4:	00000d06 	br	812f31c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 812f2e8:	e0bff004 	addi	r2,fp,-64
 812f2ec:	100b883a 	mov	r5,r2
 812f2f0:	e13fff17 	ldw	r4,-4(fp)
 812f2f4:	812f1900 	call	812f190 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 812f2f8:	e0bff117 	ldw	r2,-60(fp)
 812f2fc:	10880020 	cmpeqi	r2,r2,8192
 812f300:	10803fcc 	andi	r2,r2,255
 812f304:	00000506 	br	812f31c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 812f308:	812f2480 	call	812f248 <alt_get_errno>
 812f30c:	1007883a 	mov	r3,r2
 812f310:	00801444 	movi	r2,81
 812f314:	18800015 	stw	r2,0(r3)
    return 0;
 812f318:	0005883a 	mov	r2,zero
  }
}
 812f31c:	e037883a 	mov	sp,fp
 812f320:	dfc00117 	ldw	ra,4(sp)
 812f324:	df000017 	ldw	fp,0(sp)
 812f328:	dec00204 	addi	sp,sp,8
 812f32c:	f800283a 	ret

0812f330 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 812f330:	defffc04 	addi	sp,sp,-16
 812f334:	df000315 	stw	fp,12(sp)
 812f338:	df000304 	addi	fp,sp,12
 812f33c:	e13ffd15 	stw	r4,-12(fp)
 812f340:	e17ffe15 	stw	r5,-8(fp)
 812f344:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 812f348:	e0fffe17 	ldw	r3,-8(fp)
 812f34c:	e0bffd17 	ldw	r2,-12(fp)
 812f350:	18800c26 	beq	r3,r2,812f384 <alt_load_section+0x54>
  {
    while( to != end )
 812f354:	00000806 	br	812f378 <alt_load_section+0x48>
    {
      *to++ = *from++;
 812f358:	e0bffe17 	ldw	r2,-8(fp)
 812f35c:	10c00104 	addi	r3,r2,4
 812f360:	e0fffe15 	stw	r3,-8(fp)
 812f364:	e0fffd17 	ldw	r3,-12(fp)
 812f368:	19000104 	addi	r4,r3,4
 812f36c:	e13ffd15 	stw	r4,-12(fp)
 812f370:	18c00017 	ldw	r3,0(r3)
 812f374:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 812f378:	e0fffe17 	ldw	r3,-8(fp)
 812f37c:	e0bfff17 	ldw	r2,-4(fp)
 812f380:	18bff51e 	bne	r3,r2,812f358 <__alt_data_end+0xfc12f358>
    {
      *to++ = *from++;
    }
  }
}
 812f384:	0001883a 	nop
 812f388:	e037883a 	mov	sp,fp
 812f38c:	df000017 	ldw	fp,0(sp)
 812f390:	dec00104 	addi	sp,sp,4
 812f394:	f800283a 	ret

0812f398 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 812f398:	defffe04 	addi	sp,sp,-8
 812f39c:	dfc00115 	stw	ra,4(sp)
 812f3a0:	df000015 	stw	fp,0(sp)
 812f3a4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 812f3a8:	018204f4 	movhi	r6,2067
 812f3ac:	318ca104 	addi	r6,r6,12932
 812f3b0:	014204f4 	movhi	r5,2067
 812f3b4:	29460504 	addi	r5,r5,6164
 812f3b8:	010204f4 	movhi	r4,2067
 812f3bc:	210ca104 	addi	r4,r4,12932
 812f3c0:	812f3300 	call	812f330 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 812f3c4:	01800034 	movhi	r6,0
 812f3c8:	31808c04 	addi	r6,r6,560
 812f3cc:	01400034 	movhi	r5,0
 812f3d0:	29400804 	addi	r5,r5,32
 812f3d4:	01000034 	movhi	r4,0
 812f3d8:	21000804 	addi	r4,r4,32
 812f3dc:	812f3300 	call	812f330 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 812f3e0:	018204f4 	movhi	r6,2067
 812f3e4:	31860504 	addi	r6,r6,6164
 812f3e8:	014204f4 	movhi	r5,2067
 812f3ec:	2945ef04 	addi	r5,r5,6076
 812f3f0:	010204f4 	movhi	r4,2067
 812f3f4:	2105ef04 	addi	r4,r4,6076
 812f3f8:	812f3300 	call	812f330 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 812f3fc:	81307040 	call	8130704 <alt_dcache_flush_all>
  alt_icache_flush_all();
 812f400:	81308c40 	call	81308c4 <alt_icache_flush_all>
}
 812f404:	0001883a 	nop
 812f408:	e037883a 	mov	sp,fp
 812f40c:	dfc00117 	ldw	ra,4(sp)
 812f410:	df000017 	ldw	fp,0(sp)
 812f414:	dec00204 	addi	sp,sp,8
 812f418:	f800283a 	ret

0812f41c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f41c:	defffe04 	addi	sp,sp,-8
 812f420:	dfc00115 	stw	ra,4(sp)
 812f424:	df000015 	stw	fp,0(sp)
 812f428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f42c:	d0a00a17 	ldw	r2,-32728(gp)
 812f430:	10000326 	beq	r2,zero,812f440 <alt_get_errno+0x24>
 812f434:	d0a00a17 	ldw	r2,-32728(gp)
 812f438:	103ee83a 	callr	r2
 812f43c:	00000106 	br	812f444 <alt_get_errno+0x28>
 812f440:	d0a6ae04 	addi	r2,gp,-25928
}
 812f444:	e037883a 	mov	sp,fp
 812f448:	dfc00117 	ldw	ra,4(sp)
 812f44c:	df000017 	ldw	fp,0(sp)
 812f450:	dec00204 	addi	sp,sp,8
 812f454:	f800283a 	ret

0812f458 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 812f458:	defff904 	addi	sp,sp,-28
 812f45c:	dfc00615 	stw	ra,24(sp)
 812f460:	df000515 	stw	fp,20(sp)
 812f464:	df000504 	addi	fp,sp,20
 812f468:	e13ffd15 	stw	r4,-12(fp)
 812f46c:	e17ffe15 	stw	r5,-8(fp)
 812f470:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 812f474:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812f478:	e0bffd17 	ldw	r2,-12(fp)
 812f47c:	10000816 	blt	r2,zero,812f4a0 <lseek+0x48>
 812f480:	01400304 	movi	r5,12
 812f484:	e13ffd17 	ldw	r4,-12(fp)
 812f488:	812c2080 	call	812c208 <__mulsi3>
 812f48c:	1007883a 	mov	r3,r2
 812f490:	008204f4 	movhi	r2,2067
 812f494:	10881a04 	addi	r2,r2,8296
 812f498:	1885883a 	add	r2,r3,r2
 812f49c:	00000106 	br	812f4a4 <lseek+0x4c>
 812f4a0:	0005883a 	mov	r2,zero
 812f4a4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 812f4a8:	e0bffc17 	ldw	r2,-16(fp)
 812f4ac:	10001026 	beq	r2,zero,812f4f0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 812f4b0:	e0bffc17 	ldw	r2,-16(fp)
 812f4b4:	10800017 	ldw	r2,0(r2)
 812f4b8:	10800717 	ldw	r2,28(r2)
 812f4bc:	10000926 	beq	r2,zero,812f4e4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 812f4c0:	e0bffc17 	ldw	r2,-16(fp)
 812f4c4:	10800017 	ldw	r2,0(r2)
 812f4c8:	10800717 	ldw	r2,28(r2)
 812f4cc:	e1bfff17 	ldw	r6,-4(fp)
 812f4d0:	e17ffe17 	ldw	r5,-8(fp)
 812f4d4:	e13ffc17 	ldw	r4,-16(fp)
 812f4d8:	103ee83a 	callr	r2
 812f4dc:	e0bffb15 	stw	r2,-20(fp)
 812f4e0:	00000506 	br	812f4f8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 812f4e4:	00bfde84 	movi	r2,-134
 812f4e8:	e0bffb15 	stw	r2,-20(fp)
 812f4ec:	00000206 	br	812f4f8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 812f4f0:	00bfebc4 	movi	r2,-81
 812f4f4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 812f4f8:	e0bffb17 	ldw	r2,-20(fp)
 812f4fc:	1000070e 	bge	r2,zero,812f51c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 812f500:	812f41c0 	call	812f41c <alt_get_errno>
 812f504:	1007883a 	mov	r3,r2
 812f508:	e0bffb17 	ldw	r2,-20(fp)
 812f50c:	0085c83a 	sub	r2,zero,r2
 812f510:	18800015 	stw	r2,0(r3)
    rc = -1;
 812f514:	00bfffc4 	movi	r2,-1
 812f518:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 812f51c:	e0bffb17 	ldw	r2,-20(fp)
}
 812f520:	e037883a 	mov	sp,fp
 812f524:	dfc00117 	ldw	ra,4(sp)
 812f528:	df000017 	ldw	fp,0(sp)
 812f52c:	dec00204 	addi	sp,sp,8
 812f530:	f800283a 	ret

0812f534 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 812f534:	defffd04 	addi	sp,sp,-12
 812f538:	dfc00215 	stw	ra,8(sp)
 812f53c:	df000115 	stw	fp,4(sp)
 812f540:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 812f544:	0009883a 	mov	r4,zero
 812f548:	812f9dc0 	call	812f9dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 812f54c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 812f550:	812fa140 	call	812fa14 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 812f554:	018204f4 	movhi	r6,2067
 812f558:	3185fb04 	addi	r6,r6,6124
 812f55c:	014204f4 	movhi	r5,2067
 812f560:	2945fb04 	addi	r5,r5,6124
 812f564:	010204f4 	movhi	r4,2067
 812f568:	2105fb04 	addi	r4,r4,6124
 812f56c:	8130c680 	call	8130c68 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 812f570:	81308040 	call	8130804 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 812f574:	010204f4 	movhi	r4,2067
 812f578:	21021904 	addi	r4,r4,2148
 812f57c:	81314280 	call	8131428 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 812f580:	d0a6af17 	ldw	r2,-25924(gp)
 812f584:	d0e6b017 	ldw	r3,-25920(gp)
 812f588:	d126b117 	ldw	r4,-25916(gp)
 812f58c:	200d883a 	mov	r6,r4
 812f590:	180b883a 	mov	r5,r3
 812f594:	1009883a 	mov	r4,r2
 812f598:	800003c0 	call	800003c <main>
 812f59c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 812f5a0:	01000044 	movi	r4,1
 812f5a4:	812f0500 	call	812f050 <close>
  exit (result);
 812f5a8:	e13fff17 	ldw	r4,-4(fp)
 812f5ac:	813143c0 	call	813143c <exit>

0812f5b0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 812f5b0:	defffe04 	addi	sp,sp,-8
 812f5b4:	df000115 	stw	fp,4(sp)
 812f5b8:	df000104 	addi	fp,sp,4
 812f5bc:	e13fff15 	stw	r4,-4(fp)
}
 812f5c0:	0001883a 	nop
 812f5c4:	e037883a 	mov	sp,fp
 812f5c8:	df000017 	ldw	fp,0(sp)
 812f5cc:	dec00104 	addi	sp,sp,4
 812f5d0:	f800283a 	ret

0812f5d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 812f5d4:	defffe04 	addi	sp,sp,-8
 812f5d8:	df000115 	stw	fp,4(sp)
 812f5dc:	df000104 	addi	fp,sp,4
 812f5e0:	e13fff15 	stw	r4,-4(fp)
}
 812f5e4:	0001883a 	nop
 812f5e8:	e037883a 	mov	sp,fp
 812f5ec:	df000017 	ldw	fp,0(sp)
 812f5f0:	dec00104 	addi	sp,sp,4
 812f5f4:	f800283a 	ret

0812f5f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f5f8:	defffe04 	addi	sp,sp,-8
 812f5fc:	dfc00115 	stw	ra,4(sp)
 812f600:	df000015 	stw	fp,0(sp)
 812f604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f608:	d0a00a17 	ldw	r2,-32728(gp)
 812f60c:	10000326 	beq	r2,zero,812f61c <alt_get_errno+0x24>
 812f610:	d0a00a17 	ldw	r2,-32728(gp)
 812f614:	103ee83a 	callr	r2
 812f618:	00000106 	br	812f620 <alt_get_errno+0x28>
 812f61c:	d0a6ae04 	addi	r2,gp,-25928
}
 812f620:	e037883a 	mov	sp,fp
 812f624:	dfc00117 	ldw	ra,4(sp)
 812f628:	df000017 	ldw	fp,0(sp)
 812f62c:	dec00204 	addi	sp,sp,8
 812f630:	f800283a 	ret

0812f634 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 812f634:	defff904 	addi	sp,sp,-28
 812f638:	dfc00615 	stw	ra,24(sp)
 812f63c:	df000515 	stw	fp,20(sp)
 812f640:	df000504 	addi	fp,sp,20
 812f644:	e13ffd15 	stw	r4,-12(fp)
 812f648:	e17ffe15 	stw	r5,-8(fp)
 812f64c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812f650:	e0bffd17 	ldw	r2,-12(fp)
 812f654:	10000816 	blt	r2,zero,812f678 <read+0x44>
 812f658:	01400304 	movi	r5,12
 812f65c:	e13ffd17 	ldw	r4,-12(fp)
 812f660:	812c2080 	call	812c208 <__mulsi3>
 812f664:	1007883a 	mov	r3,r2
 812f668:	008204f4 	movhi	r2,2067
 812f66c:	10881a04 	addi	r2,r2,8296
 812f670:	1885883a 	add	r2,r3,r2
 812f674:	00000106 	br	812f67c <read+0x48>
 812f678:	0005883a 	mov	r2,zero
 812f67c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 812f680:	e0bffb17 	ldw	r2,-20(fp)
 812f684:	10002226 	beq	r2,zero,812f710 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 812f688:	e0bffb17 	ldw	r2,-20(fp)
 812f68c:	10800217 	ldw	r2,8(r2)
 812f690:	108000cc 	andi	r2,r2,3
 812f694:	10800060 	cmpeqi	r2,r2,1
 812f698:	1000181e 	bne	r2,zero,812f6fc <read+0xc8>
        (fd->dev->read))
 812f69c:	e0bffb17 	ldw	r2,-20(fp)
 812f6a0:	10800017 	ldw	r2,0(r2)
 812f6a4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 812f6a8:	10001426 	beq	r2,zero,812f6fc <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 812f6ac:	e0bffb17 	ldw	r2,-20(fp)
 812f6b0:	10800017 	ldw	r2,0(r2)
 812f6b4:	10800517 	ldw	r2,20(r2)
 812f6b8:	e0ffff17 	ldw	r3,-4(fp)
 812f6bc:	180d883a 	mov	r6,r3
 812f6c0:	e17ffe17 	ldw	r5,-8(fp)
 812f6c4:	e13ffb17 	ldw	r4,-20(fp)
 812f6c8:	103ee83a 	callr	r2
 812f6cc:	e0bffc15 	stw	r2,-16(fp)
 812f6d0:	e0bffc17 	ldw	r2,-16(fp)
 812f6d4:	1000070e 	bge	r2,zero,812f6f4 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 812f6d8:	812f5f80 	call	812f5f8 <alt_get_errno>
 812f6dc:	1007883a 	mov	r3,r2
 812f6e0:	e0bffc17 	ldw	r2,-16(fp)
 812f6e4:	0085c83a 	sub	r2,zero,r2
 812f6e8:	18800015 	stw	r2,0(r3)
          return -1;
 812f6ec:	00bfffc4 	movi	r2,-1
 812f6f0:	00000c06 	br	812f724 <read+0xf0>
        }
        return rval;
 812f6f4:	e0bffc17 	ldw	r2,-16(fp)
 812f6f8:	00000a06 	br	812f724 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 812f6fc:	812f5f80 	call	812f5f8 <alt_get_errno>
 812f700:	1007883a 	mov	r3,r2
 812f704:	00800344 	movi	r2,13
 812f708:	18800015 	stw	r2,0(r3)
 812f70c:	00000406 	br	812f720 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 812f710:	812f5f80 	call	812f5f8 <alt_get_errno>
 812f714:	1007883a 	mov	r3,r2
 812f718:	00801444 	movi	r2,81
 812f71c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 812f720:	00bfffc4 	movi	r2,-1
}
 812f724:	e037883a 	mov	sp,fp
 812f728:	dfc00117 	ldw	ra,4(sp)
 812f72c:	df000017 	ldw	fp,0(sp)
 812f730:	dec00204 	addi	sp,sp,8
 812f734:	f800283a 	ret

0812f738 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 812f738:	defffc04 	addi	sp,sp,-16
 812f73c:	dfc00315 	stw	ra,12(sp)
 812f740:	df000215 	stw	fp,8(sp)
 812f744:	dc000115 	stw	r16,4(sp)
 812f748:	df000204 	addi	fp,sp,8
 812f74c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 812f750:	e0bffe17 	ldw	r2,-8(fp)
 812f754:	108000d0 	cmplti	r2,r2,3
 812f758:	1000111e 	bne	r2,zero,812f7a0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 812f75c:	040204f4 	movhi	r16,2067
 812f760:	84081a04 	addi	r16,r16,8296
 812f764:	e0bffe17 	ldw	r2,-8(fp)
 812f768:	01400304 	movi	r5,12
 812f76c:	1009883a 	mov	r4,r2
 812f770:	812c2080 	call	812c208 <__mulsi3>
 812f774:	8085883a 	add	r2,r16,r2
 812f778:	10800204 	addi	r2,r2,8
 812f77c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 812f780:	040204f4 	movhi	r16,2067
 812f784:	84081a04 	addi	r16,r16,8296
 812f788:	e0bffe17 	ldw	r2,-8(fp)
 812f78c:	01400304 	movi	r5,12
 812f790:	1009883a 	mov	r4,r2
 812f794:	812c2080 	call	812c208 <__mulsi3>
 812f798:	8085883a 	add	r2,r16,r2
 812f79c:	10000015 	stw	zero,0(r2)
  }
}
 812f7a0:	0001883a 	nop
 812f7a4:	e6ffff04 	addi	sp,fp,-4
 812f7a8:	dfc00217 	ldw	ra,8(sp)
 812f7ac:	df000117 	ldw	fp,4(sp)
 812f7b0:	dc000017 	ldw	r16,0(sp)
 812f7b4:	dec00304 	addi	sp,sp,12
 812f7b8:	f800283a 	ret

0812f7bc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 812f7bc:	defff904 	addi	sp,sp,-28
 812f7c0:	df000615 	stw	fp,24(sp)
 812f7c4:	df000604 	addi	fp,sp,24
 812f7c8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 812f7cc:	0005303a 	rdctl	r2,status
 812f7d0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 812f7d4:	e0fffe17 	ldw	r3,-8(fp)
 812f7d8:	00bfff84 	movi	r2,-2
 812f7dc:	1884703a 	and	r2,r3,r2
 812f7e0:	1001703a 	wrctl	status,r2
  
  return context;
 812f7e4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 812f7e8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 812f7ec:	d0a00b17 	ldw	r2,-32724(gp)
 812f7f0:	10c000c4 	addi	r3,r2,3
 812f7f4:	00bfff04 	movi	r2,-4
 812f7f8:	1884703a 	and	r2,r3,r2
 812f7fc:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 812f800:	d0e00b17 	ldw	r3,-32724(gp)
 812f804:	e0bfff17 	ldw	r2,-4(fp)
 812f808:	1887883a 	add	r3,r3,r2
 812f80c:	00830034 	movhi	r2,3072
 812f810:	10800004 	addi	r2,r2,0
 812f814:	10c0062e 	bgeu	r2,r3,812f830 <sbrk+0x74>
 812f818:	e0bffb17 	ldw	r2,-20(fp)
 812f81c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 812f820:	e0bffa17 	ldw	r2,-24(fp)
 812f824:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 812f828:	00bfffc4 	movi	r2,-1
 812f82c:	00000b06 	br	812f85c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 812f830:	d0a00b17 	ldw	r2,-32724(gp)
 812f834:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 812f838:	d0e00b17 	ldw	r3,-32724(gp)
 812f83c:	e0bfff17 	ldw	r2,-4(fp)
 812f840:	1885883a 	add	r2,r3,r2
 812f844:	d0a00b15 	stw	r2,-32724(gp)
 812f848:	e0bffb17 	ldw	r2,-20(fp)
 812f84c:	e0bffc15 	stw	r2,-16(fp)
 812f850:	e0bffc17 	ldw	r2,-16(fp)
 812f854:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 812f858:	e0bffd17 	ldw	r2,-12(fp)
} 
 812f85c:	e037883a 	mov	sp,fp
 812f860:	df000017 	ldw	fp,0(sp)
 812f864:	dec00104 	addi	sp,sp,4
 812f868:	f800283a 	ret

0812f86c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 812f86c:	defffe04 	addi	sp,sp,-8
 812f870:	dfc00115 	stw	ra,4(sp)
 812f874:	df000015 	stw	fp,0(sp)
 812f878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 812f87c:	d0a00a17 	ldw	r2,-32728(gp)
 812f880:	10000326 	beq	r2,zero,812f890 <alt_get_errno+0x24>
 812f884:	d0a00a17 	ldw	r2,-32728(gp)
 812f888:	103ee83a 	callr	r2
 812f88c:	00000106 	br	812f894 <alt_get_errno+0x28>
 812f890:	d0a6ae04 	addi	r2,gp,-25928
}
 812f894:	e037883a 	mov	sp,fp
 812f898:	dfc00117 	ldw	ra,4(sp)
 812f89c:	df000017 	ldw	fp,0(sp)
 812f8a0:	dec00204 	addi	sp,sp,8
 812f8a4:	f800283a 	ret

0812f8a8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 812f8a8:	defff904 	addi	sp,sp,-28
 812f8ac:	dfc00615 	stw	ra,24(sp)
 812f8b0:	df000515 	stw	fp,20(sp)
 812f8b4:	df000504 	addi	fp,sp,20
 812f8b8:	e13ffd15 	stw	r4,-12(fp)
 812f8bc:	e17ffe15 	stw	r5,-8(fp)
 812f8c0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 812f8c4:	e0bffd17 	ldw	r2,-12(fp)
 812f8c8:	10000816 	blt	r2,zero,812f8ec <write+0x44>
 812f8cc:	01400304 	movi	r5,12
 812f8d0:	e13ffd17 	ldw	r4,-12(fp)
 812f8d4:	812c2080 	call	812c208 <__mulsi3>
 812f8d8:	1007883a 	mov	r3,r2
 812f8dc:	008204f4 	movhi	r2,2067
 812f8e0:	10881a04 	addi	r2,r2,8296
 812f8e4:	1885883a 	add	r2,r3,r2
 812f8e8:	00000106 	br	812f8f0 <write+0x48>
 812f8ec:	0005883a 	mov	r2,zero
 812f8f0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 812f8f4:	e0bffb17 	ldw	r2,-20(fp)
 812f8f8:	10002126 	beq	r2,zero,812f980 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 812f8fc:	e0bffb17 	ldw	r2,-20(fp)
 812f900:	10800217 	ldw	r2,8(r2)
 812f904:	108000cc 	andi	r2,r2,3
 812f908:	10001826 	beq	r2,zero,812f96c <write+0xc4>
 812f90c:	e0bffb17 	ldw	r2,-20(fp)
 812f910:	10800017 	ldw	r2,0(r2)
 812f914:	10800617 	ldw	r2,24(r2)
 812f918:	10001426 	beq	r2,zero,812f96c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 812f91c:	e0bffb17 	ldw	r2,-20(fp)
 812f920:	10800017 	ldw	r2,0(r2)
 812f924:	10800617 	ldw	r2,24(r2)
 812f928:	e0ffff17 	ldw	r3,-4(fp)
 812f92c:	180d883a 	mov	r6,r3
 812f930:	e17ffe17 	ldw	r5,-8(fp)
 812f934:	e13ffb17 	ldw	r4,-20(fp)
 812f938:	103ee83a 	callr	r2
 812f93c:	e0bffc15 	stw	r2,-16(fp)
 812f940:	e0bffc17 	ldw	r2,-16(fp)
 812f944:	1000070e 	bge	r2,zero,812f964 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 812f948:	812f86c0 	call	812f86c <alt_get_errno>
 812f94c:	1007883a 	mov	r3,r2
 812f950:	e0bffc17 	ldw	r2,-16(fp)
 812f954:	0085c83a 	sub	r2,zero,r2
 812f958:	18800015 	stw	r2,0(r3)
        return -1;
 812f95c:	00bfffc4 	movi	r2,-1
 812f960:	00000c06 	br	812f994 <write+0xec>
      }
      return rval;
 812f964:	e0bffc17 	ldw	r2,-16(fp)
 812f968:	00000a06 	br	812f994 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 812f96c:	812f86c0 	call	812f86c <alt_get_errno>
 812f970:	1007883a 	mov	r3,r2
 812f974:	00800344 	movi	r2,13
 812f978:	18800015 	stw	r2,0(r3)
 812f97c:	00000406 	br	812f990 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 812f980:	812f86c0 	call	812f86c <alt_get_errno>
 812f984:	1007883a 	mov	r3,r2
 812f988:	00801444 	movi	r2,81
 812f98c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 812f990:	00bfffc4 	movi	r2,-1
}
 812f994:	e037883a 	mov	sp,fp
 812f998:	dfc00117 	ldw	ra,4(sp)
 812f99c:	df000017 	ldw	fp,0(sp)
 812f9a0:	dec00204 	addi	sp,sp,8
 812f9a4:	f800283a 	ret

0812f9a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 812f9a8:	defffd04 	addi	sp,sp,-12
 812f9ac:	dfc00215 	stw	ra,8(sp)
 812f9b0:	df000115 	stw	fp,4(sp)
 812f9b4:	df000104 	addi	fp,sp,4
 812f9b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 812f9bc:	d1600704 	addi	r5,gp,-32740
 812f9c0:	e13fff17 	ldw	r4,-4(fp)
 812f9c4:	81307600 	call	8130760 <alt_dev_llist_insert>
}
 812f9c8:	e037883a 	mov	sp,fp
 812f9cc:	dfc00117 	ldw	ra,4(sp)
 812f9d0:	df000017 	ldw	fp,0(sp)
 812f9d4:	dec00204 	addi	sp,sp,8
 812f9d8:	f800283a 	ret

0812f9dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 812f9dc:	defffd04 	addi	sp,sp,-12
 812f9e0:	dfc00215 	stw	ra,8(sp)
 812f9e4:	df000115 	stw	fp,4(sp)
 812f9e8:	df000104 	addi	fp,sp,4
 812f9ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 812f9f0:	813110c0 	call	813110c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 812f9f4:	00800044 	movi	r2,1
 812f9f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 812f9fc:	0001883a 	nop
 812fa00:	e037883a 	mov	sp,fp
 812fa04:	dfc00117 	ldw	ra,4(sp)
 812fa08:	df000017 	ldw	fp,0(sp)
 812fa0c:	dec00204 	addi	sp,sp,8
 812fa10:	f800283a 	ret

0812fa14 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 812fa14:	defffe04 	addi	sp,sp,-8
 812fa18:	dfc00115 	stw	ra,4(sp)
 812fa1c:	df000015 	stw	fp,0(sp)
 812fa20:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 812fa24:	01c0fa04 	movi	r7,1000
 812fa28:	01800084 	movi	r6,2
 812fa2c:	000b883a 	mov	r5,zero
 812fa30:	01000074 	movhi	r4,1
 812fa34:	21041004 	addi	r4,r4,4160
 812fa38:	813055c0 	call	813055c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 812fa3c:	01800044 	movi	r6,1
 812fa40:	000b883a 	mov	r5,zero
 812fa44:	010204f4 	movhi	r4,2067
 812fa48:	21088404 	addi	r4,r4,8720
 812fa4c:	812fbe00 	call	812fbe0 <altera_avalon_jtag_uart_init>
 812fa50:	010204f4 	movhi	r4,2067
 812fa54:	21087a04 	addi	r4,r4,8680
 812fa58:	812f9a80 	call	812f9a8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 812fa5c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 812fa60:	0001883a 	nop
}
 812fa64:	0001883a 	nop
 812fa68:	e037883a 	mov	sp,fp
 812fa6c:	dfc00117 	ldw	ra,4(sp)
 812fa70:	df000017 	ldw	fp,0(sp)
 812fa74:	dec00204 	addi	sp,sp,8
 812fa78:	f800283a 	ret

0812fa7c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 812fa7c:	defffa04 	addi	sp,sp,-24
 812fa80:	dfc00515 	stw	ra,20(sp)
 812fa84:	df000415 	stw	fp,16(sp)
 812fa88:	df000404 	addi	fp,sp,16
 812fa8c:	e13ffd15 	stw	r4,-12(fp)
 812fa90:	e17ffe15 	stw	r5,-8(fp)
 812fa94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812fa98:	e0bffd17 	ldw	r2,-12(fp)
 812fa9c:	10800017 	ldw	r2,0(r2)
 812faa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 812faa4:	e0bffc17 	ldw	r2,-16(fp)
 812faa8:	10c00a04 	addi	r3,r2,40
 812faac:	e0bffd17 	ldw	r2,-12(fp)
 812fab0:	10800217 	ldw	r2,8(r2)
 812fab4:	100f883a 	mov	r7,r2
 812fab8:	e1bfff17 	ldw	r6,-4(fp)
 812fabc:	e17ffe17 	ldw	r5,-8(fp)
 812fac0:	1809883a 	mov	r4,r3
 812fac4:	81300a40 	call	81300a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 812fac8:	e037883a 	mov	sp,fp
 812facc:	dfc00117 	ldw	ra,4(sp)
 812fad0:	df000017 	ldw	fp,0(sp)
 812fad4:	dec00204 	addi	sp,sp,8
 812fad8:	f800283a 	ret

0812fadc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 812fadc:	defffa04 	addi	sp,sp,-24
 812fae0:	dfc00515 	stw	ra,20(sp)
 812fae4:	df000415 	stw	fp,16(sp)
 812fae8:	df000404 	addi	fp,sp,16
 812faec:	e13ffd15 	stw	r4,-12(fp)
 812faf0:	e17ffe15 	stw	r5,-8(fp)
 812faf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812faf8:	e0bffd17 	ldw	r2,-12(fp)
 812fafc:	10800017 	ldw	r2,0(r2)
 812fb00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 812fb04:	e0bffc17 	ldw	r2,-16(fp)
 812fb08:	10c00a04 	addi	r3,r2,40
 812fb0c:	e0bffd17 	ldw	r2,-12(fp)
 812fb10:	10800217 	ldw	r2,8(r2)
 812fb14:	100f883a 	mov	r7,r2
 812fb18:	e1bfff17 	ldw	r6,-4(fp)
 812fb1c:	e17ffe17 	ldw	r5,-8(fp)
 812fb20:	1809883a 	mov	r4,r3
 812fb24:	81302c00 	call	81302c0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 812fb28:	e037883a 	mov	sp,fp
 812fb2c:	dfc00117 	ldw	ra,4(sp)
 812fb30:	df000017 	ldw	fp,0(sp)
 812fb34:	dec00204 	addi	sp,sp,8
 812fb38:	f800283a 	ret

0812fb3c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 812fb3c:	defffc04 	addi	sp,sp,-16
 812fb40:	dfc00315 	stw	ra,12(sp)
 812fb44:	df000215 	stw	fp,8(sp)
 812fb48:	df000204 	addi	fp,sp,8
 812fb4c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 812fb50:	e0bfff17 	ldw	r2,-4(fp)
 812fb54:	10800017 	ldw	r2,0(r2)
 812fb58:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 812fb5c:	e0bffe17 	ldw	r2,-8(fp)
 812fb60:	10c00a04 	addi	r3,r2,40
 812fb64:	e0bfff17 	ldw	r2,-4(fp)
 812fb68:	10800217 	ldw	r2,8(r2)
 812fb6c:	100b883a 	mov	r5,r2
 812fb70:	1809883a 	mov	r4,r3
 812fb74:	812ff4c0 	call	812ff4c <altera_avalon_jtag_uart_close>
}
 812fb78:	e037883a 	mov	sp,fp
 812fb7c:	dfc00117 	ldw	ra,4(sp)
 812fb80:	df000017 	ldw	fp,0(sp)
 812fb84:	dec00204 	addi	sp,sp,8
 812fb88:	f800283a 	ret

0812fb8c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 812fb8c:	defffa04 	addi	sp,sp,-24
 812fb90:	dfc00515 	stw	ra,20(sp)
 812fb94:	df000415 	stw	fp,16(sp)
 812fb98:	df000404 	addi	fp,sp,16
 812fb9c:	e13ffd15 	stw	r4,-12(fp)
 812fba0:	e17ffe15 	stw	r5,-8(fp)
 812fba4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 812fba8:	e0bffd17 	ldw	r2,-12(fp)
 812fbac:	10800017 	ldw	r2,0(r2)
 812fbb0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 812fbb4:	e0bffc17 	ldw	r2,-16(fp)
 812fbb8:	10800a04 	addi	r2,r2,40
 812fbbc:	e1bfff17 	ldw	r6,-4(fp)
 812fbc0:	e17ffe17 	ldw	r5,-8(fp)
 812fbc4:	1009883a 	mov	r4,r2
 812fbc8:	812ffb40 	call	812ffb4 <altera_avalon_jtag_uart_ioctl>
}
 812fbcc:	e037883a 	mov	sp,fp
 812fbd0:	dfc00117 	ldw	ra,4(sp)
 812fbd4:	df000017 	ldw	fp,0(sp)
 812fbd8:	dec00204 	addi	sp,sp,8
 812fbdc:	f800283a 	ret

0812fbe0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 812fbe0:	defffa04 	addi	sp,sp,-24
 812fbe4:	dfc00515 	stw	ra,20(sp)
 812fbe8:	df000415 	stw	fp,16(sp)
 812fbec:	df000404 	addi	fp,sp,16
 812fbf0:	e13ffd15 	stw	r4,-12(fp)
 812fbf4:	e17ffe15 	stw	r5,-8(fp)
 812fbf8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 812fbfc:	e0bffd17 	ldw	r2,-12(fp)
 812fc00:	00c00044 	movi	r3,1
 812fc04:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 812fc08:	e0bffd17 	ldw	r2,-12(fp)
 812fc0c:	10800017 	ldw	r2,0(r2)
 812fc10:	10800104 	addi	r2,r2,4
 812fc14:	1007883a 	mov	r3,r2
 812fc18:	e0bffd17 	ldw	r2,-12(fp)
 812fc1c:	10800817 	ldw	r2,32(r2)
 812fc20:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 812fc24:	e0bffe17 	ldw	r2,-8(fp)
 812fc28:	e0ffff17 	ldw	r3,-4(fp)
 812fc2c:	d8000015 	stw	zero,0(sp)
 812fc30:	e1fffd17 	ldw	r7,-12(fp)
 812fc34:	018204f4 	movhi	r6,2067
 812fc38:	31bf2804 	addi	r6,r6,-864
 812fc3c:	180b883a 	mov	r5,r3
 812fc40:	1009883a 	mov	r4,r2
 812fc44:	81308e40 	call	81308e4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 812fc48:	e0bffd17 	ldw	r2,-12(fp)
 812fc4c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 812fc50:	e0bffd17 	ldw	r2,-12(fp)
 812fc54:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 812fc58:	d0e6b317 	ldw	r3,-25908(gp)
 812fc5c:	e1fffd17 	ldw	r7,-12(fp)
 812fc60:	018204f4 	movhi	r6,2067
 812fc64:	31bfab04 	addi	r6,r6,-340
 812fc68:	180b883a 	mov	r5,r3
 812fc6c:	1009883a 	mov	r4,r2
 812fc70:	81305d80 	call	81305d8 <alt_alarm_start>
 812fc74:	1000040e 	bge	r2,zero,812fc88 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 812fc78:	e0fffd17 	ldw	r3,-12(fp)
 812fc7c:	00a00034 	movhi	r2,32768
 812fc80:	10bfffc4 	addi	r2,r2,-1
 812fc84:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 812fc88:	0001883a 	nop
 812fc8c:	e037883a 	mov	sp,fp
 812fc90:	dfc00117 	ldw	ra,4(sp)
 812fc94:	df000017 	ldw	fp,0(sp)
 812fc98:	dec00204 	addi	sp,sp,8
 812fc9c:	f800283a 	ret

0812fca0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 812fca0:	defff804 	addi	sp,sp,-32
 812fca4:	df000715 	stw	fp,28(sp)
 812fca8:	df000704 	addi	fp,sp,28
 812fcac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 812fcb0:	e0bfff17 	ldw	r2,-4(fp)
 812fcb4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 812fcb8:	e0bffb17 	ldw	r2,-20(fp)
 812fcbc:	10800017 	ldw	r2,0(r2)
 812fcc0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812fcc4:	e0bffc17 	ldw	r2,-16(fp)
 812fcc8:	10800104 	addi	r2,r2,4
 812fccc:	10800037 	ldwio	r2,0(r2)
 812fcd0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 812fcd4:	e0bffd17 	ldw	r2,-12(fp)
 812fcd8:	1080c00c 	andi	r2,r2,768
 812fcdc:	10006d26 	beq	r2,zero,812fe94 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 812fce0:	e0bffd17 	ldw	r2,-12(fp)
 812fce4:	1080400c 	andi	r2,r2,256
 812fce8:	10003526 	beq	r2,zero,812fdc0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 812fcec:	00800074 	movhi	r2,1
 812fcf0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812fcf4:	e0bffb17 	ldw	r2,-20(fp)
 812fcf8:	10800a17 	ldw	r2,40(r2)
 812fcfc:	10800044 	addi	r2,r2,1
 812fd00:	1081ffcc 	andi	r2,r2,2047
 812fd04:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 812fd08:	e0bffb17 	ldw	r2,-20(fp)
 812fd0c:	10c00b17 	ldw	r3,44(r2)
 812fd10:	e0bffe17 	ldw	r2,-8(fp)
 812fd14:	18801526 	beq	r3,r2,812fd6c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 812fd18:	e0bffc17 	ldw	r2,-16(fp)
 812fd1c:	10800037 	ldwio	r2,0(r2)
 812fd20:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 812fd24:	e0bff917 	ldw	r2,-28(fp)
 812fd28:	10a0000c 	andi	r2,r2,32768
 812fd2c:	10001126 	beq	r2,zero,812fd74 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 812fd30:	e0bffb17 	ldw	r2,-20(fp)
 812fd34:	10800a17 	ldw	r2,40(r2)
 812fd38:	e0fff917 	ldw	r3,-28(fp)
 812fd3c:	1809883a 	mov	r4,r3
 812fd40:	e0fffb17 	ldw	r3,-20(fp)
 812fd44:	1885883a 	add	r2,r3,r2
 812fd48:	10800e04 	addi	r2,r2,56
 812fd4c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812fd50:	e0bffb17 	ldw	r2,-20(fp)
 812fd54:	10800a17 	ldw	r2,40(r2)
 812fd58:	10800044 	addi	r2,r2,1
 812fd5c:	10c1ffcc 	andi	r3,r2,2047
 812fd60:	e0bffb17 	ldw	r2,-20(fp)
 812fd64:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 812fd68:	003fe206 	br	812fcf4 <__alt_data_end+0xfc12fcf4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 812fd6c:	0001883a 	nop
 812fd70:	00000106 	br	812fd78 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 812fd74:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 812fd78:	e0bff917 	ldw	r2,-28(fp)
 812fd7c:	10bfffec 	andhi	r2,r2,65535
 812fd80:	10000f26 	beq	r2,zero,812fdc0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 812fd84:	e0bffb17 	ldw	r2,-20(fp)
 812fd88:	10c00817 	ldw	r3,32(r2)
 812fd8c:	00bfff84 	movi	r2,-2
 812fd90:	1886703a 	and	r3,r3,r2
 812fd94:	e0bffb17 	ldw	r2,-20(fp)
 812fd98:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 812fd9c:	e0bffc17 	ldw	r2,-16(fp)
 812fda0:	10800104 	addi	r2,r2,4
 812fda4:	1007883a 	mov	r3,r2
 812fda8:	e0bffb17 	ldw	r2,-20(fp)
 812fdac:	10800817 	ldw	r2,32(r2)
 812fdb0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812fdb4:	e0bffc17 	ldw	r2,-16(fp)
 812fdb8:	10800104 	addi	r2,r2,4
 812fdbc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 812fdc0:	e0bffd17 	ldw	r2,-12(fp)
 812fdc4:	1080800c 	andi	r2,r2,512
 812fdc8:	103fbe26 	beq	r2,zero,812fcc4 <__alt_data_end+0xfc12fcc4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 812fdcc:	e0bffd17 	ldw	r2,-12(fp)
 812fdd0:	1004d43a 	srli	r2,r2,16
 812fdd4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 812fdd8:	00001406 	br	812fe2c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 812fddc:	e0bffc17 	ldw	r2,-16(fp)
 812fde0:	e0fffb17 	ldw	r3,-20(fp)
 812fde4:	18c00d17 	ldw	r3,52(r3)
 812fde8:	e13ffb17 	ldw	r4,-20(fp)
 812fdec:	20c7883a 	add	r3,r4,r3
 812fdf0:	18c20e04 	addi	r3,r3,2104
 812fdf4:	18c00003 	ldbu	r3,0(r3)
 812fdf8:	18c03fcc 	andi	r3,r3,255
 812fdfc:	18c0201c 	xori	r3,r3,128
 812fe00:	18ffe004 	addi	r3,r3,-128
 812fe04:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 812fe08:	e0bffb17 	ldw	r2,-20(fp)
 812fe0c:	10800d17 	ldw	r2,52(r2)
 812fe10:	10800044 	addi	r2,r2,1
 812fe14:	10c1ffcc 	andi	r3,r2,2047
 812fe18:	e0bffb17 	ldw	r2,-20(fp)
 812fe1c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 812fe20:	e0bffa17 	ldw	r2,-24(fp)
 812fe24:	10bfffc4 	addi	r2,r2,-1
 812fe28:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 812fe2c:	e0bffa17 	ldw	r2,-24(fp)
 812fe30:	10000526 	beq	r2,zero,812fe48 <altera_avalon_jtag_uart_irq+0x1a8>
 812fe34:	e0bffb17 	ldw	r2,-20(fp)
 812fe38:	10c00d17 	ldw	r3,52(r2)
 812fe3c:	e0bffb17 	ldw	r2,-20(fp)
 812fe40:	10800c17 	ldw	r2,48(r2)
 812fe44:	18bfe51e 	bne	r3,r2,812fddc <__alt_data_end+0xfc12fddc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 812fe48:	e0bffa17 	ldw	r2,-24(fp)
 812fe4c:	103f9d26 	beq	r2,zero,812fcc4 <__alt_data_end+0xfc12fcc4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 812fe50:	e0bffb17 	ldw	r2,-20(fp)
 812fe54:	10c00817 	ldw	r3,32(r2)
 812fe58:	00bfff44 	movi	r2,-3
 812fe5c:	1886703a 	and	r3,r3,r2
 812fe60:	e0bffb17 	ldw	r2,-20(fp)
 812fe64:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 812fe68:	e0bffb17 	ldw	r2,-20(fp)
 812fe6c:	10800017 	ldw	r2,0(r2)
 812fe70:	10800104 	addi	r2,r2,4
 812fe74:	1007883a 	mov	r3,r2
 812fe78:	e0bffb17 	ldw	r2,-20(fp)
 812fe7c:	10800817 	ldw	r2,32(r2)
 812fe80:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 812fe84:	e0bffc17 	ldw	r2,-16(fp)
 812fe88:	10800104 	addi	r2,r2,4
 812fe8c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 812fe90:	003f8c06 	br	812fcc4 <__alt_data_end+0xfc12fcc4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 812fe94:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 812fe98:	0001883a 	nop
 812fe9c:	e037883a 	mov	sp,fp
 812fea0:	df000017 	ldw	fp,0(sp)
 812fea4:	dec00104 	addi	sp,sp,4
 812fea8:	f800283a 	ret

0812feac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 812feac:	defff804 	addi	sp,sp,-32
 812feb0:	df000715 	stw	fp,28(sp)
 812feb4:	df000704 	addi	fp,sp,28
 812feb8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 812febc:	e0bffb17 	ldw	r2,-20(fp)
 812fec0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 812fec4:	e0bff917 	ldw	r2,-28(fp)
 812fec8:	10800017 	ldw	r2,0(r2)
 812fecc:	10800104 	addi	r2,r2,4
 812fed0:	10800037 	ldwio	r2,0(r2)
 812fed4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 812fed8:	e0bffa17 	ldw	r2,-24(fp)
 812fedc:	1081000c 	andi	r2,r2,1024
 812fee0:	10000b26 	beq	r2,zero,812ff10 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 812fee4:	e0bff917 	ldw	r2,-28(fp)
 812fee8:	10800017 	ldw	r2,0(r2)
 812feec:	10800104 	addi	r2,r2,4
 812fef0:	1007883a 	mov	r3,r2
 812fef4:	e0bff917 	ldw	r2,-28(fp)
 812fef8:	10800817 	ldw	r2,32(r2)
 812fefc:	10810014 	ori	r2,r2,1024
 812ff00:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 812ff04:	e0bff917 	ldw	r2,-28(fp)
 812ff08:	10000915 	stw	zero,36(r2)
 812ff0c:	00000a06 	br	812ff38 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 812ff10:	e0bff917 	ldw	r2,-28(fp)
 812ff14:	10c00917 	ldw	r3,36(r2)
 812ff18:	00a00034 	movhi	r2,32768
 812ff1c:	10bfff04 	addi	r2,r2,-4
 812ff20:	10c00536 	bltu	r2,r3,812ff38 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 812ff24:	e0bff917 	ldw	r2,-28(fp)
 812ff28:	10800917 	ldw	r2,36(r2)
 812ff2c:	10c00044 	addi	r3,r2,1
 812ff30:	e0bff917 	ldw	r2,-28(fp)
 812ff34:	10c00915 	stw	r3,36(r2)
 812ff38:	d0a6b317 	ldw	r2,-25908(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 812ff3c:	e037883a 	mov	sp,fp
 812ff40:	df000017 	ldw	fp,0(sp)
 812ff44:	dec00104 	addi	sp,sp,4
 812ff48:	f800283a 	ret

0812ff4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 812ff4c:	defffd04 	addi	sp,sp,-12
 812ff50:	df000215 	stw	fp,8(sp)
 812ff54:	df000204 	addi	fp,sp,8
 812ff58:	e13ffe15 	stw	r4,-8(fp)
 812ff5c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 812ff60:	00000506 	br	812ff78 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 812ff64:	e0bfff17 	ldw	r2,-4(fp)
 812ff68:	1090000c 	andi	r2,r2,16384
 812ff6c:	10000226 	beq	r2,zero,812ff78 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 812ff70:	00bffd44 	movi	r2,-11
 812ff74:	00000b06 	br	812ffa4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 812ff78:	e0bffe17 	ldw	r2,-8(fp)
 812ff7c:	10c00d17 	ldw	r3,52(r2)
 812ff80:	e0bffe17 	ldw	r2,-8(fp)
 812ff84:	10800c17 	ldw	r2,48(r2)
 812ff88:	18800526 	beq	r3,r2,812ffa0 <altera_avalon_jtag_uart_close+0x54>
 812ff8c:	e0bffe17 	ldw	r2,-8(fp)
 812ff90:	10c00917 	ldw	r3,36(r2)
 812ff94:	e0bffe17 	ldw	r2,-8(fp)
 812ff98:	10800117 	ldw	r2,4(r2)
 812ff9c:	18bff136 	bltu	r3,r2,812ff64 <__alt_data_end+0xfc12ff64>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 812ffa0:	0005883a 	mov	r2,zero
}
 812ffa4:	e037883a 	mov	sp,fp
 812ffa8:	df000017 	ldw	fp,0(sp)
 812ffac:	dec00104 	addi	sp,sp,4
 812ffb0:	f800283a 	ret

0812ffb4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 812ffb4:	defffa04 	addi	sp,sp,-24
 812ffb8:	df000515 	stw	fp,20(sp)
 812ffbc:	df000504 	addi	fp,sp,20
 812ffc0:	e13ffd15 	stw	r4,-12(fp)
 812ffc4:	e17ffe15 	stw	r5,-8(fp)
 812ffc8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 812ffcc:	00bff9c4 	movi	r2,-25
 812ffd0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 812ffd4:	e0bffe17 	ldw	r2,-8(fp)
 812ffd8:	10da8060 	cmpeqi	r3,r2,27137
 812ffdc:	1800031e 	bne	r3,zero,812ffec <altera_avalon_jtag_uart_ioctl+0x38>
 812ffe0:	109a80a0 	cmpeqi	r2,r2,27138
 812ffe4:	1000181e 	bne	r2,zero,8130048 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 812ffe8:	00002906 	br	8130090 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 812ffec:	e0bffd17 	ldw	r2,-12(fp)
 812fff0:	10c00117 	ldw	r3,4(r2)
 812fff4:	00a00034 	movhi	r2,32768
 812fff8:	10bfffc4 	addi	r2,r2,-1
 812fffc:	18802126 	beq	r3,r2,8130084 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8130000:	e0bfff17 	ldw	r2,-4(fp)
 8130004:	10800017 	ldw	r2,0(r2)
 8130008:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 813000c:	e0bffc17 	ldw	r2,-16(fp)
 8130010:	10800090 	cmplti	r2,r2,2
 8130014:	1000061e 	bne	r2,zero,8130030 <altera_avalon_jtag_uart_ioctl+0x7c>
 8130018:	e0fffc17 	ldw	r3,-16(fp)
 813001c:	00a00034 	movhi	r2,32768
 8130020:	10bfffc4 	addi	r2,r2,-1
 8130024:	18800226 	beq	r3,r2,8130030 <altera_avalon_jtag_uart_ioctl+0x7c>
 8130028:	e0bffc17 	ldw	r2,-16(fp)
 813002c:	00000206 	br	8130038 <altera_avalon_jtag_uart_ioctl+0x84>
 8130030:	00a00034 	movhi	r2,32768
 8130034:	10bfff84 	addi	r2,r2,-2
 8130038:	e0fffd17 	ldw	r3,-12(fp)
 813003c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8130040:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8130044:	00000f06 	br	8130084 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8130048:	e0bffd17 	ldw	r2,-12(fp)
 813004c:	10c00117 	ldw	r3,4(r2)
 8130050:	00a00034 	movhi	r2,32768
 8130054:	10bfffc4 	addi	r2,r2,-1
 8130058:	18800c26 	beq	r3,r2,813008c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 813005c:	e0bffd17 	ldw	r2,-12(fp)
 8130060:	10c00917 	ldw	r3,36(r2)
 8130064:	e0bffd17 	ldw	r2,-12(fp)
 8130068:	10800117 	ldw	r2,4(r2)
 813006c:	1885803a 	cmpltu	r2,r3,r2
 8130070:	10c03fcc 	andi	r3,r2,255
 8130074:	e0bfff17 	ldw	r2,-4(fp)
 8130078:	10c00015 	stw	r3,0(r2)
      rc = 0;
 813007c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8130080:	00000206 	br	813008c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8130084:	0001883a 	nop
 8130088:	00000106 	br	8130090 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 813008c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8130090:	e0bffb17 	ldw	r2,-20(fp)
}
 8130094:	e037883a 	mov	sp,fp
 8130098:	df000017 	ldw	fp,0(sp)
 813009c:	dec00104 	addi	sp,sp,4
 81300a0:	f800283a 	ret

081300a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 81300a4:	defff304 	addi	sp,sp,-52
 81300a8:	dfc00c15 	stw	ra,48(sp)
 81300ac:	df000b15 	stw	fp,44(sp)
 81300b0:	df000b04 	addi	fp,sp,44
 81300b4:	e13ffc15 	stw	r4,-16(fp)
 81300b8:	e17ffd15 	stw	r5,-12(fp)
 81300bc:	e1bffe15 	stw	r6,-8(fp)
 81300c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 81300c4:	e0bffd17 	ldw	r2,-12(fp)
 81300c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 81300cc:	00004706 	br	81301ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 81300d0:	e0bffc17 	ldw	r2,-16(fp)
 81300d4:	10800a17 	ldw	r2,40(r2)
 81300d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 81300dc:	e0bffc17 	ldw	r2,-16(fp)
 81300e0:	10800b17 	ldw	r2,44(r2)
 81300e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 81300e8:	e0fff717 	ldw	r3,-36(fp)
 81300ec:	e0bff817 	ldw	r2,-32(fp)
 81300f0:	18800536 	bltu	r3,r2,8130108 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 81300f4:	e0fff717 	ldw	r3,-36(fp)
 81300f8:	e0bff817 	ldw	r2,-32(fp)
 81300fc:	1885c83a 	sub	r2,r3,r2
 8130100:	e0bff615 	stw	r2,-40(fp)
 8130104:	00000406 	br	8130118 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8130108:	00c20004 	movi	r3,2048
 813010c:	e0bff817 	ldw	r2,-32(fp)
 8130110:	1885c83a 	sub	r2,r3,r2
 8130114:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8130118:	e0bff617 	ldw	r2,-40(fp)
 813011c:	10001e26 	beq	r2,zero,8130198 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8130120:	e0fffe17 	ldw	r3,-8(fp)
 8130124:	e0bff617 	ldw	r2,-40(fp)
 8130128:	1880022e 	bgeu	r3,r2,8130134 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 813012c:	e0bffe17 	ldw	r2,-8(fp)
 8130130:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8130134:	e0bffc17 	ldw	r2,-16(fp)
 8130138:	10c00e04 	addi	r3,r2,56
 813013c:	e0bff817 	ldw	r2,-32(fp)
 8130140:	1885883a 	add	r2,r3,r2
 8130144:	e1bff617 	ldw	r6,-40(fp)
 8130148:	100b883a 	mov	r5,r2
 813014c:	e13ff517 	ldw	r4,-44(fp)
 8130150:	812d68c0 	call	812d68c <memcpy>
      ptr   += n;
 8130154:	e0fff517 	ldw	r3,-44(fp)
 8130158:	e0bff617 	ldw	r2,-40(fp)
 813015c:	1885883a 	add	r2,r3,r2
 8130160:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8130164:	e0fffe17 	ldw	r3,-8(fp)
 8130168:	e0bff617 	ldw	r2,-40(fp)
 813016c:	1885c83a 	sub	r2,r3,r2
 8130170:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8130174:	e0fff817 	ldw	r3,-32(fp)
 8130178:	e0bff617 	ldw	r2,-40(fp)
 813017c:	1885883a 	add	r2,r3,r2
 8130180:	10c1ffcc 	andi	r3,r2,2047
 8130184:	e0bffc17 	ldw	r2,-16(fp)
 8130188:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 813018c:	e0bffe17 	ldw	r2,-8(fp)
 8130190:	00bfcf16 	blt	zero,r2,81300d0 <__alt_data_end+0xfc1300d0>
 8130194:	00000106 	br	813019c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8130198:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 813019c:	e0fff517 	ldw	r3,-44(fp)
 81301a0:	e0bffd17 	ldw	r2,-12(fp)
 81301a4:	1880141e 	bne	r3,r2,81301f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 81301a8:	e0bfff17 	ldw	r2,-4(fp)
 81301ac:	1090000c 	andi	r2,r2,16384
 81301b0:	1000131e 	bne	r2,zero,8130200 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 81301b4:	0001883a 	nop
 81301b8:	e0bffc17 	ldw	r2,-16(fp)
 81301bc:	10c00a17 	ldw	r3,40(r2)
 81301c0:	e0bff717 	ldw	r2,-36(fp)
 81301c4:	1880051e 	bne	r3,r2,81301dc <altera_avalon_jtag_uart_read+0x138>
 81301c8:	e0bffc17 	ldw	r2,-16(fp)
 81301cc:	10c00917 	ldw	r3,36(r2)
 81301d0:	e0bffc17 	ldw	r2,-16(fp)
 81301d4:	10800117 	ldw	r2,4(r2)
 81301d8:	18bff736 	bltu	r3,r2,81301b8 <__alt_data_end+0xfc1301b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 81301dc:	e0bffc17 	ldw	r2,-16(fp)
 81301e0:	10c00a17 	ldw	r3,40(r2)
 81301e4:	e0bff717 	ldw	r2,-36(fp)
 81301e8:	18800726 	beq	r3,r2,8130208 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 81301ec:	e0bffe17 	ldw	r2,-8(fp)
 81301f0:	00bfb716 	blt	zero,r2,81300d0 <__alt_data_end+0xfc1300d0>
 81301f4:	00000506 	br	813020c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 81301f8:	0001883a 	nop
 81301fc:	00000306 	br	813020c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8130200:	0001883a 	nop
 8130204:	00000106 	br	813020c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8130208:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 813020c:	e0fff517 	ldw	r3,-44(fp)
 8130210:	e0bffd17 	ldw	r2,-12(fp)
 8130214:	18801826 	beq	r3,r2,8130278 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130218:	0005303a 	rdctl	r2,status
 813021c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130220:	e0fffb17 	ldw	r3,-20(fp)
 8130224:	00bfff84 	movi	r2,-2
 8130228:	1884703a 	and	r2,r3,r2
 813022c:	1001703a 	wrctl	status,r2
  
  return context;
 8130230:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8130234:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8130238:	e0bffc17 	ldw	r2,-16(fp)
 813023c:	10800817 	ldw	r2,32(r2)
 8130240:	10c00054 	ori	r3,r2,1
 8130244:	e0bffc17 	ldw	r2,-16(fp)
 8130248:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 813024c:	e0bffc17 	ldw	r2,-16(fp)
 8130250:	10800017 	ldw	r2,0(r2)
 8130254:	10800104 	addi	r2,r2,4
 8130258:	1007883a 	mov	r3,r2
 813025c:	e0bffc17 	ldw	r2,-16(fp)
 8130260:	10800817 	ldw	r2,32(r2)
 8130264:	18800035 	stwio	r2,0(r3)
 8130268:	e0bffa17 	ldw	r2,-24(fp)
 813026c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130270:	e0bff917 	ldw	r2,-28(fp)
 8130274:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8130278:	e0fff517 	ldw	r3,-44(fp)
 813027c:	e0bffd17 	ldw	r2,-12(fp)
 8130280:	18800426 	beq	r3,r2,8130294 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8130284:	e0fff517 	ldw	r3,-44(fp)
 8130288:	e0bffd17 	ldw	r2,-12(fp)
 813028c:	1885c83a 	sub	r2,r3,r2
 8130290:	00000606 	br	81302ac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8130294:	e0bfff17 	ldw	r2,-4(fp)
 8130298:	1090000c 	andi	r2,r2,16384
 813029c:	10000226 	beq	r2,zero,81302a8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 81302a0:	00bffd44 	movi	r2,-11
 81302a4:	00000106 	br	81302ac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 81302a8:	00bffec4 	movi	r2,-5
}
 81302ac:	e037883a 	mov	sp,fp
 81302b0:	dfc00117 	ldw	ra,4(sp)
 81302b4:	df000017 	ldw	fp,0(sp)
 81302b8:	dec00204 	addi	sp,sp,8
 81302bc:	f800283a 	ret

081302c0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 81302c0:	defff304 	addi	sp,sp,-52
 81302c4:	dfc00c15 	stw	ra,48(sp)
 81302c8:	df000b15 	stw	fp,44(sp)
 81302cc:	df000b04 	addi	fp,sp,44
 81302d0:	e13ffc15 	stw	r4,-16(fp)
 81302d4:	e17ffd15 	stw	r5,-12(fp)
 81302d8:	e1bffe15 	stw	r6,-8(fp)
 81302dc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 81302e0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 81302e4:	e0bffd17 	ldw	r2,-12(fp)
 81302e8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 81302ec:	00003706 	br	81303cc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 81302f0:	e0bffc17 	ldw	r2,-16(fp)
 81302f4:	10800c17 	ldw	r2,48(r2)
 81302f8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 81302fc:	e0bffc17 	ldw	r2,-16(fp)
 8130300:	10800d17 	ldw	r2,52(r2)
 8130304:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8130308:	e0fff917 	ldw	r3,-28(fp)
 813030c:	e0bff517 	ldw	r2,-44(fp)
 8130310:	1880062e 	bgeu	r3,r2,813032c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8130314:	e0fff517 	ldw	r3,-44(fp)
 8130318:	e0bff917 	ldw	r2,-28(fp)
 813031c:	1885c83a 	sub	r2,r3,r2
 8130320:	10bfffc4 	addi	r2,r2,-1
 8130324:	e0bff615 	stw	r2,-40(fp)
 8130328:	00000b06 	br	8130358 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 813032c:	e0bff517 	ldw	r2,-44(fp)
 8130330:	10000526 	beq	r2,zero,8130348 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8130334:	00c20004 	movi	r3,2048
 8130338:	e0bff917 	ldw	r2,-28(fp)
 813033c:	1885c83a 	sub	r2,r3,r2
 8130340:	e0bff615 	stw	r2,-40(fp)
 8130344:	00000406 	br	8130358 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8130348:	00c1ffc4 	movi	r3,2047
 813034c:	e0bff917 	ldw	r2,-28(fp)
 8130350:	1885c83a 	sub	r2,r3,r2
 8130354:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8130358:	e0bff617 	ldw	r2,-40(fp)
 813035c:	10001e26 	beq	r2,zero,81303d8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8130360:	e0fffe17 	ldw	r3,-8(fp)
 8130364:	e0bff617 	ldw	r2,-40(fp)
 8130368:	1880022e 	bgeu	r3,r2,8130374 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 813036c:	e0bffe17 	ldw	r2,-8(fp)
 8130370:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8130374:	e0bffc17 	ldw	r2,-16(fp)
 8130378:	10c20e04 	addi	r3,r2,2104
 813037c:	e0bff917 	ldw	r2,-28(fp)
 8130380:	1885883a 	add	r2,r3,r2
 8130384:	e1bff617 	ldw	r6,-40(fp)
 8130388:	e17ffd17 	ldw	r5,-12(fp)
 813038c:	1009883a 	mov	r4,r2
 8130390:	812d68c0 	call	812d68c <memcpy>
      ptr   += n;
 8130394:	e0fffd17 	ldw	r3,-12(fp)
 8130398:	e0bff617 	ldw	r2,-40(fp)
 813039c:	1885883a 	add	r2,r3,r2
 81303a0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 81303a4:	e0fffe17 	ldw	r3,-8(fp)
 81303a8:	e0bff617 	ldw	r2,-40(fp)
 81303ac:	1885c83a 	sub	r2,r3,r2
 81303b0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 81303b4:	e0fff917 	ldw	r3,-28(fp)
 81303b8:	e0bff617 	ldw	r2,-40(fp)
 81303bc:	1885883a 	add	r2,r3,r2
 81303c0:	10c1ffcc 	andi	r3,r2,2047
 81303c4:	e0bffc17 	ldw	r2,-16(fp)
 81303c8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 81303cc:	e0bffe17 	ldw	r2,-8(fp)
 81303d0:	00bfc716 	blt	zero,r2,81302f0 <__alt_data_end+0xfc1302f0>
 81303d4:	00000106 	br	81303dc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 81303d8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81303dc:	0005303a 	rdctl	r2,status
 81303e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81303e4:	e0fffb17 	ldw	r3,-20(fp)
 81303e8:	00bfff84 	movi	r2,-2
 81303ec:	1884703a 	and	r2,r3,r2
 81303f0:	1001703a 	wrctl	status,r2
  
  return context;
 81303f4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 81303f8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 81303fc:	e0bffc17 	ldw	r2,-16(fp)
 8130400:	10800817 	ldw	r2,32(r2)
 8130404:	10c00094 	ori	r3,r2,2
 8130408:	e0bffc17 	ldw	r2,-16(fp)
 813040c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8130410:	e0bffc17 	ldw	r2,-16(fp)
 8130414:	10800017 	ldw	r2,0(r2)
 8130418:	10800104 	addi	r2,r2,4
 813041c:	1007883a 	mov	r3,r2
 8130420:	e0bffc17 	ldw	r2,-16(fp)
 8130424:	10800817 	ldw	r2,32(r2)
 8130428:	18800035 	stwio	r2,0(r3)
 813042c:	e0bffa17 	ldw	r2,-24(fp)
 8130430:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130434:	e0bff817 	ldw	r2,-32(fp)
 8130438:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 813043c:	e0bffe17 	ldw	r2,-8(fp)
 8130440:	0080100e 	bge	zero,r2,8130484 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8130444:	e0bfff17 	ldw	r2,-4(fp)
 8130448:	1090000c 	andi	r2,r2,16384
 813044c:	1000101e 	bne	r2,zero,8130490 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8130450:	0001883a 	nop
 8130454:	e0bffc17 	ldw	r2,-16(fp)
 8130458:	10c00d17 	ldw	r3,52(r2)
 813045c:	e0bff517 	ldw	r2,-44(fp)
 8130460:	1880051e 	bne	r3,r2,8130478 <altera_avalon_jtag_uart_write+0x1b8>
 8130464:	e0bffc17 	ldw	r2,-16(fp)
 8130468:	10c00917 	ldw	r3,36(r2)
 813046c:	e0bffc17 	ldw	r2,-16(fp)
 8130470:	10800117 	ldw	r2,4(r2)
 8130474:	18bff736 	bltu	r3,r2,8130454 <__alt_data_end+0xfc130454>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8130478:	e0bffc17 	ldw	r2,-16(fp)
 813047c:	10800917 	ldw	r2,36(r2)
 8130480:	1000051e 	bne	r2,zero,8130498 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8130484:	e0bffe17 	ldw	r2,-8(fp)
 8130488:	00bfd016 	blt	zero,r2,81303cc <__alt_data_end+0xfc1303cc>
 813048c:	00000306 	br	813049c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8130490:	0001883a 	nop
 8130494:	00000106 	br	813049c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8130498:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 813049c:	e0fffd17 	ldw	r3,-12(fp)
 81304a0:	e0bff717 	ldw	r2,-36(fp)
 81304a4:	18800426 	beq	r3,r2,81304b8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 81304a8:	e0fffd17 	ldw	r3,-12(fp)
 81304ac:	e0bff717 	ldw	r2,-36(fp)
 81304b0:	1885c83a 	sub	r2,r3,r2
 81304b4:	00000606 	br	81304d0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 81304b8:	e0bfff17 	ldw	r2,-4(fp)
 81304bc:	1090000c 	andi	r2,r2,16384
 81304c0:	10000226 	beq	r2,zero,81304cc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 81304c4:	00bffd44 	movi	r2,-11
 81304c8:	00000106 	br	81304d0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 81304cc:	00bffec4 	movi	r2,-5
}
 81304d0:	e037883a 	mov	sp,fp
 81304d4:	dfc00117 	ldw	ra,4(sp)
 81304d8:	df000017 	ldw	fp,0(sp)
 81304dc:	dec00204 	addi	sp,sp,8
 81304e0:	f800283a 	ret

081304e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 81304e4:	defffa04 	addi	sp,sp,-24
 81304e8:	dfc00515 	stw	ra,20(sp)
 81304ec:	df000415 	stw	fp,16(sp)
 81304f0:	df000404 	addi	fp,sp,16
 81304f4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 81304f8:	0007883a 	mov	r3,zero
 81304fc:	e0bfff17 	ldw	r2,-4(fp)
 8130500:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8130504:	e0bfff17 	ldw	r2,-4(fp)
 8130508:	10800104 	addi	r2,r2,4
 813050c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130510:	0005303a 	rdctl	r2,status
 8130514:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130518:	e0fffd17 	ldw	r3,-12(fp)
 813051c:	00bfff84 	movi	r2,-2
 8130520:	1884703a 	and	r2,r3,r2
 8130524:	1001703a 	wrctl	status,r2
  
  return context;
 8130528:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 813052c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8130530:	81310040 	call	8131004 <alt_tick>
 8130534:	e0bffc17 	ldw	r2,-16(fp)
 8130538:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 813053c:	e0bffe17 	ldw	r2,-8(fp)
 8130540:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8130544:	0001883a 	nop
 8130548:	e037883a 	mov	sp,fp
 813054c:	dfc00117 	ldw	ra,4(sp)
 8130550:	df000017 	ldw	fp,0(sp)
 8130554:	dec00204 	addi	sp,sp,8
 8130558:	f800283a 	ret

0813055c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 813055c:	defff804 	addi	sp,sp,-32
 8130560:	dfc00715 	stw	ra,28(sp)
 8130564:	df000615 	stw	fp,24(sp)
 8130568:	df000604 	addi	fp,sp,24
 813056c:	e13ffc15 	stw	r4,-16(fp)
 8130570:	e17ffd15 	stw	r5,-12(fp)
 8130574:	e1bffe15 	stw	r6,-8(fp)
 8130578:	e1ffff15 	stw	r7,-4(fp)
 813057c:	e0bfff17 	ldw	r2,-4(fp)
 8130580:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8130584:	d0a6b317 	ldw	r2,-25908(gp)
 8130588:	1000021e 	bne	r2,zero,8130594 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 813058c:	e0bffb17 	ldw	r2,-20(fp)
 8130590:	d0a6b315 	stw	r2,-25908(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8130594:	e0bffc17 	ldw	r2,-16(fp)
 8130598:	10800104 	addi	r2,r2,4
 813059c:	00c001c4 	movi	r3,7
 81305a0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 81305a4:	d8000015 	stw	zero,0(sp)
 81305a8:	e1fffc17 	ldw	r7,-16(fp)
 81305ac:	018204f4 	movhi	r6,2067
 81305b0:	31813904 	addi	r6,r6,1252
 81305b4:	e17ffe17 	ldw	r5,-8(fp)
 81305b8:	e13ffd17 	ldw	r4,-12(fp)
 81305bc:	81308e40 	call	81308e4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 81305c0:	0001883a 	nop
 81305c4:	e037883a 	mov	sp,fp
 81305c8:	dfc00117 	ldw	ra,4(sp)
 81305cc:	df000017 	ldw	fp,0(sp)
 81305d0:	dec00204 	addi	sp,sp,8
 81305d4:	f800283a 	ret

081305d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 81305d8:	defff504 	addi	sp,sp,-44
 81305dc:	df000a15 	stw	fp,40(sp)
 81305e0:	df000a04 	addi	fp,sp,40
 81305e4:	e13ffc15 	stw	r4,-16(fp)
 81305e8:	e17ffd15 	stw	r5,-12(fp)
 81305ec:	e1bffe15 	stw	r6,-8(fp)
 81305f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 81305f4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 81305f8:	d0a6b317 	ldw	r2,-25908(gp)
  
  if (alt_ticks_per_second ())
 81305fc:	10003c26 	beq	r2,zero,81306f0 <alt_alarm_start+0x118>
  {
    if (alarm)
 8130600:	e0bffc17 	ldw	r2,-16(fp)
 8130604:	10003826 	beq	r2,zero,81306e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8130608:	e0bffc17 	ldw	r2,-16(fp)
 813060c:	e0fffe17 	ldw	r3,-8(fp)
 8130610:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8130614:	e0bffc17 	ldw	r2,-16(fp)
 8130618:	e0ffff17 	ldw	r3,-4(fp)
 813061c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130620:	0005303a 	rdctl	r2,status
 8130624:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130628:	e0fff917 	ldw	r3,-28(fp)
 813062c:	00bfff84 	movi	r2,-2
 8130630:	1884703a 	and	r2,r3,r2
 8130634:	1001703a 	wrctl	status,r2
  
  return context;
 8130638:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 813063c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8130640:	d0a6b417 	ldw	r2,-25904(gp)
      
      current_nticks = alt_nticks();
 8130644:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8130648:	e0fffd17 	ldw	r3,-12(fp)
 813064c:	e0bff617 	ldw	r2,-40(fp)
 8130650:	1885883a 	add	r2,r3,r2
 8130654:	10c00044 	addi	r3,r2,1
 8130658:	e0bffc17 	ldw	r2,-16(fp)
 813065c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8130660:	e0bffc17 	ldw	r2,-16(fp)
 8130664:	10c00217 	ldw	r3,8(r2)
 8130668:	e0bff617 	ldw	r2,-40(fp)
 813066c:	1880042e 	bgeu	r3,r2,8130680 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8130670:	e0bffc17 	ldw	r2,-16(fp)
 8130674:	00c00044 	movi	r3,1
 8130678:	10c00405 	stb	r3,16(r2)
 813067c:	00000206 	br	8130688 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8130680:	e0bffc17 	ldw	r2,-16(fp)
 8130684:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8130688:	e0bffc17 	ldw	r2,-16(fp)
 813068c:	d0e00d04 	addi	r3,gp,-32716
 8130690:	e0fffa15 	stw	r3,-24(fp)
 8130694:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8130698:	e0bffb17 	ldw	r2,-20(fp)
 813069c:	e0fffa17 	ldw	r3,-24(fp)
 81306a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 81306a4:	e0bffa17 	ldw	r2,-24(fp)
 81306a8:	10c00017 	ldw	r3,0(r2)
 81306ac:	e0bffb17 	ldw	r2,-20(fp)
 81306b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 81306b4:	e0bffa17 	ldw	r2,-24(fp)
 81306b8:	10800017 	ldw	r2,0(r2)
 81306bc:	e0fffb17 	ldw	r3,-20(fp)
 81306c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 81306c4:	e0bffa17 	ldw	r2,-24(fp)
 81306c8:	e0fffb17 	ldw	r3,-20(fp)
 81306cc:	10c00015 	stw	r3,0(r2)
 81306d0:	e0bff817 	ldw	r2,-32(fp)
 81306d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 81306d8:	e0bff717 	ldw	r2,-36(fp)
 81306dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 81306e0:	0005883a 	mov	r2,zero
 81306e4:	00000306 	br	81306f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 81306e8:	00bffa84 	movi	r2,-22
 81306ec:	00000106 	br	81306f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 81306f0:	00bfde84 	movi	r2,-134
  }
}
 81306f4:	e037883a 	mov	sp,fp
 81306f8:	df000017 	ldw	fp,0(sp)
 81306fc:	dec00104 	addi	sp,sp,4
 8130700:	f800283a 	ret

08130704 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8130704:	deffff04 	addi	sp,sp,-4
 8130708:	df000015 	stw	fp,0(sp)
 813070c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8130710:	0001883a 	nop
 8130714:	e037883a 	mov	sp,fp
 8130718:	df000017 	ldw	fp,0(sp)
 813071c:	dec00104 	addi	sp,sp,4
 8130720:	f800283a 	ret

08130724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8130724:	defffe04 	addi	sp,sp,-8
 8130728:	dfc00115 	stw	ra,4(sp)
 813072c:	df000015 	stw	fp,0(sp)
 8130730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8130734:	d0a00a17 	ldw	r2,-32728(gp)
 8130738:	10000326 	beq	r2,zero,8130748 <alt_get_errno+0x24>
 813073c:	d0a00a17 	ldw	r2,-32728(gp)
 8130740:	103ee83a 	callr	r2
 8130744:	00000106 	br	813074c <alt_get_errno+0x28>
 8130748:	d0a6ae04 	addi	r2,gp,-25928
}
 813074c:	e037883a 	mov	sp,fp
 8130750:	dfc00117 	ldw	ra,4(sp)
 8130754:	df000017 	ldw	fp,0(sp)
 8130758:	dec00204 	addi	sp,sp,8
 813075c:	f800283a 	ret

08130760 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8130760:	defffa04 	addi	sp,sp,-24
 8130764:	dfc00515 	stw	ra,20(sp)
 8130768:	df000415 	stw	fp,16(sp)
 813076c:	df000404 	addi	fp,sp,16
 8130770:	e13ffe15 	stw	r4,-8(fp)
 8130774:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8130778:	e0bffe17 	ldw	r2,-8(fp)
 813077c:	10000326 	beq	r2,zero,813078c <alt_dev_llist_insert+0x2c>
 8130780:	e0bffe17 	ldw	r2,-8(fp)
 8130784:	10800217 	ldw	r2,8(r2)
 8130788:	1000061e 	bne	r2,zero,81307a4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 813078c:	81307240 	call	8130724 <alt_get_errno>
 8130790:	1007883a 	mov	r3,r2
 8130794:	00800584 	movi	r2,22
 8130798:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 813079c:	00bffa84 	movi	r2,-22
 81307a0:	00001306 	br	81307f0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 81307a4:	e0bffe17 	ldw	r2,-8(fp)
 81307a8:	e0ffff17 	ldw	r3,-4(fp)
 81307ac:	e0fffc15 	stw	r3,-16(fp)
 81307b0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 81307b4:	e0bffd17 	ldw	r2,-12(fp)
 81307b8:	e0fffc17 	ldw	r3,-16(fp)
 81307bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 81307c0:	e0bffc17 	ldw	r2,-16(fp)
 81307c4:	10c00017 	ldw	r3,0(r2)
 81307c8:	e0bffd17 	ldw	r2,-12(fp)
 81307cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 81307d0:	e0bffc17 	ldw	r2,-16(fp)
 81307d4:	10800017 	ldw	r2,0(r2)
 81307d8:	e0fffd17 	ldw	r3,-12(fp)
 81307dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 81307e0:	e0bffc17 	ldw	r2,-16(fp)
 81307e4:	e0fffd17 	ldw	r3,-12(fp)
 81307e8:	10c00015 	stw	r3,0(r2)

  return 0;  
 81307ec:	0005883a 	mov	r2,zero
}
 81307f0:	e037883a 	mov	sp,fp
 81307f4:	dfc00117 	ldw	ra,4(sp)
 81307f8:	df000017 	ldw	fp,0(sp)
 81307fc:	dec00204 	addi	sp,sp,8
 8130800:	f800283a 	ret

08130804 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8130804:	defffd04 	addi	sp,sp,-12
 8130808:	dfc00215 	stw	ra,8(sp)
 813080c:	df000115 	stw	fp,4(sp)
 8130810:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8130814:	008204f4 	movhi	r2,2067
 8130818:	1085ee04 	addi	r2,r2,6072
 813081c:	e0bfff15 	stw	r2,-4(fp)
 8130820:	00000606 	br	813083c <_do_ctors+0x38>
        (*ctor) (); 
 8130824:	e0bfff17 	ldw	r2,-4(fp)
 8130828:	10800017 	ldw	r2,0(r2)
 813082c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8130830:	e0bfff17 	ldw	r2,-4(fp)
 8130834:	10bfff04 	addi	r2,r2,-4
 8130838:	e0bfff15 	stw	r2,-4(fp)
 813083c:	e0ffff17 	ldw	r3,-4(fp)
 8130840:	008204f4 	movhi	r2,2067
 8130844:	1085ef04 	addi	r2,r2,6076
 8130848:	18bff62e 	bgeu	r3,r2,8130824 <__alt_data_end+0xfc130824>
        (*ctor) (); 
}
 813084c:	0001883a 	nop
 8130850:	e037883a 	mov	sp,fp
 8130854:	dfc00117 	ldw	ra,4(sp)
 8130858:	df000017 	ldw	fp,0(sp)
 813085c:	dec00204 	addi	sp,sp,8
 8130860:	f800283a 	ret

08130864 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8130864:	defffd04 	addi	sp,sp,-12
 8130868:	dfc00215 	stw	ra,8(sp)
 813086c:	df000115 	stw	fp,4(sp)
 8130870:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8130874:	008204f4 	movhi	r2,2067
 8130878:	1085ee04 	addi	r2,r2,6072
 813087c:	e0bfff15 	stw	r2,-4(fp)
 8130880:	00000606 	br	813089c <_do_dtors+0x38>
        (*dtor) (); 
 8130884:	e0bfff17 	ldw	r2,-4(fp)
 8130888:	10800017 	ldw	r2,0(r2)
 813088c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8130890:	e0bfff17 	ldw	r2,-4(fp)
 8130894:	10bfff04 	addi	r2,r2,-4
 8130898:	e0bfff15 	stw	r2,-4(fp)
 813089c:	e0ffff17 	ldw	r3,-4(fp)
 81308a0:	008204f4 	movhi	r2,2067
 81308a4:	1085ef04 	addi	r2,r2,6076
 81308a8:	18bff62e 	bgeu	r3,r2,8130884 <__alt_data_end+0xfc130884>
        (*dtor) (); 
}
 81308ac:	0001883a 	nop
 81308b0:	e037883a 	mov	sp,fp
 81308b4:	dfc00117 	ldw	ra,4(sp)
 81308b8:	df000017 	ldw	fp,0(sp)
 81308bc:	dec00204 	addi	sp,sp,8
 81308c0:	f800283a 	ret

081308c4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 81308c4:	deffff04 	addi	sp,sp,-4
 81308c8:	df000015 	stw	fp,0(sp)
 81308cc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 81308d0:	0001883a 	nop
 81308d4:	e037883a 	mov	sp,fp
 81308d8:	df000017 	ldw	fp,0(sp)
 81308dc:	dec00104 	addi	sp,sp,4
 81308e0:	f800283a 	ret

081308e4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 81308e4:	defff904 	addi	sp,sp,-28
 81308e8:	dfc00615 	stw	ra,24(sp)
 81308ec:	df000515 	stw	fp,20(sp)
 81308f0:	df000504 	addi	fp,sp,20
 81308f4:	e13ffc15 	stw	r4,-16(fp)
 81308f8:	e17ffd15 	stw	r5,-12(fp)
 81308fc:	e1bffe15 	stw	r6,-8(fp)
 8130900:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8130904:	e0800217 	ldw	r2,8(fp)
 8130908:	d8800015 	stw	r2,0(sp)
 813090c:	e1ffff17 	ldw	r7,-4(fp)
 8130910:	e1bffe17 	ldw	r6,-8(fp)
 8130914:	e17ffd17 	ldw	r5,-12(fp)
 8130918:	e13ffc17 	ldw	r4,-16(fp)
 813091c:	8130a940 	call	8130a94 <alt_iic_isr_register>
}  
 8130920:	e037883a 	mov	sp,fp
 8130924:	dfc00117 	ldw	ra,4(sp)
 8130928:	df000017 	ldw	fp,0(sp)
 813092c:	dec00204 	addi	sp,sp,8
 8130930:	f800283a 	ret

08130934 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8130934:	defff904 	addi	sp,sp,-28
 8130938:	df000615 	stw	fp,24(sp)
 813093c:	df000604 	addi	fp,sp,24
 8130940:	e13ffe15 	stw	r4,-8(fp)
 8130944:	e17fff15 	stw	r5,-4(fp)
 8130948:	e0bfff17 	ldw	r2,-4(fp)
 813094c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130950:	0005303a 	rdctl	r2,status
 8130954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130958:	e0fffb17 	ldw	r3,-20(fp)
 813095c:	00bfff84 	movi	r2,-2
 8130960:	1884703a 	and	r2,r3,r2
 8130964:	1001703a 	wrctl	status,r2
  
  return context;
 8130968:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 813096c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8130970:	00c00044 	movi	r3,1
 8130974:	e0bffa17 	ldw	r2,-24(fp)
 8130978:	1884983a 	sll	r2,r3,r2
 813097c:	1007883a 	mov	r3,r2
 8130980:	d0a6b217 	ldw	r2,-25912(gp)
 8130984:	1884b03a 	or	r2,r3,r2
 8130988:	d0a6b215 	stw	r2,-25912(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 813098c:	d0a6b217 	ldw	r2,-25912(gp)
 8130990:	100170fa 	wrctl	ienable,r2
 8130994:	e0bffc17 	ldw	r2,-16(fp)
 8130998:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 813099c:	e0bffd17 	ldw	r2,-12(fp)
 81309a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 81309a4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 81309a8:	0001883a 	nop
}
 81309ac:	e037883a 	mov	sp,fp
 81309b0:	df000017 	ldw	fp,0(sp)
 81309b4:	dec00104 	addi	sp,sp,4
 81309b8:	f800283a 	ret

081309bc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 81309bc:	defff904 	addi	sp,sp,-28
 81309c0:	df000615 	stw	fp,24(sp)
 81309c4:	df000604 	addi	fp,sp,24
 81309c8:	e13ffe15 	stw	r4,-8(fp)
 81309cc:	e17fff15 	stw	r5,-4(fp)
 81309d0:	e0bfff17 	ldw	r2,-4(fp)
 81309d4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 81309d8:	0005303a 	rdctl	r2,status
 81309dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 81309e0:	e0fffb17 	ldw	r3,-20(fp)
 81309e4:	00bfff84 	movi	r2,-2
 81309e8:	1884703a 	and	r2,r3,r2
 81309ec:	1001703a 	wrctl	status,r2
  
  return context;
 81309f0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 81309f4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 81309f8:	00c00044 	movi	r3,1
 81309fc:	e0bffa17 	ldw	r2,-24(fp)
 8130a00:	1884983a 	sll	r2,r3,r2
 8130a04:	0084303a 	nor	r2,zero,r2
 8130a08:	1007883a 	mov	r3,r2
 8130a0c:	d0a6b217 	ldw	r2,-25912(gp)
 8130a10:	1884703a 	and	r2,r3,r2
 8130a14:	d0a6b215 	stw	r2,-25912(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8130a18:	d0a6b217 	ldw	r2,-25912(gp)
 8130a1c:	100170fa 	wrctl	ienable,r2
 8130a20:	e0bffc17 	ldw	r2,-16(fp)
 8130a24:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130a28:	e0bffd17 	ldw	r2,-12(fp)
 8130a2c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8130a30:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8130a34:	0001883a 	nop
}
 8130a38:	e037883a 	mov	sp,fp
 8130a3c:	df000017 	ldw	fp,0(sp)
 8130a40:	dec00104 	addi	sp,sp,4
 8130a44:	f800283a 	ret

08130a48 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8130a48:	defffc04 	addi	sp,sp,-16
 8130a4c:	df000315 	stw	fp,12(sp)
 8130a50:	df000304 	addi	fp,sp,12
 8130a54:	e13ffe15 	stw	r4,-8(fp)
 8130a58:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8130a5c:	000530fa 	rdctl	r2,ienable
 8130a60:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8130a64:	00c00044 	movi	r3,1
 8130a68:	e0bfff17 	ldw	r2,-4(fp)
 8130a6c:	1884983a 	sll	r2,r3,r2
 8130a70:	1007883a 	mov	r3,r2
 8130a74:	e0bffd17 	ldw	r2,-12(fp)
 8130a78:	1884703a 	and	r2,r3,r2
 8130a7c:	1004c03a 	cmpne	r2,r2,zero
 8130a80:	10803fcc 	andi	r2,r2,255
}
 8130a84:	e037883a 	mov	sp,fp
 8130a88:	df000017 	ldw	fp,0(sp)
 8130a8c:	dec00104 	addi	sp,sp,4
 8130a90:	f800283a 	ret

08130a94 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8130a94:	defff504 	addi	sp,sp,-44
 8130a98:	dfc00a15 	stw	ra,40(sp)
 8130a9c:	df000915 	stw	fp,36(sp)
 8130aa0:	df000904 	addi	fp,sp,36
 8130aa4:	e13ffc15 	stw	r4,-16(fp)
 8130aa8:	e17ffd15 	stw	r5,-12(fp)
 8130aac:	e1bffe15 	stw	r6,-8(fp)
 8130ab0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8130ab4:	00bffa84 	movi	r2,-22
 8130ab8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8130abc:	e0bffd17 	ldw	r2,-12(fp)
 8130ac0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8130ac4:	e0bff817 	ldw	r2,-32(fp)
 8130ac8:	10800808 	cmpgei	r2,r2,32
 8130acc:	1000271e 	bne	r2,zero,8130b6c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130ad0:	0005303a 	rdctl	r2,status
 8130ad4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130ad8:	e0fffb17 	ldw	r3,-20(fp)
 8130adc:	00bfff84 	movi	r2,-2
 8130ae0:	1884703a 	and	r2,r3,r2
 8130ae4:	1001703a 	wrctl	status,r2
  
  return context;
 8130ae8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8130aec:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8130af0:	008204f4 	movhi	r2,2067
 8130af4:	10935204 	addi	r2,r2,19784
 8130af8:	e0fff817 	ldw	r3,-32(fp)
 8130afc:	180690fa 	slli	r3,r3,3
 8130b00:	10c5883a 	add	r2,r2,r3
 8130b04:	e0fffe17 	ldw	r3,-8(fp)
 8130b08:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8130b0c:	008204f4 	movhi	r2,2067
 8130b10:	10935204 	addi	r2,r2,19784
 8130b14:	e0fff817 	ldw	r3,-32(fp)
 8130b18:	180690fa 	slli	r3,r3,3
 8130b1c:	10c5883a 	add	r2,r2,r3
 8130b20:	10800104 	addi	r2,r2,4
 8130b24:	e0ffff17 	ldw	r3,-4(fp)
 8130b28:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8130b2c:	e0bffe17 	ldw	r2,-8(fp)
 8130b30:	10000526 	beq	r2,zero,8130b48 <alt_iic_isr_register+0xb4>
 8130b34:	e0bff817 	ldw	r2,-32(fp)
 8130b38:	100b883a 	mov	r5,r2
 8130b3c:	e13ffc17 	ldw	r4,-16(fp)
 8130b40:	81309340 	call	8130934 <alt_ic_irq_enable>
 8130b44:	00000406 	br	8130b58 <alt_iic_isr_register+0xc4>
 8130b48:	e0bff817 	ldw	r2,-32(fp)
 8130b4c:	100b883a 	mov	r5,r2
 8130b50:	e13ffc17 	ldw	r4,-16(fp)
 8130b54:	81309bc0 	call	81309bc <alt_ic_irq_disable>
 8130b58:	e0bff715 	stw	r2,-36(fp)
 8130b5c:	e0bffa17 	ldw	r2,-24(fp)
 8130b60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130b64:	e0bff917 	ldw	r2,-28(fp)
 8130b68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8130b6c:	e0bff717 	ldw	r2,-36(fp)
}
 8130b70:	e037883a 	mov	sp,fp
 8130b74:	dfc00117 	ldw	ra,4(sp)
 8130b78:	df000017 	ldw	fp,0(sp)
 8130b7c:	dec00204 	addi	sp,sp,8
 8130b80:	f800283a 	ret

08130b84 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8130b84:	defff804 	addi	sp,sp,-32
 8130b88:	dfc00715 	stw	ra,28(sp)
 8130b8c:	df000615 	stw	fp,24(sp)
 8130b90:	dc000515 	stw	r16,20(sp)
 8130b94:	df000604 	addi	fp,sp,24
 8130b98:	e13ffb15 	stw	r4,-20(fp)
 8130b9c:	e17ffc15 	stw	r5,-16(fp)
 8130ba0:	e1bffd15 	stw	r6,-12(fp)
 8130ba4:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8130ba8:	e1bffe17 	ldw	r6,-8(fp)
 8130bac:	e17ffd17 	ldw	r5,-12(fp)
 8130bb0:	e13ffc17 	ldw	r4,-16(fp)
 8130bb4:	8130e0c0 	call	8130e0c <open>
 8130bb8:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8130bbc:	e0bffa17 	ldw	r2,-24(fp)
 8130bc0:	10002216 	blt	r2,zero,8130c4c <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8130bc4:	040204f4 	movhi	r16,2067
 8130bc8:	84081a04 	addi	r16,r16,8296
 8130bcc:	e0bffa17 	ldw	r2,-24(fp)
 8130bd0:	01400304 	movi	r5,12
 8130bd4:	1009883a 	mov	r4,r2
 8130bd8:	812c2080 	call	812c208 <__mulsi3>
 8130bdc:	8085883a 	add	r2,r16,r2
 8130be0:	10c00017 	ldw	r3,0(r2)
 8130be4:	e0bffb17 	ldw	r2,-20(fp)
 8130be8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8130bec:	040204f4 	movhi	r16,2067
 8130bf0:	84081a04 	addi	r16,r16,8296
 8130bf4:	e0bffa17 	ldw	r2,-24(fp)
 8130bf8:	01400304 	movi	r5,12
 8130bfc:	1009883a 	mov	r4,r2
 8130c00:	812c2080 	call	812c208 <__mulsi3>
 8130c04:	8085883a 	add	r2,r16,r2
 8130c08:	10800104 	addi	r2,r2,4
 8130c0c:	10c00017 	ldw	r3,0(r2)
 8130c10:	e0bffb17 	ldw	r2,-20(fp)
 8130c14:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8130c18:	040204f4 	movhi	r16,2067
 8130c1c:	84081a04 	addi	r16,r16,8296
 8130c20:	e0bffa17 	ldw	r2,-24(fp)
 8130c24:	01400304 	movi	r5,12
 8130c28:	1009883a 	mov	r4,r2
 8130c2c:	812c2080 	call	812c208 <__mulsi3>
 8130c30:	8085883a 	add	r2,r16,r2
 8130c34:	10800204 	addi	r2,r2,8
 8130c38:	10c00017 	ldw	r3,0(r2)
 8130c3c:	e0bffb17 	ldw	r2,-20(fp)
 8130c40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8130c44:	e13ffa17 	ldw	r4,-24(fp)
 8130c48:	812f7380 	call	812f738 <alt_release_fd>
  }
} 
 8130c4c:	0001883a 	nop
 8130c50:	e6ffff04 	addi	sp,fp,-4
 8130c54:	dfc00217 	ldw	ra,8(sp)
 8130c58:	df000117 	ldw	fp,4(sp)
 8130c5c:	dc000017 	ldw	r16,0(sp)
 8130c60:	dec00304 	addi	sp,sp,12
 8130c64:	f800283a 	ret

08130c68 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8130c68:	defffb04 	addi	sp,sp,-20
 8130c6c:	dfc00415 	stw	ra,16(sp)
 8130c70:	df000315 	stw	fp,12(sp)
 8130c74:	df000304 	addi	fp,sp,12
 8130c78:	e13ffd15 	stw	r4,-12(fp)
 8130c7c:	e17ffe15 	stw	r5,-8(fp)
 8130c80:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8130c84:	01c07fc4 	movi	r7,511
 8130c88:	01800044 	movi	r6,1
 8130c8c:	e17ffd17 	ldw	r5,-12(fp)
 8130c90:	010204f4 	movhi	r4,2067
 8130c94:	21081d04 	addi	r4,r4,8308
 8130c98:	8130b840 	call	8130b84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8130c9c:	01c07fc4 	movi	r7,511
 8130ca0:	000d883a 	mov	r6,zero
 8130ca4:	e17ffe17 	ldw	r5,-8(fp)
 8130ca8:	010204f4 	movhi	r4,2067
 8130cac:	21081a04 	addi	r4,r4,8296
 8130cb0:	8130b840 	call	8130b84 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8130cb4:	01c07fc4 	movi	r7,511
 8130cb8:	01800044 	movi	r6,1
 8130cbc:	e17fff17 	ldw	r5,-4(fp)
 8130cc0:	010204f4 	movhi	r4,2067
 8130cc4:	21082004 	addi	r4,r4,8320
 8130cc8:	8130b840 	call	8130b84 <alt_open_fd>
}  
 8130ccc:	0001883a 	nop
 8130cd0:	e037883a 	mov	sp,fp
 8130cd4:	dfc00117 	ldw	ra,4(sp)
 8130cd8:	df000017 	ldw	fp,0(sp)
 8130cdc:	dec00204 	addi	sp,sp,8
 8130ce0:	f800283a 	ret

08130ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8130ce4:	defffe04 	addi	sp,sp,-8
 8130ce8:	dfc00115 	stw	ra,4(sp)
 8130cec:	df000015 	stw	fp,0(sp)
 8130cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8130cf4:	d0a00a17 	ldw	r2,-32728(gp)
 8130cf8:	10000326 	beq	r2,zero,8130d08 <alt_get_errno+0x24>
 8130cfc:	d0a00a17 	ldw	r2,-32728(gp)
 8130d00:	103ee83a 	callr	r2
 8130d04:	00000106 	br	8130d0c <alt_get_errno+0x28>
 8130d08:	d0a6ae04 	addi	r2,gp,-25928
}
 8130d0c:	e037883a 	mov	sp,fp
 8130d10:	dfc00117 	ldw	ra,4(sp)
 8130d14:	df000017 	ldw	fp,0(sp)
 8130d18:	dec00204 	addi	sp,sp,8
 8130d1c:	f800283a 	ret

08130d20 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8130d20:	defffb04 	addi	sp,sp,-20
 8130d24:	dfc00415 	stw	ra,16(sp)
 8130d28:	df000315 	stw	fp,12(sp)
 8130d2c:	dc000215 	stw	r16,8(sp)
 8130d30:	df000304 	addi	fp,sp,12
 8130d34:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8130d38:	e0bffe17 	ldw	r2,-8(fp)
 8130d3c:	10800217 	ldw	r2,8(r2)
 8130d40:	10d00034 	orhi	r3,r2,16384
 8130d44:	e0bffe17 	ldw	r2,-8(fp)
 8130d48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8130d4c:	e03ffd15 	stw	zero,-12(fp)
 8130d50:	00002306 	br	8130de0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8130d54:	040204f4 	movhi	r16,2067
 8130d58:	84081a04 	addi	r16,r16,8296
 8130d5c:	e0bffd17 	ldw	r2,-12(fp)
 8130d60:	01400304 	movi	r5,12
 8130d64:	1009883a 	mov	r4,r2
 8130d68:	812c2080 	call	812c208 <__mulsi3>
 8130d6c:	8085883a 	add	r2,r16,r2
 8130d70:	10c00017 	ldw	r3,0(r2)
 8130d74:	e0bffe17 	ldw	r2,-8(fp)
 8130d78:	10800017 	ldw	r2,0(r2)
 8130d7c:	1880151e 	bne	r3,r2,8130dd4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8130d80:	040204f4 	movhi	r16,2067
 8130d84:	84081a04 	addi	r16,r16,8296
 8130d88:	e0bffd17 	ldw	r2,-12(fp)
 8130d8c:	01400304 	movi	r5,12
 8130d90:	1009883a 	mov	r4,r2
 8130d94:	812c2080 	call	812c208 <__mulsi3>
 8130d98:	8085883a 	add	r2,r16,r2
 8130d9c:	10800204 	addi	r2,r2,8
 8130da0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8130da4:	10000b0e 	bge	r2,zero,8130dd4 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8130da8:	01400304 	movi	r5,12
 8130dac:	e13ffd17 	ldw	r4,-12(fp)
 8130db0:	812c2080 	call	812c208 <__mulsi3>
 8130db4:	1007883a 	mov	r3,r2
 8130db8:	008204f4 	movhi	r2,2067
 8130dbc:	10881a04 	addi	r2,r2,8296
 8130dc0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8130dc4:	e0bffe17 	ldw	r2,-8(fp)
 8130dc8:	18800226 	beq	r3,r2,8130dd4 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8130dcc:	00bffcc4 	movi	r2,-13
 8130dd0:	00000806 	br	8130df4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8130dd4:	e0bffd17 	ldw	r2,-12(fp)
 8130dd8:	10800044 	addi	r2,r2,1
 8130ddc:	e0bffd15 	stw	r2,-12(fp)
 8130de0:	d0a00917 	ldw	r2,-32732(gp)
 8130de4:	1007883a 	mov	r3,r2
 8130de8:	e0bffd17 	ldw	r2,-12(fp)
 8130dec:	18bfd92e 	bgeu	r3,r2,8130d54 <__alt_data_end+0xfc130d54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8130df0:	0005883a 	mov	r2,zero
}
 8130df4:	e6ffff04 	addi	sp,fp,-4
 8130df8:	dfc00217 	ldw	ra,8(sp)
 8130dfc:	df000117 	ldw	fp,4(sp)
 8130e00:	dc000017 	ldw	r16,0(sp)
 8130e04:	dec00304 	addi	sp,sp,12
 8130e08:	f800283a 	ret

08130e0c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8130e0c:	defff604 	addi	sp,sp,-40
 8130e10:	dfc00915 	stw	ra,36(sp)
 8130e14:	df000815 	stw	fp,32(sp)
 8130e18:	df000804 	addi	fp,sp,32
 8130e1c:	e13ffd15 	stw	r4,-12(fp)
 8130e20:	e17ffe15 	stw	r5,-8(fp)
 8130e24:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8130e28:	00bfffc4 	movi	r2,-1
 8130e2c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8130e30:	00bffb44 	movi	r2,-19
 8130e34:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8130e38:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8130e3c:	d1600704 	addi	r5,gp,-32740
 8130e40:	e13ffd17 	ldw	r4,-12(fp)
 8130e44:	81311300 	call	8131130 <alt_find_dev>
 8130e48:	e0bff815 	stw	r2,-32(fp)
 8130e4c:	e0bff817 	ldw	r2,-32(fp)
 8130e50:	1000051e 	bne	r2,zero,8130e68 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8130e54:	e13ffd17 	ldw	r4,-12(fp)
 8130e58:	81311c00 	call	81311c0 <alt_find_file>
 8130e5c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8130e60:	00800044 	movi	r2,1
 8130e64:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8130e68:	e0bff817 	ldw	r2,-32(fp)
 8130e6c:	10002b26 	beq	r2,zero,8130f1c <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8130e70:	e13ff817 	ldw	r4,-32(fp)
 8130e74:	81312c80 	call	81312c8 <alt_get_fd>
 8130e78:	e0bff915 	stw	r2,-28(fp)
 8130e7c:	e0bff917 	ldw	r2,-28(fp)
 8130e80:	1000030e 	bge	r2,zero,8130e90 <open+0x84>
    {
      status = index;
 8130e84:	e0bff917 	ldw	r2,-28(fp)
 8130e88:	e0bffa15 	stw	r2,-24(fp)
 8130e8c:	00002506 	br	8130f24 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8130e90:	01400304 	movi	r5,12
 8130e94:	e13ff917 	ldw	r4,-28(fp)
 8130e98:	812c2080 	call	812c208 <__mulsi3>
 8130e9c:	1007883a 	mov	r3,r2
 8130ea0:	008204f4 	movhi	r2,2067
 8130ea4:	10881a04 	addi	r2,r2,8296
 8130ea8:	1885883a 	add	r2,r3,r2
 8130eac:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8130eb0:	e0fffe17 	ldw	r3,-8(fp)
 8130eb4:	00900034 	movhi	r2,16384
 8130eb8:	10bfffc4 	addi	r2,r2,-1
 8130ebc:	1886703a 	and	r3,r3,r2
 8130ec0:	e0bffc17 	ldw	r2,-16(fp)
 8130ec4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8130ec8:	e0bffb17 	ldw	r2,-20(fp)
 8130ecc:	1000051e 	bne	r2,zero,8130ee4 <open+0xd8>
 8130ed0:	e13ffc17 	ldw	r4,-16(fp)
 8130ed4:	8130d200 	call	8130d20 <alt_file_locked>
 8130ed8:	e0bffa15 	stw	r2,-24(fp)
 8130edc:	e0bffa17 	ldw	r2,-24(fp)
 8130ee0:	10001016 	blt	r2,zero,8130f24 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8130ee4:	e0bff817 	ldw	r2,-32(fp)
 8130ee8:	10800317 	ldw	r2,12(r2)
 8130eec:	10000826 	beq	r2,zero,8130f10 <open+0x104>
 8130ef0:	e0bff817 	ldw	r2,-32(fp)
 8130ef4:	10800317 	ldw	r2,12(r2)
 8130ef8:	e1ffff17 	ldw	r7,-4(fp)
 8130efc:	e1bffe17 	ldw	r6,-8(fp)
 8130f00:	e17ffd17 	ldw	r5,-12(fp)
 8130f04:	e13ffc17 	ldw	r4,-16(fp)
 8130f08:	103ee83a 	callr	r2
 8130f0c:	00000106 	br	8130f14 <open+0x108>
 8130f10:	0005883a 	mov	r2,zero
 8130f14:	e0bffa15 	stw	r2,-24(fp)
 8130f18:	00000206 	br	8130f24 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8130f1c:	00bffb44 	movi	r2,-19
 8130f20:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8130f24:	e0bffa17 	ldw	r2,-24(fp)
 8130f28:	1000090e 	bge	r2,zero,8130f50 <open+0x144>
  {
    alt_release_fd (index);  
 8130f2c:	e13ff917 	ldw	r4,-28(fp)
 8130f30:	812f7380 	call	812f738 <alt_release_fd>
    ALT_ERRNO = -status;
 8130f34:	8130ce40 	call	8130ce4 <alt_get_errno>
 8130f38:	1007883a 	mov	r3,r2
 8130f3c:	e0bffa17 	ldw	r2,-24(fp)
 8130f40:	0085c83a 	sub	r2,zero,r2
 8130f44:	18800015 	stw	r2,0(r3)
    return -1;
 8130f48:	00bfffc4 	movi	r2,-1
 8130f4c:	00000106 	br	8130f54 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 8130f50:	e0bff917 	ldw	r2,-28(fp)
}
 8130f54:	e037883a 	mov	sp,fp
 8130f58:	dfc00117 	ldw	ra,4(sp)
 8130f5c:	df000017 	ldw	fp,0(sp)
 8130f60:	dec00204 	addi	sp,sp,8
 8130f64:	f800283a 	ret

08130f68 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8130f68:	defffa04 	addi	sp,sp,-24
 8130f6c:	df000515 	stw	fp,20(sp)
 8130f70:	df000504 	addi	fp,sp,20
 8130f74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8130f78:	0005303a 	rdctl	r2,status
 8130f7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8130f80:	e0fffc17 	ldw	r3,-16(fp)
 8130f84:	00bfff84 	movi	r2,-2
 8130f88:	1884703a 	and	r2,r3,r2
 8130f8c:	1001703a 	wrctl	status,r2
  
  return context;
 8130f90:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8130f94:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8130f98:	e0bfff17 	ldw	r2,-4(fp)
 8130f9c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8130fa0:	e0bffd17 	ldw	r2,-12(fp)
 8130fa4:	10800017 	ldw	r2,0(r2)
 8130fa8:	e0fffd17 	ldw	r3,-12(fp)
 8130fac:	18c00117 	ldw	r3,4(r3)
 8130fb0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8130fb4:	e0bffd17 	ldw	r2,-12(fp)
 8130fb8:	10800117 	ldw	r2,4(r2)
 8130fbc:	e0fffd17 	ldw	r3,-12(fp)
 8130fc0:	18c00017 	ldw	r3,0(r3)
 8130fc4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8130fc8:	e0bffd17 	ldw	r2,-12(fp)
 8130fcc:	e0fffd17 	ldw	r3,-12(fp)
 8130fd0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8130fd4:	e0bffd17 	ldw	r2,-12(fp)
 8130fd8:	e0fffd17 	ldw	r3,-12(fp)
 8130fdc:	10c00015 	stw	r3,0(r2)
 8130fe0:	e0bffb17 	ldw	r2,-20(fp)
 8130fe4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8130fe8:	e0bffe17 	ldw	r2,-8(fp)
 8130fec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8130ff0:	0001883a 	nop
 8130ff4:	e037883a 	mov	sp,fp
 8130ff8:	df000017 	ldw	fp,0(sp)
 8130ffc:	dec00104 	addi	sp,sp,4
 8131000:	f800283a 	ret

08131004 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8131004:	defffb04 	addi	sp,sp,-20
 8131008:	dfc00415 	stw	ra,16(sp)
 813100c:	df000315 	stw	fp,12(sp)
 8131010:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8131014:	d0a00d17 	ldw	r2,-32716(gp)
 8131018:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 813101c:	d0a6b417 	ldw	r2,-25904(gp)
 8131020:	10800044 	addi	r2,r2,1
 8131024:	d0a6b415 	stw	r2,-25904(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8131028:	00002e06 	br	81310e4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 813102c:	e0bffd17 	ldw	r2,-12(fp)
 8131030:	10800017 	ldw	r2,0(r2)
 8131034:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8131038:	e0bffd17 	ldw	r2,-12(fp)
 813103c:	10800403 	ldbu	r2,16(r2)
 8131040:	10803fcc 	andi	r2,r2,255
 8131044:	10000426 	beq	r2,zero,8131058 <alt_tick+0x54>
 8131048:	d0a6b417 	ldw	r2,-25904(gp)
 813104c:	1000021e 	bne	r2,zero,8131058 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8131050:	e0bffd17 	ldw	r2,-12(fp)
 8131054:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8131058:	e0bffd17 	ldw	r2,-12(fp)
 813105c:	10800217 	ldw	r2,8(r2)
 8131060:	d0e6b417 	ldw	r3,-25904(gp)
 8131064:	18801d36 	bltu	r3,r2,81310dc <alt_tick+0xd8>
 8131068:	e0bffd17 	ldw	r2,-12(fp)
 813106c:	10800403 	ldbu	r2,16(r2)
 8131070:	10803fcc 	andi	r2,r2,255
 8131074:	1000191e 	bne	r2,zero,81310dc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8131078:	e0bffd17 	ldw	r2,-12(fp)
 813107c:	10800317 	ldw	r2,12(r2)
 8131080:	e0fffd17 	ldw	r3,-12(fp)
 8131084:	18c00517 	ldw	r3,20(r3)
 8131088:	1809883a 	mov	r4,r3
 813108c:	103ee83a 	callr	r2
 8131090:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8131094:	e0bfff17 	ldw	r2,-4(fp)
 8131098:	1000031e 	bne	r2,zero,81310a8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 813109c:	e13ffd17 	ldw	r4,-12(fp)
 81310a0:	8130f680 	call	8130f68 <alt_alarm_stop>
 81310a4:	00000d06 	br	81310dc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 81310a8:	e0bffd17 	ldw	r2,-12(fp)
 81310ac:	10c00217 	ldw	r3,8(r2)
 81310b0:	e0bfff17 	ldw	r2,-4(fp)
 81310b4:	1887883a 	add	r3,r3,r2
 81310b8:	e0bffd17 	ldw	r2,-12(fp)
 81310bc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 81310c0:	e0bffd17 	ldw	r2,-12(fp)
 81310c4:	10c00217 	ldw	r3,8(r2)
 81310c8:	d0a6b417 	ldw	r2,-25904(gp)
 81310cc:	1880032e 	bgeu	r3,r2,81310dc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 81310d0:	e0bffd17 	ldw	r2,-12(fp)
 81310d4:	00c00044 	movi	r3,1
 81310d8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 81310dc:	e0bffe17 	ldw	r2,-8(fp)
 81310e0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 81310e4:	e0fffd17 	ldw	r3,-12(fp)
 81310e8:	d0a00d04 	addi	r2,gp,-32716
 81310ec:	18bfcf1e 	bne	r3,r2,813102c <__alt_data_end+0xfc13102c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 81310f0:	0001883a 	nop
}
 81310f4:	0001883a 	nop
 81310f8:	e037883a 	mov	sp,fp
 81310fc:	dfc00117 	ldw	ra,4(sp)
 8131100:	df000017 	ldw	fp,0(sp)
 8131104:	dec00204 	addi	sp,sp,8
 8131108:	f800283a 	ret

0813110c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 813110c:	deffff04 	addi	sp,sp,-4
 8131110:	df000015 	stw	fp,0(sp)
 8131114:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8131118:	000170fa 	wrctl	ienable,zero
}
 813111c:	0001883a 	nop
 8131120:	e037883a 	mov	sp,fp
 8131124:	df000017 	ldw	fp,0(sp)
 8131128:	dec00104 	addi	sp,sp,4
 813112c:	f800283a 	ret

08131130 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8131130:	defffa04 	addi	sp,sp,-24
 8131134:	dfc00515 	stw	ra,20(sp)
 8131138:	df000415 	stw	fp,16(sp)
 813113c:	df000404 	addi	fp,sp,16
 8131140:	e13ffe15 	stw	r4,-8(fp)
 8131144:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8131148:	e0bfff17 	ldw	r2,-4(fp)
 813114c:	10800017 	ldw	r2,0(r2)
 8131150:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8131154:	e13ffe17 	ldw	r4,-8(fp)
 8131158:	812c3040 	call	812c304 <strlen>
 813115c:	10800044 	addi	r2,r2,1
 8131160:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8131164:	00000d06 	br	813119c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8131168:	e0bffc17 	ldw	r2,-16(fp)
 813116c:	10800217 	ldw	r2,8(r2)
 8131170:	e0fffd17 	ldw	r3,-12(fp)
 8131174:	180d883a 	mov	r6,r3
 8131178:	e17ffe17 	ldw	r5,-8(fp)
 813117c:	1009883a 	mov	r4,r2
 8131180:	81314740 	call	8131474 <memcmp>
 8131184:	1000021e 	bne	r2,zero,8131190 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8131188:	e0bffc17 	ldw	r2,-16(fp)
 813118c:	00000706 	br	81311ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8131190:	e0bffc17 	ldw	r2,-16(fp)
 8131194:	10800017 	ldw	r2,0(r2)
 8131198:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 813119c:	e0fffc17 	ldw	r3,-16(fp)
 81311a0:	e0bfff17 	ldw	r2,-4(fp)
 81311a4:	18bff01e 	bne	r3,r2,8131168 <__alt_data_end+0xfc131168>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 81311a8:	0005883a 	mov	r2,zero
}
 81311ac:	e037883a 	mov	sp,fp
 81311b0:	dfc00117 	ldw	ra,4(sp)
 81311b4:	df000017 	ldw	fp,0(sp)
 81311b8:	dec00204 	addi	sp,sp,8
 81311bc:	f800283a 	ret

081311c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 81311c0:	defffb04 	addi	sp,sp,-20
 81311c4:	dfc00415 	stw	ra,16(sp)
 81311c8:	df000315 	stw	fp,12(sp)
 81311cc:	df000304 	addi	fp,sp,12
 81311d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 81311d4:	d0a00517 	ldw	r2,-32748(gp)
 81311d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 81311dc:	00003106 	br	81312a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 81311e0:	e0bffd17 	ldw	r2,-12(fp)
 81311e4:	10800217 	ldw	r2,8(r2)
 81311e8:	1009883a 	mov	r4,r2
 81311ec:	812c3040 	call	812c304 <strlen>
 81311f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 81311f4:	e0bffd17 	ldw	r2,-12(fp)
 81311f8:	10c00217 	ldw	r3,8(r2)
 81311fc:	e0bffe17 	ldw	r2,-8(fp)
 8131200:	10bfffc4 	addi	r2,r2,-1
 8131204:	1885883a 	add	r2,r3,r2
 8131208:	10800003 	ldbu	r2,0(r2)
 813120c:	10803fcc 	andi	r2,r2,255
 8131210:	1080201c 	xori	r2,r2,128
 8131214:	10bfe004 	addi	r2,r2,-128
 8131218:	10800bd8 	cmpnei	r2,r2,47
 813121c:	1000031e 	bne	r2,zero,813122c <alt_find_file+0x6c>
    {
      len -= 1;
 8131220:	e0bffe17 	ldw	r2,-8(fp)
 8131224:	10bfffc4 	addi	r2,r2,-1
 8131228:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 813122c:	e0bffe17 	ldw	r2,-8(fp)
 8131230:	e0ffff17 	ldw	r3,-4(fp)
 8131234:	1885883a 	add	r2,r3,r2
 8131238:	10800003 	ldbu	r2,0(r2)
 813123c:	10803fcc 	andi	r2,r2,255
 8131240:	1080201c 	xori	r2,r2,128
 8131244:	10bfe004 	addi	r2,r2,-128
 8131248:	10800be0 	cmpeqi	r2,r2,47
 813124c:	1000081e 	bne	r2,zero,8131270 <alt_find_file+0xb0>
 8131250:	e0bffe17 	ldw	r2,-8(fp)
 8131254:	e0ffff17 	ldw	r3,-4(fp)
 8131258:	1885883a 	add	r2,r3,r2
 813125c:	10800003 	ldbu	r2,0(r2)
 8131260:	10803fcc 	andi	r2,r2,255
 8131264:	1080201c 	xori	r2,r2,128
 8131268:	10bfe004 	addi	r2,r2,-128
 813126c:	10000a1e 	bne	r2,zero,8131298 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8131270:	e0bffd17 	ldw	r2,-12(fp)
 8131274:	10800217 	ldw	r2,8(r2)
 8131278:	e0fffe17 	ldw	r3,-8(fp)
 813127c:	180d883a 	mov	r6,r3
 8131280:	e17fff17 	ldw	r5,-4(fp)
 8131284:	1009883a 	mov	r4,r2
 8131288:	81314740 	call	8131474 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 813128c:	1000021e 	bne	r2,zero,8131298 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8131290:	e0bffd17 	ldw	r2,-12(fp)
 8131294:	00000706 	br	81312b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8131298:	e0bffd17 	ldw	r2,-12(fp)
 813129c:	10800017 	ldw	r2,0(r2)
 81312a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 81312a4:	e0fffd17 	ldw	r3,-12(fp)
 81312a8:	d0a00504 	addi	r2,gp,-32748
 81312ac:	18bfcc1e 	bne	r3,r2,81311e0 <__alt_data_end+0xfc1311e0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 81312b0:	0005883a 	mov	r2,zero
}
 81312b4:	e037883a 	mov	sp,fp
 81312b8:	dfc00117 	ldw	ra,4(sp)
 81312bc:	df000017 	ldw	fp,0(sp)
 81312c0:	dec00204 	addi	sp,sp,8
 81312c4:	f800283a 	ret

081312c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 81312c8:	defffa04 	addi	sp,sp,-24
 81312cc:	dfc00515 	stw	ra,20(sp)
 81312d0:	df000415 	stw	fp,16(sp)
 81312d4:	dc000315 	stw	r16,12(sp)
 81312d8:	df000404 	addi	fp,sp,16
 81312dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 81312e0:	00bffa04 	movi	r2,-24
 81312e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 81312e8:	e03ffc15 	stw	zero,-16(fp)
 81312ec:	00001d06 	br	8131364 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 81312f0:	040204f4 	movhi	r16,2067
 81312f4:	84081a04 	addi	r16,r16,8296
 81312f8:	e0bffc17 	ldw	r2,-16(fp)
 81312fc:	01400304 	movi	r5,12
 8131300:	1009883a 	mov	r4,r2
 8131304:	812c2080 	call	812c208 <__mulsi3>
 8131308:	8085883a 	add	r2,r16,r2
 813130c:	10800017 	ldw	r2,0(r2)
 8131310:	1000111e 	bne	r2,zero,8131358 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 8131314:	040204f4 	movhi	r16,2067
 8131318:	84081a04 	addi	r16,r16,8296
 813131c:	e0bffc17 	ldw	r2,-16(fp)
 8131320:	01400304 	movi	r5,12
 8131324:	1009883a 	mov	r4,r2
 8131328:	812c2080 	call	812c208 <__mulsi3>
 813132c:	8085883a 	add	r2,r16,r2
 8131330:	e0fffe17 	ldw	r3,-8(fp)
 8131334:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8131338:	d0e00917 	ldw	r3,-32732(gp)
 813133c:	e0bffc17 	ldw	r2,-16(fp)
 8131340:	1880020e 	bge	r3,r2,813134c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8131344:	e0bffc17 	ldw	r2,-16(fp)
 8131348:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 813134c:	e0bffc17 	ldw	r2,-16(fp)
 8131350:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8131354:	00000606 	br	8131370 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8131358:	e0bffc17 	ldw	r2,-16(fp)
 813135c:	10800044 	addi	r2,r2,1
 8131360:	e0bffc15 	stw	r2,-16(fp)
 8131364:	e0bffc17 	ldw	r2,-16(fp)
 8131368:	10800810 	cmplti	r2,r2,32
 813136c:	103fe01e 	bne	r2,zero,81312f0 <__alt_data_end+0xfc1312f0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8131370:	e0bffd17 	ldw	r2,-12(fp)
}
 8131374:	e6ffff04 	addi	sp,fp,-4
 8131378:	dfc00217 	ldw	ra,8(sp)
 813137c:	df000117 	ldw	fp,4(sp)
 8131380:	dc000017 	ldw	r16,0(sp)
 8131384:	dec00304 	addi	sp,sp,12
 8131388:	f800283a 	ret

0813138c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 813138c:	defffe04 	addi	sp,sp,-8
 8131390:	df000115 	stw	fp,4(sp)
 8131394:	df000104 	addi	fp,sp,4
 8131398:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 813139c:	e0bfff17 	ldw	r2,-4(fp)
 81313a0:	10bffe84 	addi	r2,r2,-6
 81313a4:	10c00428 	cmpgeui	r3,r2,16
 81313a8:	18001a1e 	bne	r3,zero,8131414 <alt_exception_cause_generated_bad_addr+0x88>
 81313ac:	100690ba 	slli	r3,r2,2
 81313b0:	008204f4 	movhi	r2,2067
 81313b4:	1084f104 	addi	r2,r2,5060
 81313b8:	1885883a 	add	r2,r3,r2
 81313bc:	10800017 	ldw	r2,0(r2)
 81313c0:	1000683a 	jmp	r2
 81313c4:	08131404 	addi	zero,at,19536
 81313c8:	08131404 	addi	zero,at,19536
 81313cc:	08131414 	ori	zero,at,19536
 81313d0:	08131414 	ori	zero,at,19536
 81313d4:	08131414 	ori	zero,at,19536
 81313d8:	08131404 	addi	zero,at,19536
 81313dc:	0813140c 	andi	zero,at,19536
 81313e0:	08131414 	ori	zero,at,19536
 81313e4:	08131404 	addi	zero,at,19536
 81313e8:	08131404 	addi	zero,at,19536
 81313ec:	08131414 	ori	zero,at,19536
 81313f0:	08131404 	addi	zero,at,19536
 81313f4:	0813140c 	andi	zero,at,19536
 81313f8:	08131414 	ori	zero,at,19536
 81313fc:	08131414 	ori	zero,at,19536
 8131400:	08131404 	addi	zero,at,19536
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8131404:	00800044 	movi	r2,1
 8131408:	00000306 	br	8131418 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 813140c:	0005883a 	mov	r2,zero
 8131410:	00000106 	br	8131418 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8131414:	0005883a 	mov	r2,zero
  }
}
 8131418:	e037883a 	mov	sp,fp
 813141c:	df000017 	ldw	fp,0(sp)
 8131420:	dec00104 	addi	sp,sp,4
 8131424:	f800283a 	ret

08131428 <atexit>:
 8131428:	200b883a 	mov	r5,r4
 813142c:	000f883a 	mov	r7,zero
 8131430:	000d883a 	mov	r6,zero
 8131434:	0009883a 	mov	r4,zero
 8131438:	81314f01 	jmpi	81314f0 <__register_exitproc>

0813143c <exit>:
 813143c:	defffe04 	addi	sp,sp,-8
 8131440:	000b883a 	mov	r5,zero
 8131444:	dc000015 	stw	r16,0(sp)
 8131448:	dfc00115 	stw	ra,4(sp)
 813144c:	2021883a 	mov	r16,r4
 8131450:	81316080 	call	8131608 <__call_exitprocs>
 8131454:	008204f4 	movhi	r2,2067
 8131458:	108c9304 	addi	r2,r2,12876
 813145c:	11000017 	ldw	r4,0(r2)
 8131460:	20800f17 	ldw	r2,60(r4)
 8131464:	10000126 	beq	r2,zero,813146c <exit+0x30>
 8131468:	103ee83a 	callr	r2
 813146c:	8009883a 	mov	r4,r16
 8131470:	81317880 	call	8131788 <_exit>

08131474 <memcmp>:
 8131474:	01c000c4 	movi	r7,3
 8131478:	3980192e 	bgeu	r7,r6,81314e0 <memcmp+0x6c>
 813147c:	2144b03a 	or	r2,r4,r5
 8131480:	11c4703a 	and	r2,r2,r7
 8131484:	10000f26 	beq	r2,zero,81314c4 <memcmp+0x50>
 8131488:	20800003 	ldbu	r2,0(r4)
 813148c:	28c00003 	ldbu	r3,0(r5)
 8131490:	10c0151e 	bne	r2,r3,81314e8 <memcmp+0x74>
 8131494:	31bfff84 	addi	r6,r6,-2
 8131498:	01ffffc4 	movi	r7,-1
 813149c:	00000406 	br	81314b0 <memcmp+0x3c>
 81314a0:	20800003 	ldbu	r2,0(r4)
 81314a4:	28c00003 	ldbu	r3,0(r5)
 81314a8:	31bfffc4 	addi	r6,r6,-1
 81314ac:	10c00e1e 	bne	r2,r3,81314e8 <memcmp+0x74>
 81314b0:	21000044 	addi	r4,r4,1
 81314b4:	29400044 	addi	r5,r5,1
 81314b8:	31fff91e 	bne	r6,r7,81314a0 <__alt_data_end+0xfc1314a0>
 81314bc:	0005883a 	mov	r2,zero
 81314c0:	f800283a 	ret
 81314c4:	20c00017 	ldw	r3,0(r4)
 81314c8:	28800017 	ldw	r2,0(r5)
 81314cc:	18bfee1e 	bne	r3,r2,8131488 <__alt_data_end+0xfc131488>
 81314d0:	31bfff04 	addi	r6,r6,-4
 81314d4:	21000104 	addi	r4,r4,4
 81314d8:	29400104 	addi	r5,r5,4
 81314dc:	39bff936 	bltu	r7,r6,81314c4 <__alt_data_end+0xfc1314c4>
 81314e0:	303fe91e 	bne	r6,zero,8131488 <__alt_data_end+0xfc131488>
 81314e4:	003ff506 	br	81314bc <__alt_data_end+0xfc1314bc>
 81314e8:	10c5c83a 	sub	r2,r2,r3
 81314ec:	f800283a 	ret

081314f0 <__register_exitproc>:
 81314f0:	defffa04 	addi	sp,sp,-24
 81314f4:	dc000315 	stw	r16,12(sp)
 81314f8:	040204f4 	movhi	r16,2067
 81314fc:	840c9304 	addi	r16,r16,12876
 8131500:	80c00017 	ldw	r3,0(r16)
 8131504:	dc400415 	stw	r17,16(sp)
 8131508:	dfc00515 	stw	ra,20(sp)
 813150c:	18805217 	ldw	r2,328(r3)
 8131510:	2023883a 	mov	r17,r4
 8131514:	10003726 	beq	r2,zero,81315f4 <__register_exitproc+0x104>
 8131518:	10c00117 	ldw	r3,4(r2)
 813151c:	010007c4 	movi	r4,31
 8131520:	20c00e16 	blt	r4,r3,813155c <__register_exitproc+0x6c>
 8131524:	1a000044 	addi	r8,r3,1
 8131528:	8800221e 	bne	r17,zero,81315b4 <__register_exitproc+0xc4>
 813152c:	18c00084 	addi	r3,r3,2
 8131530:	18c7883a 	add	r3,r3,r3
 8131534:	18c7883a 	add	r3,r3,r3
 8131538:	12000115 	stw	r8,4(r2)
 813153c:	10c7883a 	add	r3,r2,r3
 8131540:	19400015 	stw	r5,0(r3)
 8131544:	0005883a 	mov	r2,zero
 8131548:	dfc00517 	ldw	ra,20(sp)
 813154c:	dc400417 	ldw	r17,16(sp)
 8131550:	dc000317 	ldw	r16,12(sp)
 8131554:	dec00604 	addi	sp,sp,24
 8131558:	f800283a 	ret
 813155c:	00800034 	movhi	r2,0
 8131560:	10800004 	addi	r2,r2,0
 8131564:	10002626 	beq	r2,zero,8131600 <__register_exitproc+0x110>
 8131568:	01006404 	movi	r4,400
 813156c:	d9400015 	stw	r5,0(sp)
 8131570:	d9800115 	stw	r6,4(sp)
 8131574:	d9c00215 	stw	r7,8(sp)
 8131578:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 813157c:	d9400017 	ldw	r5,0(sp)
 8131580:	d9800117 	ldw	r6,4(sp)
 8131584:	d9c00217 	ldw	r7,8(sp)
 8131588:	10001d26 	beq	r2,zero,8131600 <__register_exitproc+0x110>
 813158c:	81000017 	ldw	r4,0(r16)
 8131590:	10000115 	stw	zero,4(r2)
 8131594:	02000044 	movi	r8,1
 8131598:	22405217 	ldw	r9,328(r4)
 813159c:	0007883a 	mov	r3,zero
 81315a0:	12400015 	stw	r9,0(r2)
 81315a4:	20805215 	stw	r2,328(r4)
 81315a8:	10006215 	stw	zero,392(r2)
 81315ac:	10006315 	stw	zero,396(r2)
 81315b0:	883fde26 	beq	r17,zero,813152c <__alt_data_end+0xfc13152c>
 81315b4:	18c9883a 	add	r4,r3,r3
 81315b8:	2109883a 	add	r4,r4,r4
 81315bc:	1109883a 	add	r4,r2,r4
 81315c0:	21802215 	stw	r6,136(r4)
 81315c4:	01800044 	movi	r6,1
 81315c8:	12406217 	ldw	r9,392(r2)
 81315cc:	30cc983a 	sll	r6,r6,r3
 81315d0:	4992b03a 	or	r9,r9,r6
 81315d4:	12406215 	stw	r9,392(r2)
 81315d8:	21c04215 	stw	r7,264(r4)
 81315dc:	01000084 	movi	r4,2
 81315e0:	893fd21e 	bne	r17,r4,813152c <__alt_data_end+0xfc13152c>
 81315e4:	11006317 	ldw	r4,396(r2)
 81315e8:	218cb03a 	or	r6,r4,r6
 81315ec:	11806315 	stw	r6,396(r2)
 81315f0:	003fce06 	br	813152c <__alt_data_end+0xfc13152c>
 81315f4:	18805304 	addi	r2,r3,332
 81315f8:	18805215 	stw	r2,328(r3)
 81315fc:	003fc606 	br	8131518 <__alt_data_end+0xfc131518>
 8131600:	00bfffc4 	movi	r2,-1
 8131604:	003fd006 	br	8131548 <__alt_data_end+0xfc131548>

08131608 <__call_exitprocs>:
 8131608:	defff504 	addi	sp,sp,-44
 813160c:	df000915 	stw	fp,36(sp)
 8131610:	dd400615 	stw	r21,24(sp)
 8131614:	dc800315 	stw	r18,12(sp)
 8131618:	dfc00a15 	stw	ra,40(sp)
 813161c:	ddc00815 	stw	r23,32(sp)
 8131620:	dd800715 	stw	r22,28(sp)
 8131624:	dd000515 	stw	r20,20(sp)
 8131628:	dcc00415 	stw	r19,16(sp)
 813162c:	dc400215 	stw	r17,8(sp)
 8131630:	dc000115 	stw	r16,4(sp)
 8131634:	d9000015 	stw	r4,0(sp)
 8131638:	2839883a 	mov	fp,r5
 813163c:	04800044 	movi	r18,1
 8131640:	057fffc4 	movi	r21,-1
 8131644:	008204f4 	movhi	r2,2067
 8131648:	108c9304 	addi	r2,r2,12876
 813164c:	12000017 	ldw	r8,0(r2)
 8131650:	45005217 	ldw	r20,328(r8)
 8131654:	44c05204 	addi	r19,r8,328
 8131658:	a0001c26 	beq	r20,zero,81316cc <__call_exitprocs+0xc4>
 813165c:	a0800117 	ldw	r2,4(r20)
 8131660:	15ffffc4 	addi	r23,r2,-1
 8131664:	b8000d16 	blt	r23,zero,813169c <__call_exitprocs+0x94>
 8131668:	14000044 	addi	r16,r2,1
 813166c:	8421883a 	add	r16,r16,r16
 8131670:	8421883a 	add	r16,r16,r16
 8131674:	84402004 	addi	r17,r16,128
 8131678:	a463883a 	add	r17,r20,r17
 813167c:	a421883a 	add	r16,r20,r16
 8131680:	e0001e26 	beq	fp,zero,81316fc <__call_exitprocs+0xf4>
 8131684:	80804017 	ldw	r2,256(r16)
 8131688:	e0801c26 	beq	fp,r2,81316fc <__call_exitprocs+0xf4>
 813168c:	bdffffc4 	addi	r23,r23,-1
 8131690:	843fff04 	addi	r16,r16,-4
 8131694:	8c7fff04 	addi	r17,r17,-4
 8131698:	bd7ff91e 	bne	r23,r21,8131680 <__alt_data_end+0xfc131680>
 813169c:	00800034 	movhi	r2,0
 81316a0:	10800004 	addi	r2,r2,0
 81316a4:	10000926 	beq	r2,zero,81316cc <__call_exitprocs+0xc4>
 81316a8:	a0800117 	ldw	r2,4(r20)
 81316ac:	1000301e 	bne	r2,zero,8131770 <__call_exitprocs+0x168>
 81316b0:	a0800017 	ldw	r2,0(r20)
 81316b4:	10003226 	beq	r2,zero,8131780 <__call_exitprocs+0x178>
 81316b8:	a009883a 	mov	r4,r20
 81316bc:	98800015 	stw	r2,0(r19)
 81316c0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 81316c4:	9d000017 	ldw	r20,0(r19)
 81316c8:	a03fe41e 	bne	r20,zero,813165c <__alt_data_end+0xfc13165c>
 81316cc:	dfc00a17 	ldw	ra,40(sp)
 81316d0:	df000917 	ldw	fp,36(sp)
 81316d4:	ddc00817 	ldw	r23,32(sp)
 81316d8:	dd800717 	ldw	r22,28(sp)
 81316dc:	dd400617 	ldw	r21,24(sp)
 81316e0:	dd000517 	ldw	r20,20(sp)
 81316e4:	dcc00417 	ldw	r19,16(sp)
 81316e8:	dc800317 	ldw	r18,12(sp)
 81316ec:	dc400217 	ldw	r17,8(sp)
 81316f0:	dc000117 	ldw	r16,4(sp)
 81316f4:	dec00b04 	addi	sp,sp,44
 81316f8:	f800283a 	ret
 81316fc:	a0800117 	ldw	r2,4(r20)
 8131700:	80c00017 	ldw	r3,0(r16)
 8131704:	10bfffc4 	addi	r2,r2,-1
 8131708:	15c01426 	beq	r2,r23,813175c <__call_exitprocs+0x154>
 813170c:	80000015 	stw	zero,0(r16)
 8131710:	183fde26 	beq	r3,zero,813168c <__alt_data_end+0xfc13168c>
 8131714:	95c8983a 	sll	r4,r18,r23
 8131718:	a0806217 	ldw	r2,392(r20)
 813171c:	a5800117 	ldw	r22,4(r20)
 8131720:	2084703a 	and	r2,r4,r2
 8131724:	10000b26 	beq	r2,zero,8131754 <__call_exitprocs+0x14c>
 8131728:	a0806317 	ldw	r2,396(r20)
 813172c:	2088703a 	and	r4,r4,r2
 8131730:	20000c1e 	bne	r4,zero,8131764 <__call_exitprocs+0x15c>
 8131734:	89400017 	ldw	r5,0(r17)
 8131738:	d9000017 	ldw	r4,0(sp)
 813173c:	183ee83a 	callr	r3
 8131740:	a0800117 	ldw	r2,4(r20)
 8131744:	15bfbf1e 	bne	r2,r22,8131644 <__alt_data_end+0xfc131644>
 8131748:	98800017 	ldw	r2,0(r19)
 813174c:	153fcf26 	beq	r2,r20,813168c <__alt_data_end+0xfc13168c>
 8131750:	003fbc06 	br	8131644 <__alt_data_end+0xfc131644>
 8131754:	183ee83a 	callr	r3
 8131758:	003ff906 	br	8131740 <__alt_data_end+0xfc131740>
 813175c:	a5c00115 	stw	r23,4(r20)
 8131760:	003feb06 	br	8131710 <__alt_data_end+0xfc131710>
 8131764:	89000017 	ldw	r4,0(r17)
 8131768:	183ee83a 	callr	r3
 813176c:	003ff406 	br	8131740 <__alt_data_end+0xfc131740>
 8131770:	a0800017 	ldw	r2,0(r20)
 8131774:	a027883a 	mov	r19,r20
 8131778:	1029883a 	mov	r20,r2
 813177c:	003fb606 	br	8131658 <__alt_data_end+0xfc131658>
 8131780:	0005883a 	mov	r2,zero
 8131784:	003ffb06 	br	8131774 <__alt_data_end+0xfc131774>

08131788 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8131788:	defffd04 	addi	sp,sp,-12
 813178c:	df000215 	stw	fp,8(sp)
 8131790:	df000204 	addi	fp,sp,8
 8131794:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8131798:	0001883a 	nop
 813179c:	e0bfff17 	ldw	r2,-4(fp)
 81317a0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 81317a4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 81317a8:	10000226 	beq	r2,zero,81317b4 <_exit+0x2c>
    ALT_SIM_FAIL();
 81317ac:	002af070 	cmpltui	zero,zero,43969
 81317b0:	00000106 	br	81317b8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 81317b4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 81317b8:	003fff06 	br	81317b8 <__alt_data_end+0xfc1317b8>

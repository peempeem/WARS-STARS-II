#include "title_screen.h"
#include "../mouse.h"
#include "../timer.h"
#include "../game.h"
#include "../display.h"
#include <stdio.h>

#include "../sprites/lightspeed_background.h"
#include "../sprites/title_screen_ship.h"
#include "../sprites/WAR_STARS_II.h"
#include "../sprites/start_button_unpressed.h"
#include "../sprites/start_button_pressed.h"
#include "../sprites/cursor.h"

int button_pressed(float start) {
    if (get_time() - start > 10)
        return 1;
    return 0;
}

void run_title_screen() {
    rate_t frame_rate = create_rate(20);
    rate_t mouse_rate = create_rate(60);
    scene_t scene;
    clear_scene(&scene);
    
    int background              = allocate_object(&scene, BACKGROUND, 1);
    int ship                    = allocate_object(&scene, EFFECTS, 1);
    int title_text              = allocate_object(&scene, EFFECTS, 1);
    int start_button_unpressed  = allocate_object(&scene, SHIPS, 1);
    int start_button_pressed    = allocate_object(&scene, SHIPS, 0);
    int cursor                  = allocate_object(&scene, CURSOR, 1);
    
    scene.objects[background            ].sprite = lightspeed_background_sprite;
    scene.objects[ship                  ].sprite = title_screen_ship_sprite;
    scene.objects[title_text            ].sprite = WAR_STARS_II_sprite;
    scene.objects[start_button_unpressed].sprite = start_button_unpressed_sprite;
    scene.objects[start_button_pressed  ].sprite = start_button_pressed_sprite;
    scene.objects[cursor                ].sprite = cursor_sprite;

    scene.objects[ship].sprite.screen_x = ((SCREEN_WIDTH / 2) - scene.objects[ship].sprite.width) / 2;
    scene.objects[ship].sprite.screen_y = (SCREEN_HEIGHT - scene.objects[ship].sprite.height) / 2;

    scene.objects[title_text].sprite.screen_x = (SCREEN_WIDTH - scene.objects[title_text].sprite.width) / 2;
    scene.objects[title_text].sprite.screen_y = 100;

    scene.objects[start_button_unpressed].sprite.screen_x = SCREEN_WIDTH - SCREEN_WIDTH / 4 - scene.objects[start_button_unpressed].sprite.width / 2;
    scene.objects[start_button_unpressed].sprite.screen_y = (SCREEN_HEIGHT - scene.objects[start_button_unpressed].sprite.height) / 2;

    scene.objects[start_button_pressed].sprite.screen_x = scene.objects[start_button_unpressed].sprite.screen_x;
    scene.objects[start_button_pressed].sprite.screen_y = scene.objects[start_button_unpressed].sprite.screen_y;

    float dx = 0;
    float x = scene.objects[ship].sprite.screen_x;

    int start_fading = 0;
    int fading = 0;

    fade_t fade_out;

    float start = get_time();

    int running = 1;

    mouse_t mouse;

    while (running) {
        if (is_ready(&mouse_rate))
            poll_mouse(&mouse);
        if (is_ready(&frame_rate)) {
            scene.objects[background].sprite.start_x += 2;
            if (scene.objects[background].sprite.start_x >= scene.objects[background].sprite.width - SCREEN_WIDTH)
                scene.objects[background].sprite.start_x = 0;
            scene.objects[background].sprite.end_x = scene.objects[background].sprite.start_x + SCREEN_WIDTH;

            if (button_pressed(start)) {
                scene.objects[start_button_unpressed].visable   = 0;
                scene.objects[start_button_pressed].visable     = 1;

                dx += 0.35f;
                x += dx;
                scene.objects[ship].sprite.screen_x = (uint32_t) x;
            }

            fading = scene.objects[ship].sprite.screen_x > SCREEN_WIDTH;

            if (!start_fading && fading) {
                fade_out = create_fade(0x0000, 2);
                start_fading = 1;
            }

            if (fading)
                running = !fade_to(&fade_out);

            scene.objects[cursor].sprite.screen_x = 0;
            scene.objects[cursor].sprite.screen_y = 0;
            
            while (gdu_is_running());
            push_scene(&scene);
            start_render();
        }
    }
}

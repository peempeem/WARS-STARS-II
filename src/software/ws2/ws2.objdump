
ws2.elf:     file format elf32-littlenios2
ws2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000021c memsz 0x0000021c flags r-x
    LOAD off    0x00002000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x0034870c memsz 0x0034870c flags r-x
    LOAD off    0x0034a70c vaddr 0x0834870c paddr 0x0834a244 align 2**12
         filesz 0x00001b38 memsz 0x00001b38 flags rw-
    LOAD off    0x0034cd7c vaddr 0x0834bd7c paddr 0x0834bd7c align 2**12
         filesz 0x00000000 memsz 0x0012c2f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018994  08000000  08000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0032fd78  08018994  08018994  0001a994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b38  0834870c  0834a244  0034a70c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0012c39e  0834bd7c  0834bd7c  0034cd7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000023c  0000023c  0034c244  2**0
                  CONTENTS
  7 .sdram        00000000  08478070  08478070  0034c244  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0034c244  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000013f0  00000000  00000000  0034c268  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002b5fa  00000000  00000000  0034d658  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000bb58  00000000  00000000  00378c52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f16c  00000000  00000000  003847aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000034a0  00000000  00000000  00393918  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000535b  00000000  00000000  00396db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001cbb4  00000000  00000000  0039c113  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  003b8cc8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000020b8  00000000  00000000  003b8d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  003bf79e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  003bf7a1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  003bf7ad  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  003bf7ae  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  003bf7af  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  003bf7b3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  003bf7b7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  003bf7bb  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  003bf7c6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  003bf7d1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  003bf7dc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  003bf7df  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a8a  00000000  00000000  003bf812  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00080bce  00000000  00000000  003c429c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
08018994 l    d  .rodata	00000000 .rodata
0834870c l    d  .rwdata	00000000 .rwdata
0834bd7c l    d  .bss	00000000 .bss
0000023c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08478070 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ws2_bsp//obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 display.c
08018994 l     O .rodata	00000a20 playership0_bitmap
080193b4 l     O .rodata	00000024 playership0_sprite
080193d8 l     O .rodata	00001be8 playership1_bitmap
0801afc0 l     O .rodata	00000024 playership1_sprite
0801afe4 l     O .rodata	00000014 player_fighter
0801aff8 l     O .rodata	00000014 player_cruiser
0834bd7c l     O .bss	00000004 frame.1791
00000000 l    df *ABS*	00000000 game.c
0801b00c l     O .rodata	00000a20 playership0_bitmap
0801ba2c l     O .rodata	00000024 playership0_sprite
0801ba50 l     O .rodata	00001be8 playership1_bitmap
0801d638 l     O .rodata	00000024 playership1_sprite
0801d65c l     O .rodata	00000014 player_fighter
0801d670 l     O .rodata	00000014 player_cruiser
00000000 l    df *ABS*	00000000 gdu.c
0834a1e8 l     O .rwdata	00000004 gdu_mem
00000000 l    df *ABS*	00000000 level1.c
0801d684 l     O .rodata	00000a20 playership0_bitmap
0801e0a4 l     O .rodata	00000024 playership0_sprite
0801e0c8 l     O .rodata	00001be8 playership1_bitmap
0801fcb0 l     O .rodata	00000024 playership1_sprite
0801fcd4 l     O .rodata	00000014 player_fighter
0801fce8 l     O .rodata	00000014 player_cruiser
0801fcfc l     O .rodata	000e1000 level1_background_bitmap
08100cfc l     O .rodata	00000024 level1_background_sprite
08100d20 l     O .rodata	0002bf20 level1_player_planet_bitmap
0812cc40 l     O .rodata	00000024 level1_player_planet_sprite
0812cc64 l     O .rodata	0002bf20 level1_enemy_planet_bitmap
08158b84 l     O .rodata	00000024 level1_enemy_planet_sprite
08158ba8 l     O .rodata	00012c00 statusbar_bitmap
0816b7a8 l     O .rodata	00000024 statusbar_sprite
0816b7cc l     O .rodata	00000420 cursor_bitmap
0816bbec l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 title_screen.c
0816bc10 l     O .rodata	00000a20 playership0_bitmap
0816c630 l     O .rodata	00000024 playership0_sprite
0816c654 l     O .rodata	00001be8 playership1_bitmap
0816e23c l     O .rodata	00000024 playership1_sprite
0816e260 l     O .rodata	00000014 player_fighter
0816e274 l     O .rodata	00000014 player_cruiser
0816e288 l     O .rodata	00177000 lightspeed_background_bitmap
082e5288 l     O .rodata	00000024 lightspeed_background_sprite
082e52ac l     O .rodata	0000b3b0 title_screen_ship_bitmap
082f065c l     O .rodata	00000024 title_screen_ship_sprite
082f0680 l     O .rodata	0000d8f0 WAR_STARS_II_bitmap
082fdf70 l     O .rodata	00000024 WAR_STARS_II_sprite
082fdf94 l     O .rodata	00009ab0 start_button_unpressed_bitmap
08307a44 l     O .rodata	00000024 start_button_unpressed_sprite
08307a68 l     O .rodata	00009ab0 start_button_pressed_bitmap
08311518 l     O .rodata	00000024 start_button_pressed_sprite
0831153c l     O .rodata	00000420 cursor_bitmap
0831195c l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 main.c
08311980 l     O .rodata	00000a20 playership0_bitmap
083123a0 l     O .rodata	00000024 playership0_sprite
083123c4 l     O .rodata	00001be8 playership1_bitmap
08313fac l     O .rodata	00000024 playership1_sprite
08313fd0 l     O .rodata	00000014 player_fighter
08313fe4 l     O .rodata	00000014 player_cruiser
08313ff8 l     O .rodata	00034260 mouse_bitmap
08348258 l     O .rodata	00000024 mouse_sprite
00000000 l    df *ABS*	00000000 mouse.c
0834a1ec l     O .rwdata	00000001 addr
0834bd80 l     O .bss	00000001 runningdebugflag.3191
0834bd81 l     O .bss	00000001 device.3190
0834bd82 l     O .bss	00000008 buf.3189
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0834bd98 l     O .bss	00000004 usb_delay.2652
0834bd9c l     O .bss	00000001 tmp_addr.2653
00000000 l    df *ABS*	00000000 vga.c
0834be00 l     O .bss	0012c000 vga_mem
0834a200 l     O .rwdata	00000004 vga_regs
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 wf_sqrt.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 ef_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
083483fc l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 sf_fpclassify.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0834873c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08348556 l     O .rodata	00000010 zeroes.4404
0800e614 l     F .text	000000bc __sbprintf
08348566 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800e824 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0801037c l     F .text	00000008 __fp_unlock
08010390 l     F .text	0000019c __sinit.part.1
0801052c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
08348b80 l     O .rwdata	00000020 lc_ctype_charset
08348b60 l     O .rwdata	00000020 lc_message_charset
08348ba0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08348594 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08013864 l     F .text	000000fc __sprint_r.part.0
083486b8 l     O .rodata	00000010 zeroes.4349
08014ea0 l     F .text	000000bc __sbprintf
083486c8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
08015e6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015f80 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08015fac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
080160a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08016188 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08016274 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08016450 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0834a238 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08016898 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080169d4 l     F .text	00000034 alt_dev_reg
08349188 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016cc8 l     F .text	0000020c altera_avalon_jtag_uart_irq
08016ed4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08017708 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08017aa0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08017f00 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08018060 l     F .text	0000003c alt_get_errno
0801809c l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0834bdd4 g     O .bss	00000004 alt_instruction_exception_handler
08012f1c g     F .text	00000074 _mprec_log10
08013008 g     F .text	0000008c __any_on
08015454 g     F .text	00000054 _isatty_r
083485a0 g     O .rodata	00000028 __mprec_tinytens
0801638c g     F .text	0000007c alt_main
0834a1f4 g     O .rwdata	00000008 ctrl_xfers
0800c1b0 g     F .text	000000c0 _puts_r
08477f70 g     O .bss	00000100 alt_irq
08007180 g     F .text	00000014 fabs
080154a8 g     F .text	00000060 _lseek_r
08004c94 g     F .text	00000644 USB_Task
0834a244 g       *ABS*	00000000 __flash_rwdata_start
0800a72c g     F .text	00000088 .hidden __eqdf2
08000af0 g     F .text	000000a0 allocate_ship
08478070 g       *ABS*	00000000 __alt_heap_start
0800c174 g     F .text	0000003c printf
080156c0 g     F .text	0000009c _wcrtomb_r
08003ec0 g     F .text	00000088 kbdPoll
08013724 g     F .text	0000005c __sseek
080106dc g     F .text	00000010 __sinit
08015568 g     F .text	00000140 __swbuf_r
080111b0 g     F .text	0000007c _setlocale_r
08010534 g     F .text	00000078 __sfmoreglue
0801642c g     F .text	00000024 __malloc_unlock
08002ea4 g     F .text	000001bc GetDriverandReport
08008444 g     F .text	00000440 .hidden __divsf3
08003354 g     F .text	00000028 disable_master_timer
08011e80 g     F .text	0000015c memmove
080106c4 g     F .text	00000018 _cleanup
08000a9c g     F .text	00000054 ship_select
08011fdc g     F .text	000000a8 _Balloc
0800931c g     F .text	00000070 .hidden __fixsfsi
080055d0 g     F .text	00000058 set_aura
08004014 g     F .text	0000006c MAXreg_wr
0834870c g     O .rwdata	00000030 ClientDriverTable
0800a7b4 g     F .text	000000dc .hidden __gtdf2
080182e4 g     F .text	00000024 altera_nios2_gen2_irq_init
0800c00c g     F .text	00000010 __errno
080052d8 g     F .text	0000002c MSDProbe
00000000 g     F .entry	0000000c __reset
08004794 g     F .text	000000e8 XferCtrlData
00000020 g       *ABS*	00000000 __flash_exceptions_start
0834bdd8 g     O .bss	00000010 hid_ep
080153f8 g     F .text	0000005c _fstat_r
0834bdb8 g     O .bss	00000004 errno
080136a0 g     F .text	00000008 __seofread
0834bdc0 g     O .bss	00000004 alt_argv
083521e8 g       *ABS*	00000000 _gp
08016868 g     F .text	00000030 usleep
08004118 g     F .text	0000005c MAXreg_rd
08008e38 g     F .text	000004e4 .hidden __subsf3
0800343c g     F .text	000000bc create_rate
08005bec g     F .text	00000114 sqrtf
0800337c g     F .text	0000005c get_time
08000344 g     F .text	000000b0 is_clicked
08001108 g     F .text	0000018c update_game
08349008 g     O .rwdata	00000180 alt_fd_list
08003de0 g     F .text	00000040 HID_init
08018308 g     F .text	00000090 alt_find_dev
08011d38 g     F .text	00000148 memcpy
08010384 g     F .text	0000000c _cleanup_r
0800bb6c g     F .text	000000dc .hidden __floatsidf
08017fe4 g     F .text	0000007c alt_io_redirect
0800a890 g     F .text	000000f4 .hidden __ltdf2
080000ac g     F .text	00000048 double_render
08018994 g       *ABS*	00000000 __DTOR_END__
0800c270 g     F .text	00000014 puts
08018564 g     F .text	0000009c alt_exception_cause_generated_bad_addr
080033d8 g     F .text	00000064 get_micros
080071b0 g     F .text	00000074 __fpclassifyd
08012e78 g     F .text	000000a4 __ratio
08014e84 g     F .text	0000001c __vfiprintf_internal
080170cc g     F .text	0000021c altera_avalon_jtag_uart_read
0800c144 g     F .text	00000030 _printf_r
08000810 g     F .text	00000064 deallocate_object
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08007e98 g     F .text	00000064 .hidden __udivsi3
080160dc g     F .text	000000ac isatty
083485f0 g     O .rodata	000000c8 __mprec_tens
0801122c g     F .text	0000000c __locale_charset
08008940 g     F .text	000000c8 .hidden __lesf2
08007694 g     F .text	00000074 .hidden __fixunsdfsi
0834bdb4 g     O .bss	00000004 __malloc_top_pad
080075c0 g     F .text	00000058 __fpclassifyf
0834a1fc g     O .rwdata	00000001 usb_task_state
0834a210 g     O .rwdata	00000004 __mb_cur_max
0801125c g     F .text	0000000c _localeconv_r
08012410 g     F .text	0000003c __i2b
08010b60 g     F .text	000004c8 __sfvwrite_r
080135f8 g     F .text	00000054 _sbrk_r
08015508 g     F .text	00000060 _read_r
08004450 g     F .text	00000094 MAX3421E_init
0834a230 g     O .rwdata	00000004 alt_max_fd
080150ec g     F .text	000000f0 _fclose_r
0801034c g     F .text	00000030 fflush
0834bdb0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800bcf0 g     F .text	00000110 .hidden __extendsfdf2
0834a1f0 g     O .rwdata	00000004 timer_regs
080094b0 g     F .text	000008ac .hidden __adddf3
08012c20 g     F .text	0000010c __b2d
080054e0 g     F .text	00000040 vga_init
080158a8 g     F .text	000005c4 .hidden __umoddi3
080162b0 g     F .text	000000dc lseek
0834a204 g     O .rwdata	00000004 __fdlib_version
0834a208 g     O .rwdata	00000004 _global_impure_ptr
08013094 g     F .text	00000564 _realloc_r
00001000 g       *ABS*	00000000 __alt_exception_stack_pointer
08478070 g       *ABS*	00000000 __bss_end
08017e10 g     F .text	000000f0 alt_iic_isr_register
08016760 g     F .text	00000108 alt_tick
080077a4 g     F .text	000005fc .hidden __udivdi3
08015354 g     F .text	00000024 _fputwc_r
080056ac g     F .text	0000007c getPixel
083485c8 g     O .rodata	00000028 __mprec_bigtens
080121f4 g     F .text	00000104 __s2b
0800bc48 g     F .text	000000a8 .hidden __floatunsidf
08012960 g     F .text	00000060 __mcmp
08000ee8 g     F .text	000000f8 distance
08000c68 g     F .text	000001dc spawn_ship
080106fc g     F .text	00000018 __fp_lock_all
08017dc4 g     F .text	0000004c alt_ic_irq_enabled
080166c4 g     F .text	0000009c alt_alarm_stop
0834bdd0 g     O .bss	00000004 alt_irq_active
080053a0 g     F .text	0000002c DummyProbe
00000108 g     F .exceptions	000000d4 alt_irq_handler
08348fe0 g     O .rwdata	00000028 alt_dev_null
08003e20 g     F .text	000000a0 mousePoll
08000874 g     F .text	0000017c push_scene
08007238 g     F .text	000001ec rint
080042a4 g     F .text	00000024 Vbus_power
08017a80 g     F .text	00000020 alt_dcache_flush_all
080122f8 g     F .text	00000068 __hi0bits
08000160 g     F .text	00000060 start_fade
0800baec g     F .text	00000080 .hidden __fixdfsi
0834a244 g       *ABS*	00000000 __ram_rwdata_end
0834a228 g     O .rwdata	00000008 alt_dev_list
080168d4 g     F .text	00000100 write
08008884 g     F .text	000000bc .hidden __gtsf2
0834870c g       *ABS*	00000000 __ram_rodata_end
0834bd9d g     O .bss	00000001 usb_error
08015fe8 g     F .text	000000b8 fstat
0800a890 g     F .text	000000f4 .hidden __ledf2
080126d8 g     F .text	00000140 __pow5mult
08013978 g     F .text	0000150c ___vfiprintf_internal_r
0834bda8 g     O .bss	00000004 __nlocale_changed
08007efc g     F .text	00000058 .hidden __umodsi3
08478070 g       *ABS*	00000000 end
080055ac g     F .text	00000024 is_vblank
08016c08 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
080048f0 g     F .text	0000017c XferDispatchPkt
08003090 g     F .text	00000088 new_mouse
08018994 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08017780 g     F .text	0000007c alt_avalon_timer_sc_init
0800bfa8 g     F .text	00000064 .hidden __clzsi2
080172e8 g     F .text	00000224 altera_avalon_jtag_uart_write
080001c0 g     F .text	00000070 is_fade_done
080106ec g     F .text	00000004 __sfp_lock_acquire
08011c54 g     F .text	000000e4 memchr
0800c31c g     F .text	000022dc ___vfprintf_internal_r
08004614 g     F .text	00000034 MaxGpxHandler
080012d4 g     F .text	00000024 gdu_is_running
08010850 g     F .text	00000310 _free_r
0800555c g     F .text	00000050 get_frame
08011238 g     F .text	00000010 __locale_mb_cur_max
08003118 g     F .text	00000210 poll_mouse
080187e0 g     F .text	00000180 __call_exitprocs
0834bda4 g     O .bss	00000004 __mlocale_changed
0834a214 g     O .rwdata	00000004 __malloc_sbrk_base
08000000 g     F .text	0000003c _start
0834bdc8 g     O .bss	00000004 _alt_tick_rate
08004174 g     F .text	00000090 MAXbytes_rd
08012818 g     F .text	00000148 __lshift
0801750c g     F .text	000001fc alt_avalon_spi_command
0834bdcc g     O .bss	00000004 _alt_nticks
0801648c g     F .text	00000104 read
08016a40 g     F .text	00000064 alt_sys_init
0800938c g     F .text	00000124 .hidden __floatsisf
08477f28 g     O .bss	00000048 devtable
08001348 g     F .text	00000030 gdu_set_frame
080186c8 g     F .text	00000118 __register_exitproc
080039d8 g     F .text	00000408 HIDKProbe
0834bde8 g     O .bss	00000018 msd_ep
08000230 g     F .text	00000114 show_fade
08001fdc g     F .text	00000dbc run_title_screen
0801244c g     F .text	0000028c __multiply
08005d00 g     F .text	000010a4 __ieee754_pow
08016f74 g     F .text	00000068 altera_avalon_jtag_uart_close
08004bfc g     F .text	00000098 USB_init
08005728 g     F .text	000004c4 pow
08477e28 g     O .bss	00000100 bigbuf
08007f54 g     F .text	00000028 .hidden __mulsi3
0834870c g       *ABS*	00000000 __ram_rwdata_start
08018994 g       *ABS*	00000000 __ram_rodata_start
08477e00 g     O .bss	00000028 __malloc_current_mallinfo
0834bd94 g     O .bss	00000001 last_usb_task_state
08012d2c g     F .text	0000014c __d2b
0834bd8c g     O .bss	00000008 dev0ep
08016aa4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080184a0 g     F .text	000000c4 alt_get_fd
08017928 g     F .text	00000158 alt_busy_sleep
08005304 g     F .text	00000038 MSDEventHandler
08014fbc g     F .text	00000054 _close_r
08001294 g     F .text	00000040 gdu_run
0801864c g     F .text	0000007c memcmp
08016b64 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08478070 g       *ABS*	00000000 __alt_stack_base
08016bb4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08007708 g     F .text	0000009c .hidden __floatundisf
0800e6d0 g     F .text	00000154 __swsetup_r
08009d5c g     F .text	000009d0 .hidden __divdf3
080105ac g     F .text	00000118 __sfp
08012f90 g     F .text	00000078 __copybits
08348bd8 g     O .rwdata	00000408 __malloc_av_
080106f8 g     F .text	00000004 __sinit_lock_release
08005368 g     F .text	00000038 CDCEventHandler
0800a984 g     F .text	0000086c .hidden __muldf3
080053cc g     F .text	00000038 DummyEventHandler
0801364c g     F .text	00000054 __sread
08018398 g     F .text	00000108 alt_find_file
080005fc g     F .text	00000214 allocate_object
08017adc g     F .text	000000a4 alt_dev_llist_insert
08016408 g     F .text	00000024 __malloc_lock
08016614 g     F .text	000000b0 sbrk
080102f0 g     F .text	0000005c _fflush_r
08015010 g     F .text	000000dc _calloc_r
08003328 g     F .text	0000002c enable_master_timer
0834bd7c g       *ABS*	00000000 __bss_start
08001440 g     F .text	00000070 push_sprite
080042c8 g     F .text	00000188 MAX_busprobe
0834bd8a g     O .bss	00000002 hid_device
0800c01c g     F .text	00000128 memset
0800702c g     F .text	00000154 __ieee754_sqrtf
08002d98 g     F .text	0000010c main
080044e4 g     F .text	00000064 MAX3421E_Task
0834bdc4 g     O .bss	00000004 alt_envp
0834bdac g     O .bss	00000004 __malloc_max_total_mem
08016b04 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080156a8 g     F .text	00000018 __swbuf
0800545c g     F .text	00000084 ConvUTF8ToStr
08008940 g     F .text	000000c8 .hidden __ltsf2
08013780 g     F .text	00000008 __sclose
08007224 g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
080151dc g     F .text	00000014 fclose
0800be00 g     F .text	000001a8 .hidden __truncdfsf2
0800ea4c g     F .text	00001688 _dtoa_r
08011448 g     F .text	0000080c _malloc_r
0801581c g     F .text	00000030 __ascii_wctomb
0834a234 g     O .rwdata	00000004 alt_errno
080012f8 g     F .text	00000050 gdu_reset
08011028 g     F .text	000000c4 _fwalk
080000f4 g     F .text	0000006c create_fade
08007da0 g     F .text	00000084 .hidden __divsi3
08004a6c g     F .text	00000190 XferInTransfer
0801072c g     F .text	00000124 _malloc_trim_r
080034f8 g     F .text	000000d8 is_ready
08018994 g       *ABS*	00000000 __CTOR_END__
08008a08 g     F .text	00000430 .hidden __mulsf3
08007194 g     F .text	0000001c finite
08005424 g     F .text	00000038 GetDevtable
08013788 g     F .text	000000dc strcmp
08000e44 g     F .text	000000a4 destroy_ship
08018994 g       *ABS*	00000000 __flash_rodata_start
08018994 g       *ABS*	00000000 __DTOR_LIST__
0800487c g     F .text	00000074 XferCtrlND
08007618 g     F .text	0000001c copysign
0800a72c g     F .text	00000088 .hidden __nedf2
08004204 g     F .text	000000a0 MAX3421E_reset
080014b0 g     F .text	00000068 pop_sprite
08016a08 g     F .text	00000038 alt_irq_init
08016590 g     F .text	00000084 alt_release_fd
0834840c g     O .rodata	00000100 .hidden __clz_tab
0834bda0 g     O .bss	00000004 _PathLocale
08018600 g     F .text	00000014 atexit
08008884 g     F .text	000000bc .hidden __gesf2
08014f5c g     F .text	00000060 _write_r
08011268 g     F .text	00000018 setlocale
0834a20c g     O .rwdata	00000004 _impure_ptr
0834bdbc g     O .bss	00000004 alt_argc
080100d4 g     F .text	0000021c __sflush_r
08007424 g     F .text	0000019c scalbn
08017be0 g     F .text	00000060 _do_dtors
08011254 g     F .text	00000008 __locale_cjk_lang
08004080 g     F .text	00000098 MAXbytes_wr
00000020 g       .exceptions	00000000 alt_irq_entry
08012bbc g     F .text	00000064 __ulp
08010714 g     F .text	00000018 __fp_unlock_all
08000b90 g     F .text	000000d8 ship_count
0834a220 g     O .rwdata	00000008 alt_fs_list
0800533c g     F .text	0000002c CDCProbe
0800722c g     F .text	0000000c nan
00000020 g       *ABS*	00000000 __ram_exceptions_start
08011280 g     F .text	0000000c localeconv
08006da4 g     F .text	00000288 __ieee754_sqrt
08005404 g     F .text	00000020 GetUsbTaskState
08017c60 g     F .text	00000050 alt_ic_isr_register
0834a244 g       *ABS*	00000000 _edata
08001378 g     F .text	000000c8 convert_sprite
08003f80 g     F .text	00000038 HIDKEventHandler
08478070 g       *ABS*	00000000 _end
080003f4 g     F .text	000001a0 handle_mouse
08004548 g     F .text	000000cc MaxIntHandler
080151f0 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
08016fdc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08003fb8 g     F .text	00000034 SPI_init
08017d38 g     F .text	0000008c alt_ic_irq_disable
080009f0 g     F .text	000000ac clear_scene
080136a8 g     F .text	0000007c __swrite
0834a218 g     O .rwdata	00000004 __malloc_trim_threshold
08011248 g     F .text	0000000c __locale_msgcharset
08018614 g     F .text	00000038 exit
080110ec g     F .text	000000c4 _fwalk_reent
080129c0 g     F .text	000001fc __mdiff
08007e24 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
080106f0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08003060 g     F .text	00000030 init_mouse
08007634 g     F .text	00000060 .hidden __fixunssfsi
08003f48 g     F .text	00000038 HIDMEventHandler
08000fe0 g     F .text	00000128 closest_ship
08000594 g     F .text	00000068 init_object
08018960 g     F .text	00000034 _exit
080177fc g     F .text	0000012c alt_alarm_start
0801128c g     F .text	000001bc __smakebuf_r
0800c284 g     F .text	00000098 strlen
08018188 g     F .text	0000015c open
0800a7b4 g     F .text	000000dc .hidden __gedf2
0834a21c g     O .rwdata	00000004 __wctomb
08005628 g     F .text	00000084 setPixel
08013960 g     F .text	00000018 __sprint_r
08017c40 g     F .text	00000020 alt_icache_flush_all
08017cb0 g     F .text	00000088 alt_ic_irq_enable
0800e5f8 g     F .text	0000001c __vfprintf_internal
080035d0 g     F .text	00000408 HIDMProbe
0801584c g     F .text	0000005c _wctomb_r
0800003c g     F .text	00000070 start_render
08003fec g     F .text	00000028 SPI_wr
0800b1f0 g     F .text	000008fc .hidden __subdf3
08012360 g     F .text	000000b0 __lo0bits
0834a23c g     O .rwdata	00000008 alt_alarm_list
08017b80 g     F .text	00000060 _do_ctors
0801575c g     F .text	000000c0 wcrtomb
08015ea8 g     F .text	000000d8 close
08007f7c g     F .text	000004c8 .hidden __addsf3
08005520 g     F .text	0000003c set_frame
080161f0 g     F .text	00000084 alt_load
08015378 g     F .text	00000080 fputwc
080106f4 g     F .text	00000004 __sinit_lock_acquire
08004648 g     F .text	0000014c XferCtrlReq
08001518 g     F .text	00000ac4 run_level1
080120ac g     F .text	00000148 __multadd
08012084 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   4:	08400014 	ori	at,at,0
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	06000034 	movhi	et,0
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c603ec14 	ori	et,et,4016
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	008211f4 	movhi	r2,2119
 14c:	109fdc04 	addi	r2,r2,32624
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	008211f4 	movhi	r2,2119
 164:	109fdc04 	addi	r2,r2,32624
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_data_end+0xf4000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_data_end+0xf400012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6fb17 	ldw	r2,-25620(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6fb17 	ldw	r2,-25620(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	06820d74 	movhi	gp,2101
    ori gp, gp, %lo(_gp)
 800000c:	d6887a14 	ori	gp,gp,8680
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	00820d34 	movhi	r2,2100
    ori r2, r2, %lo(__bss_start)
 8000014:	10af5f14 	ori	r2,r2,48508

    movhi r3, %hi(__bss_end)
 8000018:	00c211f4 	movhi	r3,2119
    ori r3, r3, %lo(__bss_end)
 800001c:	18e01c14 	ori	r3,r3,32880

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <__alt_data_end+0xfc000024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	80161f00 	call	80161f0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	801638c0 	call	801638c <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <__alt_data_end+0xfc000038>

0800003c <start_render>:
#include "gdu.h"
#include "timer.h"
#include "game.h"
#include "mouse.h"

void start_render() {
 800003c:	defffe04 	addi	sp,sp,-8
 8000040:	dfc00115 	stw	ra,4(sp)
 8000044:	df000015 	stw	fp,0(sp)
 8000048:	d839883a 	mov	fp,sp
    static int frame = 0;
    while (!is_vblank());
 800004c:	0001883a 	nop
 8000050:	80055ac0 	call	80055ac <is_vblank>
 8000054:	103ffe26 	beq	r2,zero,8000050 <__alt_data_end+0xfc000050>
    set_frame(frame);
 8000058:	d0a6e517 	ldw	r2,-25708(gp)
 800005c:	1009883a 	mov	r4,r2
 8000060:	80055200 	call	8005520 <set_frame>
    gdu_set_frame(get_frame(!frame));
 8000064:	d0a6e517 	ldw	r2,-25708(gp)
 8000068:	1005003a 	cmpeq	r2,r2,zero
 800006c:	10803fcc 	andi	r2,r2,255
 8000070:	1009883a 	mov	r4,r2
 8000074:	800555c0 	call	800555c <get_frame>
 8000078:	1009883a 	mov	r4,r2
 800007c:	80013480 	call	8001348 <gdu_set_frame>
    gdu_run();
 8000080:	80012940 	call	8001294 <gdu_run>
    frame = !frame;
 8000084:	d0a6e517 	ldw	r2,-25708(gp)
 8000088:	1005003a 	cmpeq	r2,r2,zero
 800008c:	10803fcc 	andi	r2,r2,255
 8000090:	d0a6e515 	stw	r2,-25708(gp)
}
 8000094:	0001883a 	nop
 8000098:	e037883a 	mov	sp,fp
 800009c:	dfc00117 	ldw	ra,4(sp)
 80000a0:	df000017 	ldw	fp,0(sp)
 80000a4:	dec00204 	addi	sp,sp,8
 80000a8:	f800283a 	ret

080000ac <double_render>:

void double_render() {
 80000ac:	defffe04 	addi	sp,sp,-8
 80000b0:	dfc00115 	stw	ra,4(sp)
 80000b4:	df000015 	stw	fp,0(sp)
 80000b8:	d839883a 	mov	fp,sp
    start_render();
 80000bc:	800003c0 	call	800003c <start_render>
    while (gdu_is_running());
 80000c0:	0001883a 	nop
 80000c4:	80012d40 	call	80012d4 <gdu_is_running>
 80000c8:	103ffe1e 	bne	r2,zero,80000c4 <__alt_data_end+0xfc0000c4>
    start_render();
 80000cc:	800003c0 	call	800003c <start_render>
    while (gdu_is_running());
 80000d0:	0001883a 	nop
 80000d4:	80012d40 	call	80012d4 <gdu_is_running>
 80000d8:	103ffe1e 	bne	r2,zero,80000d4 <__alt_data_end+0xfc0000d4>
}
 80000dc:	0001883a 	nop
 80000e0:	e037883a 	mov	sp,fp
 80000e4:	dfc00117 	ldw	ra,4(sp)
 80000e8:	df000017 	ldw	fp,0(sp)
 80000ec:	dec00204 	addi	sp,sp,8
 80000f0:	f800283a 	ret

080000f4 <create_fade>:

fade_t create_fade(uint16_t color, int dir) {
 80000f4:	defff804 	addi	sp,sp,-32
 80000f8:	df000715 	stw	fp,28(sp)
 80000fc:	df000704 	addi	fp,sp,28
 8000100:	e13ffd15 	stw	r4,-12(fp)
 8000104:	2805883a 	mov	r2,r5
 8000108:	e1bfff15 	stw	r6,-4(fp)
 800010c:	e0bffe0d 	sth	r2,-8(fp)
    fade_t fade = {
 8000110:	e03ff915 	stw	zero,-28(fp)
 8000114:	e03ffa15 	stw	zero,-24(fp)
 8000118:	e0bfff17 	ldw	r2,-4(fp)
 800011c:	e0bffb15 	stw	r2,-20(fp)
 8000120:	e0bffe0b 	ldhu	r2,-8(fp)
 8000124:	e0bffc0d 	sth	r2,-16(fp)
        0,
        0,
        dir,
        color
    };
    return fade;
 8000128:	e0bffd17 	ldw	r2,-12(fp)
 800012c:	e0fff917 	ldw	r3,-28(fp)
 8000130:	10c00015 	stw	r3,0(r2)
 8000134:	e0fffa17 	ldw	r3,-24(fp)
 8000138:	10c00115 	stw	r3,4(r2)
 800013c:	e0fffb17 	ldw	r3,-20(fp)
 8000140:	10c00215 	stw	r3,8(r2)
 8000144:	e0fffc17 	ldw	r3,-16(fp)
 8000148:	10c00315 	stw	r3,12(r2)
}
 800014c:	e0bffd17 	ldw	r2,-12(fp)
 8000150:	e037883a 	mov	sp,fp
 8000154:	df000017 	ldw	fp,0(sp)
 8000158:	dec00104 	addi	sp,sp,4
 800015c:	f800283a 	ret

08000160 <start_fade>:

void start_fade(fade_t* fade, float seconds) {
 8000160:	defffb04 	addi	sp,sp,-20
 8000164:	dfc00415 	stw	ra,16(sp)
 8000168:	df000315 	stw	fp,12(sp)
 800016c:	df000304 	addi	fp,sp,12
 8000170:	e13ffe15 	stw	r4,-8(fp)
 8000174:	e17fff15 	stw	r5,-4(fp)
    float time  = get_time();
 8000178:	800337c0 	call	800337c <get_time>
 800017c:	e0bffd15 	stw	r2,-12(fp)
    fade->start = time;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	e0fffd17 	ldw	r3,-12(fp)
 8000188:	10c00015 	stw	r3,0(r2)
    fade->end   = time + seconds;
 800018c:	e17fff17 	ldw	r5,-4(fp)
 8000190:	e13ffd17 	ldw	r4,-12(fp)
 8000194:	8007f7c0 	call	8007f7c <__addsf3>
 8000198:	1009883a 	mov	r4,r2
 800019c:	2007883a 	mov	r3,r4
 80001a0:	e0bffe17 	ldw	r2,-8(fp)
 80001a4:	10c00115 	stw	r3,4(r2)
}
 80001a8:	0001883a 	nop
 80001ac:	e037883a 	mov	sp,fp
 80001b0:	dfc00117 	ldw	ra,4(sp)
 80001b4:	df000017 	ldw	fp,0(sp)
 80001b8:	dec00204 	addi	sp,sp,8
 80001bc:	f800283a 	ret

080001c0 <is_fade_done>:

int is_fade_done(fade_t* fade) { return (get_time() - fade->start >= fade->end); }
 80001c0:	defffc04 	addi	sp,sp,-16
 80001c4:	dfc00315 	stw	ra,12(sp)
 80001c8:	df000215 	stw	fp,8(sp)
 80001cc:	dc000115 	stw	r16,4(sp)
 80001d0:	df000204 	addi	fp,sp,8
 80001d4:	e13ffe15 	stw	r4,-8(fp)
 80001d8:	800337c0 	call	800337c <get_time>
 80001dc:	1009883a 	mov	r4,r2
 80001e0:	e0bffe17 	ldw	r2,-8(fp)
 80001e4:	10c00017 	ldw	r3,0(r2)
 80001e8:	180b883a 	mov	r5,r3
 80001ec:	8008e380 	call	8008e38 <__subsf3>
 80001f0:	1007883a 	mov	r3,r2
 80001f4:	1809883a 	mov	r4,r3
 80001f8:	e0bffe17 	ldw	r2,-8(fp)
 80001fc:	10c00117 	ldw	r3,4(r2)
 8000200:	04000044 	movi	r16,1
 8000204:	180b883a 	mov	r5,r3
 8000208:	80088840 	call	8008884 <__gesf2>
 800020c:	1000010e 	bge	r2,zero,8000214 <is_fade_done+0x54>
 8000210:	0021883a 	mov	r16,zero
 8000214:	80803fcc 	andi	r2,r16,255
 8000218:	e6ffff04 	addi	sp,fp,-4
 800021c:	dfc00217 	ldw	ra,8(sp)
 8000220:	df000117 	ldw	fp,4(sp)
 8000224:	dc000017 	ldw	r16,0(sp)
 8000228:	dec00304 	addi	sp,sp,12
 800022c:	f800283a 	ret

08000230 <show_fade>:

int show_fade(fade_t* fade) {
 8000230:	defffa04 	addi	sp,sp,-24
 8000234:	dfc00515 	stw	ra,20(sp)
 8000238:	df000415 	stw	fp,16(sp)
 800023c:	dc000315 	stw	r16,12(sp)
 8000240:	df000404 	addi	fp,sp,16
 8000244:	e13ffe15 	stw	r4,-8(fp)
    float bias = (get_time() - fade->start) / (fade->end - fade->start);
 8000248:	800337c0 	call	800337c <get_time>
 800024c:	1009883a 	mov	r4,r2
 8000250:	e0bffe17 	ldw	r2,-8(fp)
 8000254:	10c00017 	ldw	r3,0(r2)
 8000258:	180b883a 	mov	r5,r3
 800025c:	8008e380 	call	8008e38 <__subsf3>
 8000260:	1007883a 	mov	r3,r2
 8000264:	1821883a 	mov	r16,r3
 8000268:	e0bffe17 	ldw	r2,-8(fp)
 800026c:	10c00117 	ldw	r3,4(r2)
 8000270:	e0bffe17 	ldw	r2,-8(fp)
 8000274:	11000017 	ldw	r4,0(r2)
 8000278:	200b883a 	mov	r5,r4
 800027c:	1809883a 	mov	r4,r3
 8000280:	8008e380 	call	8008e38 <__subsf3>
 8000284:	1007883a 	mov	r3,r2
 8000288:	1805883a 	mov	r2,r3
 800028c:	100b883a 	mov	r5,r2
 8000290:	8009883a 	mov	r4,r16
 8000294:	80084440 	call	8008444 <__divsf3>
 8000298:	1007883a 	mov	r3,r2
 800029c:	e0fffc15 	stw	r3,-16(fp)
    int done = bias > 1;
 80002a0:	04000044 	movi	r16,1
 80002a4:	014fe034 	movhi	r5,16256
 80002a8:	e13ffc17 	ldw	r4,-16(fp)
 80002ac:	80088840 	call	8008884 <__gesf2>
 80002b0:	00800116 	blt	zero,r2,80002b8 <show_fade+0x88>
 80002b4:	0021883a 	mov	r16,zero
 80002b8:	80803fcc 	andi	r2,r16,255
 80002bc:	e0bffd15 	stw	r2,-12(fp)
    if (done)
 80002c0:	e0bffd17 	ldw	r2,-12(fp)
 80002c4:	10000226 	beq	r2,zero,80002d0 <show_fade+0xa0>
        bias = 1;
 80002c8:	008fe034 	movhi	r2,16256
 80002cc:	e0bffc15 	stw	r2,-16(fp)
    if (fade->dir == FADE_FROM)
 80002d0:	e0bffe17 	ldw	r2,-8(fp)
 80002d4:	10800217 	ldw	r2,8(r2)
 80002d8:	10800058 	cmpnei	r2,r2,1
 80002dc:	1000051e 	bne	r2,zero,80002f4 <show_fade+0xc4>
        bias = 1 - bias;
 80002e0:	e17ffc17 	ldw	r5,-16(fp)
 80002e4:	010fe034 	movhi	r4,16256
 80002e8:	8008e380 	call	8008e38 <__subsf3>
 80002ec:	1007883a 	mov	r3,r2
 80002f0:	e0fffc15 	stw	r3,-16(fp)
    set_aura(fade->color, (uint32_t) (64 * bias));
 80002f4:	e0bffe17 	ldw	r2,-8(fp)
 80002f8:	1080030b 	ldhu	r2,12(r2)
 80002fc:	143fffcc 	andi	r16,r2,65535
 8000300:	0150a034 	movhi	r5,17024
 8000304:	e13ffc17 	ldw	r4,-16(fp)
 8000308:	8008a080 	call	8008a08 <__mulsf3>
 800030c:	1007883a 	mov	r3,r2
 8000310:	1805883a 	mov	r2,r3
 8000314:	1009883a 	mov	r4,r2
 8000318:	80076340 	call	8007634 <__fixunssfsi>
 800031c:	100b883a 	mov	r5,r2
 8000320:	8009883a 	mov	r4,r16
 8000324:	80055d00 	call	80055d0 <set_aura>
    return done;
 8000328:	e0bffd17 	ldw	r2,-12(fp)
}
 800032c:	e6ffff04 	addi	sp,fp,-4
 8000330:	dfc00217 	ldw	ra,8(sp)
 8000334:	df000117 	ldw	fp,4(sp)
 8000338:	dc000017 	ldw	r16,0(sp)
 800033c:	dec00304 	addi	sp,sp,12
 8000340:	f800283a 	ret

08000344 <is_clicked>:

int is_clicked(mouse_t* mouse, game_object_t* object) {
 8000344:	defffd04 	addi	sp,sp,-12
 8000348:	df000215 	stw	fp,8(sp)
 800034c:	df000204 	addi	fp,sp,8
 8000350:	e13ffe15 	stw	r4,-8(fp)
 8000354:	e17fff15 	stw	r5,-4(fp)
    return (mouse->pos.x >= object->pos.x && 
 8000358:	e0bffe17 	ldw	r2,-8(fp)
 800035c:	10c00017 	ldw	r3,0(r2)
 8000360:	e0bfff17 	ldw	r2,-4(fp)
 8000364:	10800317 	ldw	r2,12(r2)
        mouse->pos.x <= object->pos.x + (object->sprite.end_x - object->sprite.start_x) &&
        mouse->pos.y >= object->pos.y && 
 8000368:	18801d16 	blt	r3,r2,80003e0 <is_clicked+0x9c>
    return done;
}

int is_clicked(mouse_t* mouse, game_object_t* object) {
    return (mouse->pos.x >= object->pos.x && 
        mouse->pos.x <= object->pos.x + (object->sprite.end_x - object->sprite.start_x) &&
 800036c:	e0bffe17 	ldw	r2,-8(fp)
 8000370:	10800017 	ldw	r2,0(r2)
 8000374:	e0ffff17 	ldw	r3,-4(fp)
 8000378:	19000317 	ldw	r4,12(r3)
 800037c:	e0ffff17 	ldw	r3,-4(fp)
 8000380:	19400c17 	ldw	r5,48(r3)
 8000384:	e0ffff17 	ldw	r3,-4(fp)
 8000388:	18c00a17 	ldw	r3,40(r3)
 800038c:	28c7c83a 	sub	r3,r5,r3
 8000390:	20c7883a 	add	r3,r4,r3
    set_aura(fade->color, (uint32_t) (64 * bias));
    return done;
}

int is_clicked(mouse_t* mouse, game_object_t* object) {
    return (mouse->pos.x >= object->pos.x && 
 8000394:	18801216 	blt	r3,r2,80003e0 <is_clicked+0x9c>
        mouse->pos.x <= object->pos.x + (object->sprite.end_x - object->sprite.start_x) &&
        mouse->pos.y >= object->pos.y && 
 8000398:	e0bffe17 	ldw	r2,-8(fp)
 800039c:	10c00117 	ldw	r3,4(r2)
 80003a0:	e0bfff17 	ldw	r2,-4(fp)
 80003a4:	10800417 	ldw	r2,16(r2)
    return done;
}

int is_clicked(mouse_t* mouse, game_object_t* object) {
    return (mouse->pos.x >= object->pos.x && 
        mouse->pos.x <= object->pos.x + (object->sprite.end_x - object->sprite.start_x) &&
 80003a8:	18800d16 	blt	r3,r2,80003e0 <is_clicked+0x9c>
        mouse->pos.y >= object->pos.y && 
        mouse->pos.y <= object->pos.y + (object->sprite.end_y - object->sprite.start_y));
 80003ac:	e0bffe17 	ldw	r2,-8(fp)
 80003b0:	10800117 	ldw	r2,4(r2)
 80003b4:	e0ffff17 	ldw	r3,-4(fp)
 80003b8:	19000417 	ldw	r4,16(r3)
 80003bc:	e0ffff17 	ldw	r3,-4(fp)
 80003c0:	19400d17 	ldw	r5,52(r3)
 80003c4:	e0ffff17 	ldw	r3,-4(fp)
 80003c8:	18c00b17 	ldw	r3,44(r3)
 80003cc:	28c7c83a 	sub	r3,r5,r3
 80003d0:	20c7883a 	add	r3,r4,r3
}

int is_clicked(mouse_t* mouse, game_object_t* object) {
    return (mouse->pos.x >= object->pos.x && 
        mouse->pos.x <= object->pos.x + (object->sprite.end_x - object->sprite.start_x) &&
        mouse->pos.y >= object->pos.y && 
 80003d4:	18800216 	blt	r3,r2,80003e0 <is_clicked+0x9c>
 80003d8:	00800044 	movi	r2,1
 80003dc:	00000106 	br	80003e4 <is_clicked+0xa0>
 80003e0:	0005883a 	mov	r2,zero
        mouse->pos.y <= object->pos.y + (object->sprite.end_y - object->sprite.start_y));
}
 80003e4:	e037883a 	mov	sp,fp
 80003e8:	df000017 	ldw	fp,0(sp)
 80003ec:	dec00104 	addi	sp,sp,4
 80003f0:	f800283a 	ret

080003f4 <handle_mouse>:

void handle_mouse(mouse_t* mouse, scene_t* scene, int h_scroll, int v_scroll) {
 80003f4:	defffb04 	addi	sp,sp,-20
 80003f8:	df000415 	stw	fp,16(sp)
 80003fc:	df000404 	addi	fp,sp,16
 8000400:	e13ffc15 	stw	r4,-16(fp)
 8000404:	e17ffd15 	stw	r5,-12(fp)
 8000408:	e1bffe15 	stw	r6,-8(fp)
 800040c:	e1ffff15 	stw	r7,-4(fp)
    if (mouse->pos.x < 0) {
 8000410:	e0bffc17 	ldw	r2,-16(fp)
 8000414:	10800017 	ldw	r2,0(r2)
 8000418:	1000110e 	bge	r2,zero,8000460 <handle_mouse+0x6c>
        if (h_scroll) {
 800041c:	e0bffe17 	ldw	r2,-8(fp)
 8000420:	10000c26 	beq	r2,zero,8000454 <handle_mouse+0x60>
            scene->scroll.pos.x += mouse->pos.x;
 8000424:	e0bffd17 	ldw	r2,-12(fp)
 8000428:	10c00017 	ldw	r3,0(r2)
 800042c:	e0bffc17 	ldw	r2,-16(fp)
 8000430:	10800017 	ldw	r2,0(r2)
 8000434:	1887883a 	add	r3,r3,r2
 8000438:	e0bffd17 	ldw	r2,-12(fp)
 800043c:	10c00015 	stw	r3,0(r2)
            if (scene->scroll.pos.x < 0)
 8000440:	e0bffd17 	ldw	r2,-12(fp)
 8000444:	10800017 	ldw	r2,0(r2)
 8000448:	1000020e 	bge	r2,zero,8000454 <handle_mouse+0x60>
                scene->scroll.pos.x = 0;
 800044c:	e0bffd17 	ldw	r2,-12(fp)
 8000450:	10000015 	stw	zero,0(r2)
        }
        mouse->pos.x = 0;
 8000454:	e0bffc17 	ldw	r2,-16(fp)
 8000458:	10000015 	stw	zero,0(r2)
 800045c:	00001a06 	br	80004c8 <handle_mouse+0xd4>
    } else if (mouse->pos.x > SCREEN_WIDTH) {
 8000460:	e0bffc17 	ldw	r2,-16(fp)
 8000464:	10800017 	ldw	r2,0(r2)
 8000468:	1080a050 	cmplti	r2,r2,641
 800046c:	1000161e 	bne	r2,zero,80004c8 <handle_mouse+0xd4>
        if (h_scroll) {
 8000470:	e0bffe17 	ldw	r2,-8(fp)
 8000474:	10001126 	beq	r2,zero,80004bc <handle_mouse+0xc8>
            scene->scroll.pos.x += mouse->pos.x - SCREEN_WIDTH;
 8000478:	e0bffd17 	ldw	r2,-12(fp)
 800047c:	10c00017 	ldw	r3,0(r2)
 8000480:	e0bffc17 	ldw	r2,-16(fp)
 8000484:	10800017 	ldw	r2,0(r2)
 8000488:	10bf6004 	addi	r2,r2,-640
 800048c:	1887883a 	add	r3,r3,r2
 8000490:	e0bffd17 	ldw	r2,-12(fp)
 8000494:	10c00015 	stw	r3,0(r2)
            if (scene->scroll.pos.x > scene->scroll.max.x)
 8000498:	e0bffd17 	ldw	r2,-12(fp)
 800049c:	10800017 	ldw	r2,0(r2)
 80004a0:	e0fffd17 	ldw	r3,-12(fp)
 80004a4:	18c00217 	ldw	r3,8(r3)
 80004a8:	1880040e 	bge	r3,r2,80004bc <handle_mouse+0xc8>
                scene->scroll.pos.x = scene->scroll.max.x;
 80004ac:	e0bffd17 	ldw	r2,-12(fp)
 80004b0:	10c00217 	ldw	r3,8(r2)
 80004b4:	e0bffd17 	ldw	r2,-12(fp)
 80004b8:	10c00015 	stw	r3,0(r2)
        }
        mouse->pos.x = SCREEN_WIDTH;
 80004bc:	e0bffc17 	ldw	r2,-16(fp)
 80004c0:	00c0a004 	movi	r3,640
 80004c4:	10c00015 	stw	r3,0(r2)
    }       
    if (mouse->pos.y < 0) {
 80004c8:	e0bffc17 	ldw	r2,-16(fp)
 80004cc:	10800117 	ldw	r2,4(r2)
 80004d0:	1000110e 	bge	r2,zero,8000518 <handle_mouse+0x124>
        if (v_scroll) {
 80004d4:	e0bfff17 	ldw	r2,-4(fp)
 80004d8:	10000c26 	beq	r2,zero,800050c <handle_mouse+0x118>
            scene->scroll.pos.y += mouse->pos.y;
 80004dc:	e0bffd17 	ldw	r2,-12(fp)
 80004e0:	10c00117 	ldw	r3,4(r2)
 80004e4:	e0bffc17 	ldw	r2,-16(fp)
 80004e8:	10800117 	ldw	r2,4(r2)
 80004ec:	1887883a 	add	r3,r3,r2
 80004f0:	e0bffd17 	ldw	r2,-12(fp)
 80004f4:	10c00115 	stw	r3,4(r2)
            if (scene->scroll.pos.y < 0)
 80004f8:	e0bffd17 	ldw	r2,-12(fp)
 80004fc:	10800117 	ldw	r2,4(r2)
 8000500:	1000020e 	bge	r2,zero,800050c <handle_mouse+0x118>
                scene->scroll.pos.y = 0;
 8000504:	e0bffd17 	ldw	r2,-12(fp)
 8000508:	10000115 	stw	zero,4(r2)
        }
        mouse->pos.y = 0;
 800050c:	e0bffc17 	ldw	r2,-16(fp)
 8000510:	10000115 	stw	zero,4(r2)
            if (scene->scroll.pos.y > scene->scroll.max.y)
                scene->scroll.pos.y = scene->scroll.max.y;
        }
        mouse->pos.y = SCREEN_HEIGHT;
    }
 8000514:	00001a06 	br	8000580 <handle_mouse+0x18c>
            scene->scroll.pos.y += mouse->pos.y;
            if (scene->scroll.pos.y < 0)
                scene->scroll.pos.y = 0;
        }
        mouse->pos.y = 0;
    } else if (mouse->pos.y > SCREEN_HEIGHT) {
 8000518:	e0bffc17 	ldw	r2,-16(fp)
 800051c:	10800117 	ldw	r2,4(r2)
 8000520:	10807850 	cmplti	r2,r2,481
 8000524:	1000161e 	bne	r2,zero,8000580 <handle_mouse+0x18c>
        if (v_scroll) {
 8000528:	e0bfff17 	ldw	r2,-4(fp)
 800052c:	10001126 	beq	r2,zero,8000574 <handle_mouse+0x180>
            scene->scroll.pos.y += mouse->pos.y - SCREEN_HEIGHT;
 8000530:	e0bffd17 	ldw	r2,-12(fp)
 8000534:	10c00117 	ldw	r3,4(r2)
 8000538:	e0bffc17 	ldw	r2,-16(fp)
 800053c:	10800117 	ldw	r2,4(r2)
 8000540:	10bf8804 	addi	r2,r2,-480
 8000544:	1887883a 	add	r3,r3,r2
 8000548:	e0bffd17 	ldw	r2,-12(fp)
 800054c:	10c00115 	stw	r3,4(r2)
            if (scene->scroll.pos.y > scene->scroll.max.y)
 8000550:	e0bffd17 	ldw	r2,-12(fp)
 8000554:	10800117 	ldw	r2,4(r2)
 8000558:	e0fffd17 	ldw	r3,-12(fp)
 800055c:	18c00317 	ldw	r3,12(r3)
 8000560:	1880040e 	bge	r3,r2,8000574 <handle_mouse+0x180>
                scene->scroll.pos.y = scene->scroll.max.y;
 8000564:	e0bffd17 	ldw	r2,-12(fp)
 8000568:	10c00317 	ldw	r3,12(r2)
 800056c:	e0bffd17 	ldw	r2,-12(fp)
 8000570:	10c00115 	stw	r3,4(r2)
        }
        mouse->pos.y = SCREEN_HEIGHT;
 8000574:	e0bffc17 	ldw	r2,-16(fp)
 8000578:	00c07804 	movi	r3,480
 800057c:	10c00115 	stw	r3,4(r2)
    }
 8000580:	0001883a 	nop
 8000584:	e037883a 	mov	sp,fp
 8000588:	df000017 	ldw	fp,0(sp)
 800058c:	dec00104 	addi	sp,sp,4
 8000590:	f800283a 	ret

08000594 <init_object>:
#include "game.h"
#include "vga.h"
#include <string.h>
#include <math.h>

void init_object(game_object_t* object, int visable, int scrolling) {
 8000594:	defffb04 	addi	sp,sp,-20
 8000598:	dfc00415 	stw	ra,16(sp)
 800059c:	df000315 	stw	fp,12(sp)
 80005a0:	df000304 	addi	fp,sp,12
 80005a4:	e13ffd15 	stw	r4,-12(fp)
 80005a8:	e17ffe15 	stw	r5,-8(fp)
 80005ac:	e1bfff15 	stw	r6,-4(fp)
    memset(object, 0, sizeof(game_object_t));
 80005b0:	01800e04 	movi	r6,56
 80005b4:	000b883a 	mov	r5,zero
 80005b8:	e13ffd17 	ldw	r4,-12(fp)
 80005bc:	800c01c0 	call	800c01c <memset>
    object->used    = 1;
 80005c0:	e0bffd17 	ldw	r2,-12(fp)
 80005c4:	00c00044 	movi	r3,1
 80005c8:	10c00015 	stw	r3,0(r2)
    object->visable = visable;
 80005cc:	e0bffd17 	ldw	r2,-12(fp)
 80005d0:	e0fffe17 	ldw	r3,-8(fp)
 80005d4:	10c00115 	stw	r3,4(r2)
    object->scroll  = scrolling;
 80005d8:	e0bffd17 	ldw	r2,-12(fp)
 80005dc:	e0ffff17 	ldw	r3,-4(fp)
 80005e0:	10c00215 	stw	r3,8(r2)
}
 80005e4:	0001883a 	nop
 80005e8:	e037883a 	mov	sp,fp
 80005ec:	dfc00117 	ldw	ra,4(sp)
 80005f0:	df000017 	ldw	fp,0(sp)
 80005f4:	dec00204 	addi	sp,sp,8
 80005f8:	f800283a 	ret

080005fc <allocate_object>:

int allocate_object(scene_t* scene, int type, int visable, int scrolling) {
 80005fc:	defff604 	addi	sp,sp,-40
 8000600:	dfc00915 	stw	ra,36(sp)
 8000604:	df000815 	stw	fp,32(sp)
 8000608:	dc000715 	stw	r16,28(sp)
 800060c:	df000804 	addi	fp,sp,32
 8000610:	e13ffb15 	stw	r4,-20(fp)
 8000614:	e17ffc15 	stw	r5,-16(fp)
 8000618:	e1bffd15 	stw	r6,-12(fp)
 800061c:	e1fffe15 	stw	r7,-8(fp)
    switch (type) {
 8000620:	e0bffc17 	ldw	r2,-16(fp)
 8000624:	10c00060 	cmpeqi	r3,r2,1
 8000628:	1800271e 	bne	r3,zero,80006c8 <allocate_object+0xcc>
 800062c:	10c00088 	cmpgei	r3,r2,2
 8000630:	1800021e 	bne	r3,zero,800063c <allocate_object+0x40>
 8000634:	10000626 	beq	r2,zero,8000650 <allocate_object+0x54>
 8000638:	00006e06 	br	80007f4 <allocate_object+0x1f8>
 800063c:	10c000a0 	cmpeqi	r3,r2,2
 8000640:	1800401e 	bne	r3,zero,8000744 <allocate_object+0x148>
 8000644:	108000e0 	cmpeqi	r2,r2,3
 8000648:	10005e1e 	bne	r2,zero,80007c4 <allocate_object+0x1c8>
 800064c:	00006906 	br	80007f4 <allocate_object+0x1f8>
        case BACKGROUND:
            for (int i = 0; i < BACKGROUND_SPRITES; i++) {
 8000650:	e03ff815 	stw	zero,-32(fp)
 8000654:	00001806 	br	80006b8 <allocate_object+0xbc>
                if (!scene->objects.typed.background[i].used) {
 8000658:	e43ffb17 	ldw	r16,-20(fp)
 800065c:	e0bff817 	ldw	r2,-32(fp)
 8000660:	01400e04 	movi	r5,56
 8000664:	1009883a 	mov	r4,r2
 8000668:	8007f540 	call	8007f54 <__mulsi3>
 800066c:	8085883a 	add	r2,r16,r2
 8000670:	10807e04 	addi	r2,r2,504
 8000674:	10800017 	ldw	r2,0(r2)
 8000678:	10000c1e 	bne	r2,zero,80006ac <allocate_object+0xb0>
                    init_object(&scene->objects.typed.background[i], visable, scrolling);
 800067c:	01400e04 	movi	r5,56
 8000680:	e13ff817 	ldw	r4,-32(fp)
 8000684:	8007f540 	call	8007f54 <__mulsi3>
 8000688:	10807e04 	addi	r2,r2,504
 800068c:	e0fffb17 	ldw	r3,-20(fp)
 8000690:	1885883a 	add	r2,r3,r2
 8000694:	e1bffe17 	ldw	r6,-8(fp)
 8000698:	e17ffd17 	ldw	r5,-12(fp)
 800069c:	1009883a 	mov	r4,r2
 80006a0:	80005940 	call	8000594 <init_object>
                    return i;
 80006a4:	e0bff817 	ldw	r2,-32(fp)
 80006a8:	00005306 	br	80007f8 <allocate_object+0x1fc>
}

int allocate_object(scene_t* scene, int type, int visable, int scrolling) {
    switch (type) {
        case BACKGROUND:
            for (int i = 0; i < BACKGROUND_SPRITES; i++) {
 80006ac:	e0bff817 	ldw	r2,-32(fp)
 80006b0:	10800044 	addi	r2,r2,1
 80006b4:	e0bff815 	stw	r2,-32(fp)
 80006b8:	e0bff817 	ldw	r2,-32(fp)
 80006bc:	10800210 	cmplti	r2,r2,8
 80006c0:	103fe51e 	bne	r2,zero,8000658 <__alt_data_end+0xfc000658>
                if (!scene->objects.typed.background[i].used) {
                    init_object(&scene->objects.typed.background[i], visable, scrolling);
                    return i;
                }
            }
            break;
 80006c4:	00004b06 	br	80007f4 <allocate_object+0x1f8>
        
        case SHIPS:
            for (int i = 0; i < SHIP_SPRITES; i++) {
 80006c8:	e03ff915 	stw	zero,-28(fp)
 80006cc:	00001906 	br	8000734 <allocate_object+0x138>
                if (!scene->objects.typed.ships[i].used) {
 80006d0:	e43ffb17 	ldw	r16,-20(fp)
 80006d4:	e0bff917 	ldw	r2,-28(fp)
 80006d8:	01400e04 	movi	r5,56
 80006dc:	1009883a 	mov	r4,r2
 80006e0:	8007f540 	call	8007f54 <__mulsi3>
 80006e4:	8085883a 	add	r2,r16,r2
 80006e8:	1080ee04 	addi	r2,r2,952
 80006ec:	10800017 	ldw	r2,0(r2)
 80006f0:	10000d1e 	bne	r2,zero,8000728 <allocate_object+0x12c>
                    init_object(&scene->objects.typed.ships[i], visable, scrolling);
 80006f4:	01400e04 	movi	r5,56
 80006f8:	e13ff917 	ldw	r4,-28(fp)
 80006fc:	8007f540 	call	8007f54 <__mulsi3>
 8000700:	1080ee04 	addi	r2,r2,952
 8000704:	e0fffb17 	ldw	r3,-20(fp)
 8000708:	1885883a 	add	r2,r3,r2
 800070c:	e1bffe17 	ldw	r6,-8(fp)
 8000710:	e17ffd17 	ldw	r5,-12(fp)
 8000714:	1009883a 	mov	r4,r2
 8000718:	80005940 	call	8000594 <init_object>
                    return i + BACKGROUND_SPRITES;
 800071c:	e0bff917 	ldw	r2,-28(fp)
 8000720:	10800204 	addi	r2,r2,8
 8000724:	00003406 	br	80007f8 <allocate_object+0x1fc>
                }
            }
            break;
        
        case SHIPS:
            for (int i = 0; i < SHIP_SPRITES; i++) {
 8000728:	e0bff917 	ldw	r2,-28(fp)
 800072c:	10800044 	addi	r2,r2,1
 8000730:	e0bff915 	stw	r2,-28(fp)
 8000734:	e0bff917 	ldw	r2,-28(fp)
 8000738:	10800610 	cmplti	r2,r2,24
 800073c:	103fe41e 	bne	r2,zero,80006d0 <__alt_data_end+0xfc0006d0>
                if (!scene->objects.typed.ships[i].used) {
                    init_object(&scene->objects.typed.ships[i], visable, scrolling);
                    return i + BACKGROUND_SPRITES;
                }
            }
            break;
 8000740:	00002c06 	br	80007f4 <allocate_object+0x1f8>
        
        case EFFECTS:
            for (int i = 0 + SHIP_SPRITES; i < EFFECT_SPRITES; i++) {
 8000744:	00800604 	movi	r2,24
 8000748:	e0bffa15 	stw	r2,-24(fp)
 800074c:	00001906 	br	80007b4 <allocate_object+0x1b8>
                if (!scene->objects.typed.effects[i].used) {
 8000750:	e43ffb17 	ldw	r16,-20(fp)
 8000754:	e0bffa17 	ldw	r2,-24(fp)
 8000758:	01400e04 	movi	r5,56
 800075c:	1009883a 	mov	r4,r2
 8000760:	8007f540 	call	8007f54 <__mulsi3>
 8000764:	8085883a 	add	r2,r16,r2
 8000768:	10823e04 	addi	r2,r2,2296
 800076c:	10800017 	ldw	r2,0(r2)
 8000770:	10000d1e 	bne	r2,zero,80007a8 <allocate_object+0x1ac>
                    init_object(&scene->objects.typed.effects[i], visable, scrolling);
 8000774:	01400e04 	movi	r5,56
 8000778:	e13ffa17 	ldw	r4,-24(fp)
 800077c:	8007f540 	call	8007f54 <__mulsi3>
 8000780:	10823e04 	addi	r2,r2,2296
 8000784:	e0fffb17 	ldw	r3,-20(fp)
 8000788:	1885883a 	add	r2,r3,r2
 800078c:	e1bffe17 	ldw	r6,-8(fp)
 8000790:	e17ffd17 	ldw	r5,-12(fp)
 8000794:	1009883a 	mov	r4,r2
 8000798:	80005940 	call	8000594 <init_object>
                    return i + BACKGROUND_SPRITES + SHIP_SPRITES;
 800079c:	e0bffa17 	ldw	r2,-24(fp)
 80007a0:	10800804 	addi	r2,r2,32
 80007a4:	00001406 	br	80007f8 <allocate_object+0x1fc>
                }
            }
            break;
        
        case EFFECTS:
            for (int i = 0 + SHIP_SPRITES; i < EFFECT_SPRITES; i++) {
 80007a8:	e0bffa17 	ldw	r2,-24(fp)
 80007ac:	10800044 	addi	r2,r2,1
 80007b0:	e0bffa15 	stw	r2,-24(fp)
 80007b4:	e0bffa17 	ldw	r2,-24(fp)
 80007b8:	108007d0 	cmplti	r2,r2,31
 80007bc:	103fe41e 	bne	r2,zero,8000750 <__alt_data_end+0xfc000750>
                if (!scene->objects.typed.effects[i].used) {
                    init_object(&scene->objects.typed.effects[i], visable, scrolling);
                    return i + BACKGROUND_SPRITES + SHIP_SPRITES;
                }
            }
            break;
 80007c0:	00000c06 	br	80007f4 <allocate_object+0x1f8>
        
        case CURSOR:
            if (!scene->objects.typed.cursor.used) {
 80007c4:	e0bffb17 	ldw	r2,-20(fp)
 80007c8:	1083f017 	ldw	r2,4032(r2)
 80007cc:	1000081e 	bne	r2,zero,80007f0 <allocate_object+0x1f4>
                init_object(&scene->objects.typed.cursor, visable, scrolling);
 80007d0:	e0bffb17 	ldw	r2,-20(fp)
 80007d4:	1083f004 	addi	r2,r2,4032
 80007d8:	e1bffe17 	ldw	r6,-8(fp)
 80007dc:	e17ffd17 	ldw	r5,-12(fp)
 80007e0:	1009883a 	mov	r4,r2
 80007e4:	80005940 	call	8000594 <init_object>
                return MAX_SPRITES - 1;
 80007e8:	00800fc4 	movi	r2,63
 80007ec:	00000206 	br	80007f8 <allocate_object+0x1fc>
            }
            break;
 80007f0:	0001883a 	nop
    }
    return -1;
 80007f4:	00bfffc4 	movi	r2,-1
}
 80007f8:	e6ffff04 	addi	sp,fp,-4
 80007fc:	dfc00217 	ldw	ra,8(sp)
 8000800:	df000117 	ldw	fp,4(sp)
 8000804:	dc000017 	ldw	r16,0(sp)
 8000808:	dec00304 	addi	sp,sp,12
 800080c:	f800283a 	ret

08000810 <deallocate_object>:

void deallocate_object(scene_t* scene, uint32_t object) {
 8000810:	defffb04 	addi	sp,sp,-20
 8000814:	dfc00415 	stw	ra,16(sp)
 8000818:	df000315 	stw	fp,12(sp)
 800081c:	dc000215 	stw	r16,8(sp)
 8000820:	df000304 	addi	fp,sp,12
 8000824:	e13ffd15 	stw	r4,-12(fp)
 8000828:	e17ffe15 	stw	r5,-8(fp)
    if (object < MAX_SPRITES)
 800082c:	e0bffe17 	ldw	r2,-8(fp)
 8000830:	10801028 	cmpgeui	r2,r2,64
 8000834:	1000081e 	bne	r2,zero,8000858 <deallocate_object+0x48>
        scene->objects.untyped[object].used = 0;
 8000838:	e43ffd17 	ldw	r16,-12(fp)
 800083c:	e0bffe17 	ldw	r2,-8(fp)
 8000840:	01400e04 	movi	r5,56
 8000844:	1009883a 	mov	r4,r2
 8000848:	8007f540 	call	8007f54 <__mulsi3>
 800084c:	8085883a 	add	r2,r16,r2
 8000850:	10807e04 	addi	r2,r2,504
 8000854:	10000015 	stw	zero,0(r2)
}
 8000858:	0001883a 	nop
 800085c:	e6ffff04 	addi	sp,fp,-4
 8000860:	dfc00217 	ldw	ra,8(sp)
 8000864:	df000117 	ldw	fp,4(sp)
 8000868:	dc000017 	ldw	r16,0(sp)
 800086c:	dec00304 	addi	sp,sp,12
 8000870:	f800283a 	ret

08000874 <push_scene>:

void push_scene(scene_t* scene) {
 8000874:	defffa04 	addi	sp,sp,-24
 8000878:	dfc00515 	stw	ra,20(sp)
 800087c:	df000415 	stw	fp,16(sp)
 8000880:	df000404 	addi	fp,sp,16
 8000884:	e13fff15 	stw	r4,-4(fp)
    for (int i = 0; i < MAX_SPRITES; i++) {
 8000888:	e03ffc15 	stw	zero,-16(fp)
 800088c:	00004f06 	br	80009cc <push_scene+0x158>
        game_object_t* obj = &scene->objects.untyped[i];
 8000890:	01400e04 	movi	r5,56
 8000894:	e13ffc17 	ldw	r4,-16(fp)
 8000898:	8007f540 	call	8007f54 <__mulsi3>
 800089c:	10807e04 	addi	r2,r2,504
 80008a0:	e0ffff17 	ldw	r3,-4(fp)
 80008a4:	1885883a 	add	r2,r3,r2
 80008a8:	e0bffe15 	stw	r2,-8(fp)
        int pop = 1;
 80008ac:	00800044 	movi	r2,1
 80008b0:	e0bffd15 	stw	r2,-12(fp)
        
        if (obj->used && obj->visable) {
 80008b4:	e0bffe17 	ldw	r2,-8(fp)
 80008b8:	10800017 	ldw	r2,0(r2)
 80008bc:	10003526 	beq	r2,zero,8000994 <push_scene+0x120>
 80008c0:	e0bffe17 	ldw	r2,-8(fp)
 80008c4:	10800117 	ldw	r2,4(r2)
 80008c8:	10003226 	beq	r2,zero,8000994 <push_scene+0x120>
            obj->sprite.screen_x = obj->pos.x;
 80008cc:	e0bffe17 	ldw	r2,-8(fp)
 80008d0:	10c00317 	ldw	r3,12(r2)
 80008d4:	e0bffe17 	ldw	r2,-8(fp)
 80008d8:	10c00815 	stw	r3,32(r2)
            obj->sprite.screen_y = obj->pos.y;
 80008dc:	e0bffe17 	ldw	r2,-8(fp)
 80008e0:	10c00417 	ldw	r3,16(r2)
 80008e4:	e0bffe17 	ldw	r2,-8(fp)
 80008e8:	10c00915 	stw	r3,36(r2)

            if (obj->scroll) {
 80008ec:	e0bffe17 	ldw	r2,-8(fp)
 80008f0:	10800217 	ldw	r2,8(r2)
 80008f4:	10000e26 	beq	r2,zero,8000930 <push_scene+0xbc>
                obj->sprite.screen_x -= scene->scroll.pos.x;
 80008f8:	e0bffe17 	ldw	r2,-8(fp)
 80008fc:	10c00817 	ldw	r3,32(r2)
 8000900:	e0bfff17 	ldw	r2,-4(fp)
 8000904:	10800017 	ldw	r2,0(r2)
 8000908:	1887c83a 	sub	r3,r3,r2
 800090c:	e0bffe17 	ldw	r2,-8(fp)
 8000910:	10c00815 	stw	r3,32(r2)
                obj->sprite.screen_y -= scene->scroll.pos.y;
 8000914:	e0bffe17 	ldw	r2,-8(fp)
 8000918:	10c00917 	ldw	r3,36(r2)
 800091c:	e0bfff17 	ldw	r2,-4(fp)
 8000920:	10800117 	ldw	r2,4(r2)
 8000924:	1887c83a 	sub	r3,r3,r2
 8000928:	e0bffe17 	ldw	r2,-8(fp)
 800092c:	10c00915 	stw	r3,36(r2)
            }

            if (obj->sprite.screen_x >= -(obj->sprite.end_x - obj->sprite.start_x) &&
 8000930:	e0bffe17 	ldw	r2,-8(fp)
 8000934:	10c00817 	ldw	r3,32(r2)
 8000938:	e0bffe17 	ldw	r2,-8(fp)
 800093c:	11000a17 	ldw	r4,40(r2)
 8000940:	e0bffe17 	ldw	r2,-8(fp)
 8000944:	10800c17 	ldw	r2,48(r2)
 8000948:	2085c83a 	sub	r2,r4,r2
 800094c:	18801116 	blt	r3,r2,8000994 <push_scene+0x120>
                obj->sprite.screen_x < SCREEN_WIDTH &&
 8000950:	e0bffe17 	ldw	r2,-8(fp)
 8000954:	10800817 	ldw	r2,32(r2)
            if (obj->scroll) {
                obj->sprite.screen_x -= scene->scroll.pos.x;
                obj->sprite.screen_y -= scene->scroll.pos.y;
            }

            if (obj->sprite.screen_x >= -(obj->sprite.end_x - obj->sprite.start_x) &&
 8000958:	1080a008 	cmpgei	r2,r2,640
 800095c:	10000d1e 	bne	r2,zero,8000994 <push_scene+0x120>
                obj->sprite.screen_x < SCREEN_WIDTH &&
                obj->sprite.screen_y >= -(obj->sprite.end_y - obj->sprite.start_y) &&
 8000960:	e0bffe17 	ldw	r2,-8(fp)
 8000964:	10c00917 	ldw	r3,36(r2)
 8000968:	e0bffe17 	ldw	r2,-8(fp)
 800096c:	11000b17 	ldw	r4,44(r2)
 8000970:	e0bffe17 	ldw	r2,-8(fp)
 8000974:	10800d17 	ldw	r2,52(r2)
 8000978:	2085c83a 	sub	r2,r4,r2
                obj->sprite.screen_x -= scene->scroll.pos.x;
                obj->sprite.screen_y -= scene->scroll.pos.y;
            }

            if (obj->sprite.screen_x >= -(obj->sprite.end_x - obj->sprite.start_x) &&
                obj->sprite.screen_x < SCREEN_WIDTH &&
 800097c:	18800516 	blt	r3,r2,8000994 <push_scene+0x120>
                obj->sprite.screen_y >= -(obj->sprite.end_y - obj->sprite.start_y) &&
                obj->sprite.screen_y < SCREEN_HEIGHT)
 8000980:	e0bffe17 	ldw	r2,-8(fp)
 8000984:	10800917 	ldw	r2,36(r2)
                obj->sprite.screen_y -= scene->scroll.pos.y;
            }

            if (obj->sprite.screen_x >= -(obj->sprite.end_x - obj->sprite.start_x) &&
                obj->sprite.screen_x < SCREEN_WIDTH &&
                obj->sprite.screen_y >= -(obj->sprite.end_y - obj->sprite.start_y) &&
 8000988:	10807808 	cmpgei	r2,r2,480
 800098c:	1000011e 	bne	r2,zero,8000994 <push_scene+0x120>
                obj->sprite.screen_y < SCREEN_HEIGHT)
                pop = 0;
 8000990:	e03ffd15 	stw	zero,-12(fp)
        }

        if (pop)
 8000994:	e0bffd17 	ldw	r2,-12(fp)
 8000998:	10000326 	beq	r2,zero,80009a8 <push_scene+0x134>
            pop_sprite(i);
 800099c:	e13ffc17 	ldw	r4,-16(fp)
 80009a0:	80014b00 	call	80014b0 <pop_sprite>
 80009a4:	00000606 	br	80009c0 <push_scene+0x14c>
        else
            push_sprite(&obj->sprite, i);
 80009a8:	e0bffe17 	ldw	r2,-8(fp)
 80009ac:	10800504 	addi	r2,r2,20
 80009b0:	e0fffc17 	ldw	r3,-16(fp)
 80009b4:	180b883a 	mov	r5,r3
 80009b8:	1009883a 	mov	r4,r2
 80009bc:	80014400 	call	8001440 <push_sprite>
    if (object < MAX_SPRITES)
        scene->objects.untyped[object].used = 0;
}

void push_scene(scene_t* scene) {
    for (int i = 0; i < MAX_SPRITES; i++) {
 80009c0:	e0bffc17 	ldw	r2,-16(fp)
 80009c4:	10800044 	addi	r2,r2,1
 80009c8:	e0bffc15 	stw	r2,-16(fp)
 80009cc:	e0bffc17 	ldw	r2,-16(fp)
 80009d0:	10801010 	cmplti	r2,r2,64
 80009d4:	103fae1e 	bne	r2,zero,8000890 <__alt_data_end+0xfc000890>
            pop_sprite(i);
        else
            push_sprite(&obj->sprite, i);
              
    }
}
 80009d8:	0001883a 	nop
 80009dc:	e037883a 	mov	sp,fp
 80009e0:	dfc00117 	ldw	ra,4(sp)
 80009e4:	df000017 	ldw	fp,0(sp)
 80009e8:	dec00204 	addi	sp,sp,8
 80009ec:	f800283a 	ret

080009f0 <clear_scene>:

void clear_scene(scene_t* scene) {
 80009f0:	defffb04 	addi	sp,sp,-20
 80009f4:	dfc00415 	stw	ra,16(sp)
 80009f8:	df000315 	stw	fp,12(sp)
 80009fc:	dc000215 	stw	r16,8(sp)
 8000a00:	df000304 	addi	fp,sp,12
 8000a04:	e13ffe15 	stw	r4,-8(fp)
    memset(scene, 0, sizeof(scene_t));
 8000a08:	0183fe04 	movi	r6,4088
 8000a0c:	000b883a 	mov	r5,zero
 8000a10:	e13ffe17 	ldw	r4,-8(fp)
 8000a14:	800c01c0 	call	800c01c <memset>

    for (int i = 0; i < SHIP_SPRITES; i++) {
 8000a18:	e03ffd15 	stw	zero,-12(fp)
 8000a1c:	00001506 	br	8000a74 <clear_scene+0x84>
        scene->ships.player[i].index    = -1;
 8000a20:	e43ffe17 	ldw	r16,-8(fp)
 8000a24:	e0bffd17 	ldw	r2,-12(fp)
 8000a28:	01400504 	movi	r5,20
 8000a2c:	1009883a 	mov	r4,r2
 8000a30:	8007f540 	call	8007f54 <__mulsi3>
 8000a34:	8085883a 	add	r2,r16,r2
 8000a38:	10800604 	addi	r2,r2,24
 8000a3c:	00ffffc4 	movi	r3,-1
 8000a40:	10c00015 	stw	r3,0(r2)
        scene->ships.enemy[i].index     = -1;
 8000a44:	e43ffe17 	ldw	r16,-8(fp)
 8000a48:	e0bffd17 	ldw	r2,-12(fp)
 8000a4c:	01400504 	movi	r5,20
 8000a50:	1009883a 	mov	r4,r2
 8000a54:	8007f540 	call	8007f54 <__mulsi3>
 8000a58:	8085883a 	add	r2,r16,r2
 8000a5c:	10804204 	addi	r2,r2,264
 8000a60:	00ffffc4 	movi	r3,-1
 8000a64:	10c00015 	stw	r3,0(r2)
}

void clear_scene(scene_t* scene) {
    memset(scene, 0, sizeof(scene_t));

    for (int i = 0; i < SHIP_SPRITES; i++) {
 8000a68:	e0bffd17 	ldw	r2,-12(fp)
 8000a6c:	10800044 	addi	r2,r2,1
 8000a70:	e0bffd15 	stw	r2,-12(fp)
 8000a74:	e0bffd17 	ldw	r2,-12(fp)
 8000a78:	10800610 	cmplti	r2,r2,24
 8000a7c:	103fe81e 	bne	r2,zero,8000a20 <__alt_data_end+0xfc000a20>
        scene->ships.player[i].index    = -1;
        scene->ships.enemy[i].index     = -1;
    }
}
 8000a80:	0001883a 	nop
 8000a84:	e6ffff04 	addi	sp,fp,-4
 8000a88:	dfc00217 	ldw	ra,8(sp)
 8000a8c:	df000117 	ldw	fp,4(sp)
 8000a90:	dc000017 	ldw	r16,0(sp)
 8000a94:	dec00304 	addi	sp,sp,12
 8000a98:	f800283a 	ret

08000a9c <ship_select>:

ship_data_t* ship_select(scene_t* scene, int user) {
 8000a9c:	defffd04 	addi	sp,sp,-12
 8000aa0:	df000215 	stw	fp,8(sp)
 8000aa4:	df000204 	addi	fp,sp,8
 8000aa8:	e13ffe15 	stw	r4,-8(fp)
 8000aac:	e17fff15 	stw	r5,-4(fp)
    switch (user) {
 8000ab0:	e0bfff17 	ldw	r2,-4(fp)
 8000ab4:	10000326 	beq	r2,zero,8000ac4 <ship_select+0x28>
 8000ab8:	10800060 	cmpeqi	r2,r2,1
 8000abc:	1000041e 	bne	r2,zero,8000ad0 <ship_select+0x34>
 8000ac0:	00000606 	br	8000adc <ship_select+0x40>
        case PLAYER:
            return scene->ships.player;
 8000ac4:	e0bffe17 	ldw	r2,-8(fp)
 8000ac8:	10800604 	addi	r2,r2,24
 8000acc:	00000406 	br	8000ae0 <ship_select+0x44>
        case ENEMY:
            return scene->ships.enemy;
 8000ad0:	e0bffe17 	ldw	r2,-8(fp)
 8000ad4:	10804204 	addi	r2,r2,264
 8000ad8:	00000106 	br	8000ae0 <ship_select+0x44>
    }
    return NULL;
 8000adc:	0005883a 	mov	r2,zero
}
 8000ae0:	e037883a 	mov	sp,fp
 8000ae4:	df000017 	ldw	fp,0(sp)
 8000ae8:	dec00104 	addi	sp,sp,4
 8000aec:	f800283a 	ret

08000af0 <allocate_ship>:

int allocate_ship(scene_t* scene, int user) {
 8000af0:	defffa04 	addi	sp,sp,-24
 8000af4:	dfc00515 	stw	ra,20(sp)
 8000af8:	df000415 	stw	fp,16(sp)
 8000afc:	df000404 	addi	fp,sp,16
 8000b00:	e13ffe15 	stw	r4,-8(fp)
 8000b04:	e17fff15 	stw	r5,-4(fp)
    ship_data_t* ships = ship_select(scene, user);
 8000b08:	e17fff17 	ldw	r5,-4(fp)
 8000b0c:	e13ffe17 	ldw	r4,-8(fp)
 8000b10:	8000a9c0 	call	8000a9c <ship_select>
 8000b14:	e0bffd15 	stw	r2,-12(fp)
    if (ships == NULL)
 8000b18:	e0bffd17 	ldw	r2,-12(fp)
 8000b1c:	1000021e 	bne	r2,zero,8000b28 <allocate_ship+0x38>
        return -1;
 8000b20:	00bfffc4 	movi	r2,-1
 8000b24:	00001506 	br	8000b7c <allocate_ship+0x8c>
    
    for (int i = 0; i < USER_SHIPS; i++) {
 8000b28:	e03ffc15 	stw	zero,-16(fp)
 8000b2c:	00000f06 	br	8000b6c <allocate_ship+0x7c>
        if (ships[i].index == -1)
 8000b30:	e0bffc17 	ldw	r2,-16(fp)
 8000b34:	01400504 	movi	r5,20
 8000b38:	1009883a 	mov	r4,r2
 8000b3c:	8007f540 	call	8007f54 <__mulsi3>
 8000b40:	1007883a 	mov	r3,r2
 8000b44:	e0bffd17 	ldw	r2,-12(fp)
 8000b48:	10c5883a 	add	r2,r2,r3
 8000b4c:	10800017 	ldw	r2,0(r2)
 8000b50:	10bfffd8 	cmpnei	r2,r2,-1
 8000b54:	1000021e 	bne	r2,zero,8000b60 <allocate_ship+0x70>
            return i;
 8000b58:	e0bffc17 	ldw	r2,-16(fp)
 8000b5c:	00000706 	br	8000b7c <allocate_ship+0x8c>
int allocate_ship(scene_t* scene, int user) {
    ship_data_t* ships = ship_select(scene, user);
    if (ships == NULL)
        return -1;
    
    for (int i = 0; i < USER_SHIPS; i++) {
 8000b60:	e0bffc17 	ldw	r2,-16(fp)
 8000b64:	10800044 	addi	r2,r2,1
 8000b68:	e0bffc15 	stw	r2,-16(fp)
 8000b6c:	e0bffc17 	ldw	r2,-16(fp)
 8000b70:	10800310 	cmplti	r2,r2,12
 8000b74:	103fee1e 	bne	r2,zero,8000b30 <__alt_data_end+0xfc000b30>
        if (ships[i].index == -1)
            return i;
    }
    return -1;
 8000b78:	00bfffc4 	movi	r2,-1
}
 8000b7c:	e037883a 	mov	sp,fp
 8000b80:	dfc00117 	ldw	ra,4(sp)
 8000b84:	df000017 	ldw	fp,0(sp)
 8000b88:	dec00204 	addi	sp,sp,8
 8000b8c:	f800283a 	ret

08000b90 <ship_count>:

int ship_count(scene_t* scene, int user) {
 8000b90:	defff804 	addi	sp,sp,-32
 8000b94:	dfc00715 	stw	ra,28(sp)
 8000b98:	df000615 	stw	fp,24(sp)
 8000b9c:	dc000515 	stw	r16,20(sp)
 8000ba0:	df000604 	addi	fp,sp,24
 8000ba4:	e13ffd15 	stw	r4,-12(fp)
 8000ba8:	e17ffe15 	stw	r5,-8(fp)
    ship_data_t* ships = NULL;
 8000bac:	e03ffa15 	stw	zero,-24(fp)

    switch (user) {
 8000bb0:	e0bffe17 	ldw	r2,-8(fp)
 8000bb4:	10000326 	beq	r2,zero,8000bc4 <ship_count+0x34>
 8000bb8:	10800060 	cmpeqi	r2,r2,1
 8000bbc:	1000051e 	bne	r2,zero,8000bd4 <ship_count+0x44>
 8000bc0:	00000806 	br	8000be4 <ship_count+0x54>
        case PLAYER:
            ships = scene->ships.player;
 8000bc4:	e0bffd17 	ldw	r2,-12(fp)
 8000bc8:	10800604 	addi	r2,r2,24
 8000bcc:	e0bffa15 	stw	r2,-24(fp)
            break;
 8000bd0:	00000406 	br	8000be4 <ship_count+0x54>
        case ENEMY:
            ships = scene->ships.enemy;
 8000bd4:	e0bffd17 	ldw	r2,-12(fp)
 8000bd8:	10804204 	addi	r2,r2,264
 8000bdc:	e0bffa15 	stw	r2,-24(fp)
            break;
 8000be0:	0001883a 	nop
    }

    if (ships == NULL)
 8000be4:	e0bffa17 	ldw	r2,-24(fp)
 8000be8:	1000021e 	bne	r2,zero,8000bf4 <ship_count+0x64>
        return -1;
 8000bec:	00bfffc4 	movi	r2,-1
 8000bf0:	00001706 	br	8000c50 <ship_count+0xc0>
    
    int count = 0;
 8000bf4:	e03ffb15 	stw	zero,-20(fp)
    for (int i = 0; i < USER_SHIPS; i++) {
 8000bf8:	e03ffc15 	stw	zero,-16(fp)
 8000bfc:	00001006 	br	8000c40 <ship_count+0xb0>
        if (scene->ships.player[i].index != -1)
 8000c00:	e43ffd17 	ldw	r16,-12(fp)
 8000c04:	e0bffc17 	ldw	r2,-16(fp)
 8000c08:	01400504 	movi	r5,20
 8000c0c:	1009883a 	mov	r4,r2
 8000c10:	8007f540 	call	8007f54 <__mulsi3>
 8000c14:	8085883a 	add	r2,r16,r2
 8000c18:	10800604 	addi	r2,r2,24
 8000c1c:	10800017 	ldw	r2,0(r2)
 8000c20:	10bfffe0 	cmpeqi	r2,r2,-1
 8000c24:	1000031e 	bne	r2,zero,8000c34 <ship_count+0xa4>
            count++;
 8000c28:	e0bffb17 	ldw	r2,-20(fp)
 8000c2c:	10800044 	addi	r2,r2,1
 8000c30:	e0bffb15 	stw	r2,-20(fp)

    if (ships == NULL)
        return -1;
    
    int count = 0;
    for (int i = 0; i < USER_SHIPS; i++) {
 8000c34:	e0bffc17 	ldw	r2,-16(fp)
 8000c38:	10800044 	addi	r2,r2,1
 8000c3c:	e0bffc15 	stw	r2,-16(fp)
 8000c40:	e0bffc17 	ldw	r2,-16(fp)
 8000c44:	10800310 	cmplti	r2,r2,12
 8000c48:	103fed1e 	bne	r2,zero,8000c00 <__alt_data_end+0xfc000c00>
        if (scene->ships.player[i].index != -1)
            count++;
    }
    
    return count;
 8000c4c:	e0bffb17 	ldw	r2,-20(fp)
}
 8000c50:	e6ffff04 	addi	sp,fp,-4
 8000c54:	dfc00217 	ldw	ra,8(sp)
 8000c58:	df000117 	ldw	fp,4(sp)
 8000c5c:	dc000017 	ldw	r16,0(sp)
 8000c60:	dec00304 	addi	sp,sp,12
 8000c64:	f800283a 	ret

08000c68 <spawn_ship>:

int spawn_ship(scene_t* scene, const ship_t* ship, int user, position_t pos) {
 8000c68:	defff504 	addi	sp,sp,-44
 8000c6c:	dfc00915 	stw	ra,36(sp)
 8000c70:	df000815 	stw	fp,32(sp)
 8000c74:	dc400715 	stw	r17,28(sp)
 8000c78:	dc000615 	stw	r16,24(sp)
 8000c7c:	df000804 	addi	fp,sp,32
 8000c80:	e13ffb15 	stw	r4,-20(fp)
 8000c84:	e17ffc15 	stw	r5,-16(fp)
 8000c88:	e1bffd15 	stw	r6,-12(fp)
 8000c8c:	e1c00215 	stw	r7,8(fp)
    int sd_idx  = allocate_ship(scene, user);
 8000c90:	e17ffd17 	ldw	r5,-12(fp)
 8000c94:	e13ffb17 	ldw	r4,-20(fp)
 8000c98:	8000af00 	call	8000af0 <allocate_ship>
 8000c9c:	e0bff815 	stw	r2,-32(fp)
    if (sd_idx == -1)
 8000ca0:	e0bff817 	ldw	r2,-32(fp)
 8000ca4:	10bfffd8 	cmpnei	r2,r2,-1
 8000ca8:	1000021e 	bne	r2,zero,8000cb4 <spawn_ship+0x4c>
        return -1;
 8000cac:	00bfffc4 	movi	r2,-1
 8000cb0:	00005d06 	br	8000e28 <spawn_ship+0x1c0>
    
    int obj_idx = allocate_object(scene, SHIPS, 1, 1);
 8000cb4:	01c00044 	movi	r7,1
 8000cb8:	01800044 	movi	r6,1
 8000cbc:	01400044 	movi	r5,1
 8000cc0:	e13ffb17 	ldw	r4,-20(fp)
 8000cc4:	80005fc0 	call	80005fc <allocate_object>
 8000cc8:	e0bff915 	stw	r2,-28(fp)
    if (obj_idx == -1)
 8000ccc:	e0bff917 	ldw	r2,-28(fp)
 8000cd0:	10bfffd8 	cmpnei	r2,r2,-1
 8000cd4:	1000021e 	bne	r2,zero,8000ce0 <spawn_ship+0x78>
        return -1;
 8000cd8:	00bfffc4 	movi	r2,-1
 8000cdc:	00005206 	br	8000e28 <spawn_ship+0x1c0>

    ship_data_t* ships = ship_select(scene, user);
 8000ce0:	e17ffd17 	ldw	r5,-12(fp)
 8000ce4:	e13ffb17 	ldw	r4,-20(fp)
 8000ce8:	8000a9c0 	call	8000a9c <ship_select>
 8000cec:	e0bffa15 	stw	r2,-24(fp)

    ships[sd_idx].index     = obj_idx;
 8000cf0:	e0bff817 	ldw	r2,-32(fp)
 8000cf4:	01400504 	movi	r5,20
 8000cf8:	1009883a 	mov	r4,r2
 8000cfc:	8007f540 	call	8007f54 <__mulsi3>
 8000d00:	1007883a 	mov	r3,r2
 8000d04:	e0bffa17 	ldw	r2,-24(fp)
 8000d08:	10c5883a 	add	r2,r2,r3
 8000d0c:	e0fff917 	ldw	r3,-28(fp)
 8000d10:	10c00015 	stw	r3,0(r2)
    ships[sd_idx].hp        = ship->hp;
 8000d14:	e0bff817 	ldw	r2,-32(fp)
 8000d18:	01400504 	movi	r5,20
 8000d1c:	1009883a 	mov	r4,r2
 8000d20:	8007f540 	call	8007f54 <__mulsi3>
 8000d24:	1007883a 	mov	r3,r2
 8000d28:	e0bffa17 	ldw	r2,-24(fp)
 8000d2c:	10c5883a 	add	r2,r2,r3
 8000d30:	e0fffc17 	ldw	r3,-16(fp)
 8000d34:	18c00017 	ldw	r3,0(r3)
 8000d38:	10c00115 	stw	r3,4(r2)
    ships[sd_idx].speed     = ship->speed;
 8000d3c:	e0bff817 	ldw	r2,-32(fp)
 8000d40:	01400504 	movi	r5,20
 8000d44:	1009883a 	mov	r4,r2
 8000d48:	8007f540 	call	8007f54 <__mulsi3>
 8000d4c:	1007883a 	mov	r3,r2
 8000d50:	e0bffa17 	ldw	r2,-24(fp)
 8000d54:	10c5883a 	add	r2,r2,r3
 8000d58:	e0fffc17 	ldw	r3,-16(fp)
 8000d5c:	18c00117 	ldw	r3,4(r3)
 8000d60:	10c00215 	stw	r3,8(r2)
    ships[sd_idx].firerate  = ship->firerate;
 8000d64:	e0bff817 	ldw	r2,-32(fp)
 8000d68:	01400504 	movi	r5,20
 8000d6c:	1009883a 	mov	r4,r2
 8000d70:	8007f540 	call	8007f54 <__mulsi3>
 8000d74:	1007883a 	mov	r3,r2
 8000d78:	e0bffa17 	ldw	r2,-24(fp)
 8000d7c:	10c5883a 	add	r2,r2,r3
 8000d80:	e13ffc17 	ldw	r4,-16(fp)
 8000d84:	20c00317 	ldw	r3,12(r4)
 8000d88:	10c00415 	stw	r3,16(r2)
    
    scene->objects.untyped[obj_idx].sprite  = *ship->sprite;
 8000d8c:	e0bffc17 	ldw	r2,-16(fp)
 8000d90:	14000417 	ldw	r16,16(r2)
 8000d94:	e47ffb17 	ldw	r17,-20(fp)
 8000d98:	e0bff917 	ldw	r2,-28(fp)
 8000d9c:	01400e04 	movi	r5,56
 8000da0:	1009883a 	mov	r4,r2
 8000da4:	8007f540 	call	8007f54 <__mulsi3>
 8000da8:	8885883a 	add	r2,r17,r2
 8000dac:	10808304 	addi	r2,r2,524
 8000db0:	80c00017 	ldw	r3,0(r16)
 8000db4:	10c00015 	stw	r3,0(r2)
 8000db8:	80c00117 	ldw	r3,4(r16)
 8000dbc:	10c00115 	stw	r3,4(r2)
 8000dc0:	80c00217 	ldw	r3,8(r16)
 8000dc4:	10c00215 	stw	r3,8(r2)
 8000dc8:	80c00317 	ldw	r3,12(r16)
 8000dcc:	10c00315 	stw	r3,12(r2)
 8000dd0:	80c00417 	ldw	r3,16(r16)
 8000dd4:	10c00415 	stw	r3,16(r2)
 8000dd8:	80c00517 	ldw	r3,20(r16)
 8000ddc:	10c00515 	stw	r3,20(r2)
 8000de0:	80c00617 	ldw	r3,24(r16)
 8000de4:	10c00615 	stw	r3,24(r2)
 8000de8:	80c00717 	ldw	r3,28(r16)
 8000dec:	10c00715 	stw	r3,28(r2)
 8000df0:	80c00817 	ldw	r3,32(r16)
 8000df4:	10c00815 	stw	r3,32(r2)
    scene->objects.untyped[obj_idx].pos     = pos;
 8000df8:	e43ffb17 	ldw	r16,-20(fp)
 8000dfc:	e0bff917 	ldw	r2,-28(fp)
 8000e00:	01400e04 	movi	r5,56
 8000e04:	1009883a 	mov	r4,r2
 8000e08:	8007f540 	call	8007f54 <__mulsi3>
 8000e0c:	8085883a 	add	r2,r16,r2
 8000e10:	10808104 	addi	r2,r2,516
 8000e14:	e0c00217 	ldw	r3,8(fp)
 8000e18:	10c00015 	stw	r3,0(r2)
 8000e1c:	e0c00317 	ldw	r3,12(fp)
 8000e20:	10c00115 	stw	r3,4(r2)
    return sd_idx;
 8000e24:	e0bff817 	ldw	r2,-32(fp)
}
 8000e28:	e6fffe04 	addi	sp,fp,-8
 8000e2c:	dfc00317 	ldw	ra,12(sp)
 8000e30:	df000217 	ldw	fp,8(sp)
 8000e34:	dc400117 	ldw	r17,4(sp)
 8000e38:	dc000017 	ldw	r16,0(sp)
 8000e3c:	dec00504 	addi	sp,sp,20
 8000e40:	f800283a 	ret

08000e44 <destroy_ship>:

void destroy_ship(scene_t* scene, int user, uint32_t ship) {
 8000e44:	defffa04 	addi	sp,sp,-24
 8000e48:	dfc00515 	stw	ra,20(sp)
 8000e4c:	df000415 	stw	fp,16(sp)
 8000e50:	df000404 	addi	fp,sp,16
 8000e54:	e13ffd15 	stw	r4,-12(fp)
 8000e58:	e17ffe15 	stw	r5,-8(fp)
 8000e5c:	e1bfff15 	stw	r6,-4(fp)
    ship_data_t* ships = ship_select(scene, user);
 8000e60:	e17ffe17 	ldw	r5,-8(fp)
 8000e64:	e13ffd17 	ldw	r4,-12(fp)
 8000e68:	8000a9c0 	call	8000a9c <ship_select>
 8000e6c:	e0bffc15 	stw	r2,-16(fp)
    if (ships == NULL || ship >= USER_SHIPS)
 8000e70:	e0bffc17 	ldw	r2,-16(fp)
 8000e74:	10001626 	beq	r2,zero,8000ed0 <destroy_ship+0x8c>
 8000e78:	e0bfff17 	ldw	r2,-4(fp)
 8000e7c:	10800330 	cmpltui	r2,r2,12
 8000e80:	10001326 	beq	r2,zero,8000ed0 <destroy_ship+0x8c>
        return;
    
    deallocate_object(scene, ships[ship].index);
 8000e84:	01400504 	movi	r5,20
 8000e88:	e13fff17 	ldw	r4,-4(fp)
 8000e8c:	8007f540 	call	8007f54 <__mulsi3>
 8000e90:	1007883a 	mov	r3,r2
 8000e94:	e0bffc17 	ldw	r2,-16(fp)
 8000e98:	10c5883a 	add	r2,r2,r3
 8000e9c:	10800017 	ldw	r2,0(r2)
 8000ea0:	100b883a 	mov	r5,r2
 8000ea4:	e13ffd17 	ldw	r4,-12(fp)
 8000ea8:	80008100 	call	8000810 <deallocate_object>
    ships[ship].index = -1;
 8000eac:	01400504 	movi	r5,20
 8000eb0:	e13fff17 	ldw	r4,-4(fp)
 8000eb4:	8007f540 	call	8007f54 <__mulsi3>
 8000eb8:	1007883a 	mov	r3,r2
 8000ebc:	e0bffc17 	ldw	r2,-16(fp)
 8000ec0:	10c5883a 	add	r2,r2,r3
 8000ec4:	00ffffc4 	movi	r3,-1
 8000ec8:	10c00015 	stw	r3,0(r2)
 8000ecc:	00000106 	br	8000ed4 <destroy_ship+0x90>
}

void destroy_ship(scene_t* scene, int user, uint32_t ship) {
    ship_data_t* ships = ship_select(scene, user);
    if (ships == NULL || ship >= USER_SHIPS)
        return;
 8000ed0:	0001883a 	nop
    
    deallocate_object(scene, ships[ship].index);
    ships[ship].index = -1;

    // todo: spawn exposion??
}
 8000ed4:	e037883a 	mov	sp,fp
 8000ed8:	dfc00117 	ldw	ra,4(sp)
 8000edc:	df000017 	ldw	fp,0(sp)
 8000ee0:	dec00204 	addi	sp,sp,8
 8000ee4:	f800283a 	ret

08000ee8 <distance>:

float distance(position_t p1, position_t p2) { return sqrtf(pow(p2.x - p1.x, 2) + pow(p2.y - p1.y, 2)); }
 8000ee8:	defff804 	addi	sp,sp,-32
 8000eec:	dfc00715 	stw	ra,28(sp)
 8000ef0:	df000615 	stw	fp,24(sp)
 8000ef4:	dc400515 	stw	r17,20(sp)
 8000ef8:	dc000415 	stw	r16,16(sp)
 8000efc:	df000604 	addi	fp,sp,24
 8000f00:	e13ffa15 	stw	r4,-24(fp)
 8000f04:	e17ffb15 	stw	r5,-20(fp)
 8000f08:	e1bffc15 	stw	r6,-16(fp)
 8000f0c:	e1fffd15 	stw	r7,-12(fp)
 8000f10:	e0fffc17 	ldw	r3,-16(fp)
 8000f14:	e0bffa17 	ldw	r2,-24(fp)
 8000f18:	1885c83a 	sub	r2,r3,r2
 8000f1c:	1009883a 	mov	r4,r2
 8000f20:	800bb6c0 	call	800bb6c <__floatsidf>
 8000f24:	1011883a 	mov	r8,r2
 8000f28:	1813883a 	mov	r9,r3
 8000f2c:	000d883a 	mov	r6,zero
 8000f30:	01d00034 	movhi	r7,16384
 8000f34:	4009883a 	mov	r4,r8
 8000f38:	480b883a 	mov	r5,r9
 8000f3c:	80057280 	call	8005728 <pow>
 8000f40:	1021883a 	mov	r16,r2
 8000f44:	1823883a 	mov	r17,r3
 8000f48:	e0fffd17 	ldw	r3,-12(fp)
 8000f4c:	e0bffb17 	ldw	r2,-20(fp)
 8000f50:	1885c83a 	sub	r2,r3,r2
 8000f54:	1009883a 	mov	r4,r2
 8000f58:	800bb6c0 	call	800bb6c <__floatsidf>
 8000f5c:	1011883a 	mov	r8,r2
 8000f60:	1813883a 	mov	r9,r3
 8000f64:	000d883a 	mov	r6,zero
 8000f68:	01d00034 	movhi	r7,16384
 8000f6c:	4009883a 	mov	r4,r8
 8000f70:	480b883a 	mov	r5,r9
 8000f74:	80057280 	call	8005728 <pow>
 8000f78:	1009883a 	mov	r4,r2
 8000f7c:	180b883a 	mov	r5,r3
 8000f80:	200d883a 	mov	r6,r4
 8000f84:	280f883a 	mov	r7,r5
 8000f88:	8009883a 	mov	r4,r16
 8000f8c:	880b883a 	mov	r5,r17
 8000f90:	80094b00 	call	80094b0 <__adddf3>
 8000f94:	1009883a 	mov	r4,r2
 8000f98:	180b883a 	mov	r5,r3
 8000f9c:	2005883a 	mov	r2,r4
 8000fa0:	2807883a 	mov	r3,r5
 8000fa4:	1009883a 	mov	r4,r2
 8000fa8:	180b883a 	mov	r5,r3
 8000fac:	800be000 	call	800be00 <__truncdfsf2>
 8000fb0:	1007883a 	mov	r3,r2
 8000fb4:	1809883a 	mov	r4,r3
 8000fb8:	8005bec0 	call	8005bec <sqrtf>
 8000fbc:	1007883a 	mov	r3,r2
 8000fc0:	1805883a 	mov	r2,r3
 8000fc4:	e6fffe04 	addi	sp,fp,-8
 8000fc8:	dfc00317 	ldw	ra,12(sp)
 8000fcc:	df000217 	ldw	fp,8(sp)
 8000fd0:	dc400117 	ldw	r17,4(sp)
 8000fd4:	dc000017 	ldw	r16,0(sp)
 8000fd8:	dec00404 	addi	sp,sp,16
 8000fdc:	f800283a 	ret

08000fe0 <closest_ship>:

int closest_ship(scene_t* scene, int user, position_t pos) {
 8000fe0:	defff404 	addi	sp,sp,-48
 8000fe4:	dfc00b15 	stw	ra,44(sp)
 8000fe8:	df000a15 	stw	fp,40(sp)
 8000fec:	dc000915 	stw	r16,36(sp)
 8000ff0:	df000a04 	addi	fp,sp,40
 8000ff4:	e13ffb15 	stw	r4,-20(fp)
 8000ff8:	e17ffc15 	stw	r5,-16(fp)
 8000ffc:	e1bffd15 	stw	r6,-12(fp)
 8001000:	e1fffe15 	stw	r7,-8(fp)
    ship_data_t* ships = ship_select(scene, user);
 8001004:	e17ffc17 	ldw	r5,-16(fp)
 8001008:	e13ffb17 	ldw	r4,-20(fp)
 800100c:	8000a9c0 	call	8000a9c <ship_select>
 8001010:	e0bff915 	stw	r2,-28(fp)
    if (ships == NULL)
 8001014:	e0bff917 	ldw	r2,-28(fp)
 8001018:	1000021e 	bne	r2,zero,8001024 <closest_ship+0x44>
        return -1;
 800101c:	00bfffc4 	movi	r2,-1
 8001020:	00003306 	br	80010f0 <closest_ship+0x110>
    
    int idx = -1;
 8001024:	00bfffc4 	movi	r2,-1
 8001028:	e0bff615 	stw	r2,-40(fp)
    float lowest, dist;
    for (int i = 0; i < USER_SHIPS; i++) {
 800102c:	e03ff815 	stw	zero,-32(fp)
 8001030:	00002c06 	br	80010e4 <closest_ship+0x104>
        if (ships[i].index != -1) {
 8001034:	e0bff817 	ldw	r2,-32(fp)
 8001038:	01400504 	movi	r5,20
 800103c:	1009883a 	mov	r4,r2
 8001040:	8007f540 	call	8007f54 <__mulsi3>
 8001044:	1007883a 	mov	r3,r2
 8001048:	e0bff917 	ldw	r2,-28(fp)
 800104c:	10c5883a 	add	r2,r2,r3
 8001050:	10800017 	ldw	r2,0(r2)
 8001054:	10bfffe0 	cmpeqi	r2,r2,-1
 8001058:	10001f1e 	bne	r2,zero,80010d8 <closest_ship+0xf8>
            dist = distance(pos, scene->objects.untyped[ships[i].index].pos);
 800105c:	e0bff817 	ldw	r2,-32(fp)
 8001060:	01400504 	movi	r5,20
 8001064:	1009883a 	mov	r4,r2
 8001068:	8007f540 	call	8007f54 <__mulsi3>
 800106c:	1007883a 	mov	r3,r2
 8001070:	e0bff917 	ldw	r2,-28(fp)
 8001074:	10c5883a 	add	r2,r2,r3
 8001078:	10800017 	ldw	r2,0(r2)
 800107c:	e43ffb17 	ldw	r16,-20(fp)
 8001080:	01400e04 	movi	r5,56
 8001084:	1009883a 	mov	r4,r2
 8001088:	8007f540 	call	8007f54 <__mulsi3>
 800108c:	8085883a 	add	r2,r16,r2
 8001090:	10808104 	addi	r2,r2,516
 8001094:	11800017 	ldw	r6,0(r2)
 8001098:	11c00117 	ldw	r7,4(r2)
 800109c:	e13ffd17 	ldw	r4,-12(fp)
 80010a0:	e17ffe17 	ldw	r5,-8(fp)
 80010a4:	8000ee80 	call	8000ee8 <distance>
 80010a8:	e0bffa15 	stw	r2,-24(fp)
            if (idx == -1 || dist < lowest) {
 80010ac:	e0bff617 	ldw	r2,-40(fp)
 80010b0:	10bfffe0 	cmpeqi	r2,r2,-1
 80010b4:	1000041e 	bne	r2,zero,80010c8 <closest_ship+0xe8>
 80010b8:	e17ff717 	ldw	r5,-36(fp)
 80010bc:	e13ffa17 	ldw	r4,-24(fp)
 80010c0:	80089400 	call	8008940 <__lesf2>
 80010c4:	1000040e 	bge	r2,zero,80010d8 <closest_ship+0xf8>
                idx = i;
 80010c8:	e0bff817 	ldw	r2,-32(fp)
 80010cc:	e0bff615 	stw	r2,-40(fp)
                lowest = dist;
 80010d0:	e0bffa17 	ldw	r2,-24(fp)
 80010d4:	e0bff715 	stw	r2,-36(fp)
    if (ships == NULL)
        return -1;
    
    int idx = -1;
    float lowest, dist;
    for (int i = 0; i < USER_SHIPS; i++) {
 80010d8:	e0bff817 	ldw	r2,-32(fp)
 80010dc:	10800044 	addi	r2,r2,1
 80010e0:	e0bff815 	stw	r2,-32(fp)
 80010e4:	e0bff817 	ldw	r2,-32(fp)
 80010e8:	10800310 	cmplti	r2,r2,12
 80010ec:	103fd11e 	bne	r2,zero,8001034 <__alt_data_end+0xfc001034>
                idx = i;
                lowest = dist;
            }
        }
    }
}
 80010f0:	e6ffff04 	addi	sp,fp,-4
 80010f4:	dfc00217 	ldw	ra,8(sp)
 80010f8:	df000117 	ldw	fp,4(sp)
 80010fc:	dc000017 	ldw	r16,0(sp)
 8001100:	dec00304 	addi	sp,sp,12
 8001104:	f800283a 	ret

08001108 <update_game>:

void update_game(scene_t* scene) {
 8001108:	defff804 	addi	sp,sp,-32
 800110c:	dfc00715 	stw	ra,28(sp)
 8001110:	df000615 	stw	fp,24(sp)
 8001114:	dc800515 	stw	r18,20(sp)
 8001118:	dc400415 	stw	r17,16(sp)
 800111c:	dc000315 	stw	r16,12(sp)
 8001120:	df000604 	addi	fp,sp,24
 8001124:	e13ffc15 	stw	r4,-16(fp)
    ship_data_t* ships = scene->ships.player;
 8001128:	e0bffc17 	ldw	r2,-16(fp)
 800112c:	10800604 	addi	r2,r2,24
 8001130:	e0bffb15 	stw	r2,-20(fp)
    for (int i = 0; i < USER_SHIPS; i++) {
 8001134:	e03ffa15 	stw	zero,-24(fp)
 8001138:	00004a06 	br	8001264 <update_game+0x15c>
        if (ships[i].index != -1) {
 800113c:	e0bffa17 	ldw	r2,-24(fp)
 8001140:	01400504 	movi	r5,20
 8001144:	1009883a 	mov	r4,r2
 8001148:	8007f540 	call	8007f54 <__mulsi3>
 800114c:	1007883a 	mov	r3,r2
 8001150:	e0bffb17 	ldw	r2,-20(fp)
 8001154:	10c5883a 	add	r2,r2,r3
 8001158:	10800017 	ldw	r2,0(r2)
 800115c:	10bfffe0 	cmpeqi	r2,r2,-1
 8001160:	10003d1e 	bne	r2,zero,8001258 <update_game+0x150>
            scene->objects.untyped[ships[i].index].pos.x += ships[i].speed;
 8001164:	e0bffa17 	ldw	r2,-24(fp)
 8001168:	01400504 	movi	r5,20
 800116c:	1009883a 	mov	r4,r2
 8001170:	8007f540 	call	8007f54 <__mulsi3>
 8001174:	1007883a 	mov	r3,r2
 8001178:	e0bffb17 	ldw	r2,-20(fp)
 800117c:	10c5883a 	add	r2,r2,r3
 8001180:	14800017 	ldw	r18,0(r2)
 8001184:	e0bffa17 	ldw	r2,-24(fp)
 8001188:	01400504 	movi	r5,20
 800118c:	1009883a 	mov	r4,r2
 8001190:	8007f540 	call	8007f54 <__mulsi3>
 8001194:	1007883a 	mov	r3,r2
 8001198:	e0bffb17 	ldw	r2,-20(fp)
 800119c:	10c5883a 	add	r2,r2,r3
 80011a0:	10800017 	ldw	r2,0(r2)
 80011a4:	e43ffc17 	ldw	r16,-16(fp)
 80011a8:	01400e04 	movi	r5,56
 80011ac:	1009883a 	mov	r4,r2
 80011b0:	8007f540 	call	8007f54 <__mulsi3>
 80011b4:	8085883a 	add	r2,r16,r2
 80011b8:	10808104 	addi	r2,r2,516
 80011bc:	14000017 	ldw	r16,0(r2)
 80011c0:	e0bffa17 	ldw	r2,-24(fp)
 80011c4:	01400504 	movi	r5,20
 80011c8:	1009883a 	mov	r4,r2
 80011cc:	8007f540 	call	8007f54 <__mulsi3>
 80011d0:	1007883a 	mov	r3,r2
 80011d4:	e0bffb17 	ldw	r2,-20(fp)
 80011d8:	10c5883a 	add	r2,r2,r3
 80011dc:	10800217 	ldw	r2,8(r2)
 80011e0:	80a1883a 	add	r16,r16,r2
 80011e4:	e47ffc17 	ldw	r17,-16(fp)
 80011e8:	01400e04 	movi	r5,56
 80011ec:	9009883a 	mov	r4,r18
 80011f0:	8007f540 	call	8007f54 <__mulsi3>
 80011f4:	8885883a 	add	r2,r17,r2
 80011f8:	10808104 	addi	r2,r2,516
 80011fc:	14000015 	stw	r16,0(r2)

            if (scene->objects.untyped[ships[i].index].pos.x >= 1000)
 8001200:	e0bffa17 	ldw	r2,-24(fp)
 8001204:	01400504 	movi	r5,20
 8001208:	1009883a 	mov	r4,r2
 800120c:	8007f540 	call	8007f54 <__mulsi3>
 8001210:	1007883a 	mov	r3,r2
 8001214:	e0bffb17 	ldw	r2,-20(fp)
 8001218:	10c5883a 	add	r2,r2,r3
 800121c:	10800017 	ldw	r2,0(r2)
 8001220:	e43ffc17 	ldw	r16,-16(fp)
 8001224:	01400e04 	movi	r5,56
 8001228:	1009883a 	mov	r4,r2
 800122c:	8007f540 	call	8007f54 <__mulsi3>
 8001230:	8085883a 	add	r2,r16,r2
 8001234:	10808104 	addi	r2,r2,516
 8001238:	10800017 	ldw	r2,0(r2)
 800123c:	1080fa10 	cmplti	r2,r2,1000
 8001240:	1000051e 	bne	r2,zero,8001258 <update_game+0x150>
                destroy_ship(scene, PLAYER, i);
 8001244:	e0bffa17 	ldw	r2,-24(fp)
 8001248:	100d883a 	mov	r6,r2
 800124c:	000b883a 	mov	r5,zero
 8001250:	e13ffc17 	ldw	r4,-16(fp)
 8001254:	8000e440 	call	8000e44 <destroy_ship>
    }
}

void update_game(scene_t* scene) {
    ship_data_t* ships = scene->ships.player;
    for (int i = 0; i < USER_SHIPS; i++) {
 8001258:	e0bffa17 	ldw	r2,-24(fp)
 800125c:	10800044 	addi	r2,r2,1
 8001260:	e0bffa15 	stw	r2,-24(fp)
 8001264:	e0bffa17 	ldw	r2,-24(fp)
 8001268:	10800310 	cmplti	r2,r2,12
 800126c:	103fb31e 	bne	r2,zero,800113c <__alt_data_end+0xfc00113c>

            if (scene->objects.untyped[ships[i].index].pos.x >= 1000)
                destroy_ship(scene, PLAYER, i);
        }
    }
}
 8001270:	0001883a 	nop
 8001274:	e6fffd04 	addi	sp,fp,-12
 8001278:	dfc00417 	ldw	ra,16(sp)
 800127c:	df000317 	ldw	fp,12(sp)
 8001280:	dc800217 	ldw	r18,8(sp)
 8001284:	dc400117 	ldw	r17,4(sp)
 8001288:	dc000017 	ldw	r16,0(sp)
 800128c:	dec00504 	addi	sp,sp,20
 8001290:	f800283a 	ret

08001294 <gdu_run>:
    gdu_sprite_t    sprites[MAX_SPRITES];
} gdu_memory_t;

static volatile gdu_memory_t* gdu_mem = (gdu_memory_t*) GDU_MEM_LOCATION;

int gdu_run() {
 8001294:	deffff04 	addi	sp,sp,-4
 8001298:	df000015 	stw	fp,0(sp)
 800129c:	d839883a 	mov	fp,sp
    if (gdu_mem->running)
 80012a0:	d0a00017 	ldw	r2,-32768(gp)
 80012a4:	10800017 	ldw	r2,0(r2)
 80012a8:	10000226 	beq	r2,zero,80012b4 <gdu_run+0x20>
        return 0;
 80012ac:	0005883a 	mov	r2,zero
 80012b0:	00000406 	br	80012c4 <gdu_run+0x30>
    gdu_mem->running = 1;
 80012b4:	d0a00017 	ldw	r2,-32768(gp)
 80012b8:	00c00044 	movi	r3,1
 80012bc:	10c00015 	stw	r3,0(r2)
    return 1;
 80012c0:	00800044 	movi	r2,1
}
 80012c4:	e037883a 	mov	sp,fp
 80012c8:	df000017 	ldw	fp,0(sp)
 80012cc:	dec00104 	addi	sp,sp,4
 80012d0:	f800283a 	ret

080012d4 <gdu_is_running>:

int gdu_is_running() { return gdu_mem->running; }
 80012d4:	deffff04 	addi	sp,sp,-4
 80012d8:	df000015 	stw	fp,0(sp)
 80012dc:	d839883a 	mov	fp,sp
 80012e0:	d0a00017 	ldw	r2,-32768(gp)
 80012e4:	10800017 	ldw	r2,0(r2)
 80012e8:	e037883a 	mov	sp,fp
 80012ec:	df000017 	ldw	fp,0(sp)
 80012f0:	dec00104 	addi	sp,sp,4
 80012f4:	f800283a 	ret

080012f8 <gdu_reset>:

void gdu_reset() {
 80012f8:	defffd04 	addi	sp,sp,-12
 80012fc:	dfc00215 	stw	ra,8(sp)
 8001300:	df000115 	stw	fp,4(sp)
 8001304:	df000104 	addi	fp,sp,4
    for (int i = 0; i < MAX_SPRITES; i++)
 8001308:	e03fff15 	stw	zero,-4(fp)
 800130c:	00000506 	br	8001324 <gdu_reset+0x2c>
        pop_sprite(i);
 8001310:	e13fff17 	ldw	r4,-4(fp)
 8001314:	80014b00 	call	80014b0 <pop_sprite>
}

int gdu_is_running() { return gdu_mem->running; }

void gdu_reset() {
    for (int i = 0; i < MAX_SPRITES; i++)
 8001318:	e0bfff17 	ldw	r2,-4(fp)
 800131c:	10800044 	addi	r2,r2,1
 8001320:	e0bfff15 	stw	r2,-4(fp)
 8001324:	e0bfff17 	ldw	r2,-4(fp)
 8001328:	10801010 	cmplti	r2,r2,64
 800132c:	103ff81e 	bne	r2,zero,8001310 <__alt_data_end+0xfc001310>
        pop_sprite(i);
}
 8001330:	0001883a 	nop
 8001334:	e037883a 	mov	sp,fp
 8001338:	dfc00117 	ldw	ra,4(sp)
 800133c:	df000017 	ldw	fp,0(sp)
 8001340:	dec00204 	addi	sp,sp,8
 8001344:	f800283a 	ret

08001348 <gdu_set_frame>:

void gdu_set_frame(uint16_t* frame) { gdu_mem->frame_address = frame; }
 8001348:	defffe04 	addi	sp,sp,-8
 800134c:	df000115 	stw	fp,4(sp)
 8001350:	df000104 	addi	fp,sp,4
 8001354:	e13fff15 	stw	r4,-4(fp)
 8001358:	d0a00017 	ldw	r2,-32768(gp)
 800135c:	e0ffff17 	ldw	r3,-4(fp)
 8001360:	10c00115 	stw	r3,4(r2)
 8001364:	0001883a 	nop
 8001368:	e037883a 	mov	sp,fp
 800136c:	df000017 	ldw	fp,0(sp)
 8001370:	dec00104 	addi	sp,sp,4
 8001374:	f800283a 	ret

08001378 <convert_sprite>:

void convert_sprite(volatile gdu_sprite_t* gdu_sprite, sprite_t* sprite) {
 8001378:	defffd04 	addi	sp,sp,-12
 800137c:	df000215 	stw	fp,8(sp)
 8001380:	df000204 	addi	fp,sp,8
 8001384:	e13ffe15 	stw	r4,-8(fp)
 8001388:	e17fff15 	stw	r5,-4(fp)
    gdu_sprite->address     = (uint16_t*) sprite->address;
 800138c:	e0bfff17 	ldw	r2,-4(fp)
 8001390:	10c00017 	ldw	r3,0(r2)
 8001394:	e0bffe17 	ldw	r2,-8(fp)
 8001398:	10c00015 	stw	r3,0(r2)
    gdu_sprite->dimensions  = (uint32_t) ((sprite->width     << 16) + sprite->height);
 800139c:	e0bfff17 	ldw	r2,-4(fp)
 80013a0:	10800117 	ldw	r2,4(r2)
 80013a4:	1006943a 	slli	r3,r2,16
 80013a8:	e0bfff17 	ldw	r2,-4(fp)
 80013ac:	10800217 	ldw	r2,8(r2)
 80013b0:	1885883a 	add	r2,r3,r2
 80013b4:	1007883a 	mov	r3,r2
 80013b8:	e0bffe17 	ldw	r2,-8(fp)
 80013bc:	10c00115 	stw	r3,4(r2)
    gdu_sprite->screen_xy   = (uint32_t) ((sprite->screen_x  << 16) + sprite->screen_y);
 80013c0:	e0bfff17 	ldw	r2,-4(fp)
 80013c4:	10800317 	ldw	r2,12(r2)
 80013c8:	1006943a 	slli	r3,r2,16
 80013cc:	e0bfff17 	ldw	r2,-4(fp)
 80013d0:	10800417 	ldw	r2,16(r2)
 80013d4:	1885883a 	add	r2,r3,r2
 80013d8:	1007883a 	mov	r3,r2
 80013dc:	e0bffe17 	ldw	r2,-8(fp)
 80013e0:	10c00215 	stw	r3,8(r2)
    gdu_sprite->start_xy    = (uint32_t) ((sprite->start_x   << 16) + sprite->start_y);
 80013e4:	e0bfff17 	ldw	r2,-4(fp)
 80013e8:	10800517 	ldw	r2,20(r2)
 80013ec:	1006943a 	slli	r3,r2,16
 80013f0:	e0bfff17 	ldw	r2,-4(fp)
 80013f4:	10800617 	ldw	r2,24(r2)
 80013f8:	1885883a 	add	r2,r3,r2
 80013fc:	1007883a 	mov	r3,r2
 8001400:	e0bffe17 	ldw	r2,-8(fp)
 8001404:	10c00315 	stw	r3,12(r2)
    gdu_sprite->end_xy      = (uint32_t) ((sprite->end_x     << 16) + sprite->end_y);
 8001408:	e0bfff17 	ldw	r2,-4(fp)
 800140c:	10800717 	ldw	r2,28(r2)
 8001410:	1006943a 	slli	r3,r2,16
 8001414:	e0bfff17 	ldw	r2,-4(fp)
 8001418:	10800817 	ldw	r2,32(r2)
 800141c:	1885883a 	add	r2,r3,r2
 8001420:	1007883a 	mov	r3,r2
 8001424:	e0bffe17 	ldw	r2,-8(fp)
 8001428:	10c00415 	stw	r3,16(r2)
}
 800142c:	0001883a 	nop
 8001430:	e037883a 	mov	sp,fp
 8001434:	df000017 	ldw	fp,0(sp)
 8001438:	dec00104 	addi	sp,sp,4
 800143c:	f800283a 	ret

08001440 <push_sprite>:

int push_sprite(sprite_t* sprite, uint32_t index) {
 8001440:	defffb04 	addi	sp,sp,-20
 8001444:	dfc00415 	stw	ra,16(sp)
 8001448:	df000315 	stw	fp,12(sp)
 800144c:	dc000215 	stw	r16,8(sp)
 8001450:	df000304 	addi	fp,sp,12
 8001454:	e13ffd15 	stw	r4,-12(fp)
 8001458:	e17ffe15 	stw	r5,-8(fp)
    if (index > MAX_SPRITES)
 800145c:	e0bffe17 	ldw	r2,-8(fp)
 8001460:	10801070 	cmpltui	r2,r2,65
 8001464:	1000021e 	bne	r2,zero,8001470 <push_sprite+0x30>
        return 0;
 8001468:	0005883a 	mov	r2,zero
 800146c:	00000a06 	br	8001498 <push_sprite+0x58>
    convert_sprite(&gdu_mem->sprites[index], sprite);
 8001470:	d4200017 	ldw	r16,-32768(gp)
 8001474:	01400504 	movi	r5,20
 8001478:	e13ffe17 	ldw	r4,-8(fp)
 800147c:	8007f540 	call	8007f54 <__mulsi3>
 8001480:	10800204 	addi	r2,r2,8
 8001484:	8085883a 	add	r2,r16,r2
 8001488:	e17ffd17 	ldw	r5,-12(fp)
 800148c:	1009883a 	mov	r4,r2
 8001490:	80013780 	call	8001378 <convert_sprite>
    return 1;
 8001494:	00800044 	movi	r2,1
}
 8001498:	e6ffff04 	addi	sp,fp,-4
 800149c:	dfc00217 	ldw	ra,8(sp)
 80014a0:	df000117 	ldw	fp,4(sp)
 80014a4:	dc000017 	ldw	r16,0(sp)
 80014a8:	dec00304 	addi	sp,sp,12
 80014ac:	f800283a 	ret

080014b0 <pop_sprite>:

int pop_sprite(int index) {
 80014b0:	defffc04 	addi	sp,sp,-16
 80014b4:	dfc00315 	stw	ra,12(sp)
 80014b8:	df000215 	stw	fp,8(sp)
 80014bc:	dc000115 	stw	r16,4(sp)
 80014c0:	df000204 	addi	fp,sp,8
 80014c4:	e13ffe15 	stw	r4,-8(fp)
    if (index > MAX_SPRITES)
 80014c8:	e0bffe17 	ldw	r2,-8(fp)
 80014cc:	10801050 	cmplti	r2,r2,65
 80014d0:	1000021e 	bne	r2,zero,80014dc <pop_sprite+0x2c>
        return 0;
 80014d4:	0005883a 	mov	r2,zero
 80014d8:	00000906 	br	8001500 <pop_sprite+0x50>
    gdu_mem->sprites[index].address = 0;
 80014dc:	d4200017 	ldw	r16,-32768(gp)
 80014e0:	e0bffe17 	ldw	r2,-8(fp)
 80014e4:	01400504 	movi	r5,20
 80014e8:	1009883a 	mov	r4,r2
 80014ec:	8007f540 	call	8007f54 <__mulsi3>
 80014f0:	8085883a 	add	r2,r16,r2
 80014f4:	10800204 	addi	r2,r2,8
 80014f8:	10000015 	stw	zero,0(r2)
    return 1;
 80014fc:	00800044 	movi	r2,1
}
 8001500:	e6ffff04 	addi	sp,fp,-4
 8001504:	dfc00217 	ldw	ra,8(sp)
 8001508:	df000117 	ldw	fp,4(sp)
 800150c:	dc000017 	ldw	r16,0(sp)
 8001510:	dec00304 	addi	sp,sp,12
 8001514:	f800283a 	ret

08001518 <run_level1>:
#include "../sprites/statusbar.h"
#include "../sprites/cursor.h"

#include "../ships.h"

int run_level1() {
 8001518:	defbe704 	addi	sp,sp,-4196
 800151c:	dfc41815 	stw	ra,4192(sp)
 8001520:	df041715 	stw	fp,4188(sp)
 8001524:	dc041615 	stw	r16,4184(sp)
 8001528:	df041704 	addi	fp,sp,4188
    rate_t frame_rate = create_rate(20);
 800152c:	e0bbf004 	addi	r2,fp,-4160
 8001530:	01506834 	movhi	r5,16800
 8001534:	1009883a 	mov	r4,r2
 8001538:	800343c0 	call	800343c <create_rate>
    scene_t scene;
    clear_scene(&scene);
 800153c:	e0bbf304 	addi	r2,fp,-4148
 8001540:	1009883a 	mov	r4,r2
 8001544:	80009f00 	call	80009f0 <clear_scene>

    scene.scroll.max.x  = 3 * (level1_background_sprite.width - SCREEN_WIDTH);
 8001548:	0080f004 	movi	r2,960
 800154c:	10ff6004 	addi	r3,r2,-640
 8001550:	1805883a 	mov	r2,r3
 8001554:	1085883a 	add	r2,r2,r2
 8001558:	10c5883a 	add	r2,r2,r3
 800155c:	e0bbf515 	stw	r2,-4140(fp)
    scene.max.x         = scene.scroll.max.x + SCREEN_WIDTH;
 8001560:	e0bbf517 	ldw	r2,-4140(fp)
 8001564:	1080a004 	addi	r2,r2,640
 8001568:	e0bbf715 	stw	r2,-4132(fp)
    scene.max.y         = SCREEN_HEIGHT;
 800156c:	00807804 	movi	r2,480
 8001570:	e0bbf815 	stw	r2,-4128(fp)

    int background      = allocate_object(&scene, BACKGROUND, 1, 0);
 8001574:	e0bbf304 	addi	r2,fp,-4148
 8001578:	000f883a 	mov	r7,zero
 800157c:	01800044 	movi	r6,1
 8001580:	000b883a 	mov	r5,zero
 8001584:	1009883a 	mov	r4,r2
 8001588:	80005fc0 	call	80005fc <allocate_object>
 800158c:	e0bbea15 	stw	r2,-4184(fp)
    int player_planet   = allocate_object(&scene, BACKGROUND, 1, 1);
 8001590:	e0bbf304 	addi	r2,fp,-4148
 8001594:	01c00044 	movi	r7,1
 8001598:	01800044 	movi	r6,1
 800159c:	000b883a 	mov	r5,zero
 80015a0:	1009883a 	mov	r4,r2
 80015a4:	80005fc0 	call	80005fc <allocate_object>
 80015a8:	e0bbeb15 	stw	r2,-4180(fp)
    int enemy_planet    = allocate_object(&scene, BACKGROUND, 1, 1);
 80015ac:	e0bbf304 	addi	r2,fp,-4148
 80015b0:	01c00044 	movi	r7,1
 80015b4:	01800044 	movi	r6,1
 80015b8:	000b883a 	mov	r5,zero
 80015bc:	1009883a 	mov	r4,r2
 80015c0:	80005fc0 	call	80005fc <allocate_object>
 80015c4:	e0bbec15 	stw	r2,-4176(fp)
    int statusbar       = allocate_object(&scene, EFFECTS, 1, 0);
 80015c8:	e0bbf304 	addi	r2,fp,-4148
 80015cc:	000f883a 	mov	r7,zero
 80015d0:	01800044 	movi	r6,1
 80015d4:	01400084 	movi	r5,2
 80015d8:	1009883a 	mov	r4,r2
 80015dc:	80005fc0 	call	80005fc <allocate_object>
 80015e0:	e0bbed15 	stw	r2,-4172(fp)
    int cursor          = allocate_object(&scene, CURSOR, 1, 0);
 80015e4:	e0bbf304 	addi	r2,fp,-4148
 80015e8:	000f883a 	mov	r7,zero
 80015ec:	01800044 	movi	r6,1
 80015f0:	014000c4 	movi	r5,3
 80015f4:	1009883a 	mov	r4,r2
 80015f8:	80005fc0 	call	80005fc <allocate_object>
 80015fc:	e0bbee15 	stw	r2,-4168(fp)

    scene.objects.untyped[background    ].sprite = level1_background_sprite;
 8001600:	e0bbea17 	ldw	r2,-4184(fp)
 8001604:	01400e04 	movi	r5,56
 8001608:	1009883a 	mov	r4,r2
 800160c:	8007f540 	call	8007f54 <__mulsi3>
 8001610:	e0fbea04 	addi	r3,fp,-4184
 8001614:	1885883a 	add	r2,r3,r2
 8001618:	10c08c04 	addi	r3,r2,560
 800161c:	008200b4 	movhi	r2,2050
 8001620:	10bf3f04 	addi	r2,r2,-772
 8001624:	18800015 	stw	r2,0(r3)
 8001628:	e0bbea17 	ldw	r2,-4184(fp)
 800162c:	01400e04 	movi	r5,56
 8001630:	1009883a 	mov	r4,r2
 8001634:	8007f540 	call	8007f54 <__mulsi3>
 8001638:	e0fbea04 	addi	r3,fp,-4184
 800163c:	1885883a 	add	r2,r3,r2
 8001640:	10808d04 	addi	r2,r2,564
 8001644:	00c0f004 	movi	r3,960
 8001648:	10c00015 	stw	r3,0(r2)
 800164c:	e0bbea17 	ldw	r2,-4184(fp)
 8001650:	01400e04 	movi	r5,56
 8001654:	1009883a 	mov	r4,r2
 8001658:	8007f540 	call	8007f54 <__mulsi3>
 800165c:	e0fbea04 	addi	r3,fp,-4184
 8001660:	1885883a 	add	r2,r3,r2
 8001664:	10808e04 	addi	r2,r2,568
 8001668:	00c07804 	movi	r3,480
 800166c:	10c00015 	stw	r3,0(r2)
 8001670:	e0bbea17 	ldw	r2,-4184(fp)
 8001674:	01400e04 	movi	r5,56
 8001678:	1009883a 	mov	r4,r2
 800167c:	8007f540 	call	8007f54 <__mulsi3>
 8001680:	e0fbea04 	addi	r3,fp,-4184
 8001684:	1885883a 	add	r2,r3,r2
 8001688:	10808f04 	addi	r2,r2,572
 800168c:	10000015 	stw	zero,0(r2)
 8001690:	e0bbea17 	ldw	r2,-4184(fp)
 8001694:	01400e04 	movi	r5,56
 8001698:	1009883a 	mov	r4,r2
 800169c:	8007f540 	call	8007f54 <__mulsi3>
 80016a0:	e0fbea04 	addi	r3,fp,-4184
 80016a4:	1885883a 	add	r2,r3,r2
 80016a8:	10809004 	addi	r2,r2,576
 80016ac:	10000015 	stw	zero,0(r2)
 80016b0:	e0bbea17 	ldw	r2,-4184(fp)
 80016b4:	01400e04 	movi	r5,56
 80016b8:	1009883a 	mov	r4,r2
 80016bc:	8007f540 	call	8007f54 <__mulsi3>
 80016c0:	e0fbea04 	addi	r3,fp,-4184
 80016c4:	1885883a 	add	r2,r3,r2
 80016c8:	10809104 	addi	r2,r2,580
 80016cc:	10000015 	stw	zero,0(r2)
 80016d0:	e0bbea17 	ldw	r2,-4184(fp)
 80016d4:	01400e04 	movi	r5,56
 80016d8:	1009883a 	mov	r4,r2
 80016dc:	8007f540 	call	8007f54 <__mulsi3>
 80016e0:	e0fbea04 	addi	r3,fp,-4184
 80016e4:	1885883a 	add	r2,r3,r2
 80016e8:	10809204 	addi	r2,r2,584
 80016ec:	10000015 	stw	zero,0(r2)
 80016f0:	e0bbea17 	ldw	r2,-4184(fp)
 80016f4:	01400e04 	movi	r5,56
 80016f8:	1009883a 	mov	r4,r2
 80016fc:	8007f540 	call	8007f54 <__mulsi3>
 8001700:	e0fbea04 	addi	r3,fp,-4184
 8001704:	1885883a 	add	r2,r3,r2
 8001708:	10809304 	addi	r2,r2,588
 800170c:	00c0f004 	movi	r3,960
 8001710:	10c00015 	stw	r3,0(r2)
 8001714:	e0bbea17 	ldw	r2,-4184(fp)
 8001718:	01400e04 	movi	r5,56
 800171c:	1009883a 	mov	r4,r2
 8001720:	8007f540 	call	8007f54 <__mulsi3>
 8001724:	e0fbea04 	addi	r3,fp,-4184
 8001728:	1885883a 	add	r2,r3,r2
 800172c:	10809404 	addi	r2,r2,592
 8001730:	00c07804 	movi	r3,480
 8001734:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[player_planet ].sprite = level1_player_planet_sprite;
 8001738:	e0bbeb17 	ldw	r2,-4180(fp)
 800173c:	01400e04 	movi	r5,56
 8001740:	1009883a 	mov	r4,r2
 8001744:	8007f540 	call	8007f54 <__mulsi3>
 8001748:	e0fbea04 	addi	r3,fp,-4184
 800174c:	1885883a 	add	r2,r3,r2
 8001750:	10c08c04 	addi	r3,r2,560
 8001754:	00820434 	movhi	r2,2064
 8001758:	10834804 	addi	r2,r2,3360
 800175c:	18800015 	stw	r2,0(r3)
 8001760:	e0bbeb17 	ldw	r2,-4180(fp)
 8001764:	01400e04 	movi	r5,56
 8001768:	1009883a 	mov	r4,r2
 800176c:	8007f540 	call	8007f54 <__mulsi3>
 8001770:	e0fbea04 	addi	r3,fp,-4184
 8001774:	1885883a 	add	r2,r3,r2
 8001778:	10808d04 	addi	r2,r2,564
 800177c:	00c04b04 	movi	r3,300
 8001780:	10c00015 	stw	r3,0(r2)
 8001784:	e0bbeb17 	ldw	r2,-4180(fp)
 8001788:	01400e04 	movi	r5,56
 800178c:	1009883a 	mov	r4,r2
 8001790:	8007f540 	call	8007f54 <__mulsi3>
 8001794:	e0fbea04 	addi	r3,fp,-4184
 8001798:	1885883a 	add	r2,r3,r2
 800179c:	10808e04 	addi	r2,r2,568
 80017a0:	00c04b04 	movi	r3,300
 80017a4:	10c00015 	stw	r3,0(r2)
 80017a8:	e0bbeb17 	ldw	r2,-4180(fp)
 80017ac:	01400e04 	movi	r5,56
 80017b0:	1009883a 	mov	r4,r2
 80017b4:	8007f540 	call	8007f54 <__mulsi3>
 80017b8:	e0fbea04 	addi	r3,fp,-4184
 80017bc:	1885883a 	add	r2,r3,r2
 80017c0:	10808f04 	addi	r2,r2,572
 80017c4:	10000015 	stw	zero,0(r2)
 80017c8:	e0bbeb17 	ldw	r2,-4180(fp)
 80017cc:	01400e04 	movi	r5,56
 80017d0:	1009883a 	mov	r4,r2
 80017d4:	8007f540 	call	8007f54 <__mulsi3>
 80017d8:	e0fbea04 	addi	r3,fp,-4184
 80017dc:	1885883a 	add	r2,r3,r2
 80017e0:	10809004 	addi	r2,r2,576
 80017e4:	10000015 	stw	zero,0(r2)
 80017e8:	e0bbeb17 	ldw	r2,-4180(fp)
 80017ec:	01400e04 	movi	r5,56
 80017f0:	1009883a 	mov	r4,r2
 80017f4:	8007f540 	call	8007f54 <__mulsi3>
 80017f8:	e0fbea04 	addi	r3,fp,-4184
 80017fc:	1885883a 	add	r2,r3,r2
 8001800:	10809104 	addi	r2,r2,580
 8001804:	10000015 	stw	zero,0(r2)
 8001808:	e0bbeb17 	ldw	r2,-4180(fp)
 800180c:	01400e04 	movi	r5,56
 8001810:	1009883a 	mov	r4,r2
 8001814:	8007f540 	call	8007f54 <__mulsi3>
 8001818:	e0fbea04 	addi	r3,fp,-4184
 800181c:	1885883a 	add	r2,r3,r2
 8001820:	10809204 	addi	r2,r2,584
 8001824:	10000015 	stw	zero,0(r2)
 8001828:	e0bbeb17 	ldw	r2,-4180(fp)
 800182c:	01400e04 	movi	r5,56
 8001830:	1009883a 	mov	r4,r2
 8001834:	8007f540 	call	8007f54 <__mulsi3>
 8001838:	e0fbea04 	addi	r3,fp,-4184
 800183c:	1885883a 	add	r2,r3,r2
 8001840:	10809304 	addi	r2,r2,588
 8001844:	00c04b04 	movi	r3,300
 8001848:	10c00015 	stw	r3,0(r2)
 800184c:	e0bbeb17 	ldw	r2,-4180(fp)
 8001850:	01400e04 	movi	r5,56
 8001854:	1009883a 	mov	r4,r2
 8001858:	8007f540 	call	8007f54 <__mulsi3>
 800185c:	e0fbea04 	addi	r3,fp,-4184
 8001860:	1885883a 	add	r2,r3,r2
 8001864:	10809404 	addi	r2,r2,592
 8001868:	00c04b04 	movi	r3,300
 800186c:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[enemy_planet  ].sprite = level1_enemy_planet_sprite;
 8001870:	e0bbec17 	ldw	r2,-4176(fp)
 8001874:	01400e04 	movi	r5,56
 8001878:	1009883a 	mov	r4,r2
 800187c:	8007f540 	call	8007f54 <__mulsi3>
 8001880:	e0fbea04 	addi	r3,fp,-4184
 8001884:	1885883a 	add	r2,r3,r2
 8001888:	10c08c04 	addi	r3,r2,560
 800188c:	008204f4 	movhi	r2,2067
 8001890:	10b31904 	addi	r2,r2,-13212
 8001894:	18800015 	stw	r2,0(r3)
 8001898:	e0bbec17 	ldw	r2,-4176(fp)
 800189c:	01400e04 	movi	r5,56
 80018a0:	1009883a 	mov	r4,r2
 80018a4:	8007f540 	call	8007f54 <__mulsi3>
 80018a8:	e0fbea04 	addi	r3,fp,-4184
 80018ac:	1885883a 	add	r2,r3,r2
 80018b0:	10808d04 	addi	r2,r2,564
 80018b4:	00c04b04 	movi	r3,300
 80018b8:	10c00015 	stw	r3,0(r2)
 80018bc:	e0bbec17 	ldw	r2,-4176(fp)
 80018c0:	01400e04 	movi	r5,56
 80018c4:	1009883a 	mov	r4,r2
 80018c8:	8007f540 	call	8007f54 <__mulsi3>
 80018cc:	e0fbea04 	addi	r3,fp,-4184
 80018d0:	1885883a 	add	r2,r3,r2
 80018d4:	10808e04 	addi	r2,r2,568
 80018d8:	00c04b04 	movi	r3,300
 80018dc:	10c00015 	stw	r3,0(r2)
 80018e0:	e0bbec17 	ldw	r2,-4176(fp)
 80018e4:	01400e04 	movi	r5,56
 80018e8:	1009883a 	mov	r4,r2
 80018ec:	8007f540 	call	8007f54 <__mulsi3>
 80018f0:	e0fbea04 	addi	r3,fp,-4184
 80018f4:	1885883a 	add	r2,r3,r2
 80018f8:	10808f04 	addi	r2,r2,572
 80018fc:	10000015 	stw	zero,0(r2)
 8001900:	e0bbec17 	ldw	r2,-4176(fp)
 8001904:	01400e04 	movi	r5,56
 8001908:	1009883a 	mov	r4,r2
 800190c:	8007f540 	call	8007f54 <__mulsi3>
 8001910:	e0fbea04 	addi	r3,fp,-4184
 8001914:	1885883a 	add	r2,r3,r2
 8001918:	10809004 	addi	r2,r2,576
 800191c:	10000015 	stw	zero,0(r2)
 8001920:	e0bbec17 	ldw	r2,-4176(fp)
 8001924:	01400e04 	movi	r5,56
 8001928:	1009883a 	mov	r4,r2
 800192c:	8007f540 	call	8007f54 <__mulsi3>
 8001930:	e0fbea04 	addi	r3,fp,-4184
 8001934:	1885883a 	add	r2,r3,r2
 8001938:	10809104 	addi	r2,r2,580
 800193c:	10000015 	stw	zero,0(r2)
 8001940:	e0bbec17 	ldw	r2,-4176(fp)
 8001944:	01400e04 	movi	r5,56
 8001948:	1009883a 	mov	r4,r2
 800194c:	8007f540 	call	8007f54 <__mulsi3>
 8001950:	e0fbea04 	addi	r3,fp,-4184
 8001954:	1885883a 	add	r2,r3,r2
 8001958:	10809204 	addi	r2,r2,584
 800195c:	10000015 	stw	zero,0(r2)
 8001960:	e0bbec17 	ldw	r2,-4176(fp)
 8001964:	01400e04 	movi	r5,56
 8001968:	1009883a 	mov	r4,r2
 800196c:	8007f540 	call	8007f54 <__mulsi3>
 8001970:	e0fbea04 	addi	r3,fp,-4184
 8001974:	1885883a 	add	r2,r3,r2
 8001978:	10809304 	addi	r2,r2,588
 800197c:	00c04b04 	movi	r3,300
 8001980:	10c00015 	stw	r3,0(r2)
 8001984:	e0bbec17 	ldw	r2,-4176(fp)
 8001988:	01400e04 	movi	r5,56
 800198c:	1009883a 	mov	r4,r2
 8001990:	8007f540 	call	8007f54 <__mulsi3>
 8001994:	e0fbea04 	addi	r3,fp,-4184
 8001998:	1885883a 	add	r2,r3,r2
 800199c:	10809404 	addi	r2,r2,592
 80019a0:	00c04b04 	movi	r3,300
 80019a4:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[statusbar     ].sprite = statusbar_sprite;
 80019a8:	e0bbed17 	ldw	r2,-4172(fp)
 80019ac:	01400e04 	movi	r5,56
 80019b0:	1009883a 	mov	r4,r2
 80019b4:	8007f540 	call	8007f54 <__mulsi3>
 80019b8:	e0fbea04 	addi	r3,fp,-4184
 80019bc:	1885883a 	add	r2,r3,r2
 80019c0:	10c08c04 	addi	r3,r2,560
 80019c4:	008205b4 	movhi	r2,2070
 80019c8:	10a2ea04 	addi	r2,r2,-29784
 80019cc:	18800015 	stw	r2,0(r3)
 80019d0:	e0bbed17 	ldw	r2,-4172(fp)
 80019d4:	01400e04 	movi	r5,56
 80019d8:	1009883a 	mov	r4,r2
 80019dc:	8007f540 	call	8007f54 <__mulsi3>
 80019e0:	e0fbea04 	addi	r3,fp,-4184
 80019e4:	1885883a 	add	r2,r3,r2
 80019e8:	10808d04 	addi	r2,r2,564
 80019ec:	00c0a004 	movi	r3,640
 80019f0:	10c00015 	stw	r3,0(r2)
 80019f4:	e0bbed17 	ldw	r2,-4172(fp)
 80019f8:	01400e04 	movi	r5,56
 80019fc:	1009883a 	mov	r4,r2
 8001a00:	8007f540 	call	8007f54 <__mulsi3>
 8001a04:	e0fbea04 	addi	r3,fp,-4184
 8001a08:	1885883a 	add	r2,r3,r2
 8001a0c:	10808e04 	addi	r2,r2,568
 8001a10:	00c00f04 	movi	r3,60
 8001a14:	10c00015 	stw	r3,0(r2)
 8001a18:	e0bbed17 	ldw	r2,-4172(fp)
 8001a1c:	01400e04 	movi	r5,56
 8001a20:	1009883a 	mov	r4,r2
 8001a24:	8007f540 	call	8007f54 <__mulsi3>
 8001a28:	e0fbea04 	addi	r3,fp,-4184
 8001a2c:	1885883a 	add	r2,r3,r2
 8001a30:	10808f04 	addi	r2,r2,572
 8001a34:	10000015 	stw	zero,0(r2)
 8001a38:	e0bbed17 	ldw	r2,-4172(fp)
 8001a3c:	01400e04 	movi	r5,56
 8001a40:	1009883a 	mov	r4,r2
 8001a44:	8007f540 	call	8007f54 <__mulsi3>
 8001a48:	e0fbea04 	addi	r3,fp,-4184
 8001a4c:	1885883a 	add	r2,r3,r2
 8001a50:	10809004 	addi	r2,r2,576
 8001a54:	10000015 	stw	zero,0(r2)
 8001a58:	e0bbed17 	ldw	r2,-4172(fp)
 8001a5c:	01400e04 	movi	r5,56
 8001a60:	1009883a 	mov	r4,r2
 8001a64:	8007f540 	call	8007f54 <__mulsi3>
 8001a68:	e0fbea04 	addi	r3,fp,-4184
 8001a6c:	1885883a 	add	r2,r3,r2
 8001a70:	10809104 	addi	r2,r2,580
 8001a74:	10000015 	stw	zero,0(r2)
 8001a78:	e0bbed17 	ldw	r2,-4172(fp)
 8001a7c:	01400e04 	movi	r5,56
 8001a80:	1009883a 	mov	r4,r2
 8001a84:	8007f540 	call	8007f54 <__mulsi3>
 8001a88:	e0fbea04 	addi	r3,fp,-4184
 8001a8c:	1885883a 	add	r2,r3,r2
 8001a90:	10809204 	addi	r2,r2,584
 8001a94:	10000015 	stw	zero,0(r2)
 8001a98:	e0bbed17 	ldw	r2,-4172(fp)
 8001a9c:	01400e04 	movi	r5,56
 8001aa0:	1009883a 	mov	r4,r2
 8001aa4:	8007f540 	call	8007f54 <__mulsi3>
 8001aa8:	e0fbea04 	addi	r3,fp,-4184
 8001aac:	1885883a 	add	r2,r3,r2
 8001ab0:	10809304 	addi	r2,r2,588
 8001ab4:	00c0a004 	movi	r3,640
 8001ab8:	10c00015 	stw	r3,0(r2)
 8001abc:	e0bbed17 	ldw	r2,-4172(fp)
 8001ac0:	01400e04 	movi	r5,56
 8001ac4:	1009883a 	mov	r4,r2
 8001ac8:	8007f540 	call	8007f54 <__mulsi3>
 8001acc:	e0fbea04 	addi	r3,fp,-4184
 8001ad0:	1885883a 	add	r2,r3,r2
 8001ad4:	10809404 	addi	r2,r2,592
 8001ad8:	00c00f04 	movi	r3,60
 8001adc:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[cursor        ].sprite = cursor_sprite;
 8001ae0:	e0bbee17 	ldw	r2,-4168(fp)
 8001ae4:	01400e04 	movi	r5,56
 8001ae8:	1009883a 	mov	r4,r2
 8001aec:	8007f540 	call	8007f54 <__mulsi3>
 8001af0:	e0fbea04 	addi	r3,fp,-4184
 8001af4:	1885883a 	add	r2,r3,r2
 8001af8:	10c08c04 	addi	r3,r2,560
 8001afc:	008205f4 	movhi	r2,2071
 8001b00:	10adf304 	addi	r2,r2,-18484
 8001b04:	18800015 	stw	r2,0(r3)
 8001b08:	e0bbee17 	ldw	r2,-4168(fp)
 8001b0c:	01400e04 	movi	r5,56
 8001b10:	1009883a 	mov	r4,r2
 8001b14:	8007f540 	call	8007f54 <__mulsi3>
 8001b18:	e0fbea04 	addi	r3,fp,-4184
 8001b1c:	1885883a 	add	r2,r3,r2
 8001b20:	10808d04 	addi	r2,r2,564
 8001b24:	00c00584 	movi	r3,22
 8001b28:	10c00015 	stw	r3,0(r2)
 8001b2c:	e0bbee17 	ldw	r2,-4168(fp)
 8001b30:	01400e04 	movi	r5,56
 8001b34:	1009883a 	mov	r4,r2
 8001b38:	8007f540 	call	8007f54 <__mulsi3>
 8001b3c:	e0fbea04 	addi	r3,fp,-4184
 8001b40:	1885883a 	add	r2,r3,r2
 8001b44:	10808e04 	addi	r2,r2,568
 8001b48:	00c00604 	movi	r3,24
 8001b4c:	10c00015 	stw	r3,0(r2)
 8001b50:	e0bbee17 	ldw	r2,-4168(fp)
 8001b54:	01400e04 	movi	r5,56
 8001b58:	1009883a 	mov	r4,r2
 8001b5c:	8007f540 	call	8007f54 <__mulsi3>
 8001b60:	e0fbea04 	addi	r3,fp,-4184
 8001b64:	1885883a 	add	r2,r3,r2
 8001b68:	10808f04 	addi	r2,r2,572
 8001b6c:	10000015 	stw	zero,0(r2)
 8001b70:	e0bbee17 	ldw	r2,-4168(fp)
 8001b74:	01400e04 	movi	r5,56
 8001b78:	1009883a 	mov	r4,r2
 8001b7c:	8007f540 	call	8007f54 <__mulsi3>
 8001b80:	e0fbea04 	addi	r3,fp,-4184
 8001b84:	1885883a 	add	r2,r3,r2
 8001b88:	10809004 	addi	r2,r2,576
 8001b8c:	10000015 	stw	zero,0(r2)
 8001b90:	e0bbee17 	ldw	r2,-4168(fp)
 8001b94:	01400e04 	movi	r5,56
 8001b98:	1009883a 	mov	r4,r2
 8001b9c:	8007f540 	call	8007f54 <__mulsi3>
 8001ba0:	e0fbea04 	addi	r3,fp,-4184
 8001ba4:	1885883a 	add	r2,r3,r2
 8001ba8:	10809104 	addi	r2,r2,580
 8001bac:	10000015 	stw	zero,0(r2)
 8001bb0:	e0bbee17 	ldw	r2,-4168(fp)
 8001bb4:	01400e04 	movi	r5,56
 8001bb8:	1009883a 	mov	r4,r2
 8001bbc:	8007f540 	call	8007f54 <__mulsi3>
 8001bc0:	e0fbea04 	addi	r3,fp,-4184
 8001bc4:	1885883a 	add	r2,r3,r2
 8001bc8:	10809204 	addi	r2,r2,584
 8001bcc:	10000015 	stw	zero,0(r2)
 8001bd0:	e0bbee17 	ldw	r2,-4168(fp)
 8001bd4:	01400e04 	movi	r5,56
 8001bd8:	1009883a 	mov	r4,r2
 8001bdc:	8007f540 	call	8007f54 <__mulsi3>
 8001be0:	e0fbea04 	addi	r3,fp,-4184
 8001be4:	1885883a 	add	r2,r3,r2
 8001be8:	10809304 	addi	r2,r2,588
 8001bec:	00c00584 	movi	r3,22
 8001bf0:	10c00015 	stw	r3,0(r2)
 8001bf4:	e0bbee17 	ldw	r2,-4168(fp)
 8001bf8:	01400e04 	movi	r5,56
 8001bfc:	1009883a 	mov	r4,r2
 8001c00:	8007f540 	call	8007f54 <__mulsi3>
 8001c04:	e0fbea04 	addi	r3,fp,-4184
 8001c08:	1885883a 	add	r2,r3,r2
 8001c0c:	10809404 	addi	r2,r2,592
 8001c10:	00c00604 	movi	r3,24
 8001c14:	10c00015 	stw	r3,0(r2)

    scene.objects.untyped[player_planet].pos.x = 50;
 8001c18:	e0bbeb17 	ldw	r2,-4180(fp)
 8001c1c:	01400e04 	movi	r5,56
 8001c20:	1009883a 	mov	r4,r2
 8001c24:	8007f540 	call	8007f54 <__mulsi3>
 8001c28:	e0fbea04 	addi	r3,fp,-4184
 8001c2c:	1885883a 	add	r2,r3,r2
 8001c30:	10808a04 	addi	r2,r2,552
 8001c34:	00c00c84 	movi	r3,50
 8001c38:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[player_planet].pos.y = (scene.max.y - scene.objects.untyped[player_planet].sprite.height) / 2;
 8001c3c:	e43bf817 	ldw	r16,-4128(fp)
 8001c40:	e0bbeb17 	ldw	r2,-4180(fp)
 8001c44:	01400e04 	movi	r5,56
 8001c48:	1009883a 	mov	r4,r2
 8001c4c:	8007f540 	call	8007f54 <__mulsi3>
 8001c50:	e0fbea04 	addi	r3,fp,-4184
 8001c54:	1885883a 	add	r2,r3,r2
 8001c58:	10808e04 	addi	r2,r2,568
 8001c5c:	10800017 	ldw	r2,0(r2)
 8001c60:	8085c83a 	sub	r2,r16,r2
 8001c64:	1006d7fa 	srli	r3,r2,31
 8001c68:	1885883a 	add	r2,r3,r2
 8001c6c:	1005d07a 	srai	r2,r2,1
 8001c70:	1021883a 	mov	r16,r2
 8001c74:	e0bbeb17 	ldw	r2,-4180(fp)
 8001c78:	01400e04 	movi	r5,56
 8001c7c:	1009883a 	mov	r4,r2
 8001c80:	8007f540 	call	8007f54 <__mulsi3>
 8001c84:	e0fbea04 	addi	r3,fp,-4184
 8001c88:	1885883a 	add	r2,r3,r2
 8001c8c:	10808b04 	addi	r2,r2,556
 8001c90:	14000015 	stw	r16,0(r2)

    scene.objects.untyped[enemy_planet].pos.x = scene.max.x - 50 - scene.objects.untyped[enemy_planet].sprite.width;
 8001c94:	e0bbf717 	ldw	r2,-4132(fp)
 8001c98:	143ff384 	addi	r16,r2,-50
 8001c9c:	e0bbec17 	ldw	r2,-4176(fp)
 8001ca0:	01400e04 	movi	r5,56
 8001ca4:	1009883a 	mov	r4,r2
 8001ca8:	8007f540 	call	8007f54 <__mulsi3>
 8001cac:	e0fbea04 	addi	r3,fp,-4184
 8001cb0:	1885883a 	add	r2,r3,r2
 8001cb4:	10808d04 	addi	r2,r2,564
 8001cb8:	10800017 	ldw	r2,0(r2)
 8001cbc:	80a1c83a 	sub	r16,r16,r2
 8001cc0:	e0bbec17 	ldw	r2,-4176(fp)
 8001cc4:	01400e04 	movi	r5,56
 8001cc8:	1009883a 	mov	r4,r2
 8001ccc:	8007f540 	call	8007f54 <__mulsi3>
 8001cd0:	e0fbea04 	addi	r3,fp,-4184
 8001cd4:	1885883a 	add	r2,r3,r2
 8001cd8:	10808a04 	addi	r2,r2,552
 8001cdc:	14000015 	stw	r16,0(r2)
    scene.objects.untyped[enemy_planet].pos.y = (scene.max.y - scene.objects.untyped[enemy_planet].sprite.height) / 2;
 8001ce0:	e43bf817 	ldw	r16,-4128(fp)
 8001ce4:	e0bbec17 	ldw	r2,-4176(fp)
 8001ce8:	01400e04 	movi	r5,56
 8001cec:	1009883a 	mov	r4,r2
 8001cf0:	8007f540 	call	8007f54 <__mulsi3>
 8001cf4:	e0fbea04 	addi	r3,fp,-4184
 8001cf8:	1885883a 	add	r2,r3,r2
 8001cfc:	10808e04 	addi	r2,r2,568
 8001d00:	10800017 	ldw	r2,0(r2)
 8001d04:	8085c83a 	sub	r2,r16,r2
 8001d08:	1006d7fa 	srli	r3,r2,31
 8001d0c:	1885883a 	add	r2,r3,r2
 8001d10:	1005d07a 	srai	r2,r2,1
 8001d14:	1021883a 	mov	r16,r2
 8001d18:	e0bbec17 	ldw	r2,-4176(fp)
 8001d1c:	01400e04 	movi	r5,56
 8001d20:	1009883a 	mov	r4,r2
 8001d24:	8007f540 	call	8007f54 <__mulsi3>
 8001d28:	e0fbea04 	addi	r3,fp,-4184
 8001d2c:	1885883a 	add	r2,r3,r2
 8001d30:	10808b04 	addi	r2,r2,556
 8001d34:	14000015 	stw	r16,0(r2)

    scene.objects.untyped[statusbar].pos.y = SCREEN_HEIGHT - scene.objects.untyped[statusbar].sprite.height;
 8001d38:	e0bbed17 	ldw	r2,-4172(fp)
 8001d3c:	01400e04 	movi	r5,56
 8001d40:	1009883a 	mov	r4,r2
 8001d44:	8007f540 	call	8007f54 <__mulsi3>
 8001d48:	e0fbea04 	addi	r3,fp,-4184
 8001d4c:	1885883a 	add	r2,r3,r2
 8001d50:	10808e04 	addi	r2,r2,568
 8001d54:	10800017 	ldw	r2,0(r2)
 8001d58:	00c07804 	movi	r3,480
 8001d5c:	18a1c83a 	sub	r16,r3,r2
 8001d60:	e0bbed17 	ldw	r2,-4172(fp)
 8001d64:	01400e04 	movi	r5,56
 8001d68:	1009883a 	mov	r4,r2
 8001d6c:	8007f540 	call	8007f54 <__mulsi3>
 8001d70:	e0fbea04 	addi	r3,fp,-4184
 8001d74:	1885883a 	add	r2,r3,r2
 8001d78:	10808b04 	addi	r2,r2,556
 8001d7c:	14000015 	stw	r16,0(r2)

    mouse_t mouse = new_mouse(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
 8001d80:	e0bff104 	addi	r2,fp,-60
 8001d84:	01803c04 	movi	r6,240
 8001d88:	01405004 	movi	r5,320
 8001d8c:	1009883a 	mov	r4,r2
 8001d90:	80030900 	call	8003090 <new_mouse>

    fade_t fade = create_fade(0x0000, FADE_FROM);
 8001d94:	e0bff704 	addi	r2,fp,-36
 8001d98:	01800044 	movi	r6,1
 8001d9c:	000b883a 	mov	r5,zero
 8001da0:	1009883a 	mov	r4,r2
 8001da4:	80000f40 	call	80000f4 <create_fade>
    start_fade(&fade, 1);
 8001da8:	e0bff704 	addi	r2,fp,-36
 8001dac:	014fe034 	movhi	r5,16256
 8001db0:	1009883a 	mov	r4,r2
 8001db4:	80001600 	call	8000160 <start_fade>

    int running = 1;
 8001db8:	00800044 	movi	r2,1
 8001dbc:	e0bbef15 	stw	r2,-4164(fp)
    while (running) {
 8001dc0:	00007d06 	br	8001fb8 <run_level1+0xaa0>
        poll_mouse(&mouse, 0, 1);
 8001dc4:	e0bff104 	addi	r2,fp,-60
 8001dc8:	01800044 	movi	r6,1
 8001dcc:	000b883a 	mov	r5,zero
 8001dd0:	1009883a 	mov	r4,r2
 8001dd4:	80031180 	call	8003118 <poll_mouse>

        if (is_ready(&frame_rate)) {
 8001dd8:	e0bbf004 	addi	r2,fp,-4160
 8001ddc:	1009883a 	mov	r4,r2
 8001de0:	80034f80 	call	80034f8 <is_ready>
 8001de4:	10007426 	beq	r2,zero,8001fb8 <run_level1+0xaa0>
            handle_mouse(&mouse, &scene, 1, 0); 
 8001de8:	e0fbf304 	addi	r3,fp,-4148
 8001dec:	e0bff104 	addi	r2,fp,-60
 8001df0:	000f883a 	mov	r7,zero
 8001df4:	01800044 	movi	r6,1
 8001df8:	180b883a 	mov	r5,r3
 8001dfc:	1009883a 	mov	r4,r2
 8001e00:	80003f40 	call	80003f4 <handle_mouse>
            scene.objects.untyped[cursor].pos = mouse.pos;
 8001e04:	e0bbee17 	ldw	r2,-4168(fp)
 8001e08:	01400e04 	movi	r5,56
 8001e0c:	1009883a 	mov	r4,r2
 8001e10:	8007f540 	call	8007f54 <__mulsi3>
 8001e14:	e0fbea04 	addi	r3,fp,-4184
 8001e18:	1885883a 	add	r2,r3,r2
 8001e1c:	10808a04 	addi	r2,r2,552
 8001e20:	e0fff117 	ldw	r3,-60(fp)
 8001e24:	10c00015 	stw	r3,0(r2)
 8001e28:	e0fff217 	ldw	r3,-56(fp)
 8001e2c:	10c00115 	stw	r3,4(r2)

            if (!is_fade_done(&fade))
 8001e30:	e0bff704 	addi	r2,fp,-36
 8001e34:	1009883a 	mov	r4,r2
 8001e38:	80001c00 	call	80001c0 <is_fade_done>
 8001e3c:	1000031e 	bne	r2,zero,8001e4c <run_level1+0x934>
                show_fade(&fade);
 8001e40:	e0bff704 	addi	r2,fp,-36
 8001e44:	1009883a 	mov	r4,r2
 8001e48:	80002300 	call	8000230 <show_fade>
            
            scene.objects.untyped[background].sprite.start_x = scene.scroll.pos.x / 3;
 8001e4c:	e0bbf317 	ldw	r2,-4148(fp)
 8001e50:	014000c4 	movi	r5,3
 8001e54:	1009883a 	mov	r4,r2
 8001e58:	8007da00 	call	8007da0 <__divsi3>
 8001e5c:	1021883a 	mov	r16,r2
 8001e60:	e0bbea17 	ldw	r2,-4184(fp)
 8001e64:	01400e04 	movi	r5,56
 8001e68:	1009883a 	mov	r4,r2
 8001e6c:	8007f540 	call	8007f54 <__mulsi3>
 8001e70:	e0fbea04 	addi	r3,fp,-4184
 8001e74:	1885883a 	add	r2,r3,r2
 8001e78:	10809104 	addi	r2,r2,580
 8001e7c:	14000015 	stw	r16,0(r2)
            scene.objects.untyped[background].sprite.end_x = scene.objects.untyped[background].sprite.start_x + SCREEN_WIDTH;
 8001e80:	e0bbea17 	ldw	r2,-4184(fp)
 8001e84:	01400e04 	movi	r5,56
 8001e88:	1009883a 	mov	r4,r2
 8001e8c:	8007f540 	call	8007f54 <__mulsi3>
 8001e90:	e0fbea04 	addi	r3,fp,-4184
 8001e94:	1885883a 	add	r2,r3,r2
 8001e98:	10809104 	addi	r2,r2,580
 8001e9c:	10800017 	ldw	r2,0(r2)
 8001ea0:	1400a004 	addi	r16,r2,640
 8001ea4:	e0bbea17 	ldw	r2,-4184(fp)
 8001ea8:	01400e04 	movi	r5,56
 8001eac:	1009883a 	mov	r4,r2
 8001eb0:	8007f540 	call	8007f54 <__mulsi3>
 8001eb4:	e0fbea04 	addi	r3,fp,-4184
 8001eb8:	1885883a 	add	r2,r3,r2
 8001ebc:	10809304 	addi	r2,r2,588
 8001ec0:	14000015 	stw	r16,0(r2)

            scene.objects.untyped[cursor].pos = mouse.pos;
 8001ec4:	e0bbee17 	ldw	r2,-4168(fp)
 8001ec8:	01400e04 	movi	r5,56
 8001ecc:	1009883a 	mov	r4,r2
 8001ed0:	8007f540 	call	8007f54 <__mulsi3>
 8001ed4:	e0fbea04 	addi	r3,fp,-4184
 8001ed8:	1885883a 	add	r2,r3,r2
 8001edc:	10808a04 	addi	r2,r2,552
 8001ee0:	e0fff117 	ldw	r3,-60(fp)
 8001ee4:	10c00015 	stw	r3,0(r2)
 8001ee8:	e0fff217 	ldw	r3,-56(fp)
 8001eec:	10c00115 	stw	r3,4(r2)

            if (mouse.clicked.right) {
 8001ef0:	e0bff617 	ldw	r2,-40(fp)
 8001ef4:	10001226 	beq	r2,zero,8001f40 <run_level1+0xa28>
                position_t pos = mouse.pos;
 8001ef8:	e0bff117 	ldw	r2,-60(fp)
 8001efc:	e0bffb15 	stw	r2,-20(fp)
 8001f00:	e0bff217 	ldw	r2,-56(fp)
 8001f04:	e0bffc15 	stw	r2,-16(fp)
                pos.x += scene.scroll.pos.x;
 8001f08:	e0fffb17 	ldw	r3,-20(fp)
 8001f0c:	e0bbf317 	ldw	r2,-4148(fp)
 8001f10:	1885883a 	add	r2,r3,r2
 8001f14:	e0bffb15 	stw	r2,-20(fp)
                spawn_ship(&scene, &player_fighter, PLAYER, pos);
 8001f18:	e0fbf304 	addi	r3,fp,-4148
 8001f1c:	e0bffc17 	ldw	r2,-16(fp)
 8001f20:	d8800015 	stw	r2,0(sp)
 8001f24:	e1fffb17 	ldw	r7,-20(fp)
 8001f28:	000d883a 	mov	r6,zero
 8001f2c:	014200b4 	movhi	r5,2050
 8001f30:	297f3504 	addi	r5,r5,-812
 8001f34:	1809883a 	mov	r4,r3
 8001f38:	8000c680 	call	8000c68 <spawn_ship>
                mouse.clicked.right = 0;
 8001f3c:	e03ff615 	stw	zero,-40(fp)
            }

            if (mouse.clicked.left) {
 8001f40:	e0bff517 	ldw	r2,-44(fp)
 8001f44:	10001226 	beq	r2,zero,8001f90 <run_level1+0xa78>
                position_t pos = mouse.pos;
 8001f48:	e0bff117 	ldw	r2,-60(fp)
 8001f4c:	e0bffd15 	stw	r2,-12(fp)
 8001f50:	e0bff217 	ldw	r2,-56(fp)
 8001f54:	e0bffe15 	stw	r2,-8(fp)
                pos.x += scene.scroll.pos.x;
 8001f58:	e0fffd17 	ldw	r3,-12(fp)
 8001f5c:	e0bbf317 	ldw	r2,-4148(fp)
 8001f60:	1885883a 	add	r2,r3,r2
 8001f64:	e0bffd15 	stw	r2,-12(fp)
                spawn_ship(&scene, &player_cruiser, PLAYER, pos);
 8001f68:	e0fbf304 	addi	r3,fp,-4148
 8001f6c:	e0bffe17 	ldw	r2,-8(fp)
 8001f70:	d8800015 	stw	r2,0(sp)
 8001f74:	e1fffd17 	ldw	r7,-12(fp)
 8001f78:	000d883a 	mov	r6,zero
 8001f7c:	014200b4 	movhi	r5,2050
 8001f80:	297f3a04 	addi	r5,r5,-792
 8001f84:	1809883a 	mov	r4,r3
 8001f88:	8000c680 	call	8000c68 <spawn_ship>
                mouse.clicked.left = 0;
 8001f8c:	e03ff515 	stw	zero,-44(fp)
            }

            update_game(&scene);
 8001f90:	e0bbf304 	addi	r2,fp,-4148
 8001f94:	1009883a 	mov	r4,r2
 8001f98:	80011080 	call	8001108 <update_game>

            while (gdu_is_running());
 8001f9c:	0001883a 	nop
 8001fa0:	80012d40 	call	80012d4 <gdu_is_running>
 8001fa4:	103ffe1e 	bne	r2,zero,8001fa0 <__alt_data_end+0xfc001fa0>
            push_scene(&scene);
 8001fa8:	e0bbf304 	addi	r2,fp,-4148
 8001fac:	1009883a 	mov	r4,r2
 8001fb0:	80008740 	call	8000874 <push_scene>
            start_render();
 8001fb4:	800003c0 	call	800003c <start_render>

    fade_t fade = create_fade(0x0000, FADE_FROM);
    start_fade(&fade, 1);

    int running = 1;
    while (running) {
 8001fb8:	e0bbef17 	ldw	r2,-4164(fp)
 8001fbc:	103f811e 	bne	r2,zero,8001dc4 <__alt_data_end+0xfc001dc4>
            while (gdu_is_running());
            push_scene(&scene);
            start_render();
        }
    }
    return 0;
 8001fc0:	0005883a 	mov	r2,zero
}
 8001fc4:	e6ffff04 	addi	sp,fp,-4
 8001fc8:	dfc00217 	ldw	ra,8(sp)
 8001fcc:	df000117 	ldw	fp,4(sp)
 8001fd0:	dc000017 	ldw	r16,0(sp)
 8001fd4:	dec00304 	addi	sp,sp,12
 8001fd8:	f800283a 	ret

08001fdc <run_title_screen>:
#include "../sprites/WAR_STARS_II.h"
#include "../sprites/start_button_unpressed.h"
#include "../sprites/start_button_pressed.h"
#include "../sprites/cursor.h"

void run_title_screen() {
 8001fdc:	defbe604 	addi	sp,sp,-4200
 8001fe0:	dfc41915 	stw	ra,4196(sp)
 8001fe4:	df041815 	stw	fp,4192(sp)
 8001fe8:	dc041715 	stw	r16,4188(sp)
 8001fec:	df041804 	addi	fp,sp,4192
    rate_t frame_rate = create_rate(20);
 8001ff0:	e0bbf404 	addi	r2,fp,-4144
 8001ff4:	01506834 	movhi	r5,16800
 8001ff8:	1009883a 	mov	r4,r2
 8001ffc:	800343c0 	call	800343c <create_rate>
    scene_t scene;
    clear_scene(&scene);
 8002000:	e0bbf704 	addi	r2,fp,-4132
 8002004:	1009883a 	mov	r4,r2
 8002008:	80009f00 	call	80009f0 <clear_scene>

    scene.max.x = SCREEN_WIDTH;
 800200c:	0080a004 	movi	r2,640
 8002010:	e0bbfb15 	stw	r2,-4116(fp)
    scene.max.y = SCREEN_HEIGHT;
 8002014:	00807804 	movi	r2,480
 8002018:	e0bbfc15 	stw	r2,-4112(fp)
    
    int background              = allocate_object(&scene, BACKGROUND, 1, 0);
 800201c:	e0bbf704 	addi	r2,fp,-4132
 8002020:	000f883a 	mov	r7,zero
 8002024:	01800044 	movi	r6,1
 8002028:	000b883a 	mov	r5,zero
 800202c:	1009883a 	mov	r4,r2
 8002030:	80005fc0 	call	80005fc <allocate_object>
 8002034:	e0bbed15 	stw	r2,-4172(fp)
    int ship                    = allocate_object(&scene, EFFECTS, 1, 0);
 8002038:	e0bbf704 	addi	r2,fp,-4132
 800203c:	000f883a 	mov	r7,zero
 8002040:	01800044 	movi	r6,1
 8002044:	01400084 	movi	r5,2
 8002048:	1009883a 	mov	r4,r2
 800204c:	80005fc0 	call	80005fc <allocate_object>
 8002050:	e0bbee15 	stw	r2,-4168(fp)
    int title_text              = allocate_object(&scene, EFFECTS, 1, 0);
 8002054:	e0bbf704 	addi	r2,fp,-4132
 8002058:	000f883a 	mov	r7,zero
 800205c:	01800044 	movi	r6,1
 8002060:	01400084 	movi	r5,2
 8002064:	1009883a 	mov	r4,r2
 8002068:	80005fc0 	call	80005fc <allocate_object>
 800206c:	e0bbef15 	stw	r2,-4164(fp)
    int start_button_unpressed  = allocate_object(&scene, SHIPS, 1, 0);
 8002070:	e0bbf704 	addi	r2,fp,-4132
 8002074:	000f883a 	mov	r7,zero
 8002078:	01800044 	movi	r6,1
 800207c:	01400044 	movi	r5,1
 8002080:	1009883a 	mov	r4,r2
 8002084:	80005fc0 	call	80005fc <allocate_object>
 8002088:	e0bbf015 	stw	r2,-4160(fp)
    int start_button_pressed    = allocate_object(&scene, SHIPS, 0, 0);
 800208c:	e0bbf704 	addi	r2,fp,-4132
 8002090:	000f883a 	mov	r7,zero
 8002094:	000d883a 	mov	r6,zero
 8002098:	01400044 	movi	r5,1
 800209c:	1009883a 	mov	r4,r2
 80020a0:	80005fc0 	call	80005fc <allocate_object>
 80020a4:	e0bbf115 	stw	r2,-4156(fp)
    int cursor                  = allocate_object(&scene, CURSOR, 1, 0);
 80020a8:	e0bbf704 	addi	r2,fp,-4132
 80020ac:	000f883a 	mov	r7,zero
 80020b0:	01800044 	movi	r6,1
 80020b4:	014000c4 	movi	r5,3
 80020b8:	1009883a 	mov	r4,r2
 80020bc:	80005fc0 	call	80005fc <allocate_object>
 80020c0:	e0bbf215 	stw	r2,-4152(fp)
    
    scene.objects.untyped[background            ].sprite = lightspeed_background_sprite;
 80020c4:	e0bbed17 	ldw	r2,-4172(fp)
 80020c8:	01400e04 	movi	r5,56
 80020cc:	1009883a 	mov	r4,r2
 80020d0:	8007f540 	call	8007f54 <__mulsi3>
 80020d4:	e0fbe804 	addi	r3,fp,-4192
 80020d8:	1885883a 	add	r2,r3,r2
 80020dc:	10c09204 	addi	r3,r2,584
 80020e0:	008205f4 	movhi	r2,2071
 80020e4:	10b8a204 	addi	r2,r2,-7544
 80020e8:	18800015 	stw	r2,0(r3)
 80020ec:	e0bbed17 	ldw	r2,-4172(fp)
 80020f0:	01400e04 	movi	r5,56
 80020f4:	1009883a 	mov	r4,r2
 80020f8:	8007f540 	call	8007f54 <__mulsi3>
 80020fc:	e0fbe804 	addi	r3,fp,-4192
 8002100:	1885883a 	add	r2,r3,r2
 8002104:	10809304 	addi	r2,r2,588
 8002108:	00c19004 	movi	r3,1600
 800210c:	10c00015 	stw	r3,0(r2)
 8002110:	e0bbed17 	ldw	r2,-4172(fp)
 8002114:	01400e04 	movi	r5,56
 8002118:	1009883a 	mov	r4,r2
 800211c:	8007f540 	call	8007f54 <__mulsi3>
 8002120:	e0fbe804 	addi	r3,fp,-4192
 8002124:	1885883a 	add	r2,r3,r2
 8002128:	10809404 	addi	r2,r2,592
 800212c:	00c07804 	movi	r3,480
 8002130:	10c00015 	stw	r3,0(r2)
 8002134:	e0bbed17 	ldw	r2,-4172(fp)
 8002138:	01400e04 	movi	r5,56
 800213c:	1009883a 	mov	r4,r2
 8002140:	8007f540 	call	8007f54 <__mulsi3>
 8002144:	e0fbe804 	addi	r3,fp,-4192
 8002148:	1885883a 	add	r2,r3,r2
 800214c:	10809504 	addi	r2,r2,596
 8002150:	10000015 	stw	zero,0(r2)
 8002154:	e0bbed17 	ldw	r2,-4172(fp)
 8002158:	01400e04 	movi	r5,56
 800215c:	1009883a 	mov	r4,r2
 8002160:	8007f540 	call	8007f54 <__mulsi3>
 8002164:	e0fbe804 	addi	r3,fp,-4192
 8002168:	1885883a 	add	r2,r3,r2
 800216c:	10809604 	addi	r2,r2,600
 8002170:	10000015 	stw	zero,0(r2)
 8002174:	e0bbed17 	ldw	r2,-4172(fp)
 8002178:	01400e04 	movi	r5,56
 800217c:	1009883a 	mov	r4,r2
 8002180:	8007f540 	call	8007f54 <__mulsi3>
 8002184:	e0fbe804 	addi	r3,fp,-4192
 8002188:	1885883a 	add	r2,r3,r2
 800218c:	10809704 	addi	r2,r2,604
 8002190:	10000015 	stw	zero,0(r2)
 8002194:	e0bbed17 	ldw	r2,-4172(fp)
 8002198:	01400e04 	movi	r5,56
 800219c:	1009883a 	mov	r4,r2
 80021a0:	8007f540 	call	8007f54 <__mulsi3>
 80021a4:	e0fbe804 	addi	r3,fp,-4192
 80021a8:	1885883a 	add	r2,r3,r2
 80021ac:	10809804 	addi	r2,r2,608
 80021b0:	10000015 	stw	zero,0(r2)
 80021b4:	e0bbed17 	ldw	r2,-4172(fp)
 80021b8:	01400e04 	movi	r5,56
 80021bc:	1009883a 	mov	r4,r2
 80021c0:	8007f540 	call	8007f54 <__mulsi3>
 80021c4:	e0fbe804 	addi	r3,fp,-4192
 80021c8:	1885883a 	add	r2,r3,r2
 80021cc:	10809904 	addi	r2,r2,612
 80021d0:	00c19004 	movi	r3,1600
 80021d4:	10c00015 	stw	r3,0(r2)
 80021d8:	e0bbed17 	ldw	r2,-4172(fp)
 80021dc:	01400e04 	movi	r5,56
 80021e0:	1009883a 	mov	r4,r2
 80021e4:	8007f540 	call	8007f54 <__mulsi3>
 80021e8:	e0fbe804 	addi	r3,fp,-4192
 80021ec:	1885883a 	add	r2,r3,r2
 80021f0:	10809a04 	addi	r2,r2,616
 80021f4:	00c07804 	movi	r3,480
 80021f8:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[ship                  ].sprite = title_screen_ship_sprite;
 80021fc:	e0bbee17 	ldw	r2,-4168(fp)
 8002200:	01400e04 	movi	r5,56
 8002204:	1009883a 	mov	r4,r2
 8002208:	8007f540 	call	8007f54 <__mulsi3>
 800220c:	e0fbe804 	addi	r3,fp,-4192
 8002210:	1885883a 	add	r2,r3,r2
 8002214:	10c09204 	addi	r3,r2,584
 8002218:	00820bb4 	movhi	r2,2094
 800221c:	1094ab04 	addi	r2,r2,21164
 8002220:	18800015 	stw	r2,0(r3)
 8002224:	e0bbee17 	ldw	r2,-4168(fp)
 8002228:	01400e04 	movi	r5,56
 800222c:	1009883a 	mov	r4,r2
 8002230:	8007f540 	call	8007f54 <__mulsi3>
 8002234:	e0fbe804 	addi	r3,fp,-4192
 8002238:	1885883a 	add	r2,r3,r2
 800223c:	10809304 	addi	r2,r2,588
 8002240:	00c03204 	movi	r3,200
 8002244:	10c00015 	stw	r3,0(r2)
 8002248:	e0bbee17 	ldw	r2,-4168(fp)
 800224c:	01400e04 	movi	r5,56
 8002250:	1009883a 	mov	r4,r2
 8002254:	8007f540 	call	8007f54 <__mulsi3>
 8002258:	e0fbe804 	addi	r3,fp,-4192
 800225c:	1885883a 	add	r2,r3,r2
 8002260:	10809404 	addi	r2,r2,592
 8002264:	00c01cc4 	movi	r3,115
 8002268:	10c00015 	stw	r3,0(r2)
 800226c:	e0bbee17 	ldw	r2,-4168(fp)
 8002270:	01400e04 	movi	r5,56
 8002274:	1009883a 	mov	r4,r2
 8002278:	8007f540 	call	8007f54 <__mulsi3>
 800227c:	e0fbe804 	addi	r3,fp,-4192
 8002280:	1885883a 	add	r2,r3,r2
 8002284:	10809504 	addi	r2,r2,596
 8002288:	10000015 	stw	zero,0(r2)
 800228c:	e0bbee17 	ldw	r2,-4168(fp)
 8002290:	01400e04 	movi	r5,56
 8002294:	1009883a 	mov	r4,r2
 8002298:	8007f540 	call	8007f54 <__mulsi3>
 800229c:	e0fbe804 	addi	r3,fp,-4192
 80022a0:	1885883a 	add	r2,r3,r2
 80022a4:	10809604 	addi	r2,r2,600
 80022a8:	10000015 	stw	zero,0(r2)
 80022ac:	e0bbee17 	ldw	r2,-4168(fp)
 80022b0:	01400e04 	movi	r5,56
 80022b4:	1009883a 	mov	r4,r2
 80022b8:	8007f540 	call	8007f54 <__mulsi3>
 80022bc:	e0fbe804 	addi	r3,fp,-4192
 80022c0:	1885883a 	add	r2,r3,r2
 80022c4:	10809704 	addi	r2,r2,604
 80022c8:	10000015 	stw	zero,0(r2)
 80022cc:	e0bbee17 	ldw	r2,-4168(fp)
 80022d0:	01400e04 	movi	r5,56
 80022d4:	1009883a 	mov	r4,r2
 80022d8:	8007f540 	call	8007f54 <__mulsi3>
 80022dc:	e0fbe804 	addi	r3,fp,-4192
 80022e0:	1885883a 	add	r2,r3,r2
 80022e4:	10809804 	addi	r2,r2,608
 80022e8:	10000015 	stw	zero,0(r2)
 80022ec:	e0bbee17 	ldw	r2,-4168(fp)
 80022f0:	01400e04 	movi	r5,56
 80022f4:	1009883a 	mov	r4,r2
 80022f8:	8007f540 	call	8007f54 <__mulsi3>
 80022fc:	e0fbe804 	addi	r3,fp,-4192
 8002300:	1885883a 	add	r2,r3,r2
 8002304:	10809904 	addi	r2,r2,612
 8002308:	00c03204 	movi	r3,200
 800230c:	10c00015 	stw	r3,0(r2)
 8002310:	e0bbee17 	ldw	r2,-4168(fp)
 8002314:	01400e04 	movi	r5,56
 8002318:	1009883a 	mov	r4,r2
 800231c:	8007f540 	call	8007f54 <__mulsi3>
 8002320:	e0fbe804 	addi	r3,fp,-4192
 8002324:	1885883a 	add	r2,r3,r2
 8002328:	10809a04 	addi	r2,r2,616
 800232c:	00c01cc4 	movi	r3,115
 8002330:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[title_text            ].sprite = WAR_STARS_II_sprite;
 8002334:	e0bbef17 	ldw	r2,-4164(fp)
 8002338:	01400e04 	movi	r5,56
 800233c:	1009883a 	mov	r4,r2
 8002340:	8007f540 	call	8007f54 <__mulsi3>
 8002344:	e0fbe804 	addi	r3,fp,-4192
 8002348:	1885883a 	add	r2,r3,r2
 800234c:	10c09204 	addi	r3,r2,584
 8002350:	00820bf4 	movhi	r2,2095
 8002354:	1081a004 	addi	r2,r2,1664
 8002358:	18800015 	stw	r2,0(r3)
 800235c:	e0bbef17 	ldw	r2,-4164(fp)
 8002360:	01400e04 	movi	r5,56
 8002364:	1009883a 	mov	r4,r2
 8002368:	8007f540 	call	8007f54 <__mulsi3>
 800236c:	e0fbe804 	addi	r3,fp,-4192
 8002370:	1885883a 	add	r2,r3,r2
 8002374:	10809304 	addi	r2,r2,588
 8002378:	00c08584 	movi	r3,534
 800237c:	10c00015 	stw	r3,0(r2)
 8002380:	e0bbef17 	ldw	r2,-4164(fp)
 8002384:	01400e04 	movi	r5,56
 8002388:	1009883a 	mov	r4,r2
 800238c:	8007f540 	call	8007f54 <__mulsi3>
 8002390:	e0fbe804 	addi	r3,fp,-4192
 8002394:	1885883a 	add	r2,r3,r2
 8002398:	10809404 	addi	r2,r2,592
 800239c:	00c00d04 	movi	r3,52
 80023a0:	10c00015 	stw	r3,0(r2)
 80023a4:	e0bbef17 	ldw	r2,-4164(fp)
 80023a8:	01400e04 	movi	r5,56
 80023ac:	1009883a 	mov	r4,r2
 80023b0:	8007f540 	call	8007f54 <__mulsi3>
 80023b4:	e0fbe804 	addi	r3,fp,-4192
 80023b8:	1885883a 	add	r2,r3,r2
 80023bc:	10809504 	addi	r2,r2,596
 80023c0:	10000015 	stw	zero,0(r2)
 80023c4:	e0bbef17 	ldw	r2,-4164(fp)
 80023c8:	01400e04 	movi	r5,56
 80023cc:	1009883a 	mov	r4,r2
 80023d0:	8007f540 	call	8007f54 <__mulsi3>
 80023d4:	e0fbe804 	addi	r3,fp,-4192
 80023d8:	1885883a 	add	r2,r3,r2
 80023dc:	10809604 	addi	r2,r2,600
 80023e0:	10000015 	stw	zero,0(r2)
 80023e4:	e0bbef17 	ldw	r2,-4164(fp)
 80023e8:	01400e04 	movi	r5,56
 80023ec:	1009883a 	mov	r4,r2
 80023f0:	8007f540 	call	8007f54 <__mulsi3>
 80023f4:	e0fbe804 	addi	r3,fp,-4192
 80023f8:	1885883a 	add	r2,r3,r2
 80023fc:	10809704 	addi	r2,r2,604
 8002400:	10000015 	stw	zero,0(r2)
 8002404:	e0bbef17 	ldw	r2,-4164(fp)
 8002408:	01400e04 	movi	r5,56
 800240c:	1009883a 	mov	r4,r2
 8002410:	8007f540 	call	8007f54 <__mulsi3>
 8002414:	e0fbe804 	addi	r3,fp,-4192
 8002418:	1885883a 	add	r2,r3,r2
 800241c:	10809804 	addi	r2,r2,608
 8002420:	10000015 	stw	zero,0(r2)
 8002424:	e0bbef17 	ldw	r2,-4164(fp)
 8002428:	01400e04 	movi	r5,56
 800242c:	1009883a 	mov	r4,r2
 8002430:	8007f540 	call	8007f54 <__mulsi3>
 8002434:	e0fbe804 	addi	r3,fp,-4192
 8002438:	1885883a 	add	r2,r3,r2
 800243c:	10809904 	addi	r2,r2,612
 8002440:	00c08584 	movi	r3,534
 8002444:	10c00015 	stw	r3,0(r2)
 8002448:	e0bbef17 	ldw	r2,-4164(fp)
 800244c:	01400e04 	movi	r5,56
 8002450:	1009883a 	mov	r4,r2
 8002454:	8007f540 	call	8007f54 <__mulsi3>
 8002458:	e0fbe804 	addi	r3,fp,-4192
 800245c:	1885883a 	add	r2,r3,r2
 8002460:	10809a04 	addi	r2,r2,616
 8002464:	00c00d04 	movi	r3,52
 8002468:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[start_button_unpressed].sprite = start_button_unpressed_sprite;
 800246c:	e0bbf017 	ldw	r2,-4160(fp)
 8002470:	01400e04 	movi	r5,56
 8002474:	1009883a 	mov	r4,r2
 8002478:	8007f540 	call	8007f54 <__mulsi3>
 800247c:	e0fbe804 	addi	r3,fp,-4192
 8002480:	1885883a 	add	r2,r3,r2
 8002484:	10c09204 	addi	r3,r2,584
 8002488:	00820c34 	movhi	r2,2096
 800248c:	10b7e504 	addi	r2,r2,-8300
 8002490:	18800015 	stw	r2,0(r3)
 8002494:	e0bbf017 	ldw	r2,-4160(fp)
 8002498:	01400e04 	movi	r5,56
 800249c:	1009883a 	mov	r4,r2
 80024a0:	8007f540 	call	8007f54 <__mulsi3>
 80024a4:	e0fbe804 	addi	r3,fp,-4192
 80024a8:	1885883a 	add	r2,r3,r2
 80024ac:	10809304 	addi	r2,r2,588
 80024b0:	00c03204 	movi	r3,200
 80024b4:	10c00015 	stw	r3,0(r2)
 80024b8:	e0bbf017 	ldw	r2,-4160(fp)
 80024bc:	01400e04 	movi	r5,56
 80024c0:	1009883a 	mov	r4,r2
 80024c4:	8007f540 	call	8007f54 <__mulsi3>
 80024c8:	e0fbe804 	addi	r3,fp,-4192
 80024cc:	1885883a 	add	r2,r3,r2
 80024d0:	10809404 	addi	r2,r2,592
 80024d4:	00c018c4 	movi	r3,99
 80024d8:	10c00015 	stw	r3,0(r2)
 80024dc:	e0bbf017 	ldw	r2,-4160(fp)
 80024e0:	01400e04 	movi	r5,56
 80024e4:	1009883a 	mov	r4,r2
 80024e8:	8007f540 	call	8007f54 <__mulsi3>
 80024ec:	e0fbe804 	addi	r3,fp,-4192
 80024f0:	1885883a 	add	r2,r3,r2
 80024f4:	10809504 	addi	r2,r2,596
 80024f8:	10000015 	stw	zero,0(r2)
 80024fc:	e0bbf017 	ldw	r2,-4160(fp)
 8002500:	01400e04 	movi	r5,56
 8002504:	1009883a 	mov	r4,r2
 8002508:	8007f540 	call	8007f54 <__mulsi3>
 800250c:	e0fbe804 	addi	r3,fp,-4192
 8002510:	1885883a 	add	r2,r3,r2
 8002514:	10809604 	addi	r2,r2,600
 8002518:	10000015 	stw	zero,0(r2)
 800251c:	e0bbf017 	ldw	r2,-4160(fp)
 8002520:	01400e04 	movi	r5,56
 8002524:	1009883a 	mov	r4,r2
 8002528:	8007f540 	call	8007f54 <__mulsi3>
 800252c:	e0fbe804 	addi	r3,fp,-4192
 8002530:	1885883a 	add	r2,r3,r2
 8002534:	10809704 	addi	r2,r2,604
 8002538:	10000015 	stw	zero,0(r2)
 800253c:	e0bbf017 	ldw	r2,-4160(fp)
 8002540:	01400e04 	movi	r5,56
 8002544:	1009883a 	mov	r4,r2
 8002548:	8007f540 	call	8007f54 <__mulsi3>
 800254c:	e0fbe804 	addi	r3,fp,-4192
 8002550:	1885883a 	add	r2,r3,r2
 8002554:	10809804 	addi	r2,r2,608
 8002558:	10000015 	stw	zero,0(r2)
 800255c:	e0bbf017 	ldw	r2,-4160(fp)
 8002560:	01400e04 	movi	r5,56
 8002564:	1009883a 	mov	r4,r2
 8002568:	8007f540 	call	8007f54 <__mulsi3>
 800256c:	e0fbe804 	addi	r3,fp,-4192
 8002570:	1885883a 	add	r2,r3,r2
 8002574:	10809904 	addi	r2,r2,612
 8002578:	00c03204 	movi	r3,200
 800257c:	10c00015 	stw	r3,0(r2)
 8002580:	e0bbf017 	ldw	r2,-4160(fp)
 8002584:	01400e04 	movi	r5,56
 8002588:	1009883a 	mov	r4,r2
 800258c:	8007f540 	call	8007f54 <__mulsi3>
 8002590:	e0fbe804 	addi	r3,fp,-4192
 8002594:	1885883a 	add	r2,r3,r2
 8002598:	10809a04 	addi	r2,r2,616
 800259c:	00c018c4 	movi	r3,99
 80025a0:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[start_button_pressed  ].sprite = start_button_pressed_sprite;
 80025a4:	e0bbf117 	ldw	r2,-4156(fp)
 80025a8:	01400e04 	movi	r5,56
 80025ac:	1009883a 	mov	r4,r2
 80025b0:	8007f540 	call	8007f54 <__mulsi3>
 80025b4:	e0fbe804 	addi	r3,fp,-4192
 80025b8:	1885883a 	add	r2,r3,r2
 80025bc:	10c09204 	addi	r3,r2,584
 80025c0:	00820c34 	movhi	r2,2096
 80025c4:	109e9a04 	addi	r2,r2,31336
 80025c8:	18800015 	stw	r2,0(r3)
 80025cc:	e0bbf117 	ldw	r2,-4156(fp)
 80025d0:	01400e04 	movi	r5,56
 80025d4:	1009883a 	mov	r4,r2
 80025d8:	8007f540 	call	8007f54 <__mulsi3>
 80025dc:	e0fbe804 	addi	r3,fp,-4192
 80025e0:	1885883a 	add	r2,r3,r2
 80025e4:	10809304 	addi	r2,r2,588
 80025e8:	00c03204 	movi	r3,200
 80025ec:	10c00015 	stw	r3,0(r2)
 80025f0:	e0bbf117 	ldw	r2,-4156(fp)
 80025f4:	01400e04 	movi	r5,56
 80025f8:	1009883a 	mov	r4,r2
 80025fc:	8007f540 	call	8007f54 <__mulsi3>
 8002600:	e0fbe804 	addi	r3,fp,-4192
 8002604:	1885883a 	add	r2,r3,r2
 8002608:	10809404 	addi	r2,r2,592
 800260c:	00c018c4 	movi	r3,99
 8002610:	10c00015 	stw	r3,0(r2)
 8002614:	e0bbf117 	ldw	r2,-4156(fp)
 8002618:	01400e04 	movi	r5,56
 800261c:	1009883a 	mov	r4,r2
 8002620:	8007f540 	call	8007f54 <__mulsi3>
 8002624:	e0fbe804 	addi	r3,fp,-4192
 8002628:	1885883a 	add	r2,r3,r2
 800262c:	10809504 	addi	r2,r2,596
 8002630:	10000015 	stw	zero,0(r2)
 8002634:	e0bbf117 	ldw	r2,-4156(fp)
 8002638:	01400e04 	movi	r5,56
 800263c:	1009883a 	mov	r4,r2
 8002640:	8007f540 	call	8007f54 <__mulsi3>
 8002644:	e0fbe804 	addi	r3,fp,-4192
 8002648:	1885883a 	add	r2,r3,r2
 800264c:	10809604 	addi	r2,r2,600
 8002650:	10000015 	stw	zero,0(r2)
 8002654:	e0bbf117 	ldw	r2,-4156(fp)
 8002658:	01400e04 	movi	r5,56
 800265c:	1009883a 	mov	r4,r2
 8002660:	8007f540 	call	8007f54 <__mulsi3>
 8002664:	e0fbe804 	addi	r3,fp,-4192
 8002668:	1885883a 	add	r2,r3,r2
 800266c:	10809704 	addi	r2,r2,604
 8002670:	10000015 	stw	zero,0(r2)
 8002674:	e0bbf117 	ldw	r2,-4156(fp)
 8002678:	01400e04 	movi	r5,56
 800267c:	1009883a 	mov	r4,r2
 8002680:	8007f540 	call	8007f54 <__mulsi3>
 8002684:	e0fbe804 	addi	r3,fp,-4192
 8002688:	1885883a 	add	r2,r3,r2
 800268c:	10809804 	addi	r2,r2,608
 8002690:	10000015 	stw	zero,0(r2)
 8002694:	e0bbf117 	ldw	r2,-4156(fp)
 8002698:	01400e04 	movi	r5,56
 800269c:	1009883a 	mov	r4,r2
 80026a0:	8007f540 	call	8007f54 <__mulsi3>
 80026a4:	e0fbe804 	addi	r3,fp,-4192
 80026a8:	1885883a 	add	r2,r3,r2
 80026ac:	10809904 	addi	r2,r2,612
 80026b0:	00c03204 	movi	r3,200
 80026b4:	10c00015 	stw	r3,0(r2)
 80026b8:	e0bbf117 	ldw	r2,-4156(fp)
 80026bc:	01400e04 	movi	r5,56
 80026c0:	1009883a 	mov	r4,r2
 80026c4:	8007f540 	call	8007f54 <__mulsi3>
 80026c8:	e0fbe804 	addi	r3,fp,-4192
 80026cc:	1885883a 	add	r2,r3,r2
 80026d0:	10809a04 	addi	r2,r2,616
 80026d4:	00c018c4 	movi	r3,99
 80026d8:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[cursor                ].sprite = cursor_sprite;
 80026dc:	e0bbf217 	ldw	r2,-4152(fp)
 80026e0:	01400e04 	movi	r5,56
 80026e4:	1009883a 	mov	r4,r2
 80026e8:	8007f540 	call	8007f54 <__mulsi3>
 80026ec:	e0fbe804 	addi	r3,fp,-4192
 80026f0:	1885883a 	add	r2,r3,r2
 80026f4:	10c09204 	addi	r3,r2,584
 80026f8:	00820c74 	movhi	r2,2097
 80026fc:	10854f04 	addi	r2,r2,5436
 8002700:	18800015 	stw	r2,0(r3)
 8002704:	e0bbf217 	ldw	r2,-4152(fp)
 8002708:	01400e04 	movi	r5,56
 800270c:	1009883a 	mov	r4,r2
 8002710:	8007f540 	call	8007f54 <__mulsi3>
 8002714:	e0fbe804 	addi	r3,fp,-4192
 8002718:	1885883a 	add	r2,r3,r2
 800271c:	10809304 	addi	r2,r2,588
 8002720:	00c00584 	movi	r3,22
 8002724:	10c00015 	stw	r3,0(r2)
 8002728:	e0bbf217 	ldw	r2,-4152(fp)
 800272c:	01400e04 	movi	r5,56
 8002730:	1009883a 	mov	r4,r2
 8002734:	8007f540 	call	8007f54 <__mulsi3>
 8002738:	e0fbe804 	addi	r3,fp,-4192
 800273c:	1885883a 	add	r2,r3,r2
 8002740:	10809404 	addi	r2,r2,592
 8002744:	00c00604 	movi	r3,24
 8002748:	10c00015 	stw	r3,0(r2)
 800274c:	e0bbf217 	ldw	r2,-4152(fp)
 8002750:	01400e04 	movi	r5,56
 8002754:	1009883a 	mov	r4,r2
 8002758:	8007f540 	call	8007f54 <__mulsi3>
 800275c:	e0fbe804 	addi	r3,fp,-4192
 8002760:	1885883a 	add	r2,r3,r2
 8002764:	10809504 	addi	r2,r2,596
 8002768:	10000015 	stw	zero,0(r2)
 800276c:	e0bbf217 	ldw	r2,-4152(fp)
 8002770:	01400e04 	movi	r5,56
 8002774:	1009883a 	mov	r4,r2
 8002778:	8007f540 	call	8007f54 <__mulsi3>
 800277c:	e0fbe804 	addi	r3,fp,-4192
 8002780:	1885883a 	add	r2,r3,r2
 8002784:	10809604 	addi	r2,r2,600
 8002788:	10000015 	stw	zero,0(r2)
 800278c:	e0bbf217 	ldw	r2,-4152(fp)
 8002790:	01400e04 	movi	r5,56
 8002794:	1009883a 	mov	r4,r2
 8002798:	8007f540 	call	8007f54 <__mulsi3>
 800279c:	e0fbe804 	addi	r3,fp,-4192
 80027a0:	1885883a 	add	r2,r3,r2
 80027a4:	10809704 	addi	r2,r2,604
 80027a8:	10000015 	stw	zero,0(r2)
 80027ac:	e0bbf217 	ldw	r2,-4152(fp)
 80027b0:	01400e04 	movi	r5,56
 80027b4:	1009883a 	mov	r4,r2
 80027b8:	8007f540 	call	8007f54 <__mulsi3>
 80027bc:	e0fbe804 	addi	r3,fp,-4192
 80027c0:	1885883a 	add	r2,r3,r2
 80027c4:	10809804 	addi	r2,r2,608
 80027c8:	10000015 	stw	zero,0(r2)
 80027cc:	e0bbf217 	ldw	r2,-4152(fp)
 80027d0:	01400e04 	movi	r5,56
 80027d4:	1009883a 	mov	r4,r2
 80027d8:	8007f540 	call	8007f54 <__mulsi3>
 80027dc:	e0fbe804 	addi	r3,fp,-4192
 80027e0:	1885883a 	add	r2,r3,r2
 80027e4:	10809904 	addi	r2,r2,612
 80027e8:	00c00584 	movi	r3,22
 80027ec:	10c00015 	stw	r3,0(r2)
 80027f0:	e0bbf217 	ldw	r2,-4152(fp)
 80027f4:	01400e04 	movi	r5,56
 80027f8:	1009883a 	mov	r4,r2
 80027fc:	8007f540 	call	8007f54 <__mulsi3>
 8002800:	e0fbe804 	addi	r3,fp,-4192
 8002804:	1885883a 	add	r2,r3,r2
 8002808:	10809a04 	addi	r2,r2,616
 800280c:	00c00604 	movi	r3,24
 8002810:	10c00015 	stw	r3,0(r2)

    scene.objects.untyped[ship].pos.x = 50;
 8002814:	e0bbee17 	ldw	r2,-4168(fp)
 8002818:	01400e04 	movi	r5,56
 800281c:	1009883a 	mov	r4,r2
 8002820:	8007f540 	call	8007f54 <__mulsi3>
 8002824:	e0fbe804 	addi	r3,fp,-4192
 8002828:	1885883a 	add	r2,r3,r2
 800282c:	10809004 	addi	r2,r2,576
 8002830:	00c00c84 	movi	r3,50
 8002834:	10c00015 	stw	r3,0(r2)
    scene.objects.untyped[ship].pos.y = (scene.max.y - scene.objects.untyped[ship].sprite.height) / 2;
 8002838:	e43bfc17 	ldw	r16,-4112(fp)
 800283c:	e0bbee17 	ldw	r2,-4168(fp)
 8002840:	01400e04 	movi	r5,56
 8002844:	1009883a 	mov	r4,r2
 8002848:	8007f540 	call	8007f54 <__mulsi3>
 800284c:	e0fbe804 	addi	r3,fp,-4192
 8002850:	1885883a 	add	r2,r3,r2
 8002854:	10809404 	addi	r2,r2,592
 8002858:	10800017 	ldw	r2,0(r2)
 800285c:	8085c83a 	sub	r2,r16,r2
 8002860:	1006d7fa 	srli	r3,r2,31
 8002864:	1885883a 	add	r2,r3,r2
 8002868:	1005d07a 	srai	r2,r2,1
 800286c:	1021883a 	mov	r16,r2
 8002870:	e0bbee17 	ldw	r2,-4168(fp)
 8002874:	01400e04 	movi	r5,56
 8002878:	1009883a 	mov	r4,r2
 800287c:	8007f540 	call	8007f54 <__mulsi3>
 8002880:	e0fbe804 	addi	r3,fp,-4192
 8002884:	1885883a 	add	r2,r3,r2
 8002888:	10809104 	addi	r2,r2,580
 800288c:	14000015 	stw	r16,0(r2)

    scene.objects.untyped[title_text].pos.x = (scene.max.x - scene.objects.untyped[title_text].sprite.width) / 2;
 8002890:	e43bfb17 	ldw	r16,-4116(fp)
 8002894:	e0bbef17 	ldw	r2,-4164(fp)
 8002898:	01400e04 	movi	r5,56
 800289c:	1009883a 	mov	r4,r2
 80028a0:	8007f540 	call	8007f54 <__mulsi3>
 80028a4:	e0fbe804 	addi	r3,fp,-4192
 80028a8:	1885883a 	add	r2,r3,r2
 80028ac:	10809304 	addi	r2,r2,588
 80028b0:	10800017 	ldw	r2,0(r2)
 80028b4:	8085c83a 	sub	r2,r16,r2
 80028b8:	1006d7fa 	srli	r3,r2,31
 80028bc:	1885883a 	add	r2,r3,r2
 80028c0:	1005d07a 	srai	r2,r2,1
 80028c4:	1021883a 	mov	r16,r2
 80028c8:	e0bbef17 	ldw	r2,-4164(fp)
 80028cc:	01400e04 	movi	r5,56
 80028d0:	1009883a 	mov	r4,r2
 80028d4:	8007f540 	call	8007f54 <__mulsi3>
 80028d8:	e0fbe804 	addi	r3,fp,-4192
 80028dc:	1885883a 	add	r2,r3,r2
 80028e0:	10809004 	addi	r2,r2,576
 80028e4:	14000015 	stw	r16,0(r2)
    scene.objects.untyped[title_text].pos.y = 100;
 80028e8:	e0bbef17 	ldw	r2,-4164(fp)
 80028ec:	01400e04 	movi	r5,56
 80028f0:	1009883a 	mov	r4,r2
 80028f4:	8007f540 	call	8007f54 <__mulsi3>
 80028f8:	e0fbe804 	addi	r3,fp,-4192
 80028fc:	1885883a 	add	r2,r3,r2
 8002900:	10809104 	addi	r2,r2,580
 8002904:	00c01904 	movi	r3,100
 8002908:	10c00015 	stw	r3,0(r2)

    scene.objects.untyped[start_button_unpressed].pos.x = 3 * scene.max.x / 4 - scene.objects.untyped[start_button_unpressed].sprite.width / 2;
 800290c:	e0fbfb17 	ldw	r3,-4116(fp)
 8002910:	1805883a 	mov	r2,r3
 8002914:	1085883a 	add	r2,r2,r2
 8002918:	10c5883a 	add	r2,r2,r3
 800291c:	1000010e 	bge	r2,zero,8002924 <run_title_screen+0x948>
 8002920:	108000c4 	addi	r2,r2,3
 8002924:	1005d0ba 	srai	r2,r2,2
 8002928:	1021883a 	mov	r16,r2
 800292c:	e0bbf017 	ldw	r2,-4160(fp)
 8002930:	01400e04 	movi	r5,56
 8002934:	1009883a 	mov	r4,r2
 8002938:	8007f540 	call	8007f54 <__mulsi3>
 800293c:	e0fbe804 	addi	r3,fp,-4192
 8002940:	1885883a 	add	r2,r3,r2
 8002944:	10809304 	addi	r2,r2,588
 8002948:	10800017 	ldw	r2,0(r2)
 800294c:	1006d7fa 	srli	r3,r2,31
 8002950:	1885883a 	add	r2,r3,r2
 8002954:	1005d07a 	srai	r2,r2,1
 8002958:	80a1c83a 	sub	r16,r16,r2
 800295c:	e0bbf017 	ldw	r2,-4160(fp)
 8002960:	01400e04 	movi	r5,56
 8002964:	1009883a 	mov	r4,r2
 8002968:	8007f540 	call	8007f54 <__mulsi3>
 800296c:	e0fbe804 	addi	r3,fp,-4192
 8002970:	1885883a 	add	r2,r3,r2
 8002974:	10809004 	addi	r2,r2,576
 8002978:	14000015 	stw	r16,0(r2)
    scene.objects.untyped[start_button_unpressed].pos.y = scene.max.y - scene.objects.untyped[start_button_unpressed].sprite.height - 50;
 800297c:	e43bfc17 	ldw	r16,-4112(fp)
 8002980:	e0bbf017 	ldw	r2,-4160(fp)
 8002984:	01400e04 	movi	r5,56
 8002988:	1009883a 	mov	r4,r2
 800298c:	8007f540 	call	8007f54 <__mulsi3>
 8002990:	e0fbe804 	addi	r3,fp,-4192
 8002994:	1885883a 	add	r2,r3,r2
 8002998:	10809404 	addi	r2,r2,592
 800299c:	10800017 	ldw	r2,0(r2)
 80029a0:	8085c83a 	sub	r2,r16,r2
 80029a4:	143ff384 	addi	r16,r2,-50
 80029a8:	e0bbf017 	ldw	r2,-4160(fp)
 80029ac:	01400e04 	movi	r5,56
 80029b0:	1009883a 	mov	r4,r2
 80029b4:	8007f540 	call	8007f54 <__mulsi3>
 80029b8:	e0fbe804 	addi	r3,fp,-4192
 80029bc:	1885883a 	add	r2,r3,r2
 80029c0:	10809104 	addi	r2,r2,580
 80029c4:	14000015 	stw	r16,0(r2)

    scene.objects.untyped[start_button_pressed].pos = scene.objects.untyped[start_button_unpressed].pos;
 80029c8:	e0bbf117 	ldw	r2,-4156(fp)
 80029cc:	01400e04 	movi	r5,56
 80029d0:	1009883a 	mov	r4,r2
 80029d4:	8007f540 	call	8007f54 <__mulsi3>
 80029d8:	e0fbe804 	addi	r3,fp,-4192
 80029dc:	1885883a 	add	r2,r3,r2
 80029e0:	14009004 	addi	r16,r2,576
 80029e4:	e0bbf017 	ldw	r2,-4160(fp)
 80029e8:	01400e04 	movi	r5,56
 80029ec:	1009883a 	mov	r4,r2
 80029f0:	8007f540 	call	8007f54 <__mulsi3>
 80029f4:	e0fbe804 	addi	r3,fp,-4192
 80029f8:	1885883a 	add	r2,r3,r2
 80029fc:	10809004 	addi	r2,r2,576
 8002a00:	10c00017 	ldw	r3,0(r2)
 8002a04:	80c00015 	stw	r3,0(r16)
 8002a08:	10800117 	ldw	r2,4(r2)
 8002a0c:	80800115 	stw	r2,4(r16)

    float dx = 0;
 8002a10:	e03be815 	stw	zero,-4192(fp)
    float x = scene.objects.untyped[ship].pos.x;
 8002a14:	e0bbee17 	ldw	r2,-4168(fp)
 8002a18:	01400e04 	movi	r5,56
 8002a1c:	1009883a 	mov	r4,r2
 8002a20:	8007f540 	call	8007f54 <__mulsi3>
 8002a24:	e0fbe804 	addi	r3,fp,-4192
 8002a28:	1885883a 	add	r2,r3,r2
 8002a2c:	10809004 	addi	r2,r2,576
 8002a30:	10800017 	ldw	r2,0(r2)
 8002a34:	1009883a 	mov	r4,r2
 8002a38:	800938c0 	call	800938c <__floatsisf>
 8002a3c:	1007883a 	mov	r3,r2
 8002a40:	e0fbe915 	stw	r3,-4188(fp)

    int start_fading = 0;
 8002a44:	e03bea15 	stw	zero,-4184(fp)
    int fading = 0;
 8002a48:	e03bf315 	stw	zero,-4148(fp)
    int exiting = 0;
 8002a4c:	e03beb15 	stw	zero,-4180(fp)

    fade_t fade = create_fade(0x0000, FADE_TO);
 8002a50:	e0bff504 	addi	r2,fp,-44
 8002a54:	000d883a 	mov	r6,zero
 8002a58:	000b883a 	mov	r5,zero
 8002a5c:	1009883a 	mov	r4,r2
 8002a60:	80000f40 	call	80000f4 <create_fade>

    mouse_t mouse = new_mouse(scene.max.x / 2, scene.max.y / 2);
 8002a64:	e0bbfb17 	ldw	r2,-4116(fp)
 8002a68:	1006d7fa 	srli	r3,r2,31
 8002a6c:	1885883a 	add	r2,r3,r2
 8002a70:	1005d07a 	srai	r2,r2,1
 8002a74:	1009883a 	mov	r4,r2
 8002a78:	e0bbfc17 	ldw	r2,-4112(fp)
 8002a7c:	1006d7fa 	srli	r3,r2,31
 8002a80:	1885883a 	add	r2,r3,r2
 8002a84:	1005d07a 	srai	r2,r2,1
 8002a88:	1007883a 	mov	r3,r2
 8002a8c:	e0bff904 	addi	r2,fp,-28
 8002a90:	180d883a 	mov	r6,r3
 8002a94:	200b883a 	mov	r5,r4
 8002a98:	1009883a 	mov	r4,r2
 8002a9c:	80030900 	call	8003090 <new_mouse>

    int running = 1;
 8002aa0:	00800044 	movi	r2,1
 8002aa4:	e0bbec15 	stw	r2,-4176(fp)
    while (running) {
 8002aa8:	0000b206 	br	8002d74 <run_title_screen+0xd98>
        poll_mouse(&mouse, 0, 1);
 8002aac:	e0bff904 	addi	r2,fp,-28
 8002ab0:	01800044 	movi	r6,1
 8002ab4:	000b883a 	mov	r5,zero
 8002ab8:	1009883a 	mov	r4,r2
 8002abc:	80031180 	call	8003118 <poll_mouse>

        if (is_ready(&frame_rate)) {
 8002ac0:	e0bbf404 	addi	r2,fp,-4144
 8002ac4:	1009883a 	mov	r4,r2
 8002ac8:	80034f80 	call	80034f8 <is_ready>
 8002acc:	1000a926 	beq	r2,zero,8002d74 <run_title_screen+0xd98>
            handle_mouse(&mouse, &scene, 0, 0); 
 8002ad0:	e0fbf704 	addi	r3,fp,-4132
 8002ad4:	e0bff904 	addi	r2,fp,-28
 8002ad8:	000f883a 	mov	r7,zero
 8002adc:	000d883a 	mov	r6,zero
 8002ae0:	180b883a 	mov	r5,r3
 8002ae4:	1009883a 	mov	r4,r2
 8002ae8:	80003f40 	call	80003f4 <handle_mouse>
            scene.objects.untyped[cursor].pos = mouse.pos;
 8002aec:	e0bbf217 	ldw	r2,-4152(fp)
 8002af0:	01400e04 	movi	r5,56
 8002af4:	1009883a 	mov	r4,r2
 8002af8:	8007f540 	call	8007f54 <__mulsi3>
 8002afc:	e0fbe804 	addi	r3,fp,-4192
 8002b00:	1885883a 	add	r2,r3,r2
 8002b04:	10809004 	addi	r2,r2,576
 8002b08:	e0fff917 	ldw	r3,-28(fp)
 8002b0c:	10c00015 	stw	r3,0(r2)
 8002b10:	e0fffa17 	ldw	r3,-24(fp)
 8002b14:	10c00115 	stw	r3,4(r2)

            scene.objects.untyped[background].sprite.start_x += 2;
 8002b18:	e0bbed17 	ldw	r2,-4172(fp)
 8002b1c:	01400e04 	movi	r5,56
 8002b20:	1009883a 	mov	r4,r2
 8002b24:	8007f540 	call	8007f54 <__mulsi3>
 8002b28:	e0fbe804 	addi	r3,fp,-4192
 8002b2c:	1885883a 	add	r2,r3,r2
 8002b30:	10809704 	addi	r2,r2,604
 8002b34:	10800017 	ldw	r2,0(r2)
 8002b38:	14000084 	addi	r16,r2,2
 8002b3c:	e0bbed17 	ldw	r2,-4172(fp)
 8002b40:	01400e04 	movi	r5,56
 8002b44:	1009883a 	mov	r4,r2
 8002b48:	8007f540 	call	8007f54 <__mulsi3>
 8002b4c:	e0fbe804 	addi	r3,fp,-4192
 8002b50:	1885883a 	add	r2,r3,r2
 8002b54:	10809704 	addi	r2,r2,604
 8002b58:	14000015 	stw	r16,0(r2)
            if (scene.objects.untyped[background].sprite.start_x >= scene.objects.untyped[background].sprite.width - SCREEN_WIDTH)
 8002b5c:	e0bbed17 	ldw	r2,-4172(fp)
 8002b60:	01400e04 	movi	r5,56
 8002b64:	1009883a 	mov	r4,r2
 8002b68:	8007f540 	call	8007f54 <__mulsi3>
 8002b6c:	e0fbe804 	addi	r3,fp,-4192
 8002b70:	1885883a 	add	r2,r3,r2
 8002b74:	10809704 	addi	r2,r2,604
 8002b78:	14000017 	ldw	r16,0(r2)
 8002b7c:	e0bbed17 	ldw	r2,-4172(fp)
 8002b80:	01400e04 	movi	r5,56
 8002b84:	1009883a 	mov	r4,r2
 8002b88:	8007f540 	call	8007f54 <__mulsi3>
 8002b8c:	e0fbe804 	addi	r3,fp,-4192
 8002b90:	1885883a 	add	r2,r3,r2
 8002b94:	10809304 	addi	r2,r2,588
 8002b98:	10800017 	ldw	r2,0(r2)
 8002b9c:	10bf6004 	addi	r2,r2,-640
 8002ba0:	80800816 	blt	r16,r2,8002bc4 <run_title_screen+0xbe8>
                scene.objects.untyped[background].sprite.start_x = 0;
 8002ba4:	e0bbed17 	ldw	r2,-4172(fp)
 8002ba8:	01400e04 	movi	r5,56
 8002bac:	1009883a 	mov	r4,r2
 8002bb0:	8007f540 	call	8007f54 <__mulsi3>
 8002bb4:	e0fbe804 	addi	r3,fp,-4192
 8002bb8:	1885883a 	add	r2,r3,r2
 8002bbc:	10809704 	addi	r2,r2,604
 8002bc0:	10000015 	stw	zero,0(r2)
            scene.objects.untyped[background].sprite.end_x = scene.objects.untyped[background].sprite.start_x + SCREEN_WIDTH;
 8002bc4:	e0bbed17 	ldw	r2,-4172(fp)
 8002bc8:	01400e04 	movi	r5,56
 8002bcc:	1009883a 	mov	r4,r2
 8002bd0:	8007f540 	call	8007f54 <__mulsi3>
 8002bd4:	e0fbe804 	addi	r3,fp,-4192
 8002bd8:	1885883a 	add	r2,r3,r2
 8002bdc:	10809704 	addi	r2,r2,604
 8002be0:	10800017 	ldw	r2,0(r2)
 8002be4:	1400a004 	addi	r16,r2,640
 8002be8:	e0bbed17 	ldw	r2,-4172(fp)
 8002bec:	01400e04 	movi	r5,56
 8002bf0:	1009883a 	mov	r4,r2
 8002bf4:	8007f540 	call	8007f54 <__mulsi3>
 8002bf8:	e0fbe804 	addi	r3,fp,-4192
 8002bfc:	1885883a 	add	r2,r3,r2
 8002c00:	10809904 	addi	r2,r2,612
 8002c04:	14000015 	stw	r16,0(r2)

            if (mouse.buttons.left) {
 8002c08:	e0bffb17 	ldw	r2,-20(fp)
 8002c0c:	10001e26 	beq	r2,zero,8002c88 <run_title_screen+0xcac>
                if (is_clicked(&mouse, &scene.objects.untyped[start_button_unpressed])) {
 8002c10:	e43bf704 	addi	r16,fp,-4132
 8002c14:	01400e04 	movi	r5,56
 8002c18:	e13bf017 	ldw	r4,-4160(fp)
 8002c1c:	8007f540 	call	8007f54 <__mulsi3>
 8002c20:	10807e04 	addi	r2,r2,504
 8002c24:	8087883a 	add	r3,r16,r2
 8002c28:	e0bff904 	addi	r2,fp,-28
 8002c2c:	180b883a 	mov	r5,r3
 8002c30:	1009883a 	mov	r4,r2
 8002c34:	80003440 	call	8000344 <is_clicked>
 8002c38:	10001326 	beq	r2,zero,8002c88 <run_title_screen+0xcac>
                    scene.objects.untyped[start_button_unpressed].visable = 0;
 8002c3c:	e0bbf017 	ldw	r2,-4160(fp)
 8002c40:	01400e04 	movi	r5,56
 8002c44:	1009883a 	mov	r4,r2
 8002c48:	8007f540 	call	8007f54 <__mulsi3>
 8002c4c:	e0fbe804 	addi	r3,fp,-4192
 8002c50:	1885883a 	add	r2,r3,r2
 8002c54:	10808e04 	addi	r2,r2,568
 8002c58:	10000015 	stw	zero,0(r2)
                    scene.objects.untyped[start_button_pressed  ].visable = 1;
 8002c5c:	e0bbf117 	ldw	r2,-4156(fp)
 8002c60:	01400e04 	movi	r5,56
 8002c64:	1009883a 	mov	r4,r2
 8002c68:	8007f540 	call	8007f54 <__mulsi3>
 8002c6c:	e0fbe804 	addi	r3,fp,-4192
 8002c70:	1885883a 	add	r2,r3,r2
 8002c74:	10808e04 	addi	r2,r2,568
 8002c78:	00c00044 	movi	r3,1
 8002c7c:	10c00015 	stw	r3,0(r2)
                    exiting = 1;
 8002c80:	00800044 	movi	r2,1
 8002c84:	e0bbeb15 	stw	r2,-4180(fp)
                }
            }

            if (exiting) {
 8002c88:	e0bbeb17 	ldw	r2,-4180(fp)
 8002c8c:	10001626 	beq	r2,zero,8002ce8 <run_title_screen+0xd0c>
                dx += 0.35f;
 8002c90:	014facf4 	movhi	r5,16051
 8002c94:	294cccc4 	addi	r5,r5,13107
 8002c98:	e13be817 	ldw	r4,-4192(fp)
 8002c9c:	8007f7c0 	call	8007f7c <__addsf3>
 8002ca0:	1007883a 	mov	r3,r2
 8002ca4:	e0fbe815 	stw	r3,-4192(fp)
                x += dx;
 8002ca8:	e17be817 	ldw	r5,-4192(fp)
 8002cac:	e13be917 	ldw	r4,-4188(fp)
 8002cb0:	8007f7c0 	call	8007f7c <__addsf3>
 8002cb4:	1007883a 	mov	r3,r2
 8002cb8:	e0fbe915 	stw	r3,-4188(fp)
                scene.objects.untyped[ship].pos.x = x;
 8002cbc:	e13be917 	ldw	r4,-4188(fp)
 8002cc0:	800931c0 	call	800931c <__fixsfsi>
 8002cc4:	1021883a 	mov	r16,r2
 8002cc8:	e0bbee17 	ldw	r2,-4168(fp)
 8002ccc:	01400e04 	movi	r5,56
 8002cd0:	1009883a 	mov	r4,r2
 8002cd4:	8007f540 	call	8007f54 <__mulsi3>
 8002cd8:	e0fbe804 	addi	r3,fp,-4192
 8002cdc:	1885883a 	add	r2,r3,r2
 8002ce0:	10809004 	addi	r2,r2,576
 8002ce4:	14000015 	stw	r16,0(r2)
            }

            fading = scene.objects.untyped[ship].pos.x > scene.max.x;
 8002ce8:	e0bbee17 	ldw	r2,-4168(fp)
 8002cec:	01400e04 	movi	r5,56
 8002cf0:	1009883a 	mov	r4,r2
 8002cf4:	8007f540 	call	8007f54 <__mulsi3>
 8002cf8:	e0fbe804 	addi	r3,fp,-4192
 8002cfc:	1885883a 	add	r2,r3,r2
 8002d00:	10809004 	addi	r2,r2,576
 8002d04:	10800017 	ldw	r2,0(r2)
 8002d08:	e0fbfb17 	ldw	r3,-4116(fp)
 8002d0c:	1884803a 	cmplt	r2,r3,r2
 8002d10:	10803fcc 	andi	r2,r2,255
 8002d14:	e0bbf315 	stw	r2,-4148(fp)

            if (fading) {
 8002d18:	e0bbf317 	ldw	r2,-4148(fp)
 8002d1c:	10000e26 	beq	r2,zero,8002d58 <run_title_screen+0xd7c>
                if (!start_fading) {
 8002d20:	e0bbea17 	ldw	r2,-4184(fp)
 8002d24:	1000061e 	bne	r2,zero,8002d40 <run_title_screen+0xd64>
                    start_fade(&fade, 1);
 8002d28:	e0bff504 	addi	r2,fp,-44
 8002d2c:	014fe034 	movhi	r5,16256
 8002d30:	1009883a 	mov	r4,r2
 8002d34:	80001600 	call	8000160 <start_fade>
                    start_fading = 1;
 8002d38:	00800044 	movi	r2,1
 8002d3c:	e0bbea15 	stw	r2,-4184(fp)
                }
                running = !show_fade(&fade);
 8002d40:	e0bff504 	addi	r2,fp,-44
 8002d44:	1009883a 	mov	r4,r2
 8002d48:	80002300 	call	8000230 <show_fade>
 8002d4c:	1005003a 	cmpeq	r2,r2,zero
 8002d50:	10803fcc 	andi	r2,r2,255
 8002d54:	e0bbec15 	stw	r2,-4176(fp)
            }
            
            while (gdu_is_running());
 8002d58:	0001883a 	nop
 8002d5c:	80012d40 	call	80012d4 <gdu_is_running>
 8002d60:	103ffe1e 	bne	r2,zero,8002d5c <__alt_data_end+0xfc002d5c>
            push_scene(&scene);
 8002d64:	e0bbf704 	addi	r2,fp,-4132
 8002d68:	1009883a 	mov	r4,r2
 8002d6c:	80008740 	call	8000874 <push_scene>
            start_render();
 8002d70:	800003c0 	call	800003c <start_render>
    fade_t fade = create_fade(0x0000, FADE_TO);

    mouse_t mouse = new_mouse(scene.max.x / 2, scene.max.y / 2);

    int running = 1;
    while (running) {
 8002d74:	e0bbec17 	ldw	r2,-4176(fp)
 8002d78:	103f4c1e 	bne	r2,zero,8002aac <__alt_data_end+0xfc002aac>
            while (gdu_is_running());
            push_scene(&scene);
            start_render();
        }
    }
}
 8002d7c:	0001883a 	nop
 8002d80:	e6ffff04 	addi	sp,fp,-4
 8002d84:	dfc00217 	ldw	ra,8(sp)
 8002d88:	df000117 	ldw	fp,4(sp)
 8002d8c:	dc000017 	ldw	r16,0(sp)
 8002d90:	dec00304 	addi	sp,sp,12
 8002d94:	f800283a 	ret

08002d98 <main>:

#include "levels/title_screen.h"
#include "levels/level1.h"
#include "sprites/mouse.h"

int main() {
 8002d98:	deffef04 	addi	sp,sp,-68
 8002d9c:	dfc01015 	stw	ra,64(sp)
 8002da0:	df000f15 	stw	fp,60(sp)
 8002da4:	df000f04 	addi	fp,sp,60
    printf("Running War Stars 2: Defense of the Homes!\n");
 8002da8:	01020d74 	movhi	r4,2101
 8002dac:	21209f04 	addi	r4,r4,-32132
 8002db0:	800c2700 	call	800c270 <puts>
    disable_master_timer();
 8002db4:	80033540 	call	8003354 <disable_master_timer>
    usleep(1000);
 8002db8:	0100fa04 	movi	r4,1000
 8002dbc:	80168680 	call	8016868 <usleep>
    enable_master_timer();
 8002dc0:	80033280 	call	8003328 <enable_master_timer>
    
    vga_init();
 8002dc4:	80054e00 	call	80054e0 <vga_init>
    gdu_reset();
 8002dc8:	80012f80 	call	80012f8 <gdu_reset>

    sprite_t mouse_s = mouse_sprite;
 8002dcc:	00820c74 	movhi	r2,2097
 8002dd0:	108ffe04 	addi	r2,r2,16376
 8002dd4:	e0bff115 	stw	r2,-60(fp)
 8002dd8:	00806404 	movi	r2,400
 8002ddc:	e0bff215 	stw	r2,-56(fp)
 8002de0:	008042c4 	movi	r2,267
 8002de4:	e0bff315 	stw	r2,-52(fp)
 8002de8:	e03ff415 	stw	zero,-48(fp)
 8002dec:	e03ff515 	stw	zero,-44(fp)
 8002df0:	e03ff615 	stw	zero,-40(fp)
 8002df4:	e03ff715 	stw	zero,-36(fp)
 8002df8:	00806404 	movi	r2,400
 8002dfc:	e0bff815 	stw	r2,-32(fp)
 8002e00:	008042c4 	movi	r2,267
 8002e04:	e0bff915 	stw	r2,-28(fp)
    mouse_s.screen_x = (SCREEN_WIDTH - mouse_s.width) / 2;
 8002e08:	e0bff217 	ldw	r2,-56(fp)
 8002e0c:	00c0a004 	movi	r3,640
 8002e10:	1885c83a 	sub	r2,r3,r2
 8002e14:	1006d7fa 	srli	r3,r2,31
 8002e18:	1885883a 	add	r2,r3,r2
 8002e1c:	1005d07a 	srai	r2,r2,1
 8002e20:	e0bff415 	stw	r2,-48(fp)
    mouse_s.screen_y = (SCREEN_HEIGHT - mouse_s.height) / 2;
 8002e24:	e0bff317 	ldw	r2,-52(fp)
 8002e28:	00c07804 	movi	r3,480
 8002e2c:	1885c83a 	sub	r2,r3,r2
 8002e30:	1006d7fa 	srli	r3,r2,31
 8002e34:	1885883a 	add	r2,r3,r2
 8002e38:	1005d07a 	srai	r2,r2,1
 8002e3c:	e0bff515 	stw	r2,-44(fp)
    push_sprite(&mouse_s, 0);
 8002e40:	000b883a 	mov	r5,zero
 8002e44:	e13ff104 	addi	r4,fp,-60
 8002e48:	80014400 	call	8001440 <push_sprite>
    double_render();
 8002e4c:	80000ac0 	call	80000ac <double_render>
    pop_sprite(0);
 8002e50:	0009883a 	mov	r4,zero
 8002e54:	80014b00 	call	80014b0 <pop_sprite>
    
    init_mouse();
 8002e58:	80030600 	call	8003060 <init_mouse>
    mouse_t mouse;
    while (!poll_mouse(&mouse, 0, 0));
 8002e5c:	0001883a 	nop
 8002e60:	e0bffa04 	addi	r2,fp,-24
 8002e64:	000d883a 	mov	r6,zero
 8002e68:	000b883a 	mov	r5,zero
 8002e6c:	1009883a 	mov	r4,r2
 8002e70:	80031180 	call	8003118 <poll_mouse>
 8002e74:	103ffa26 	beq	r2,zero,8002e60 <__alt_data_end+0xfc002e60>
    
    run_title_screen();
 8002e78:	8001fdc0 	call	8001fdc <run_title_screen>
    run_level1();
 8002e7c:	80015180 	call	8001518 <run_level1>
    
    printf("Done!\n");
 8002e80:	01020d74 	movhi	r4,2101
 8002e84:	2120aa04 	addi	r4,r4,-32088
 8002e88:	800c2700 	call	800c270 <puts>
    return 0;
 8002e8c:	0005883a 	mov	r2,zero
}
 8002e90:	e037883a 	mov	sp,fp
 8002e94:	dfc00117 	ldw	ra,4(sp)
 8002e98:	df000017 	ldw	fp,0(sp)
 8002e9c:	dec00204 	addi	sp,sp,8
 8002ea0:	f800283a 	ret

08002ea4 <GetDriverandReport>:
#include "timer.h"

extern HID_DEVICE hid_device;
static BYTE addr = 1;

BYTE GetDriverandReport() {
 8002ea4:	defff604 	addi	sp,sp,-40
 8002ea8:	dfc00915 	stw	ra,36(sp)
 8002eac:	df000815 	stw	fp,32(sp)
 8002eb0:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 8002eb4:	00bfffc4 	movi	r2,-1
 8002eb8:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8002ebc:	01020d74 	movhi	r4,2101
 8002ec0:	2120ac04 	addi	r4,r4,-32080
 8002ec4:	800c2700 	call	800c270 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8002ec8:	00800044 	movi	r2,1
 8002ecc:	e0bffd05 	stb	r2,-12(fp)
 8002ed0:	00001206 	br	8002f1c <GetDriverandReport+0x78>
		tpl_ptr = GetDevtable(i);
 8002ed4:	e0bffd03 	ldbu	r2,-12(fp)
 8002ed8:	1009883a 	mov	r4,r2
 8002edc:	80054240 	call	8005424 <GetDevtable>
 8002ee0:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 8002ee4:	e0bffe17 	ldw	r2,-8(fp)
 8002ee8:	10800017 	ldw	r2,0(r2)
 8002eec:	10000826 	beq	r2,zero,8002f10 <GetDriverandReport+0x6c>
			printf("Device: %d", i);
 8002ef0:	e0bffd03 	ldbu	r2,-12(fp)
 8002ef4:	100b883a 	mov	r5,r2
 8002ef8:	01020d74 	movhi	r4,2101
 8002efc:	2120b504 	addi	r4,r4,-32044
 8002f00:	800c1740 	call	800c174 <printf>
			device = tpl_ptr->devclass;
 8002f04:	e0bffe17 	ldw	r2,-8(fp)
 8002f08:	10800103 	ldbu	r2,4(r2)
 8002f0c:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8002f10:	e0bffd03 	ldbu	r2,-12(fp)
 8002f14:	10800044 	addi	r2,r2,1
 8002f18:	e0bffd05 	stb	r2,-12(fp)
 8002f1c:	e0bffd03 	ldbu	r2,-12(fp)
 8002f20:	10800230 	cmpltui	r2,r2,8
 8002f24:	103feb1e 	bne	r2,zero,8002ed4 <__alt_data_end+0xfc002ed4>
			printf("Device: %d", i);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8002f28:	d0a00103 	ldbu	r2,-32764(gp)
 8002f2c:	11003fcc 	andi	r4,r2,255
 8002f30:	d0a6e8c3 	ldbu	r2,-25693(gp)
 8002f34:	10803fcc 	andi	r2,r2,255
 8002f38:	e0ffff44 	addi	r3,fp,-3
 8002f3c:	d8c00415 	stw	r3,16(sp)
 8002f40:	00c00044 	movi	r3,1
 8002f44:	d8c00315 	stw	r3,12(sp)
 8002f48:	d8800215 	stw	r2,8(sp)
 8002f4c:	d8000115 	stw	zero,4(sp)
 8002f50:	d8000015 	stw	zero,0(sp)
 8002f54:	01c00084 	movi	r7,2
 8002f58:	01802844 	movi	r6,161
 8002f5c:	000b883a 	mov	r5,zero
 8002f60:	80046480 	call	8004648 <XferCtrlReq>
 8002f64:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8002f68:	e0bfff03 	ldbu	r2,-4(fp)
 8002f6c:	10000926 	beq	r2,zero,8002f94 <GetDriverandReport+0xf0>
		printf("GetIdle Error. Error code: ");
 8002f70:	01020d74 	movhi	r4,2101
 8002f74:	2120b804 	addi	r4,r4,-32032
 8002f78:	800c1740 	call	800c174 <printf>
		printf("%x \n", rcode);
 8002f7c:	e0bfff03 	ldbu	r2,-4(fp)
 8002f80:	100b883a 	mov	r5,r2
 8002f84:	01020d74 	movhi	r4,2101
 8002f88:	2120bf04 	addi	r4,r4,-32004
 8002f8c:	800c1740 	call	800c174 <printf>
 8002f90:	00000906 	br	8002fb8 <GetDriverandReport+0x114>
	} else {
		printf("Update rate: ");
 8002f94:	01020d74 	movhi	r4,2101
 8002f98:	2120c104 	addi	r4,r4,-31996
 8002f9c:	800c1740 	call	800c174 <printf>
		printf("%x \n", tmpbyte);
 8002fa0:	e0bfff43 	ldbu	r2,-3(fp)
 8002fa4:	10803fcc 	andi	r2,r2,255
 8002fa8:	100b883a 	mov	r5,r2
 8002fac:	01020d74 	movhi	r4,2101
 8002fb0:	2120bf04 	addi	r4,r4,-32004
 8002fb4:	800c1740 	call	800c174 <printf>
	}
	printf("Protocol: ");
 8002fb8:	01020d74 	movhi	r4,2101
 8002fbc:	2120c504 	addi	r4,r4,-31980
 8002fc0:	800c1740 	call	800c174 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 8002fc4:	d0a00103 	ldbu	r2,-32764(gp)
 8002fc8:	11003fcc 	andi	r4,r2,255
 8002fcc:	d0a6e8c3 	ldbu	r2,-25693(gp)
 8002fd0:	10803fcc 	andi	r2,r2,255
 8002fd4:	e0ffff44 	addi	r3,fp,-3
 8002fd8:	d8c00415 	stw	r3,16(sp)
 8002fdc:	00c00044 	movi	r3,1
 8002fe0:	d8c00315 	stw	r3,12(sp)
 8002fe4:	d8800215 	stw	r2,8(sp)
 8002fe8:	d8000115 	stw	zero,4(sp)
 8002fec:	d8000015 	stw	zero,0(sp)
 8002ff0:	01c000c4 	movi	r7,3
 8002ff4:	01802844 	movi	r6,161
 8002ff8:	000b883a 	mov	r5,zero
 8002ffc:	80046480 	call	8004648 <XferCtrlReq>
 8003000:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8003004:	e0bfff03 	ldbu	r2,-4(fp)
 8003008:	10000926 	beq	r2,zero,8003030 <GetDriverandReport+0x18c>
		printf("GetProto Error. Error code ");
 800300c:	01020d74 	movhi	r4,2101
 8003010:	2120c804 	addi	r4,r4,-31968
 8003014:	800c1740 	call	800c174 <printf>
		printf("%x \n", rcode);
 8003018:	e0bfff03 	ldbu	r2,-4(fp)
 800301c:	100b883a 	mov	r5,r2
 8003020:	01020d74 	movhi	r4,2101
 8003024:	2120bf04 	addi	r4,r4,-32004
 8003028:	800c1740 	call	800c174 <printf>
 800302c:	00000606 	br	8003048 <GetDriverandReport+0x1a4>
	} else {
		printf("%d \n", tmpbyte);
 8003030:	e0bfff43 	ldbu	r2,-3(fp)
 8003034:	10803fcc 	andi	r2,r2,255
 8003038:	100b883a 	mov	r5,r2
 800303c:	01020d74 	movhi	r4,2101
 8003040:	2120cf04 	addi	r4,r4,-31940
 8003044:	800c1740 	call	800c174 <printf>
	}
	return device;
 8003048:	e0bffd43 	ldbu	r2,-11(fp)
}
 800304c:	e037883a 	mov	sp,fp
 8003050:	dfc00117 	ldw	ra,4(sp)
 8003054:	df000017 	ldw	fp,0(sp)
 8003058:	dec00204 	addi	sp,sp,8
 800305c:	f800283a 	ret

08003060 <init_mouse>:


void init_mouse() {
 8003060:	defffe04 	addi	sp,sp,-8
 8003064:	dfc00115 	stw	ra,4(sp)
 8003068:	df000015 	stw	fp,0(sp)
 800306c:	d839883a 	mov	fp,sp
    MAX3421E_init();
 8003070:	80044500 	call	8004450 <MAX3421E_init>
    USB_init();
 8003074:	8004bfc0 	call	8004bfc <USB_init>
}
 8003078:	0001883a 	nop
 800307c:	e037883a 	mov	sp,fp
 8003080:	dfc00117 	ldw	ra,4(sp)
 8003084:	df000017 	ldw	fp,0(sp)
 8003088:	dec00204 	addi	sp,sp,8
 800308c:	f800283a 	ret

08003090 <new_mouse>:

mouse_t new_mouse(int x, int y) {
 8003090:	defff604 	addi	sp,sp,-40
 8003094:	df000915 	stw	fp,36(sp)
 8003098:	df000904 	addi	fp,sp,36
 800309c:	e13ffd15 	stw	r4,-12(fp)
 80030a0:	e17ffe15 	stw	r5,-8(fp)
 80030a4:	e1bfff15 	stw	r6,-4(fp)
    mouse_t mouse = {
 80030a8:	e03ff715 	stw	zero,-36(fp)
 80030ac:	e03ff815 	stw	zero,-32(fp)
 80030b0:	e03ff915 	stw	zero,-28(fp)
 80030b4:	e03ffa15 	stw	zero,-24(fp)
 80030b8:	e03ffb15 	stw	zero,-20(fp)
 80030bc:	e03ffc15 	stw	zero,-16(fp)
 80030c0:	e0bffe17 	ldw	r2,-8(fp)
 80030c4:	e0bff715 	stw	r2,-36(fp)
 80030c8:	e0bfff17 	ldw	r2,-4(fp)
 80030cc:	e0bff815 	stw	r2,-32(fp)
        {x, y},
        {0, 0}
    };
    return mouse;
 80030d0:	e0bffd17 	ldw	r2,-12(fp)
 80030d4:	e0fff717 	ldw	r3,-36(fp)
 80030d8:	10c00015 	stw	r3,0(r2)
 80030dc:	e0fff817 	ldw	r3,-32(fp)
 80030e0:	10c00115 	stw	r3,4(r2)
 80030e4:	e0fff917 	ldw	r3,-28(fp)
 80030e8:	10c00215 	stw	r3,8(r2)
 80030ec:	e0fffa17 	ldw	r3,-24(fp)
 80030f0:	10c00315 	stw	r3,12(r2)
 80030f4:	e0fffb17 	ldw	r3,-20(fp)
 80030f8:	10c00415 	stw	r3,16(r2)
 80030fc:	e0fffc17 	ldw	r3,-16(fp)
 8003100:	10c00515 	stw	r3,20(r2)
}
 8003104:	e0bffd17 	ldw	r2,-12(fp)
 8003108:	e037883a 	mov	sp,fp
 800310c:	df000017 	ldw	fp,0(sp)
 8003110:	dec00104 	addi	sp,sp,4
 8003114:	f800283a 	ret

08003118 <poll_mouse>:

int poll_mouse(mouse_t* mouse, int reverse_x, int reverse_y) {
 8003118:	defff804 	addi	sp,sp,-32
 800311c:	dfc00715 	stw	ra,28(sp)
 8003120:	df000615 	stw	fp,24(sp)
 8003124:	df000604 	addi	fp,sp,24
 8003128:	e13ffd15 	stw	r4,-12(fp)
 800312c:	e17ffe15 	stw	r5,-8(fp)
 8003130:	e1bfff15 	stw	r6,-4(fp)
    static BOOT_MOUSE_REPORT buf;
    static BYTE device;
    static BYTE runningdebugflag = 0;

    MAX3421E_Task();
 8003134:	80044e40 	call	80044e4 <MAX3421E_Task>
    USB_Task();
 8003138:	8004c940 	call	8004c94 <USB_Task>

    if (GetUsbTaskState() == USB_STATE_RUNNING) {
 800313c:	80054040 	call	8005404 <GetUsbTaskState>
 8003140:	10803fcc 	andi	r2,r2,255
 8003144:	10801018 	cmpnei	r2,r2,64
 8003148:	1000691e 	bne	r2,zero,80032f0 <poll_mouse+0x1d8>
        if (!runningdebugflag) {
 800314c:	d0a6e603 	ldbu	r2,-25704(gp)
 8003150:	10803fcc 	andi	r2,r2,255
 8003154:	1000051e 	bne	r2,zero,800316c <poll_mouse+0x54>
            runningdebugflag = 1;
 8003158:	00800044 	movi	r2,1
 800315c:	d0a6e605 	stb	r2,-25704(gp)
            device = GetDriverandReport();
 8003160:	8002ea40 	call	8002ea4 <GetDriverandReport>
 8003164:	d0a6e645 	stb	r2,-25703(gp)
 8003168:	00006906 	br	8003310 <poll_mouse+0x1f8>
        } else if (device == 2) {
 800316c:	d0a6e643 	ldbu	r2,-25703(gp)
 8003170:	10803fcc 	andi	r2,r2,255
 8003174:	10800098 	cmpnei	r2,r2,2
 8003178:	1000651e 	bne	r2,zero,8003310 <poll_mouse+0x1f8>
            BYTE rcode = mousePoll(&buf);
 800317c:	d126e684 	addi	r4,gp,-25702
 8003180:	8003e200 	call	8003e20 <mousePoll>
 8003184:	e0bffa05 	stb	r2,-24(fp)
            if (rcode == hrNAK) {
 8003188:	e0bffa03 	ldbu	r2,-24(fp)
 800318c:	10800118 	cmpnei	r2,r2,4
 8003190:	1000021e 	bne	r2,zero,800319c <poll_mouse+0x84>
                //NAK means no new data
                return 0;
 8003194:	0005883a 	mov	r2,zero
 8003198:	00005e06 	br	8003314 <poll_mouse+0x1fc>
            } else if (rcode) {
 800319c:	e0bffa03 	ldbu	r2,-24(fp)
 80031a0:	10000a26 	beq	r2,zero,80031cc <poll_mouse+0xb4>
                printf("Rcode: ");
 80031a4:	01020d74 	movhi	r4,2101
 80031a8:	2120d104 	addi	r4,r4,-31932
 80031ac:	800c1740 	call	800c174 <printf>
                printf("%x \n", rcode);
 80031b0:	e0bffa03 	ldbu	r2,-24(fp)
 80031b4:	100b883a 	mov	r5,r2
 80031b8:	01020d74 	movhi	r4,2101
 80031bc:	2120bf04 	addi	r4,r4,-32004
 80031c0:	800c1740 	call	800c174 <printf>
                return 0;
 80031c4:	0005883a 	mov	r2,zero
 80031c8:	00005206 	br	8003314 <poll_mouse+0x1fc>
            }

            

            if (reverse_x)
 80031cc:	e0bffe17 	ldw	r2,-8(fp)
 80031d0:	10000a26 	beq	r2,zero,80031fc <poll_mouse+0xe4>
                mouse->pos.x -= (signed char) buf.x;
 80031d4:	e0bffd17 	ldw	r2,-12(fp)
 80031d8:	10c00017 	ldw	r3,0(r2)
 80031dc:	d0a6e703 	ldbu	r2,-25700(gp)
 80031e0:	10803fcc 	andi	r2,r2,255
 80031e4:	1080201c 	xori	r2,r2,128
 80031e8:	10bfe004 	addi	r2,r2,-128
 80031ec:	1887c83a 	sub	r3,r3,r2
 80031f0:	e0bffd17 	ldw	r2,-12(fp)
 80031f4:	10c00015 	stw	r3,0(r2)
 80031f8:	00000906 	br	8003220 <poll_mouse+0x108>
            else
                mouse->pos.x += (signed char) buf.x;
 80031fc:	e0bffd17 	ldw	r2,-12(fp)
 8003200:	10c00017 	ldw	r3,0(r2)
 8003204:	d0a6e703 	ldbu	r2,-25700(gp)
 8003208:	10803fcc 	andi	r2,r2,255
 800320c:	1080201c 	xori	r2,r2,128
 8003210:	10bfe004 	addi	r2,r2,-128
 8003214:	1887883a 	add	r3,r3,r2
 8003218:	e0bffd17 	ldw	r2,-12(fp)
 800321c:	10c00015 	stw	r3,0(r2)
            if (reverse_y)
 8003220:	e0bfff17 	ldw	r2,-4(fp)
 8003224:	10000a26 	beq	r2,zero,8003250 <poll_mouse+0x138>
                mouse->pos.y -= (signed char) buf.y;
 8003228:	e0bffd17 	ldw	r2,-12(fp)
 800322c:	10c00117 	ldw	r3,4(r2)
 8003230:	d0a6e783 	ldbu	r2,-25698(gp)
 8003234:	10803fcc 	andi	r2,r2,255
 8003238:	1080201c 	xori	r2,r2,128
 800323c:	10bfe004 	addi	r2,r2,-128
 8003240:	1887c83a 	sub	r3,r3,r2
 8003244:	e0bffd17 	ldw	r2,-12(fp)
 8003248:	10c00115 	stw	r3,4(r2)
 800324c:	00000906 	br	8003274 <poll_mouse+0x15c>
            else
                mouse->pos.y += (signed char) buf.y;
 8003250:	e0bffd17 	ldw	r2,-12(fp)
 8003254:	10c00117 	ldw	r3,4(r2)
 8003258:	d0a6e783 	ldbu	r2,-25698(gp)
 800325c:	10803fcc 	andi	r2,r2,255
 8003260:	1080201c 	xori	r2,r2,128
 8003264:	10bfe004 	addi	r2,r2,-128
 8003268:	1887883a 	add	r3,r3,r2
 800326c:	e0bffd17 	ldw	r2,-12(fp)
 8003270:	10c00115 	stw	r3,4(r2)

            mouse_buttons_t buttons;
            buttons.left    = buf.button & 0x01;
 8003274:	d0a6e683 	ldbu	r2,-25702(gp)
 8003278:	10803fcc 	andi	r2,r2,255
 800327c:	1080004c 	andi	r2,r2,1
 8003280:	e0bffb15 	stw	r2,-20(fp)
            buttons.right   = buf.button & 0x02;
 8003284:	d0a6e683 	ldbu	r2,-25702(gp)
 8003288:	10803fcc 	andi	r2,r2,255
 800328c:	1080008c 	andi	r2,r2,2
 8003290:	e0bffc15 	stw	r2,-16(fp)

            if (mouse->buttons.left && !buttons.left)
 8003294:	e0bffd17 	ldw	r2,-12(fp)
 8003298:	10800217 	ldw	r2,8(r2)
 800329c:	10000526 	beq	r2,zero,80032b4 <poll_mouse+0x19c>
 80032a0:	e0bffb17 	ldw	r2,-20(fp)
 80032a4:	1000031e 	bne	r2,zero,80032b4 <poll_mouse+0x19c>
                mouse->clicked.left = 1;
 80032a8:	e0bffd17 	ldw	r2,-12(fp)
 80032ac:	00c00044 	movi	r3,1
 80032b0:	10c00415 	stw	r3,16(r2)
            if (mouse->buttons.right && !buttons.right)
 80032b4:	e0bffd17 	ldw	r2,-12(fp)
 80032b8:	10800317 	ldw	r2,12(r2)
 80032bc:	10000526 	beq	r2,zero,80032d4 <poll_mouse+0x1bc>
 80032c0:	e0bffc17 	ldw	r2,-16(fp)
 80032c4:	1000031e 	bne	r2,zero,80032d4 <poll_mouse+0x1bc>
                mouse->clicked.right = 1;
 80032c8:	e0bffd17 	ldw	r2,-12(fp)
 80032cc:	00c00044 	movi	r3,1
 80032d0:	10c00515 	stw	r3,20(r2)
            
            mouse->buttons = buttons;
 80032d4:	e0bffd17 	ldw	r2,-12(fp)
 80032d8:	e0fffb17 	ldw	r3,-20(fp)
 80032dc:	10c00215 	stw	r3,8(r2)
 80032e0:	e0fffc17 	ldw	r3,-16(fp)
 80032e4:	10c00315 	stw	r3,12(r2)
            return 1;
 80032e8:	00800044 	movi	r2,1
 80032ec:	00000906 	br	8003314 <poll_mouse+0x1fc>
        }
    } else {
        if (runningdebugflag) {
 80032f0:	d0a6e603 	ldbu	r2,-25704(gp)
 80032f4:	10803fcc 	andi	r2,r2,255
 80032f8:	10000526 	beq	r2,zero,8003310 <poll_mouse+0x1f8>
            runningdebugflag = 0;
 80032fc:	d026e605 	stb	zero,-25704(gp)
            printf("initing\n");
 8003300:	01020d74 	movhi	r4,2101
 8003304:	2120d304 	addi	r4,r4,-31924
 8003308:	800c2700 	call	800c270 <puts>
            init_mouse();
 800330c:	80030600 	call	8003060 <init_mouse>
        }
    }

    
    return 0;
 8003310:	0005883a 	mov	r2,zero
}
 8003314:	e037883a 	mov	sp,fp
 8003318:	dfc00117 	ldw	ra,4(sp)
 800331c:	df000017 	ldw	fp,0(sp)
 8003320:	dec00204 	addi	sp,sp,8
 8003324:	f800283a 	ret

08003328 <enable_master_timer>:
    uint64_t time;
} timer_regs_t;

timer_regs_t* timer_regs = (timer_regs_t*) TIMER_MEM_LOCATION;

void enable_master_timer() { timer_regs->enabled = 1; }
 8003328:	deffff04 	addi	sp,sp,-4
 800332c:	df000015 	stw	fp,0(sp)
 8003330:	d839883a 	mov	fp,sp
 8003334:	d0a00217 	ldw	r2,-32760(gp)
 8003338:	00c00044 	movi	r3,1
 800333c:	10c00015 	stw	r3,0(r2)
 8003340:	0001883a 	nop
 8003344:	e037883a 	mov	sp,fp
 8003348:	df000017 	ldw	fp,0(sp)
 800334c:	dec00104 	addi	sp,sp,4
 8003350:	f800283a 	ret

08003354 <disable_master_timer>:

void disable_master_timer() { timer_regs->enabled = 0; }
 8003354:	deffff04 	addi	sp,sp,-4
 8003358:	df000015 	stw	fp,0(sp)
 800335c:	d839883a 	mov	fp,sp
 8003360:	d0a00217 	ldw	r2,-32760(gp)
 8003364:	10000015 	stw	zero,0(r2)
 8003368:	0001883a 	nop
 800336c:	e037883a 	mov	sp,fp
 8003370:	df000017 	ldw	fp,0(sp)
 8003374:	dec00104 	addi	sp,sp,4
 8003378:	f800283a 	ret

0800337c <get_time>:

float get_time() { return timer_regs->time / (float) 1e7; }
 800337c:	defffe04 	addi	sp,sp,-8
 8003380:	dfc00115 	stw	ra,4(sp)
 8003384:	df000015 	stw	fp,0(sp)
 8003388:	d839883a 	mov	fp,sp
 800338c:	d1200217 	ldw	r4,-32760(gp)
 8003390:	20800117 	ldw	r2,4(r4)
 8003394:	20c00217 	ldw	r3,8(r4)
 8003398:	1009883a 	mov	r4,r2
 800339c:	180b883a 	mov	r5,r3
 80033a0:	80077080 	call	8007708 <__floatundisf>
 80033a4:	1007883a 	mov	r3,r2
 80033a8:	0152c674 	movhi	r5,19225
 80033ac:	2965a004 	addi	r5,r5,-27008
 80033b0:	1809883a 	mov	r4,r3
 80033b4:	80084440 	call	8008444 <__divsf3>
 80033b8:	1009883a 	mov	r4,r2
 80033bc:	2007883a 	mov	r3,r4
 80033c0:	1805883a 	mov	r2,r3
 80033c4:	e037883a 	mov	sp,fp
 80033c8:	dfc00117 	ldw	ra,4(sp)
 80033cc:	df000017 	ldw	fp,0(sp)
 80033d0:	dec00204 	addi	sp,sp,8
 80033d4:	f800283a 	ret

080033d8 <get_micros>:

uint64_t get_micros() { return timer_regs->time / 10; }
 80033d8:	defffe04 	addi	sp,sp,-8
 80033dc:	dfc00115 	stw	ra,4(sp)
 80033e0:	df000015 	stw	fp,0(sp)
 80033e4:	d839883a 	mov	fp,sp
 80033e8:	d1200217 	ldw	r4,-32760(gp)
 80033ec:	20800117 	ldw	r2,4(r4)
 80033f0:	20c00217 	ldw	r3,8(r4)
 80033f4:	01800284 	movi	r6,10
 80033f8:	000f883a 	mov	r7,zero
 80033fc:	1009883a 	mov	r4,r2
 8003400:	180b883a 	mov	r5,r3
 8003404:	80077a40 	call	80077a4 <__udivdi3>
 8003408:	100f883a 	mov	r7,r2
 800340c:	1811883a 	mov	r8,r3
 8003410:	380b883a 	mov	r5,r7
 8003414:	400d883a 	mov	r6,r8
 8003418:	2807883a 	mov	r3,r5
 800341c:	3009883a 	mov	r4,r6
 8003420:	1805883a 	mov	r2,r3
 8003424:	2007883a 	mov	r3,r4
 8003428:	e037883a 	mov	sp,fp
 800342c:	dfc00117 	ldw	ra,4(sp)
 8003430:	df000017 	ldw	fp,0(sp)
 8003434:	dec00204 	addi	sp,sp,8
 8003438:	f800283a 	ret

0800343c <create_rate>:

rate_t create_rate(float hz) {
 800343c:	defff904 	addi	sp,sp,-28
 8003440:	dfc00615 	stw	ra,24(sp)
 8003444:	df000515 	stw	fp,20(sp)
 8003448:	df000504 	addi	fp,sp,20
 800344c:	e13ffe15 	stw	r4,-8(fp)
 8003450:	e17fff15 	stw	r5,-4(fp)
    rate_t rate = {
        timer_regs->time,
 8003454:	d1200217 	ldw	r4,-32760(gp)
 8003458:	20800117 	ldw	r2,4(r4)
 800345c:	20c00217 	ldw	r3,8(r4)
float get_time() { return timer_regs->time / (float) 1e7; }

uint64_t get_micros() { return timer_regs->time / 10; }

rate_t create_rate(float hz) {
    rate_t rate = {
 8003460:	e0bffb15 	stw	r2,-20(fp)
 8003464:	e0fffc15 	stw	r3,-16(fp)
        timer_regs->time,
        (uint32_t) ((1 / hz) * 1e7)
 8003468:	e17fff17 	ldw	r5,-4(fp)
 800346c:	010fe034 	movhi	r4,16256
 8003470:	80084440 	call	8008444 <__divsf3>
 8003474:	1007883a 	mov	r3,r2
 8003478:	1805883a 	mov	r2,r3
 800347c:	1009883a 	mov	r4,r2
 8003480:	800bcf00 	call	800bcf0 <__extendsfdf2>
 8003484:	1011883a 	mov	r8,r2
 8003488:	1813883a 	mov	r9,r3
 800348c:	000d883a 	mov	r6,zero
 8003490:	01d058f4 	movhi	r7,16739
 8003494:	39c4b404 	addi	r7,r7,4816
 8003498:	4009883a 	mov	r4,r8
 800349c:	480b883a 	mov	r5,r9
 80034a0:	800a9840 	call	800a984 <__muldf3>
 80034a4:	1009883a 	mov	r4,r2
 80034a8:	180b883a 	mov	r5,r3
 80034ac:	2005883a 	mov	r2,r4
 80034b0:	2807883a 	mov	r3,r5
 80034b4:	1009883a 	mov	r4,r2
 80034b8:	180b883a 	mov	r5,r3
 80034bc:	80076940 	call	8007694 <__fixunsdfsi>
float get_time() { return timer_regs->time / (float) 1e7; }

uint64_t get_micros() { return timer_regs->time / 10; }

rate_t create_rate(float hz) {
    rate_t rate = {
 80034c0:	e0bffd15 	stw	r2,-12(fp)
        timer_regs->time,
        (uint32_t) ((1 / hz) * 1e7)
    };
    return rate;
 80034c4:	e0bffe17 	ldw	r2,-8(fp)
 80034c8:	e0fffb17 	ldw	r3,-20(fp)
 80034cc:	10c00015 	stw	r3,0(r2)
 80034d0:	e0fffc17 	ldw	r3,-16(fp)
 80034d4:	10c00115 	stw	r3,4(r2)
 80034d8:	e0fffd17 	ldw	r3,-12(fp)
 80034dc:	10c00215 	stw	r3,8(r2)
}
 80034e0:	e0bffe17 	ldw	r2,-8(fp)
 80034e4:	e037883a 	mov	sp,fp
 80034e8:	dfc00117 	ldw	ra,4(sp)
 80034ec:	df000017 	ldw	fp,0(sp)
 80034f0:	dec00204 	addi	sp,sp,8
 80034f4:	f800283a 	ret

080034f8 <is_ready>:

int is_ready(rate_t* rate) {
 80034f8:	defffb04 	addi	sp,sp,-20
 80034fc:	df000415 	stw	fp,16(sp)
 8003500:	df000404 	addi	fp,sp,16
 8003504:	e13fff15 	stw	r4,-4(fp)
    uint64_t time = timer_regs->time;
 8003508:	d0a00217 	ldw	r2,-32760(gp)
 800350c:	10c00117 	ldw	r3,4(r2)
 8003510:	e0fffc15 	stw	r3,-16(fp)
 8003514:	10800217 	ldw	r2,8(r2)
 8003518:	e0bffd15 	stw	r2,-12(fp)
    int diff = time - (rate->last_time + rate->inv_rate);
 800351c:	e17ffc17 	ldw	r5,-16(fp)
 8003520:	e13fff17 	ldw	r4,-4(fp)
 8003524:	20800017 	ldw	r2,0(r4)
 8003528:	20c00117 	ldw	r3,4(r4)
 800352c:	1007883a 	mov	r3,r2
 8003530:	e0bfff17 	ldw	r2,-4(fp)
 8003534:	10800217 	ldw	r2,8(r2)
 8003538:	1885883a 	add	r2,r3,r2
 800353c:	2885c83a 	sub	r2,r5,r2
 8003540:	e0bffe15 	stw	r2,-8(fp)
    if (diff >= 0) {
 8003544:	e0bffe17 	ldw	r2,-8(fp)
 8003548:	10001c16 	blt	r2,zero,80035bc <is_ready+0xc4>
        if (diff >= rate->inv_rate)
 800354c:	e0bfff17 	ldw	r2,-4(fp)
 8003550:	10800217 	ldw	r2,8(r2)
 8003554:	e0fffe17 	ldw	r3,-8(fp)
 8003558:	18800636 	bltu	r3,r2,8003574 <is_ready+0x7c>
            rate->last_time = time;
 800355c:	e0bfff17 	ldw	r2,-4(fp)
 8003560:	e0fffc17 	ldw	r3,-16(fp)
 8003564:	10c00015 	stw	r3,0(r2)
 8003568:	e0fffd17 	ldw	r3,-12(fp)
 800356c:	10c00115 	stw	r3,4(r2)
 8003570:	00001006 	br	80035b4 <is_ready+0xbc>
        else
            rate->last_time = time + diff;
 8003574:	e0bffe17 	ldw	r2,-8(fp)
 8003578:	100d883a 	mov	r6,r2
 800357c:	1005d7fa 	srai	r2,r2,31
 8003580:	100f883a 	mov	r7,r2
 8003584:	e13ffc17 	ldw	r4,-16(fp)
 8003588:	e17ffd17 	ldw	r5,-12(fp)
 800358c:	3105883a 	add	r2,r6,r4
 8003590:	1191803a 	cmpltu	r8,r2,r6
 8003594:	3947883a 	add	r3,r7,r5
 8003598:	40c9883a 	add	r4,r8,r3
 800359c:	2007883a 	mov	r3,r4
 80035a0:	1009883a 	mov	r4,r2
 80035a4:	180b883a 	mov	r5,r3
 80035a8:	e0bfff17 	ldw	r2,-4(fp)
 80035ac:	11000015 	stw	r4,0(r2)
 80035b0:	11400115 	stw	r5,4(r2)
        return 1;
 80035b4:	00800044 	movi	r2,1
 80035b8:	00000106 	br	80035c0 <is_ready+0xc8>
    }
    return 0;
 80035bc:	0005883a 	mov	r2,zero
}
 80035c0:	e037883a 	mov	sp,fp
 80035c4:	df000017 	ldw	fp,0(sp)
 80035c8:	dec00104 	addi	sp,sp,4
 80035cc:	f800283a 	ret

080035d0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 80035d0:	defff204 	addi	sp,sp,-56
 80035d4:	dfc00d15 	stw	ra,52(sp)
 80035d8:	df000c15 	stw	fp,48(sp)
 80035dc:	df000c04 	addi	fp,sp,48
 80035e0:	2005883a 	mov	r2,r4
 80035e4:	e17fff15 	stw	r5,-4(fp)
 80035e8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 80035ec:	008211f4 	movhi	r2,2119
 80035f0:	109f8a04 	addi	r2,r2,32296
 80035f4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 80035f8:	008211f4 	movhi	r2,2119
 80035fc:	109f8a04 	addi	r2,r2,32296
 8003600:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8003604:	e0fffe03 	ldbu	r3,-8(fp)
 8003608:	008211f4 	movhi	r2,2119
 800360c:	109f8a04 	addi	r2,r2,32296
 8003610:	d8800415 	stw	r2,16(sp)
 8003614:	00800244 	movi	r2,9
 8003618:	d8800315 	stw	r2,12(sp)
 800361c:	d8000215 	stw	zero,8(sp)
 8003620:	00800084 	movi	r2,2
 8003624:	d8800115 	stw	r2,4(sp)
 8003628:	d8000015 	stw	zero,0(sp)
 800362c:	01c00184 	movi	r7,6
 8003630:	01802004 	movi	r6,128
 8003634:	000b883a 	mov	r5,zero
 8003638:	1809883a 	mov	r4,r3
 800363c:	80046480 	call	8004648 <XferCtrlReq>
 8003640:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8003644:	e0bffc03 	ldbu	r2,-16(fp)
 8003648:	10000226 	beq	r2,zero,8003654 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 800364c:	0005883a 	mov	r2,zero
 8003650:	0000dc06 	br	80039c4 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8003654:	e0bffa17 	ldw	r2,-24(fp)
 8003658:	1080008b 	ldhu	r2,2(r2)
 800365c:	10bfffcc 	andi	r2,r2,65535
 8003660:	10804070 	cmpltui	r2,r2,257
 8003664:	1000031e 	bne	r2,zero,8003674 <HIDMProbe+0xa4>
		total_length = 256;
 8003668:	00804004 	movi	r2,256
 800366c:	e0bff90d 	sth	r2,-28(fp)
 8003670:	00000306 	br	8003680 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8003674:	e0bffa17 	ldw	r2,-24(fp)
 8003678:	1080008b 	ldhu	r2,2(r2)
 800367c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8003680:	e13ffe03 	ldbu	r4,-8(fp)
 8003684:	e0fff90b 	ldhu	r3,-28(fp)
 8003688:	008211f4 	movhi	r2,2119
 800368c:	109f8a04 	addi	r2,r2,32296
 8003690:	d8800415 	stw	r2,16(sp)
 8003694:	d8c00315 	stw	r3,12(sp)
 8003698:	d8000215 	stw	zero,8(sp)
 800369c:	00800084 	movi	r2,2
 80036a0:	d8800115 	stw	r2,4(sp)
 80036a4:	d8000015 	stw	zero,0(sp)
 80036a8:	01c00184 	movi	r7,6
 80036ac:	01802004 	movi	r6,128
 80036b0:	000b883a 	mov	r5,zero
 80036b4:	80046480 	call	8004648 <XferCtrlReq>
 80036b8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80036bc:	e0bffc03 	ldbu	r2,-16(fp)
 80036c0:	10000226 	beq	r2,zero,80036cc <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 80036c4:	0005883a 	mov	r2,zero
 80036c8:	0000be06 	br	80039c4 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 80036cc:	e0bffa17 	ldw	r2,-24(fp)
 80036d0:	10800143 	ldbu	r2,5(r2)
 80036d4:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 80036d8:	0000b306 	br	80039a8 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 80036dc:	e0bffa17 	ldw	r2,-24(fp)
 80036e0:	10800043 	ldbu	r2,1(r2)
 80036e4:	10803fcc 	andi	r2,r2,255
 80036e8:	10800120 	cmpeqi	r2,r2,4
 80036ec:	1000091e 	bne	r2,zero,8003714 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80036f0:	e0bffa17 	ldw	r2,-24(fp)
 80036f4:	10800003 	ldbu	r2,0(r2)
 80036f8:	10803fcc 	andi	r2,r2,255
 80036fc:	e0fffb17 	ldw	r3,-20(fp)
 8003700:	1885883a 	add	r2,r3,r2
 8003704:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8003708:	e0bffb17 	ldw	r2,-20(fp)
 800370c:	e0bffa15 	stw	r2,-24(fp)
 8003710:	0000a506 	br	80039a8 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8003714:	e0bffa17 	ldw	r2,-24(fp)
 8003718:	10800143 	ldbu	r2,5(r2)
 800371c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8003720:	e0bffa17 	ldw	r2,-24(fp)
 8003724:	10800183 	ldbu	r2,6(r2)
 8003728:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 800372c:	e0bffa17 	ldw	r2,-24(fp)
 8003730:	108001c3 	ldbu	r2,7(r2)
 8003734:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8003738:	e0bffc83 	ldbu	r2,-14(fp)
 800373c:	108000d8 	cmpnei	r2,r2,3
 8003740:	1000971e 	bne	r2,zero,80039a0 <HIDMProbe+0x3d0>
 8003744:	e0bffcc3 	ldbu	r2,-13(fp)
 8003748:	10800058 	cmpnei	r2,r2,1
 800374c:	1000941e 	bne	r2,zero,80039a0 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8003750:	e0bffd03 	ldbu	r2,-12(fp)
 8003754:	10800098 	cmpnei	r2,r2,2
 8003758:	1000911e 	bne	r2,zero,80039a0 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 800375c:	e0fffe03 	ldbu	r3,-8(fp)
 8003760:	008211f4 	movhi	r2,2119
 8003764:	109fca04 	addi	r2,r2,32552
 8003768:	180690fa 	slli	r3,r3,3
 800376c:	10c5883a 	add	r2,r2,r3
 8003770:	10800104 	addi	r2,r2,4
 8003774:	00c00084 	movi	r3,2
 8003778:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 800377c:	e0fffe03 	ldbu	r3,-8(fp)
 8003780:	008211f4 	movhi	r2,2119
 8003784:	109fca04 	addi	r2,r2,32552
 8003788:	180690fa 	slli	r3,r3,3
 800378c:	10c5883a 	add	r2,r2,r3
 8003790:	10800017 	ldw	r2,0(r2)
 8003794:	1080008b 	ldhu	r2,2(r2)
 8003798:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 800379c:	8003de00 	call	8003de0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 80037a0:	e0fffe03 	ldbu	r3,-8(fp)
 80037a4:	008211f4 	movhi	r2,2119
 80037a8:	109fca04 	addi	r2,r2,32552
 80037ac:	180690fa 	slli	r3,r3,3
 80037b0:	10c7883a 	add	r3,r2,r3
 80037b4:	00820d74 	movhi	r2,2101
 80037b8:	10af7604 	addi	r2,r2,-16936
 80037bc:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 80037c0:	e0fffe03 	ldbu	r3,-8(fp)
 80037c4:	008211f4 	movhi	r2,2119
 80037c8:	109fca04 	addi	r2,r2,32552
 80037cc:	180690fa 	slli	r3,r3,3
 80037d0:	10c5883a 	add	r2,r2,r3
 80037d4:	10800017 	ldw	r2,0(r2)
 80037d8:	e0fffd43 	ldbu	r3,-11(fp)
 80037dc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 80037e0:	e0bffa17 	ldw	r2,-24(fp)
 80037e4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 80037e8:	d0a6e8c5 	stb	r2,-25693(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 80037ec:	e0bffe03 	ldbu	r2,-8(fp)
 80037f0:	d0a6e885 	stb	r2,-25694(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80037f4:	e0bffa17 	ldw	r2,-24(fp)
 80037f8:	10800003 	ldbu	r2,0(r2)
 80037fc:	10803fcc 	andi	r2,r2,255
 8003800:	e0fffb17 	ldw	r3,-20(fp)
 8003804:	1885883a 	add	r2,r3,r2
 8003808:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 800380c:	e0bffb17 	ldw	r2,-20(fp)
 8003810:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8003814:	00005b06 	br	8003984 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8003818:	e0bffa17 	ldw	r2,-24(fp)
 800381c:	10800043 	ldbu	r2,1(r2)
 8003820:	10803fcc 	andi	r2,r2,255
 8003824:	10800160 	cmpeqi	r2,r2,5
 8003828:	1000091e 	bne	r2,zero,8003850 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800382c:	e0bffa17 	ldw	r2,-24(fp)
 8003830:	10800003 	ldbu	r2,0(r2)
 8003834:	10803fcc 	andi	r2,r2,255
 8003838:	e0fffb17 	ldw	r3,-20(fp)
 800383c:	1885883a 	add	r2,r3,r2
 8003840:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8003844:	e0bffb17 	ldw	r2,-20(fp)
 8003848:	e0bffa15 	stw	r2,-24(fp)
 800384c:	00004d06 	br	8003984 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8003850:	e0fffe03 	ldbu	r3,-8(fp)
 8003854:	008211f4 	movhi	r2,2119
 8003858:	109fca04 	addi	r2,r2,32552
 800385c:	180690fa 	slli	r3,r3,3
 8003860:	10c5883a 	add	r2,r2,r3
 8003864:	10800017 	ldw	r2,0(r2)
 8003868:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 800386c:	e0fffa17 	ldw	r3,-24(fp)
 8003870:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8003874:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8003878:	e0fffe03 	ldbu	r3,-8(fp)
 800387c:	008211f4 	movhi	r2,2119
 8003880:	109fca04 	addi	r2,r2,32552
 8003884:	180690fa 	slli	r3,r3,3
 8003888:	10c5883a 	add	r2,r2,r3
 800388c:	10800017 	ldw	r2,0(r2)
 8003890:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8003894:	e0fffa17 	ldw	r3,-24(fp)
 8003898:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 800389c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80038a0:	e0fffe03 	ldbu	r3,-8(fp)
 80038a4:	008211f4 	movhi	r2,2119
 80038a8:	109fca04 	addi	r2,r2,32552
 80038ac:	180690fa 	slli	r3,r3,3
 80038b0:	10c5883a 	add	r2,r2,r3
 80038b4:	10800017 	ldw	r2,0(r2)
 80038b8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 80038bc:	e0fffa17 	ldw	r3,-24(fp)
 80038c0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80038c4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80038c8:	e0fffe03 	ldbu	r3,-8(fp)
 80038cc:	008211f4 	movhi	r2,2119
 80038d0:	109fca04 	addi	r2,r2,32552
 80038d4:	180690fa 	slli	r3,r3,3
 80038d8:	10c5883a 	add	r2,r2,r3
 80038dc:	10800017 	ldw	r2,0(r2)
 80038e0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 80038e4:	e0fffa17 	ldw	r3,-24(fp)
 80038e8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80038ec:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 80038f0:	e0fffe03 	ldbu	r3,-8(fp)
 80038f4:	e0bffc43 	ldbu	r2,-15(fp)
 80038f8:	d8000415 	stw	zero,16(sp)
 80038fc:	d8000315 	stw	zero,12(sp)
 8003900:	d8000215 	stw	zero,8(sp)
 8003904:	d8000115 	stw	zero,4(sp)
 8003908:	d8800015 	stw	r2,0(sp)
 800390c:	01c00244 	movi	r7,9
 8003910:	000d883a 	mov	r6,zero
 8003914:	000b883a 	mov	r5,zero
 8003918:	1809883a 	mov	r4,r3
 800391c:	80046480 	call	8004648 <XferCtrlReq>
 8003920:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8003924:	e0bffc03 	ldbu	r2,-16(fp)
 8003928:	10000226 	beq	r2,zero,8003934 <HIDMProbe+0x364>
							return (FALSE);
 800392c:	0005883a 	mov	r2,zero
 8003930:	00002406 	br	80039c4 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8003934:	e0fffe03 	ldbu	r3,-8(fp)
 8003938:	d0a6e8c3 	ldbu	r2,-25693(gp)
 800393c:	10803fcc 	andi	r2,r2,255
 8003940:	d8000415 	stw	zero,16(sp)
 8003944:	d8000315 	stw	zero,12(sp)
 8003948:	d8800215 	stw	r2,8(sp)
 800394c:	d8000115 	stw	zero,4(sp)
 8003950:	d8000015 	stw	zero,0(sp)
 8003954:	01c002c4 	movi	r7,11
 8003958:	01800844 	movi	r6,33
 800395c:	000b883a 	mov	r5,zero
 8003960:	1809883a 	mov	r4,r3
 8003964:	80046480 	call	8004648 <XferCtrlReq>
 8003968:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 800396c:	e0bffc03 	ldbu	r2,-16(fp)
 8003970:	10000226 	beq	r2,zero,800397c <HIDMProbe+0x3ac>
							return (FALSE);
 8003974:	0005883a 	mov	r2,zero
 8003978:	00001206 	br	80039c4 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 800397c:	00800044 	movi	r2,1
 8003980:	00001006 	br	80039c4 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8003984:	e0fff90b 	ldhu	r3,-28(fp)
 8003988:	008211f4 	movhi	r2,2119
 800398c:	109f8a04 	addi	r2,r2,32296
 8003990:	1885883a 	add	r2,r3,r2
 8003994:	e0fffb17 	ldw	r3,-20(fp)
 8003998:	18bf9f36 	bltu	r3,r2,8003818 <__alt_data_end+0xfc003818>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 800399c:	00000206 	br	80039a8 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 80039a0:	0005883a 	mov	r2,zero
 80039a4:	00000706 	br	80039c4 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 80039a8:	e0fff90b 	ldhu	r3,-28(fp)
 80039ac:	008211f4 	movhi	r2,2119
 80039b0:	109f8a04 	addi	r2,r2,32296
 80039b4:	1885883a 	add	r2,r3,r2
 80039b8:	e0fffb17 	ldw	r3,-20(fp)
 80039bc:	18bf4736 	bltu	r3,r2,80036dc <__alt_data_end+0xfc0036dc>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 80039c0:	0005883a 	mov	r2,zero
}
 80039c4:	e037883a 	mov	sp,fp
 80039c8:	dfc00117 	ldw	ra,4(sp)
 80039cc:	df000017 	ldw	fp,0(sp)
 80039d0:	dec00204 	addi	sp,sp,8
 80039d4:	f800283a 	ret

080039d8 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 80039d8:	defff204 	addi	sp,sp,-56
 80039dc:	dfc00d15 	stw	ra,52(sp)
 80039e0:	df000c15 	stw	fp,48(sp)
 80039e4:	df000c04 	addi	fp,sp,48
 80039e8:	2005883a 	mov	r2,r4
 80039ec:	e17fff15 	stw	r5,-4(fp)
 80039f0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 80039f4:	008211f4 	movhi	r2,2119
 80039f8:	109f8a04 	addi	r2,r2,32296
 80039fc:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8003a00:	008211f4 	movhi	r2,2119
 8003a04:	109f8a04 	addi	r2,r2,32296
 8003a08:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8003a0c:	e0fffe03 	ldbu	r3,-8(fp)
 8003a10:	008211f4 	movhi	r2,2119
 8003a14:	109f8a04 	addi	r2,r2,32296
 8003a18:	d8800415 	stw	r2,16(sp)
 8003a1c:	00800244 	movi	r2,9
 8003a20:	d8800315 	stw	r2,12(sp)
 8003a24:	d8000215 	stw	zero,8(sp)
 8003a28:	00800084 	movi	r2,2
 8003a2c:	d8800115 	stw	r2,4(sp)
 8003a30:	d8000015 	stw	zero,0(sp)
 8003a34:	01c00184 	movi	r7,6
 8003a38:	01802004 	movi	r6,128
 8003a3c:	000b883a 	mov	r5,zero
 8003a40:	1809883a 	mov	r4,r3
 8003a44:	80046480 	call	8004648 <XferCtrlReq>
 8003a48:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8003a4c:	e0bffc03 	ldbu	r2,-16(fp)
 8003a50:	10000226 	beq	r2,zero,8003a5c <HIDKProbe+0x84>
		return (FALSE);
 8003a54:	0005883a 	mov	r2,zero
 8003a58:	0000dc06 	br	8003dcc <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8003a5c:	e0bffa17 	ldw	r2,-24(fp)
 8003a60:	1080008b 	ldhu	r2,2(r2)
 8003a64:	10bfffcc 	andi	r2,r2,65535
 8003a68:	10804070 	cmpltui	r2,r2,257
 8003a6c:	1000031e 	bne	r2,zero,8003a7c <HIDKProbe+0xa4>
		total_length = 256;
 8003a70:	00804004 	movi	r2,256
 8003a74:	e0bff90d 	sth	r2,-28(fp)
 8003a78:	00000306 	br	8003a88 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8003a7c:	e0bffa17 	ldw	r2,-24(fp)
 8003a80:	1080008b 	ldhu	r2,2(r2)
 8003a84:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8003a88:	e13ffe03 	ldbu	r4,-8(fp)
 8003a8c:	e0fff90b 	ldhu	r3,-28(fp)
 8003a90:	008211f4 	movhi	r2,2119
 8003a94:	109f8a04 	addi	r2,r2,32296
 8003a98:	d8800415 	stw	r2,16(sp)
 8003a9c:	d8c00315 	stw	r3,12(sp)
 8003aa0:	d8000215 	stw	zero,8(sp)
 8003aa4:	00800084 	movi	r2,2
 8003aa8:	d8800115 	stw	r2,4(sp)
 8003aac:	d8000015 	stw	zero,0(sp)
 8003ab0:	01c00184 	movi	r7,6
 8003ab4:	01802004 	movi	r6,128
 8003ab8:	000b883a 	mov	r5,zero
 8003abc:	80046480 	call	8004648 <XferCtrlReq>
 8003ac0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8003ac4:	e0bffc03 	ldbu	r2,-16(fp)
 8003ac8:	10000226 	beq	r2,zero,8003ad4 <HIDKProbe+0xfc>
		return (FALSE);
 8003acc:	0005883a 	mov	r2,zero
 8003ad0:	0000be06 	br	8003dcc <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8003ad4:	e0bffa17 	ldw	r2,-24(fp)
 8003ad8:	10800143 	ldbu	r2,5(r2)
 8003adc:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8003ae0:	0000b306 	br	8003db0 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8003ae4:	e0bffa17 	ldw	r2,-24(fp)
 8003ae8:	10800043 	ldbu	r2,1(r2)
 8003aec:	10803fcc 	andi	r2,r2,255
 8003af0:	10800120 	cmpeqi	r2,r2,4
 8003af4:	1000091e 	bne	r2,zero,8003b1c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8003af8:	e0bffa17 	ldw	r2,-24(fp)
 8003afc:	10800003 	ldbu	r2,0(r2)
 8003b00:	10803fcc 	andi	r2,r2,255
 8003b04:	e0fffb17 	ldw	r3,-20(fp)
 8003b08:	1885883a 	add	r2,r3,r2
 8003b0c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8003b10:	e0bffb17 	ldw	r2,-20(fp)
 8003b14:	e0bffa15 	stw	r2,-24(fp)
 8003b18:	0000a506 	br	8003db0 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8003b1c:	e0bffa17 	ldw	r2,-24(fp)
 8003b20:	10800143 	ldbu	r2,5(r2)
 8003b24:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8003b28:	e0bffa17 	ldw	r2,-24(fp)
 8003b2c:	10800183 	ldbu	r2,6(r2)
 8003b30:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8003b34:	e0bffa17 	ldw	r2,-24(fp)
 8003b38:	108001c3 	ldbu	r2,7(r2)
 8003b3c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8003b40:	e0bffc83 	ldbu	r2,-14(fp)
 8003b44:	108000d8 	cmpnei	r2,r2,3
 8003b48:	1000971e 	bne	r2,zero,8003da8 <HIDKProbe+0x3d0>
 8003b4c:	e0bffcc3 	ldbu	r2,-13(fp)
 8003b50:	10800058 	cmpnei	r2,r2,1
 8003b54:	1000941e 	bne	r2,zero,8003da8 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8003b58:	e0bffd03 	ldbu	r2,-12(fp)
 8003b5c:	10800058 	cmpnei	r2,r2,1
 8003b60:	1000911e 	bne	r2,zero,8003da8 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8003b64:	e0fffe03 	ldbu	r3,-8(fp)
 8003b68:	008211f4 	movhi	r2,2119
 8003b6c:	109fca04 	addi	r2,r2,32552
 8003b70:	180690fa 	slli	r3,r3,3
 8003b74:	10c5883a 	add	r2,r2,r3
 8003b78:	10800104 	addi	r2,r2,4
 8003b7c:	00c00044 	movi	r3,1
 8003b80:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8003b84:	e0fffe03 	ldbu	r3,-8(fp)
 8003b88:	008211f4 	movhi	r2,2119
 8003b8c:	109fca04 	addi	r2,r2,32552
 8003b90:	180690fa 	slli	r3,r3,3
 8003b94:	10c5883a 	add	r2,r2,r3
 8003b98:	10800017 	ldw	r2,0(r2)
 8003b9c:	1080008b 	ldhu	r2,2(r2)
 8003ba0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8003ba4:	8003de00 	call	8003de0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8003ba8:	e0fffe03 	ldbu	r3,-8(fp)
 8003bac:	008211f4 	movhi	r2,2119
 8003bb0:	109fca04 	addi	r2,r2,32552
 8003bb4:	180690fa 	slli	r3,r3,3
 8003bb8:	10c7883a 	add	r3,r2,r3
 8003bbc:	00820d74 	movhi	r2,2101
 8003bc0:	10af7604 	addi	r2,r2,-16936
 8003bc4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8003bc8:	e0fffe03 	ldbu	r3,-8(fp)
 8003bcc:	008211f4 	movhi	r2,2119
 8003bd0:	109fca04 	addi	r2,r2,32552
 8003bd4:	180690fa 	slli	r3,r3,3
 8003bd8:	10c5883a 	add	r2,r2,r3
 8003bdc:	10800017 	ldw	r2,0(r2)
 8003be0:	e0fffd43 	ldbu	r3,-11(fp)
 8003be4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8003be8:	e0bffa17 	ldw	r2,-24(fp)
 8003bec:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8003bf0:	d0a6e8c5 	stb	r2,-25693(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8003bf4:	e0bffe03 	ldbu	r2,-8(fp)
 8003bf8:	d0a6e885 	stb	r2,-25694(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8003bfc:	e0bffa17 	ldw	r2,-24(fp)
 8003c00:	10800003 	ldbu	r2,0(r2)
 8003c04:	10803fcc 	andi	r2,r2,255
 8003c08:	e0fffb17 	ldw	r3,-20(fp)
 8003c0c:	1885883a 	add	r2,r3,r2
 8003c10:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8003c14:	e0bffb17 	ldw	r2,-20(fp)
 8003c18:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8003c1c:	00005b06 	br	8003d8c <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8003c20:	e0bffa17 	ldw	r2,-24(fp)
 8003c24:	10800043 	ldbu	r2,1(r2)
 8003c28:	10803fcc 	andi	r2,r2,255
 8003c2c:	10800160 	cmpeqi	r2,r2,5
 8003c30:	1000091e 	bne	r2,zero,8003c58 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8003c34:	e0bffa17 	ldw	r2,-24(fp)
 8003c38:	10800003 	ldbu	r2,0(r2)
 8003c3c:	10803fcc 	andi	r2,r2,255
 8003c40:	e0fffb17 	ldw	r3,-20(fp)
 8003c44:	1885883a 	add	r2,r3,r2
 8003c48:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8003c4c:	e0bffb17 	ldw	r2,-20(fp)
 8003c50:	e0bffa15 	stw	r2,-24(fp)
 8003c54:	00004d06 	br	8003d8c <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8003c58:	e0fffe03 	ldbu	r3,-8(fp)
 8003c5c:	008211f4 	movhi	r2,2119
 8003c60:	109fca04 	addi	r2,r2,32552
 8003c64:	180690fa 	slli	r3,r3,3
 8003c68:	10c5883a 	add	r2,r2,r3
 8003c6c:	10800017 	ldw	r2,0(r2)
 8003c70:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8003c74:	e0fffa17 	ldw	r3,-24(fp)
 8003c78:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8003c7c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8003c80:	e0fffe03 	ldbu	r3,-8(fp)
 8003c84:	008211f4 	movhi	r2,2119
 8003c88:	109fca04 	addi	r2,r2,32552
 8003c8c:	180690fa 	slli	r3,r3,3
 8003c90:	10c5883a 	add	r2,r2,r3
 8003c94:	10800017 	ldw	r2,0(r2)
 8003c98:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8003c9c:	e0fffa17 	ldw	r3,-24(fp)
 8003ca0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8003ca4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8003ca8:	e0fffe03 	ldbu	r3,-8(fp)
 8003cac:	008211f4 	movhi	r2,2119
 8003cb0:	109fca04 	addi	r2,r2,32552
 8003cb4:	180690fa 	slli	r3,r3,3
 8003cb8:	10c5883a 	add	r2,r2,r3
 8003cbc:	10800017 	ldw	r2,0(r2)
 8003cc0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8003cc4:	e0fffa17 	ldw	r3,-24(fp)
 8003cc8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8003ccc:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8003cd0:	e0fffe03 	ldbu	r3,-8(fp)
 8003cd4:	008211f4 	movhi	r2,2119
 8003cd8:	109fca04 	addi	r2,r2,32552
 8003cdc:	180690fa 	slli	r3,r3,3
 8003ce0:	10c5883a 	add	r2,r2,r3
 8003ce4:	10800017 	ldw	r2,0(r2)
 8003ce8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8003cec:	e0fffa17 	ldw	r3,-24(fp)
 8003cf0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8003cf4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8003cf8:	e0fffe03 	ldbu	r3,-8(fp)
 8003cfc:	e0bffc43 	ldbu	r2,-15(fp)
 8003d00:	d8000415 	stw	zero,16(sp)
 8003d04:	d8000315 	stw	zero,12(sp)
 8003d08:	d8000215 	stw	zero,8(sp)
 8003d0c:	d8000115 	stw	zero,4(sp)
 8003d10:	d8800015 	stw	r2,0(sp)
 8003d14:	01c00244 	movi	r7,9
 8003d18:	000d883a 	mov	r6,zero
 8003d1c:	000b883a 	mov	r5,zero
 8003d20:	1809883a 	mov	r4,r3
 8003d24:	80046480 	call	8004648 <XferCtrlReq>
 8003d28:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8003d2c:	e0bffc03 	ldbu	r2,-16(fp)
 8003d30:	10000226 	beq	r2,zero,8003d3c <HIDKProbe+0x364>
							return (FALSE);
 8003d34:	0005883a 	mov	r2,zero
 8003d38:	00002406 	br	8003dcc <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8003d3c:	e0fffe03 	ldbu	r3,-8(fp)
 8003d40:	d0a6e8c3 	ldbu	r2,-25693(gp)
 8003d44:	10803fcc 	andi	r2,r2,255
 8003d48:	d8000415 	stw	zero,16(sp)
 8003d4c:	d8000315 	stw	zero,12(sp)
 8003d50:	d8800215 	stw	r2,8(sp)
 8003d54:	d8000115 	stw	zero,4(sp)
 8003d58:	d8000015 	stw	zero,0(sp)
 8003d5c:	01c002c4 	movi	r7,11
 8003d60:	01800844 	movi	r6,33
 8003d64:	000b883a 	mov	r5,zero
 8003d68:	1809883a 	mov	r4,r3
 8003d6c:	80046480 	call	8004648 <XferCtrlReq>
 8003d70:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8003d74:	e0bffc03 	ldbu	r2,-16(fp)
 8003d78:	10000226 	beq	r2,zero,8003d84 <HIDKProbe+0x3ac>
							return (FALSE);
 8003d7c:	0005883a 	mov	r2,zero
 8003d80:	00001206 	br	8003dcc <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8003d84:	00800044 	movi	r2,1
 8003d88:	00001006 	br	8003dcc <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8003d8c:	e0fff90b 	ldhu	r3,-28(fp)
 8003d90:	008211f4 	movhi	r2,2119
 8003d94:	109f8a04 	addi	r2,r2,32296
 8003d98:	1885883a 	add	r2,r3,r2
 8003d9c:	e0fffb17 	ldw	r3,-20(fp)
 8003da0:	18bf9f36 	bltu	r3,r2,8003c20 <__alt_data_end+0xfc003c20>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8003da4:	00000206 	br	8003db0 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8003da8:	0005883a 	mov	r2,zero
 8003dac:	00000706 	br	8003dcc <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8003db0:	e0fff90b 	ldhu	r3,-28(fp)
 8003db4:	008211f4 	movhi	r2,2119
 8003db8:	109f8a04 	addi	r2,r2,32296
 8003dbc:	1885883a 	add	r2,r3,r2
 8003dc0:	e0fffb17 	ldw	r3,-20(fp)
 8003dc4:	18bf4736 	bltu	r3,r2,8003ae4 <__alt_data_end+0xfc003ae4>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8003dc8:	0005883a 	mov	r2,zero
}
 8003dcc:	e037883a 	mov	sp,fp
 8003dd0:	dfc00117 	ldw	ra,4(sp)
 8003dd4:	df000017 	ldw	fp,0(sp)
 8003dd8:	dec00204 	addi	sp,sp,8
 8003ddc:	f800283a 	ret

08003de0 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8003de0:	deffff04 	addi	sp,sp,-4
 8003de4:	df000015 	stw	fp,0(sp)
 8003de8:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8003dec:	00820d74 	movhi	r2,2101
 8003df0:	10af7604 	addi	r2,r2,-16936
 8003df4:	00c01004 	movi	r3,64
 8003df8:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8003dfc:	00820d74 	movhi	r2,2101
 8003e00:	10af7604 	addi	r2,r2,-16936
 8003e04:	00c00404 	movi	r3,16
 8003e08:	10c00385 	stb	r3,14(r2)
}
 8003e0c:	0001883a 	nop
 8003e10:	e037883a 	mov	sp,fp
 8003e14:	df000017 	ldw	fp,0(sp)
 8003e18:	dec00104 	addi	sp,sp,4
 8003e1c:	f800283a 	ret

08003e20 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8003e20:	defffb04 	addi	sp,sp,-20
 8003e24:	dfc00415 	stw	ra,16(sp)
 8003e28:	df000315 	stw	fp,12(sp)
 8003e2c:	df000304 	addi	fp,sp,12
 8003e30:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8003e34:	d0a6e883 	ldbu	r2,-25694(gp)
 8003e38:	10803fcc 	andi	r2,r2,255
 8003e3c:	100b883a 	mov	r5,r2
 8003e40:	01003804 	movi	r4,224
 8003e44:	80040140 	call	8004014 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 5, (BYTE*) buf,
 8003e48:	d0a6e883 	ldbu	r2,-25694(gp)
 8003e4c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8003e50:	d0a6e883 	ldbu	r2,-25694(gp)
 8003e54:	10c03fcc 	andi	r3,r2,255
 8003e58:	008211f4 	movhi	r2,2119
 8003e5c:	109fca04 	addi	r2,r2,32552
 8003e60:	180690fa 	slli	r3,r3,3
 8003e64:	10c5883a 	add	r2,r2,r3
 8003e68:	10800017 	ldw	r2,0(r2)
 8003e6c:	10800204 	addi	r2,r2,8
 8003e70:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 5, (BYTE*) buf,
 8003e74:	10803fcc 	andi	r2,r2,255
 8003e78:	d8800015 	stw	r2,0(sp)
 8003e7c:	e1ffff17 	ldw	r7,-4(fp)
 8003e80:	01800144 	movi	r6,5
 8003e84:	01400044 	movi	r5,1
 8003e88:	8004a6c0 	call	8004a6c <XferInTransfer>
 8003e8c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	buf->y = -buf->y;
 8003e90:	e0bfff17 	ldw	r2,-4(fp)
 8003e94:	10800103 	ldbu	r2,4(r2)
 8003e98:	0085c83a 	sub	r2,zero,r2
 8003e9c:	1007883a 	mov	r3,r2
 8003ea0:	e0bfff17 	ldw	r2,-4(fp)
 8003ea4:	10c00105 	stb	r3,4(r2)
	return (rcode);
 8003ea8:	e0bffe03 	ldbu	r2,-8(fp)
}
 8003eac:	e037883a 	mov	sp,fp
 8003eb0:	dfc00117 	ldw	ra,4(sp)
 8003eb4:	df000017 	ldw	fp,0(sp)
 8003eb8:	dec00204 	addi	sp,sp,8
 8003ebc:	f800283a 	ret

08003ec0 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8003ec0:	defffb04 	addi	sp,sp,-20
 8003ec4:	dfc00415 	stw	ra,16(sp)
 8003ec8:	df000315 	stw	fp,12(sp)
 8003ecc:	df000304 	addi	fp,sp,12
 8003ed0:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8003ed4:	d0a6e883 	ldbu	r2,-25694(gp)
 8003ed8:	10803fcc 	andi	r2,r2,255
 8003edc:	100b883a 	mov	r5,r2
 8003ee0:	01003804 	movi	r4,224
 8003ee4:	80040140 	call	8004014 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8003ee8:	d0a6e883 	ldbu	r2,-25694(gp)
 8003eec:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8003ef0:	d0a6e883 	ldbu	r2,-25694(gp)
 8003ef4:	10c03fcc 	andi	r3,r2,255
 8003ef8:	008211f4 	movhi	r2,2119
 8003efc:	109fca04 	addi	r2,r2,32552
 8003f00:	180690fa 	slli	r3,r3,3
 8003f04:	10c5883a 	add	r2,r2,r3
 8003f08:	10800017 	ldw	r2,0(r2)
 8003f0c:	10800204 	addi	r2,r2,8
 8003f10:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8003f14:	10803fcc 	andi	r2,r2,255
 8003f18:	d8800015 	stw	r2,0(sp)
 8003f1c:	e1ffff17 	ldw	r7,-4(fp)
 8003f20:	01800204 	movi	r6,8
 8003f24:	01400044 	movi	r5,1
 8003f28:	8004a6c0 	call	8004a6c <XferInTransfer>
 8003f2c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8003f30:	e0bffe03 	ldbu	r2,-8(fp)
}
 8003f34:	e037883a 	mov	sp,fp
 8003f38:	dfc00117 	ldw	ra,4(sp)
 8003f3c:	df000017 	ldw	fp,0(sp)
 8003f40:	dec00204 	addi	sp,sp,8
 8003f44:	f800283a 	ret

08003f48 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8003f48:	defffb04 	addi	sp,sp,-20
 8003f4c:	df000415 	stw	fp,16(sp)
 8003f50:	df000404 	addi	fp,sp,16
 8003f54:	2007883a 	mov	r3,r4
 8003f58:	2805883a 	mov	r2,r5
 8003f5c:	e1bffe15 	stw	r6,-8(fp)
 8003f60:	e1ffff15 	stw	r7,-4(fp)
 8003f64:	e0fffc05 	stb	r3,-16(fp)
 8003f68:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8003f6c:	0005883a 	mov	r2,zero
}
 8003f70:	e037883a 	mov	sp,fp
 8003f74:	df000017 	ldw	fp,0(sp)
 8003f78:	dec00104 	addi	sp,sp,4
 8003f7c:	f800283a 	ret

08003f80 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8003f80:	defffb04 	addi	sp,sp,-20
 8003f84:	df000415 	stw	fp,16(sp)
 8003f88:	df000404 	addi	fp,sp,16
 8003f8c:	2007883a 	mov	r3,r4
 8003f90:	2805883a 	mov	r2,r5
 8003f94:	e1bffe15 	stw	r6,-8(fp)
 8003f98:	e1ffff15 	stw	r7,-4(fp)
 8003f9c:	e0fffc05 	stb	r3,-16(fp)
 8003fa0:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8003fa4:	0005883a 	mov	r2,zero
}
 8003fa8:	e037883a 	mov	sp,fp
 8003fac:	df000017 	ldw	fp,0(sp)
 8003fb0:	dec00104 	addi	sp,sp,4
 8003fb4:	f800283a 	ret

08003fb8 <SPI_init>:

#define SPI_BASE 	0x20c0
#define MAX_SLAVE	0x00

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8003fb8:	defffc04 	addi	sp,sp,-16
 8003fbc:	df000315 	stw	fp,12(sp)
 8003fc0:	df000304 	addi	fp,sp,12
 8003fc4:	2807883a 	mov	r3,r5
 8003fc8:	3005883a 	mov	r2,r6
 8003fcc:	e13ffd05 	stb	r4,-12(fp)
 8003fd0:	e0fffe05 	stb	r3,-8(fp)
 8003fd4:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8003fd8:	0001883a 	nop
 8003fdc:	e037883a 	mov	sp,fp
 8003fe0:	df000017 	ldw	fp,0(sp)
 8003fe4:	dec00104 	addi	sp,sp,4
 8003fe8:	f800283a 	ret

08003fec <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8003fec:	defffe04 	addi	sp,sp,-8
 8003ff0:	df000115 	stw	fp,4(sp)
 8003ff4:	df000104 	addi	fp,sp,4
 8003ff8:	2005883a 	mov	r2,r4
 8003ffc:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
	return 0;
 8004000:	0005883a 	mov	r2,zero
}
 8004004:	e037883a 	mov	sp,fp
 8004008:	df000017 	ldw	fp,0(sp)
 800400c:	dec00104 	addi	sp,sp,4
 8004010:	f800283a 	ret

08004014 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8004014:	defff804 	addi	sp,sp,-32
 8004018:	dfc00715 	stw	ra,28(sp)
 800401c:	df000615 	stw	fp,24(sp)
 8004020:	df000604 	addi	fp,sp,24
 8004024:	2007883a 	mov	r3,r4
 8004028:	2805883a 	mov	r2,r5
 800402c:	e0fffe05 	stb	r3,-8(fp)
 8004030:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE data[2] = {reg + 2, val};
 8004034:	e0bffe03 	ldbu	r2,-8(fp)
 8004038:	10800084 	addi	r2,r2,2
 800403c:	e0bffd05 	stb	r2,-12(fp)
 8004040:	e0bfff03 	ldbu	r2,-4(fp)
 8004044:	e0bffd45 	stb	r2,-11(fp)
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 2, data, 0, NULL, 0);
 8004048:	d8000215 	stw	zero,8(sp)
 800404c:	d8000115 	stw	zero,4(sp)
 8004050:	d8000015 	stw	zero,0(sp)
 8004054:	e1fffd04 	addi	r7,fp,-12
 8004058:	01800084 	movi	r6,2
 800405c:	000b883a 	mov	r5,zero
 8004060:	01083004 	movi	r4,8384
 8004064:	801750c0 	call	801750c <alt_avalon_spi_command>
}
 8004068:	0001883a 	nop
 800406c:	e037883a 	mov	sp,fp
 8004070:	dfc00117 	ldw	ra,4(sp)
 8004074:	df000017 	ldw	fp,0(sp)
 8004078:	dec00204 	addi	sp,sp,8
 800407c:	f800283a 	ret

08004080 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8004080:	defff704 	addi	sp,sp,-36
 8004084:	dfc00815 	stw	ra,32(sp)
 8004088:	df000715 	stw	fp,28(sp)
 800408c:	df000704 	addi	fp,sp,28
 8004090:	2007883a 	mov	r3,r4
 8004094:	2805883a 	mov	r2,r5
 8004098:	e1bfff15 	stw	r6,-4(fp)
 800409c:	e0fffd05 	stb	r3,-12(fp)
 80040a0:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	BYTE tmp = reg + 2;
 80040a4:	e0bffd03 	ldbu	r2,-12(fp)
 80040a8:	10800084 	addi	r2,r2,2
 80040ac:	e0bffc05 	stb	r2,-16(fp)
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &tmp, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 80040b0:	00800044 	movi	r2,1
 80040b4:	d8800215 	stw	r2,8(sp)
 80040b8:	d8000115 	stw	zero,4(sp)
 80040bc:	d8000015 	stw	zero,0(sp)
 80040c0:	e1fffc04 	addi	r7,fp,-16
 80040c4:	01800044 	movi	r6,1
 80040c8:	000b883a 	mov	r5,zero
 80040cc:	01083004 	movi	r4,8384
 80040d0:	801750c0 	call	801750c <alt_avalon_spi_command>
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, nbytes, data, 0, NULL, 0);
 80040d4:	e0bffe03 	ldbu	r2,-8(fp)
 80040d8:	d8000215 	stw	zero,8(sp)
 80040dc:	d8000115 	stw	zero,4(sp)
 80040e0:	d8000015 	stw	zero,0(sp)
 80040e4:	e1ffff17 	ldw	r7,-4(fp)
 80040e8:	100d883a 	mov	r6,r2
 80040ec:	000b883a 	mov	r5,zero
 80040f0:	01083004 	movi	r4,8384
 80040f4:	801750c0 	call	801750c <alt_avalon_spi_command>
	return (data + nbytes);
 80040f8:	e0bffe03 	ldbu	r2,-8(fp)
 80040fc:	e0ffff17 	ldw	r3,-4(fp)
 8004100:	1885883a 	add	r2,r3,r2
}
 8004104:	e037883a 	mov	sp,fp
 8004108:	dfc00117 	ldw	ra,4(sp)
 800410c:	df000017 	ldw	fp,0(sp)
 8004110:	dec00204 	addi	sp,sp,8
 8004114:	f800283a 	ret

08004118 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8004118:	defff904 	addi	sp,sp,-28
 800411c:	dfc00615 	stw	ra,24(sp)
 8004120:	df000515 	stw	fp,20(sp)
 8004124:	df000504 	addi	fp,sp,20
 8004128:	2005883a 	mov	r2,r4
 800412c:	e0bfff05 	stb	r2,-4(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val

	BYTE read;
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &reg, 1, &read, 0);
 8004130:	e0ffff04 	addi	r3,fp,-4
 8004134:	d8000215 	stw	zero,8(sp)
 8004138:	e0bffe04 	addi	r2,fp,-8
 800413c:	d8800115 	stw	r2,4(sp)
 8004140:	00800044 	movi	r2,1
 8004144:	d8800015 	stw	r2,0(sp)
 8004148:	180f883a 	mov	r7,r3
 800414c:	01800044 	movi	r6,1
 8004150:	000b883a 	mov	r5,zero
 8004154:	01083004 	movi	r4,8384
 8004158:	801750c0 	call	801750c <alt_avalon_spi_command>
	return read;
 800415c:	e0bffe03 	ldbu	r2,-8(fp)
}
 8004160:	e037883a 	mov	sp,fp
 8004164:	dfc00117 	ldw	ra,4(sp)
 8004168:	df000017 	ldw	fp,0(sp)
 800416c:	dec00204 	addi	sp,sp,8
 8004170:	f800283a 	ret

08004174 <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 8004174:	defff804 	addi	sp,sp,-32
 8004178:	dfc00715 	stw	ra,28(sp)
 800417c:	df000615 	stw	fp,24(sp)
 8004180:	df000604 	addi	fp,sp,24
 8004184:	2007883a 	mov	r3,r4
 8004188:	2805883a 	mov	r2,r5
 800418c:	e1bfff15 	stw	r6,-4(fp)
 8004190:	e0fffd05 	stb	r3,-12(fp)
 8004194:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8004198:	00800044 	movi	r2,1
 800419c:	d8800215 	stw	r2,8(sp)
 80041a0:	d8000115 	stw	zero,4(sp)
 80041a4:	d8000015 	stw	zero,0(sp)
 80041a8:	e1fffd04 	addi	r7,fp,-12
 80041ac:	01800044 	movi	r6,1
 80041b0:	000b883a 	mov	r5,zero
 80041b4:	01083004 	movi	r4,8384
 80041b8:	801750c0 	call	801750c <alt_avalon_spi_command>
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 0, NULL, nbytes, data, 0);
 80041bc:	e0bffe03 	ldbu	r2,-8(fp)
 80041c0:	d8000215 	stw	zero,8(sp)
 80041c4:	e0ffff17 	ldw	r3,-4(fp)
 80041c8:	d8c00115 	stw	r3,4(sp)
 80041cc:	d8800015 	stw	r2,0(sp)
 80041d0:	000f883a 	mov	r7,zero
 80041d4:	000d883a 	mov	r6,zero
 80041d8:	000b883a 	mov	r5,zero
 80041dc:	01083004 	movi	r4,8384
 80041e0:	801750c0 	call	801750c <alt_avalon_spi_command>
	return (data + nbytes);
 80041e4:	e0bffe03 	ldbu	r2,-8(fp)
 80041e8:	e0ffff17 	ldw	r3,-4(fp)
 80041ec:	1885883a 	add	r2,r3,r2
}
 80041f0:	e037883a 	mov	sp,fp
 80041f4:	dfc00117 	ldw	ra,4(sp)
 80041f8:	df000017 	ldw	fp,0(sp)
 80041fc:	dec00204 	addi	sp,sp,8
 8004200:	f800283a 	ret

08004204 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8004204:	defffd04 	addi	sp,sp,-12
 8004208:	dfc00215 	stw	ra,8(sp)
 800420c:	df000115 	stw	fp,4(sp)
 8004210:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8004214:	0007883a 	mov	r3,zero
 8004218:	00884c04 	movi	r2,8496
 800421c:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8004220:	010003f4 	movhi	r4,15
 8004224:	21109004 	addi	r4,r4,16960
 8004228:	80168680 	call	8016868 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 800422c:	00c00044 	movi	r3,1
 8004230:	00884c04 	movi	r2,8496
 8004234:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8004238:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 800423c:	01400804 	movi	r5,32
 8004240:	01001e04 	movi	r4,120
 8004244:	80040140 	call	8004014 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8004248:	000b883a 	mov	r5,zero
 800424c:	01001e04 	movi	r4,120
 8004250:	80040140 	call	8004014 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8004254:	00000806 	br	8004278 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 8004258:	e0bfff03 	ldbu	r2,-4(fp)
 800425c:	10800044 	addi	r2,r2,1
 8004260:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 8004264:	e0bfff03 	ldbu	r2,-4(fp)
 8004268:	1000031e 	bne	r2,zero,8004278 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 800426c:	01020d74 	movhi	r4,2101
 8004270:	2120d504 	addi	r4,r4,-31916
 8004274:	800c1740 	call	800c174 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8004278:	01001a04 	movi	r4,104
 800427c:	80041180 	call	8004118 <MAXreg_rd>
 8004280:	10803fcc 	andi	r2,r2,255
 8004284:	1080004c 	andi	r2,r2,1
 8004288:	103ff326 	beq	r2,zero,8004258 <__alt_data_end+0xfc004258>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 800428c:	0001883a 	nop
 8004290:	e037883a 	mov	sp,fp
 8004294:	dfc00117 	ldw	ra,4(sp)
 8004298:	df000017 	ldw	fp,0(sp)
 800429c:	dec00204 	addi	sp,sp,8
 80042a0:	f800283a 	ret

080042a4 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 80042a4:	defffe04 	addi	sp,sp,-8
 80042a8:	df000115 	stw	fp,4(sp)
 80042ac:	df000104 	addi	fp,sp,4
 80042b0:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 80042b4:	00800044 	movi	r2,1
}
 80042b8:	e037883a 	mov	sp,fp
 80042bc:	df000017 	ldw	fp,0(sp)
 80042c0:	dec00104 	addi	sp,sp,4
 80042c4:	f800283a 	ret

080042c8 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 80042c8:	defffd04 	addi	sp,sp,-12
 80042cc:	dfc00215 	stw	ra,8(sp)
 80042d0:	df000115 	stw	fp,4(sp)
 80042d4:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 80042d8:	01003e04 	movi	r4,248
 80042dc:	80041180 	call	8004118 <MAXreg_rd>
 80042e0:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80042e4:	e0ffff03 	ldbu	r3,-4(fp)
 80042e8:	00bff004 	movi	r2,-64
 80042ec:	1884703a 	and	r2,r3,r2
 80042f0:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80042f4:	e0bfff03 	ldbu	r2,-4(fp)
 80042f8:	10c01020 	cmpeqi	r3,r2,64
 80042fc:	1800221e 	bne	r3,zero,8004388 <MAX_busprobe+0xc0>
 8004300:	10c01048 	cmpgei	r3,r2,65
 8004304:	1800021e 	bne	r3,zero,8004310 <MAX_busprobe+0x48>
 8004308:	10003b26 	beq	r2,zero,80043f8 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 800430c:	00004a06 	br	8004438 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 8004310:	10c02020 	cmpeqi	r3,r2,128
 8004314:	1800031e 	bne	r3,zero,8004324 <MAX_busprobe+0x5c>
 8004318:	10803020 	cmpeqi	r2,r2,192
 800431c:	1000331e 	bne	r2,zero,80043ec <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8004320:	00004506 	br	8004438 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8004324:	d0a00503 	ldbu	r2,-32748(gp)
 8004328:	10803fcc 	andi	r2,r2,255
 800432c:	108004e0 	cmpeqi	r2,r2,19
 8004330:	10003e1e 	bne	r2,zero,800442c <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8004334:	01003604 	movi	r4,216
 8004338:	80041180 	call	8004118 <MAXreg_rd>
 800433c:	10803fcc 	andi	r2,r2,255
 8004340:	1080008c 	andi	r2,r2,2
 8004344:	1000071e 	bne	r2,zero,8004364 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8004348:	01403244 	movi	r5,201
 800434c:	01003604 	movi	r4,216
 8004350:	80040140 	call	8004014 <MAXreg_wr>
				printf("Starting in full speed\n");
 8004354:	01020d74 	movhi	r4,2101
 8004358:	2120d904 	addi	r4,r4,-31900
 800435c:	800c2700 	call	800c270 <puts>
 8004360:	00000606 	br	800437c <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8004364:	014032c4 	movi	r5,203
 8004368:	01003604 	movi	r4,216
 800436c:	80040140 	call	8004014 <MAXreg_wr>
				printf("Starting in low speed\n");
 8004370:	01020d74 	movhi	r4,2101
 8004374:	2120df04 	addi	r4,r4,-31876
 8004378:	800c2700 	call	800c270 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 800437c:	00800404 	movi	r2,16
 8004380:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8004384:	00002906 	br	800442c <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8004388:	d0a00503 	ldbu	r2,-32748(gp)
 800438c:	10803fcc 	andi	r2,r2,255
 8004390:	108004e0 	cmpeqi	r2,r2,19
 8004394:	1000271e 	bne	r2,zero,8004434 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8004398:	01003604 	movi	r4,216
 800439c:	80041180 	call	8004118 <MAXreg_rd>
 80043a0:	10803fcc 	andi	r2,r2,255
 80043a4:	1080008c 	andi	r2,r2,2
 80043a8:	1000071e 	bne	r2,zero,80043c8 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 80043ac:	014032c4 	movi	r5,203
 80043b0:	01003604 	movi	r4,216
 80043b4:	80040140 	call	8004014 <MAXreg_wr>
				printf("Starting in low speed\n");
 80043b8:	01020d74 	movhi	r4,2101
 80043bc:	2120df04 	addi	r4,r4,-31876
 80043c0:	800c2700 	call	800c270 <puts>
 80043c4:	00000606 	br	80043e0 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80043c8:	01403244 	movi	r5,201
 80043cc:	01003604 	movi	r4,216
 80043d0:	80040140 	call	8004014 <MAXreg_wr>
				printf("Starting in full speed\n");
 80043d4:	01020d74 	movhi	r4,2101
 80043d8:	2120d904 	addi	r4,r4,-31900
 80043dc:	800c2700 	call	800c270 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80043e0:	00800404 	movi	r2,16
 80043e4:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 80043e8:	00001206 	br	8004434 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 80043ec:	00800104 	movi	r2,4
 80043f0:	d0a00505 	stb	r2,-32748(gp)
		break;
 80043f4:	00001006 	br	8004438 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80043f8:	d0a00503 	ldbu	r2,-32748(gp)
 80043fc:	10803fcc 	andi	r2,r2,255
 8004400:	10803c0c 	andi	r2,r2,240
 8004404:	10000326 	beq	r2,zero,8004414 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8004408:	00800044 	movi	r2,1
 800440c:	d0a00505 	stb	r2,-32748(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 8004410:	00000906 	br	8004438 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 8004414:	01403244 	movi	r5,201
 8004418:	01003604 	movi	r4,216
 800441c:	80040140 	call	8004014 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8004420:	008000c4 	movi	r2,3
 8004424:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8004428:	00000306 	br	8004438 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 800442c:	0001883a 	nop
 8004430:	00000106 	br	8004438 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8004434:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8004438:	0001883a 	nop
 800443c:	e037883a 	mov	sp,fp
 8004440:	dfc00117 	ldw	ra,4(sp)
 8004444:	df000017 	ldw	fp,0(sp)
 8004448:	dec00204 	addi	sp,sp,8
 800444c:	f800283a 	ret

08004450 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8004450:	defffe04 	addi	sp,sp,-8
 8004454:	dfc00115 	stw	ra,4(sp)
 8004458:	df000015 	stw	fp,0(sp)
 800445c:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8004460:	01400684 	movi	r5,26
 8004464:	01002204 	movi	r4,136
 8004468:	80040140 	call	8004014 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 800446c:	80042040 	call	8004204 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8004470:	0009883a 	mov	r4,zero
 8004474:	80042a40 	call	80042a4 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8004478:	01402004 	movi	r5,128
 800447c:	01002e04 	movi	r4,184
 8004480:	80040140 	call	8004014 <MAXreg_wr>
	Vbus_power( ON);
 8004484:	01000044 	movi	r4,1
 8004488:	80042a40 	call	80042a4 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 800448c:	01403444 	movi	r5,209
 8004490:	01003604 	movi	r4,216
 8004494:	80040140 	call	8004014 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8004498:	01400804 	movi	r5,32
 800449c:	01003404 	movi	r4,208
 80044a0:	80040140 	call	8004014 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 80044a4:	01400104 	movi	r5,4
 80044a8:	01003a04 	movi	r4,232
 80044ac:	80040140 	call	8004014 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 80044b0:	80042c80 	call	80042c8 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 80044b4:	01400804 	movi	r5,32
 80044b8:	01003204 	movi	r4,200
 80044bc:	80040140 	call	8004014 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 80044c0:	01400044 	movi	r5,1
 80044c4:	01002004 	movi	r4,128
 80044c8:	80040140 	call	8004014 <MAXreg_wr>
}
 80044cc:	0001883a 	nop
 80044d0:	e037883a 	mov	sp,fp
 80044d4:	dfc00117 	ldw	ra,4(sp)
 80044d8:	df000017 	ldw	fp,0(sp)
 80044dc:	dec00204 	addi	sp,sp,8
 80044e0:	f800283a 	ret

080044e4 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 80044e4:	defffe04 	addi	sp,sp,-8
 80044e8:	dfc00115 	stw	ra,4(sp)
 80044ec:	df000015 	stw	fp,0(sp)
 80044f0:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 80044f4:	00885404 	movi	r2,8528
 80044f8:	10800037 	ldwio	r2,0(r2)
 80044fc:	1000041e 	bne	r2,zero,8004510 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 8004500:	01020d74 	movhi	r4,2101
 8004504:	2120e504 	addi	r4,r4,-31852
 8004508:	800c1740 	call	800c174 <printf>
		MaxIntHandler();
 800450c:	80045480 	call	8004548 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8004510:	00885004 	movi	r2,8512
 8004514:	10800037 	ldwio	r2,0(r2)
 8004518:	10800058 	cmpnei	r2,r2,1
 800451c:	1000041e 	bne	r2,zero,8004530 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 8004520:	01020d74 	movhi	r4,2101
 8004524:	2120e904 	addi	r4,r4,-31836
 8004528:	800c1740 	call	800c174 <printf>
		MaxGpxHandler();
 800452c:	80046140 	call	8004614 <MaxGpxHandler>
	}
}
 8004530:	0001883a 	nop
 8004534:	e037883a 	mov	sp,fp
 8004538:	dfc00117 	ldw	ra,4(sp)
 800453c:	df000017 	ldw	fp,0(sp)
 8004540:	dec00204 	addi	sp,sp,8
 8004544:	f800283a 	ret

08004548 <MaxIntHandler>:

void MaxIntHandler(void) {
 8004548:	defffd04 	addi	sp,sp,-12
 800454c:	dfc00215 	stw	ra,8(sp)
 8004550:	df000115 	stw	fp,4(sp)
 8004554:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8004558:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 800455c:	01003204 	movi	r4,200
 8004560:	80041180 	call	8004118 <MAXreg_rd>
 8004564:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 8004568:	e0bfff43 	ldbu	r2,-3(fp)
 800456c:	100b883a 	mov	r5,r2
 8004570:	01020d74 	movhi	r4,2101
 8004574:	2120ed04 	addi	r4,r4,-31820
 8004578:	800c1740 	call	800c174 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 800457c:	e0bfff43 	ldbu	r2,-3(fp)
 8004580:	1080100c 	andi	r2,r2,64
 8004584:	10000326 	beq	r2,zero,8004594 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8004588:	e0bfff03 	ldbu	r2,-4(fp)
 800458c:	10801014 	ori	r2,r2,64
 8004590:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8004594:	e0bfff43 	ldbu	r2,-3(fp)
 8004598:	1080080c 	andi	r2,r2,32
 800459c:	10000426 	beq	r2,zero,80045b0 <MaxIntHandler+0x68>
		MAX_busprobe();
 80045a0:	80042c80 	call	80042c8 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 80045a4:	e0bfff03 	ldbu	r2,-4(fp)
 80045a8:	10800814 	ori	r2,r2,32
 80045ac:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 80045b0:	e0bfff43 	ldbu	r2,-3(fp)
 80045b4:	1080020c 	andi	r2,r2,8
 80045b8:	10000326 	beq	r2,zero,80045c8 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 80045bc:	000b883a 	mov	r5,zero
 80045c0:	01000e04 	movi	r4,56
 80045c4:	80040140 	call	8004014 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 80045c8:	e0bfff43 	ldbu	r2,-3(fp)
 80045cc:	1080004c 	andi	r2,r2,1
 80045d0:	10000626 	beq	r2,zero,80045ec <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 80045d4:	d0a00503 	ldbu	r2,-32748(gp)
 80045d8:	10800044 	addi	r2,r2,1
 80045dc:	d0a00505 	stb	r2,-32748(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 80045e0:	e0bfff03 	ldbu	r2,-4(fp)
 80045e4:	10800054 	ori	r2,r2,1
 80045e8:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 80045ec:	e0bfff03 	ldbu	r2,-4(fp)
 80045f0:	100b883a 	mov	r5,r2
 80045f4:	01003204 	movi	r4,200
 80045f8:	80040140 	call	8004014 <MAXreg_wr>
}
 80045fc:	0001883a 	nop
 8004600:	e037883a 	mov	sp,fp
 8004604:	dfc00117 	ldw	ra,4(sp)
 8004608:	df000017 	ldw	fp,0(sp)
 800460c:	dec00204 	addi	sp,sp,8
 8004610:	f800283a 	ret

08004614 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8004614:	defffd04 	addi	sp,sp,-12
 8004618:	dfc00215 	stw	ra,8(sp)
 800461c:	df000115 	stw	fp,4(sp)
 8004620:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 8004624:	01002c04 	movi	r4,176
 8004628:	80041180 	call	8004118 <MAXreg_rd>
 800462c:	e0bfff05 	stb	r2,-4(fp)
}
 8004630:	0001883a 	nop
 8004634:	e037883a 	mov	sp,fp
 8004638:	dfc00117 	ldw	ra,4(sp)
 800463c:	df000017 	ldw	fp,0(sp)
 8004640:	dec00204 	addi	sp,sp,8
 8004644:	f800283a 	ret

08004648 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8004648:	defff104 	addi	sp,sp,-60
 800464c:	dfc00e15 	stw	ra,56(sp)
 8004650:	df000d15 	stw	fp,52(sp)
 8004654:	df000d04 	addi	fp,sp,52
 8004658:	2015883a 	mov	r10,r4
 800465c:	2813883a 	mov	r9,r5
 8004660:	3011883a 	mov	r8,r6
 8004664:	380d883a 	mov	r6,r7
 8004668:	e1400217 	ldw	r5,8(fp)
 800466c:	e1000317 	ldw	r4,12(fp)
 8004670:	e0c00417 	ldw	r3,16(fp)
 8004674:	e0800517 	ldw	r2,20(fp)
 8004678:	e2bff805 	stb	r10,-32(fp)
 800467c:	e27ff905 	stb	r9,-28(fp)
 8004680:	e23ffa05 	stb	r8,-24(fp)
 8004684:	e1bffb05 	stb	r6,-20(fp)
 8004688:	e17ffc05 	stb	r5,-16(fp)
 800468c:	e13ffd05 	stb	r4,-12(fp)
 8004690:	e0fffe0d 	sth	r3,-8(fp)
 8004694:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8004698:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 800469c:	00800044 	movi	r2,1
 80046a0:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 80046a4:	e0800617 	ldw	r2,24(fp)
 80046a8:	1000011e 	bne	r2,zero,80046b0 <XferCtrlReq+0x68>
        datastage = 0;
 80046ac:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 80046b0:	e0bff803 	ldbu	r2,-32(fp)
 80046b4:	100b883a 	mov	r5,r2
 80046b8:	01003804 	movi	r4,224
 80046bc:	80040140 	call	8004014 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 80046c0:	e0bffa03 	ldbu	r2,-24(fp)
 80046c4:	10803fcc 	andi	r2,r2,255
 80046c8:	1080201c 	xori	r2,r2,128
 80046cc:	10bfe004 	addi	r2,r2,-128
 80046d0:	1000020e 	bge	r2,zero,80046dc <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 80046d4:	00800044 	movi	r2,1
 80046d8:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 80046dc:	e0bffa03 	ldbu	r2,-24(fp)
 80046e0:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 80046e4:	e0bffb03 	ldbu	r2,-20(fp)
 80046e8:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 80046ec:	e0bffc03 	ldbu	r2,-16(fp)
 80046f0:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 80046f4:	e0bffd03 	ldbu	r2,-12(fp)
 80046f8:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 80046fc:	e0bffe0b 	ldhu	r2,-8(fp)
 8004700:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 8004704:	e0bfff0b 	ldhu	r2,-4(fp)
 8004708:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 800470c:	e0bff584 	addi	r2,fp,-42
 8004710:	100d883a 	mov	r6,r2
 8004714:	01400204 	movi	r5,8
 8004718:	01000804 	movi	r4,32
 800471c:	80040800 	call	8004080 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8004720:	e0bff903 	ldbu	r2,-28(fp)
 8004724:	100b883a 	mov	r5,r2
 8004728:	01000404 	movi	r4,16
 800472c:	80048f00 	call	80048f0 <XferDispatchPkt>
 8004730:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8004734:	e0bff543 	ldbu	r2,-43(fp)
 8004738:	10000226 	beq	r2,zero,8004744 <XferCtrlReq+0xfc>
        return( rcode );
 800473c:	e0bff543 	ldbu	r2,-43(fp)
 8004740:	00000f06 	br	8004780 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8004744:	e0bff503 	ldbu	r2,-44(fp)
 8004748:	1085883a 	add	r2,r2,r2
 800474c:	1087883a 	add	r3,r2,r2
 8004750:	d0a00304 	addi	r2,gp,-32756
 8004754:	1885883a 	add	r2,r3,r2
 8004758:	10800017 	ldw	r2,0(r2)
 800475c:	e13ff803 	ldbu	r4,-32(fp)
 8004760:	e17ff903 	ldbu	r5,-28(fp)
 8004764:	e1bfff0b 	ldhu	r6,-4(fp)
 8004768:	e0fff417 	ldw	r3,-48(fp)
 800476c:	d8c00015 	stw	r3,0(sp)
 8004770:	e1c00617 	ldw	r7,24(fp)
 8004774:	103ee83a 	callr	r2
 8004778:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 800477c:	e0bff543 	ldbu	r2,-43(fp)
}
 8004780:	e037883a 	mov	sp,fp
 8004784:	dfc00117 	ldw	ra,4(sp)
 8004788:	df000017 	ldw	fp,0(sp)
 800478c:	dec00204 	addi	sp,sp,8
 8004790:	f800283a 	ret

08004794 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8004794:	defff804 	addi	sp,sp,-32
 8004798:	dfc00715 	stw	ra,28(sp)
 800479c:	df000615 	stw	fp,24(sp)
 80047a0:	df000604 	addi	fp,sp,24
 80047a4:	2807883a 	mov	r3,r5
 80047a8:	3005883a 	mov	r2,r6
 80047ac:	e1ffff15 	stw	r7,-4(fp)
 80047b0:	e13ffc05 	stb	r4,-16(fp)
 80047b4:	e0fffd05 	stb	r3,-12(fp)
 80047b8:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 80047bc:	e0800217 	ldw	r2,8(fp)
 80047c0:	10002826 	beq	r2,zero,8004864 <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 80047c4:	e0fffc03 	ldbu	r3,-16(fp)
 80047c8:	008211f4 	movhi	r2,2119
 80047cc:	109fca04 	addi	r2,r2,32552
 80047d0:	180690fa 	slli	r3,r3,3
 80047d4:	10c5883a 	add	r2,r2,r3
 80047d8:	10c00017 	ldw	r3,0(r2)
 80047dc:	e0bffd03 	ldbu	r2,-12(fp)
 80047e0:	100490fa 	slli	r2,r2,3
 80047e4:	1885883a 	add	r2,r3,r2
 80047e8:	00c00804 	movi	r3,32
 80047ec:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize);
 80047f0:	e13ffc03 	ldbu	r4,-16(fp)
 80047f4:	e17ffd03 	ldbu	r5,-12(fp)
 80047f8:	e1bffe0b 	ldhu	r6,-8(fp)
 80047fc:	e0fffc03 	ldbu	r3,-16(fp)
 8004800:	008211f4 	movhi	r2,2119
 8004804:	109fca04 	addi	r2,r2,32552
 8004808:	180690fa 	slli	r3,r3,3
 800480c:	10c5883a 	add	r2,r2,r3
 8004810:	10c00017 	ldw	r3,0(r2)
 8004814:	e0bffd03 	ldbu	r2,-12(fp)
 8004818:	100490fa 	slli	r2,r2,3
 800481c:	1885883a 	add	r2,r3,r2
 8004820:	1080008b 	ldhu	r2,2(r2)
 8004824:	10803fcc 	andi	r2,r2,255
 8004828:	d8800015 	stw	r2,0(sp)
 800482c:	e1ffff17 	ldw	r7,-4(fp)
 8004830:	8004a6c0 	call	8004a6c <XferInTransfer>
 8004834:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8004838:	e0bffb03 	ldbu	r2,-20(fp)
 800483c:	10000226 	beq	r2,zero,8004848 <XferCtrlData+0xb4>
        return( rcode );
 8004840:	e0bffb03 	ldbu	r2,-20(fp)
 8004844:	00000806 	br	8004868 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8004848:	e0bffd03 	ldbu	r2,-12(fp)
 800484c:	100b883a 	mov	r5,r2
 8004850:	01002804 	movi	r4,160
 8004854:	80048f00 	call	80048f0 <XferDispatchPkt>
 8004858:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 800485c:	e0bffb03 	ldbu	r2,-20(fp)
 8004860:	00000106 	br	8004868 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 8004864:	00bfffc4 	movi	r2,-1
    }
}
 8004868:	e037883a 	mov	sp,fp
 800486c:	dfc00117 	ldw	ra,4(sp)
 8004870:	df000017 	ldw	fp,0(sp)
 8004874:	dec00204 	addi	sp,sp,8
 8004878:	f800283a 	ret

0800487c <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 800487c:	defff904 	addi	sp,sp,-28
 8004880:	dfc00615 	stw	ra,24(sp)
 8004884:	df000515 	stw	fp,20(sp)
 8004888:	df000504 	addi	fp,sp,20
 800488c:	2807883a 	mov	r3,r5
 8004890:	3005883a 	mov	r2,r6
 8004894:	e1ffff15 	stw	r7,-4(fp)
 8004898:	e13ffc05 	stb	r4,-16(fp)
 800489c:	e0fffd05 	stb	r3,-12(fp)
 80048a0:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 80048a4:	e0800217 	ldw	r2,8(fp)
 80048a8:	10000626 	beq	r2,zero,80048c4 <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 80048ac:	e0bffd03 	ldbu	r2,-12(fp)
 80048b0:	100b883a 	mov	r5,r2
 80048b4:	01002804 	movi	r4,160
 80048b8:	80048f00 	call	80048f0 <XferDispatchPkt>
 80048bc:	e0bffb05 	stb	r2,-20(fp)
 80048c0:	00000506 	br	80048d8 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 80048c4:	e0bffd03 	ldbu	r2,-12(fp)
 80048c8:	100b883a 	mov	r5,r2
 80048cc:	01002004 	movi	r4,128
 80048d0:	80048f00 	call	80048f0 <XferDispatchPkt>
 80048d4:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 80048d8:	e0bffb03 	ldbu	r2,-20(fp)
}
 80048dc:	e037883a 	mov	sp,fp
 80048e0:	dfc00117 	ldw	ra,4(sp)
 80048e4:	df000017 	ldw	fp,0(sp)
 80048e8:	dec00204 	addi	sp,sp,8
 80048ec:	f800283a 	ret

080048f0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 80048f0:	defff904 	addi	sp,sp,-28
 80048f4:	dfc00615 	stw	ra,24(sp)
 80048f8:	df000515 	stw	fp,20(sp)
 80048fc:	df000504 	addi	fp,sp,20
 8004900:	2007883a 	mov	r3,r4
 8004904:	2805883a 	mov	r2,r5
 8004908:	e0fffe05 	stb	r3,-8(fp)
 800490c:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004910:	d0a6f917 	ldw	r2,-25628(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8004914:	0140fa04 	movi	r5,1000
 8004918:	1009883a 	mov	r4,r2
 800491c:	8007f540 	call	8007f54 <__mulsi3>
 8004920:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004924:	d0a6f817 	ldw	r2,-25632(gp)
 8004928:	100b883a 	mov	r5,r2
 800492c:	1809883a 	mov	r4,r3
 8004930:	8007e980 	call	8007e98 <__udivsi3>
 8004934:	1084e204 	addi	r2,r2,5000
 8004938:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 800493c:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8004940:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8004944:	e0fffe03 	ldbu	r3,-8(fp)
 8004948:	e0bfff03 	ldbu	r2,-4(fp)
 800494c:	1884b03a 	or	r2,r3,r2
 8004950:	10803fcc 	andi	r2,r2,255
 8004954:	100b883a 	mov	r5,r2
 8004958:	01003c04 	movi	r4,240
 800495c:	80040140 	call	8004014 <MAXreg_wr>
        rcode = 0xff;
 8004960:	00bfffc4 	movi	r2,-1
 8004964:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout) {
 8004968:	00000d06 	br	80049a0 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 800496c:	01003204 	movi	r4,200
 8004970:	80041180 	call	8004118 <MAXreg_rd>
 8004974:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8004978:	e0bffd03 	ldbu	r2,-12(fp)
 800497c:	10803fcc 	andi	r2,r2,255
 8004980:	1080201c 	xori	r2,r2,128
 8004984:	10bfe004 	addi	r2,r2,-128
 8004988:	1000050e 	bge	r2,zero,80049a0 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 800498c:	01402004 	movi	r5,128
 8004990:	01003204 	movi	r4,200
 8004994:	80040140 	call	8004014 <MAXreg_wr>
                rcode = 0x00;
 8004998:	e03ffb05 	stb	zero,-20(fp)
                break;
 800499c:	00000c06 	br	80049d0 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80049a0:	d0a6f917 	ldw	r2,-25628(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout) {
 80049a4:	0140fa04 	movi	r5,1000
 80049a8:	1009883a 	mov	r4,r2
 80049ac:	8007f540 	call	8007f54 <__mulsi3>
 80049b0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80049b4:	d0a6f817 	ldw	r2,-25632(gp)
 80049b8:	100b883a 	mov	r5,r2
 80049bc:	1809883a 	mov	r4,r3
 80049c0:	8007e980 	call	8007e98 <__udivsi3>
 80049c4:	1007883a 	mov	r3,r2
 80049c8:	e0bffc17 	ldw	r2,-16(fp)
 80049cc:	18bfe736 	bltu	r3,r2,800496c <__alt_data_end+0xfc00496c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 80049d0:	e0bffb03 	ldbu	r2,-20(fp)
 80049d4:	10000226 	beq	r2,zero,80049e0 <XferDispatchPkt+0xf0>
            return( rcode );
 80049d8:	e0bffb03 	ldbu	r2,-20(fp)
 80049dc:	00001e06 	br	8004a58 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 80049e0:	01003e04 	movi	r4,248
 80049e4:	80041180 	call	8004118 <MAXreg_rd>
 80049e8:	108003cc 	andi	r2,r2,15
 80049ec:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 80049f0:	e0bffb03 	ldbu	r2,-20(fp)
 80049f4:	10800118 	cmpnei	r2,r2,4
 80049f8:	1000071e 	bne	r2,zero,8004a18 <XferDispatchPkt+0x128>
            nak_count++;
 80049fc:	e0bffb83 	ldbu	r2,-18(fp)
 8004a00:	10800044 	addi	r2,r2,1
 8004a04:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8004a08:	e0bffb83 	ldbu	r2,-18(fp)
 8004a0c:	10800158 	cmpnei	r2,r2,5
 8004a10:	10000b1e 	bne	r2,zero,8004a40 <XferDispatchPkt+0x150>
                break;
 8004a14:	00000f06 	br	8004a54 <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8004a18:	e0bffb03 	ldbu	r2,-20(fp)
 8004a1c:	10800398 	cmpnei	r2,r2,14
 8004a20:	1000091e 	bne	r2,zero,8004a48 <XferDispatchPkt+0x158>
            retry_count++;
 8004a24:	e0bffb43 	ldbu	r2,-19(fp)
 8004a28:	10800044 	addi	r2,r2,1
 8004a2c:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8004a30:	e0bffb47 	ldb	r2,-19(fp)
 8004a34:	108000d8 	cmpnei	r2,r2,3
 8004a38:	10000526 	beq	r2,zero,8004a50 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8004a3c:	00000106 	br	8004a44 <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8004a40:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8004a44:	003fbf06 	br	8004944 <__alt_data_end+0xfc004944>
            }
            else {
                continue;
            }
        }
        else break;
 8004a48:	0001883a 	nop
 8004a4c:	00000106 	br	8004a54 <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8004a50:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8004a54:	e0bffb03 	ldbu	r2,-20(fp)
}
 8004a58:	e037883a 	mov	sp,fp
 8004a5c:	dfc00117 	ldw	ra,4(sp)
 8004a60:	df000017 	ldw	fp,0(sp)
 8004a64:	dec00204 	addi	sp,sp,8
 8004a68:	f800283a 	ret

08004a6c <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize)
{
 8004a6c:	defff804 	addi	sp,sp,-32
 8004a70:	dfc00715 	stw	ra,28(sp)
 8004a74:	df000615 	stw	fp,24(sp)
 8004a78:	df000604 	addi	fp,sp,24
 8004a7c:	2011883a 	mov	r8,r4
 8004a80:	2809883a 	mov	r4,r5
 8004a84:	3007883a 	mov	r3,r6
 8004a88:	e1fffe15 	stw	r7,-8(fp)
 8004a8c:	e0800217 	ldw	r2,8(fp)
 8004a90:	e23ffb05 	stb	r8,-20(fp)
 8004a94:	e13ffc05 	stb	r4,-16(fp)
 8004a98:	e0fffd0d 	sth	r3,-12(fp)
 8004a9c:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8004aa0:	e03ffa0d 	sth	zero,-24(fp)
    
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8004aa4:	e0fffb03 	ldbu	r3,-20(fp)
 8004aa8:	008211f4 	movhi	r2,2119
 8004aac:	109fca04 	addi	r2,r2,32552
 8004ab0:	180690fa 	slli	r3,r3,3
 8004ab4:	10c5883a 	add	r2,r2,r3
 8004ab8:	10c00017 	ldw	r3,0(r2)
 8004abc:	e0bffc03 	ldbu	r2,-16(fp)
 8004ac0:	100490fa 	slli	r2,r2,3
 8004ac4:	1885883a 	add	r2,r3,r2
 8004ac8:	10800183 	ldbu	r2,6(r2)
 8004acc:	10803fcc 	andi	r2,r2,255
 8004ad0:	100b883a 	mov	r5,r2
 8004ad4:	01003a04 	movi	r4,232
 8004ad8:	80040140 	call	8004014 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8004adc:	e0bffc03 	ldbu	r2,-16(fp)
 8004ae0:	100b883a 	mov	r5,r2
 8004ae4:	0009883a 	mov	r4,zero
 8004ae8:	80048f00 	call	80048f0 <XferDispatchPkt>
 8004aec:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8004af0:	e0bffa83 	ldbu	r2,-22(fp)
 8004af4:	10000226 	beq	r2,zero,8004b00 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8004af8:	e0bffa83 	ldbu	r2,-22(fp)
 8004afc:	00003a06 	br	8004be8 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8004b00:	01003204 	movi	r4,200
 8004b04:	80041180 	call	8004118 <MAXreg_rd>
 8004b08:	10803fcc 	andi	r2,r2,255
 8004b0c:	1080010c 	andi	r2,r2,4
 8004b10:	1000021e 	bne	r2,zero,8004b1c <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8004b14:	00bffc04 	movi	r2,-16
 8004b18:	00003306 	br	8004be8 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8004b1c:	01000c04 	movi	r4,48
 8004b20:	80041180 	call	8004118 <MAXreg_rd>
 8004b24:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8004b28:	e0bffac3 	ldbu	r2,-21(fp)
 8004b2c:	e1bffe17 	ldw	r6,-8(fp)
 8004b30:	100b883a 	mov	r5,r2
 8004b34:	01000204 	movi	r4,8
 8004b38:	80041740 	call	8004174 <MAXbytes_rd>
 8004b3c:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8004b40:	01400104 	movi	r5,4
 8004b44:	01003204 	movi	r4,200
 8004b48:	80040140 	call	8004014 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8004b4c:	e0fffac3 	ldbu	r3,-21(fp)
 8004b50:	e0bffa0b 	ldhu	r2,-24(fp)
 8004b54:	1885883a 	add	r2,r3,r2
 8004b58:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8004b5c:	e0fffac3 	ldbu	r3,-21(fp)
 8004b60:	e0bfff03 	ldbu	r2,-4(fp)
 8004b64:	18800336 	bltu	r3,r2,8004b74 <XferInTransfer+0x108>
 8004b68:	e0fffa0b 	ldhu	r3,-24(fp)
 8004b6c:	e0bffd0b 	ldhu	r2,-12(fp)
 8004b70:	18bfda36 	bltu	r3,r2,8004adc <__alt_data_end+0xfc004adc>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8004b74:	01003e04 	movi	r4,248
 8004b78:	80041180 	call	8004118 <MAXreg_rd>
 8004b7c:	10803fcc 	andi	r2,r2,255
 8004b80:	1080040c 	andi	r2,r2,16
 8004b84:	10000c26 	beq	r2,zero,8004bb8 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8004b88:	e0fffb03 	ldbu	r3,-20(fp)
 8004b8c:	008211f4 	movhi	r2,2119
 8004b90:	109fca04 	addi	r2,r2,32552
 8004b94:	180690fa 	slli	r3,r3,3
 8004b98:	10c5883a 	add	r2,r2,r3
 8004b9c:	10c00017 	ldw	r3,0(r2)
 8004ba0:	e0bffc03 	ldbu	r2,-16(fp)
 8004ba4:	100490fa 	slli	r2,r2,3
 8004ba8:	1885883a 	add	r2,r3,r2
 8004bac:	00c00804 	movi	r3,32
 8004bb0:	10c00185 	stb	r3,6(r2)
 8004bb4:	00000b06 	br	8004be4 <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8004bb8:	e0fffb03 	ldbu	r3,-20(fp)
 8004bbc:	008211f4 	movhi	r2,2119
 8004bc0:	109fca04 	addi	r2,r2,32552
 8004bc4:	180690fa 	slli	r3,r3,3
 8004bc8:	10c5883a 	add	r2,r2,r3
 8004bcc:	10c00017 	ldw	r3,0(r2)
 8004bd0:	e0bffc03 	ldbu	r2,-16(fp)
 8004bd4:	100490fa 	slli	r2,r2,3
 8004bd8:	1885883a 	add	r2,r3,r2
 8004bdc:	00c00404 	movi	r3,16
 8004be0:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8004be4:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8004be8:	e037883a 	mov	sp,fp
 8004bec:	dfc00117 	ldw	ra,4(sp)
 8004bf0:	df000017 	ldw	fp,0(sp)
 8004bf4:	dec00204 	addi	sp,sp,8
 8004bf8:	f800283a 	ret

08004bfc <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8004bfc:	defffe04 	addi	sp,sp,-8
 8004c00:	df000115 	stw	fp,4(sp)
 8004c04:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8004c08:	e03fff05 	stb	zero,-4(fp)
 8004c0c:	00001006 	br	8004c50 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8004c10:	e0ffff03 	ldbu	r3,-4(fp)
 8004c14:	008211f4 	movhi	r2,2119
 8004c18:	109fca04 	addi	r2,r2,32552
 8004c1c:	180690fa 	slli	r3,r3,3
 8004c20:	10c5883a 	add	r2,r2,r3
 8004c24:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8004c28:	e0ffff03 	ldbu	r3,-4(fp)
 8004c2c:	008211f4 	movhi	r2,2119
 8004c30:	109fca04 	addi	r2,r2,32552
 8004c34:	180690fa 	slli	r3,r3,3
 8004c38:	10c5883a 	add	r2,r2,r3
 8004c3c:	10800104 	addi	r2,r2,4
 8004c40:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8004c44:	e0bfff03 	ldbu	r2,-4(fp)
 8004c48:	10800044 	addi	r2,r2,1
 8004c4c:	e0bfff05 	stb	r2,-4(fp)
 8004c50:	e0bfff03 	ldbu	r2,-4(fp)
 8004c54:	10800270 	cmpltui	r2,r2,9
 8004c58:	103fed1e 	bne	r2,zero,8004c10 <__alt_data_end+0xfc004c10>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8004c5c:	008211f4 	movhi	r2,2119
 8004c60:	109fca04 	addi	r2,r2,32552
 8004c64:	d0e6e904 	addi	r3,gp,-25692
 8004c68:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8004c6c:	d026e98d 	sth	zero,-25690(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8004c70:	00801004 	movi	r2,64
 8004c74:	d0a6ea45 	stb	r2,-25687(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8004c78:	00800404 	movi	r2,16
 8004c7c:	d0a6ea85 	stb	r2,-25686(gp)
}
 8004c80:	0001883a 	nop
 8004c84:	e037883a 	mov	sp,fp
 8004c88:	df000017 	ldw	fp,0(sp)
 8004c8c:	dec00104 	addi	sp,sp,4
 8004c90:	f800283a 	ret

08004c94 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8004c94:	deffb204 	addi	sp,sp,-312
 8004c98:	dfc04d15 	stw	ra,308(sp)
 8004c9c:	df004c15 	stw	fp,304(sp)
 8004ca0:	dc004b15 	stw	r16,300(sp)
 8004ca4:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8004ca8:	d0a00503 	ldbu	r2,-32748(gp)
 8004cac:	10803fcc 	andi	r2,r2,255
 8004cb0:	10803c0c 	andi	r2,r2,240
 8004cb4:	10c00820 	cmpeqi	r3,r2,32
 8004cb8:	1801121e 	bne	r3,zero,8005104 <USB_Task+0x470>
 8004cbc:	10c00848 	cmpgei	r3,r2,33
 8004cc0:	1800041e 	bne	r3,zero,8004cd4 <USB_Task+0x40>
 8004cc4:	10000a26 	beq	r2,zero,8004cf0 <USB_Task+0x5c>
 8004cc8:	10800420 	cmpeqi	r2,r2,16
 8004ccc:	10001b1e 	bne	r2,zero,8004d3c <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8004cd0:	00017a06 	br	80052bc <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8004cd4:	10c01020 	cmpeqi	r3,r2,64
 8004cd8:	18016f1e 	bne	r3,zero,8005298 <USB_Task+0x604>
 8004cdc:	10c03fe0 	cmpeqi	r3,r2,255
 8004ce0:	18016f1e 	bne	r3,zero,80052a0 <USB_Task+0x60c>
 8004ce4:	10800c20 	cmpeqi	r2,r2,48
 8004ce8:	1001441e 	bne	r2,zero,80051fc <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8004cec:	00017306 	br	80052bc <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8004cf0:	d0a00503 	ldbu	r2,-32748(gp)
 8004cf4:	10803fcc 	andi	r2,r2,255
 8004cf8:	10c000e0 	cmpeqi	r3,r2,3
 8004cfc:	1800091e 	bne	r3,zero,8004d24 <USB_Task+0x90>
 8004d00:	10c00120 	cmpeqi	r3,r2,4
 8004d04:	18000b1e 	bne	r3,zero,8004d34 <USB_Task+0xa0>
 8004d08:	10800060 	cmpeqi	r2,r2,1
 8004d0c:	1000011e 	bne	r2,zero,8004d14 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8004d10:	00016a06 	br	80052bc <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8004d14:	8004bfc0 	call	8004bfc <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8004d18:	008000c4 	movi	r2,3
 8004d1c:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8004d20:	00000506 	br	8004d38 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8004d24:	01400104 	movi	r5,4
 8004d28:	01003a04 	movi	r4,232
 8004d2c:	80040140 	call	8004014 <MAXreg_wr>
                    break;
 8004d30:	00000106 	br	8004d38 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8004d34:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8004d38:	00016006 	br	80052bc <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8004d3c:	d0a00503 	ldbu	r2,-32748(gp)
 8004d40:	10803fcc 	andi	r2,r2,255
 8004d44:	10bffc04 	addi	r2,r2,-16
 8004d48:	10c001a8 	cmpgeui	r3,r2,6
 8004d4c:	1801561e 	bne	r3,zero,80052a8 <USB_Task+0x614>
 8004d50:	100690ba 	slli	r3,r2,2
 8004d54:	00820034 	movhi	r2,2048
 8004d58:	10935a04 	addi	r2,r2,19816
 8004d5c:	1885883a 	add	r2,r3,r2
 8004d60:	10800017 	ldw	r2,0(r2)
 8004d64:	1000683a 	jmp	r2
 8004d68:	08004d80 	call	8004d8 <__alt_exception_stack_pointer+0x7ff4d8>
 8004d6c:	08004db8 	rdprs	zero,at,310
 8004d70:	08004df4 	orhi	zero,at,311
 8004d74:	08004e18 	cmpnei	zero,at,312
 8004d78:	08004e58 	cmpnei	zero,at,313
 8004d7c:	08004e6c 	andhi	zero,at,313
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004d80:	d0a6f917 	ldw	r2,-25628(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8004d84:	0140fa04 	movi	r5,1000
 8004d88:	1009883a 	mov	r4,r2
 8004d8c:	8007f540 	call	8007f54 <__mulsi3>
 8004d90:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004d94:	d0a6f817 	ldw	r2,-25632(gp)
 8004d98:	100b883a 	mov	r5,r2
 8004d9c:	1809883a 	mov	r4,r3
 8004da0:	8007e980 	call	8007e98 <__udivsi3>
 8004da4:	10803204 	addi	r2,r2,200
 8004da8:	d0a6ec15 	stw	r2,-25680(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8004dac:	00800444 	movi	r2,17
 8004db0:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_STATE_ATTACHED )
 8004db4:	0000d206 	br	8005100 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004db8:	d0a6f917 	ldw	r2,-25628(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8004dbc:	0140fa04 	movi	r5,1000
 8004dc0:	1009883a 	mov	r4,r2
 8004dc4:	8007f540 	call	8007f54 <__mulsi3>
 8004dc8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8004dcc:	d0a6f817 	ldw	r2,-25632(gp)
 8004dd0:	100b883a 	mov	r5,r2
 8004dd4:	1809883a 	mov	r4,r3
 8004dd8:	8007e980 	call	8007e98 <__udivsi3>
 8004ddc:	1007883a 	mov	r3,r2
 8004de0:	d0a6ec17 	ldw	r2,-25680(gp)
 8004de4:	10c0c32e 	bgeu	r2,r3,80050f4 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8004de8:	00800484 	movi	r2,18
 8004dec:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8004df0:	0000c006 	br	80050f4 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8004df4:	01400044 	movi	r5,1
 8004df8:	01003204 	movi	r4,200
 8004dfc:	80040140 	call	8004014 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8004e00:	01400044 	movi	r5,1
 8004e04:	01003a04 	movi	r4,232
 8004e08:	80040140 	call	8004014 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8004e0c:	008004c4 	movi	r2,19
 8004e10:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8004e14:	0000ba06 	br	8005100 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8004e18:	01003a04 	movi	r4,232
 8004e1c:	80041180 	call	8004118 <MAXreg_rd>
 8004e20:	10803fcc 	andi	r2,r2,255
 8004e24:	1080004c 	andi	r2,r2,1
 8004e28:	1000b41e 	bne	r2,zero,80050fc <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8004e2c:	01003604 	movi	r4,216
 8004e30:	80041180 	call	8004118 <MAXreg_rd>
 8004e34:	10800214 	ori	r2,r2,8
 8004e38:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8004e3c:	e0bfb943 	ldbu	r2,-283(fp)
 8004e40:	100b883a 	mov	r5,r2
 8004e44:	01003604 	movi	r4,216
 8004e48:	80040140 	call	8004014 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8004e4c:	00800504 	movi	r2,20
 8004e50:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8004e54:	0000a906 	br	80050fc <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8004e58:	01003204 	movi	r4,200
 8004e5c:	80041180 	call	8004118 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8004e60:	00800544 	movi	r2,21
 8004e64:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8004e68:	0000a506 	br	8005100 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8004e6c:	008211f4 	movhi	r2,2119
 8004e70:	109fca04 	addi	r2,r2,32552
 8004e74:	10800017 	ldw	r2,0(r2)
 8004e78:	00c00204 	movi	r3,8
 8004e7c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8004e80:	e0bfba04 	addi	r2,fp,-280
 8004e84:	d8800415 	stw	r2,16(sp)
 8004e88:	00800204 	movi	r2,8
 8004e8c:	d8800315 	stw	r2,12(sp)
 8004e90:	d8000215 	stw	zero,8(sp)
 8004e94:	00800044 	movi	r2,1
 8004e98:	d8800115 	stw	r2,4(sp)
 8004e9c:	d8000015 	stw	zero,0(sp)
 8004ea0:	01c00184 	movi	r7,6
 8004ea4:	01802004 	movi	r6,128
 8004ea8:	000b883a 	mov	r5,zero
 8004eac:	0009883a 	mov	r4,zero
 8004eb0:	80046480 	call	8004648 <XferCtrlReq>
 8004eb4:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8004eb8:	e0bfb983 	ldbu	r2,-282(fp)
 8004ebc:	1000861e 	bne	r2,zero,80050d8 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8004ec0:	008211f4 	movhi	r2,2119
 8004ec4:	109fca04 	addi	r2,r2,32552
 8004ec8:	10800017 	ldw	r2,0(r2)
 8004ecc:	e0ffbbc3 	ldbu	r3,-273(fp)
 8004ed0:	18c03fcc 	andi	r3,r3,255
 8004ed4:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8004ed8:	e0bfba03 	ldbu	r2,-280(fp)
 8004edc:	10803fcc 	andi	r2,r2,255
 8004ee0:	e0ffba04 	addi	r3,fp,-280
 8004ee4:	d8c00415 	stw	r3,16(sp)
 8004ee8:	d8800315 	stw	r2,12(sp)
 8004eec:	d8000215 	stw	zero,8(sp)
 8004ef0:	00800044 	movi	r2,1
 8004ef4:	d8800115 	stw	r2,4(sp)
 8004ef8:	d8000015 	stw	zero,0(sp)
 8004efc:	01c00184 	movi	r7,6
 8004f00:	01802004 	movi	r6,128
 8004f04:	000b883a 	mov	r5,zero
 8004f08:	0009883a 	mov	r4,zero
 8004f0c:	80046480 	call	8004648 <XferCtrlReq>
 8004f10:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 8004f14:	e0bfbd83 	ldbu	r2,-266(fp)
 8004f18:	10803fcc 	andi	r2,r2,255
 8004f1c:	10003426 	beq	r2,zero,8004ff0 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8004f20:	e0bfbd83 	ldbu	r2,-266(fp)
 8004f24:	10803fcc 	andi	r2,r2,255
 8004f28:	e0ffbe84 	addi	r3,fp,-262
 8004f2c:	d8c00415 	stw	r3,16(sp)
 8004f30:	00c00084 	movi	r3,2
 8004f34:	d8c00315 	stw	r3,12(sp)
 8004f38:	00c10244 	movi	r3,1033
 8004f3c:	d8c00215 	stw	r3,8(sp)
 8004f40:	00c000c4 	movi	r3,3
 8004f44:	d8c00115 	stw	r3,4(sp)
 8004f48:	d8800015 	stw	r2,0(sp)
 8004f4c:	01c00184 	movi	r7,6
 8004f50:	01802004 	movi	r6,128
 8004f54:	000b883a 	mov	r5,zero
 8004f58:	0009883a 	mov	r4,zero
 8004f5c:	80046480 	call	8004648 <XferCtrlReq>
 8004f60:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8004f64:	e0bfbd83 	ldbu	r2,-266(fp)
 8004f68:	10803fcc 	andi	r2,r2,255
 8004f6c:	e0ffbe83 	ldbu	r3,-262(fp)
 8004f70:	18c03fcc 	andi	r3,r3,255
 8004f74:	e13fbe84 	addi	r4,fp,-262
 8004f78:	d9000415 	stw	r4,16(sp)
 8004f7c:	d8c00315 	stw	r3,12(sp)
 8004f80:	00c10244 	movi	r3,1033
 8004f84:	d8c00215 	stw	r3,8(sp)
 8004f88:	00c000c4 	movi	r3,3
 8004f8c:	d8c00115 	stw	r3,4(sp)
 8004f90:	d8800015 	stw	r2,0(sp)
 8004f94:	01c00184 	movi	r7,6
 8004f98:	01802004 	movi	r6,128
 8004f9c:	000b883a 	mov	r5,zero
 8004fa0:	0009883a 	mov	r4,zero
 8004fa4:	80046480 	call	8004648 <XferCtrlReq>
 8004fa8:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8004fac:	e0bfbd83 	ldbu	r2,-266(fp)
 8004fb0:	14003fcc 	andi	r16,r2,255
 8004fb4:	e0bfbe83 	ldbu	r2,-262(fp)
 8004fb8:	10803fcc 	andi	r2,r2,255
 8004fbc:	1004d07a 	srli	r2,r2,1
 8004fc0:	10bfffc4 	addi	r2,r2,-1
 8004fc4:	10c03fcc 	andi	r3,r2,255
 8004fc8:	e0bfbe84 	addi	r2,fp,-262
 8004fcc:	10800084 	addi	r2,r2,2
 8004fd0:	180b883a 	mov	r5,r3
 8004fd4:	1009883a 	mov	r4,r2
 8004fd8:	800545c0 	call	800545c <ConvUTF8ToStr>
 8004fdc:	100d883a 	mov	r6,r2
 8004fe0:	800b883a 	mov	r5,r16
 8004fe4:	01020d74 	movhi	r4,2101
 8004fe8:	2120f004 	addi	r4,r4,-31808
 8004fec:	800c1740 	call	800c174 <printf>
                		}
                		if (buf.iProduct != 0)
 8004ff0:	e0bfbdc3 	ldbu	r2,-265(fp)
 8004ff4:	10803fcc 	andi	r2,r2,255
 8004ff8:	10003426 	beq	r2,zero,80050cc <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8004ffc:	e0bfbdc3 	ldbu	r2,-265(fp)
 8005000:	10803fcc 	andi	r2,r2,255
 8005004:	e0ffbe84 	addi	r3,fp,-262
 8005008:	d8c00415 	stw	r3,16(sp)
 800500c:	00c00084 	movi	r3,2
 8005010:	d8c00315 	stw	r3,12(sp)
 8005014:	00c10244 	movi	r3,1033
 8005018:	d8c00215 	stw	r3,8(sp)
 800501c:	00c000c4 	movi	r3,3
 8005020:	d8c00115 	stw	r3,4(sp)
 8005024:	d8800015 	stw	r2,0(sp)
 8005028:	01c00184 	movi	r7,6
 800502c:	01802004 	movi	r6,128
 8005030:	000b883a 	mov	r5,zero
 8005034:	0009883a 	mov	r4,zero
 8005038:	80046480 	call	8004648 <XferCtrlReq>
 800503c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8005040:	e0bfbdc3 	ldbu	r2,-265(fp)
 8005044:	10803fcc 	andi	r2,r2,255
 8005048:	e0ffbe83 	ldbu	r3,-262(fp)
 800504c:	18c03fcc 	andi	r3,r3,255
 8005050:	e13fbe84 	addi	r4,fp,-262
 8005054:	d9000415 	stw	r4,16(sp)
 8005058:	d8c00315 	stw	r3,12(sp)
 800505c:	00c10244 	movi	r3,1033
 8005060:	d8c00215 	stw	r3,8(sp)
 8005064:	00c000c4 	movi	r3,3
 8005068:	d8c00115 	stw	r3,4(sp)
 800506c:	d8800015 	stw	r2,0(sp)
 8005070:	01c00184 	movi	r7,6
 8005074:	01802004 	movi	r6,128
 8005078:	000b883a 	mov	r5,zero
 800507c:	0009883a 	mov	r4,zero
 8005080:	80046480 	call	8004648 <XferCtrlReq>
 8005084:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8005088:	e0bfbdc3 	ldbu	r2,-265(fp)
 800508c:	14003fcc 	andi	r16,r2,255
 8005090:	e0bfbe83 	ldbu	r2,-262(fp)
 8005094:	10803fcc 	andi	r2,r2,255
 8005098:	1004d07a 	srli	r2,r2,1
 800509c:	10bfffc4 	addi	r2,r2,-1
 80050a0:	10c03fcc 	andi	r3,r2,255
 80050a4:	e0bfbe84 	addi	r2,fp,-262
 80050a8:	10800084 	addi	r2,r2,2
 80050ac:	180b883a 	mov	r5,r3
 80050b0:	1009883a 	mov	r4,r2
 80050b4:	800545c0 	call	800545c <ConvUTF8ToStr>
 80050b8:	100d883a 	mov	r6,r2
 80050bc:	800b883a 	mov	r5,r16
 80050c0:	01020d74 	movhi	r4,2101
 80050c4:	2120f604 	addi	r4,r4,-31784
 80050c8:	800c1740 	call	800c174 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 80050cc:	00800804 	movi	r2,32
 80050d0:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80050d4:	00000a06 	br	8005100 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 80050d8:	e0bfb983 	ldbu	r2,-282(fp)
 80050dc:	d0a6ed45 	stb	r2,-25675(gp)
                        last_usb_task_state = usb_task_state;
 80050e0:	d0a00503 	ldbu	r2,-32748(gp)
 80050e4:	d0a6eb05 	stb	r2,-25684(gp)
                        usb_task_state = USB_STATE_ERROR;
 80050e8:	00bfffc4 	movi	r2,-1
 80050ec:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80050f0:	00000306 	br	8005100 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 80050f4:	0001883a 	nop
 80050f8:	00006b06 	br	80052a8 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80050fc:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8005100:	00006906 	br	80052a8 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8005104:	00800044 	movi	r2,1
 8005108:	e0bfb905 	stb	r2,-284(fp)
 800510c:	00002d06 	br	80051c4 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8005110:	e0ffb903 	ldbu	r3,-284(fp)
 8005114:	008211f4 	movhi	r2,2119
 8005118:	109fca04 	addi	r2,r2,32552
 800511c:	180690fa 	slli	r3,r3,3
 8005120:	10c5883a 	add	r2,r2,r3
 8005124:	10800017 	ldw	r2,0(r2)
 8005128:	1000231e 	bne	r2,zero,80051b8 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 800512c:	e13fb903 	ldbu	r4,-284(fp)
 8005130:	008211f4 	movhi	r2,2119
 8005134:	109fca04 	addi	r2,r2,32552
 8005138:	10c00017 	ldw	r3,0(r2)
 800513c:	008211f4 	movhi	r2,2119
 8005140:	109fca04 	addi	r2,r2,32552
 8005144:	200890fa 	slli	r4,r4,3
 8005148:	1105883a 	add	r2,r2,r4
 800514c:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8005150:	e0bfb903 	ldbu	r2,-284(fp)
 8005154:	d8000415 	stw	zero,16(sp)
 8005158:	d8000315 	stw	zero,12(sp)
 800515c:	d8000215 	stw	zero,8(sp)
 8005160:	d8000115 	stw	zero,4(sp)
 8005164:	d8800015 	stw	r2,0(sp)
 8005168:	01c00144 	movi	r7,5
 800516c:	000d883a 	mov	r6,zero
 8005170:	000b883a 	mov	r5,zero
 8005174:	0009883a 	mov	r4,zero
 8005178:	80046480 	call	8004648 <XferCtrlReq>
 800517c:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8005180:	e0bfb983 	ldbu	r2,-282(fp)
 8005184:	1000051e 	bne	r2,zero,800519c <USB_Task+0x508>
                        tmp_addr = i;
 8005188:	e0bfb903 	ldbu	r2,-284(fp)
 800518c:	d0a6ed05 	stb	r2,-25676(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8005190:	00800c04 	movi	r2,48
 8005194:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 8005198:	00000d06 	br	80051d0 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 800519c:	e0bfb983 	ldbu	r2,-282(fp)
 80051a0:	d0a6ed45 	stb	r2,-25675(gp)
                        last_usb_task_state = usb_task_state;
 80051a4:	d0a00503 	ldbu	r2,-32748(gp)
 80051a8:	d0a6eb05 	stb	r2,-25684(gp)
                        usb_task_state = USB_STATE_ERROR;
 80051ac:	00bfffc4 	movi	r2,-1
 80051b0:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80051b4:	00000606 	br	80051d0 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80051b8:	e0bfb903 	ldbu	r2,-284(fp)
 80051bc:	10800044 	addi	r2,r2,1
 80051c0:	e0bfb905 	stb	r2,-284(fp)
 80051c4:	e0bfb903 	ldbu	r2,-284(fp)
 80051c8:	10800230 	cmpltui	r2,r2,8
 80051cc:	103fd01e 	bne	r2,zero,8005110 <__alt_data_end+0xfc005110>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 80051d0:	d0a00503 	ldbu	r2,-32748(gp)
 80051d4:	10803fcc 	andi	r2,r2,255
 80051d8:	10800818 	cmpnei	r2,r2,32
 80051dc:	1000341e 	bne	r2,zero,80052b0 <USB_Task+0x61c>
                usb_error = 0xfe;
 80051e0:	00bfff84 	movi	r2,-2
 80051e4:	d0a6ed45 	stb	r2,-25675(gp)
                last_usb_task_state = usb_task_state;
 80051e8:	d0a00503 	ldbu	r2,-32748(gp)
 80051ec:	d0a6eb05 	stb	r2,-25684(gp)
                usb_task_state = USB_STATE_ERROR;
 80051f0:	00bfffc4 	movi	r2,-1
 80051f4:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 80051f8:	00002d06 	br	80052b0 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80051fc:	e03fb905 	stb	zero,-284(fp)
 8005200:	00001706 	br	8005260 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8005204:	e0bfb903 	ldbu	r2,-284(fp)
 8005208:	04020d74 	movhi	r16,2101
 800520c:	8421c304 	addi	r16,r16,-30964
 8005210:	01400304 	movi	r5,12
 8005214:	1009883a 	mov	r4,r2
 8005218:	8007f540 	call	8007f54 <__mulsi3>
 800521c:	8085883a 	add	r2,r16,r2
 8005220:	10800017 	ldw	r2,0(r2)
 8005224:	d0e6ed03 	ldbu	r3,-25676(gp)
 8005228:	18c03fcc 	andi	r3,r3,255
 800522c:	000b883a 	mov	r5,zero
 8005230:	1809883a 	mov	r4,r3
 8005234:	103ee83a 	callr	r2
 8005238:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 800523c:	e0bfb983 	ldbu	r2,-282(fp)
 8005240:	10800058 	cmpnei	r2,r2,1
 8005244:	1000031e 	bne	r2,zero,8005254 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8005248:	00801004 	movi	r2,64
 800524c:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8005250:	00000606 	br	800526c <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8005254:	e0bfb903 	ldbu	r2,-284(fp)
 8005258:	10800044 	addi	r2,r2,1
 800525c:	e0bfb905 	stb	r2,-284(fp)
 8005260:	e0bfb903 	ldbu	r2,-284(fp)
 8005264:	10800130 	cmpltui	r2,r2,4
 8005268:	103fe61e 	bne	r2,zero,8005204 <__alt_data_end+0xfc005204>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 800526c:	d0a00503 	ldbu	r2,-32748(gp)
 8005270:	10803fcc 	andi	r2,r2,255
 8005274:	10800c18 	cmpnei	r2,r2,48
 8005278:	10000f1e 	bne	r2,zero,80052b8 <USB_Task+0x624>
                usb_error = 0xfd;
 800527c:	00bfff44 	movi	r2,-3
 8005280:	d0a6ed45 	stb	r2,-25675(gp)
                last_usb_task_state = usb_task_state;
 8005284:	d0a00503 	ldbu	r2,-32748(gp)
 8005288:	d0a6eb05 	stb	r2,-25684(gp)
                usb_task_state = USB_STATE_ERROR;
 800528c:	00bfffc4 	movi	r2,-1
 8005290:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 8005294:	00000806 	br	80052b8 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 8005298:	0001883a 	nop
 800529c:	00000706 	br	80052bc <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 80052a0:	0001883a 	nop
 80052a4:	00000506 	br	80052bc <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80052a8:	0001883a 	nop
 80052ac:	00000306 	br	80052bc <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 80052b0:	0001883a 	nop
 80052b4:	00000106 	br	80052bc <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 80052b8:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 80052bc:	0001883a 	nop
 80052c0:	e6ffff04 	addi	sp,fp,-4
 80052c4:	dfc00217 	ldw	ra,8(sp)
 80052c8:	df000117 	ldw	fp,4(sp)
 80052cc:	dc000017 	ldw	r16,0(sp)
 80052d0:	dec00304 	addi	sp,sp,12
 80052d4:	f800283a 	ret

080052d8 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 80052d8:	defffd04 	addi	sp,sp,-12
 80052dc:	df000215 	stw	fp,8(sp)
 80052e0:	df000204 	addi	fp,sp,8
 80052e4:	2005883a 	mov	r2,r4
 80052e8:	e17fff15 	stw	r5,-4(fp)
 80052ec:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 80052f0:	0005883a 	mov	r2,zero
}
 80052f4:	e037883a 	mov	sp,fp
 80052f8:	df000017 	ldw	fp,0(sp)
 80052fc:	dec00104 	addi	sp,sp,4
 8005300:	f800283a 	ret

08005304 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8005304:	defffb04 	addi	sp,sp,-20
 8005308:	df000415 	stw	fp,16(sp)
 800530c:	df000404 	addi	fp,sp,16
 8005310:	2007883a 	mov	r3,r4
 8005314:	2805883a 	mov	r2,r5
 8005318:	e1bffe15 	stw	r6,-8(fp)
 800531c:	e1ffff15 	stw	r7,-4(fp)
 8005320:	e0fffc05 	stb	r3,-16(fp)
 8005324:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 8005328:	0005883a 	mov	r2,zero

}
 800532c:	e037883a 	mov	sp,fp
 8005330:	df000017 	ldw	fp,0(sp)
 8005334:	dec00104 	addi	sp,sp,4
 8005338:	f800283a 	ret

0800533c <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 800533c:	defffd04 	addi	sp,sp,-12
 8005340:	df000215 	stw	fp,8(sp)
 8005344:	df000204 	addi	fp,sp,8
 8005348:	2005883a 	mov	r2,r4
 800534c:	e17fff15 	stw	r5,-4(fp)
 8005350:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 8005354:	0005883a 	mov	r2,zero

}
 8005358:	e037883a 	mov	sp,fp
 800535c:	df000017 	ldw	fp,0(sp)
 8005360:	dec00104 	addi	sp,sp,4
 8005364:	f800283a 	ret

08005368 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8005368:	defffb04 	addi	sp,sp,-20
 800536c:	df000415 	stw	fp,16(sp)
 8005370:	df000404 	addi	fp,sp,16
 8005374:	2007883a 	mov	r3,r4
 8005378:	2805883a 	mov	r2,r5
 800537c:	e1bffe15 	stw	r6,-8(fp)
 8005380:	e1ffff15 	stw	r7,-4(fp)
 8005384:	e0fffc05 	stb	r3,-16(fp)
 8005388:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 800538c:	0005883a 	mov	r2,zero
}
 8005390:	e037883a 	mov	sp,fp
 8005394:	df000017 	ldw	fp,0(sp)
 8005398:	dec00104 	addi	sp,sp,4
 800539c:	f800283a 	ret

080053a0 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 80053a0:	defffd04 	addi	sp,sp,-12
 80053a4:	df000215 	stw	fp,8(sp)
 80053a8:	df000204 	addi	fp,sp,8
 80053ac:	2005883a 	mov	r2,r4
 80053b0:	e17fff15 	stw	r5,-4(fp)
 80053b4:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80053b8:	0005883a 	mov	r2,zero
}
 80053bc:	e037883a 	mov	sp,fp
 80053c0:	df000017 	ldw	fp,0(sp)
 80053c4:	dec00104 	addi	sp,sp,4
 80053c8:	f800283a 	ret

080053cc <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80053cc:	defffb04 	addi	sp,sp,-20
 80053d0:	df000415 	stw	fp,16(sp)
 80053d4:	df000404 	addi	fp,sp,16
 80053d8:	2007883a 	mov	r3,r4
 80053dc:	2805883a 	mov	r2,r5
 80053e0:	e1bffe15 	stw	r6,-8(fp)
 80053e4:	e1ffff15 	stw	r7,-4(fp)
 80053e8:	e0fffc05 	stb	r3,-16(fp)
 80053ec:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80053f0:	0005883a 	mov	r2,zero
}
 80053f4:	e037883a 	mov	sp,fp
 80053f8:	df000017 	ldw	fp,0(sp)
 80053fc:	dec00104 	addi	sp,sp,4
 8005400:	f800283a 	ret

08005404 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8005404:	deffff04 	addi	sp,sp,-4
 8005408:	df000015 	stw	fp,0(sp)
 800540c:	d839883a 	mov	fp,sp
    return( usb_task_state );
 8005410:	d0a00503 	ldbu	r2,-32748(gp)
}
 8005414:	e037883a 	mov	sp,fp
 8005418:	df000017 	ldw	fp,0(sp)
 800541c:	dec00104 	addi	sp,sp,4
 8005420:	f800283a 	ret

08005424 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8005424:	defffe04 	addi	sp,sp,-8
 8005428:	df000115 	stw	fp,4(sp)
 800542c:	df000104 	addi	fp,sp,4
 8005430:	2005883a 	mov	r2,r4
 8005434:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 8005438:	e0bfff03 	ldbu	r2,-4(fp)
 800543c:	100690fa 	slli	r3,r2,3
 8005440:	008211f4 	movhi	r2,2119
 8005444:	109fca04 	addi	r2,r2,32552
 8005448:	1885883a 	add	r2,r3,r2
}
 800544c:	e037883a 	mov	sp,fp
 8005450:	df000017 	ldw	fp,0(sp)
 8005454:	dec00104 	addi	sp,sp,4
 8005458:	f800283a 	ret

0800545c <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 800545c:	defffc04 	addi	sp,sp,-16
 8005460:	df000315 	stw	fp,12(sp)
 8005464:	df000304 	addi	fp,sp,12
 8005468:	e13ffe15 	stw	r4,-8(fp)
 800546c:	2805883a 	mov	r2,r5
 8005470:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8005474:	e03ffd05 	stb	zero,-12(fp)
 8005478:	00000d06 	br	80054b0 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 800547c:	e0bffd03 	ldbu	r2,-12(fp)
 8005480:	e0fffe17 	ldw	r3,-8(fp)
 8005484:	1887883a 	add	r3,r3,r2
 8005488:	e0bffd03 	ldbu	r2,-12(fp)
 800548c:	1085883a 	add	r2,r2,r2
 8005490:	1009883a 	mov	r4,r2
 8005494:	e0bffe17 	ldw	r2,-8(fp)
 8005498:	1105883a 	add	r2,r2,r4
 800549c:	10800003 	ldbu	r2,0(r2)
 80054a0:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 80054a4:	e0bffd03 	ldbu	r2,-12(fp)
 80054a8:	10800044 	addi	r2,r2,1
 80054ac:	e0bffd05 	stb	r2,-12(fp)
 80054b0:	e0fffd03 	ldbu	r3,-12(fp)
 80054b4:	e0bfff03 	ldbu	r2,-4(fp)
 80054b8:	18bff036 	bltu	r3,r2,800547c <__alt_data_end+0xfc00547c>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 80054bc:	e0bfff03 	ldbu	r2,-4(fp)
 80054c0:	e0fffe17 	ldw	r3,-8(fp)
 80054c4:	1885883a 	add	r2,r3,r2
 80054c8:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 80054cc:	e0bffe17 	ldw	r2,-8(fp)
}
 80054d0:	e037883a 	mov	sp,fp
 80054d4:	df000017 	ldw	fp,0(sp)
 80054d8:	dec00104 	addi	sp,sp,4
 80054dc:	f800283a 	ret

080054e0 <vga_init>:
} vga_regs_t;

static vga_memory_t vga_mem;
static volatile vga_regs_t*  vga_regs = (vga_regs_t*) VGA_MEM_LOCATION;

void vga_init() {
 80054e0:	deffff04 	addi	sp,sp,-4
 80054e4:	df000015 	stw	fp,0(sp)
 80054e8:	d839883a 	mov	fp,sp
    vga_regs->address       = &vga_mem;
 80054ec:	d0e00617 	ldw	r3,-32744(gp)
 80054f0:	00820d74 	movhi	r2,2101
 80054f4:	10af8004 	addi	r2,r2,-16896
 80054f8:	18800015 	stw	r2,0(r3)
    vga_regs->frame         = 0;
 80054fc:	d0a00617 	ldw	r2,-32744(gp)
 8005500:	10000115 	stw	zero,4(r2)
    vga_regs->blend_bias    = 0;
 8005504:	d0a00617 	ldw	r2,-32744(gp)
 8005508:	10000315 	stw	zero,12(r2)
}
 800550c:	0001883a 	nop
 8005510:	e037883a 	mov	sp,fp
 8005514:	df000017 	ldw	fp,0(sp)
 8005518:	dec00104 	addi	sp,sp,4
 800551c:	f800283a 	ret

08005520 <set_frame>:

void set_frame(uint32_t frame) {
 8005520:	defffe04 	addi	sp,sp,-8
 8005524:	df000115 	stw	fp,4(sp)
 8005528:	df000104 	addi	fp,sp,4
 800552c:	e13fff15 	stw	r4,-4(fp)
    if (frame < 2)
 8005530:	e0bfff17 	ldw	r2,-4(fp)
 8005534:	108000a8 	cmpgeui	r2,r2,2
 8005538:	1000031e 	bne	r2,zero,8005548 <set_frame+0x28>
        vga_regs->frame = frame;
 800553c:	d0a00617 	ldw	r2,-32744(gp)
 8005540:	e0ffff17 	ldw	r3,-4(fp)
 8005544:	10c00115 	stw	r3,4(r2)
}
 8005548:	0001883a 	nop
 800554c:	e037883a 	mov	sp,fp
 8005550:	df000017 	ldw	fp,0(sp)
 8005554:	dec00104 	addi	sp,sp,4
 8005558:	f800283a 	ret

0800555c <get_frame>:

uint16_t* get_frame(uint32_t frame) {
 800555c:	defffe04 	addi	sp,sp,-8
 8005560:	df000115 	stw	fp,4(sp)
 8005564:	df000104 	addi	fp,sp,4
 8005568:	e13fff15 	stw	r4,-4(fp)
    switch (frame) {
 800556c:	e0bfff17 	ldw	r2,-4(fp)
 8005570:	10000326 	beq	r2,zero,8005580 <get_frame+0x24>
 8005574:	10800060 	cmpeqi	r2,r2,1
 8005578:	1000041e 	bne	r2,zero,800558c <get_frame+0x30>
 800557c:	00000606 	br	8005598 <get_frame+0x3c>
        case 0:
            return vga_mem.frame0;
 8005580:	00820d74 	movhi	r2,2101
 8005584:	10af8004 	addi	r2,r2,-16896
 8005588:	00000406 	br	800559c <get_frame+0x40>
        case 1:
            return vga_mem.frame1;
 800558c:	00820fb4 	movhi	r2,2110
 8005590:	10878004 	addi	r2,r2,7680
 8005594:	00000106 	br	800559c <get_frame+0x40>
    }
    return 0;
 8005598:	0005883a 	mov	r2,zero
}
 800559c:	e037883a 	mov	sp,fp
 80055a0:	df000017 	ldw	fp,0(sp)
 80055a4:	dec00104 	addi	sp,sp,4
 80055a8:	f800283a 	ret

080055ac <is_vblank>:

int is_vblank() { return vga_regs->vblank; }
 80055ac:	deffff04 	addi	sp,sp,-4
 80055b0:	df000015 	stw	fp,0(sp)
 80055b4:	d839883a 	mov	fp,sp
 80055b8:	d0a00617 	ldw	r2,-32744(gp)
 80055bc:	10800417 	ldw	r2,16(r2)
 80055c0:	e037883a 	mov	sp,fp
 80055c4:	df000017 	ldw	fp,0(sp)
 80055c8:	dec00104 	addi	sp,sp,4
 80055cc:	f800283a 	ret

080055d0 <set_aura>:

void set_aura(uint16_t color, uint32_t bias) {
 80055d0:	defffd04 	addi	sp,sp,-12
 80055d4:	df000215 	stw	fp,8(sp)
 80055d8:	df000204 	addi	fp,sp,8
 80055dc:	2005883a 	mov	r2,r4
 80055e0:	e17fff15 	stw	r5,-4(fp)
 80055e4:	e0bffe0d 	sth	r2,-8(fp)
    vga_regs->blend_color   = (uint32_t) color;
 80055e8:	d0a00617 	ldw	r2,-32744(gp)
 80055ec:	e0fffe0b 	ldhu	r3,-8(fp)
 80055f0:	10c00215 	stw	r3,8(r2)
    if (bias > 64)
 80055f4:	e0bfff17 	ldw	r2,-4(fp)
 80055f8:	10801070 	cmpltui	r2,r2,65
 80055fc:	1000021e 	bne	r2,zero,8005608 <set_aura+0x38>
        bias = 64;
 8005600:	00801004 	movi	r2,64
 8005604:	e0bfff15 	stw	r2,-4(fp)
    vga_regs->blend_bias    = bias;
 8005608:	d0a00617 	ldw	r2,-32744(gp)
 800560c:	e0ffff17 	ldw	r3,-4(fp)
 8005610:	10c00315 	stw	r3,12(r2)
}
 8005614:	0001883a 	nop
 8005618:	e037883a 	mov	sp,fp
 800561c:	df000017 	ldw	fp,0(sp)
 8005620:	dec00104 	addi	sp,sp,4
 8005624:	f800283a 	ret

08005628 <setPixel>:

void setPixel(uint16_t* frame, uint32_t x, uint32_t y, uint16_t color) {
 8005628:	defffa04 	addi	sp,sp,-24
 800562c:	dfc00515 	stw	ra,20(sp)
 8005630:	df000415 	stw	fp,16(sp)
 8005634:	df000404 	addi	fp,sp,16
 8005638:	e13ffc15 	stw	r4,-16(fp)
 800563c:	e17ffd15 	stw	r5,-12(fp)
 8005640:	e1bffe15 	stw	r6,-8(fp)
 8005644:	3805883a 	mov	r2,r7
 8005648:	e0bfff0d 	sth	r2,-4(fp)
    if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT)
 800564c:	e0bffd17 	ldw	r2,-12(fp)
 8005650:	1080a028 	cmpgeui	r2,r2,640
 8005654:	10000f1e 	bne	r2,zero,8005694 <setPixel+0x6c>
 8005658:	e0bffe17 	ldw	r2,-8(fp)
 800565c:	10807828 	cmpgeui	r2,r2,480
 8005660:	10000c1e 	bne	r2,zero,8005694 <setPixel+0x6c>
        frame[y * SCREEN_WIDTH + x] = color;
 8005664:	0140a004 	movi	r5,640
 8005668:	e13ffe17 	ldw	r4,-8(fp)
 800566c:	8007f540 	call	8007f54 <__mulsi3>
 8005670:	1007883a 	mov	r3,r2
 8005674:	e0bffd17 	ldw	r2,-12(fp)
 8005678:	1885883a 	add	r2,r3,r2
 800567c:	1085883a 	add	r2,r2,r2
 8005680:	1007883a 	mov	r3,r2
 8005684:	e0bffc17 	ldw	r2,-16(fp)
 8005688:	10c5883a 	add	r2,r2,r3
 800568c:	e0ffff0b 	ldhu	r3,-4(fp)
 8005690:	10c0000d 	sth	r3,0(r2)
}
 8005694:	0001883a 	nop
 8005698:	e037883a 	mov	sp,fp
 800569c:	dfc00117 	ldw	ra,4(sp)
 80056a0:	df000017 	ldw	fp,0(sp)
 80056a4:	dec00204 	addi	sp,sp,8
 80056a8:	f800283a 	ret

080056ac <getPixel>:

uint16_t getPixel(uint16_t* frame, uint32_t x, uint32_t y) {
 80056ac:	defffb04 	addi	sp,sp,-20
 80056b0:	dfc00415 	stw	ra,16(sp)
 80056b4:	df000315 	stw	fp,12(sp)
 80056b8:	df000304 	addi	fp,sp,12
 80056bc:	e13ffd15 	stw	r4,-12(fp)
 80056c0:	e17ffe15 	stw	r5,-8(fp)
 80056c4:	e1bfff15 	stw	r6,-4(fp)
    if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT)
 80056c8:	e0bffe17 	ldw	r2,-8(fp)
 80056cc:	1080a028 	cmpgeui	r2,r2,640
 80056d0:	10000f1e 	bne	r2,zero,8005710 <getPixel+0x64>
 80056d4:	e0bfff17 	ldw	r2,-4(fp)
 80056d8:	10807828 	cmpgeui	r2,r2,480
 80056dc:	10000c1e 	bne	r2,zero,8005710 <getPixel+0x64>
        return frame[y * SCREEN_WIDTH + x];
 80056e0:	0140a004 	movi	r5,640
 80056e4:	e13fff17 	ldw	r4,-4(fp)
 80056e8:	8007f540 	call	8007f54 <__mulsi3>
 80056ec:	1007883a 	mov	r3,r2
 80056f0:	e0bffe17 	ldw	r2,-8(fp)
 80056f4:	1885883a 	add	r2,r3,r2
 80056f8:	1085883a 	add	r2,r2,r2
 80056fc:	1007883a 	mov	r3,r2
 8005700:	e0bffd17 	ldw	r2,-12(fp)
 8005704:	10c5883a 	add	r2,r2,r3
 8005708:	1080000b 	ldhu	r2,0(r2)
 800570c:	00000106 	br	8005714 <getPixel+0x68>
    return 0;
 8005710:	0005883a 	mov	r2,zero
}
 8005714:	e037883a 	mov	sp,fp
 8005718:	dfc00117 	ldw	ra,4(sp)
 800571c:	df000017 	ldw	fp,0(sp)
 8005720:	dec00204 	addi	sp,sp,8
 8005724:	f800283a 	ret

08005728 <pow>:
 8005728:	deffee04 	addi	sp,sp,-72
 800572c:	dc800b15 	stw	r18,44(sp)
 8005730:	04820d74 	movhi	r18,2101
 8005734:	ddc01015 	stw	r23,64(sp)
 8005738:	dd800f15 	stw	r22,60(sp)
 800573c:	dd400e15 	stw	r21,56(sp)
 8005740:	dd000d15 	stw	r20,52(sp)
 8005744:	dcc00c15 	stw	r19,48(sp)
 8005748:	dc400a15 	stw	r17,40(sp)
 800574c:	dc000915 	stw	r16,36(sp)
 8005750:	dfc01115 	stw	ra,68(sp)
 8005754:	94a88104 	addi	r18,r18,-24060
 8005758:	202f883a 	mov	r23,r4
 800575c:	282d883a 	mov	r22,r5
 8005760:	302b883a 	mov	r21,r6
 8005764:	3829883a 	mov	r20,r7
 8005768:	8005d000 	call	8005d00 <__ieee754_pow>
 800576c:	1023883a 	mov	r17,r2
 8005770:	90800017 	ldw	r2,0(r18)
 8005774:	04ffffc4 	movi	r19,-1
 8005778:	1821883a 	mov	r16,r3
 800577c:	14c00426 	beq	r2,r19,8005790 <pow+0x68>
 8005780:	a809883a 	mov	r4,r21
 8005784:	a00b883a 	mov	r5,r20
 8005788:	80071b00 	call	80071b0 <__fpclassifyd>
 800578c:	10000d1e 	bne	r2,zero,80057c4 <pow+0x9c>
 8005790:	8805883a 	mov	r2,r17
 8005794:	8007883a 	mov	r3,r16
 8005798:	dfc01117 	ldw	ra,68(sp)
 800579c:	ddc01017 	ldw	r23,64(sp)
 80057a0:	dd800f17 	ldw	r22,60(sp)
 80057a4:	dd400e17 	ldw	r21,56(sp)
 80057a8:	dd000d17 	ldw	r20,52(sp)
 80057ac:	dcc00c17 	ldw	r19,48(sp)
 80057b0:	dc800b17 	ldw	r18,44(sp)
 80057b4:	dc400a17 	ldw	r17,40(sp)
 80057b8:	dc000917 	ldw	r16,36(sp)
 80057bc:	dec01204 	addi	sp,sp,72
 80057c0:	f800283a 	ret
 80057c4:	b809883a 	mov	r4,r23
 80057c8:	b00b883a 	mov	r5,r22
 80057cc:	80071b00 	call	80071b0 <__fpclassifyd>
 80057d0:	000d883a 	mov	r6,zero
 80057d4:	000f883a 	mov	r7,zero
 80057d8:	1000201e 	bne	r2,zero,800585c <pow+0x134>
 80057dc:	a809883a 	mov	r4,r21
 80057e0:	a00b883a 	mov	r5,r20
 80057e4:	800a72c0 	call	800a72c <__eqdf2>
 80057e8:	103fe91e 	bne	r2,zero,8005790 <__alt_data_end+0xfc005790>
 80057ec:	01000044 	movi	r4,1
 80057f0:	d9000015 	stw	r4,0(sp)
 80057f4:	90800017 	ldw	r2,0(r18)
 80057f8:	01020d74 	movhi	r4,2101
 80057fc:	00cffc34 	movhi	r3,16368
 8005800:	2120fc04 	addi	r4,r4,-31760
 8005804:	d9000115 	stw	r4,4(sp)
 8005808:	d8000815 	stw	zero,32(sp)
 800580c:	ddc00215 	stw	r23,8(sp)
 8005810:	dd800315 	stw	r22,12(sp)
 8005814:	dd400415 	stw	r21,16(sp)
 8005818:	dd000515 	stw	r20,20(sp)
 800581c:	d8000615 	stw	zero,24(sp)
 8005820:	d8c00715 	stw	r3,28(sp)
 8005824:	14c02826 	beq	r2,r19,80058c8 <pow+0x1a0>
 8005828:	01000084 	movi	r4,2
 800582c:	11002626 	beq	r2,r4,80058c8 <pow+0x1a0>
 8005830:	d809883a 	mov	r4,sp
 8005834:	80072240 	call	8007224 <matherr>
 8005838:	10006b26 	beq	r2,zero,80059e8 <pow+0x2c0>
 800583c:	d8800817 	ldw	r2,32(sp)
 8005840:	10000326 	beq	r2,zero,8005850 <pow+0x128>
 8005844:	800c00c0 	call	800c00c <__errno>
 8005848:	d8c00817 	ldw	r3,32(sp)
 800584c:	10c00015 	stw	r3,0(r2)
 8005850:	d8800617 	ldw	r2,24(sp)
 8005854:	d8c00717 	ldw	r3,28(sp)
 8005858:	003fcf06 	br	8005798 <__alt_data_end+0xfc005798>
 800585c:	b809883a 	mov	r4,r23
 8005860:	b00b883a 	mov	r5,r22
 8005864:	800a72c0 	call	800a72c <__eqdf2>
 8005868:	1000191e 	bne	r2,zero,80058d0 <pow+0x1a8>
 800586c:	000d883a 	mov	r6,zero
 8005870:	000f883a 	mov	r7,zero
 8005874:	a809883a 	mov	r4,r21
 8005878:	a00b883a 	mov	r5,r20
 800587c:	800a72c0 	call	800a72c <__eqdf2>
 8005880:	10003a1e 	bne	r2,zero,800596c <pow+0x244>
 8005884:	00c00044 	movi	r3,1
 8005888:	d8c00015 	stw	r3,0(sp)
 800588c:	90800017 	ldw	r2,0(r18)
 8005890:	00c20d74 	movhi	r3,2101
 8005894:	18e0fc04 	addi	r3,r3,-31760
 8005898:	d8c00115 	stw	r3,4(sp)
 800589c:	d8000815 	stw	zero,32(sp)
 80058a0:	ddc00215 	stw	r23,8(sp)
 80058a4:	dd800315 	stw	r22,12(sp)
 80058a8:	dd400415 	stw	r21,16(sp)
 80058ac:	dd000515 	stw	r20,20(sp)
 80058b0:	d8000615 	stw	zero,24(sp)
 80058b4:	d8000715 	stw	zero,28(sp)
 80058b8:	103fdd26 	beq	r2,zero,8005830 <__alt_data_end+0xfc005830>
 80058bc:	0005883a 	mov	r2,zero
 80058c0:	00cffc34 	movhi	r3,16368
 80058c4:	003fb406 	br	8005798 <__alt_data_end+0xfc005798>
 80058c8:	0005883a 	mov	r2,zero
 80058cc:	003fb206 	br	8005798 <__alt_data_end+0xfc005798>
 80058d0:	8809883a 	mov	r4,r17
 80058d4:	800b883a 	mov	r5,r16
 80058d8:	80071940 	call	8007194 <finite>
 80058dc:	10004626 	beq	r2,zero,80059f8 <pow+0x2d0>
 80058e0:	000d883a 	mov	r6,zero
 80058e4:	000f883a 	mov	r7,zero
 80058e8:	8809883a 	mov	r4,r17
 80058ec:	800b883a 	mov	r5,r16
 80058f0:	800a72c0 	call	800a72c <__eqdf2>
 80058f4:	103fa61e 	bne	r2,zero,8005790 <__alt_data_end+0xfc005790>
 80058f8:	b809883a 	mov	r4,r23
 80058fc:	b00b883a 	mov	r5,r22
 8005900:	80071940 	call	8007194 <finite>
 8005904:	103fa226 	beq	r2,zero,8005790 <__alt_data_end+0xfc005790>
 8005908:	a809883a 	mov	r4,r21
 800590c:	a00b883a 	mov	r5,r20
 8005910:	80071940 	call	8007194 <finite>
 8005914:	103f9e26 	beq	r2,zero,8005790 <__alt_data_end+0xfc005790>
 8005918:	00800104 	movi	r2,4
 800591c:	d8800015 	stw	r2,0(sp)
 8005920:	90c00017 	ldw	r3,0(r18)
 8005924:	00820d74 	movhi	r2,2101
 8005928:	10a0fc04 	addi	r2,r2,-31760
 800592c:	d8800115 	stw	r2,4(sp)
 8005930:	d8000815 	stw	zero,32(sp)
 8005934:	ddc00215 	stw	r23,8(sp)
 8005938:	dd800315 	stw	r22,12(sp)
 800593c:	dd400415 	stw	r21,16(sp)
 8005940:	dd000515 	stw	r20,20(sp)
 8005944:	d8000615 	stw	zero,24(sp)
 8005948:	d8000715 	stw	zero,28(sp)
 800594c:	00800084 	movi	r2,2
 8005950:	18804726 	beq	r3,r2,8005a70 <pow+0x348>
 8005954:	d809883a 	mov	r4,sp
 8005958:	80072240 	call	8007224 <matherr>
 800595c:	10004426 	beq	r2,zero,8005a70 <pow+0x348>
 8005960:	d8800817 	ldw	r2,32(sp)
 8005964:	103fba26 	beq	r2,zero,8005850 <__alt_data_end+0xfc005850>
 8005968:	003fb606 	br	8005844 <__alt_data_end+0xfc005844>
 800596c:	a809883a 	mov	r4,r21
 8005970:	a00b883a 	mov	r5,r20
 8005974:	80071940 	call	8007194 <finite>
 8005978:	103f8526 	beq	r2,zero,8005790 <__alt_data_end+0xfc005790>
 800597c:	000d883a 	mov	r6,zero
 8005980:	000f883a 	mov	r7,zero
 8005984:	a809883a 	mov	r4,r21
 8005988:	a00b883a 	mov	r5,r20
 800598c:	800a8900 	call	800a890 <__ledf2>
 8005990:	103f7f0e 	bge	r2,zero,8005790 <__alt_data_end+0xfc005790>
 8005994:	00c00044 	movi	r3,1
 8005998:	d8c00015 	stw	r3,0(sp)
 800599c:	90800017 	ldw	r2,0(r18)
 80059a0:	00c20d74 	movhi	r3,2101
 80059a4:	18e0fc04 	addi	r3,r3,-31760
 80059a8:	d8c00115 	stw	r3,4(sp)
 80059ac:	d8000815 	stw	zero,32(sp)
 80059b0:	ddc00215 	stw	r23,8(sp)
 80059b4:	dd800315 	stw	r22,12(sp)
 80059b8:	dd400415 	stw	r21,16(sp)
 80059bc:	dd000515 	stw	r20,20(sp)
 80059c0:	d8000615 	stw	zero,24(sp)
 80059c4:	10002526 	beq	r2,zero,8005a5c <pow+0x334>
 80059c8:	00fffc34 	movhi	r3,65520
 80059cc:	d8c00715 	stw	r3,28(sp)
 80059d0:	00c00084 	movi	r3,2
 80059d4:	10c0221e 	bne	r2,r3,8005a60 <pow+0x338>
 80059d8:	800c00c0 	call	800c00c <__errno>
 80059dc:	00c00844 	movi	r3,33
 80059e0:	10c00015 	stw	r3,0(r2)
 80059e4:	003fde06 	br	8005960 <__alt_data_end+0xfc005960>
 80059e8:	800c00c0 	call	800c00c <__errno>
 80059ec:	00c00844 	movi	r3,33
 80059f0:	10c00015 	stw	r3,0(r2)
 80059f4:	003f9106 	br	800583c <__alt_data_end+0xfc00583c>
 80059f8:	b809883a 	mov	r4,r23
 80059fc:	b00b883a 	mov	r5,r22
 8005a00:	80071940 	call	8007194 <finite>
 8005a04:	103fb626 	beq	r2,zero,80058e0 <__alt_data_end+0xfc0058e0>
 8005a08:	a809883a 	mov	r4,r21
 8005a0c:	a00b883a 	mov	r5,r20
 8005a10:	80071940 	call	8007194 <finite>
 8005a14:	103fb226 	beq	r2,zero,80058e0 <__alt_data_end+0xfc0058e0>
 8005a18:	8809883a 	mov	r4,r17
 8005a1c:	800b883a 	mov	r5,r16
 8005a20:	80071b00 	call	80071b0 <__fpclassifyd>
 8005a24:	1000161e 	bne	r2,zero,8005a80 <pow+0x358>
 8005a28:	00800044 	movi	r2,1
 8005a2c:	d8800015 	stw	r2,0(sp)
 8005a30:	94000017 	ldw	r16,0(r18)
 8005a34:	00820d74 	movhi	r2,2101
 8005a38:	10a0fc04 	addi	r2,r2,-31760
 8005a3c:	d8800115 	stw	r2,4(sp)
 8005a40:	d8000815 	stw	zero,32(sp)
 8005a44:	ddc00215 	stw	r23,8(sp)
 8005a48:	dd800315 	stw	r22,12(sp)
 8005a4c:	dd400415 	stw	r21,16(sp)
 8005a50:	dd000515 	stw	r20,20(sp)
 8005a54:	8000281e 	bne	r16,zero,8005af8 <pow+0x3d0>
 8005a58:	d8000615 	stw	zero,24(sp)
 8005a5c:	d8000715 	stw	zero,28(sp)
 8005a60:	d809883a 	mov	r4,sp
 8005a64:	80072240 	call	8007224 <matherr>
 8005a68:	103fbd1e 	bne	r2,zero,8005960 <__alt_data_end+0xfc005960>
 8005a6c:	003fda06 	br	80059d8 <__alt_data_end+0xfc0059d8>
 8005a70:	800c00c0 	call	800c00c <__errno>
 8005a74:	00c00884 	movi	r3,34
 8005a78:	10c00015 	stw	r3,0(r2)
 8005a7c:	003fb806 	br	8005960 <__alt_data_end+0xfc005960>
 8005a80:	00c000c4 	movi	r3,3
 8005a84:	d8c00015 	stw	r3,0(sp)
 8005a88:	90800017 	ldw	r2,0(r18)
 8005a8c:	00c20d74 	movhi	r3,2101
 8005a90:	18e0fc04 	addi	r3,r3,-31760
 8005a94:	d8c00115 	stw	r3,4(sp)
 8005a98:	d8000815 	stw	zero,32(sp)
 8005a9c:	ddc00215 	stw	r23,8(sp)
 8005aa0:	dd800315 	stw	r22,12(sp)
 8005aa4:	dd400415 	stw	r21,16(sp)
 8005aa8:	dd000515 	stw	r20,20(sp)
 8005aac:	000d883a 	mov	r6,zero
 8005ab0:	000f883a 	mov	r7,zero
 8005ab4:	b809883a 	mov	r4,r23
 8005ab8:	b00b883a 	mov	r5,r22
 8005abc:	1000181e 	bne	r2,zero,8005b20 <pow+0x3f8>
 8005ac0:	00b80034 	movhi	r2,57344
 8005ac4:	d8800615 	stw	r2,24(sp)
 8005ac8:	0091fc34 	movhi	r2,18416
 8005acc:	10bfffc4 	addi	r2,r2,-1
 8005ad0:	d8800715 	stw	r2,28(sp)
 8005ad4:	800a8900 	call	800a890 <__ledf2>
 8005ad8:	10001a16 	blt	r2,zero,8005b44 <pow+0x41c>
 8005adc:	d809883a 	mov	r4,sp
 8005ae0:	80072240 	call	8007224 <matherr>
 8005ae4:	103f551e 	bne	r2,zero,800583c <__alt_data_end+0xfc00583c>
 8005ae8:	800c00c0 	call	800c00c <__errno>
 8005aec:	00c00884 	movi	r3,34
 8005af0:	10c00015 	stw	r3,0(r2)
 8005af4:	003f5106 	br	800583c <__alt_data_end+0xfc00583c>
 8005af8:	000d883a 	mov	r6,zero
 8005afc:	000f883a 	mov	r7,zero
 8005b00:	0009883a 	mov	r4,zero
 8005b04:	000b883a 	mov	r5,zero
 8005b08:	8009d5c0 	call	8009d5c <__divdf3>
 8005b0c:	d8800615 	stw	r2,24(sp)
 8005b10:	d8c00715 	stw	r3,28(sp)
 8005b14:	00800084 	movi	r2,2
 8005b18:	80bfaf26 	beq	r16,r2,80059d8 <__alt_data_end+0xfc0059d8>
 8005b1c:	003fd006 	br	8005a60 <__alt_data_end+0xfc005a60>
 8005b20:	009ffc34 	movhi	r2,32752
 8005b24:	d8000615 	stw	zero,24(sp)
 8005b28:	d8800715 	stw	r2,28(sp)
 8005b2c:	800a8900 	call	800a890 <__ledf2>
 8005b30:	10001a16 	blt	r2,zero,8005b9c <pow+0x474>
 8005b34:	90c00017 	ldw	r3,0(r18)
 8005b38:	00800084 	movi	r2,2
 8005b3c:	18bfe71e 	bne	r3,r2,8005adc <__alt_data_end+0xfc005adc>
 8005b40:	003fe906 	br	8005ae8 <__alt_data_end+0xfc005ae8>
 8005b44:	000d883a 	mov	r6,zero
 8005b48:	01cff834 	movhi	r7,16352
 8005b4c:	a809883a 	mov	r4,r21
 8005b50:	a00b883a 	mov	r5,r20
 8005b54:	800a9840 	call	800a984 <__muldf3>
 8005b58:	1009883a 	mov	r4,r2
 8005b5c:	180b883a 	mov	r5,r3
 8005b60:	1023883a 	mov	r17,r2
 8005b64:	1821883a 	mov	r16,r3
 8005b68:	80072380 	call	8007238 <rint>
 8005b6c:	100d883a 	mov	r6,r2
 8005b70:	180f883a 	mov	r7,r3
 8005b74:	8809883a 	mov	r4,r17
 8005b78:	800b883a 	mov	r5,r16
 8005b7c:	800a72c0 	call	800a72c <__eqdf2>
 8005b80:	103fec26 	beq	r2,zero,8005b34 <__alt_data_end+0xfc005b34>
 8005b84:	00b80034 	movhi	r2,57344
 8005b88:	d8800615 	stw	r2,24(sp)
 8005b8c:	00b1fc34 	movhi	r2,51184
 8005b90:	10bfffc4 	addi	r2,r2,-1
 8005b94:	d8800715 	stw	r2,28(sp)
 8005b98:	003fe606 	br	8005b34 <__alt_data_end+0xfc005b34>
 8005b9c:	000d883a 	mov	r6,zero
 8005ba0:	01cff834 	movhi	r7,16352
 8005ba4:	a809883a 	mov	r4,r21
 8005ba8:	a00b883a 	mov	r5,r20
 8005bac:	800a9840 	call	800a984 <__muldf3>
 8005bb0:	1009883a 	mov	r4,r2
 8005bb4:	180b883a 	mov	r5,r3
 8005bb8:	1023883a 	mov	r17,r2
 8005bbc:	1821883a 	mov	r16,r3
 8005bc0:	80072380 	call	8007238 <rint>
 8005bc4:	100d883a 	mov	r6,r2
 8005bc8:	180f883a 	mov	r7,r3
 8005bcc:	8809883a 	mov	r4,r17
 8005bd0:	800b883a 	mov	r5,r16
 8005bd4:	800a72c0 	call	800a72c <__eqdf2>
 8005bd8:	103fd626 	beq	r2,zero,8005b34 <__alt_data_end+0xfc005b34>
 8005bdc:	00bffc34 	movhi	r2,65520
 8005be0:	d8000615 	stw	zero,24(sp)
 8005be4:	d8800715 	stw	r2,28(sp)
 8005be8:	003fd206 	br	8005b34 <__alt_data_end+0xfc005b34>

08005bec <sqrtf>:
 8005bec:	defff304 	addi	sp,sp,-52
 8005bf0:	dc400a15 	stw	r17,40(sp)
 8005bf4:	04420d74 	movhi	r17,2101
 8005bf8:	dc800b15 	stw	r18,44(sp)
 8005bfc:	dc000915 	stw	r16,36(sp)
 8005c00:	dfc00c15 	stw	ra,48(sp)
 8005c04:	8c688104 	addi	r17,r17,-24060
 8005c08:	2025883a 	mov	r18,r4
 8005c0c:	800702c0 	call	800702c <__ieee754_sqrtf>
 8005c10:	88c00017 	ldw	r3,0(r17)
 8005c14:	1021883a 	mov	r16,r2
 8005c18:	00bfffc4 	movi	r2,-1
 8005c1c:	18800726 	beq	r3,r2,8005c3c <sqrtf+0x50>
 8005c20:	9009883a 	mov	r4,r18
 8005c24:	80075c00 	call	80075c0 <__fpclassifyf>
 8005c28:	10000426 	beq	r2,zero,8005c3c <sqrtf+0x50>
 8005c2c:	000b883a 	mov	r5,zero
 8005c30:	9009883a 	mov	r4,r18
 8005c34:	80089400 	call	8008940 <__lesf2>
 8005c38:	10000716 	blt	r2,zero,8005c58 <sqrtf+0x6c>
 8005c3c:	8005883a 	mov	r2,r16
 8005c40:	dfc00c17 	ldw	ra,48(sp)
 8005c44:	dc800b17 	ldw	r18,44(sp)
 8005c48:	dc400a17 	ldw	r17,40(sp)
 8005c4c:	dc000917 	ldw	r16,36(sp)
 8005c50:	dec00d04 	addi	sp,sp,52
 8005c54:	f800283a 	ret
 8005c58:	00800044 	movi	r2,1
 8005c5c:	d8800015 	stw	r2,0(sp)
 8005c60:	00820d74 	movhi	r2,2101
 8005c64:	10a0fd04 	addi	r2,r2,-31756
 8005c68:	9009883a 	mov	r4,r18
 8005c6c:	d8800115 	stw	r2,4(sp)
 8005c70:	d8000815 	stw	zero,32(sp)
 8005c74:	800bcf00 	call	800bcf0 <__extendsfdf2>
 8005c78:	8c000017 	ldw	r16,0(r17)
 8005c7c:	d8800415 	stw	r2,16(sp)
 8005c80:	d8c00515 	stw	r3,20(sp)
 8005c84:	d8800215 	stw	r2,8(sp)
 8005c88:	d8c00315 	stw	r3,12(sp)
 8005c8c:	80000b1e 	bne	r16,zero,8005cbc <sqrtf+0xd0>
 8005c90:	d8000615 	stw	zero,24(sp)
 8005c94:	d8000715 	stw	zero,28(sp)
 8005c98:	d809883a 	mov	r4,sp
 8005c9c:	80072240 	call	8007224 <matherr>
 8005ca0:	10000f26 	beq	r2,zero,8005ce0 <sqrtf+0xf4>
 8005ca4:	d8800817 	ldw	r2,32(sp)
 8005ca8:	1000111e 	bne	r2,zero,8005cf0 <sqrtf+0x104>
 8005cac:	d9000617 	ldw	r4,24(sp)
 8005cb0:	d9400717 	ldw	r5,28(sp)
 8005cb4:	800be000 	call	800be00 <__truncdfsf2>
 8005cb8:	003fe106 	br	8005c40 <__alt_data_end+0xfc005c40>
 8005cbc:	000d883a 	mov	r6,zero
 8005cc0:	000f883a 	mov	r7,zero
 8005cc4:	0009883a 	mov	r4,zero
 8005cc8:	000b883a 	mov	r5,zero
 8005ccc:	8009d5c0 	call	8009d5c <__divdf3>
 8005cd0:	d8800615 	stw	r2,24(sp)
 8005cd4:	d8c00715 	stw	r3,28(sp)
 8005cd8:	00800084 	movi	r2,2
 8005cdc:	80bfee1e 	bne	r16,r2,8005c98 <__alt_data_end+0xfc005c98>
 8005ce0:	800c00c0 	call	800c00c <__errno>
 8005ce4:	00c00844 	movi	r3,33
 8005ce8:	10c00015 	stw	r3,0(r2)
 8005cec:	003fed06 	br	8005ca4 <__alt_data_end+0xfc005ca4>
 8005cf0:	800c00c0 	call	800c00c <__errno>
 8005cf4:	d8c00817 	ldw	r3,32(sp)
 8005cf8:	10c00015 	stw	r3,0(r2)
 8005cfc:	003feb06 	br	8005cac <__alt_data_end+0xfc005cac>

08005d00 <__ieee754_pow>:
 8005d00:	00a00034 	movhi	r2,32768
 8005d04:	deffea04 	addi	sp,sp,-88
 8005d08:	10bfffc4 	addi	r2,r2,-1
 8005d0c:	dc800e15 	stw	r18,56(sp)
 8005d10:	38a4703a 	and	r18,r7,r2
 8005d14:	dfc01515 	stw	ra,84(sp)
 8005d18:	df001415 	stw	fp,80(sp)
 8005d1c:	ddc01315 	stw	r23,76(sp)
 8005d20:	dd801215 	stw	r22,72(sp)
 8005d24:	dd401115 	stw	r21,68(sp)
 8005d28:	dd001015 	stw	r20,64(sp)
 8005d2c:	dcc00f15 	stw	r19,60(sp)
 8005d30:	dc400d15 	stw	r17,52(sp)
 8005d34:	dc000c15 	stw	r16,48(sp)
 8005d38:	9186b03a 	or	r3,r18,r6
 8005d3c:	18002a26 	beq	r3,zero,8005de8 <__ieee754_pow+0xe8>
 8005d40:	28a2703a 	and	r17,r5,r2
 8005d44:	009ffc34 	movhi	r2,32752
 8005d48:	14402316 	blt	r2,r17,8005dd8 <__ieee754_pow+0xd8>
 8005d4c:	88802126 	beq	r17,r2,8005dd4 <__ieee754_pow+0xd4>
 8005d50:	14802116 	blt	r2,r18,8005dd8 <__ieee754_pow+0xd8>
 8005d54:	009ffc34 	movhi	r2,32752
 8005d58:	90807326 	beq	r18,r2,8005f28 <__ieee754_pow+0x228>
 8005d5c:	2827883a 	mov	r19,r5
 8005d60:	2021883a 	mov	r16,r4
 8005d64:	302d883a 	mov	r22,r6
 8005d68:	3839883a 	mov	fp,r7
 8005d6c:	28007016 	blt	r5,zero,8005f30 <__ieee754_pow+0x230>
 8005d70:	002b883a 	mov	r21,zero
 8005d74:	b0003a1e 	bne	r22,zero,8005e60 <__ieee754_pow+0x160>
 8005d78:	009ffc34 	movhi	r2,32752
 8005d7c:	90807f26 	beq	r18,r2,8005f7c <__ieee754_pow+0x27c>
 8005d80:	008ffc34 	movhi	r2,16368
 8005d84:	90805426 	beq	r18,r2,8005ed8 <__ieee754_pow+0x1d8>
 8005d88:	00900034 	movhi	r2,16384
 8005d8c:	e0833b26 	beq	fp,r2,8006a7c <__ieee754_pow+0xd7c>
 8005d90:	008ff834 	movhi	r2,16352
 8005d94:	e080321e 	bne	fp,r2,8005e60 <__ieee754_pow+0x160>
 8005d98:	98003116 	blt	r19,zero,8005e60 <__ieee754_pow+0x160>
 8005d9c:	8009883a 	mov	r4,r16
 8005da0:	980b883a 	mov	r5,r19
 8005da4:	dfc01517 	ldw	ra,84(sp)
 8005da8:	df001417 	ldw	fp,80(sp)
 8005dac:	ddc01317 	ldw	r23,76(sp)
 8005db0:	dd801217 	ldw	r22,72(sp)
 8005db4:	dd401117 	ldw	r21,68(sp)
 8005db8:	dd001017 	ldw	r20,64(sp)
 8005dbc:	dcc00f17 	ldw	r19,60(sp)
 8005dc0:	dc800e17 	ldw	r18,56(sp)
 8005dc4:	dc400d17 	ldw	r17,52(sp)
 8005dc8:	dc000c17 	ldw	r16,48(sp)
 8005dcc:	dec01604 	addi	sp,sp,88
 8005dd0:	8006da41 	jmpi	8006da4 <__ieee754_sqrt>
 8005dd4:	20001226 	beq	r4,zero,8005e20 <__ieee754_pow+0x120>
 8005dd8:	00b00434 	movhi	r2,49168
 8005ddc:	8885883a 	add	r2,r17,r2
 8005de0:	1108b03a 	or	r4,r2,r4
 8005de4:	20000f1e 	bne	r4,zero,8005e24 <__ieee754_pow+0x124>
 8005de8:	0005883a 	mov	r2,zero
 8005dec:	00cffc34 	movhi	r3,16368
 8005df0:	dfc01517 	ldw	ra,84(sp)
 8005df4:	df001417 	ldw	fp,80(sp)
 8005df8:	ddc01317 	ldw	r23,76(sp)
 8005dfc:	dd801217 	ldw	r22,72(sp)
 8005e00:	dd401117 	ldw	r21,68(sp)
 8005e04:	dd001017 	ldw	r20,64(sp)
 8005e08:	dcc00f17 	ldw	r19,60(sp)
 8005e0c:	dc800e17 	ldw	r18,56(sp)
 8005e10:	dc400d17 	ldw	r17,52(sp)
 8005e14:	dc000c17 	ldw	r16,48(sp)
 8005e18:	dec01604 	addi	sp,sp,88
 8005e1c:	f800283a 	ret
 8005e20:	8cbfcc0e 	bge	r17,r18,8005d54 <__alt_data_end+0xfc005d54>
 8005e24:	01020d74 	movhi	r4,2101
 8005e28:	21214d04 	addi	r4,r4,-31436
 8005e2c:	dfc01517 	ldw	ra,84(sp)
 8005e30:	df001417 	ldw	fp,80(sp)
 8005e34:	ddc01317 	ldw	r23,76(sp)
 8005e38:	dd801217 	ldw	r22,72(sp)
 8005e3c:	dd401117 	ldw	r21,68(sp)
 8005e40:	dd001017 	ldw	r20,64(sp)
 8005e44:	dcc00f17 	ldw	r19,60(sp)
 8005e48:	dc800e17 	ldw	r18,56(sp)
 8005e4c:	dc400d17 	ldw	r17,52(sp)
 8005e50:	dc000c17 	ldw	r16,48(sp)
 8005e54:	dec01604 	addi	sp,sp,88
 8005e58:	800722c1 	jmpi	800722c <nan>
 8005e5c:	002b883a 	mov	r21,zero
 8005e60:	8009883a 	mov	r4,r16
 8005e64:	980b883a 	mov	r5,r19
 8005e68:	80071800 	call	8007180 <fabs>
 8005e6c:	102f883a 	mov	r23,r2
 8005e70:	80000f26 	beq	r16,zero,8005eb0 <__ieee754_pow+0x1b0>
 8005e74:	9816d7fa 	srli	r11,r19,31
 8005e78:	5affffc4 	addi	r11,r11,-1
 8005e7c:	aac4b03a 	or	r2,r21,r11
 8005e80:	10004b26 	beq	r2,zero,8005fb0 <__ieee754_pow+0x2b0>
 8005e84:	00907834 	movhi	r2,16864
 8005e88:	1480540e 	bge	r2,r18,8005fdc <__ieee754_pow+0x2dc>
 8005e8c:	0090fc34 	movhi	r2,17392
 8005e90:	14832d0e 	bge	r2,r18,8006b48 <__ieee754_pow+0xe48>
 8005e94:	008ffc34 	movhi	r2,16368
 8005e98:	10bfffc4 	addi	r2,r2,-1
 8005e9c:	14401916 	blt	r2,r17,8005f04 <__ieee754_pow+0x204>
 8005ea0:	e0001916 	blt	fp,zero,8005f08 <__ieee754_pow+0x208>
 8005ea4:	0005883a 	mov	r2,zero
 8005ea8:	0007883a 	mov	r3,zero
 8005eac:	003fd006 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005eb0:	88000526 	beq	r17,zero,8005ec8 <__ieee754_pow+0x1c8>
 8005eb4:	00900034 	movhi	r2,16384
 8005eb8:	10bfffc4 	addi	r2,r2,-1
 8005ebc:	9884703a 	and	r2,r19,r2
 8005ec0:	010ffc34 	movhi	r4,16368
 8005ec4:	113feb1e 	bne	r2,r4,8005e74 <__alt_data_end+0xfc005e74>
 8005ec8:	e0000716 	blt	fp,zero,8005ee8 <__ieee754_pow+0x1e8>
 8005ecc:	9802e216 	blt	r19,zero,8006a58 <__ieee754_pow+0xd58>
 8005ed0:	b805883a 	mov	r2,r23
 8005ed4:	003fc606 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005ed8:	e0037516 	blt	fp,zero,8006cb0 <__ieee754_pow+0xfb0>
 8005edc:	8005883a 	mov	r2,r16
 8005ee0:	9807883a 	mov	r3,r19
 8005ee4:	003fc206 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005ee8:	b80d883a 	mov	r6,r23
 8005eec:	180f883a 	mov	r7,r3
 8005ef0:	0009883a 	mov	r4,zero
 8005ef4:	014ffc34 	movhi	r5,16368
 8005ef8:	8009d5c0 	call	8009d5c <__divdf3>
 8005efc:	102f883a 	mov	r23,r2
 8005f00:	003ff206 	br	8005ecc <__alt_data_end+0xfc005ecc>
 8005f04:	073fe70e 	bge	zero,fp,8005ea4 <__alt_data_end+0xfc005ea4>
 8005f08:	01a20034 	movhi	r6,34816
 8005f0c:	01df8e34 	movhi	r7,32312
 8005f10:	319d6704 	addi	r6,r6,30108
 8005f14:	39f90f04 	addi	r7,r7,-7108
 8005f18:	3009883a 	mov	r4,r6
 8005f1c:	380b883a 	mov	r5,r7
 8005f20:	800a9840 	call	800a984 <__muldf3>
 8005f24:	003fb206 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005f28:	303f8c26 	beq	r6,zero,8005d5c <__alt_data_end+0xfc005d5c>
 8005f2c:	003faa06 	br	8005dd8 <__alt_data_end+0xfc005dd8>
 8005f30:	0090d034 	movhi	r2,17216
 8005f34:	10bfffc4 	addi	r2,r2,-1
 8005f38:	14801b16 	blt	r2,r18,8005fa8 <__ieee754_pow+0x2a8>
 8005f3c:	008ffc34 	movhi	r2,16368
 8005f40:	10bfffc4 	addi	r2,r2,-1
 8005f44:	14bf8a0e 	bge	r2,r18,8005d70 <__alt_data_end+0xfc005d70>
 8005f48:	9005d53a 	srai	r2,r18,20
 8005f4c:	00c00504 	movi	r3,20
 8005f50:	10bf0044 	addi	r2,r2,-1023
 8005f54:	18836b0e 	bge	r3,r2,8006d04 <__ieee754_pow+0x1004>
 8005f58:	00c00d04 	movi	r3,52
 8005f5c:	1885c83a 	sub	r2,r3,r2
 8005f60:	3086d83a 	srl	r3,r6,r2
 8005f64:	1884983a 	sll	r2,r3,r2
 8005f68:	30bf811e 	bne	r6,r2,8005d70 <__alt_data_end+0xfc005d70>
 8005f6c:	18c0004c 	andi	r3,r3,1
 8005f70:	02800084 	movi	r10,2
 8005f74:	50ebc83a 	sub	r21,r10,r3
 8005f78:	003f7e06 	br	8005d74 <__alt_data_end+0xfc005d74>
 8005f7c:	01300434 	movhi	r4,49168
 8005f80:	8909883a 	add	r4,r17,r4
 8005f84:	2408b03a 	or	r4,r4,r16
 8005f88:	203f9726 	beq	r4,zero,8005de8 <__alt_data_end+0xfc005de8>
 8005f8c:	008ffc34 	movhi	r2,16368
 8005f90:	10bfffc4 	addi	r2,r2,-1
 8005f94:	1442e60e 	bge	r2,r17,8006b30 <__ieee754_pow+0xe30>
 8005f98:	e03fc216 	blt	fp,zero,8005ea4 <__alt_data_end+0xfc005ea4>
 8005f9c:	0005883a 	mov	r2,zero
 8005fa0:	e007883a 	mov	r3,fp
 8005fa4:	003f9206 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005fa8:	05400084 	movi	r21,2
 8005fac:	003f7106 	br	8005d74 <__alt_data_end+0xfc005d74>
 8005fb0:	800d883a 	mov	r6,r16
 8005fb4:	980f883a 	mov	r7,r19
 8005fb8:	3009883a 	mov	r4,r6
 8005fbc:	380b883a 	mov	r5,r7
 8005fc0:	800b1f00 	call	800b1f0 <__subdf3>
 8005fc4:	100d883a 	mov	r6,r2
 8005fc8:	180f883a 	mov	r7,r3
 8005fcc:	1009883a 	mov	r4,r2
 8005fd0:	180b883a 	mov	r5,r3
 8005fd4:	8009d5c0 	call	8009d5c <__divdf3>
 8005fd8:	003f8506 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005fdc:	00800434 	movhi	r2,16
 8005fe0:	10bfffc4 	addi	r2,r2,-1
 8005fe4:	1442d616 	blt	r2,r17,8006b40 <__ieee754_pow+0xe40>
 8005fe8:	b809883a 	mov	r4,r23
 8005fec:	000d883a 	mov	r6,zero
 8005ff0:	01d0d034 	movhi	r7,17216
 8005ff4:	180b883a 	mov	r5,r3
 8005ff8:	dac00b15 	stw	r11,44(sp)
 8005ffc:	800a9840 	call	800a984 <__muldf3>
 8006000:	dac00b17 	ldw	r11,44(sp)
 8006004:	102f883a 	mov	r23,r2
 8006008:	1823883a 	mov	r17,r3
 800600c:	033ff2c4 	movi	r12,-53
 8006010:	8807d53a 	srai	r3,r17,20
 8006014:	00800434 	movhi	r2,16
 8006018:	10bfffc4 	addi	r2,r2,-1
 800601c:	18ff0044 	addi	r3,r3,-1023
 8006020:	1b19883a 	add	r12,r3,r12
 8006024:	00c00134 	movhi	r3,4
 8006028:	8884703a 	and	r2,r17,r2
 800602c:	18e62384 	addi	r3,r3,-26482
 8006030:	150ffc34 	orhi	r20,r2,16368
 8006034:	1880060e 	bge	r3,r2,8006050 <__ieee754_pow+0x350>
 8006038:	00c00334 	movhi	r3,12
 800603c:	18ed9e44 	addi	r3,r3,-18823
 8006040:	18833f0e 	bge	r3,r2,8006d40 <__ieee754_pow+0x1040>
 8006044:	00bffc34 	movhi	r2,65520
 8006048:	63000044 	addi	r12,r12,1
 800604c:	a0a9883a 	add	r20,r20,r2
 8006050:	0027883a 	mov	r19,zero
 8006054:	d8000215 	stw	zero,8(sp)
 8006058:	0013883a 	mov	r9,zero
 800605c:	0011883a 	mov	r8,zero
 8006060:	0015883a 	mov	r10,zero
 8006064:	048ffc34 	movhi	r18,16368
 8006068:	900f883a 	mov	r7,r18
 800606c:	b809883a 	mov	r4,r23
 8006070:	a00b883a 	mov	r5,r20
 8006074:	000d883a 	mov	r6,zero
 8006078:	da000a15 	stw	r8,40(sp)
 800607c:	da400815 	stw	r9,32(sp)
 8006080:	dac00b15 	stw	r11,44(sp)
 8006084:	db000915 	stw	r12,36(sp)
 8006088:	da800515 	stw	r10,20(sp)
 800608c:	800b1f00 	call	800b1f0 <__subdf3>
 8006090:	b809883a 	mov	r4,r23
 8006094:	a00b883a 	mov	r5,r20
 8006098:	900f883a 	mov	r7,r18
 800609c:	000d883a 	mov	r6,zero
 80060a0:	d8800015 	stw	r2,0(sp)
 80060a4:	d8c00115 	stw	r3,4(sp)
 80060a8:	80094b00 	call	80094b0 <__adddf3>
 80060ac:	100d883a 	mov	r6,r2
 80060b0:	180f883a 	mov	r7,r3
 80060b4:	0009883a 	mov	r4,zero
 80060b8:	014ffc34 	movhi	r5,16368
 80060bc:	8009d5c0 	call	8009d5c <__divdf3>
 80060c0:	d9000017 	ldw	r4,0(sp)
 80060c4:	d9400117 	ldw	r5,4(sp)
 80060c8:	100d883a 	mov	r6,r2
 80060cc:	180f883a 	mov	r7,r3
 80060d0:	d8c00715 	stw	r3,28(sp)
 80060d4:	d8800615 	stw	r2,24(sp)
 80060d8:	800a9840 	call	800a984 <__muldf3>
 80060dc:	1023883a 	mov	r17,r2
 80060e0:	a005d07a 	srai	r2,r20,1
 80060e4:	da800517 	ldw	r10,20(sp)
 80060e8:	1821883a 	mov	r16,r3
 80060ec:	10c80034 	orhi	r3,r2,8192
 80060f0:	00800234 	movhi	r2,8
 80060f4:	1885883a 	add	r2,r3,r2
 80060f8:	1295883a 	add	r10,r2,r10
 80060fc:	500f883a 	mov	r7,r10
 8006100:	800b883a 	mov	r5,r16
 8006104:	000d883a 	mov	r6,zero
 8006108:	0009883a 	mov	r4,zero
 800610c:	da800515 	stw	r10,20(sp)
 8006110:	800a9840 	call	800a984 <__muldf3>
 8006114:	d9000017 	ldw	r4,0(sp)
 8006118:	d9400117 	ldw	r5,4(sp)
 800611c:	100d883a 	mov	r6,r2
 8006120:	180f883a 	mov	r7,r3
 8006124:	800b1f00 	call	800b1f0 <__subdf3>
 8006128:	da800517 	ldw	r10,20(sp)
 800612c:	900f883a 	mov	r7,r18
 8006130:	000d883a 	mov	r6,zero
 8006134:	500b883a 	mov	r5,r10
 8006138:	0009883a 	mov	r4,zero
 800613c:	d8800015 	stw	r2,0(sp)
 8006140:	d8c00515 	stw	r3,20(sp)
 8006144:	800b1f00 	call	800b1f0 <__subdf3>
 8006148:	b809883a 	mov	r4,r23
 800614c:	a00b883a 	mov	r5,r20
 8006150:	100d883a 	mov	r6,r2
 8006154:	180f883a 	mov	r7,r3
 8006158:	800b1f00 	call	800b1f0 <__subdf3>
 800615c:	800f883a 	mov	r7,r16
 8006160:	000d883a 	mov	r6,zero
 8006164:	1009883a 	mov	r4,r2
 8006168:	180b883a 	mov	r5,r3
 800616c:	800a9840 	call	800a984 <__muldf3>
 8006170:	db400517 	ldw	r13,20(sp)
 8006174:	d9000017 	ldw	r4,0(sp)
 8006178:	100d883a 	mov	r6,r2
 800617c:	680b883a 	mov	r5,r13
 8006180:	180f883a 	mov	r7,r3
 8006184:	800b1f00 	call	800b1f0 <__subdf3>
 8006188:	dbc00617 	ldw	r15,24(sp)
 800618c:	db800717 	ldw	r14,28(sp)
 8006190:	1009883a 	mov	r4,r2
 8006194:	780d883a 	mov	r6,r15
 8006198:	700f883a 	mov	r7,r14
 800619c:	180b883a 	mov	r5,r3
 80061a0:	800a9840 	call	800a984 <__muldf3>
 80061a4:	880d883a 	mov	r6,r17
 80061a8:	800f883a 	mov	r7,r16
 80061ac:	8809883a 	mov	r4,r17
 80061b0:	800b883a 	mov	r5,r16
 80061b4:	d8800015 	stw	r2,0(sp)
 80061b8:	d8c00115 	stw	r3,4(sp)
 80061bc:	800a9840 	call	800a984 <__muldf3>
 80061c0:	01929174 	movhi	r6,19013
 80061c4:	01cff2b4 	movhi	r7,16330
 80061c8:	3193bbc4 	addi	r6,r6,20207
 80061cc:	39df8a04 	addi	r7,r7,32296
 80061d0:	1009883a 	mov	r4,r2
 80061d4:	180b883a 	mov	r5,r3
 80061d8:	102f883a 	mov	r23,r2
 80061dc:	1829883a 	mov	r20,r3
 80061e0:	800a9840 	call	800a984 <__muldf3>
 80061e4:	01a4f2b4 	movhi	r6,37834
 80061e8:	01cff3b4 	movhi	r7,16334
 80061ec:	31b6d944 	addi	r6,r6,-9371
 80061f0:	39e19284 	addi	r7,r7,-31158
 80061f4:	1009883a 	mov	r4,r2
 80061f8:	180b883a 	mov	r5,r3
 80061fc:	80094b00 	call	80094b0 <__adddf3>
 8006200:	b80d883a 	mov	r6,r23
 8006204:	a00f883a 	mov	r7,r20
 8006208:	1009883a 	mov	r4,r2
 800620c:	180b883a 	mov	r5,r3
 8006210:	800a9840 	call	800a984 <__muldf3>
 8006214:	01aa4774 	movhi	r6,43293
 8006218:	01cff474 	movhi	r7,16337
 800621c:	31904044 	addi	r6,r6,16641
 8006220:	39dd1804 	addi	r7,r7,29792
 8006224:	1009883a 	mov	r4,r2
 8006228:	180b883a 	mov	r5,r3
 800622c:	80094b00 	call	80094b0 <__adddf3>
 8006230:	b80d883a 	mov	r6,r23
 8006234:	a00f883a 	mov	r7,r20
 8006238:	1009883a 	mov	r4,r2
 800623c:	180b883a 	mov	r5,r3
 8006240:	800a9840 	call	800a984 <__muldf3>
 8006244:	019463f4 	movhi	r6,20879
 8006248:	01cff574 	movhi	r7,16341
 800624c:	31899344 	addi	r6,r6,9805
 8006250:	39d55544 	addi	r7,r7,21845
 8006254:	1009883a 	mov	r4,r2
 8006258:	180b883a 	mov	r5,r3
 800625c:	80094b00 	call	80094b0 <__adddf3>
 8006260:	b80d883a 	mov	r6,r23
 8006264:	a00f883a 	mov	r7,r20
 8006268:	1009883a 	mov	r4,r2
 800626c:	180b883a 	mov	r5,r3
 8006270:	800a9840 	call	800a984 <__muldf3>
 8006274:	01b6dc34 	movhi	r6,56176
 8006278:	01cff6f4 	movhi	r7,16347
 800627c:	31aaffc4 	addi	r6,r6,-21505
 8006280:	39db6d84 	addi	r7,r7,28086
 8006284:	1009883a 	mov	r4,r2
 8006288:	180b883a 	mov	r5,r3
 800628c:	80094b00 	call	80094b0 <__adddf3>
 8006290:	b80d883a 	mov	r6,r23
 8006294:	a00f883a 	mov	r7,r20
 8006298:	1009883a 	mov	r4,r2
 800629c:	180b883a 	mov	r5,r3
 80062a0:	800a9840 	call	800a984 <__muldf3>
 80062a4:	018cccf4 	movhi	r6,13107
 80062a8:	01cff8f4 	movhi	r7,16355
 80062ac:	318cc0c4 	addi	r6,r6,13059
 80062b0:	39ccccc4 	addi	r7,r7,13107
 80062b4:	1009883a 	mov	r4,r2
 80062b8:	180b883a 	mov	r5,r3
 80062bc:	80094b00 	call	80094b0 <__adddf3>
 80062c0:	b80d883a 	mov	r6,r23
 80062c4:	a00f883a 	mov	r7,r20
 80062c8:	b809883a 	mov	r4,r23
 80062cc:	a00b883a 	mov	r5,r20
 80062d0:	1825883a 	mov	r18,r3
 80062d4:	d8800515 	stw	r2,20(sp)
 80062d8:	800a9840 	call	800a984 <__muldf3>
 80062dc:	db400517 	ldw	r13,20(sp)
 80062e0:	900b883a 	mov	r5,r18
 80062e4:	100d883a 	mov	r6,r2
 80062e8:	6809883a 	mov	r4,r13
 80062ec:	180f883a 	mov	r7,r3
 80062f0:	800a9840 	call	800a984 <__muldf3>
 80062f4:	800f883a 	mov	r7,r16
 80062f8:	8809883a 	mov	r4,r17
 80062fc:	800b883a 	mov	r5,r16
 8006300:	000d883a 	mov	r6,zero
 8006304:	102f883a 	mov	r23,r2
 8006308:	1829883a 	mov	r20,r3
 800630c:	80094b00 	call	80094b0 <__adddf3>
 8006310:	d9800017 	ldw	r6,0(sp)
 8006314:	d9c00117 	ldw	r7,4(sp)
 8006318:	1009883a 	mov	r4,r2
 800631c:	180b883a 	mov	r5,r3
 8006320:	800a9840 	call	800a984 <__muldf3>
 8006324:	b80d883a 	mov	r6,r23
 8006328:	a00f883a 	mov	r7,r20
 800632c:	1009883a 	mov	r4,r2
 8006330:	180b883a 	mov	r5,r3
 8006334:	80094b00 	call	80094b0 <__adddf3>
 8006338:	800f883a 	mov	r7,r16
 800633c:	800b883a 	mov	r5,r16
 8006340:	000d883a 	mov	r6,zero
 8006344:	0009883a 	mov	r4,zero
 8006348:	1025883a 	mov	r18,r2
 800634c:	182f883a 	mov	r23,r3
 8006350:	800a9840 	call	800a984 <__muldf3>
 8006354:	000d883a 	mov	r6,zero
 8006358:	01d00234 	movhi	r7,16392
 800635c:	1009883a 	mov	r4,r2
 8006360:	180b883a 	mov	r5,r3
 8006364:	d8c00715 	stw	r3,28(sp)
 8006368:	d8800615 	stw	r2,24(sp)
 800636c:	80094b00 	call	80094b0 <__adddf3>
 8006370:	900d883a 	mov	r6,r18
 8006374:	b80f883a 	mov	r7,r23
 8006378:	1009883a 	mov	r4,r2
 800637c:	180b883a 	mov	r5,r3
 8006380:	80094b00 	call	80094b0 <__adddf3>
 8006384:	800b883a 	mov	r5,r16
 8006388:	000d883a 	mov	r6,zero
 800638c:	180f883a 	mov	r7,r3
 8006390:	0009883a 	mov	r4,zero
 8006394:	1829883a 	mov	r20,r3
 8006398:	800a9840 	call	800a984 <__muldf3>
 800639c:	a00b883a 	mov	r5,r20
 80063a0:	000d883a 	mov	r6,zero
 80063a4:	01d00234 	movhi	r7,16392
 80063a8:	0009883a 	mov	r4,zero
 80063ac:	d8800315 	stw	r2,12(sp)
 80063b0:	d8c00415 	stw	r3,16(sp)
 80063b4:	800b1f00 	call	800b1f0 <__subdf3>
 80063b8:	dbc00617 	ldw	r15,24(sp)
 80063bc:	db800717 	ldw	r14,28(sp)
 80063c0:	1009883a 	mov	r4,r2
 80063c4:	780d883a 	mov	r6,r15
 80063c8:	700f883a 	mov	r7,r14
 80063cc:	180b883a 	mov	r5,r3
 80063d0:	800b1f00 	call	800b1f0 <__subdf3>
 80063d4:	9009883a 	mov	r4,r18
 80063d8:	b80b883a 	mov	r5,r23
 80063dc:	100d883a 	mov	r6,r2
 80063e0:	180f883a 	mov	r7,r3
 80063e4:	800b1f00 	call	800b1f0 <__subdf3>
 80063e8:	880d883a 	mov	r6,r17
 80063ec:	800f883a 	mov	r7,r16
 80063f0:	1009883a 	mov	r4,r2
 80063f4:	180b883a 	mov	r5,r3
 80063f8:	800a9840 	call	800a984 <__muldf3>
 80063fc:	d9000017 	ldw	r4,0(sp)
 8006400:	d9400117 	ldw	r5,4(sp)
 8006404:	a00f883a 	mov	r7,r20
 8006408:	000d883a 	mov	r6,zero
 800640c:	1023883a 	mov	r17,r2
 8006410:	1821883a 	mov	r16,r3
 8006414:	800a9840 	call	800a984 <__muldf3>
 8006418:	8809883a 	mov	r4,r17
 800641c:	800b883a 	mov	r5,r16
 8006420:	100d883a 	mov	r6,r2
 8006424:	180f883a 	mov	r7,r3
 8006428:	80094b00 	call	80094b0 <__adddf3>
 800642c:	d9000317 	ldw	r4,12(sp)
 8006430:	d9400417 	ldw	r5,16(sp)
 8006434:	100d883a 	mov	r6,r2
 8006438:	180f883a 	mov	r7,r3
 800643c:	102f883a 	mov	r23,r2
 8006440:	1823883a 	mov	r17,r3
 8006444:	80094b00 	call	80094b0 <__adddf3>
 8006448:	01cffbf4 	movhi	r7,16367
 800644c:	39f1c244 	addi	r7,r7,-14583
 8006450:	0009883a 	mov	r4,zero
 8006454:	180b883a 	mov	r5,r3
 8006458:	01b80034 	movhi	r6,57344
 800645c:	1821883a 	mov	r16,r3
 8006460:	800a9840 	call	800a984 <__muldf3>
 8006464:	d9800317 	ldw	r6,12(sp)
 8006468:	d9c00417 	ldw	r7,16(sp)
 800646c:	800b883a 	mov	r5,r16
 8006470:	0009883a 	mov	r4,zero
 8006474:	1825883a 	mov	r18,r3
 8006478:	d8800015 	stw	r2,0(sp)
 800647c:	800b1f00 	call	800b1f0 <__subdf3>
 8006480:	b809883a 	mov	r4,r23
 8006484:	880b883a 	mov	r5,r17
 8006488:	100d883a 	mov	r6,r2
 800648c:	180f883a 	mov	r7,r3
 8006490:	800b1f00 	call	800b1f0 <__subdf3>
 8006494:	01b70eb4 	movhi	r6,56378
 8006498:	01cffbf4 	movhi	r7,16367
 800649c:	3180ff44 	addi	r6,r6,1021
 80064a0:	39f1c244 	addi	r7,r7,-14583
 80064a4:	1009883a 	mov	r4,r2
 80064a8:	180b883a 	mov	r5,r3
 80064ac:	800a9840 	call	800a984 <__muldf3>
 80064b0:	018516f4 	movhi	r6,5211
 80064b4:	01ef8fb4 	movhi	r7,48702
 80064b8:	800b883a 	mov	r5,r16
 80064bc:	31807d44 	addi	r6,r6,501
 80064c0:	39cbf804 	addi	r7,r7,12256
 80064c4:	0009883a 	mov	r4,zero
 80064c8:	1029883a 	mov	r20,r2
 80064cc:	1823883a 	mov	r17,r3
 80064d0:	800a9840 	call	800a984 <__muldf3>
 80064d4:	a009883a 	mov	r4,r20
 80064d8:	880b883a 	mov	r5,r17
 80064dc:	100d883a 	mov	r6,r2
 80064e0:	180f883a 	mov	r7,r3
 80064e4:	80094b00 	call	80094b0 <__adddf3>
 80064e8:	da400817 	ldw	r9,32(sp)
 80064ec:	da000a17 	ldw	r8,40(sp)
 80064f0:	180b883a 	mov	r5,r3
 80064f4:	480d883a 	mov	r6,r9
 80064f8:	400f883a 	mov	r7,r8
 80064fc:	1009883a 	mov	r4,r2
 8006500:	80094b00 	call	80094b0 <__adddf3>
 8006504:	db000917 	ldw	r12,36(sp)
 8006508:	1029883a 	mov	r20,r2
 800650c:	1823883a 	mov	r17,r3
 8006510:	6009883a 	mov	r4,r12
 8006514:	800bb6c0 	call	800bb6c <__floatsidf>
 8006518:	d9000017 	ldw	r4,0(sp)
 800651c:	a00d883a 	mov	r6,r20
 8006520:	880f883a 	mov	r7,r17
 8006524:	900b883a 	mov	r5,r18
 8006528:	182f883a 	mov	r23,r3
 800652c:	d8800115 	stw	r2,4(sp)
 8006530:	80094b00 	call	80094b0 <__adddf3>
 8006534:	d9c00217 	ldw	r7,8(sp)
 8006538:	980d883a 	mov	r6,r19
 800653c:	1009883a 	mov	r4,r2
 8006540:	180b883a 	mov	r5,r3
 8006544:	80094b00 	call	80094b0 <__adddf3>
 8006548:	d9800117 	ldw	r6,4(sp)
 800654c:	b80f883a 	mov	r7,r23
 8006550:	1009883a 	mov	r4,r2
 8006554:	180b883a 	mov	r5,r3
 8006558:	80094b00 	call	80094b0 <__adddf3>
 800655c:	d9800117 	ldw	r6,4(sp)
 8006560:	b80f883a 	mov	r7,r23
 8006564:	0009883a 	mov	r4,zero
 8006568:	180b883a 	mov	r5,r3
 800656c:	1821883a 	mov	r16,r3
 8006570:	800b1f00 	call	800b1f0 <__subdf3>
 8006574:	d9c00217 	ldw	r7,8(sp)
 8006578:	980d883a 	mov	r6,r19
 800657c:	1009883a 	mov	r4,r2
 8006580:	180b883a 	mov	r5,r3
 8006584:	800b1f00 	call	800b1f0 <__subdf3>
 8006588:	d9800017 	ldw	r6,0(sp)
 800658c:	900f883a 	mov	r7,r18
 8006590:	1009883a 	mov	r4,r2
 8006594:	180b883a 	mov	r5,r3
 8006598:	800b1f00 	call	800b1f0 <__subdf3>
 800659c:	880b883a 	mov	r5,r17
 80065a0:	100d883a 	mov	r6,r2
 80065a4:	180f883a 	mov	r7,r3
 80065a8:	a009883a 	mov	r4,r20
 80065ac:	800b1f00 	call	800b1f0 <__subdf3>
 80065b0:	dac00b17 	ldw	r11,44(sp)
 80065b4:	aabfffc4 	addi	r10,r21,-1
 80065b8:	1025883a 	mov	r18,r2
 80065bc:	52d6b03a 	or	r11,r10,r11
 80065c0:	1823883a 	mov	r17,r3
 80065c4:	58015826 	beq	r11,zero,8006b28 <__ieee754_pow+0xe28>
 80065c8:	04cffc34 	movhi	r19,16368
 80065cc:	b009883a 	mov	r4,r22
 80065d0:	000d883a 	mov	r6,zero
 80065d4:	e00f883a 	mov	r7,fp
 80065d8:	e00b883a 	mov	r5,fp
 80065dc:	800b1f00 	call	800b1f0 <__subdf3>
 80065e0:	800f883a 	mov	r7,r16
 80065e4:	000d883a 	mov	r6,zero
 80065e8:	1009883a 	mov	r4,r2
 80065ec:	180b883a 	mov	r5,r3
 80065f0:	800a9840 	call	800a984 <__muldf3>
 80065f4:	b00d883a 	mov	r6,r22
 80065f8:	9009883a 	mov	r4,r18
 80065fc:	880b883a 	mov	r5,r17
 8006600:	e00f883a 	mov	r7,fp
 8006604:	1829883a 	mov	r20,r3
 8006608:	102b883a 	mov	r21,r2
 800660c:	800a9840 	call	800a984 <__muldf3>
 8006610:	a00b883a 	mov	r5,r20
 8006614:	100d883a 	mov	r6,r2
 8006618:	180f883a 	mov	r7,r3
 800661c:	a809883a 	mov	r4,r21
 8006620:	80094b00 	call	80094b0 <__adddf3>
 8006624:	800b883a 	mov	r5,r16
 8006628:	000d883a 	mov	r6,zero
 800662c:	e00f883a 	mov	r7,fp
 8006630:	0009883a 	mov	r4,zero
 8006634:	102d883a 	mov	r22,r2
 8006638:	1829883a 	mov	r20,r3
 800663c:	800a9840 	call	800a984 <__muldf3>
 8006640:	100d883a 	mov	r6,r2
 8006644:	180f883a 	mov	r7,r3
 8006648:	b009883a 	mov	r4,r22
 800664c:	a00b883a 	mov	r5,r20
 8006650:	1025883a 	mov	r18,r2
 8006654:	1823883a 	mov	r17,r3
 8006658:	80094b00 	call	80094b0 <__adddf3>
 800665c:	102f883a 	mov	r23,r2
 8006660:	00902434 	movhi	r2,16528
 8006664:	10bfffc4 	addi	r2,r2,-1
 8006668:	1821883a 	mov	r16,r3
 800666c:	9013883a 	mov	r9,r18
 8006670:	8811883a 	mov	r8,r17
 8006674:	10c1070e 	bge	r2,r3,8006a94 <__ieee754_pow+0xd94>
 8006678:	00afdc34 	movhi	r2,49008
 800667c:	1885883a 	add	r2,r3,r2
 8006680:	15c4b03a 	or	r2,r2,r23
 8006684:	1001901e 	bne	r2,zero,8006cc8 <__ieee754_pow+0xfc8>
 8006688:	01994b34 	movhi	r6,25900
 800668c:	01cf25f4 	movhi	r7,15511
 8006690:	31a0bf84 	addi	r6,r6,-32002
 8006694:	39c551c4 	addi	r7,r7,5447
 8006698:	b009883a 	mov	r4,r22
 800669c:	a00b883a 	mov	r5,r20
 80066a0:	80094b00 	call	80094b0 <__adddf3>
 80066a4:	900d883a 	mov	r6,r18
 80066a8:	880f883a 	mov	r7,r17
 80066ac:	b809883a 	mov	r4,r23
 80066b0:	800b883a 	mov	r5,r16
 80066b4:	1039883a 	mov	fp,r2
 80066b8:	182b883a 	mov	r21,r3
 80066bc:	800b1f00 	call	800b1f0 <__subdf3>
 80066c0:	100d883a 	mov	r6,r2
 80066c4:	180f883a 	mov	r7,r3
 80066c8:	e009883a 	mov	r4,fp
 80066cc:	a80b883a 	mov	r5,r21
 80066d0:	800a7b40 	call	800a7b4 <__gedf2>
 80066d4:	00817c16 	blt	zero,r2,8006cc8 <__ieee754_pow+0xfc8>
 80066d8:	802b883a 	mov	r21,r16
 80066dc:	a805d53a 	srai	r2,r21,20
 80066e0:	00c00434 	movhi	r3,16
 80066e4:	01000434 	movhi	r4,16
 80066e8:	10bf0084 	addi	r2,r2,-1022
 80066ec:	1885d83a 	sra	r2,r3,r2
 80066f0:	213fffc4 	addi	r4,r4,-1
 80066f4:	1405883a 	add	r2,r2,r16
 80066f8:	1006907a 	slli	r3,r2,1
 80066fc:	112a703a 	and	r21,r2,r4
 8006700:	ad400434 	orhi	r21,r21,16
 8006704:	1806d57a 	srli	r3,r3,21
 8006708:	18ff0044 	addi	r3,r3,-1023
 800670c:	20cfd83a 	sra	r7,r4,r3
 8006710:	01000504 	movi	r4,20
 8006714:	20c7c83a 	sub	r3,r4,r3
 8006718:	a8c7d83a 	sra	r3,r21,r3
 800671c:	01ce303a 	nor	r7,zero,r7
 8006720:	388e703a 	and	r7,r7,r2
 8006724:	d8c00015 	stw	r3,0(sp)
 8006728:	80019016 	blt	r16,zero,8006d6c <__ieee754_pow+0x106c>
 800672c:	000d883a 	mov	r6,zero
 8006730:	9009883a 	mov	r4,r18
 8006734:	880b883a 	mov	r5,r17
 8006738:	800b1f00 	call	800b1f0 <__subdf3>
 800673c:	100d883a 	mov	r6,r2
 8006740:	180f883a 	mov	r7,r3
 8006744:	b009883a 	mov	r4,r22
 8006748:	a00b883a 	mov	r5,r20
 800674c:	d8c00a15 	stw	r3,40(sp)
 8006750:	d8800815 	stw	r2,32(sp)
 8006754:	80094b00 	call	80094b0 <__adddf3>
 8006758:	d8800017 	ldw	r2,0(sp)
 800675c:	da000a17 	ldw	r8,40(sp)
 8006760:	da400817 	ldw	r9,32(sp)
 8006764:	1004953a 	slli	r2,r2,20
 8006768:	1821883a 	mov	r16,r3
 800676c:	d8800215 	stw	r2,8(sp)
 8006770:	01cff9b4 	movhi	r7,16358
 8006774:	800b883a 	mov	r5,r16
 8006778:	39cb90c4 	addi	r7,r7,11843
 800677c:	0009883a 	mov	r4,zero
 8006780:	000d883a 	mov	r6,zero
 8006784:	da000a15 	stw	r8,40(sp)
 8006788:	da400815 	stw	r9,32(sp)
 800678c:	800a9840 	call	800a984 <__muldf3>
 8006790:	da400817 	ldw	r9,32(sp)
 8006794:	da000a17 	ldw	r8,40(sp)
 8006798:	800b883a 	mov	r5,r16
 800679c:	480d883a 	mov	r6,r9
 80067a0:	400f883a 	mov	r7,r8
 80067a4:	0009883a 	mov	r4,zero
 80067a8:	1039883a 	mov	fp,r2
 80067ac:	182f883a 	mov	r23,r3
 80067b0:	800b1f00 	call	800b1f0 <__subdf3>
 80067b4:	b009883a 	mov	r4,r22
 80067b8:	a00b883a 	mov	r5,r20
 80067bc:	100d883a 	mov	r6,r2
 80067c0:	180f883a 	mov	r7,r3
 80067c4:	800b1f00 	call	800b1f0 <__subdf3>
 80067c8:	01bfbeb4 	movhi	r6,65274
 80067cc:	01cff9b4 	movhi	r7,16358
 80067d0:	318e7bc4 	addi	r6,r6,14831
 80067d4:	39cb9084 	addi	r7,r7,11842
 80067d8:	1009883a 	mov	r4,r2
 80067dc:	180b883a 	mov	r5,r3
 80067e0:	800a9840 	call	800a984 <__muldf3>
 80067e4:	01832a34 	movhi	r6,3240
 80067e8:	01ef8834 	movhi	r7,48672
 80067ec:	800b883a 	mov	r5,r16
 80067f0:	319b0e44 	addi	r6,r6,27705
 80067f4:	39d71844 	addi	r7,r7,23649
 80067f8:	0009883a 	mov	r4,zero
 80067fc:	1029883a 	mov	r20,r2
 8006800:	1823883a 	mov	r17,r3
 8006804:	800a9840 	call	800a984 <__muldf3>
 8006808:	a009883a 	mov	r4,r20
 800680c:	880b883a 	mov	r5,r17
 8006810:	100d883a 	mov	r6,r2
 8006814:	180f883a 	mov	r7,r3
 8006818:	80094b00 	call	80094b0 <__adddf3>
 800681c:	e009883a 	mov	r4,fp
 8006820:	b80b883a 	mov	r5,r23
 8006824:	100d883a 	mov	r6,r2
 8006828:	180f883a 	mov	r7,r3
 800682c:	102d883a 	mov	r22,r2
 8006830:	1829883a 	mov	r20,r3
 8006834:	80094b00 	call	80094b0 <__adddf3>
 8006838:	e00d883a 	mov	r6,fp
 800683c:	b80f883a 	mov	r7,r23
 8006840:	1009883a 	mov	r4,r2
 8006844:	180b883a 	mov	r5,r3
 8006848:	1023883a 	mov	r17,r2
 800684c:	1821883a 	mov	r16,r3
 8006850:	800b1f00 	call	800b1f0 <__subdf3>
 8006854:	b009883a 	mov	r4,r22
 8006858:	a00b883a 	mov	r5,r20
 800685c:	100d883a 	mov	r6,r2
 8006860:	180f883a 	mov	r7,r3
 8006864:	800b1f00 	call	800b1f0 <__subdf3>
 8006868:	880d883a 	mov	r6,r17
 800686c:	800f883a 	mov	r7,r16
 8006870:	8809883a 	mov	r4,r17
 8006874:	800b883a 	mov	r5,r16
 8006878:	1039883a 	mov	fp,r2
 800687c:	182f883a 	mov	r23,r3
 8006880:	800a9840 	call	800a984 <__muldf3>
 8006884:	019caff4 	movhi	r6,29375
 8006888:	01cf99b4 	movhi	r7,15974
 800688c:	31a93404 	addi	r6,r6,-23344
 8006890:	39cdda44 	addi	r7,r7,14185
 8006894:	1009883a 	mov	r4,r2
 8006898:	180b883a 	mov	r5,r3
 800689c:	102d883a 	mov	r22,r2
 80068a0:	1829883a 	mov	r20,r3
 80068a4:	800a9840 	call	800a984 <__muldf3>
 80068a8:	01b174b4 	movhi	r6,50642
 80068ac:	01cfaf34 	movhi	r7,16060
 80068b0:	319afc44 	addi	r6,r6,27633
 80068b4:	39ef5044 	addi	r7,r7,-17087
 80068b8:	1009883a 	mov	r4,r2
 80068bc:	180b883a 	mov	r5,r3
 80068c0:	800b1f00 	call	800b1f0 <__subdf3>
 80068c4:	b00d883a 	mov	r6,r22
 80068c8:	a00f883a 	mov	r7,r20
 80068cc:	1009883a 	mov	r4,r2
 80068d0:	180b883a 	mov	r5,r3
 80068d4:	800a9840 	call	800a984 <__muldf3>
 80068d8:	01abc9b4 	movhi	r6,44838
 80068dc:	01cfc474 	movhi	r7,16145
 80068e0:	31b78b04 	addi	r6,r6,-8660
 80068e4:	39d59a84 	addi	r7,r7,22122
 80068e8:	1009883a 	mov	r4,r2
 80068ec:	180b883a 	mov	r5,r3
 80068f0:	80094b00 	call	80094b0 <__adddf3>
 80068f4:	b00d883a 	mov	r6,r22
 80068f8:	a00f883a 	mov	r7,r20
 80068fc:	1009883a 	mov	r4,r2
 8006900:	180b883a 	mov	r5,r3
 8006904:	800a9840 	call	800a984 <__muldf3>
 8006908:	0185aff4 	movhi	r6,5823
 800690c:	01cfd9f4 	movhi	r7,16231
 8006910:	31af64c4 	addi	r6,r6,-17005
 8006914:	39f05b04 	addi	r7,r7,-16020
 8006918:	1009883a 	mov	r4,r2
 800691c:	180b883a 	mov	r5,r3
 8006920:	800b1f00 	call	800b1f0 <__subdf3>
 8006924:	b00d883a 	mov	r6,r22
 8006928:	a00f883a 	mov	r7,r20
 800692c:	1009883a 	mov	r4,r2
 8006930:	180b883a 	mov	r5,r3
 8006934:	800a9840 	call	800a984 <__muldf3>
 8006938:	01955574 	movhi	r6,21845
 800693c:	01cff174 	movhi	r7,16325
 8006940:	31954f84 	addi	r6,r6,21822
 8006944:	39d55544 	addi	r7,r7,21845
 8006948:	1009883a 	mov	r4,r2
 800694c:	180b883a 	mov	r5,r3
 8006950:	80094b00 	call	80094b0 <__adddf3>
 8006954:	b00d883a 	mov	r6,r22
 8006958:	a00f883a 	mov	r7,r20
 800695c:	1009883a 	mov	r4,r2
 8006960:	180b883a 	mov	r5,r3
 8006964:	800a9840 	call	800a984 <__muldf3>
 8006968:	100d883a 	mov	r6,r2
 800696c:	180f883a 	mov	r7,r3
 8006970:	8809883a 	mov	r4,r17
 8006974:	800b883a 	mov	r5,r16
 8006978:	800b1f00 	call	800b1f0 <__subdf3>
 800697c:	100d883a 	mov	r6,r2
 8006980:	180f883a 	mov	r7,r3
 8006984:	8809883a 	mov	r4,r17
 8006988:	800b883a 	mov	r5,r16
 800698c:	102d883a 	mov	r22,r2
 8006990:	1829883a 	mov	r20,r3
 8006994:	800a9840 	call	800a984 <__muldf3>
 8006998:	b009883a 	mov	r4,r22
 800699c:	a00b883a 	mov	r5,r20
 80069a0:	000d883a 	mov	r6,zero
 80069a4:	01d00034 	movhi	r7,16384
 80069a8:	1025883a 	mov	r18,r2
 80069ac:	182b883a 	mov	r21,r3
 80069b0:	800b1f00 	call	800b1f0 <__subdf3>
 80069b4:	100d883a 	mov	r6,r2
 80069b8:	180f883a 	mov	r7,r3
 80069bc:	9009883a 	mov	r4,r18
 80069c0:	a80b883a 	mov	r5,r21
 80069c4:	8009d5c0 	call	8009d5c <__divdf3>
 80069c8:	e00d883a 	mov	r6,fp
 80069cc:	b80f883a 	mov	r7,r23
 80069d0:	8809883a 	mov	r4,r17
 80069d4:	800b883a 	mov	r5,r16
 80069d8:	102d883a 	mov	r22,r2
 80069dc:	1829883a 	mov	r20,r3
 80069e0:	800a9840 	call	800a984 <__muldf3>
 80069e4:	e00d883a 	mov	r6,fp
 80069e8:	b80f883a 	mov	r7,r23
 80069ec:	1009883a 	mov	r4,r2
 80069f0:	180b883a 	mov	r5,r3
 80069f4:	80094b00 	call	80094b0 <__adddf3>
 80069f8:	100d883a 	mov	r6,r2
 80069fc:	180f883a 	mov	r7,r3
 8006a00:	b009883a 	mov	r4,r22
 8006a04:	a00b883a 	mov	r5,r20
 8006a08:	800b1f00 	call	800b1f0 <__subdf3>
 8006a0c:	880d883a 	mov	r6,r17
 8006a10:	800f883a 	mov	r7,r16
 8006a14:	1009883a 	mov	r4,r2
 8006a18:	180b883a 	mov	r5,r3
 8006a1c:	800b1f00 	call	800b1f0 <__subdf3>
 8006a20:	0009883a 	mov	r4,zero
 8006a24:	014ffc34 	movhi	r5,16368
 8006a28:	100d883a 	mov	r6,r2
 8006a2c:	180f883a 	mov	r7,r3
 8006a30:	800b1f00 	call	800b1f0 <__subdf3>
 8006a34:	d9000217 	ldw	r4,8(sp)
 8006a38:	190b883a 	add	r5,r3,r4
 8006a3c:	2809d53a 	srai	r4,r5,20
 8006a40:	0100cd0e 	bge	zero,r4,8006d78 <__ieee754_pow+0x1078>
 8006a44:	1009883a 	mov	r4,r2
 8006a48:	000d883a 	mov	r6,zero
 8006a4c:	980f883a 	mov	r7,r19
 8006a50:	800a9840 	call	800a984 <__muldf3>
 8006a54:	003ce606 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006a58:	00b00434 	movhi	r2,49168
 8006a5c:	8885883a 	add	r2,r17,r2
 8006a60:	1544b03a 	or	r2,r2,r21
 8006a64:	1000b326 	beq	r2,zero,8006d34 <__ieee754_pow+0x1034>
 8006a68:	00800044 	movi	r2,1
 8006a6c:	a8bd181e 	bne	r21,r2,8005ed0 <__alt_data_end+0xfc005ed0>
 8006a70:	18e0003c 	xorhi	r3,r3,32768
 8006a74:	b805883a 	mov	r2,r23
 8006a78:	003cdd06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006a7c:	800d883a 	mov	r6,r16
 8006a80:	980f883a 	mov	r7,r19
 8006a84:	8009883a 	mov	r4,r16
 8006a88:	980b883a 	mov	r5,r19
 8006a8c:	800a9840 	call	800a984 <__muldf3>
 8006a90:	003cd706 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006a94:	05600034 	movhi	r21,32768
 8006a98:	ad7fffc4 	addi	r21,r21,-1
 8006a9c:	00902474 	movhi	r2,16529
 8006aa0:	1d6a703a 	and	r21,r3,r21
 8006aa4:	10b2ffc4 	addi	r2,r2,-13313
 8006aa8:	15409d0e 	bge	r2,r21,8006d20 <__ieee754_pow+0x1020>
 8006aac:	008fdbf4 	movhi	r2,16239
 8006ab0:	108d0004 	addi	r2,r2,13312
 8006ab4:	1885883a 	add	r2,r3,r2
 8006ab8:	15c4b03a 	or	r2,r2,r23
 8006abc:	10000b1e 	bne	r2,zero,8006aec <__ieee754_pow+0xdec>
 8006ac0:	900d883a 	mov	r6,r18
 8006ac4:	880f883a 	mov	r7,r17
 8006ac8:	b809883a 	mov	r4,r23
 8006acc:	180b883a 	mov	r5,r3
 8006ad0:	800b1f00 	call	800b1f0 <__subdf3>
 8006ad4:	100d883a 	mov	r6,r2
 8006ad8:	180f883a 	mov	r7,r3
 8006adc:	b009883a 	mov	r4,r22
 8006ae0:	a00b883a 	mov	r5,r20
 8006ae4:	800a8900 	call	800a890 <__ledf2>
 8006ae8:	00befc16 	blt	zero,r2,80066dc <__alt_data_end+0xfc0066dc>
 8006aec:	01b0be74 	movhi	r6,49913
 8006af0:	01c06974 	movhi	r7,421
 8006af4:	980b883a 	mov	r5,r19
 8006af8:	31bcd644 	addi	r6,r6,-3239
 8006afc:	39db87c4 	addi	r7,r7,28191
 8006b00:	0009883a 	mov	r4,zero
 8006b04:	800a9840 	call	800a984 <__muldf3>
 8006b08:	01b0be74 	movhi	r6,49913
 8006b0c:	01c06974 	movhi	r7,421
 8006b10:	31bcd644 	addi	r6,r6,-3239
 8006b14:	39db87c4 	addi	r7,r7,28191
 8006b18:	1009883a 	mov	r4,r2
 8006b1c:	180b883a 	mov	r5,r3
 8006b20:	800a9840 	call	800a984 <__muldf3>
 8006b24:	003cb206 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006b28:	04effc34 	movhi	r19,49136
 8006b2c:	003ea706 	br	80065cc <__alt_data_end+0xfc0065cc>
 8006b30:	e03cdc0e 	bge	fp,zero,8005ea4 <__alt_data_end+0xfc005ea4>
 8006b34:	0005883a 	mov	r2,zero
 8006b38:	e0e0003c 	xorhi	r3,fp,32768
 8006b3c:	003cac06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006b40:	0019883a 	mov	r12,zero
 8006b44:	003d3206 	br	8006010 <__alt_data_end+0xfc006010>
 8006b48:	008ffc34 	movhi	r2,16368
 8006b4c:	10bfff84 	addi	r2,r2,-2
 8006b50:	147cd30e 	bge	r2,r17,8005ea0 <__alt_data_end+0xfc005ea0>
 8006b54:	01cffc34 	movhi	r7,16368
 8006b58:	3c7cea16 	blt	r7,r17,8005f04 <__alt_data_end+0xfc005f04>
 8006b5c:	b809883a 	mov	r4,r23
 8006b60:	000d883a 	mov	r6,zero
 8006b64:	180b883a 	mov	r5,r3
 8006b68:	dac00b15 	stw	r11,44(sp)
 8006b6c:	800b1f00 	call	800b1f0 <__subdf3>
 8006b70:	01cffdf4 	movhi	r7,16375
 8006b74:	39c551c4 	addi	r7,r7,5447
 8006b78:	01980034 	movhi	r6,24576
 8006b7c:	1009883a 	mov	r4,r2
 8006b80:	180b883a 	mov	r5,r3
 8006b84:	1023883a 	mov	r17,r2
 8006b88:	1821883a 	mov	r16,r3
 8006b8c:	800a9840 	call	800a984 <__muldf3>
 8006b90:	01be17b4 	movhi	r6,63582
 8006b94:	01cf9574 	movhi	r7,15957
 8006b98:	8809883a 	mov	r4,r17
 8006b9c:	800b883a 	mov	r5,r16
 8006ba0:	31b7d104 	addi	r6,r6,-8380
 8006ba4:	39eb82c4 	addi	r7,r7,-20981
 8006ba8:	1027883a 	mov	r19,r2
 8006bac:	1825883a 	mov	r18,r3
 8006bb0:	800a9840 	call	800a984 <__muldf3>
 8006bb4:	8809883a 	mov	r4,r17
 8006bb8:	800b883a 	mov	r5,r16
 8006bbc:	000d883a 	mov	r6,zero
 8006bc0:	01cff434 	movhi	r7,16336
 8006bc4:	1829883a 	mov	r20,r3
 8006bc8:	d8800a15 	stw	r2,40(sp)
 8006bcc:	800a9840 	call	800a984 <__muldf3>
 8006bd0:	01155574 	movhi	r4,21845
 8006bd4:	014ff574 	movhi	r5,16341
 8006bd8:	100d883a 	mov	r6,r2
 8006bdc:	180f883a 	mov	r7,r3
 8006be0:	21155544 	addi	r4,r4,21845
 8006be4:	29555544 	addi	r5,r5,21845
 8006be8:	800b1f00 	call	800b1f0 <__subdf3>
 8006bec:	880d883a 	mov	r6,r17
 8006bf0:	800f883a 	mov	r7,r16
 8006bf4:	1009883a 	mov	r4,r2
 8006bf8:	180b883a 	mov	r5,r3
 8006bfc:	800a9840 	call	800a984 <__muldf3>
 8006c00:	100d883a 	mov	r6,r2
 8006c04:	180f883a 	mov	r7,r3
 8006c08:	0009883a 	mov	r4,zero
 8006c0c:	014ff834 	movhi	r5,16352
 8006c10:	800b1f00 	call	800b1f0 <__subdf3>
 8006c14:	880d883a 	mov	r6,r17
 8006c18:	800f883a 	mov	r7,r16
 8006c1c:	8809883a 	mov	r4,r17
 8006c20:	800b883a 	mov	r5,r16
 8006c24:	102f883a 	mov	r23,r2
 8006c28:	d8c00815 	stw	r3,32(sp)
 8006c2c:	800a9840 	call	800a984 <__muldf3>
 8006c30:	da400817 	ldw	r9,32(sp)
 8006c34:	100d883a 	mov	r6,r2
 8006c38:	180f883a 	mov	r7,r3
 8006c3c:	480b883a 	mov	r5,r9
 8006c40:	b809883a 	mov	r4,r23
 8006c44:	800a9840 	call	800a984 <__muldf3>
 8006c48:	01994b34 	movhi	r6,25900
 8006c4c:	01cffdf4 	movhi	r7,16375
 8006c50:	31a0bf84 	addi	r6,r6,-32002
 8006c54:	39c551c4 	addi	r7,r7,5447
 8006c58:	1009883a 	mov	r4,r2
 8006c5c:	180b883a 	mov	r5,r3
 8006c60:	800a9840 	call	800a984 <__muldf3>
 8006c64:	da000a17 	ldw	r8,40(sp)
 8006c68:	a00b883a 	mov	r5,r20
 8006c6c:	100d883a 	mov	r6,r2
 8006c70:	4009883a 	mov	r4,r8
 8006c74:	180f883a 	mov	r7,r3
 8006c78:	800b1f00 	call	800b1f0 <__subdf3>
 8006c7c:	100d883a 	mov	r6,r2
 8006c80:	180f883a 	mov	r7,r3
 8006c84:	9809883a 	mov	r4,r19
 8006c88:	900b883a 	mov	r5,r18
 8006c8c:	1029883a 	mov	r20,r2
 8006c90:	1823883a 	mov	r17,r3
 8006c94:	80094b00 	call	80094b0 <__adddf3>
 8006c98:	1821883a 	mov	r16,r3
 8006c9c:	980d883a 	mov	r6,r19
 8006ca0:	900f883a 	mov	r7,r18
 8006ca4:	0009883a 	mov	r4,zero
 8006ca8:	180b883a 	mov	r5,r3
 8006cac:	003e3a06 	br	8006598 <__alt_data_end+0xfc006598>
 8006cb0:	800d883a 	mov	r6,r16
 8006cb4:	980f883a 	mov	r7,r19
 8006cb8:	0009883a 	mov	r4,zero
 8006cbc:	900b883a 	mov	r5,r18
 8006cc0:	8009d5c0 	call	8009d5c <__divdf3>
 8006cc4:	003c4a06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006cc8:	01a20034 	movhi	r6,34816
 8006ccc:	01df8e34 	movhi	r7,32312
 8006cd0:	980b883a 	mov	r5,r19
 8006cd4:	319d6704 	addi	r6,r6,30108
 8006cd8:	39f90f04 	addi	r7,r7,-7108
 8006cdc:	0009883a 	mov	r4,zero
 8006ce0:	800a9840 	call	800a984 <__muldf3>
 8006ce4:	01a20034 	movhi	r6,34816
 8006ce8:	01df8e34 	movhi	r7,32312
 8006cec:	319d6704 	addi	r6,r6,30108
 8006cf0:	39f90f04 	addi	r7,r7,-7108
 8006cf4:	1009883a 	mov	r4,r2
 8006cf8:	180b883a 	mov	r5,r3
 8006cfc:	800a9840 	call	800a984 <__muldf3>
 8006d00:	003c3b06 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006d04:	303c551e 	bne	r6,zero,8005e5c <__alt_data_end+0xfc005e5c>
 8006d08:	1885c83a 	sub	r2,r3,r2
 8006d0c:	9087d83a 	sra	r3,r18,r2
 8006d10:	1884983a 	sll	r2,r3,r2
 8006d14:	90801f26 	beq	r18,r2,8006d94 <__ieee754_pow+0x1094>
 8006d18:	002b883a 	mov	r21,zero
 8006d1c:	003c1806 	br	8005d80 <__alt_data_end+0xfc005d80>
 8006d20:	008ff834 	movhi	r2,16352
 8006d24:	157e6d16 	blt	r2,r21,80066dc <__alt_data_end+0xfc0066dc>
 8006d28:	d8000215 	stw	zero,8(sp)
 8006d2c:	d8000015 	stw	zero,0(sp)
 8006d30:	003e8f06 	br	8006770 <__alt_data_end+0xfc006770>
 8006d34:	b80d883a 	mov	r6,r23
 8006d38:	180f883a 	mov	r7,r3
 8006d3c:	003c9e06 	br	8005fb8 <__alt_data_end+0xfc005fb8>
 8006d40:	008ff8f4 	movhi	r2,16355
 8006d44:	10ae00c4 	addi	r2,r2,-18429
 8006d48:	0250f434 	movhi	r9,17360
 8006d4c:	020f9374 	movhi	r8,15949
 8006d50:	d8800215 	stw	r2,8(sp)
 8006d54:	4a740184 	addi	r9,r9,-12282
 8006d58:	423f7ac4 	addi	r8,r8,-533
 8006d5c:	04d00034 	movhi	r19,16384
 8006d60:	02800134 	movhi	r10,4
 8006d64:	048ffe34 	movhi	r18,16376
 8006d68:	003cbf06 	br	8006068 <__alt_data_end+0xfc006068>
 8006d6c:	00c9c83a 	sub	r4,zero,r3
 8006d70:	d9000015 	stw	r4,0(sp)
 8006d74:	003e6d06 	br	800672c <__alt_data_end+0xfc00672c>
 8006d78:	d9800017 	ldw	r6,0(sp)
 8006d7c:	1009883a 	mov	r4,r2
 8006d80:	180b883a 	mov	r5,r3
 8006d84:	80074240 	call	8007424 <scalbn>
 8006d88:	1009883a 	mov	r4,r2
 8006d8c:	180b883a 	mov	r5,r3
 8006d90:	003f2d06 	br	8006a48 <__alt_data_end+0xfc006a48>
 8006d94:	18c0004c 	andi	r3,r3,1
 8006d98:	02800084 	movi	r10,2
 8006d9c:	50ebc83a 	sub	r21,r10,r3
 8006da0:	003bf706 	br	8005d80 <__alt_data_end+0xfc005d80>

08006da4 <__ieee754_sqrt>:
 8006da4:	defffd04 	addi	sp,sp,-12
 8006da8:	dc400115 	stw	r17,4(sp)
 8006dac:	dc000015 	stw	r16,0(sp)
 8006db0:	dfc00215 	stw	ra,8(sp)
 8006db4:	28dffc2c 	andhi	r3,r5,32752
 8006db8:	009ffc34 	movhi	r2,32752
 8006dbc:	2821883a 	mov	r16,r5
 8006dc0:	2023883a 	mov	r17,r4
 8006dc4:	200d883a 	mov	r6,r4
 8006dc8:	18807b26 	beq	r3,r2,8006fb8 <__ieee754_sqrt+0x214>
 8006dcc:	01405f0e 	bge	zero,r5,8006f4c <__ieee754_sqrt+0x1a8>
 8006dd0:	2815d53a 	srai	r10,r5,20
 8006dd4:	50006a26 	beq	r10,zero,8006f80 <__ieee754_sqrt+0x1dc>
 8006dd8:	00c00434 	movhi	r3,16
 8006ddc:	52bf0044 	addi	r10,r10,-1023
 8006de0:	18ffffc4 	addi	r3,r3,-1
 8006de4:	80c6703a 	and	r3,r16,r3
 8006de8:	5080004c 	andi	r2,r10,1
 8006dec:	18c00434 	orhi	r3,r3,16
 8006df0:	1000511e 	bne	r2,zero,8006f38 <__ieee754_sqrt+0x194>
 8006df4:	3004d7fa 	srli	r2,r6,31
 8006df8:	5015d07a 	srai	r10,r10,1
 8006dfc:	18c7883a 	add	r3,r3,r3
 8006e00:	10c5883a 	add	r2,r2,r3
 8006e04:	01400584 	movi	r5,22
 8006e08:	3187883a 	add	r3,r6,r6
 8006e0c:	0013883a 	mov	r9,zero
 8006e10:	000f883a 	mov	r7,zero
 8006e14:	01000834 	movhi	r4,32
 8006e18:	390d883a 	add	r6,r7,r4
 8006e1c:	1810d7fa 	srli	r8,r3,31
 8006e20:	297fffc4 	addi	r5,r5,-1
 8006e24:	11800316 	blt	r2,r6,8006e34 <__ieee754_sqrt+0x90>
 8006e28:	1185c83a 	sub	r2,r2,r6
 8006e2c:	310f883a 	add	r7,r6,r4
 8006e30:	4913883a 	add	r9,r9,r4
 8006e34:	1085883a 	add	r2,r2,r2
 8006e38:	4085883a 	add	r2,r8,r2
 8006e3c:	18c7883a 	add	r3,r3,r3
 8006e40:	2008d07a 	srli	r4,r4,1
 8006e44:	283ff41e 	bne	r5,zero,8006e18 <__alt_data_end+0xfc006e18>
 8006e48:	01200034 	movhi	r4,32768
 8006e4c:	01800804 	movi	r6,32
 8006e50:	0011883a 	mov	r8,zero
 8006e54:	0019883a 	mov	r12,zero
 8006e58:	201b883a 	mov	r13,r4
 8006e5c:	00000806 	br	8006e80 <__ieee754_sqrt+0xdc>
 8006e60:	38801726 	beq	r7,r2,8006ec0 <__ieee754_sqrt+0x11c>
 8006e64:	180ad7fa 	srli	r5,r3,31
 8006e68:	1085883a 	add	r2,r2,r2
 8006e6c:	31bfffc4 	addi	r6,r6,-1
 8006e70:	2885883a 	add	r2,r5,r2
 8006e74:	18c7883a 	add	r3,r3,r3
 8006e78:	2008d07a 	srli	r4,r4,1
 8006e7c:	30001726 	beq	r6,zero,8006edc <__ieee754_sqrt+0x138>
 8006e80:	230b883a 	add	r5,r4,r12
 8006e84:	38bff60e 	bge	r7,r2,8006e60 <__alt_data_end+0xfc006e60>
 8006e88:	2ae0002c 	andhi	r11,r5,32768
 8006e8c:	2919883a 	add	r12,r5,r4
 8006e90:	5b400826 	beq	r11,r13,8006eb4 <__ieee754_sqrt+0x110>
 8006e94:	3817883a 	mov	r11,r7
 8006e98:	11c5c83a 	sub	r2,r2,r7
 8006e9c:	1940012e 	bgeu	r3,r5,8006ea4 <__ieee754_sqrt+0x100>
 8006ea0:	10bfffc4 	addi	r2,r2,-1
 8006ea4:	1947c83a 	sub	r3,r3,r5
 8006ea8:	4111883a 	add	r8,r8,r4
 8006eac:	580f883a 	mov	r7,r11
 8006eb0:	003fec06 	br	8006e64 <__alt_data_end+0xfc006e64>
 8006eb4:	603ff716 	blt	r12,zero,8006e94 <__alt_data_end+0xfc006e94>
 8006eb8:	3ac00044 	addi	r11,r7,1
 8006ebc:	003ff606 	br	8006e98 <__alt_data_end+0xfc006e98>
 8006ec0:	19401936 	bltu	r3,r5,8006f28 <__ieee754_sqrt+0x184>
 8006ec4:	2ae0002c 	andhi	r11,r5,32768
 8006ec8:	2919883a 	add	r12,r5,r4
 8006ecc:	5b404526 	beq	r11,r13,8006fe4 <__ieee754_sqrt+0x240>
 8006ed0:	1017883a 	mov	r11,r2
 8006ed4:	0005883a 	mov	r2,zero
 8006ed8:	003ff206 	br	8006ea4 <__alt_data_end+0xfc006ea4>
 8006edc:	10c4b03a 	or	r2,r2,r3
 8006ee0:	10000426 	beq	r2,zero,8006ef4 <__ieee754_sqrt+0x150>
 8006ee4:	00bfffc4 	movi	r2,-1
 8006ee8:	40804026 	beq	r8,r2,8006fec <__ieee754_sqrt+0x248>
 8006eec:	4080004c 	andi	r2,r8,1
 8006ef0:	4091883a 	add	r8,r8,r2
 8006ef4:	4004d07a 	srli	r2,r8,1
 8006ef8:	4807d07a 	srai	r3,r9,1
 8006efc:	010ff834 	movhi	r4,16352
 8006f00:	4a40004c 	andi	r9,r9,1
 8006f04:	1909883a 	add	r4,r3,r4
 8006f08:	4800091e 	bne	r9,zero,8006f30 <__ieee754_sqrt+0x18c>
 8006f0c:	5006953a 	slli	r3,r10,20
 8006f10:	1907883a 	add	r3,r3,r4
 8006f14:	dfc00217 	ldw	ra,8(sp)
 8006f18:	dc400117 	ldw	r17,4(sp)
 8006f1c:	dc000017 	ldw	r16,0(sp)
 8006f20:	dec00304 	addi	sp,sp,12
 8006f24:	f800283a 	ret
 8006f28:	3805883a 	mov	r2,r7
 8006f2c:	003fcd06 	br	8006e64 <__alt_data_end+0xfc006e64>
 8006f30:	10a00034 	orhi	r2,r2,32768
 8006f34:	003ff506 	br	8006f0c <__alt_data_end+0xfc006f0c>
 8006f38:	3004d7fa 	srli	r2,r6,31
 8006f3c:	18c7883a 	add	r3,r3,r3
 8006f40:	318d883a 	add	r6,r6,r6
 8006f44:	10c7883a 	add	r3,r2,r3
 8006f48:	003faa06 	br	8006df4 <__alt_data_end+0xfc006df4>
 8006f4c:	00a00034 	movhi	r2,32768
 8006f50:	10bfffc4 	addi	r2,r2,-1
 8006f54:	2884703a 	and	r2,r5,r2
 8006f58:	1104b03a 	or	r2,r2,r4
 8006f5c:	10001e26 	beq	r2,zero,8006fd8 <__ieee754_sqrt+0x234>
 8006f60:	2800291e 	bne	r5,zero,8007008 <__ieee754_sqrt+0x264>
 8006f64:	0015883a 	mov	r10,zero
 8006f68:	3020d2fa 	srli	r16,r6,11
 8006f6c:	52bffac4 	addi	r10,r10,-21
 8006f70:	300c957a 	slli	r6,r6,21
 8006f74:	803ffc26 	beq	r16,zero,8006f68 <__alt_data_end+0xfc006f68>
 8006f78:	8080042c 	andhi	r2,r16,16
 8006f7c:	10001e1e 	bne	r2,zero,8006ff8 <__ieee754_sqrt+0x254>
 8006f80:	0005883a 	mov	r2,zero
 8006f84:	00000106 	br	8006f8c <__ieee754_sqrt+0x1e8>
 8006f88:	1805883a 	mov	r2,r3
 8006f8c:	8421883a 	add	r16,r16,r16
 8006f90:	8100042c 	andhi	r4,r16,16
 8006f94:	10c00044 	addi	r3,r2,1
 8006f98:	203ffb26 	beq	r4,zero,8006f88 <__alt_data_end+0xfc006f88>
 8006f9c:	01000804 	movi	r4,32
 8006fa0:	20c9c83a 	sub	r4,r4,r3
 8006fa4:	3108d83a 	srl	r4,r6,r4
 8006fa8:	5095c83a 	sub	r10,r10,r2
 8006fac:	30cc983a 	sll	r6,r6,r3
 8006fb0:	2420b03a 	or	r16,r4,r16
 8006fb4:	003f8806 	br	8006dd8 <__alt_data_end+0xfc006dd8>
 8006fb8:	280f883a 	mov	r7,r5
 8006fbc:	800a9840 	call	800a984 <__muldf3>
 8006fc0:	880d883a 	mov	r6,r17
 8006fc4:	800f883a 	mov	r7,r16
 8006fc8:	1009883a 	mov	r4,r2
 8006fcc:	180b883a 	mov	r5,r3
 8006fd0:	80094b00 	call	80094b0 <__adddf3>
 8006fd4:	003fcf06 	br	8006f14 <__alt_data_end+0xfc006f14>
 8006fd8:	2005883a 	mov	r2,r4
 8006fdc:	2807883a 	mov	r3,r5
 8006fe0:	003fcc06 	br	8006f14 <__alt_data_end+0xfc006f14>
 8006fe4:	603fba16 	blt	r12,zero,8006ed0 <__alt_data_end+0xfc006ed0>
 8006fe8:	003fb306 	br	8006eb8 <__alt_data_end+0xfc006eb8>
 8006fec:	4a400044 	addi	r9,r9,1
 8006ff0:	0005883a 	mov	r2,zero
 8006ff4:	003fc006 	br	8006ef8 <__alt_data_end+0xfc006ef8>
 8006ff8:	01000804 	movi	r4,32
 8006ffc:	00bfffc4 	movi	r2,-1
 8007000:	0007883a 	mov	r3,zero
 8007004:	003fe706 	br	8006fa4 <__alt_data_end+0xfc006fa4>
 8007008:	200d883a 	mov	r6,r4
 800700c:	280f883a 	mov	r7,r5
 8007010:	800b1f00 	call	800b1f0 <__subdf3>
 8007014:	100d883a 	mov	r6,r2
 8007018:	180f883a 	mov	r7,r3
 800701c:	1009883a 	mov	r4,r2
 8007020:	180b883a 	mov	r5,r3
 8007024:	8009d5c0 	call	8009d5c <__divdf3>
 8007028:	003fba06 	br	8006f14 <__alt_data_end+0xfc006f14>

0800702c <__ieee754_sqrtf>:
 800702c:	00a00034 	movhi	r2,32768
 8007030:	defffe04 	addi	sp,sp,-8
 8007034:	10bfffc4 	addi	r2,r2,-1
 8007038:	00dfe034 	movhi	r3,32640
 800703c:	dc000015 	stw	r16,0(sp)
 8007040:	dfc00115 	stw	ra,4(sp)
 8007044:	1104703a 	and	r2,r2,r4
 8007048:	18ffffc4 	addi	r3,r3,-1
 800704c:	2021883a 	mov	r16,r4
 8007050:	200b883a 	mov	r5,r4
 8007054:	18803836 	bltu	r3,r2,8007138 <__ieee754_sqrtf+0x10c>
 8007058:	10003226 	beq	r2,zero,8007124 <__ieee754_sqrtf+0xf8>
 800705c:	2007883a 	mov	r3,r4
 8007060:	20003f16 	blt	r4,zero,8007160 <__ieee754_sqrtf+0x134>
 8007064:	200bd5fa 	srai	r5,r4,23
 8007068:	01002034 	movhi	r4,128
 800706c:	213fffc4 	addi	r4,r4,-1
 8007070:	20800a36 	bltu	r4,r2,800709c <__ieee754_sqrtf+0x70>
 8007074:	8400202c 	andhi	r16,r16,128
 8007078:	80003f1e 	bne	r16,zero,8007178 <__ieee754_sqrtf+0x14c>
 800707c:	0005883a 	mov	r2,zero
 8007080:	00000106 	br	8007088 <__ieee754_sqrtf+0x5c>
 8007084:	3005883a 	mov	r2,r6
 8007088:	18c7883a 	add	r3,r3,r3
 800708c:	1900202c 	andhi	r4,r3,128
 8007090:	11800044 	addi	r6,r2,1
 8007094:	203ffb26 	beq	r4,zero,8007084 <__alt_data_end+0xfc007084>
 8007098:	288bc83a 	sub	r5,r5,r2
 800709c:	00802034 	movhi	r2,128
 80070a0:	293fe044 	addi	r4,r5,-127
 80070a4:	10bfffc4 	addi	r2,r2,-1
 80070a8:	1884703a 	and	r2,r3,r2
 80070ac:	2140004c 	andi	r5,r4,1
 80070b0:	10802034 	orhi	r2,r2,128
 80070b4:	2800281e 	bne	r5,zero,8007158 <__ieee754_sqrtf+0x12c>
 80070b8:	2021d07a 	srai	r16,r4,1
 80070bc:	1085883a 	add	r2,r2,r2
 80070c0:	01000644 	movi	r4,25
 80070c4:	000f883a 	mov	r7,zero
 80070c8:	000d883a 	mov	r6,zero
 80070cc:	00c04034 	movhi	r3,256
 80070d0:	30cb883a 	add	r5,r6,r3
 80070d4:	213fffc4 	addi	r4,r4,-1
 80070d8:	11400316 	blt	r2,r5,80070e8 <__ieee754_sqrtf+0xbc>
 80070dc:	28cd883a 	add	r6,r5,r3
 80070e0:	1145c83a 	sub	r2,r2,r5
 80070e4:	38cf883a 	add	r7,r7,r3
 80070e8:	1085883a 	add	r2,r2,r2
 80070ec:	1806d07a 	srli	r3,r3,1
 80070f0:	203ff71e 	bne	r4,zero,80070d0 <__alt_data_end+0xfc0070d0>
 80070f4:	10000226 	beq	r2,zero,8007100 <__ieee754_sqrtf+0xd4>
 80070f8:	3880004c 	andi	r2,r7,1
 80070fc:	388f883a 	add	r7,r7,r2
 8007100:	380fd07a 	srai	r7,r7,1
 8007104:	802095fa 	slli	r16,r16,23
 8007108:	008fc034 	movhi	r2,16128
 800710c:	388f883a 	add	r7,r7,r2
 8007110:	81c5883a 	add	r2,r16,r7
 8007114:	dfc00117 	ldw	ra,4(sp)
 8007118:	dc000017 	ldw	r16,0(sp)
 800711c:	dec00204 	addi	sp,sp,8
 8007120:	f800283a 	ret
 8007124:	2005883a 	mov	r2,r4
 8007128:	dfc00117 	ldw	ra,4(sp)
 800712c:	dc000017 	ldw	r16,0(sp)
 8007130:	dec00204 	addi	sp,sp,8
 8007134:	f800283a 	ret
 8007138:	8008a080 	call	8008a08 <__mulsf3>
 800713c:	800b883a 	mov	r5,r16
 8007140:	1009883a 	mov	r4,r2
 8007144:	8007f7c0 	call	8007f7c <__addsf3>
 8007148:	dfc00117 	ldw	ra,4(sp)
 800714c:	dc000017 	ldw	r16,0(sp)
 8007150:	dec00204 	addi	sp,sp,8
 8007154:	f800283a 	ret
 8007158:	1085883a 	add	r2,r2,r2
 800715c:	003fd606 	br	80070b8 <__alt_data_end+0xfc0070b8>
 8007160:	200b883a 	mov	r5,r4
 8007164:	8008e380 	call	8008e38 <__subsf3>
 8007168:	100b883a 	mov	r5,r2
 800716c:	1009883a 	mov	r4,r2
 8007170:	80084440 	call	8008444 <__divsf3>
 8007174:	003fec06 	br	8007128 <__alt_data_end+0xfc007128>
 8007178:	00bfffc4 	movi	r2,-1
 800717c:	003fc606 	br	8007098 <__alt_data_end+0xfc007098>

08007180 <fabs>:
 8007180:	00e00034 	movhi	r3,32768
 8007184:	18ffffc4 	addi	r3,r3,-1
 8007188:	2005883a 	mov	r2,r4
 800718c:	28c6703a 	and	r3,r5,r3
 8007190:	f800283a 	ret

08007194 <finite>:
 8007194:	00a00034 	movhi	r2,32768
 8007198:	10bfffc4 	addi	r2,r2,-1
 800719c:	288a703a 	and	r5,r5,r2
 80071a0:	00e00434 	movhi	r3,32784
 80071a4:	28c5883a 	add	r2,r5,r3
 80071a8:	1004d7fa 	srli	r2,r2,31
 80071ac:	f800283a 	ret

080071b0 <__fpclassifyd>:
 80071b0:	00a00034 	movhi	r2,32768
 80071b4:	10bfffc4 	addi	r2,r2,-1
 80071b8:	2884703a 	and	r2,r5,r2
 80071bc:	10000726 	beq	r2,zero,80071dc <__fpclassifyd+0x2c>
 80071c0:	00fffc34 	movhi	r3,65520
 80071c4:	019ff834 	movhi	r6,32736
 80071c8:	28c7883a 	add	r3,r5,r3
 80071cc:	31bfffc4 	addi	r6,r6,-1
 80071d0:	30c00536 	bltu	r6,r3,80071e8 <__fpclassifyd+0x38>
 80071d4:	00800104 	movi	r2,4
 80071d8:	f800283a 	ret
 80071dc:	2000021e 	bne	r4,zero,80071e8 <__fpclassifyd+0x38>
 80071e0:	00800084 	movi	r2,2
 80071e4:	f800283a 	ret
 80071e8:	00dffc34 	movhi	r3,32752
 80071ec:	019ff834 	movhi	r6,32736
 80071f0:	28cb883a 	add	r5,r5,r3
 80071f4:	31bfffc4 	addi	r6,r6,-1
 80071f8:	317ff62e 	bgeu	r6,r5,80071d4 <__alt_data_end+0xfc0071d4>
 80071fc:	01400434 	movhi	r5,16
 8007200:	297fffc4 	addi	r5,r5,-1
 8007204:	28800236 	bltu	r5,r2,8007210 <__fpclassifyd+0x60>
 8007208:	008000c4 	movi	r2,3
 800720c:	f800283a 	ret
 8007210:	10c00226 	beq	r2,r3,800721c <__fpclassifyd+0x6c>
 8007214:	0005883a 	mov	r2,zero
 8007218:	f800283a 	ret
 800721c:	2005003a 	cmpeq	r2,r4,zero
 8007220:	f800283a 	ret

08007224 <matherr>:
 8007224:	0005883a 	mov	r2,zero
 8007228:	f800283a 	ret

0800722c <nan>:
 800722c:	0005883a 	mov	r2,zero
 8007230:	00dffe34 	movhi	r3,32760
 8007234:	f800283a 	ret

08007238 <rint>:
 8007238:	2813d53a 	srai	r9,r5,20
 800723c:	defff904 	addi	sp,sp,-28
 8007240:	dc000215 	stw	r16,8(sp)
 8007244:	4a41ffcc 	andi	r9,r9,2047
 8007248:	dfc00615 	stw	ra,24(sp)
 800724c:	dcc00515 	stw	r19,20(sp)
 8007250:	dc800415 	stw	r18,16(sp)
 8007254:	dc400315 	stw	r17,12(sp)
 8007258:	01c004c4 	movi	r7,19
 800725c:	49bf0044 	addi	r6,r9,-1023
 8007260:	2811883a 	mov	r8,r5
 8007264:	2005883a 	mov	r2,r4
 8007268:	2807883a 	mov	r3,r5
 800726c:	2015883a 	mov	r10,r4
 8007270:	2820d7fa 	srli	r16,r5,31
 8007274:	39801316 	blt	r7,r6,80072c4 <rint+0x8c>
 8007278:	30003d16 	blt	r6,zero,8007370 <rint+0x138>
 800727c:	01000434 	movhi	r4,16
 8007280:	213fffc4 	addi	r4,r4,-1
 8007284:	2189d83a 	sra	r4,r4,r6
 8007288:	290a703a 	and	r5,r5,r4
 800728c:	288ab03a 	or	r5,r5,r2
 8007290:	28001026 	beq	r5,zero,80072d4 <rint+0x9c>
 8007294:	2008d07a 	srli	r4,r4,1
 8007298:	4104703a 	and	r2,r8,r4
 800729c:	1294b03a 	or	r10,r2,r10
 80072a0:	50005626 	beq	r10,zero,80073fc <rint+0x1c4>
 80072a4:	31c05d26 	beq	r6,r7,800741c <rint+0x1e4>
 80072a8:	0015883a 	mov	r10,zero
 80072ac:	00c00134 	movhi	r3,4
 80072b0:	1987d83a 	sra	r3,r3,r6
 80072b4:	0108303a 	nor	r4,zero,r4
 80072b8:	2210703a 	and	r8,r4,r8
 80072bc:	40c6b03a 	or	r3,r8,r3
 80072c0:	00001806 	br	8007324 <rint+0xec>
 80072c4:	01c00cc4 	movi	r7,51
 80072c8:	3980090e 	bge	r7,r6,80072f0 <rint+0xb8>
 80072cc:	01c10004 	movi	r7,1024
 80072d0:	31c04e26 	beq	r6,r7,800740c <rint+0x1d4>
 80072d4:	dfc00617 	ldw	ra,24(sp)
 80072d8:	dcc00517 	ldw	r19,20(sp)
 80072dc:	dc800417 	ldw	r18,16(sp)
 80072e0:	dc400317 	ldw	r17,12(sp)
 80072e4:	dc000217 	ldw	r16,8(sp)
 80072e8:	dec00704 	addi	sp,sp,28
 80072ec:	f800283a 	ret
 80072f0:	4a7efb44 	addi	r9,r9,-1043
 80072f4:	013fffc4 	movi	r4,-1
 80072f8:	2248d83a 	srl	r4,r4,r9
 80072fc:	110a703a 	and	r5,r2,r4
 8007300:	28004026 	beq	r5,zero,8007404 <rint+0x1cc>
 8007304:	2008d07a 	srli	r4,r4,1
 8007308:	1104703a 	and	r2,r2,r4
 800730c:	10000526 	beq	r2,zero,8007324 <rint+0xec>
 8007310:	00900034 	movhi	r2,16384
 8007314:	1253d83a 	sra	r9,r2,r9
 8007318:	0108303a 	nor	r4,zero,r4
 800731c:	2294703a 	and	r10,r4,r10
 8007320:	4a94b03a 	or	r10,r9,r10
 8007324:	802090fa 	slli	r16,r16,3
 8007328:	180b883a 	mov	r5,r3
 800732c:	00c20d74 	movhi	r3,2101
 8007330:	18e0ff04 	addi	r3,r3,-31748
 8007334:	1c21883a 	add	r16,r3,r16
 8007338:	84400017 	ldw	r17,0(r16)
 800733c:	84000117 	ldw	r16,4(r16)
 8007340:	5009883a 	mov	r4,r10
 8007344:	880d883a 	mov	r6,r17
 8007348:	800f883a 	mov	r7,r16
 800734c:	80094b00 	call	80094b0 <__adddf3>
 8007350:	d8800015 	stw	r2,0(sp)
 8007354:	d8c00115 	stw	r3,4(sp)
 8007358:	d9000017 	ldw	r4,0(sp)
 800735c:	d9400117 	ldw	r5,4(sp)
 8007360:	880d883a 	mov	r6,r17
 8007364:	800f883a 	mov	r7,r16
 8007368:	800b1f00 	call	800b1f0 <__subdf3>
 800736c:	003fd906 	br	80072d4 <__alt_data_end+0xfc0072d4>
 8007370:	04600034 	movhi	r17,32768
 8007374:	8c7fffc4 	addi	r17,r17,-1
 8007378:	2c46703a 	and	r3,r5,r17
 800737c:	1906b03a 	or	r3,r3,r4
 8007380:	18002026 	beq	r3,zero,8007404 <rint+0x1cc>
 8007384:	01800434 	movhi	r6,16
 8007388:	31bfffc4 	addi	r6,r6,-1
 800738c:	298c703a 	and	r6,r5,r6
 8007390:	3104b03a 	or	r2,r6,r4
 8007394:	008bc83a 	sub	r5,zero,r2
 8007398:	800690fa 	slli	r3,r16,3
 800739c:	2884b03a 	or	r2,r5,r2
 80073a0:	01420d74 	movhi	r5,2101
 80073a4:	2960ff04 	addi	r5,r5,-31748
 80073a8:	28c7883a 	add	r3,r5,r3
 80073ac:	1004d33a 	srli	r2,r2,12
 80073b0:	1cc00017 	ldw	r19,0(r3)
 80073b4:	1c800117 	ldw	r18,4(r3)
 80073b8:	417fffac 	andhi	r5,r8,65534
 80073bc:	1080022c 	andhi	r2,r2,8
 80073c0:	980d883a 	mov	r6,r19
 80073c4:	900f883a 	mov	r7,r18
 80073c8:	114ab03a 	or	r5,r2,r5
 80073cc:	80094b00 	call	80094b0 <__adddf3>
 80073d0:	d8800015 	stw	r2,0(sp)
 80073d4:	d8c00115 	stw	r3,4(sp)
 80073d8:	d9000017 	ldw	r4,0(sp)
 80073dc:	d9400117 	ldw	r5,4(sp)
 80073e0:	980d883a 	mov	r6,r19
 80073e4:	900f883a 	mov	r7,r18
 80073e8:	800b1f00 	call	800b1f0 <__subdf3>
 80073ec:	800897fa 	slli	r4,r16,31
 80073f0:	1c46703a 	and	r3,r3,r17
 80073f4:	1906b03a 	or	r3,r3,r4
 80073f8:	003fb606 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80073fc:	0015883a 	mov	r10,zero
 8007400:	003fc806 	br	8007324 <__alt_data_end+0xfc007324>
 8007404:	4007883a 	mov	r3,r8
 8007408:	003fb206 	br	80072d4 <__alt_data_end+0xfc0072d4>
 800740c:	200d883a 	mov	r6,r4
 8007410:	280f883a 	mov	r7,r5
 8007414:	80094b00 	call	80094b0 <__adddf3>
 8007418:	003fae06 	br	80072d4 <__alt_data_end+0xfc0072d4>
 800741c:	02a00034 	movhi	r10,32768
 8007420:	003fa206 	br	80072ac <__alt_data_end+0xfc0072ac>

08007424 <scalbn>:
 8007424:	2a1ffc2c 	andhi	r8,r5,32752
 8007428:	4011d53a 	srai	r8,r8,20
 800742c:	defffe04 	addi	sp,sp,-8
 8007430:	dc000015 	stw	r16,0(sp)
 8007434:	dfc00115 	stw	ra,4(sp)
 8007438:	280f883a 	mov	r7,r5
 800743c:	2015883a 	mov	r10,r4
 8007440:	3021883a 	mov	r16,r6
 8007444:	40001e1e 	bne	r8,zero,80074c0 <scalbn+0x9c>
 8007448:	00a00034 	movhi	r2,32768
 800744c:	10bfffc4 	addi	r2,r2,-1
 8007450:	2884703a 	and	r2,r5,r2
 8007454:	1104b03a 	or	r2,r2,r4
 8007458:	10002226 	beq	r2,zero,80074e4 <scalbn+0xc0>
 800745c:	01d0d434 	movhi	r7,17232
 8007460:	000d883a 	mov	r6,zero
 8007464:	800a9840 	call	800a984 <__muldf3>
 8007468:	013ffff4 	movhi	r4,65535
 800746c:	210f2c04 	addi	r4,r4,15536
 8007470:	1015883a 	mov	r10,r2
 8007474:	180f883a 	mov	r7,r3
 8007478:	81002a16 	blt	r16,r4,8007524 <scalbn+0x100>
 800747c:	191ffc2c 	andhi	r4,r3,32752
 8007480:	2009d53a 	srai	r4,r4,20
 8007484:	223ff284 	addi	r8,r4,-54
 8007488:	8211883a 	add	r8,r16,r8
 800748c:	0081ff84 	movi	r2,2046
 8007490:	12002f16 	blt	r2,r8,8007550 <scalbn+0x12c>
 8007494:	0200190e 	bge	zero,r8,80074fc <scalbn+0xd8>
 8007498:	4010953a 	slli	r8,r8,20
 800749c:	01600434 	movhi	r5,32784
 80074a0:	297fffc4 	addi	r5,r5,-1
 80074a4:	194e703a 	and	r7,r3,r5
 80074a8:	5005883a 	mov	r2,r10
 80074ac:	3a06b03a 	or	r3,r7,r8
 80074b0:	dfc00117 	ldw	ra,4(sp)
 80074b4:	dc000017 	ldw	r16,0(sp)
 80074b8:	dec00204 	addi	sp,sp,8
 80074bc:	f800283a 	ret
 80074c0:	0081ffc4 	movi	r2,2047
 80074c4:	2807883a 	mov	r3,r5
 80074c8:	40bfef1e 	bne	r8,r2,8007488 <__alt_data_end+0xfc007488>
 80074cc:	200d883a 	mov	r6,r4
 80074d0:	80094b00 	call	80094b0 <__adddf3>
 80074d4:	dfc00117 	ldw	ra,4(sp)
 80074d8:	dc000017 	ldw	r16,0(sp)
 80074dc:	dec00204 	addi	sp,sp,8
 80074e0:	f800283a 	ret
 80074e4:	2005883a 	mov	r2,r4
 80074e8:	2807883a 	mov	r3,r5
 80074ec:	dfc00117 	ldw	ra,4(sp)
 80074f0:	dc000017 	ldw	r16,0(sp)
 80074f4:	dec00204 	addi	sp,sp,8
 80074f8:	f800283a 	ret
 80074fc:	00bff2c4 	movi	r2,-53
 8007500:	4080240e 	bge	r8,r2,8007594 <scalbn+0x170>
 8007504:	00b0d414 	movui	r2,50000
 8007508:	14001116 	blt	r2,r16,8007550 <scalbn+0x12c>
 800750c:	0130be74 	movhi	r4,49913
 8007510:	01406974 	movhi	r5,421
 8007514:	213cd644 	addi	r4,r4,-3239
 8007518:	295b87c4 	addi	r5,r5,28191
 800751c:	500d883a 	mov	r6,r10
 8007520:	80076180 	call	8007618 <copysign>
 8007524:	01b0be74 	movhi	r6,49913
 8007528:	01c06974 	movhi	r7,421
 800752c:	31bcd644 	addi	r6,r6,-3239
 8007530:	39db87c4 	addi	r7,r7,28191
 8007534:	1009883a 	mov	r4,r2
 8007538:	180b883a 	mov	r5,r3
 800753c:	800a9840 	call	800a984 <__muldf3>
 8007540:	dfc00117 	ldw	ra,4(sp)
 8007544:	dc000017 	ldw	r16,0(sp)
 8007548:	dec00204 	addi	sp,sp,8
 800754c:	f800283a 	ret
 8007550:	01220034 	movhi	r4,34816
 8007554:	015f8e34 	movhi	r5,32312
 8007558:	500d883a 	mov	r6,r10
 800755c:	211d6704 	addi	r4,r4,30108
 8007560:	29790f04 	addi	r5,r5,-7108
 8007564:	80076180 	call	8007618 <copysign>
 8007568:	01a20034 	movhi	r6,34816
 800756c:	01df8e34 	movhi	r7,32312
 8007570:	319d6704 	addi	r6,r6,30108
 8007574:	39f90f04 	addi	r7,r7,-7108
 8007578:	1009883a 	mov	r4,r2
 800757c:	180b883a 	mov	r5,r3
 8007580:	800a9840 	call	800a984 <__muldf3>
 8007584:	dfc00117 	ldw	ra,4(sp)
 8007588:	dc000017 	ldw	r16,0(sp)
 800758c:	dec00204 	addi	sp,sp,8
 8007590:	f800283a 	ret
 8007594:	42000d84 	addi	r8,r8,54
 8007598:	4012953a 	slli	r9,r8,20
 800759c:	01e00434 	movhi	r7,32784
 80075a0:	39ffffc4 	addi	r7,r7,-1
 80075a4:	19ca703a 	and	r5,r3,r7
 80075a8:	000d883a 	mov	r6,zero
 80075ac:	01cf2434 	movhi	r7,15504
 80075b0:	5009883a 	mov	r4,r10
 80075b4:	494ab03a 	or	r5,r9,r5
 80075b8:	800a9840 	call	800a984 <__muldf3>
 80075bc:	003fbc06 	br	80074b0 <__alt_data_end+0xfc0074b0>

080075c0 <__fpclassifyf>:
 80075c0:	00a00034 	movhi	r2,32768
 80075c4:	10bfffc4 	addi	r2,r2,-1
 80075c8:	2088703a 	and	r4,r4,r2
 80075cc:	2000021e 	bne	r4,zero,80075d8 <__fpclassifyf+0x18>
 80075d0:	00800084 	movi	r2,2
 80075d4:	f800283a 	ret
 80075d8:	00bfe034 	movhi	r2,65408
 80075dc:	00dfc034 	movhi	r3,32512
 80075e0:	2085883a 	add	r2,r4,r2
 80075e4:	18ffffc4 	addi	r3,r3,-1
 80075e8:	18800236 	bltu	r3,r2,80075f4 <__fpclassifyf+0x34>
 80075ec:	00800104 	movi	r2,4
 80075f0:	f800283a 	ret
 80075f4:	00c02034 	movhi	r3,128
 80075f8:	20bfffc4 	addi	r2,r4,-1
 80075fc:	18ffff84 	addi	r3,r3,-2
 8007600:	18800236 	bltu	r3,r2,800760c <__fpclassifyf+0x4c>
 8007604:	008000c4 	movi	r2,3
 8007608:	f800283a 	ret
 800760c:	009fe034 	movhi	r2,32640
 8007610:	2085003a 	cmpeq	r2,r4,r2
 8007614:	f800283a 	ret

08007618 <copysign>:
 8007618:	2005883a 	mov	r2,r4
 800761c:	01200034 	movhi	r4,32768
 8007620:	213fffc4 	addi	r4,r4,-1
 8007624:	38e0002c 	andhi	r3,r7,32768
 8007628:	290a703a 	and	r5,r5,r4
 800762c:	28c6b03a 	or	r3,r5,r3
 8007630:	f800283a 	ret

08007634 <__fixunssfsi>:
 8007634:	defffd04 	addi	sp,sp,-12
 8007638:	dc000015 	stw	r16,0(sp)
 800763c:	0413c034 	movhi	r16,20224
 8007640:	800b883a 	mov	r5,r16
 8007644:	dc400115 	stw	r17,4(sp)
 8007648:	dfc00215 	stw	ra,8(sp)
 800764c:	2023883a 	mov	r17,r4
 8007650:	80088840 	call	8008884 <__gesf2>
 8007654:	1000070e 	bge	r2,zero,8007674 <__fixunssfsi+0x40>
 8007658:	8809883a 	mov	r4,r17
 800765c:	800931c0 	call	800931c <__fixsfsi>
 8007660:	dfc00217 	ldw	ra,8(sp)
 8007664:	dc400117 	ldw	r17,4(sp)
 8007668:	dc000017 	ldw	r16,0(sp)
 800766c:	dec00304 	addi	sp,sp,12
 8007670:	f800283a 	ret
 8007674:	800b883a 	mov	r5,r16
 8007678:	8809883a 	mov	r4,r17
 800767c:	8008e380 	call	8008e38 <__subsf3>
 8007680:	1009883a 	mov	r4,r2
 8007684:	800931c0 	call	800931c <__fixsfsi>
 8007688:	00e00034 	movhi	r3,32768
 800768c:	10c5883a 	add	r2,r2,r3
 8007690:	003ff306 	br	8007660 <__alt_data_end+0xfc007660>

08007694 <__fixunsdfsi>:
 8007694:	defffd04 	addi	sp,sp,-12
 8007698:	000d883a 	mov	r6,zero
 800769c:	01d07834 	movhi	r7,16864
 80076a0:	dc400115 	stw	r17,4(sp)
 80076a4:	dc000015 	stw	r16,0(sp)
 80076a8:	dfc00215 	stw	ra,8(sp)
 80076ac:	2023883a 	mov	r17,r4
 80076b0:	2821883a 	mov	r16,r5
 80076b4:	800a7b40 	call	800a7b4 <__gedf2>
 80076b8:	1000080e 	bge	r2,zero,80076dc <__fixunsdfsi+0x48>
 80076bc:	8809883a 	mov	r4,r17
 80076c0:	800b883a 	mov	r5,r16
 80076c4:	800baec0 	call	800baec <__fixdfsi>
 80076c8:	dfc00217 	ldw	ra,8(sp)
 80076cc:	dc400117 	ldw	r17,4(sp)
 80076d0:	dc000017 	ldw	r16,0(sp)
 80076d4:	dec00304 	addi	sp,sp,12
 80076d8:	f800283a 	ret
 80076dc:	000d883a 	mov	r6,zero
 80076e0:	01d07834 	movhi	r7,16864
 80076e4:	8809883a 	mov	r4,r17
 80076e8:	800b883a 	mov	r5,r16
 80076ec:	800b1f00 	call	800b1f0 <__subdf3>
 80076f0:	180b883a 	mov	r5,r3
 80076f4:	1009883a 	mov	r4,r2
 80076f8:	800baec0 	call	800baec <__fixdfsi>
 80076fc:	00e00034 	movhi	r3,32768
 8007700:	10c5883a 	add	r2,r2,r3
 8007704:	003ff006 	br	80076c8 <__alt_data_end+0xfc0076c8>

08007708 <__floatundisf>:
 8007708:	defffc04 	addi	sp,sp,-16
 800770c:	00800834 	movhi	r2,32
 8007710:	dc000015 	stw	r16,0(sp)
 8007714:	dfc00315 	stw	ra,12(sp)
 8007718:	dc800215 	stw	r18,8(sp)
 800771c:	dc400115 	stw	r17,4(sp)
 8007720:	10bfffc4 	addi	r2,r2,-1
 8007724:	2021883a 	mov	r16,r4
 8007728:	1140052e 	bgeu	r2,r5,8007740 <__floatundisf+0x38>
 800772c:	2081ffcc 	andi	r2,r4,2047
 8007730:	10000326 	beq	r2,zero,8007740 <__floatundisf+0x38>
 8007734:	00be0004 	movi	r2,-2048
 8007738:	20a0703a 	and	r16,r4,r2
 800773c:	84020014 	ori	r16,r16,2048
 8007740:	2809883a 	mov	r4,r5
 8007744:	800bc480 	call	800bc48 <__floatunsidf>
 8007748:	000d883a 	mov	r6,zero
 800774c:	01d07c34 	movhi	r7,16880
 8007750:	180b883a 	mov	r5,r3
 8007754:	1009883a 	mov	r4,r2
 8007758:	800a9840 	call	800a984 <__muldf3>
 800775c:	8009883a 	mov	r4,r16
 8007760:	1025883a 	mov	r18,r2
 8007764:	1823883a 	mov	r17,r3
 8007768:	800bc480 	call	800bc48 <__floatunsidf>
 800776c:	900d883a 	mov	r6,r18
 8007770:	880f883a 	mov	r7,r17
 8007774:	1009883a 	mov	r4,r2
 8007778:	180b883a 	mov	r5,r3
 800777c:	80094b00 	call	80094b0 <__adddf3>
 8007780:	1009883a 	mov	r4,r2
 8007784:	180b883a 	mov	r5,r3
 8007788:	800be000 	call	800be00 <__truncdfsf2>
 800778c:	dfc00317 	ldw	ra,12(sp)
 8007790:	dc800217 	ldw	r18,8(sp)
 8007794:	dc400117 	ldw	r17,4(sp)
 8007798:	dc000017 	ldw	r16,0(sp)
 800779c:	dec00404 	addi	sp,sp,16
 80077a0:	f800283a 	ret

080077a4 <__udivdi3>:
 80077a4:	defff404 	addi	sp,sp,-48
 80077a8:	dcc00515 	stw	r19,20(sp)
 80077ac:	dc000215 	stw	r16,8(sp)
 80077b0:	dfc00b15 	stw	ra,44(sp)
 80077b4:	df000a15 	stw	fp,40(sp)
 80077b8:	ddc00915 	stw	r23,36(sp)
 80077bc:	dd800815 	stw	r22,32(sp)
 80077c0:	dd400715 	stw	r21,28(sp)
 80077c4:	dd000615 	stw	r20,24(sp)
 80077c8:	dc800415 	stw	r18,16(sp)
 80077cc:	dc400315 	stw	r17,12(sp)
 80077d0:	2027883a 	mov	r19,r4
 80077d4:	2821883a 	mov	r16,r5
 80077d8:	3800461e 	bne	r7,zero,80078f4 <__udivdi3+0x150>
 80077dc:	3023883a 	mov	r17,r6
 80077e0:	2025883a 	mov	r18,r4
 80077e4:	2980572e 	bgeu	r5,r6,8007944 <__udivdi3+0x1a0>
 80077e8:	00bfffd4 	movui	r2,65535
 80077ec:	282d883a 	mov	r22,r5
 80077f0:	1180b236 	bltu	r2,r6,8007abc <__udivdi3+0x318>
 80077f4:	00803fc4 	movi	r2,255
 80077f8:	1185803a 	cmpltu	r2,r2,r6
 80077fc:	100490fa 	slli	r2,r2,3
 8007800:	3086d83a 	srl	r3,r6,r2
 8007804:	01020d74 	movhi	r4,2101
 8007808:	21210304 	addi	r4,r4,-31732
 800780c:	20c7883a 	add	r3,r4,r3
 8007810:	18c00003 	ldbu	r3,0(r3)
 8007814:	1885883a 	add	r2,r3,r2
 8007818:	00c00804 	movi	r3,32
 800781c:	1887c83a 	sub	r3,r3,r2
 8007820:	18000526 	beq	r3,zero,8007838 <__udivdi3+0x94>
 8007824:	80e0983a 	sll	r16,r16,r3
 8007828:	9884d83a 	srl	r2,r19,r2
 800782c:	30e2983a 	sll	r17,r6,r3
 8007830:	98e4983a 	sll	r18,r19,r3
 8007834:	142cb03a 	or	r22,r2,r16
 8007838:	882ad43a 	srli	r21,r17,16
 800783c:	b009883a 	mov	r4,r22
 8007840:	8d3fffcc 	andi	r20,r17,65535
 8007844:	a80b883a 	mov	r5,r21
 8007848:	8007efc0 	call	8007efc <__umodsi3>
 800784c:	b009883a 	mov	r4,r22
 8007850:	a80b883a 	mov	r5,r21
 8007854:	1027883a 	mov	r19,r2
 8007858:	8007e980 	call	8007e98 <__udivsi3>
 800785c:	100b883a 	mov	r5,r2
 8007860:	a009883a 	mov	r4,r20
 8007864:	102d883a 	mov	r22,r2
 8007868:	8007f540 	call	8007f54 <__mulsi3>
 800786c:	9826943a 	slli	r19,r19,16
 8007870:	9006d43a 	srli	r3,r18,16
 8007874:	1cc6b03a 	or	r3,r3,r19
 8007878:	1880052e 	bgeu	r3,r2,8007890 <__udivdi3+0xec>
 800787c:	1c47883a 	add	r3,r3,r17
 8007880:	b13fffc4 	addi	r4,r22,-1
 8007884:	1c400136 	bltu	r3,r17,800788c <__udivdi3+0xe8>
 8007888:	18814236 	bltu	r3,r2,8007d94 <__udivdi3+0x5f0>
 800788c:	202d883a 	mov	r22,r4
 8007890:	18a1c83a 	sub	r16,r3,r2
 8007894:	8009883a 	mov	r4,r16
 8007898:	a80b883a 	mov	r5,r21
 800789c:	8007efc0 	call	8007efc <__umodsi3>
 80078a0:	1027883a 	mov	r19,r2
 80078a4:	8009883a 	mov	r4,r16
 80078a8:	a80b883a 	mov	r5,r21
 80078ac:	9826943a 	slli	r19,r19,16
 80078b0:	8007e980 	call	8007e98 <__udivsi3>
 80078b4:	100b883a 	mov	r5,r2
 80078b8:	a009883a 	mov	r4,r20
 80078bc:	94bfffcc 	andi	r18,r18,65535
 80078c0:	1021883a 	mov	r16,r2
 80078c4:	94e4b03a 	or	r18,r18,r19
 80078c8:	8007f540 	call	8007f54 <__mulsi3>
 80078cc:	9080052e 	bgeu	r18,r2,80078e4 <__udivdi3+0x140>
 80078d0:	8ca5883a 	add	r18,r17,r18
 80078d4:	80ffffc4 	addi	r3,r16,-1
 80078d8:	94410c36 	bltu	r18,r17,8007d0c <__udivdi3+0x568>
 80078dc:	90810b2e 	bgeu	r18,r2,8007d0c <__udivdi3+0x568>
 80078e0:	843fff84 	addi	r16,r16,-2
 80078e4:	b004943a 	slli	r2,r22,16
 80078e8:	0007883a 	mov	r3,zero
 80078ec:	1404b03a 	or	r2,r2,r16
 80078f0:	00005e06 	br	8007a6c <__udivdi3+0x2c8>
 80078f4:	29c05b36 	bltu	r5,r7,8007a64 <__udivdi3+0x2c0>
 80078f8:	00bfffd4 	movui	r2,65535
 80078fc:	11c0672e 	bgeu	r2,r7,8007a9c <__udivdi3+0x2f8>
 8007900:	00804034 	movhi	r2,256
 8007904:	10bfffc4 	addi	r2,r2,-1
 8007908:	11c10a36 	bltu	r2,r7,8007d34 <__udivdi3+0x590>
 800790c:	00800404 	movi	r2,16
 8007910:	3886d83a 	srl	r3,r7,r2
 8007914:	01020d74 	movhi	r4,2101
 8007918:	21210304 	addi	r4,r4,-31732
 800791c:	20c7883a 	add	r3,r4,r3
 8007920:	18c00003 	ldbu	r3,0(r3)
 8007924:	05c00804 	movi	r23,32
 8007928:	1885883a 	add	r2,r3,r2
 800792c:	b8afc83a 	sub	r23,r23,r2
 8007930:	b800671e 	bne	r23,zero,8007ad0 <__udivdi3+0x32c>
 8007934:	3c010536 	bltu	r7,r16,8007d4c <__udivdi3+0x5a8>
 8007938:	9985403a 	cmpgeu	r2,r19,r6
 800793c:	0007883a 	mov	r3,zero
 8007940:	00004a06 	br	8007a6c <__udivdi3+0x2c8>
 8007944:	3000041e 	bne	r6,zero,8007958 <__udivdi3+0x1b4>
 8007948:	000b883a 	mov	r5,zero
 800794c:	01000044 	movi	r4,1
 8007950:	8007e980 	call	8007e98 <__udivsi3>
 8007954:	1023883a 	mov	r17,r2
 8007958:	00bfffd4 	movui	r2,65535
 800795c:	1440532e 	bgeu	r2,r17,8007aac <__udivdi3+0x308>
 8007960:	00804034 	movhi	r2,256
 8007964:	10bfffc4 	addi	r2,r2,-1
 8007968:	1440f436 	bltu	r2,r17,8007d3c <__udivdi3+0x598>
 800796c:	00800404 	movi	r2,16
 8007970:	8886d83a 	srl	r3,r17,r2
 8007974:	01020d74 	movhi	r4,2101
 8007978:	21210304 	addi	r4,r4,-31732
 800797c:	20c7883a 	add	r3,r4,r3
 8007980:	18c00003 	ldbu	r3,0(r3)
 8007984:	1885883a 	add	r2,r3,r2
 8007988:	00c00804 	movi	r3,32
 800798c:	1887c83a 	sub	r3,r3,r2
 8007990:	1800a51e 	bne	r3,zero,8007c28 <__udivdi3+0x484>
 8007994:	882ad43a 	srli	r21,r17,16
 8007998:	8461c83a 	sub	r16,r16,r17
 800799c:	8d3fffcc 	andi	r20,r17,65535
 80079a0:	00c00044 	movi	r3,1
 80079a4:	a80b883a 	mov	r5,r21
 80079a8:	8009883a 	mov	r4,r16
 80079ac:	d8c00115 	stw	r3,4(sp)
 80079b0:	8007efc0 	call	8007efc <__umodsi3>
 80079b4:	a80b883a 	mov	r5,r21
 80079b8:	8009883a 	mov	r4,r16
 80079bc:	1027883a 	mov	r19,r2
 80079c0:	8007e980 	call	8007e98 <__udivsi3>
 80079c4:	a00b883a 	mov	r5,r20
 80079c8:	1009883a 	mov	r4,r2
 80079cc:	102d883a 	mov	r22,r2
 80079d0:	8007f540 	call	8007f54 <__mulsi3>
 80079d4:	9826943a 	slli	r19,r19,16
 80079d8:	900ed43a 	srli	r7,r18,16
 80079dc:	d8c00117 	ldw	r3,4(sp)
 80079e0:	3cceb03a 	or	r7,r7,r19
 80079e4:	3880052e 	bgeu	r7,r2,80079fc <__udivdi3+0x258>
 80079e8:	3c4f883a 	add	r7,r7,r17
 80079ec:	b13fffc4 	addi	r4,r22,-1
 80079f0:	3c400136 	bltu	r7,r17,80079f8 <__udivdi3+0x254>
 80079f4:	3880e436 	bltu	r7,r2,8007d88 <__udivdi3+0x5e4>
 80079f8:	202d883a 	mov	r22,r4
 80079fc:	38a1c83a 	sub	r16,r7,r2
 8007a00:	8009883a 	mov	r4,r16
 8007a04:	a80b883a 	mov	r5,r21
 8007a08:	d8c00115 	stw	r3,4(sp)
 8007a0c:	8007efc0 	call	8007efc <__umodsi3>
 8007a10:	1027883a 	mov	r19,r2
 8007a14:	8009883a 	mov	r4,r16
 8007a18:	a80b883a 	mov	r5,r21
 8007a1c:	9826943a 	slli	r19,r19,16
 8007a20:	8007e980 	call	8007e98 <__udivsi3>
 8007a24:	a00b883a 	mov	r5,r20
 8007a28:	1009883a 	mov	r4,r2
 8007a2c:	94bfffcc 	andi	r18,r18,65535
 8007a30:	1021883a 	mov	r16,r2
 8007a34:	94e4b03a 	or	r18,r18,r19
 8007a38:	8007f540 	call	8007f54 <__mulsi3>
 8007a3c:	d8c00117 	ldw	r3,4(sp)
 8007a40:	9080052e 	bgeu	r18,r2,8007a58 <__udivdi3+0x2b4>
 8007a44:	8ca5883a 	add	r18,r17,r18
 8007a48:	813fffc4 	addi	r4,r16,-1
 8007a4c:	9440ad36 	bltu	r18,r17,8007d04 <__udivdi3+0x560>
 8007a50:	9080ac2e 	bgeu	r18,r2,8007d04 <__udivdi3+0x560>
 8007a54:	843fff84 	addi	r16,r16,-2
 8007a58:	b004943a 	slli	r2,r22,16
 8007a5c:	1404b03a 	or	r2,r2,r16
 8007a60:	00000206 	br	8007a6c <__udivdi3+0x2c8>
 8007a64:	0007883a 	mov	r3,zero
 8007a68:	0005883a 	mov	r2,zero
 8007a6c:	dfc00b17 	ldw	ra,44(sp)
 8007a70:	df000a17 	ldw	fp,40(sp)
 8007a74:	ddc00917 	ldw	r23,36(sp)
 8007a78:	dd800817 	ldw	r22,32(sp)
 8007a7c:	dd400717 	ldw	r21,28(sp)
 8007a80:	dd000617 	ldw	r20,24(sp)
 8007a84:	dcc00517 	ldw	r19,20(sp)
 8007a88:	dc800417 	ldw	r18,16(sp)
 8007a8c:	dc400317 	ldw	r17,12(sp)
 8007a90:	dc000217 	ldw	r16,8(sp)
 8007a94:	dec00c04 	addi	sp,sp,48
 8007a98:	f800283a 	ret
 8007a9c:	00803fc4 	movi	r2,255
 8007aa0:	11c5803a 	cmpltu	r2,r2,r7
 8007aa4:	100490fa 	slli	r2,r2,3
 8007aa8:	003f9906 	br	8007910 <__alt_data_end+0xfc007910>
 8007aac:	00803fc4 	movi	r2,255
 8007ab0:	1445803a 	cmpltu	r2,r2,r17
 8007ab4:	100490fa 	slli	r2,r2,3
 8007ab8:	003fad06 	br	8007970 <__alt_data_end+0xfc007970>
 8007abc:	00804034 	movhi	r2,256
 8007ac0:	10bfffc4 	addi	r2,r2,-1
 8007ac4:	11809f36 	bltu	r2,r6,8007d44 <__udivdi3+0x5a0>
 8007ac8:	00800404 	movi	r2,16
 8007acc:	003f4c06 	br	8007800 <__alt_data_end+0xfc007800>
 8007ad0:	3dce983a 	sll	r7,r7,r23
 8007ad4:	30b8d83a 	srl	fp,r6,r2
 8007ad8:	80a2d83a 	srl	r17,r16,r2
 8007adc:	35cc983a 	sll	r6,r6,r23
 8007ae0:	3f38b03a 	or	fp,r7,fp
 8007ae4:	e024d43a 	srli	r18,fp,16
 8007ae8:	9884d83a 	srl	r2,r19,r2
 8007aec:	85e0983a 	sll	r16,r16,r23
 8007af0:	8809883a 	mov	r4,r17
 8007af4:	900b883a 	mov	r5,r18
 8007af8:	d9800015 	stw	r6,0(sp)
 8007afc:	1420b03a 	or	r16,r2,r16
 8007b00:	8007efc0 	call	8007efc <__umodsi3>
 8007b04:	900b883a 	mov	r5,r18
 8007b08:	8809883a 	mov	r4,r17
 8007b0c:	1029883a 	mov	r20,r2
 8007b10:	e5bfffcc 	andi	r22,fp,65535
 8007b14:	8007e980 	call	8007e98 <__udivsi3>
 8007b18:	100b883a 	mov	r5,r2
 8007b1c:	b009883a 	mov	r4,r22
 8007b20:	102b883a 	mov	r21,r2
 8007b24:	8007f540 	call	8007f54 <__mulsi3>
 8007b28:	a028943a 	slli	r20,r20,16
 8007b2c:	8006d43a 	srli	r3,r16,16
 8007b30:	1d06b03a 	or	r3,r3,r20
 8007b34:	1880042e 	bgeu	r3,r2,8007b48 <__udivdi3+0x3a4>
 8007b38:	1f07883a 	add	r3,r3,fp
 8007b3c:	a93fffc4 	addi	r4,r21,-1
 8007b40:	1f00892e 	bgeu	r3,fp,8007d68 <__udivdi3+0x5c4>
 8007b44:	202b883a 	mov	r21,r4
 8007b48:	18a3c83a 	sub	r17,r3,r2
 8007b4c:	8809883a 	mov	r4,r17
 8007b50:	900b883a 	mov	r5,r18
 8007b54:	8007efc0 	call	8007efc <__umodsi3>
 8007b58:	1029883a 	mov	r20,r2
 8007b5c:	8809883a 	mov	r4,r17
 8007b60:	900b883a 	mov	r5,r18
 8007b64:	a028943a 	slli	r20,r20,16
 8007b68:	8007e980 	call	8007e98 <__udivsi3>
 8007b6c:	100b883a 	mov	r5,r2
 8007b70:	b009883a 	mov	r4,r22
 8007b74:	843fffcc 	andi	r16,r16,65535
 8007b78:	1023883a 	mov	r17,r2
 8007b7c:	8520b03a 	or	r16,r16,r20
 8007b80:	8007f540 	call	8007f54 <__mulsi3>
 8007b84:	8080042e 	bgeu	r16,r2,8007b98 <__udivdi3+0x3f4>
 8007b88:	8721883a 	add	r16,r16,fp
 8007b8c:	88ffffc4 	addi	r3,r17,-1
 8007b90:	8700712e 	bgeu	r16,fp,8007d58 <__udivdi3+0x5b4>
 8007b94:	1823883a 	mov	r17,r3
 8007b98:	a80e943a 	slli	r7,r21,16
 8007b9c:	d8c00017 	ldw	r3,0(sp)
 8007ba0:	80a1c83a 	sub	r16,r16,r2
 8007ba4:	3c64b03a 	or	r18,r7,r17
 8007ba8:	1d3fffcc 	andi	r20,r3,65535
 8007bac:	9022d43a 	srli	r17,r18,16
 8007bb0:	95bfffcc 	andi	r22,r18,65535
 8007bb4:	a00b883a 	mov	r5,r20
 8007bb8:	b009883a 	mov	r4,r22
 8007bbc:	182ad43a 	srli	r21,r3,16
 8007bc0:	8007f540 	call	8007f54 <__mulsi3>
 8007bc4:	a00b883a 	mov	r5,r20
 8007bc8:	8809883a 	mov	r4,r17
 8007bcc:	1039883a 	mov	fp,r2
 8007bd0:	8007f540 	call	8007f54 <__mulsi3>
 8007bd4:	8809883a 	mov	r4,r17
 8007bd8:	a80b883a 	mov	r5,r21
 8007bdc:	1029883a 	mov	r20,r2
 8007be0:	8007f540 	call	8007f54 <__mulsi3>
 8007be4:	a80b883a 	mov	r5,r21
 8007be8:	b009883a 	mov	r4,r22
 8007bec:	1023883a 	mov	r17,r2
 8007bf0:	8007f540 	call	8007f54 <__mulsi3>
 8007bf4:	e006d43a 	srli	r3,fp,16
 8007bf8:	1505883a 	add	r2,r2,r20
 8007bfc:	1887883a 	add	r3,r3,r2
 8007c00:	1d00022e 	bgeu	r3,r20,8007c0c <__udivdi3+0x468>
 8007c04:	00800074 	movhi	r2,1
 8007c08:	88a3883a 	add	r17,r17,r2
 8007c0c:	1804d43a 	srli	r2,r3,16
 8007c10:	1463883a 	add	r17,r2,r17
 8007c14:	84404436 	bltu	r16,r17,8007d28 <__udivdi3+0x584>
 8007c18:	84403e26 	beq	r16,r17,8007d14 <__udivdi3+0x570>
 8007c1c:	9005883a 	mov	r2,r18
 8007c20:	0007883a 	mov	r3,zero
 8007c24:	003f9106 	br	8007a6c <__alt_data_end+0xfc007a6c>
 8007c28:	88e2983a 	sll	r17,r17,r3
 8007c2c:	80aed83a 	srl	r23,r16,r2
 8007c30:	80e0983a 	sll	r16,r16,r3
 8007c34:	882ad43a 	srli	r21,r17,16
 8007c38:	9884d83a 	srl	r2,r19,r2
 8007c3c:	b809883a 	mov	r4,r23
 8007c40:	a80b883a 	mov	r5,r21
 8007c44:	98e4983a 	sll	r18,r19,r3
 8007c48:	142cb03a 	or	r22,r2,r16
 8007c4c:	8007efc0 	call	8007efc <__umodsi3>
 8007c50:	b809883a 	mov	r4,r23
 8007c54:	a80b883a 	mov	r5,r21
 8007c58:	1027883a 	mov	r19,r2
 8007c5c:	8d3fffcc 	andi	r20,r17,65535
 8007c60:	8007e980 	call	8007e98 <__udivsi3>
 8007c64:	a009883a 	mov	r4,r20
 8007c68:	100b883a 	mov	r5,r2
 8007c6c:	102f883a 	mov	r23,r2
 8007c70:	8007f540 	call	8007f54 <__mulsi3>
 8007c74:	9826943a 	slli	r19,r19,16
 8007c78:	b008d43a 	srli	r4,r22,16
 8007c7c:	24c8b03a 	or	r4,r4,r19
 8007c80:	2080062e 	bgeu	r4,r2,8007c9c <__udivdi3+0x4f8>
 8007c84:	2449883a 	add	r4,r4,r17
 8007c88:	b8ffffc4 	addi	r3,r23,-1
 8007c8c:	24403c36 	bltu	r4,r17,8007d80 <__udivdi3+0x5dc>
 8007c90:	20803b2e 	bgeu	r4,r2,8007d80 <__udivdi3+0x5dc>
 8007c94:	bdffff84 	addi	r23,r23,-2
 8007c98:	2449883a 	add	r4,r4,r17
 8007c9c:	20a1c83a 	sub	r16,r4,r2
 8007ca0:	a80b883a 	mov	r5,r21
 8007ca4:	8009883a 	mov	r4,r16
 8007ca8:	8007efc0 	call	8007efc <__umodsi3>
 8007cac:	a80b883a 	mov	r5,r21
 8007cb0:	8009883a 	mov	r4,r16
 8007cb4:	1027883a 	mov	r19,r2
 8007cb8:	8007e980 	call	8007e98 <__udivsi3>
 8007cbc:	a009883a 	mov	r4,r20
 8007cc0:	100b883a 	mov	r5,r2
 8007cc4:	9826943a 	slli	r19,r19,16
 8007cc8:	1039883a 	mov	fp,r2
 8007ccc:	8007f540 	call	8007f54 <__mulsi3>
 8007cd0:	b13fffcc 	andi	r4,r22,65535
 8007cd4:	24c8b03a 	or	r4,r4,r19
 8007cd8:	2080062e 	bgeu	r4,r2,8007cf4 <__udivdi3+0x550>
 8007cdc:	2449883a 	add	r4,r4,r17
 8007ce0:	e0ffffc4 	addi	r3,fp,-1
 8007ce4:	24402436 	bltu	r4,r17,8007d78 <__udivdi3+0x5d4>
 8007ce8:	2080232e 	bgeu	r4,r2,8007d78 <__udivdi3+0x5d4>
 8007cec:	e73fff84 	addi	fp,fp,-2
 8007cf0:	2449883a 	add	r4,r4,r17
 8007cf4:	b82e943a 	slli	r23,r23,16
 8007cf8:	20a1c83a 	sub	r16,r4,r2
 8007cfc:	bf06b03a 	or	r3,r23,fp
 8007d00:	003f2806 	br	80079a4 <__alt_data_end+0xfc0079a4>
 8007d04:	2021883a 	mov	r16,r4
 8007d08:	003f5306 	br	8007a58 <__alt_data_end+0xfc007a58>
 8007d0c:	1821883a 	mov	r16,r3
 8007d10:	003ef406 	br	80078e4 <__alt_data_end+0xfc0078e4>
 8007d14:	1806943a 	slli	r3,r3,16
 8007d18:	9de6983a 	sll	r19,r19,r23
 8007d1c:	e73fffcc 	andi	fp,fp,65535
 8007d20:	1f07883a 	add	r3,r3,fp
 8007d24:	98ffbd2e 	bgeu	r19,r3,8007c1c <__alt_data_end+0xfc007c1c>
 8007d28:	90bfffc4 	addi	r2,r18,-1
 8007d2c:	0007883a 	mov	r3,zero
 8007d30:	003f4e06 	br	8007a6c <__alt_data_end+0xfc007a6c>
 8007d34:	00800604 	movi	r2,24
 8007d38:	003ef506 	br	8007910 <__alt_data_end+0xfc007910>
 8007d3c:	00800604 	movi	r2,24
 8007d40:	003f0b06 	br	8007970 <__alt_data_end+0xfc007970>
 8007d44:	00800604 	movi	r2,24
 8007d48:	003ead06 	br	8007800 <__alt_data_end+0xfc007800>
 8007d4c:	0007883a 	mov	r3,zero
 8007d50:	00800044 	movi	r2,1
 8007d54:	003f4506 	br	8007a6c <__alt_data_end+0xfc007a6c>
 8007d58:	80bf8e2e 	bgeu	r16,r2,8007b94 <__alt_data_end+0xfc007b94>
 8007d5c:	8c7fff84 	addi	r17,r17,-2
 8007d60:	8721883a 	add	r16,r16,fp
 8007d64:	003f8c06 	br	8007b98 <__alt_data_end+0xfc007b98>
 8007d68:	18bf762e 	bgeu	r3,r2,8007b44 <__alt_data_end+0xfc007b44>
 8007d6c:	ad7fff84 	addi	r21,r21,-2
 8007d70:	1f07883a 	add	r3,r3,fp
 8007d74:	003f7406 	br	8007b48 <__alt_data_end+0xfc007b48>
 8007d78:	1839883a 	mov	fp,r3
 8007d7c:	003fdd06 	br	8007cf4 <__alt_data_end+0xfc007cf4>
 8007d80:	182f883a 	mov	r23,r3
 8007d84:	003fc506 	br	8007c9c <__alt_data_end+0xfc007c9c>
 8007d88:	b5bfff84 	addi	r22,r22,-2
 8007d8c:	3c4f883a 	add	r7,r7,r17
 8007d90:	003f1a06 	br	80079fc <__alt_data_end+0xfc0079fc>
 8007d94:	b5bfff84 	addi	r22,r22,-2
 8007d98:	1c47883a 	add	r3,r3,r17
 8007d9c:	003ebc06 	br	8007890 <__alt_data_end+0xfc007890>

08007da0 <__divsi3>:
 8007da0:	20001b16 	blt	r4,zero,8007e10 <__divsi3+0x70>
 8007da4:	000f883a 	mov	r7,zero
 8007da8:	28001616 	blt	r5,zero,8007e04 <__divsi3+0x64>
 8007dac:	200d883a 	mov	r6,r4
 8007db0:	29001a2e 	bgeu	r5,r4,8007e1c <__divsi3+0x7c>
 8007db4:	00800804 	movi	r2,32
 8007db8:	00c00044 	movi	r3,1
 8007dbc:	00000106 	br	8007dc4 <__divsi3+0x24>
 8007dc0:	10000d26 	beq	r2,zero,8007df8 <__divsi3+0x58>
 8007dc4:	294b883a 	add	r5,r5,r5
 8007dc8:	10bfffc4 	addi	r2,r2,-1
 8007dcc:	18c7883a 	add	r3,r3,r3
 8007dd0:	293ffb36 	bltu	r5,r4,8007dc0 <__alt_data_end+0xfc007dc0>
 8007dd4:	0005883a 	mov	r2,zero
 8007dd8:	18000726 	beq	r3,zero,8007df8 <__divsi3+0x58>
 8007ddc:	0005883a 	mov	r2,zero
 8007de0:	31400236 	bltu	r6,r5,8007dec <__divsi3+0x4c>
 8007de4:	314dc83a 	sub	r6,r6,r5
 8007de8:	10c4b03a 	or	r2,r2,r3
 8007dec:	1806d07a 	srli	r3,r3,1
 8007df0:	280ad07a 	srli	r5,r5,1
 8007df4:	183ffa1e 	bne	r3,zero,8007de0 <__alt_data_end+0xfc007de0>
 8007df8:	38000126 	beq	r7,zero,8007e00 <__divsi3+0x60>
 8007dfc:	0085c83a 	sub	r2,zero,r2
 8007e00:	f800283a 	ret
 8007e04:	014bc83a 	sub	r5,zero,r5
 8007e08:	39c0005c 	xori	r7,r7,1
 8007e0c:	003fe706 	br	8007dac <__alt_data_end+0xfc007dac>
 8007e10:	0109c83a 	sub	r4,zero,r4
 8007e14:	01c00044 	movi	r7,1
 8007e18:	003fe306 	br	8007da8 <__alt_data_end+0xfc007da8>
 8007e1c:	00c00044 	movi	r3,1
 8007e20:	003fee06 	br	8007ddc <__alt_data_end+0xfc007ddc>

08007e24 <__modsi3>:
 8007e24:	20001716 	blt	r4,zero,8007e84 <__modsi3+0x60>
 8007e28:	000f883a 	mov	r7,zero
 8007e2c:	2005883a 	mov	r2,r4
 8007e30:	28001216 	blt	r5,zero,8007e7c <__modsi3+0x58>
 8007e34:	2900162e 	bgeu	r5,r4,8007e90 <__modsi3+0x6c>
 8007e38:	01800804 	movi	r6,32
 8007e3c:	00c00044 	movi	r3,1
 8007e40:	00000106 	br	8007e48 <__modsi3+0x24>
 8007e44:	30000a26 	beq	r6,zero,8007e70 <__modsi3+0x4c>
 8007e48:	294b883a 	add	r5,r5,r5
 8007e4c:	31bfffc4 	addi	r6,r6,-1
 8007e50:	18c7883a 	add	r3,r3,r3
 8007e54:	293ffb36 	bltu	r5,r4,8007e44 <__alt_data_end+0xfc007e44>
 8007e58:	18000526 	beq	r3,zero,8007e70 <__modsi3+0x4c>
 8007e5c:	1806d07a 	srli	r3,r3,1
 8007e60:	11400136 	bltu	r2,r5,8007e68 <__modsi3+0x44>
 8007e64:	1145c83a 	sub	r2,r2,r5
 8007e68:	280ad07a 	srli	r5,r5,1
 8007e6c:	183ffb1e 	bne	r3,zero,8007e5c <__alt_data_end+0xfc007e5c>
 8007e70:	38000126 	beq	r7,zero,8007e78 <__modsi3+0x54>
 8007e74:	0085c83a 	sub	r2,zero,r2
 8007e78:	f800283a 	ret
 8007e7c:	014bc83a 	sub	r5,zero,r5
 8007e80:	003fec06 	br	8007e34 <__alt_data_end+0xfc007e34>
 8007e84:	0109c83a 	sub	r4,zero,r4
 8007e88:	01c00044 	movi	r7,1
 8007e8c:	003fe706 	br	8007e2c <__alt_data_end+0xfc007e2c>
 8007e90:	00c00044 	movi	r3,1
 8007e94:	003ff106 	br	8007e5c <__alt_data_end+0xfc007e5c>

08007e98 <__udivsi3>:
 8007e98:	200d883a 	mov	r6,r4
 8007e9c:	2900152e 	bgeu	r5,r4,8007ef4 <__udivsi3+0x5c>
 8007ea0:	28001416 	blt	r5,zero,8007ef4 <__udivsi3+0x5c>
 8007ea4:	00800804 	movi	r2,32
 8007ea8:	00c00044 	movi	r3,1
 8007eac:	00000206 	br	8007eb8 <__udivsi3+0x20>
 8007eb0:	10000e26 	beq	r2,zero,8007eec <__udivsi3+0x54>
 8007eb4:	28000516 	blt	r5,zero,8007ecc <__udivsi3+0x34>
 8007eb8:	294b883a 	add	r5,r5,r5
 8007ebc:	10bfffc4 	addi	r2,r2,-1
 8007ec0:	18c7883a 	add	r3,r3,r3
 8007ec4:	293ffa36 	bltu	r5,r4,8007eb0 <__alt_data_end+0xfc007eb0>
 8007ec8:	18000826 	beq	r3,zero,8007eec <__udivsi3+0x54>
 8007ecc:	0005883a 	mov	r2,zero
 8007ed0:	31400236 	bltu	r6,r5,8007edc <__udivsi3+0x44>
 8007ed4:	314dc83a 	sub	r6,r6,r5
 8007ed8:	10c4b03a 	or	r2,r2,r3
 8007edc:	1806d07a 	srli	r3,r3,1
 8007ee0:	280ad07a 	srli	r5,r5,1
 8007ee4:	183ffa1e 	bne	r3,zero,8007ed0 <__alt_data_end+0xfc007ed0>
 8007ee8:	f800283a 	ret
 8007eec:	0005883a 	mov	r2,zero
 8007ef0:	f800283a 	ret
 8007ef4:	00c00044 	movi	r3,1
 8007ef8:	003ff406 	br	8007ecc <__alt_data_end+0xfc007ecc>

08007efc <__umodsi3>:
 8007efc:	2005883a 	mov	r2,r4
 8007f00:	2900122e 	bgeu	r5,r4,8007f4c <__umodsi3+0x50>
 8007f04:	28001116 	blt	r5,zero,8007f4c <__umodsi3+0x50>
 8007f08:	01800804 	movi	r6,32
 8007f0c:	00c00044 	movi	r3,1
 8007f10:	00000206 	br	8007f1c <__umodsi3+0x20>
 8007f14:	30000c26 	beq	r6,zero,8007f48 <__umodsi3+0x4c>
 8007f18:	28000516 	blt	r5,zero,8007f30 <__umodsi3+0x34>
 8007f1c:	294b883a 	add	r5,r5,r5
 8007f20:	31bfffc4 	addi	r6,r6,-1
 8007f24:	18c7883a 	add	r3,r3,r3
 8007f28:	293ffa36 	bltu	r5,r4,8007f14 <__alt_data_end+0xfc007f14>
 8007f2c:	18000626 	beq	r3,zero,8007f48 <__umodsi3+0x4c>
 8007f30:	1806d07a 	srli	r3,r3,1
 8007f34:	11400136 	bltu	r2,r5,8007f3c <__umodsi3+0x40>
 8007f38:	1145c83a 	sub	r2,r2,r5
 8007f3c:	280ad07a 	srli	r5,r5,1
 8007f40:	183ffb1e 	bne	r3,zero,8007f30 <__alt_data_end+0xfc007f30>
 8007f44:	f800283a 	ret
 8007f48:	f800283a 	ret
 8007f4c:	00c00044 	movi	r3,1
 8007f50:	003ff706 	br	8007f30 <__alt_data_end+0xfc007f30>

08007f54 <__mulsi3>:
 8007f54:	0005883a 	mov	r2,zero
 8007f58:	20000726 	beq	r4,zero,8007f78 <__mulsi3+0x24>
 8007f5c:	20c0004c 	andi	r3,r4,1
 8007f60:	2008d07a 	srli	r4,r4,1
 8007f64:	18000126 	beq	r3,zero,8007f6c <__mulsi3+0x18>
 8007f68:	1145883a 	add	r2,r2,r5
 8007f6c:	294b883a 	add	r5,r5,r5
 8007f70:	203ffa1e 	bne	r4,zero,8007f5c <__alt_data_end+0xfc007f5c>
 8007f74:	f800283a 	ret
 8007f78:	f800283a 	ret

08007f7c <__addsf3>:
 8007f7c:	defffc04 	addi	sp,sp,-16
 8007f80:	2004d7fa 	srli	r2,r4,31
 8007f84:	280cd5fa 	srli	r6,r5,23
 8007f88:	dc000015 	stw	r16,0(sp)
 8007f8c:	00c02034 	movhi	r3,128
 8007f90:	2020d5fa 	srli	r16,r4,23
 8007f94:	280ed7fa 	srli	r7,r5,31
 8007f98:	18ffffc4 	addi	r3,r3,-1
 8007f9c:	dc400115 	stw	r17,4(sp)
 8007fa0:	1908703a 	and	r4,r3,r4
 8007fa4:	194a703a 	and	r5,r3,r5
 8007fa8:	dfc00315 	stw	ra,12(sp)
 8007fac:	dc800215 	stw	r18,8(sp)
 8007fb0:	14403fcc 	andi	r17,r2,255
 8007fb4:	84003fcc 	andi	r16,r16,255
 8007fb8:	200890fa 	slli	r4,r4,3
 8007fbc:	31803fcc 	andi	r6,r6,255
 8007fc0:	280a90fa 	slli	r5,r5,3
 8007fc4:	89c05026 	beq	r17,r7,8008108 <__addsf3+0x18c>
 8007fc8:	8185c83a 	sub	r2,r16,r6
 8007fcc:	00807a0e 	bge	zero,r2,80081b8 <__addsf3+0x23c>
 8007fd0:	30001e1e 	bne	r6,zero,800804c <__addsf3+0xd0>
 8007fd4:	28006d1e 	bne	r5,zero,800818c <__addsf3+0x210>
 8007fd8:	208001cc 	andi	r2,r4,7
 8007fdc:	10000426 	beq	r2,zero,8007ff0 <__addsf3+0x74>
 8007fe0:	208003cc 	andi	r2,r4,15
 8007fe4:	00c00104 	movi	r3,4
 8007fe8:	10c00126 	beq	r2,r3,8007ff0 <__addsf3+0x74>
 8007fec:	20c9883a 	add	r4,r4,r3
 8007ff0:	2081002c 	andhi	r2,r4,1024
 8007ff4:	10003926 	beq	r2,zero,80080dc <__addsf3+0x160>
 8007ff8:	84000044 	addi	r16,r16,1
 8007ffc:	00803fc4 	movi	r2,255
 8008000:	80807826 	beq	r16,r2,80081e4 <__addsf3+0x268>
 8008004:	200891ba 	slli	r4,r4,6
 8008008:	8805883a 	mov	r2,r17
 800800c:	2008d27a 	srli	r4,r4,9
 8008010:	84003fcc 	andi	r16,r16,255
 8008014:	800695fa 	slli	r3,r16,23
 8008018:	10803fcc 	andi	r2,r2,255
 800801c:	04002034 	movhi	r16,128
 8008020:	843fffc4 	addi	r16,r16,-1
 8008024:	100497fa 	slli	r2,r2,31
 8008028:	2408703a 	and	r4,r4,r16
 800802c:	20e0b03a 	or	r16,r4,r3
 8008030:	8084b03a 	or	r2,r16,r2
 8008034:	dfc00317 	ldw	ra,12(sp)
 8008038:	dc800217 	ldw	r18,8(sp)
 800803c:	dc400117 	ldw	r17,4(sp)
 8008040:	dc000017 	ldw	r16,0(sp)
 8008044:	dec00404 	addi	sp,sp,16
 8008048:	f800283a 	ret
 800804c:	00c03fc4 	movi	r3,255
 8008050:	80ffe126 	beq	r16,r3,8007fd8 <__alt_data_end+0xfc007fd8>
 8008054:	29410034 	orhi	r5,r5,1024
 8008058:	00c006c4 	movi	r3,27
 800805c:	18807516 	blt	r3,r2,8008234 <__addsf3+0x2b8>
 8008060:	00c00804 	movi	r3,32
 8008064:	1887c83a 	sub	r3,r3,r2
 8008068:	28c6983a 	sll	r3,r5,r3
 800806c:	288ad83a 	srl	r5,r5,r2
 8008070:	1804c03a 	cmpne	r2,r3,zero
 8008074:	288ab03a 	or	r5,r5,r2
 8008078:	2149c83a 	sub	r4,r4,r5
 800807c:	2081002c 	andhi	r2,r4,1024
 8008080:	10001426 	beq	r2,zero,80080d4 <__addsf3+0x158>
 8008084:	04810034 	movhi	r18,1024
 8008088:	94bfffc4 	addi	r18,r18,-1
 800808c:	24a4703a 	and	r18,r4,r18
 8008090:	9009883a 	mov	r4,r18
 8008094:	800bfa80 	call	800bfa8 <__clzsi2>
 8008098:	10bffec4 	addi	r2,r2,-5
 800809c:	90a4983a 	sll	r18,r18,r2
 80080a0:	14005416 	blt	r2,r16,80081f4 <__addsf3+0x278>
 80080a4:	1405c83a 	sub	r2,r2,r16
 80080a8:	11000044 	addi	r4,r2,1
 80080ac:	00800804 	movi	r2,32
 80080b0:	1105c83a 	sub	r2,r2,r4
 80080b4:	9084983a 	sll	r2,r18,r2
 80080b8:	9124d83a 	srl	r18,r18,r4
 80080bc:	0021883a 	mov	r16,zero
 80080c0:	1008c03a 	cmpne	r4,r2,zero
 80080c4:	9108b03a 	or	r4,r18,r4
 80080c8:	003fc306 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80080cc:	1000db26 	beq	r2,zero,800843c <__addsf3+0x4c0>
 80080d0:	1009883a 	mov	r4,r2
 80080d4:	208001cc 	andi	r2,r4,7
 80080d8:	103fc11e 	bne	r2,zero,8007fe0 <__alt_data_end+0xfc007fe0>
 80080dc:	2006d0fa 	srli	r3,r4,3
 80080e0:	01003fc4 	movi	r4,255
 80080e4:	8805883a 	mov	r2,r17
 80080e8:	8100241e 	bne	r16,r4,800817c <__addsf3+0x200>
 80080ec:	18006e26 	beq	r3,zero,80082a8 <__addsf3+0x32c>
 80080f0:	19001034 	orhi	r4,r3,64
 80080f4:	00c02034 	movhi	r3,128
 80080f8:	18ffffc4 	addi	r3,r3,-1
 80080fc:	043fffc4 	movi	r16,-1
 8008100:	20c8703a 	and	r4,r4,r3
 8008104:	003fc206 	br	8008010 <__alt_data_end+0xfc008010>
 8008108:	8187c83a 	sub	r3,r16,r6
 800810c:	00c03e0e 	bge	zero,r3,8008208 <__addsf3+0x28c>
 8008110:	30002326 	beq	r6,zero,80081a0 <__addsf3+0x224>
 8008114:	01803fc4 	movi	r6,255
 8008118:	81bfaf26 	beq	r16,r6,8007fd8 <__alt_data_end+0xfc007fd8>
 800811c:	29410034 	orhi	r5,r5,1024
 8008120:	018006c4 	movi	r6,27
 8008124:	30c07416 	blt	r6,r3,80082f8 <__addsf3+0x37c>
 8008128:	01800804 	movi	r6,32
 800812c:	30cdc83a 	sub	r6,r6,r3
 8008130:	298c983a 	sll	r6,r5,r6
 8008134:	28cad83a 	srl	r5,r5,r3
 8008138:	3006c03a 	cmpne	r3,r6,zero
 800813c:	28cab03a 	or	r5,r5,r3
 8008140:	2149883a 	add	r4,r4,r5
 8008144:	20c1002c 	andhi	r3,r4,1024
 8008148:	183fe226 	beq	r3,zero,80080d4 <__alt_data_end+0xfc0080d4>
 800814c:	84000044 	addi	r16,r16,1
 8008150:	00c03fc4 	movi	r3,255
 8008154:	80c05426 	beq	r16,r3,80082a8 <__addsf3+0x32c>
 8008158:	00bf0034 	movhi	r2,64512
 800815c:	10bfffc4 	addi	r2,r2,-1
 8008160:	20c0004c 	andi	r3,r4,1
 8008164:	2088703a 	and	r4,r4,r2
 8008168:	2008d07a 	srli	r4,r4,1
 800816c:	20c8b03a 	or	r4,r4,r3
 8008170:	003f9906 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008174:	0007883a 	mov	r3,zero
 8008178:	0005883a 	mov	r2,zero
 800817c:	01002034 	movhi	r4,128
 8008180:	213fffc4 	addi	r4,r4,-1
 8008184:	1908703a 	and	r4,r3,r4
 8008188:	003fa106 	br	8008010 <__alt_data_end+0xfc008010>
 800818c:	10bfffc4 	addi	r2,r2,-1
 8008190:	103fb926 	beq	r2,zero,8008078 <__alt_data_end+0xfc008078>
 8008194:	00c03fc4 	movi	r3,255
 8008198:	80ffaf1e 	bne	r16,r3,8008058 <__alt_data_end+0xfc008058>
 800819c:	003f8e06 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80081a0:	283f8d26 	beq	r5,zero,8007fd8 <__alt_data_end+0xfc007fd8>
 80081a4:	18ffffc4 	addi	r3,r3,-1
 80081a8:	183fe526 	beq	r3,zero,8008140 <__alt_data_end+0xfc008140>
 80081ac:	01803fc4 	movi	r6,255
 80081b0:	81bfdb1e 	bne	r16,r6,8008120 <__alt_data_end+0xfc008120>
 80081b4:	003f8806 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80081b8:	1000201e 	bne	r2,zero,800823c <__addsf3+0x2c0>
 80081bc:	80800044 	addi	r2,r16,1
 80081c0:	10803fcc 	andi	r2,r2,255
 80081c4:	01800044 	movi	r6,1
 80081c8:	3080450e 	bge	r6,r2,80082e0 <__addsf3+0x364>
 80081cc:	2165c83a 	sub	r18,r4,r5
 80081d0:	90c1002c 	andhi	r3,r18,1024
 80081d4:	18002b26 	beq	r3,zero,8008284 <__addsf3+0x308>
 80081d8:	2925c83a 	sub	r18,r5,r4
 80081dc:	3823883a 	mov	r17,r7
 80081e0:	003fab06 	br	8008090 <__alt_data_end+0xfc008090>
 80081e4:	8805883a 	mov	r2,r17
 80081e8:	043fffc4 	movi	r16,-1
 80081ec:	0009883a 	mov	r4,zero
 80081f0:	003f8706 	br	8008010 <__alt_data_end+0xfc008010>
 80081f4:	013f0034 	movhi	r4,64512
 80081f8:	213fffc4 	addi	r4,r4,-1
 80081fc:	80a1c83a 	sub	r16,r16,r2
 8008200:	9108703a 	and	r4,r18,r4
 8008204:	003f7406 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008208:	1800411e 	bne	r3,zero,8008310 <__addsf3+0x394>
 800820c:	80c00044 	addi	r3,r16,1
 8008210:	19c03fcc 	andi	r7,r3,255
 8008214:	01800044 	movi	r6,1
 8008218:	31c0260e 	bge	r6,r7,80082b4 <__addsf3+0x338>
 800821c:	01803fc4 	movi	r6,255
 8008220:	19802126 	beq	r3,r6,80082a8 <__addsf3+0x32c>
 8008224:	2149883a 	add	r4,r4,r5
 8008228:	2008d07a 	srli	r4,r4,1
 800822c:	1821883a 	mov	r16,r3
 8008230:	003f6906 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008234:	01400044 	movi	r5,1
 8008238:	003f8f06 	br	8008078 <__alt_data_end+0xfc008078>
 800823c:	8000151e 	bne	r16,zero,8008294 <__addsf3+0x318>
 8008240:	20002f26 	beq	r4,zero,8008300 <__addsf3+0x384>
 8008244:	0084303a 	nor	r2,zero,r2
 8008248:	10000a26 	beq	r2,zero,8008274 <__addsf3+0x2f8>
 800824c:	00c03fc4 	movi	r3,255
 8008250:	30c02b26 	beq	r6,r3,8008300 <__addsf3+0x384>
 8008254:	00c006c4 	movi	r3,27
 8008258:	18806d16 	blt	r3,r2,8008410 <__addsf3+0x494>
 800825c:	00c00804 	movi	r3,32
 8008260:	1887c83a 	sub	r3,r3,r2
 8008264:	20c6983a 	sll	r3,r4,r3
 8008268:	2084d83a 	srl	r2,r4,r2
 800826c:	1808c03a 	cmpne	r4,r3,zero
 8008270:	1108b03a 	or	r4,r2,r4
 8008274:	2909c83a 	sub	r4,r5,r4
 8008278:	3021883a 	mov	r16,r6
 800827c:	3823883a 	mov	r17,r7
 8008280:	003f7e06 	br	800807c <__alt_data_end+0xfc00807c>
 8008284:	903f821e 	bne	r18,zero,8008090 <__alt_data_end+0xfc008090>
 8008288:	0005883a 	mov	r2,zero
 800828c:	0021883a 	mov	r16,zero
 8008290:	003fba06 	br	800817c <__alt_data_end+0xfc00817c>
 8008294:	00c03fc4 	movi	r3,255
 8008298:	30c01926 	beq	r6,r3,8008300 <__addsf3+0x384>
 800829c:	0085c83a 	sub	r2,zero,r2
 80082a0:	21010034 	orhi	r4,r4,1024
 80082a4:	003feb06 	br	8008254 <__alt_data_end+0xfc008254>
 80082a8:	043fffc4 	movi	r16,-1
 80082ac:	0009883a 	mov	r4,zero
 80082b0:	003f5706 	br	8008010 <__alt_data_end+0xfc008010>
 80082b4:	80004a1e 	bne	r16,zero,80083e0 <__addsf3+0x464>
 80082b8:	20005926 	beq	r4,zero,8008420 <__addsf3+0x4a4>
 80082bc:	283f4626 	beq	r5,zero,8007fd8 <__alt_data_end+0xfc007fd8>
 80082c0:	2149883a 	add	r4,r4,r5
 80082c4:	2081002c 	andhi	r2,r4,1024
 80082c8:	103f8226 	beq	r2,zero,80080d4 <__alt_data_end+0xfc0080d4>
 80082cc:	00bf0034 	movhi	r2,64512
 80082d0:	10bfffc4 	addi	r2,r2,-1
 80082d4:	3021883a 	mov	r16,r6
 80082d8:	2088703a 	and	r4,r4,r2
 80082dc:	003f3e06 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80082e0:	8000121e 	bne	r16,zero,800832c <__addsf3+0x3b0>
 80082e4:	2000261e 	bne	r4,zero,8008380 <__addsf3+0x404>
 80082e8:	283fa226 	beq	r5,zero,8008174 <__alt_data_end+0xfc008174>
 80082ec:	2809883a 	mov	r4,r5
 80082f0:	3823883a 	mov	r17,r7
 80082f4:	003f3806 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80082f8:	01400044 	movi	r5,1
 80082fc:	003f9006 	br	8008140 <__alt_data_end+0xfc008140>
 8008300:	2809883a 	mov	r4,r5
 8008304:	3021883a 	mov	r16,r6
 8008308:	3823883a 	mov	r17,r7
 800830c:	003f3206 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008310:	80000c1e 	bne	r16,zero,8008344 <__addsf3+0x3c8>
 8008314:	20002f26 	beq	r4,zero,80083d4 <__addsf3+0x458>
 8008318:	00c6303a 	nor	r3,zero,r3
 800831c:	18002b1e 	bne	r3,zero,80083cc <__addsf3+0x450>
 8008320:	2149883a 	add	r4,r4,r5
 8008324:	3021883a 	mov	r16,r6
 8008328:	003f8606 	br	8008144 <__alt_data_end+0xfc008144>
 800832c:	20001b1e 	bne	r4,zero,800839c <__addsf3+0x420>
 8008330:	28003926 	beq	r5,zero,8008418 <__addsf3+0x49c>
 8008334:	2809883a 	mov	r4,r5
 8008338:	3823883a 	mov	r17,r7
 800833c:	04003fc4 	movi	r16,255
 8008340:	003f2506 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008344:	01c03fc4 	movi	r7,255
 8008348:	31c02226 	beq	r6,r7,80083d4 <__addsf3+0x458>
 800834c:	00c7c83a 	sub	r3,zero,r3
 8008350:	21010034 	orhi	r4,r4,1024
 8008354:	01c006c4 	movi	r7,27
 8008358:	38c03616 	blt	r7,r3,8008434 <__addsf3+0x4b8>
 800835c:	01c00804 	movi	r7,32
 8008360:	38cfc83a 	sub	r7,r7,r3
 8008364:	21ce983a 	sll	r7,r4,r7
 8008368:	20c6d83a 	srl	r3,r4,r3
 800836c:	3808c03a 	cmpne	r4,r7,zero
 8008370:	1906b03a 	or	r3,r3,r4
 8008374:	1949883a 	add	r4,r3,r5
 8008378:	3021883a 	mov	r16,r6
 800837c:	003f7106 	br	8008144 <__alt_data_end+0xfc008144>
 8008380:	283f1526 	beq	r5,zero,8007fd8 <__alt_data_end+0xfc007fd8>
 8008384:	2145c83a 	sub	r2,r4,r5
 8008388:	10c1002c 	andhi	r3,r2,1024
 800838c:	183f4f26 	beq	r3,zero,80080cc <__alt_data_end+0xfc0080cc>
 8008390:	2909c83a 	sub	r4,r5,r4
 8008394:	3823883a 	mov	r17,r7
 8008398:	003f0f06 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 800839c:	28001a26 	beq	r5,zero,8008408 <__addsf3+0x48c>
 80083a0:	2008d0fa 	srli	r4,r4,3
 80083a4:	2080102c 	andhi	r2,r4,64
 80083a8:	10000526 	beq	r2,zero,80083c0 <__addsf3+0x444>
 80083ac:	280ad0fa 	srli	r5,r5,3
 80083b0:	2880102c 	andhi	r2,r5,64
 80083b4:	1000021e 	bne	r2,zero,80083c0 <__addsf3+0x444>
 80083b8:	2809883a 	mov	r4,r5
 80083bc:	3823883a 	mov	r17,r7
 80083c0:	200890fa 	slli	r4,r4,3
 80083c4:	04003fc4 	movi	r16,255
 80083c8:	003f0306 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80083cc:	01c03fc4 	movi	r7,255
 80083d0:	31ffe01e 	bne	r6,r7,8008354 <__alt_data_end+0xfc008354>
 80083d4:	2809883a 	mov	r4,r5
 80083d8:	3021883a 	mov	r16,r6
 80083dc:	003efe06 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 80083e0:	20001126 	beq	r4,zero,8008428 <__addsf3+0x4ac>
 80083e4:	28000826 	beq	r5,zero,8008408 <__addsf3+0x48c>
 80083e8:	2008d0fa 	srli	r4,r4,3
 80083ec:	2080102c 	andhi	r2,r4,64
 80083f0:	103ff326 	beq	r2,zero,80083c0 <__alt_data_end+0xfc0083c0>
 80083f4:	280ad0fa 	srli	r5,r5,3
 80083f8:	2880102c 	andhi	r2,r5,64
 80083fc:	103ff01e 	bne	r2,zero,80083c0 <__alt_data_end+0xfc0083c0>
 8008400:	2809883a 	mov	r4,r5
 8008404:	003fee06 	br	80083c0 <__alt_data_end+0xfc0083c0>
 8008408:	04003fc4 	movi	r16,255
 800840c:	003ef206 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008410:	01000044 	movi	r4,1
 8008414:	003f9706 	br	8008274 <__alt_data_end+0xfc008274>
 8008418:	0005883a 	mov	r2,zero
 800841c:	003f3406 	br	80080f0 <__alt_data_end+0xfc0080f0>
 8008420:	2809883a 	mov	r4,r5
 8008424:	003eec06 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008428:	2809883a 	mov	r4,r5
 800842c:	04003fc4 	movi	r16,255
 8008430:	003ee906 	br	8007fd8 <__alt_data_end+0xfc007fd8>
 8008434:	00c00044 	movi	r3,1
 8008438:	003fce06 	br	8008374 <__alt_data_end+0xfc008374>
 800843c:	0005883a 	mov	r2,zero
 8008440:	003f4e06 	br	800817c <__alt_data_end+0xfc00817c>

08008444 <__divsf3>:
 8008444:	defff504 	addi	sp,sp,-44
 8008448:	200cd5fa 	srli	r6,r4,23
 800844c:	dcc00415 	stw	r19,16(sp)
 8008450:	2026d7fa 	srli	r19,r4,31
 8008454:	00c02034 	movhi	r3,128
 8008458:	dd800715 	stw	r22,28(sp)
 800845c:	dd000515 	stw	r20,20(sp)
 8008460:	dc800315 	stw	r18,12(sp)
 8008464:	18ffffc4 	addi	r3,r3,-1
 8008468:	dfc00a15 	stw	ra,40(sp)
 800846c:	df000915 	stw	fp,36(sp)
 8008470:	ddc00815 	stw	r23,32(sp)
 8008474:	dd400615 	stw	r21,24(sp)
 8008478:	dc400215 	stw	r17,8(sp)
 800847c:	dc000115 	stw	r16,4(sp)
 8008480:	35003fcc 	andi	r20,r6,255
 8008484:	1924703a 	and	r18,r3,r4
 8008488:	9d803fcc 	andi	r22,r19,255
 800848c:	a0005226 	beq	r20,zero,80085d8 <__divsf3+0x194>
 8008490:	00803fc4 	movi	r2,255
 8008494:	a0802e26 	beq	r20,r2,8008550 <__divsf3+0x10c>
 8008498:	91002034 	orhi	r4,r18,128
 800849c:	202490fa 	slli	r18,r4,3
 80084a0:	a53fe044 	addi	r20,r20,-127
 80084a4:	0021883a 	mov	r16,zero
 80084a8:	002f883a 	mov	r23,zero
 80084ac:	280cd5fa 	srli	r6,r5,23
 80084b0:	282ad7fa 	srli	r21,r5,31
 80084b4:	00c02034 	movhi	r3,128
 80084b8:	18ffffc4 	addi	r3,r3,-1
 80084bc:	31803fcc 	andi	r6,r6,255
 80084c0:	1962703a 	and	r17,r3,r5
 80084c4:	af003fcc 	andi	fp,r21,255
 80084c8:	30004a26 	beq	r6,zero,80085f4 <__divsf3+0x1b0>
 80084cc:	00803fc4 	movi	r2,255
 80084d0:	30804526 	beq	r6,r2,80085e8 <__divsf3+0x1a4>
 80084d4:	89402034 	orhi	r5,r17,128
 80084d8:	282290fa 	slli	r17,r5,3
 80084dc:	31bfe044 	addi	r6,r6,-127
 80084e0:	000b883a 	mov	r5,zero
 80084e4:	2c20b03a 	or	r16,r5,r16
 80084e8:	802090ba 	slli	r16,r16,2
 80084ec:	00820074 	movhi	r2,2049
 80084f0:	10a14404 	addi	r2,r2,-31472
 80084f4:	80a1883a 	add	r16,r16,r2
 80084f8:	81000017 	ldw	r4,0(r16)
 80084fc:	9d46f03a 	xor	r3,r19,r21
 8008500:	180f883a 	mov	r7,r3
 8008504:	18803fcc 	andi	r2,r3,255
 8008508:	a18dc83a 	sub	r6,r20,r6
 800850c:	2000683a 	jmp	r4
 8008510:	080086f4 	orhi	zero,at,539
 8008514:	08008578 	rdprs	zero,at,533
 8008518:	080086e8 	cmpgeui	zero,at,539
 800851c:	08008564 	muli	zero,at,533
 8008520:	080086e8 	cmpgeui	zero,at,539
 8008524:	080086c0 	call	80086c <__alt_exception_stack_pointer+0x7ff86c>
 8008528:	080086e8 	cmpgeui	zero,at,539
 800852c:	08008564 	muli	zero,at,533
 8008530:	08008578 	rdprs	zero,at,533
 8008534:	08008578 	rdprs	zero,at,533
 8008538:	080086c0 	call	80086c <__alt_exception_stack_pointer+0x7ff86c>
 800853c:	08008564 	muli	zero,at,533
 8008540:	080087d4 	ori	zero,at,543
 8008544:	080087d4 	ori	zero,at,543
 8008548:	080087d4 	ori	zero,at,543
 800854c:	08008788 	cmpgei	zero,at,542
 8008550:	9000581e 	bne	r18,zero,80086b4 <__divsf3+0x270>
 8008554:	04000204 	movi	r16,8
 8008558:	05c00084 	movi	r23,2
 800855c:	003fd306 	br	80084ac <__alt_data_end+0xfc0084ac>
 8008560:	0023883a 	mov	r17,zero
 8008564:	e02d883a 	mov	r22,fp
 8008568:	282f883a 	mov	r23,r5
 800856c:	00800084 	movi	r2,2
 8008570:	b8808f1e 	bne	r23,r2,80087b0 <__divsf3+0x36c>
 8008574:	b005883a 	mov	r2,r22
 8008578:	11c0004c 	andi	r7,r2,1
 800857c:	013fffc4 	movi	r4,-1
 8008580:	000d883a 	mov	r6,zero
 8008584:	21003fcc 	andi	r4,r4,255
 8008588:	200895fa 	slli	r4,r4,23
 800858c:	38803fcc 	andi	r2,r7,255
 8008590:	00c02034 	movhi	r3,128
 8008594:	100497fa 	slli	r2,r2,31
 8008598:	18ffffc4 	addi	r3,r3,-1
 800859c:	30c6703a 	and	r3,r6,r3
 80085a0:	1906b03a 	or	r3,r3,r4
 80085a4:	1884b03a 	or	r2,r3,r2
 80085a8:	dfc00a17 	ldw	ra,40(sp)
 80085ac:	df000917 	ldw	fp,36(sp)
 80085b0:	ddc00817 	ldw	r23,32(sp)
 80085b4:	dd800717 	ldw	r22,28(sp)
 80085b8:	dd400617 	ldw	r21,24(sp)
 80085bc:	dd000517 	ldw	r20,20(sp)
 80085c0:	dcc00417 	ldw	r19,16(sp)
 80085c4:	dc800317 	ldw	r18,12(sp)
 80085c8:	dc400217 	ldw	r17,8(sp)
 80085cc:	dc000117 	ldw	r16,4(sp)
 80085d0:	dec00b04 	addi	sp,sp,44
 80085d4:	f800283a 	ret
 80085d8:	90002b1e 	bne	r18,zero,8008688 <__divsf3+0x244>
 80085dc:	04000104 	movi	r16,4
 80085e0:	05c00044 	movi	r23,1
 80085e4:	003fb106 	br	80084ac <__alt_data_end+0xfc0084ac>
 80085e8:	8800251e 	bne	r17,zero,8008680 <__divsf3+0x23c>
 80085ec:	01400084 	movi	r5,2
 80085f0:	00000206 	br	80085fc <__divsf3+0x1b8>
 80085f4:	88001a1e 	bne	r17,zero,8008660 <__divsf3+0x21c>
 80085f8:	01400044 	movi	r5,1
 80085fc:	8160b03a 	or	r16,r16,r5
 8008600:	802090ba 	slli	r16,r16,2
 8008604:	00c20074 	movhi	r3,2049
 8008608:	18e18804 	addi	r3,r3,-31200
 800860c:	80e1883a 	add	r16,r16,r3
 8008610:	80c00017 	ldw	r3,0(r16)
 8008614:	9d44f03a 	xor	r2,r19,r21
 8008618:	a18dc83a 	sub	r6,r20,r6
 800861c:	1800683a 	jmp	r3
 8008620:	08008578 	rdprs	zero,at,533
 8008624:	08008578 	rdprs	zero,at,533
 8008628:	080087c4 	addi	zero,at,543
 800862c:	08008560 	cmpeqi	zero,at,533
 8008630:	080087c4 	addi	zero,at,543
 8008634:	080086c0 	call	80086c <__alt_exception_stack_pointer+0x7ff86c>
 8008638:	080087c4 	addi	zero,at,543
 800863c:	08008560 	cmpeqi	zero,at,533
 8008640:	08008578 	rdprs	zero,at,533
 8008644:	08008578 	rdprs	zero,at,533
 8008648:	080086c0 	call	80086c <__alt_exception_stack_pointer+0x7ff86c>
 800864c:	08008560 	cmpeqi	zero,at,533
 8008650:	080087d4 	ori	zero,at,543
 8008654:	080087d4 	ori	zero,at,543
 8008658:	080087d4 	ori	zero,at,543
 800865c:	080087ec 	andhi	zero,at,543
 8008660:	8809883a 	mov	r4,r17
 8008664:	800bfa80 	call	800bfa8 <__clzsi2>
 8008668:	10fffec4 	addi	r3,r2,-5
 800866c:	10801d84 	addi	r2,r2,118
 8008670:	88e2983a 	sll	r17,r17,r3
 8008674:	008dc83a 	sub	r6,zero,r2
 8008678:	000b883a 	mov	r5,zero
 800867c:	003f9906 	br	80084e4 <__alt_data_end+0xfc0084e4>
 8008680:	014000c4 	movi	r5,3
 8008684:	003f9706 	br	80084e4 <__alt_data_end+0xfc0084e4>
 8008688:	9009883a 	mov	r4,r18
 800868c:	d9400015 	stw	r5,0(sp)
 8008690:	800bfa80 	call	800bfa8 <__clzsi2>
 8008694:	10fffec4 	addi	r3,r2,-5
 8008698:	11801d84 	addi	r6,r2,118
 800869c:	90e4983a 	sll	r18,r18,r3
 80086a0:	01a9c83a 	sub	r20,zero,r6
 80086a4:	0021883a 	mov	r16,zero
 80086a8:	002f883a 	mov	r23,zero
 80086ac:	d9400017 	ldw	r5,0(sp)
 80086b0:	003f7e06 	br	80084ac <__alt_data_end+0xfc0084ac>
 80086b4:	04000304 	movi	r16,12
 80086b8:	05c000c4 	movi	r23,3
 80086bc:	003f7b06 	br	80084ac <__alt_data_end+0xfc0084ac>
 80086c0:	01802034 	movhi	r6,128
 80086c4:	000f883a 	mov	r7,zero
 80086c8:	31bfffc4 	addi	r6,r6,-1
 80086cc:	013fffc4 	movi	r4,-1
 80086d0:	003fac06 	br	8008584 <__alt_data_end+0xfc008584>
 80086d4:	01400044 	movi	r5,1
 80086d8:	2909c83a 	sub	r4,r5,r4
 80086dc:	00c006c4 	movi	r3,27
 80086e0:	19004b0e 	bge	r3,r4,8008810 <__divsf3+0x3cc>
 80086e4:	114e703a 	and	r7,r2,r5
 80086e8:	0009883a 	mov	r4,zero
 80086ec:	000d883a 	mov	r6,zero
 80086f0:	003fa406 	br	8008584 <__alt_data_end+0xfc008584>
 80086f4:	9006917a 	slli	r3,r18,5
 80086f8:	8822917a 	slli	r17,r17,5
 80086fc:	1c40372e 	bgeu	r3,r17,80087dc <__divsf3+0x398>
 8008700:	31bfffc4 	addi	r6,r6,-1
 8008704:	010006c4 	movi	r4,27
 8008708:	000b883a 	mov	r5,zero
 800870c:	180f883a 	mov	r7,r3
 8008710:	294b883a 	add	r5,r5,r5
 8008714:	18c7883a 	add	r3,r3,r3
 8008718:	38000116 	blt	r7,zero,8008720 <__divsf3+0x2dc>
 800871c:	1c400236 	bltu	r3,r17,8008728 <__divsf3+0x2e4>
 8008720:	1c47c83a 	sub	r3,r3,r17
 8008724:	29400054 	ori	r5,r5,1
 8008728:	213fffc4 	addi	r4,r4,-1
 800872c:	203ff71e 	bne	r4,zero,800870c <__alt_data_end+0xfc00870c>
 8008730:	1806c03a 	cmpne	r3,r3,zero
 8008734:	1962b03a 	or	r17,r3,r5
 8008738:	31001fc4 	addi	r4,r6,127
 800873c:	013fe50e 	bge	zero,r4,80086d4 <__alt_data_end+0xfc0086d4>
 8008740:	88c001cc 	andi	r3,r17,7
 8008744:	18000426 	beq	r3,zero,8008758 <__divsf3+0x314>
 8008748:	88c003cc 	andi	r3,r17,15
 800874c:	01400104 	movi	r5,4
 8008750:	19400126 	beq	r3,r5,8008758 <__divsf3+0x314>
 8008754:	8963883a 	add	r17,r17,r5
 8008758:	88c2002c 	andhi	r3,r17,2048
 800875c:	18000426 	beq	r3,zero,8008770 <__divsf3+0x32c>
 8008760:	00fe0034 	movhi	r3,63488
 8008764:	18ffffc4 	addi	r3,r3,-1
 8008768:	31002004 	addi	r4,r6,128
 800876c:	88e2703a 	and	r17,r17,r3
 8008770:	00c03f84 	movi	r3,254
 8008774:	193f8016 	blt	r3,r4,8008578 <__alt_data_end+0xfc008578>
 8008778:	880c91ba 	slli	r6,r17,6
 800877c:	11c0004c 	andi	r7,r2,1
 8008780:	300cd27a 	srli	r6,r6,9
 8008784:	003f7f06 	br	8008584 <__alt_data_end+0xfc008584>
 8008788:	9080102c 	andhi	r2,r18,64
 800878c:	10000226 	beq	r2,zero,8008798 <__divsf3+0x354>
 8008790:	8880102c 	andhi	r2,r17,64
 8008794:	10001826 	beq	r2,zero,80087f8 <__divsf3+0x3b4>
 8008798:	00802034 	movhi	r2,128
 800879c:	91801034 	orhi	r6,r18,64
 80087a0:	10bfffc4 	addi	r2,r2,-1
 80087a4:	980f883a 	mov	r7,r19
 80087a8:	308c703a 	and	r6,r6,r2
 80087ac:	003fc706 	br	80086cc <__alt_data_end+0xfc0086cc>
 80087b0:	008000c4 	movi	r2,3
 80087b4:	b8802d26 	beq	r23,r2,800886c <__divsf3+0x428>
 80087b8:	00c00044 	movi	r3,1
 80087bc:	b005883a 	mov	r2,r22
 80087c0:	b8ffdd1e 	bne	r23,r3,8008738 <__alt_data_end+0xfc008738>
 80087c4:	11c0004c 	andi	r7,r2,1
 80087c8:	0009883a 	mov	r4,zero
 80087cc:	000d883a 	mov	r6,zero
 80087d0:	003f6c06 	br	8008584 <__alt_data_end+0xfc008584>
 80087d4:	9023883a 	mov	r17,r18
 80087d8:	003f6406 	br	800856c <__alt_data_end+0xfc00856c>
 80087dc:	1c47c83a 	sub	r3,r3,r17
 80087e0:	01000684 	movi	r4,26
 80087e4:	01400044 	movi	r5,1
 80087e8:	003fc806 	br	800870c <__alt_data_end+0xfc00870c>
 80087ec:	9080102c 	andhi	r2,r18,64
 80087f0:	103fe926 	beq	r2,zero,8008798 <__alt_data_end+0xfc008798>
 80087f4:	0023883a 	mov	r17,zero
 80087f8:	00802034 	movhi	r2,128
 80087fc:	89801034 	orhi	r6,r17,64
 8008800:	10bfffc4 	addi	r2,r2,-1
 8008804:	a80f883a 	mov	r7,r21
 8008808:	308c703a 	and	r6,r6,r2
 800880c:	003faf06 	br	80086cc <__alt_data_end+0xfc0086cc>
 8008810:	01c00804 	movi	r7,32
 8008814:	390fc83a 	sub	r7,r7,r4
 8008818:	89ce983a 	sll	r7,r17,r7
 800881c:	890ad83a 	srl	r5,r17,r4
 8008820:	380ec03a 	cmpne	r7,r7,zero
 8008824:	29cab03a 	or	r5,r5,r7
 8008828:	28c001cc 	andi	r3,r5,7
 800882c:	18000426 	beq	r3,zero,8008840 <__divsf3+0x3fc>
 8008830:	28c003cc 	andi	r3,r5,15
 8008834:	01000104 	movi	r4,4
 8008838:	19000126 	beq	r3,r4,8008840 <__divsf3+0x3fc>
 800883c:	290b883a 	add	r5,r5,r4
 8008840:	28c1002c 	andhi	r3,r5,1024
 8008844:	18000426 	beq	r3,zero,8008858 <__divsf3+0x414>
 8008848:	11c0004c 	andi	r7,r2,1
 800884c:	01000044 	movi	r4,1
 8008850:	000d883a 	mov	r6,zero
 8008854:	003f4b06 	br	8008584 <__alt_data_end+0xfc008584>
 8008858:	280a91ba 	slli	r5,r5,6
 800885c:	11c0004c 	andi	r7,r2,1
 8008860:	0009883a 	mov	r4,zero
 8008864:	280cd27a 	srli	r6,r5,9
 8008868:	003f4606 	br	8008584 <__alt_data_end+0xfc008584>
 800886c:	00802034 	movhi	r2,128
 8008870:	89801034 	orhi	r6,r17,64
 8008874:	10bfffc4 	addi	r2,r2,-1
 8008878:	b00f883a 	mov	r7,r22
 800887c:	308c703a 	and	r6,r6,r2
 8008880:	003f9206 	br	80086cc <__alt_data_end+0xfc0086cc>

08008884 <__gesf2>:
 8008884:	2004d5fa 	srli	r2,r4,23
 8008888:	2806d5fa 	srli	r3,r5,23
 800888c:	01802034 	movhi	r6,128
 8008890:	31bfffc4 	addi	r6,r6,-1
 8008894:	10803fcc 	andi	r2,r2,255
 8008898:	01c03fc4 	movi	r7,255
 800889c:	3110703a 	and	r8,r6,r4
 80088a0:	18c03fcc 	andi	r3,r3,255
 80088a4:	314c703a 	and	r6,r6,r5
 80088a8:	2008d7fa 	srli	r4,r4,31
 80088ac:	280ad7fa 	srli	r5,r5,31
 80088b0:	11c01926 	beq	r2,r7,8008918 <__gesf2+0x94>
 80088b4:	01c03fc4 	movi	r7,255
 80088b8:	19c00f26 	beq	r3,r7,80088f8 <__gesf2+0x74>
 80088bc:	1000061e 	bne	r2,zero,80088d8 <__gesf2+0x54>
 80088c0:	400f003a 	cmpeq	r7,r8,zero
 80088c4:	1800071e 	bne	r3,zero,80088e4 <__gesf2+0x60>
 80088c8:	3000061e 	bne	r6,zero,80088e4 <__gesf2+0x60>
 80088cc:	0005883a 	mov	r2,zero
 80088d0:	40000e1e 	bne	r8,zero,800890c <__gesf2+0x88>
 80088d4:	f800283a 	ret
 80088d8:	18000a1e 	bne	r3,zero,8008904 <__gesf2+0x80>
 80088dc:	30000b26 	beq	r6,zero,800890c <__gesf2+0x88>
 80088e0:	000f883a 	mov	r7,zero
 80088e4:	29403fcc 	andi	r5,r5,255
 80088e8:	38000726 	beq	r7,zero,8008908 <__gesf2+0x84>
 80088ec:	28000826 	beq	r5,zero,8008910 <__gesf2+0x8c>
 80088f0:	00800044 	movi	r2,1
 80088f4:	f800283a 	ret
 80088f8:	303ff026 	beq	r6,zero,80088bc <__alt_data_end+0xfc0088bc>
 80088fc:	00bfff84 	movi	r2,-2
 8008900:	f800283a 	ret
 8008904:	29403fcc 	andi	r5,r5,255
 8008908:	21400526 	beq	r4,r5,8008920 <__gesf2+0x9c>
 800890c:	203ff826 	beq	r4,zero,80088f0 <__alt_data_end+0xfc0088f0>
 8008910:	00bfffc4 	movi	r2,-1
 8008914:	f800283a 	ret
 8008918:	403fe626 	beq	r8,zero,80088b4 <__alt_data_end+0xfc0088b4>
 800891c:	003ff706 	br	80088fc <__alt_data_end+0xfc0088fc>
 8008920:	18bffa16 	blt	r3,r2,800890c <__alt_data_end+0xfc00890c>
 8008924:	10c00216 	blt	r2,r3,8008930 <__gesf2+0xac>
 8008928:	323ff836 	bltu	r6,r8,800890c <__alt_data_end+0xfc00890c>
 800892c:	4180022e 	bgeu	r8,r6,8008938 <__gesf2+0xb4>
 8008930:	203fef1e 	bne	r4,zero,80088f0 <__alt_data_end+0xfc0088f0>
 8008934:	003ff606 	br	8008910 <__alt_data_end+0xfc008910>
 8008938:	0005883a 	mov	r2,zero
 800893c:	f800283a 	ret

08008940 <__lesf2>:
 8008940:	2004d5fa 	srli	r2,r4,23
 8008944:	280cd5fa 	srli	r6,r5,23
 8008948:	00c02034 	movhi	r3,128
 800894c:	18ffffc4 	addi	r3,r3,-1
 8008950:	10803fcc 	andi	r2,r2,255
 8008954:	01c03fc4 	movi	r7,255
 8008958:	1910703a 	and	r8,r3,r4
 800895c:	31803fcc 	andi	r6,r6,255
 8008960:	1946703a 	and	r3,r3,r5
 8008964:	2008d7fa 	srli	r4,r4,31
 8008968:	280ad7fa 	srli	r5,r5,31
 800896c:	11c01b26 	beq	r2,r7,80089dc <__lesf2+0x9c>
 8008970:	01c03fc4 	movi	r7,255
 8008974:	31c01126 	beq	r6,r7,80089bc <__lesf2+0x7c>
 8008978:	1000071e 	bne	r2,zero,8008998 <__lesf2+0x58>
 800897c:	400f003a 	cmpeq	r7,r8,zero
 8008980:	21003fcc 	andi	r4,r4,255
 8008984:	3000081e 	bne	r6,zero,80089a8 <__lesf2+0x68>
 8008988:	1800071e 	bne	r3,zero,80089a8 <__lesf2+0x68>
 800898c:	0005883a 	mov	r2,zero
 8008990:	40000f1e 	bne	r8,zero,80089d0 <__lesf2+0x90>
 8008994:	f800283a 	ret
 8008998:	21003fcc 	andi	r4,r4,255
 800899c:	30000a1e 	bne	r6,zero,80089c8 <__lesf2+0x88>
 80089a0:	18000b26 	beq	r3,zero,80089d0 <__lesf2+0x90>
 80089a4:	000f883a 	mov	r7,zero
 80089a8:	29403fcc 	andi	r5,r5,255
 80089ac:	38000726 	beq	r7,zero,80089cc <__lesf2+0x8c>
 80089b0:	28000826 	beq	r5,zero,80089d4 <__lesf2+0x94>
 80089b4:	00800044 	movi	r2,1
 80089b8:	f800283a 	ret
 80089bc:	183fee26 	beq	r3,zero,8008978 <__alt_data_end+0xfc008978>
 80089c0:	00800084 	movi	r2,2
 80089c4:	f800283a 	ret
 80089c8:	29403fcc 	andi	r5,r5,255
 80089cc:	21400626 	beq	r4,r5,80089e8 <__lesf2+0xa8>
 80089d0:	203ff826 	beq	r4,zero,80089b4 <__alt_data_end+0xfc0089b4>
 80089d4:	00bfffc4 	movi	r2,-1
 80089d8:	f800283a 	ret
 80089dc:	403fe426 	beq	r8,zero,8008970 <__alt_data_end+0xfc008970>
 80089e0:	00800084 	movi	r2,2
 80089e4:	f800283a 	ret
 80089e8:	30bff916 	blt	r6,r2,80089d0 <__alt_data_end+0xfc0089d0>
 80089ec:	11800216 	blt	r2,r6,80089f8 <__lesf2+0xb8>
 80089f0:	1a3ff736 	bltu	r3,r8,80089d0 <__alt_data_end+0xfc0089d0>
 80089f4:	40c0022e 	bgeu	r8,r3,8008a00 <__lesf2+0xc0>
 80089f8:	203fee1e 	bne	r4,zero,80089b4 <__alt_data_end+0xfc0089b4>
 80089fc:	003ff506 	br	80089d4 <__alt_data_end+0xfc0089d4>
 8008a00:	0005883a 	mov	r2,zero
 8008a04:	f800283a 	ret

08008a08 <__mulsf3>:
 8008a08:	defff504 	addi	sp,sp,-44
 8008a0c:	dc000115 	stw	r16,4(sp)
 8008a10:	2020d5fa 	srli	r16,r4,23
 8008a14:	dd400615 	stw	r21,24(sp)
 8008a18:	202ad7fa 	srli	r21,r4,31
 8008a1c:	dc800315 	stw	r18,12(sp)
 8008a20:	04802034 	movhi	r18,128
 8008a24:	df000915 	stw	fp,36(sp)
 8008a28:	dd000515 	stw	r20,20(sp)
 8008a2c:	94bfffc4 	addi	r18,r18,-1
 8008a30:	dfc00a15 	stw	ra,40(sp)
 8008a34:	ddc00815 	stw	r23,32(sp)
 8008a38:	dd800715 	stw	r22,28(sp)
 8008a3c:	dcc00415 	stw	r19,16(sp)
 8008a40:	dc400215 	stw	r17,8(sp)
 8008a44:	84003fcc 	andi	r16,r16,255
 8008a48:	9124703a 	and	r18,r18,r4
 8008a4c:	a829883a 	mov	r20,r21
 8008a50:	af003fcc 	andi	fp,r21,255
 8008a54:	80005426 	beq	r16,zero,8008ba8 <__mulsf3+0x1a0>
 8008a58:	00803fc4 	movi	r2,255
 8008a5c:	80802f26 	beq	r16,r2,8008b1c <__mulsf3+0x114>
 8008a60:	91002034 	orhi	r4,r18,128
 8008a64:	202490fa 	slli	r18,r4,3
 8008a68:	843fe044 	addi	r16,r16,-127
 8008a6c:	0023883a 	mov	r17,zero
 8008a70:	002f883a 	mov	r23,zero
 8008a74:	2804d5fa 	srli	r2,r5,23
 8008a78:	282cd7fa 	srli	r22,r5,31
 8008a7c:	01002034 	movhi	r4,128
 8008a80:	213fffc4 	addi	r4,r4,-1
 8008a84:	10803fcc 	andi	r2,r2,255
 8008a88:	2166703a 	and	r19,r4,r5
 8008a8c:	b1803fcc 	andi	r6,r22,255
 8008a90:	10004c26 	beq	r2,zero,8008bc4 <__mulsf3+0x1bc>
 8008a94:	00c03fc4 	movi	r3,255
 8008a98:	10c04726 	beq	r2,r3,8008bb8 <__mulsf3+0x1b0>
 8008a9c:	99002034 	orhi	r4,r19,128
 8008aa0:	202690fa 	slli	r19,r4,3
 8008aa4:	10bfe044 	addi	r2,r2,-127
 8008aa8:	0007883a 	mov	r3,zero
 8008aac:	80a1883a 	add	r16,r16,r2
 8008ab0:	010003c4 	movi	r4,15
 8008ab4:	1c44b03a 	or	r2,r3,r17
 8008ab8:	b56af03a 	xor	r21,r22,r21
 8008abc:	81c00044 	addi	r7,r16,1
 8008ac0:	20806b36 	bltu	r4,r2,8008c70 <__mulsf3+0x268>
 8008ac4:	100490ba 	slli	r2,r2,2
 8008ac8:	01020074 	movhi	r4,2049
 8008acc:	2122b704 	addi	r4,r4,-29988
 8008ad0:	1105883a 	add	r2,r2,r4
 8008ad4:	10800017 	ldw	r2,0(r2)
 8008ad8:	1000683a 	jmp	r2
 8008adc:	08008c70 	cmpltui	zero,at,561
 8008ae0:	08008b30 	cmpltui	zero,at,556
 8008ae4:	08008b30 	cmpltui	zero,at,556
 8008ae8:	08008b2c 	andhi	zero,at,556
 8008aec:	08008c54 	ori	zero,at,561
 8008af0:	08008c54 	ori	zero,at,561
 8008af4:	08008c40 	call	8008c4 <__alt_exception_stack_pointer+0x7ff8c4>
 8008af8:	08008b2c 	andhi	zero,at,556
 8008afc:	08008c54 	ori	zero,at,561
 8008b00:	08008c40 	call	8008c4 <__alt_exception_stack_pointer+0x7ff8c4>
 8008b04:	08008c54 	ori	zero,at,561
 8008b08:	08008b2c 	andhi	zero,at,556
 8008b0c:	08008c60 	cmpeqi	zero,at,561
 8008b10:	08008c60 	cmpeqi	zero,at,561
 8008b14:	08008c60 	cmpeqi	zero,at,561
 8008b18:	08008d70 	cmpltui	zero,at,565
 8008b1c:	90003b1e 	bne	r18,zero,8008c0c <__mulsf3+0x204>
 8008b20:	04400204 	movi	r17,8
 8008b24:	05c00084 	movi	r23,2
 8008b28:	003fd206 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008b2c:	302b883a 	mov	r21,r6
 8008b30:	00800084 	movi	r2,2
 8008b34:	18802626 	beq	r3,r2,8008bd0 <__mulsf3+0x1c8>
 8008b38:	008000c4 	movi	r2,3
 8008b3c:	1880b826 	beq	r3,r2,8008e20 <__mulsf3+0x418>
 8008b40:	00800044 	movi	r2,1
 8008b44:	1880af1e 	bne	r3,r2,8008e04 <__mulsf3+0x3fc>
 8008b48:	a829883a 	mov	r20,r21
 8008b4c:	0007883a 	mov	r3,zero
 8008b50:	0009883a 	mov	r4,zero
 8008b54:	18803fcc 	andi	r2,r3,255
 8008b58:	100695fa 	slli	r3,r2,23
 8008b5c:	a0803fcc 	andi	r2,r20,255
 8008b60:	100a97fa 	slli	r5,r2,31
 8008b64:	00802034 	movhi	r2,128
 8008b68:	10bfffc4 	addi	r2,r2,-1
 8008b6c:	2084703a 	and	r2,r4,r2
 8008b70:	10c4b03a 	or	r2,r2,r3
 8008b74:	1144b03a 	or	r2,r2,r5
 8008b78:	dfc00a17 	ldw	ra,40(sp)
 8008b7c:	df000917 	ldw	fp,36(sp)
 8008b80:	ddc00817 	ldw	r23,32(sp)
 8008b84:	dd800717 	ldw	r22,28(sp)
 8008b88:	dd400617 	ldw	r21,24(sp)
 8008b8c:	dd000517 	ldw	r20,20(sp)
 8008b90:	dcc00417 	ldw	r19,16(sp)
 8008b94:	dc800317 	ldw	r18,12(sp)
 8008b98:	dc400217 	ldw	r17,8(sp)
 8008b9c:	dc000117 	ldw	r16,4(sp)
 8008ba0:	dec00b04 	addi	sp,sp,44
 8008ba4:	f800283a 	ret
 8008ba8:	90000d1e 	bne	r18,zero,8008be0 <__mulsf3+0x1d8>
 8008bac:	04400104 	movi	r17,4
 8008bb0:	05c00044 	movi	r23,1
 8008bb4:	003faf06 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008bb8:	9806c03a 	cmpne	r3,r19,zero
 8008bbc:	18c00084 	addi	r3,r3,2
 8008bc0:	003fba06 	br	8008aac <__alt_data_end+0xfc008aac>
 8008bc4:	9800141e 	bne	r19,zero,8008c18 <__mulsf3+0x210>
 8008bc8:	00c00044 	movi	r3,1
 8008bcc:	003fb706 	br	8008aac <__alt_data_end+0xfc008aac>
 8008bd0:	a829883a 	mov	r20,r21
 8008bd4:	00ffffc4 	movi	r3,-1
 8008bd8:	0009883a 	mov	r4,zero
 8008bdc:	003fdd06 	br	8008b54 <__alt_data_end+0xfc008b54>
 8008be0:	9009883a 	mov	r4,r18
 8008be4:	d9400015 	stw	r5,0(sp)
 8008be8:	800bfa80 	call	800bfa8 <__clzsi2>
 8008bec:	10fffec4 	addi	r3,r2,-5
 8008bf0:	10801d84 	addi	r2,r2,118
 8008bf4:	90e4983a 	sll	r18,r18,r3
 8008bf8:	00a1c83a 	sub	r16,zero,r2
 8008bfc:	0023883a 	mov	r17,zero
 8008c00:	002f883a 	mov	r23,zero
 8008c04:	d9400017 	ldw	r5,0(sp)
 8008c08:	003f9a06 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008c0c:	04400304 	movi	r17,12
 8008c10:	05c000c4 	movi	r23,3
 8008c14:	003f9706 	br	8008a74 <__alt_data_end+0xfc008a74>
 8008c18:	9809883a 	mov	r4,r19
 8008c1c:	d9800015 	stw	r6,0(sp)
 8008c20:	800bfa80 	call	800bfa8 <__clzsi2>
 8008c24:	10fffec4 	addi	r3,r2,-5
 8008c28:	10801d84 	addi	r2,r2,118
 8008c2c:	98e6983a 	sll	r19,r19,r3
 8008c30:	0085c83a 	sub	r2,zero,r2
 8008c34:	0007883a 	mov	r3,zero
 8008c38:	d9800017 	ldw	r6,0(sp)
 8008c3c:	003f9b06 	br	8008aac <__alt_data_end+0xfc008aac>
 8008c40:	01002034 	movhi	r4,128
 8008c44:	0029883a 	mov	r20,zero
 8008c48:	213fffc4 	addi	r4,r4,-1
 8008c4c:	00ffffc4 	movi	r3,-1
 8008c50:	003fc006 	br	8008b54 <__alt_data_end+0xfc008b54>
 8008c54:	9027883a 	mov	r19,r18
 8008c58:	b807883a 	mov	r3,r23
 8008c5c:	003fb406 	br	8008b30 <__alt_data_end+0xfc008b30>
 8008c60:	9027883a 	mov	r19,r18
 8008c64:	e02b883a 	mov	r21,fp
 8008c68:	b807883a 	mov	r3,r23
 8008c6c:	003fb006 	br	8008b30 <__alt_data_end+0xfc008b30>
 8008c70:	9028d43a 	srli	r20,r18,16
 8008c74:	982cd43a 	srli	r22,r19,16
 8008c78:	94bfffcc 	andi	r18,r18,65535
 8008c7c:	9cffffcc 	andi	r19,r19,65535
 8008c80:	980b883a 	mov	r5,r19
 8008c84:	9009883a 	mov	r4,r18
 8008c88:	d9c00015 	stw	r7,0(sp)
 8008c8c:	8007f540 	call	8007f54 <__mulsi3>
 8008c90:	a00b883a 	mov	r5,r20
 8008c94:	9809883a 	mov	r4,r19
 8008c98:	1023883a 	mov	r17,r2
 8008c9c:	8007f540 	call	8007f54 <__mulsi3>
 8008ca0:	a009883a 	mov	r4,r20
 8008ca4:	b00b883a 	mov	r5,r22
 8008ca8:	1027883a 	mov	r19,r2
 8008cac:	8007f540 	call	8007f54 <__mulsi3>
 8008cb0:	b00b883a 	mov	r5,r22
 8008cb4:	9009883a 	mov	r4,r18
 8008cb8:	1029883a 	mov	r20,r2
 8008cbc:	8007f540 	call	8007f54 <__mulsi3>
 8008cc0:	8806d43a 	srli	r3,r17,16
 8008cc4:	14c5883a 	add	r2,r2,r19
 8008cc8:	d9c00017 	ldw	r7,0(sp)
 8008ccc:	1885883a 	add	r2,r3,r2
 8008cd0:	14c0022e 	bgeu	r2,r19,8008cdc <__mulsf3+0x2d4>
 8008cd4:	00c00074 	movhi	r3,1
 8008cd8:	a0e9883a 	add	r20,r20,r3
 8008cdc:	1026943a 	slli	r19,r2,16
 8008ce0:	8c7fffcc 	andi	r17,r17,65535
 8008ce4:	1004d43a 	srli	r2,r2,16
 8008ce8:	9c63883a 	add	r17,r19,r17
 8008cec:	882691ba 	slli	r19,r17,6
 8008cf0:	1505883a 	add	r2,r2,r20
 8008cf4:	8822d6ba 	srli	r17,r17,26
 8008cf8:	100891ba 	slli	r4,r2,6
 8008cfc:	9826c03a 	cmpne	r19,r19,zero
 8008d00:	9c62b03a 	or	r17,r19,r17
 8008d04:	8926b03a 	or	r19,r17,r4
 8008d08:	9882002c 	andhi	r2,r19,2048
 8008d0c:	10000426 	beq	r2,zero,8008d20 <__mulsf3+0x318>
 8008d10:	9804d07a 	srli	r2,r19,1
 8008d14:	9900004c 	andi	r4,r19,1
 8008d18:	3821883a 	mov	r16,r7
 8008d1c:	1126b03a 	or	r19,r2,r4
 8008d20:	80c01fc4 	addi	r3,r16,127
 8008d24:	00c0210e 	bge	zero,r3,8008dac <__mulsf3+0x3a4>
 8008d28:	988001cc 	andi	r2,r19,7
 8008d2c:	10000426 	beq	r2,zero,8008d40 <__mulsf3+0x338>
 8008d30:	988003cc 	andi	r2,r19,15
 8008d34:	01000104 	movi	r4,4
 8008d38:	11000126 	beq	r2,r4,8008d40 <__mulsf3+0x338>
 8008d3c:	9927883a 	add	r19,r19,r4
 8008d40:	9882002c 	andhi	r2,r19,2048
 8008d44:	10000426 	beq	r2,zero,8008d58 <__mulsf3+0x350>
 8008d48:	00be0034 	movhi	r2,63488
 8008d4c:	10bfffc4 	addi	r2,r2,-1
 8008d50:	80c02004 	addi	r3,r16,128
 8008d54:	98a6703a 	and	r19,r19,r2
 8008d58:	00803f84 	movi	r2,254
 8008d5c:	10ff9c16 	blt	r2,r3,8008bd0 <__alt_data_end+0xfc008bd0>
 8008d60:	980891ba 	slli	r4,r19,6
 8008d64:	a829883a 	mov	r20,r21
 8008d68:	2008d27a 	srli	r4,r4,9
 8008d6c:	003f7906 	br	8008b54 <__alt_data_end+0xfc008b54>
 8008d70:	9080102c 	andhi	r2,r18,64
 8008d74:	10000826 	beq	r2,zero,8008d98 <__mulsf3+0x390>
 8008d78:	9880102c 	andhi	r2,r19,64
 8008d7c:	1000061e 	bne	r2,zero,8008d98 <__mulsf3+0x390>
 8008d80:	00802034 	movhi	r2,128
 8008d84:	99001034 	orhi	r4,r19,64
 8008d88:	10bfffc4 	addi	r2,r2,-1
 8008d8c:	b029883a 	mov	r20,r22
 8008d90:	2088703a 	and	r4,r4,r2
 8008d94:	003fad06 	br	8008c4c <__alt_data_end+0xfc008c4c>
 8008d98:	00802034 	movhi	r2,128
 8008d9c:	91001034 	orhi	r4,r18,64
 8008da0:	10bfffc4 	addi	r2,r2,-1
 8008da4:	2088703a 	and	r4,r4,r2
 8008da8:	003fa806 	br	8008c4c <__alt_data_end+0xfc008c4c>
 8008dac:	00800044 	movi	r2,1
 8008db0:	10c7c83a 	sub	r3,r2,r3
 8008db4:	008006c4 	movi	r2,27
 8008db8:	10ff6316 	blt	r2,r3,8008b48 <__alt_data_end+0xfc008b48>
 8008dbc:	00800804 	movi	r2,32
 8008dc0:	10c5c83a 	sub	r2,r2,r3
 8008dc4:	9884983a 	sll	r2,r19,r2
 8008dc8:	98c6d83a 	srl	r3,r19,r3
 8008dcc:	1004c03a 	cmpne	r2,r2,zero
 8008dd0:	1884b03a 	or	r2,r3,r2
 8008dd4:	10c001cc 	andi	r3,r2,7
 8008dd8:	18000426 	beq	r3,zero,8008dec <__mulsf3+0x3e4>
 8008ddc:	10c003cc 	andi	r3,r2,15
 8008de0:	01000104 	movi	r4,4
 8008de4:	19000126 	beq	r3,r4,8008dec <__mulsf3+0x3e4>
 8008de8:	1105883a 	add	r2,r2,r4
 8008dec:	10c1002c 	andhi	r3,r2,1024
 8008df0:	18000626 	beq	r3,zero,8008e0c <__mulsf3+0x404>
 8008df4:	a829883a 	mov	r20,r21
 8008df8:	00c00044 	movi	r3,1
 8008dfc:	0009883a 	mov	r4,zero
 8008e00:	003f5406 	br	8008b54 <__alt_data_end+0xfc008b54>
 8008e04:	3821883a 	mov	r16,r7
 8008e08:	003fc506 	br	8008d20 <__alt_data_end+0xfc008d20>
 8008e0c:	100491ba 	slli	r2,r2,6
 8008e10:	a829883a 	mov	r20,r21
 8008e14:	0007883a 	mov	r3,zero
 8008e18:	1008d27a 	srli	r4,r2,9
 8008e1c:	003f4d06 	br	8008b54 <__alt_data_end+0xfc008b54>
 8008e20:	00802034 	movhi	r2,128
 8008e24:	99001034 	orhi	r4,r19,64
 8008e28:	10bfffc4 	addi	r2,r2,-1
 8008e2c:	a829883a 	mov	r20,r21
 8008e30:	2088703a 	and	r4,r4,r2
 8008e34:	003f8506 	br	8008c4c <__alt_data_end+0xfc008c4c>

08008e38 <__subsf3>:
 8008e38:	defffc04 	addi	sp,sp,-16
 8008e3c:	280cd5fa 	srli	r6,r5,23
 8008e40:	dc000015 	stw	r16,0(sp)
 8008e44:	01c02034 	movhi	r7,128
 8008e48:	2020d5fa 	srli	r16,r4,23
 8008e4c:	39ffffc4 	addi	r7,r7,-1
 8008e50:	3906703a 	and	r3,r7,r4
 8008e54:	dc400115 	stw	r17,4(sp)
 8008e58:	394e703a 	and	r7,r7,r5
 8008e5c:	2022d7fa 	srli	r17,r4,31
 8008e60:	dfc00315 	stw	ra,12(sp)
 8008e64:	dc800215 	stw	r18,8(sp)
 8008e68:	31803fcc 	andi	r6,r6,255
 8008e6c:	01003fc4 	movi	r4,255
 8008e70:	84003fcc 	andi	r16,r16,255
 8008e74:	180690fa 	slli	r3,r3,3
 8008e78:	2804d7fa 	srli	r2,r5,31
 8008e7c:	380e90fa 	slli	r7,r7,3
 8008e80:	31006d26 	beq	r6,r4,8009038 <__subsf3+0x200>
 8008e84:	1080005c 	xori	r2,r2,1
 8008e88:	8189c83a 	sub	r4,r16,r6
 8008e8c:	14404f26 	beq	r2,r17,8008fcc <__subsf3+0x194>
 8008e90:	0100770e 	bge	zero,r4,8009070 <__subsf3+0x238>
 8008e94:	30001e1e 	bne	r6,zero,8008f10 <__subsf3+0xd8>
 8008e98:	38006a1e 	bne	r7,zero,8009044 <__subsf3+0x20c>
 8008e9c:	188001cc 	andi	r2,r3,7
 8008ea0:	10000426 	beq	r2,zero,8008eb4 <__subsf3+0x7c>
 8008ea4:	188003cc 	andi	r2,r3,15
 8008ea8:	01000104 	movi	r4,4
 8008eac:	11000126 	beq	r2,r4,8008eb4 <__subsf3+0x7c>
 8008eb0:	1907883a 	add	r3,r3,r4
 8008eb4:	1881002c 	andhi	r2,r3,1024
 8008eb8:	10003926 	beq	r2,zero,8008fa0 <__subsf3+0x168>
 8008ebc:	84000044 	addi	r16,r16,1
 8008ec0:	00803fc4 	movi	r2,255
 8008ec4:	80807526 	beq	r16,r2,800909c <__subsf3+0x264>
 8008ec8:	180691ba 	slli	r3,r3,6
 8008ecc:	8880004c 	andi	r2,r17,1
 8008ed0:	180ad27a 	srli	r5,r3,9
 8008ed4:	84003fcc 	andi	r16,r16,255
 8008ed8:	800695fa 	slli	r3,r16,23
 8008edc:	10803fcc 	andi	r2,r2,255
 8008ee0:	01002034 	movhi	r4,128
 8008ee4:	213fffc4 	addi	r4,r4,-1
 8008ee8:	100497fa 	slli	r2,r2,31
 8008eec:	2920703a 	and	r16,r5,r4
 8008ef0:	80e0b03a 	or	r16,r16,r3
 8008ef4:	8084b03a 	or	r2,r16,r2
 8008ef8:	dfc00317 	ldw	ra,12(sp)
 8008efc:	dc800217 	ldw	r18,8(sp)
 8008f00:	dc400117 	ldw	r17,4(sp)
 8008f04:	dc000017 	ldw	r16,0(sp)
 8008f08:	dec00404 	addi	sp,sp,16
 8008f0c:	f800283a 	ret
 8008f10:	00803fc4 	movi	r2,255
 8008f14:	80bfe126 	beq	r16,r2,8008e9c <__alt_data_end+0xfc008e9c>
 8008f18:	39c10034 	orhi	r7,r7,1024
 8008f1c:	008006c4 	movi	r2,27
 8008f20:	11007416 	blt	r2,r4,80090f4 <__subsf3+0x2bc>
 8008f24:	00800804 	movi	r2,32
 8008f28:	1105c83a 	sub	r2,r2,r4
 8008f2c:	3884983a 	sll	r2,r7,r2
 8008f30:	390ed83a 	srl	r7,r7,r4
 8008f34:	1008c03a 	cmpne	r4,r2,zero
 8008f38:	390eb03a 	or	r7,r7,r4
 8008f3c:	19c7c83a 	sub	r3,r3,r7
 8008f40:	1881002c 	andhi	r2,r3,1024
 8008f44:	10001426 	beq	r2,zero,8008f98 <__subsf3+0x160>
 8008f48:	04810034 	movhi	r18,1024
 8008f4c:	94bfffc4 	addi	r18,r18,-1
 8008f50:	1ca4703a 	and	r18,r3,r18
 8008f54:	9009883a 	mov	r4,r18
 8008f58:	800bfa80 	call	800bfa8 <__clzsi2>
 8008f5c:	10bffec4 	addi	r2,r2,-5
 8008f60:	90a4983a 	sll	r18,r18,r2
 8008f64:	14005116 	blt	r2,r16,80090ac <__subsf3+0x274>
 8008f68:	1405c83a 	sub	r2,r2,r16
 8008f6c:	10c00044 	addi	r3,r2,1
 8008f70:	00800804 	movi	r2,32
 8008f74:	10c5c83a 	sub	r2,r2,r3
 8008f78:	9084983a 	sll	r2,r18,r2
 8008f7c:	90e4d83a 	srl	r18,r18,r3
 8008f80:	0021883a 	mov	r16,zero
 8008f84:	1006c03a 	cmpne	r3,r2,zero
 8008f88:	90c6b03a 	or	r3,r18,r3
 8008f8c:	003fc306 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8008f90:	2000e026 	beq	r4,zero,8009314 <__subsf3+0x4dc>
 8008f94:	2007883a 	mov	r3,r4
 8008f98:	188001cc 	andi	r2,r3,7
 8008f9c:	103fc11e 	bne	r2,zero,8008ea4 <__alt_data_end+0xfc008ea4>
 8008fa0:	180ad0fa 	srli	r5,r3,3
 8008fa4:	00c03fc4 	movi	r3,255
 8008fa8:	8880004c 	andi	r2,r17,1
 8008fac:	80c0031e 	bne	r16,r3,8008fbc <__subsf3+0x184>
 8008fb0:	28006d26 	beq	r5,zero,8009168 <__subsf3+0x330>
 8008fb4:	29401034 	orhi	r5,r5,64
 8008fb8:	043fffc4 	movi	r16,-1
 8008fbc:	00c02034 	movhi	r3,128
 8008fc0:	18ffffc4 	addi	r3,r3,-1
 8008fc4:	28ca703a 	and	r5,r5,r3
 8008fc8:	003fc206 	br	8008ed4 <__alt_data_end+0xfc008ed4>
 8008fcc:	01003c0e 	bge	zero,r4,80090c0 <__subsf3+0x288>
 8008fd0:	30002126 	beq	r6,zero,8009058 <__subsf3+0x220>
 8008fd4:	01403fc4 	movi	r5,255
 8008fd8:	817fb026 	beq	r16,r5,8008e9c <__alt_data_end+0xfc008e9c>
 8008fdc:	39c10034 	orhi	r7,r7,1024
 8008fe0:	014006c4 	movi	r5,27
 8008fe4:	29007416 	blt	r5,r4,80091b8 <__subsf3+0x380>
 8008fe8:	01400804 	movi	r5,32
 8008fec:	290bc83a 	sub	r5,r5,r4
 8008ff0:	394a983a 	sll	r5,r7,r5
 8008ff4:	390ed83a 	srl	r7,r7,r4
 8008ff8:	2808c03a 	cmpne	r4,r5,zero
 8008ffc:	390eb03a 	or	r7,r7,r4
 8009000:	19c7883a 	add	r3,r3,r7
 8009004:	1901002c 	andhi	r4,r3,1024
 8009008:	20003826 	beq	r4,zero,80090ec <__subsf3+0x2b4>
 800900c:	84000044 	addi	r16,r16,1
 8009010:	01003fc4 	movi	r4,255
 8009014:	81005426 	beq	r16,r4,8009168 <__subsf3+0x330>
 8009018:	1023883a 	mov	r17,r2
 800901c:	00bf0034 	movhi	r2,64512
 8009020:	10bfffc4 	addi	r2,r2,-1
 8009024:	1900004c 	andi	r4,r3,1
 8009028:	1886703a 	and	r3,r3,r2
 800902c:	1806d07a 	srli	r3,r3,1
 8009030:	1906b03a 	or	r3,r3,r4
 8009034:	003f9906 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009038:	383f9226 	beq	r7,zero,8008e84 <__alt_data_end+0xfc008e84>
 800903c:	10803fcc 	andi	r2,r2,255
 8009040:	003f9106 	br	8008e88 <__alt_data_end+0xfc008e88>
 8009044:	213fffc4 	addi	r4,r4,-1
 8009048:	203fbc26 	beq	r4,zero,8008f3c <__alt_data_end+0xfc008f3c>
 800904c:	00803fc4 	movi	r2,255
 8009050:	80bfb21e 	bne	r16,r2,8008f1c <__alt_data_end+0xfc008f1c>
 8009054:	003f9106 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009058:	383f9026 	beq	r7,zero,8008e9c <__alt_data_end+0xfc008e9c>
 800905c:	213fffc4 	addi	r4,r4,-1
 8009060:	203fe726 	beq	r4,zero,8009000 <__alt_data_end+0xfc009000>
 8009064:	01403fc4 	movi	r5,255
 8009068:	817fdd1e 	bne	r16,r5,8008fe0 <__alt_data_end+0xfc008fe0>
 800906c:	003f8b06 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009070:	2000221e 	bne	r4,zero,80090fc <__subsf3+0x2c4>
 8009074:	81000044 	addi	r4,r16,1
 8009078:	21003fcc 	andi	r4,r4,255
 800907c:	01400044 	movi	r5,1
 8009080:	2900470e 	bge	r5,r4,80091a0 <__subsf3+0x368>
 8009084:	19e5c83a 	sub	r18,r3,r7
 8009088:	9141002c 	andhi	r5,r18,1024
 800908c:	28002d26 	beq	r5,zero,8009144 <__subsf3+0x30c>
 8009090:	38e5c83a 	sub	r18,r7,r3
 8009094:	1023883a 	mov	r17,r2
 8009098:	003fae06 	br	8008f54 <__alt_data_end+0xfc008f54>
 800909c:	8880004c 	andi	r2,r17,1
 80090a0:	043fffc4 	movi	r16,-1
 80090a4:	000b883a 	mov	r5,zero
 80090a8:	003f8a06 	br	8008ed4 <__alt_data_end+0xfc008ed4>
 80090ac:	00ff0034 	movhi	r3,64512
 80090b0:	18ffffc4 	addi	r3,r3,-1
 80090b4:	80a1c83a 	sub	r16,r16,r2
 80090b8:	90c6703a 	and	r3,r18,r3
 80090bc:	003f7706 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80090c0:	2000431e 	bne	r4,zero,80091d0 <__subsf3+0x398>
 80090c4:	81000044 	addi	r4,r16,1
 80090c8:	21803fcc 	andi	r6,r4,255
 80090cc:	01400044 	movi	r5,1
 80090d0:	2980280e 	bge	r5,r6,8009174 <__subsf3+0x33c>
 80090d4:	01403fc4 	movi	r5,255
 80090d8:	21402326 	beq	r4,r5,8009168 <__subsf3+0x330>
 80090dc:	19c7883a 	add	r3,r3,r7
 80090e0:	1806d07a 	srli	r3,r3,1
 80090e4:	2021883a 	mov	r16,r4
 80090e8:	003f6c06 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80090ec:	1023883a 	mov	r17,r2
 80090f0:	003fa906 	br	8008f98 <__alt_data_end+0xfc008f98>
 80090f4:	01c00044 	movi	r7,1
 80090f8:	003f9006 	br	8008f3c <__alt_data_end+0xfc008f3c>
 80090fc:	8000151e 	bne	r16,zero,8009154 <__subsf3+0x31c>
 8009100:	18002f26 	beq	r3,zero,80091c0 <__subsf3+0x388>
 8009104:	0108303a 	nor	r4,zero,r4
 8009108:	20000a26 	beq	r4,zero,8009134 <__subsf3+0x2fc>
 800910c:	01403fc4 	movi	r5,255
 8009110:	31402b26 	beq	r6,r5,80091c0 <__subsf3+0x388>
 8009114:	014006c4 	movi	r5,27
 8009118:	29006e16 	blt	r5,r4,80092d4 <__subsf3+0x49c>
 800911c:	01400804 	movi	r5,32
 8009120:	290bc83a 	sub	r5,r5,r4
 8009124:	194a983a 	sll	r5,r3,r5
 8009128:	1908d83a 	srl	r4,r3,r4
 800912c:	2806c03a 	cmpne	r3,r5,zero
 8009130:	20c6b03a 	or	r3,r4,r3
 8009134:	38c7c83a 	sub	r3,r7,r3
 8009138:	3021883a 	mov	r16,r6
 800913c:	1023883a 	mov	r17,r2
 8009140:	003f7f06 	br	8008f40 <__alt_data_end+0xfc008f40>
 8009144:	903f831e 	bne	r18,zero,8008f54 <__alt_data_end+0xfc008f54>
 8009148:	0005883a 	mov	r2,zero
 800914c:	0021883a 	mov	r16,zero
 8009150:	003f9a06 	br	8008fbc <__alt_data_end+0xfc008fbc>
 8009154:	01403fc4 	movi	r5,255
 8009158:	31401926 	beq	r6,r5,80091c0 <__subsf3+0x388>
 800915c:	0109c83a 	sub	r4,zero,r4
 8009160:	18c10034 	orhi	r3,r3,1024
 8009164:	003feb06 	br	8009114 <__alt_data_end+0xfc009114>
 8009168:	043fffc4 	movi	r16,-1
 800916c:	000b883a 	mov	r5,zero
 8009170:	003f5806 	br	8008ed4 <__alt_data_end+0xfc008ed4>
 8009174:	8000481e 	bne	r16,zero,8009298 <__subsf3+0x460>
 8009178:	18006226 	beq	r3,zero,8009304 <__subsf3+0x4cc>
 800917c:	383f4726 	beq	r7,zero,8008e9c <__alt_data_end+0xfc008e9c>
 8009180:	19c7883a 	add	r3,r3,r7
 8009184:	1881002c 	andhi	r2,r3,1024
 8009188:	103f8326 	beq	r2,zero,8008f98 <__alt_data_end+0xfc008f98>
 800918c:	00bf0034 	movhi	r2,64512
 8009190:	10bfffc4 	addi	r2,r2,-1
 8009194:	2821883a 	mov	r16,r5
 8009198:	1886703a 	and	r3,r3,r2
 800919c:	003f3f06 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80091a0:	80001c1e 	bne	r16,zero,8009214 <__subsf3+0x3dc>
 80091a4:	1800261e 	bne	r3,zero,8009240 <__subsf3+0x408>
 80091a8:	38004c26 	beq	r7,zero,80092dc <__subsf3+0x4a4>
 80091ac:	3807883a 	mov	r3,r7
 80091b0:	1023883a 	mov	r17,r2
 80091b4:	003f3906 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80091b8:	01c00044 	movi	r7,1
 80091bc:	003f9006 	br	8009000 <__alt_data_end+0xfc009000>
 80091c0:	3807883a 	mov	r3,r7
 80091c4:	3021883a 	mov	r16,r6
 80091c8:	1023883a 	mov	r17,r2
 80091cc:	003f3306 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80091d0:	8000161e 	bne	r16,zero,800922c <__subsf3+0x3f4>
 80091d4:	18002d26 	beq	r3,zero,800928c <__subsf3+0x454>
 80091d8:	0108303a 	nor	r4,zero,r4
 80091dc:	20000a26 	beq	r4,zero,8009208 <__subsf3+0x3d0>
 80091e0:	01403fc4 	movi	r5,255
 80091e4:	31402926 	beq	r6,r5,800928c <__subsf3+0x454>
 80091e8:	014006c4 	movi	r5,27
 80091ec:	29004716 	blt	r5,r4,800930c <__subsf3+0x4d4>
 80091f0:	01400804 	movi	r5,32
 80091f4:	290bc83a 	sub	r5,r5,r4
 80091f8:	194a983a 	sll	r5,r3,r5
 80091fc:	1908d83a 	srl	r4,r3,r4
 8009200:	2806c03a 	cmpne	r3,r5,zero
 8009204:	20c6b03a 	or	r3,r4,r3
 8009208:	19c7883a 	add	r3,r3,r7
 800920c:	3021883a 	mov	r16,r6
 8009210:	003f7c06 	br	8009004 <__alt_data_end+0xfc009004>
 8009214:	1800111e 	bne	r3,zero,800925c <__subsf3+0x424>
 8009218:	38003326 	beq	r7,zero,80092e8 <__subsf3+0x4b0>
 800921c:	3807883a 	mov	r3,r7
 8009220:	1023883a 	mov	r17,r2
 8009224:	04003fc4 	movi	r16,255
 8009228:	003f1c06 	br	8008e9c <__alt_data_end+0xfc008e9c>
 800922c:	01403fc4 	movi	r5,255
 8009230:	31401626 	beq	r6,r5,800928c <__subsf3+0x454>
 8009234:	0109c83a 	sub	r4,zero,r4
 8009238:	18c10034 	orhi	r3,r3,1024
 800923c:	003fea06 	br	80091e8 <__alt_data_end+0xfc0091e8>
 8009240:	383f1626 	beq	r7,zero,8008e9c <__alt_data_end+0xfc008e9c>
 8009244:	19c9c83a 	sub	r4,r3,r7
 8009248:	2141002c 	andhi	r5,r4,1024
 800924c:	283f5026 	beq	r5,zero,8008f90 <__alt_data_end+0xfc008f90>
 8009250:	38c7c83a 	sub	r3,r7,r3
 8009254:	1023883a 	mov	r17,r2
 8009258:	003f1006 	br	8008e9c <__alt_data_end+0xfc008e9c>
 800925c:	38001b26 	beq	r7,zero,80092cc <__subsf3+0x494>
 8009260:	1806d0fa 	srli	r3,r3,3
 8009264:	1900102c 	andhi	r4,r3,64
 8009268:	20000526 	beq	r4,zero,8009280 <__subsf3+0x448>
 800926c:	380ed0fa 	srli	r7,r7,3
 8009270:	3900102c 	andhi	r4,r7,64
 8009274:	2000021e 	bne	r4,zero,8009280 <__subsf3+0x448>
 8009278:	3807883a 	mov	r3,r7
 800927c:	1023883a 	mov	r17,r2
 8009280:	180690fa 	slli	r3,r3,3
 8009284:	04003fc4 	movi	r16,255
 8009288:	003f0406 	br	8008e9c <__alt_data_end+0xfc008e9c>
 800928c:	3807883a 	mov	r3,r7
 8009290:	3021883a 	mov	r16,r6
 8009294:	003f0106 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009298:	18001726 	beq	r3,zero,80092f8 <__subsf3+0x4c0>
 800929c:	38000b26 	beq	r7,zero,80092cc <__subsf3+0x494>
 80092a0:	1806d0fa 	srli	r3,r3,3
 80092a4:	1900102c 	andhi	r4,r3,64
 80092a8:	20000426 	beq	r4,zero,80092bc <__subsf3+0x484>
 80092ac:	380ed0fa 	srli	r7,r7,3
 80092b0:	3900102c 	andhi	r4,r7,64
 80092b4:	2000011e 	bne	r4,zero,80092bc <__subsf3+0x484>
 80092b8:	3807883a 	mov	r3,r7
 80092bc:	180690fa 	slli	r3,r3,3
 80092c0:	1023883a 	mov	r17,r2
 80092c4:	04003fc4 	movi	r16,255
 80092c8:	003ef406 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80092cc:	04003fc4 	movi	r16,255
 80092d0:	003ef206 	br	8008e9c <__alt_data_end+0xfc008e9c>
 80092d4:	00c00044 	movi	r3,1
 80092d8:	003f9606 	br	8009134 <__alt_data_end+0xfc009134>
 80092dc:	000b883a 	mov	r5,zero
 80092e0:	0005883a 	mov	r2,zero
 80092e4:	003f3506 	br	8008fbc <__alt_data_end+0xfc008fbc>
 80092e8:	01402034 	movhi	r5,128
 80092ec:	297fffc4 	addi	r5,r5,-1
 80092f0:	0005883a 	mov	r2,zero
 80092f4:	003f2f06 	br	8008fb4 <__alt_data_end+0xfc008fb4>
 80092f8:	3807883a 	mov	r3,r7
 80092fc:	04003fc4 	movi	r16,255
 8009300:	003ee606 	br	8008e9c <__alt_data_end+0xfc008e9c>
 8009304:	3807883a 	mov	r3,r7
 8009308:	003ee406 	br	8008e9c <__alt_data_end+0xfc008e9c>
 800930c:	00c00044 	movi	r3,1
 8009310:	003fbd06 	br	8009208 <__alt_data_end+0xfc009208>
 8009314:	0005883a 	mov	r2,zero
 8009318:	003f2806 	br	8008fbc <__alt_data_end+0xfc008fbc>

0800931c <__fixsfsi>:
 800931c:	200ad5fa 	srli	r5,r4,23
 8009320:	00c02034 	movhi	r3,128
 8009324:	18ffffc4 	addi	r3,r3,-1
 8009328:	29403fcc 	andi	r5,r5,255
 800932c:	00801f84 	movi	r2,126
 8009330:	1906703a 	and	r3,r3,r4
 8009334:	2008d7fa 	srli	r4,r4,31
 8009338:	11400e0e 	bge	r2,r5,8009374 <__fixsfsi+0x58>
 800933c:	00802744 	movi	r2,157
 8009340:	11400816 	blt	r2,r5,8009364 <__fixsfsi+0x48>
 8009344:	00802544 	movi	r2,149
 8009348:	18c02034 	orhi	r3,r3,128
 800934c:	11400b0e 	bge	r2,r5,800937c <__fixsfsi+0x60>
 8009350:	28bfda84 	addi	r2,r5,-150
 8009354:	1884983a 	sll	r2,r3,r2
 8009358:	20000726 	beq	r4,zero,8009378 <__fixsfsi+0x5c>
 800935c:	0085c83a 	sub	r2,zero,r2
 8009360:	f800283a 	ret
 8009364:	00a00034 	movhi	r2,32768
 8009368:	10bfffc4 	addi	r2,r2,-1
 800936c:	2085883a 	add	r2,r4,r2
 8009370:	f800283a 	ret
 8009374:	0005883a 	mov	r2,zero
 8009378:	f800283a 	ret
 800937c:	00802584 	movi	r2,150
 8009380:	1145c83a 	sub	r2,r2,r5
 8009384:	1884d83a 	srl	r2,r3,r2
 8009388:	003ff306 	br	8009358 <__alt_data_end+0xfc009358>

0800938c <__floatsisf>:
 800938c:	defffd04 	addi	sp,sp,-12
 8009390:	dfc00215 	stw	ra,8(sp)
 8009394:	dc400115 	stw	r17,4(sp)
 8009398:	dc000015 	stw	r16,0(sp)
 800939c:	20003526 	beq	r4,zero,8009474 <__floatsisf+0xe8>
 80093a0:	2021883a 	mov	r16,r4
 80093a4:	2022d7fa 	srli	r17,r4,31
 80093a8:	20003616 	blt	r4,zero,8009484 <__floatsisf+0xf8>
 80093ac:	8009883a 	mov	r4,r16
 80093b0:	800bfa80 	call	800bfa8 <__clzsi2>
 80093b4:	00c02784 	movi	r3,158
 80093b8:	1887c83a 	sub	r3,r3,r2
 80093bc:	01002584 	movi	r4,150
 80093c0:	20c01416 	blt	r4,r3,8009414 <__floatsisf+0x88>
 80093c4:	20c9c83a 	sub	r4,r4,r3
 80093c8:	8120983a 	sll	r16,r16,r4
 80093cc:	00802034 	movhi	r2,128
 80093d0:	10bfffc4 	addi	r2,r2,-1
 80093d4:	8809883a 	mov	r4,r17
 80093d8:	80a0703a 	and	r16,r16,r2
 80093dc:	18803fcc 	andi	r2,r3,255
 80093e0:	100695fa 	slli	r3,r2,23
 80093e4:	20803fcc 	andi	r2,r4,255
 80093e8:	100897fa 	slli	r4,r2,31
 80093ec:	00802034 	movhi	r2,128
 80093f0:	10bfffc4 	addi	r2,r2,-1
 80093f4:	8084703a 	and	r2,r16,r2
 80093f8:	10c4b03a 	or	r2,r2,r3
 80093fc:	1104b03a 	or	r2,r2,r4
 8009400:	dfc00217 	ldw	ra,8(sp)
 8009404:	dc400117 	ldw	r17,4(sp)
 8009408:	dc000017 	ldw	r16,0(sp)
 800940c:	dec00304 	addi	sp,sp,12
 8009410:	f800283a 	ret
 8009414:	01002644 	movi	r4,153
 8009418:	20c01c16 	blt	r4,r3,800948c <__floatsisf+0x100>
 800941c:	20c9c83a 	sub	r4,r4,r3
 8009420:	8120983a 	sll	r16,r16,r4
 8009424:	013f0034 	movhi	r4,64512
 8009428:	213fffc4 	addi	r4,r4,-1
 800942c:	814001cc 	andi	r5,r16,7
 8009430:	8108703a 	and	r4,r16,r4
 8009434:	28000426 	beq	r5,zero,8009448 <__floatsisf+0xbc>
 8009438:	840003cc 	andi	r16,r16,15
 800943c:	01400104 	movi	r5,4
 8009440:	81400126 	beq	r16,r5,8009448 <__floatsisf+0xbc>
 8009444:	2149883a 	add	r4,r4,r5
 8009448:	2141002c 	andhi	r5,r4,1024
 800944c:	28000526 	beq	r5,zero,8009464 <__floatsisf+0xd8>
 8009450:	00c027c4 	movi	r3,159
 8009454:	1887c83a 	sub	r3,r3,r2
 8009458:	00bf0034 	movhi	r2,64512
 800945c:	10bfffc4 	addi	r2,r2,-1
 8009460:	2088703a 	and	r4,r4,r2
 8009464:	202091ba 	slli	r16,r4,6
 8009468:	8809883a 	mov	r4,r17
 800946c:	8020d27a 	srli	r16,r16,9
 8009470:	003fda06 	br	80093dc <__alt_data_end+0xfc0093dc>
 8009474:	0009883a 	mov	r4,zero
 8009478:	0007883a 	mov	r3,zero
 800947c:	0021883a 	mov	r16,zero
 8009480:	003fd606 	br	80093dc <__alt_data_end+0xfc0093dc>
 8009484:	0121c83a 	sub	r16,zero,r4
 8009488:	003fc806 	br	80093ac <__alt_data_end+0xfc0093ac>
 800948c:	01002e44 	movi	r4,185
 8009490:	20c9c83a 	sub	r4,r4,r3
 8009494:	01400144 	movi	r5,5
 8009498:	8108983a 	sll	r4,r16,r4
 800949c:	288bc83a 	sub	r5,r5,r2
 80094a0:	8160d83a 	srl	r16,r16,r5
 80094a4:	2008c03a 	cmpne	r4,r4,zero
 80094a8:	8120b03a 	or	r16,r16,r4
 80094ac:	003fdd06 	br	8009424 <__alt_data_end+0xfc009424>

080094b0 <__adddf3>:
 80094b0:	02c00434 	movhi	r11,16
 80094b4:	5affffc4 	addi	r11,r11,-1
 80094b8:	2806d7fa 	srli	r3,r5,31
 80094bc:	2ad4703a 	and	r10,r5,r11
 80094c0:	3ad2703a 	and	r9,r7,r11
 80094c4:	3804d53a 	srli	r2,r7,20
 80094c8:	3018d77a 	srli	r12,r6,29
 80094cc:	280ad53a 	srli	r5,r5,20
 80094d0:	501490fa 	slli	r10,r10,3
 80094d4:	2010d77a 	srli	r8,r4,29
 80094d8:	481290fa 	slli	r9,r9,3
 80094dc:	380ed7fa 	srli	r7,r7,31
 80094e0:	defffb04 	addi	sp,sp,-20
 80094e4:	dc800215 	stw	r18,8(sp)
 80094e8:	dc400115 	stw	r17,4(sp)
 80094ec:	dc000015 	stw	r16,0(sp)
 80094f0:	dfc00415 	stw	ra,16(sp)
 80094f4:	dcc00315 	stw	r19,12(sp)
 80094f8:	1c803fcc 	andi	r18,r3,255
 80094fc:	2c01ffcc 	andi	r16,r5,2047
 8009500:	5210b03a 	or	r8,r10,r8
 8009504:	202290fa 	slli	r17,r4,3
 8009508:	1081ffcc 	andi	r2,r2,2047
 800950c:	4b12b03a 	or	r9,r9,r12
 8009510:	300c90fa 	slli	r6,r6,3
 8009514:	91c07526 	beq	r18,r7,80096ec <__adddf3+0x23c>
 8009518:	8087c83a 	sub	r3,r16,r2
 800951c:	00c0ab0e 	bge	zero,r3,80097cc <__adddf3+0x31c>
 8009520:	10002a1e 	bne	r2,zero,80095cc <__adddf3+0x11c>
 8009524:	4984b03a 	or	r2,r9,r6
 8009528:	1000961e 	bne	r2,zero,8009784 <__adddf3+0x2d4>
 800952c:	888001cc 	andi	r2,r17,7
 8009530:	10000726 	beq	r2,zero,8009550 <__adddf3+0xa0>
 8009534:	888003cc 	andi	r2,r17,15
 8009538:	00c00104 	movi	r3,4
 800953c:	10c00426 	beq	r2,r3,8009550 <__adddf3+0xa0>
 8009540:	88c7883a 	add	r3,r17,r3
 8009544:	1c63803a 	cmpltu	r17,r3,r17
 8009548:	4451883a 	add	r8,r8,r17
 800954c:	1823883a 	mov	r17,r3
 8009550:	4080202c 	andhi	r2,r8,128
 8009554:	10005926 	beq	r2,zero,80096bc <__adddf3+0x20c>
 8009558:	84000044 	addi	r16,r16,1
 800955c:	0081ffc4 	movi	r2,2047
 8009560:	8080ba26 	beq	r16,r2,800984c <__adddf3+0x39c>
 8009564:	00bfe034 	movhi	r2,65408
 8009568:	10bfffc4 	addi	r2,r2,-1
 800956c:	4090703a 	and	r8,r8,r2
 8009570:	4004977a 	slli	r2,r8,29
 8009574:	4010927a 	slli	r8,r8,9
 8009578:	8822d0fa 	srli	r17,r17,3
 800957c:	8401ffcc 	andi	r16,r16,2047
 8009580:	4010d33a 	srli	r8,r8,12
 8009584:	9007883a 	mov	r3,r18
 8009588:	1444b03a 	or	r2,r2,r17
 800958c:	8401ffcc 	andi	r16,r16,2047
 8009590:	8020953a 	slli	r16,r16,20
 8009594:	18c03fcc 	andi	r3,r3,255
 8009598:	01000434 	movhi	r4,16
 800959c:	213fffc4 	addi	r4,r4,-1
 80095a0:	180697fa 	slli	r3,r3,31
 80095a4:	4110703a 	and	r8,r8,r4
 80095a8:	4410b03a 	or	r8,r8,r16
 80095ac:	40c6b03a 	or	r3,r8,r3
 80095b0:	dfc00417 	ldw	ra,16(sp)
 80095b4:	dcc00317 	ldw	r19,12(sp)
 80095b8:	dc800217 	ldw	r18,8(sp)
 80095bc:	dc400117 	ldw	r17,4(sp)
 80095c0:	dc000017 	ldw	r16,0(sp)
 80095c4:	dec00504 	addi	sp,sp,20
 80095c8:	f800283a 	ret
 80095cc:	0081ffc4 	movi	r2,2047
 80095d0:	80bfd626 	beq	r16,r2,800952c <__alt_data_end+0xfc00952c>
 80095d4:	4a402034 	orhi	r9,r9,128
 80095d8:	00800e04 	movi	r2,56
 80095dc:	10c09f16 	blt	r2,r3,800985c <__adddf3+0x3ac>
 80095e0:	008007c4 	movi	r2,31
 80095e4:	10c0c216 	blt	r2,r3,80098f0 <__adddf3+0x440>
 80095e8:	00800804 	movi	r2,32
 80095ec:	10c5c83a 	sub	r2,r2,r3
 80095f0:	488a983a 	sll	r5,r9,r2
 80095f4:	30c8d83a 	srl	r4,r6,r3
 80095f8:	3084983a 	sll	r2,r6,r2
 80095fc:	48c6d83a 	srl	r3,r9,r3
 8009600:	290cb03a 	or	r6,r5,r4
 8009604:	1004c03a 	cmpne	r2,r2,zero
 8009608:	308cb03a 	or	r6,r6,r2
 800960c:	898dc83a 	sub	r6,r17,r6
 8009610:	89a3803a 	cmpltu	r17,r17,r6
 8009614:	40d1c83a 	sub	r8,r8,r3
 8009618:	4451c83a 	sub	r8,r8,r17
 800961c:	3023883a 	mov	r17,r6
 8009620:	4080202c 	andhi	r2,r8,128
 8009624:	10002326 	beq	r2,zero,80096b4 <__adddf3+0x204>
 8009628:	04c02034 	movhi	r19,128
 800962c:	9cffffc4 	addi	r19,r19,-1
 8009630:	44e6703a 	and	r19,r8,r19
 8009634:	98007626 	beq	r19,zero,8009810 <__adddf3+0x360>
 8009638:	9809883a 	mov	r4,r19
 800963c:	800bfa80 	call	800bfa8 <__clzsi2>
 8009640:	10fffe04 	addi	r3,r2,-8
 8009644:	010007c4 	movi	r4,31
 8009648:	20c07716 	blt	r4,r3,8009828 <__adddf3+0x378>
 800964c:	00800804 	movi	r2,32
 8009650:	10c5c83a 	sub	r2,r2,r3
 8009654:	8884d83a 	srl	r2,r17,r2
 8009658:	98d0983a 	sll	r8,r19,r3
 800965c:	88e2983a 	sll	r17,r17,r3
 8009660:	1204b03a 	or	r2,r2,r8
 8009664:	1c007416 	blt	r3,r16,8009838 <__adddf3+0x388>
 8009668:	1c21c83a 	sub	r16,r3,r16
 800966c:	82000044 	addi	r8,r16,1
 8009670:	00c007c4 	movi	r3,31
 8009674:	1a009116 	blt	r3,r8,80098bc <__adddf3+0x40c>
 8009678:	00c00804 	movi	r3,32
 800967c:	1a07c83a 	sub	r3,r3,r8
 8009680:	8a08d83a 	srl	r4,r17,r8
 8009684:	88e2983a 	sll	r17,r17,r3
 8009688:	10c6983a 	sll	r3,r2,r3
 800968c:	1210d83a 	srl	r8,r2,r8
 8009690:	8804c03a 	cmpne	r2,r17,zero
 8009694:	1906b03a 	or	r3,r3,r4
 8009698:	18a2b03a 	or	r17,r3,r2
 800969c:	0021883a 	mov	r16,zero
 80096a0:	003fa206 	br	800952c <__alt_data_end+0xfc00952c>
 80096a4:	1890b03a 	or	r8,r3,r2
 80096a8:	40017d26 	beq	r8,zero,8009ca0 <__adddf3+0x7f0>
 80096ac:	1011883a 	mov	r8,r2
 80096b0:	1823883a 	mov	r17,r3
 80096b4:	888001cc 	andi	r2,r17,7
 80096b8:	103f9e1e 	bne	r2,zero,8009534 <__alt_data_end+0xfc009534>
 80096bc:	4004977a 	slli	r2,r8,29
 80096c0:	8822d0fa 	srli	r17,r17,3
 80096c4:	4010d0fa 	srli	r8,r8,3
 80096c8:	9007883a 	mov	r3,r18
 80096cc:	1444b03a 	or	r2,r2,r17
 80096d0:	0101ffc4 	movi	r4,2047
 80096d4:	81002426 	beq	r16,r4,8009768 <__adddf3+0x2b8>
 80096d8:	8120703a 	and	r16,r16,r4
 80096dc:	01000434 	movhi	r4,16
 80096e0:	213fffc4 	addi	r4,r4,-1
 80096e4:	4110703a 	and	r8,r8,r4
 80096e8:	003fa806 	br	800958c <__alt_data_end+0xfc00958c>
 80096ec:	8089c83a 	sub	r4,r16,r2
 80096f0:	01005e0e 	bge	zero,r4,800986c <__adddf3+0x3bc>
 80096f4:	10002b26 	beq	r2,zero,80097a4 <__adddf3+0x2f4>
 80096f8:	0081ffc4 	movi	r2,2047
 80096fc:	80bf8b26 	beq	r16,r2,800952c <__alt_data_end+0xfc00952c>
 8009700:	4a402034 	orhi	r9,r9,128
 8009704:	00800e04 	movi	r2,56
 8009708:	1100a40e 	bge	r2,r4,800999c <__adddf3+0x4ec>
 800970c:	498cb03a 	or	r6,r9,r6
 8009710:	300ac03a 	cmpne	r5,r6,zero
 8009714:	0013883a 	mov	r9,zero
 8009718:	2c4b883a 	add	r5,r5,r17
 800971c:	2c63803a 	cmpltu	r17,r5,r17
 8009720:	4a11883a 	add	r8,r9,r8
 8009724:	8a11883a 	add	r8,r17,r8
 8009728:	2823883a 	mov	r17,r5
 800972c:	4080202c 	andhi	r2,r8,128
 8009730:	103fe026 	beq	r2,zero,80096b4 <__alt_data_end+0xfc0096b4>
 8009734:	84000044 	addi	r16,r16,1
 8009738:	0081ffc4 	movi	r2,2047
 800973c:	8080d226 	beq	r16,r2,8009a88 <__adddf3+0x5d8>
 8009740:	00bfe034 	movhi	r2,65408
 8009744:	10bfffc4 	addi	r2,r2,-1
 8009748:	4090703a 	and	r8,r8,r2
 800974c:	880ad07a 	srli	r5,r17,1
 8009750:	400897fa 	slli	r4,r8,31
 8009754:	88c0004c 	andi	r3,r17,1
 8009758:	28e2b03a 	or	r17,r5,r3
 800975c:	4010d07a 	srli	r8,r8,1
 8009760:	2462b03a 	or	r17,r4,r17
 8009764:	003f7106 	br	800952c <__alt_data_end+0xfc00952c>
 8009768:	4088b03a 	or	r4,r8,r2
 800976c:	20014526 	beq	r4,zero,8009c84 <__adddf3+0x7d4>
 8009770:	01000434 	movhi	r4,16
 8009774:	42000234 	orhi	r8,r8,8
 8009778:	213fffc4 	addi	r4,r4,-1
 800977c:	4110703a 	and	r8,r8,r4
 8009780:	003f8206 	br	800958c <__alt_data_end+0xfc00958c>
 8009784:	18ffffc4 	addi	r3,r3,-1
 8009788:	1800491e 	bne	r3,zero,80098b0 <__adddf3+0x400>
 800978c:	898bc83a 	sub	r5,r17,r6
 8009790:	8963803a 	cmpltu	r17,r17,r5
 8009794:	4251c83a 	sub	r8,r8,r9
 8009798:	4451c83a 	sub	r8,r8,r17
 800979c:	2823883a 	mov	r17,r5
 80097a0:	003f9f06 	br	8009620 <__alt_data_end+0xfc009620>
 80097a4:	4984b03a 	or	r2,r9,r6
 80097a8:	103f6026 	beq	r2,zero,800952c <__alt_data_end+0xfc00952c>
 80097ac:	213fffc4 	addi	r4,r4,-1
 80097b0:	2000931e 	bne	r4,zero,8009a00 <__adddf3+0x550>
 80097b4:	898d883a 	add	r6,r17,r6
 80097b8:	3463803a 	cmpltu	r17,r6,r17
 80097bc:	4251883a 	add	r8,r8,r9
 80097c0:	8a11883a 	add	r8,r17,r8
 80097c4:	3023883a 	mov	r17,r6
 80097c8:	003fd806 	br	800972c <__alt_data_end+0xfc00972c>
 80097cc:	1800541e 	bne	r3,zero,8009920 <__adddf3+0x470>
 80097d0:	80800044 	addi	r2,r16,1
 80097d4:	1081ffcc 	andi	r2,r2,2047
 80097d8:	00c00044 	movi	r3,1
 80097dc:	1880a00e 	bge	r3,r2,8009a60 <__adddf3+0x5b0>
 80097e0:	8989c83a 	sub	r4,r17,r6
 80097e4:	8905803a 	cmpltu	r2,r17,r4
 80097e8:	4267c83a 	sub	r19,r8,r9
 80097ec:	98a7c83a 	sub	r19,r19,r2
 80097f0:	9880202c 	andhi	r2,r19,128
 80097f4:	10006326 	beq	r2,zero,8009984 <__adddf3+0x4d4>
 80097f8:	3463c83a 	sub	r17,r6,r17
 80097fc:	4a07c83a 	sub	r3,r9,r8
 8009800:	344d803a 	cmpltu	r6,r6,r17
 8009804:	19a7c83a 	sub	r19,r3,r6
 8009808:	3825883a 	mov	r18,r7
 800980c:	983f8a1e 	bne	r19,zero,8009638 <__alt_data_end+0xfc009638>
 8009810:	8809883a 	mov	r4,r17
 8009814:	800bfa80 	call	800bfa8 <__clzsi2>
 8009818:	10800804 	addi	r2,r2,32
 800981c:	10fffe04 	addi	r3,r2,-8
 8009820:	010007c4 	movi	r4,31
 8009824:	20ff890e 	bge	r4,r3,800964c <__alt_data_end+0xfc00964c>
 8009828:	10bff604 	addi	r2,r2,-40
 800982c:	8884983a 	sll	r2,r17,r2
 8009830:	0023883a 	mov	r17,zero
 8009834:	1c3f8c0e 	bge	r3,r16,8009668 <__alt_data_end+0xfc009668>
 8009838:	023fe034 	movhi	r8,65408
 800983c:	423fffc4 	addi	r8,r8,-1
 8009840:	80e1c83a 	sub	r16,r16,r3
 8009844:	1210703a 	and	r8,r2,r8
 8009848:	003f3806 	br	800952c <__alt_data_end+0xfc00952c>
 800984c:	9007883a 	mov	r3,r18
 8009850:	0011883a 	mov	r8,zero
 8009854:	0005883a 	mov	r2,zero
 8009858:	003f4c06 	br	800958c <__alt_data_end+0xfc00958c>
 800985c:	498cb03a 	or	r6,r9,r6
 8009860:	300cc03a 	cmpne	r6,r6,zero
 8009864:	0007883a 	mov	r3,zero
 8009868:	003f6806 	br	800960c <__alt_data_end+0xfc00960c>
 800986c:	20009c1e 	bne	r4,zero,8009ae0 <__adddf3+0x630>
 8009870:	80800044 	addi	r2,r16,1
 8009874:	1141ffcc 	andi	r5,r2,2047
 8009878:	01000044 	movi	r4,1
 800987c:	2140670e 	bge	r4,r5,8009a1c <__adddf3+0x56c>
 8009880:	0101ffc4 	movi	r4,2047
 8009884:	11007f26 	beq	r2,r4,8009a84 <__adddf3+0x5d4>
 8009888:	898d883a 	add	r6,r17,r6
 800988c:	4247883a 	add	r3,r8,r9
 8009890:	3451803a 	cmpltu	r8,r6,r17
 8009894:	40d1883a 	add	r8,r8,r3
 8009898:	402297fa 	slli	r17,r8,31
 800989c:	300cd07a 	srli	r6,r6,1
 80098a0:	4010d07a 	srli	r8,r8,1
 80098a4:	1021883a 	mov	r16,r2
 80098a8:	89a2b03a 	or	r17,r17,r6
 80098ac:	003f1f06 	br	800952c <__alt_data_end+0xfc00952c>
 80098b0:	0081ffc4 	movi	r2,2047
 80098b4:	80bf481e 	bne	r16,r2,80095d8 <__alt_data_end+0xfc0095d8>
 80098b8:	003f1c06 	br	800952c <__alt_data_end+0xfc00952c>
 80098bc:	843ff844 	addi	r16,r16,-31
 80098c0:	01000804 	movi	r4,32
 80098c4:	1406d83a 	srl	r3,r2,r16
 80098c8:	41005026 	beq	r8,r4,8009a0c <__adddf3+0x55c>
 80098cc:	01001004 	movi	r4,64
 80098d0:	2211c83a 	sub	r8,r4,r8
 80098d4:	1204983a 	sll	r2,r2,r8
 80098d8:	88a2b03a 	or	r17,r17,r2
 80098dc:	8822c03a 	cmpne	r17,r17,zero
 80098e0:	1c62b03a 	or	r17,r3,r17
 80098e4:	0011883a 	mov	r8,zero
 80098e8:	0021883a 	mov	r16,zero
 80098ec:	003f7106 	br	80096b4 <__alt_data_end+0xfc0096b4>
 80098f0:	193ff804 	addi	r4,r3,-32
 80098f4:	00800804 	movi	r2,32
 80098f8:	4908d83a 	srl	r4,r9,r4
 80098fc:	18804526 	beq	r3,r2,8009a14 <__adddf3+0x564>
 8009900:	00801004 	movi	r2,64
 8009904:	10c5c83a 	sub	r2,r2,r3
 8009908:	4886983a 	sll	r3,r9,r2
 800990c:	198cb03a 	or	r6,r3,r6
 8009910:	300cc03a 	cmpne	r6,r6,zero
 8009914:	218cb03a 	or	r6,r4,r6
 8009918:	0007883a 	mov	r3,zero
 800991c:	003f3b06 	br	800960c <__alt_data_end+0xfc00960c>
 8009920:	80002a26 	beq	r16,zero,80099cc <__adddf3+0x51c>
 8009924:	0101ffc4 	movi	r4,2047
 8009928:	11006826 	beq	r2,r4,8009acc <__adddf3+0x61c>
 800992c:	00c7c83a 	sub	r3,zero,r3
 8009930:	42002034 	orhi	r8,r8,128
 8009934:	01000e04 	movi	r4,56
 8009938:	20c07c16 	blt	r4,r3,8009b2c <__adddf3+0x67c>
 800993c:	010007c4 	movi	r4,31
 8009940:	20c0da16 	blt	r4,r3,8009cac <__adddf3+0x7fc>
 8009944:	01000804 	movi	r4,32
 8009948:	20c9c83a 	sub	r4,r4,r3
 800994c:	4114983a 	sll	r10,r8,r4
 8009950:	88cad83a 	srl	r5,r17,r3
 8009954:	8908983a 	sll	r4,r17,r4
 8009958:	40c6d83a 	srl	r3,r8,r3
 800995c:	5162b03a 	or	r17,r10,r5
 8009960:	2008c03a 	cmpne	r4,r4,zero
 8009964:	8922b03a 	or	r17,r17,r4
 8009968:	3463c83a 	sub	r17,r6,r17
 800996c:	48c7c83a 	sub	r3,r9,r3
 8009970:	344d803a 	cmpltu	r6,r6,r17
 8009974:	1991c83a 	sub	r8,r3,r6
 8009978:	1021883a 	mov	r16,r2
 800997c:	3825883a 	mov	r18,r7
 8009980:	003f2706 	br	8009620 <__alt_data_end+0xfc009620>
 8009984:	24d0b03a 	or	r8,r4,r19
 8009988:	40001b1e 	bne	r8,zero,80099f8 <__adddf3+0x548>
 800998c:	0005883a 	mov	r2,zero
 8009990:	0007883a 	mov	r3,zero
 8009994:	0021883a 	mov	r16,zero
 8009998:	003f4d06 	br	80096d0 <__alt_data_end+0xfc0096d0>
 800999c:	008007c4 	movi	r2,31
 80099a0:	11003c16 	blt	r2,r4,8009a94 <__adddf3+0x5e4>
 80099a4:	00800804 	movi	r2,32
 80099a8:	1105c83a 	sub	r2,r2,r4
 80099ac:	488e983a 	sll	r7,r9,r2
 80099b0:	310ad83a 	srl	r5,r6,r4
 80099b4:	3084983a 	sll	r2,r6,r2
 80099b8:	4912d83a 	srl	r9,r9,r4
 80099bc:	394ab03a 	or	r5,r7,r5
 80099c0:	1004c03a 	cmpne	r2,r2,zero
 80099c4:	288ab03a 	or	r5,r5,r2
 80099c8:	003f5306 	br	8009718 <__alt_data_end+0xfc009718>
 80099cc:	4448b03a 	or	r4,r8,r17
 80099d0:	20003e26 	beq	r4,zero,8009acc <__adddf3+0x61c>
 80099d4:	00c6303a 	nor	r3,zero,r3
 80099d8:	18003a1e 	bne	r3,zero,8009ac4 <__adddf3+0x614>
 80099dc:	3463c83a 	sub	r17,r6,r17
 80099e0:	4a07c83a 	sub	r3,r9,r8
 80099e4:	344d803a 	cmpltu	r6,r6,r17
 80099e8:	1991c83a 	sub	r8,r3,r6
 80099ec:	1021883a 	mov	r16,r2
 80099f0:	3825883a 	mov	r18,r7
 80099f4:	003f0a06 	br	8009620 <__alt_data_end+0xfc009620>
 80099f8:	2023883a 	mov	r17,r4
 80099fc:	003f0d06 	br	8009634 <__alt_data_end+0xfc009634>
 8009a00:	0081ffc4 	movi	r2,2047
 8009a04:	80bf3f1e 	bne	r16,r2,8009704 <__alt_data_end+0xfc009704>
 8009a08:	003ec806 	br	800952c <__alt_data_end+0xfc00952c>
 8009a0c:	0005883a 	mov	r2,zero
 8009a10:	003fb106 	br	80098d8 <__alt_data_end+0xfc0098d8>
 8009a14:	0007883a 	mov	r3,zero
 8009a18:	003fbc06 	br	800990c <__alt_data_end+0xfc00990c>
 8009a1c:	4444b03a 	or	r2,r8,r17
 8009a20:	8000871e 	bne	r16,zero,8009c40 <__adddf3+0x790>
 8009a24:	1000ba26 	beq	r2,zero,8009d10 <__adddf3+0x860>
 8009a28:	4984b03a 	or	r2,r9,r6
 8009a2c:	103ebf26 	beq	r2,zero,800952c <__alt_data_end+0xfc00952c>
 8009a30:	8985883a 	add	r2,r17,r6
 8009a34:	4247883a 	add	r3,r8,r9
 8009a38:	1451803a 	cmpltu	r8,r2,r17
 8009a3c:	40d1883a 	add	r8,r8,r3
 8009a40:	40c0202c 	andhi	r3,r8,128
 8009a44:	1023883a 	mov	r17,r2
 8009a48:	183f1a26 	beq	r3,zero,80096b4 <__alt_data_end+0xfc0096b4>
 8009a4c:	00bfe034 	movhi	r2,65408
 8009a50:	10bfffc4 	addi	r2,r2,-1
 8009a54:	2021883a 	mov	r16,r4
 8009a58:	4090703a 	and	r8,r8,r2
 8009a5c:	003eb306 	br	800952c <__alt_data_end+0xfc00952c>
 8009a60:	4444b03a 	or	r2,r8,r17
 8009a64:	8000291e 	bne	r16,zero,8009b0c <__adddf3+0x65c>
 8009a68:	10004b1e 	bne	r2,zero,8009b98 <__adddf3+0x6e8>
 8009a6c:	4990b03a 	or	r8,r9,r6
 8009a70:	40008b26 	beq	r8,zero,8009ca0 <__adddf3+0x7f0>
 8009a74:	4811883a 	mov	r8,r9
 8009a78:	3023883a 	mov	r17,r6
 8009a7c:	3825883a 	mov	r18,r7
 8009a80:	003eaa06 	br	800952c <__alt_data_end+0xfc00952c>
 8009a84:	1021883a 	mov	r16,r2
 8009a88:	0011883a 	mov	r8,zero
 8009a8c:	0005883a 	mov	r2,zero
 8009a90:	003f0f06 	br	80096d0 <__alt_data_end+0xfc0096d0>
 8009a94:	217ff804 	addi	r5,r4,-32
 8009a98:	00800804 	movi	r2,32
 8009a9c:	494ad83a 	srl	r5,r9,r5
 8009aa0:	20807d26 	beq	r4,r2,8009c98 <__adddf3+0x7e8>
 8009aa4:	00801004 	movi	r2,64
 8009aa8:	1109c83a 	sub	r4,r2,r4
 8009aac:	4912983a 	sll	r9,r9,r4
 8009ab0:	498cb03a 	or	r6,r9,r6
 8009ab4:	300cc03a 	cmpne	r6,r6,zero
 8009ab8:	298ab03a 	or	r5,r5,r6
 8009abc:	0013883a 	mov	r9,zero
 8009ac0:	003f1506 	br	8009718 <__alt_data_end+0xfc009718>
 8009ac4:	0101ffc4 	movi	r4,2047
 8009ac8:	113f9a1e 	bne	r2,r4,8009934 <__alt_data_end+0xfc009934>
 8009acc:	4811883a 	mov	r8,r9
 8009ad0:	3023883a 	mov	r17,r6
 8009ad4:	1021883a 	mov	r16,r2
 8009ad8:	3825883a 	mov	r18,r7
 8009adc:	003e9306 	br	800952c <__alt_data_end+0xfc00952c>
 8009ae0:	8000161e 	bne	r16,zero,8009b3c <__adddf3+0x68c>
 8009ae4:	444ab03a 	or	r5,r8,r17
 8009ae8:	28005126 	beq	r5,zero,8009c30 <__adddf3+0x780>
 8009aec:	0108303a 	nor	r4,zero,r4
 8009af0:	20004d1e 	bne	r4,zero,8009c28 <__adddf3+0x778>
 8009af4:	89a3883a 	add	r17,r17,r6
 8009af8:	4253883a 	add	r9,r8,r9
 8009afc:	898d803a 	cmpltu	r6,r17,r6
 8009b00:	3251883a 	add	r8,r6,r9
 8009b04:	1021883a 	mov	r16,r2
 8009b08:	003f0806 	br	800972c <__alt_data_end+0xfc00972c>
 8009b0c:	1000301e 	bne	r2,zero,8009bd0 <__adddf3+0x720>
 8009b10:	4984b03a 	or	r2,r9,r6
 8009b14:	10007126 	beq	r2,zero,8009cdc <__adddf3+0x82c>
 8009b18:	4811883a 	mov	r8,r9
 8009b1c:	3023883a 	mov	r17,r6
 8009b20:	3825883a 	mov	r18,r7
 8009b24:	0401ffc4 	movi	r16,2047
 8009b28:	003e8006 	br	800952c <__alt_data_end+0xfc00952c>
 8009b2c:	4462b03a 	or	r17,r8,r17
 8009b30:	8822c03a 	cmpne	r17,r17,zero
 8009b34:	0007883a 	mov	r3,zero
 8009b38:	003f8b06 	br	8009968 <__alt_data_end+0xfc009968>
 8009b3c:	0141ffc4 	movi	r5,2047
 8009b40:	11403b26 	beq	r2,r5,8009c30 <__adddf3+0x780>
 8009b44:	0109c83a 	sub	r4,zero,r4
 8009b48:	42002034 	orhi	r8,r8,128
 8009b4c:	01400e04 	movi	r5,56
 8009b50:	29006716 	blt	r5,r4,8009cf0 <__adddf3+0x840>
 8009b54:	014007c4 	movi	r5,31
 8009b58:	29007016 	blt	r5,r4,8009d1c <__adddf3+0x86c>
 8009b5c:	01400804 	movi	r5,32
 8009b60:	290bc83a 	sub	r5,r5,r4
 8009b64:	4154983a 	sll	r10,r8,r5
 8009b68:	890ed83a 	srl	r7,r17,r4
 8009b6c:	894a983a 	sll	r5,r17,r5
 8009b70:	4108d83a 	srl	r4,r8,r4
 8009b74:	51e2b03a 	or	r17,r10,r7
 8009b78:	280ac03a 	cmpne	r5,r5,zero
 8009b7c:	8962b03a 	or	r17,r17,r5
 8009b80:	89a3883a 	add	r17,r17,r6
 8009b84:	2253883a 	add	r9,r4,r9
 8009b88:	898d803a 	cmpltu	r6,r17,r6
 8009b8c:	3251883a 	add	r8,r6,r9
 8009b90:	1021883a 	mov	r16,r2
 8009b94:	003ee506 	br	800972c <__alt_data_end+0xfc00972c>
 8009b98:	4984b03a 	or	r2,r9,r6
 8009b9c:	103e6326 	beq	r2,zero,800952c <__alt_data_end+0xfc00952c>
 8009ba0:	8987c83a 	sub	r3,r17,r6
 8009ba4:	88c9803a 	cmpltu	r4,r17,r3
 8009ba8:	4245c83a 	sub	r2,r8,r9
 8009bac:	1105c83a 	sub	r2,r2,r4
 8009bb0:	1100202c 	andhi	r4,r2,128
 8009bb4:	203ebb26 	beq	r4,zero,80096a4 <__alt_data_end+0xfc0096a4>
 8009bb8:	3463c83a 	sub	r17,r6,r17
 8009bbc:	4a07c83a 	sub	r3,r9,r8
 8009bc0:	344d803a 	cmpltu	r6,r6,r17
 8009bc4:	1991c83a 	sub	r8,r3,r6
 8009bc8:	3825883a 	mov	r18,r7
 8009bcc:	003e5706 	br	800952c <__alt_data_end+0xfc00952c>
 8009bd0:	4984b03a 	or	r2,r9,r6
 8009bd4:	10002e26 	beq	r2,zero,8009c90 <__adddf3+0x7e0>
 8009bd8:	4004d0fa 	srli	r2,r8,3
 8009bdc:	8822d0fa 	srli	r17,r17,3
 8009be0:	4010977a 	slli	r8,r8,29
 8009be4:	10c0022c 	andhi	r3,r2,8
 8009be8:	4462b03a 	or	r17,r8,r17
 8009bec:	18000826 	beq	r3,zero,8009c10 <__adddf3+0x760>
 8009bf0:	4808d0fa 	srli	r4,r9,3
 8009bf4:	20c0022c 	andhi	r3,r4,8
 8009bf8:	1800051e 	bne	r3,zero,8009c10 <__adddf3+0x760>
 8009bfc:	300cd0fa 	srli	r6,r6,3
 8009c00:	4806977a 	slli	r3,r9,29
 8009c04:	2005883a 	mov	r2,r4
 8009c08:	3825883a 	mov	r18,r7
 8009c0c:	19a2b03a 	or	r17,r3,r6
 8009c10:	8810d77a 	srli	r8,r17,29
 8009c14:	100490fa 	slli	r2,r2,3
 8009c18:	882290fa 	slli	r17,r17,3
 8009c1c:	0401ffc4 	movi	r16,2047
 8009c20:	4090b03a 	or	r8,r8,r2
 8009c24:	003e4106 	br	800952c <__alt_data_end+0xfc00952c>
 8009c28:	0141ffc4 	movi	r5,2047
 8009c2c:	117fc71e 	bne	r2,r5,8009b4c <__alt_data_end+0xfc009b4c>
 8009c30:	4811883a 	mov	r8,r9
 8009c34:	3023883a 	mov	r17,r6
 8009c38:	1021883a 	mov	r16,r2
 8009c3c:	003e3b06 	br	800952c <__alt_data_end+0xfc00952c>
 8009c40:	10002f26 	beq	r2,zero,8009d00 <__adddf3+0x850>
 8009c44:	4984b03a 	or	r2,r9,r6
 8009c48:	10001126 	beq	r2,zero,8009c90 <__adddf3+0x7e0>
 8009c4c:	4004d0fa 	srli	r2,r8,3
 8009c50:	8822d0fa 	srli	r17,r17,3
 8009c54:	4010977a 	slli	r8,r8,29
 8009c58:	10c0022c 	andhi	r3,r2,8
 8009c5c:	4462b03a 	or	r17,r8,r17
 8009c60:	183feb26 	beq	r3,zero,8009c10 <__alt_data_end+0xfc009c10>
 8009c64:	4808d0fa 	srli	r4,r9,3
 8009c68:	20c0022c 	andhi	r3,r4,8
 8009c6c:	183fe81e 	bne	r3,zero,8009c10 <__alt_data_end+0xfc009c10>
 8009c70:	300cd0fa 	srli	r6,r6,3
 8009c74:	4806977a 	slli	r3,r9,29
 8009c78:	2005883a 	mov	r2,r4
 8009c7c:	19a2b03a 	or	r17,r3,r6
 8009c80:	003fe306 	br	8009c10 <__alt_data_end+0xfc009c10>
 8009c84:	0011883a 	mov	r8,zero
 8009c88:	0005883a 	mov	r2,zero
 8009c8c:	003e3f06 	br	800958c <__alt_data_end+0xfc00958c>
 8009c90:	0401ffc4 	movi	r16,2047
 8009c94:	003e2506 	br	800952c <__alt_data_end+0xfc00952c>
 8009c98:	0013883a 	mov	r9,zero
 8009c9c:	003f8406 	br	8009ab0 <__alt_data_end+0xfc009ab0>
 8009ca0:	0005883a 	mov	r2,zero
 8009ca4:	0007883a 	mov	r3,zero
 8009ca8:	003e8906 	br	80096d0 <__alt_data_end+0xfc0096d0>
 8009cac:	197ff804 	addi	r5,r3,-32
 8009cb0:	01000804 	movi	r4,32
 8009cb4:	414ad83a 	srl	r5,r8,r5
 8009cb8:	19002426 	beq	r3,r4,8009d4c <__adddf3+0x89c>
 8009cbc:	01001004 	movi	r4,64
 8009cc0:	20c7c83a 	sub	r3,r4,r3
 8009cc4:	40c6983a 	sll	r3,r8,r3
 8009cc8:	1c46b03a 	or	r3,r3,r17
 8009ccc:	1806c03a 	cmpne	r3,r3,zero
 8009cd0:	28e2b03a 	or	r17,r5,r3
 8009cd4:	0007883a 	mov	r3,zero
 8009cd8:	003f2306 	br	8009968 <__alt_data_end+0xfc009968>
 8009cdc:	0007883a 	mov	r3,zero
 8009ce0:	5811883a 	mov	r8,r11
 8009ce4:	00bfffc4 	movi	r2,-1
 8009ce8:	0401ffc4 	movi	r16,2047
 8009cec:	003e7806 	br	80096d0 <__alt_data_end+0xfc0096d0>
 8009cf0:	4462b03a 	or	r17,r8,r17
 8009cf4:	8822c03a 	cmpne	r17,r17,zero
 8009cf8:	0009883a 	mov	r4,zero
 8009cfc:	003fa006 	br	8009b80 <__alt_data_end+0xfc009b80>
 8009d00:	4811883a 	mov	r8,r9
 8009d04:	3023883a 	mov	r17,r6
 8009d08:	0401ffc4 	movi	r16,2047
 8009d0c:	003e0706 	br	800952c <__alt_data_end+0xfc00952c>
 8009d10:	4811883a 	mov	r8,r9
 8009d14:	3023883a 	mov	r17,r6
 8009d18:	003e0406 	br	800952c <__alt_data_end+0xfc00952c>
 8009d1c:	21fff804 	addi	r7,r4,-32
 8009d20:	01400804 	movi	r5,32
 8009d24:	41ced83a 	srl	r7,r8,r7
 8009d28:	21400a26 	beq	r4,r5,8009d54 <__adddf3+0x8a4>
 8009d2c:	01401004 	movi	r5,64
 8009d30:	2909c83a 	sub	r4,r5,r4
 8009d34:	4108983a 	sll	r4,r8,r4
 8009d38:	2448b03a 	or	r4,r4,r17
 8009d3c:	2008c03a 	cmpne	r4,r4,zero
 8009d40:	3922b03a 	or	r17,r7,r4
 8009d44:	0009883a 	mov	r4,zero
 8009d48:	003f8d06 	br	8009b80 <__alt_data_end+0xfc009b80>
 8009d4c:	0007883a 	mov	r3,zero
 8009d50:	003fdd06 	br	8009cc8 <__alt_data_end+0xfc009cc8>
 8009d54:	0009883a 	mov	r4,zero
 8009d58:	003ff706 	br	8009d38 <__alt_data_end+0xfc009d38>

08009d5c <__divdf3>:
 8009d5c:	defff004 	addi	sp,sp,-64
 8009d60:	dc800815 	stw	r18,32(sp)
 8009d64:	2824d53a 	srli	r18,r5,20
 8009d68:	dd800c15 	stw	r22,48(sp)
 8009d6c:	282cd7fa 	srli	r22,r5,31
 8009d70:	dc000615 	stw	r16,24(sp)
 8009d74:	04000434 	movhi	r16,16
 8009d78:	843fffc4 	addi	r16,r16,-1
 8009d7c:	dfc00f15 	stw	ra,60(sp)
 8009d80:	df000e15 	stw	fp,56(sp)
 8009d84:	ddc00d15 	stw	r23,52(sp)
 8009d88:	dd400b15 	stw	r21,44(sp)
 8009d8c:	dd000a15 	stw	r20,40(sp)
 8009d90:	dcc00915 	stw	r19,36(sp)
 8009d94:	dc400715 	stw	r17,28(sp)
 8009d98:	9481ffcc 	andi	r18,r18,2047
 8009d9c:	2c20703a 	and	r16,r5,r16
 8009da0:	b2003fcc 	andi	r8,r22,255
 8009da4:	90006126 	beq	r18,zero,8009f2c <__divdf3+0x1d0>
 8009da8:	0081ffc4 	movi	r2,2047
 8009dac:	202b883a 	mov	r21,r4
 8009db0:	90803726 	beq	r18,r2,8009e90 <__divdf3+0x134>
 8009db4:	80800434 	orhi	r2,r16,16
 8009db8:	100490fa 	slli	r2,r2,3
 8009dbc:	2020d77a 	srli	r16,r4,29
 8009dc0:	202a90fa 	slli	r21,r4,3
 8009dc4:	94bf0044 	addi	r18,r18,-1023
 8009dc8:	80a0b03a 	or	r16,r16,r2
 8009dcc:	0013883a 	mov	r9,zero
 8009dd0:	000b883a 	mov	r5,zero
 8009dd4:	3806d53a 	srli	r3,r7,20
 8009dd8:	382ed7fa 	srli	r23,r7,31
 8009ddc:	04400434 	movhi	r17,16
 8009de0:	8c7fffc4 	addi	r17,r17,-1
 8009de4:	18c1ffcc 	andi	r3,r3,2047
 8009de8:	3029883a 	mov	r20,r6
 8009dec:	3c62703a 	and	r17,r7,r17
 8009df0:	bf003fcc 	andi	fp,r23,255
 8009df4:	18006e26 	beq	r3,zero,8009fb0 <__divdf3+0x254>
 8009df8:	0081ffc4 	movi	r2,2047
 8009dfc:	18806626 	beq	r3,r2,8009f98 <__divdf3+0x23c>
 8009e00:	88800434 	orhi	r2,r17,16
 8009e04:	100490fa 	slli	r2,r2,3
 8009e08:	3022d77a 	srli	r17,r6,29
 8009e0c:	302890fa 	slli	r20,r6,3
 8009e10:	18ff0044 	addi	r3,r3,-1023
 8009e14:	88a2b03a 	or	r17,r17,r2
 8009e18:	000f883a 	mov	r7,zero
 8009e1c:	b5e6f03a 	xor	r19,r22,r23
 8009e20:	3a4cb03a 	or	r6,r7,r9
 8009e24:	008003c4 	movi	r2,15
 8009e28:	9809883a 	mov	r4,r19
 8009e2c:	90c7c83a 	sub	r3,r18,r3
 8009e30:	9cc03fcc 	andi	r19,r19,255
 8009e34:	11809636 	bltu	r2,r6,800a090 <__divdf3+0x334>
 8009e38:	300c90ba 	slli	r6,r6,2
 8009e3c:	00820074 	movhi	r2,2049
 8009e40:	10a79404 	addi	r2,r2,-25008
 8009e44:	308d883a 	add	r6,r6,r2
 8009e48:	30800017 	ldw	r2,0(r6)
 8009e4c:	1000683a 	jmp	r2
 8009e50:	0800a090 	cmplti	zero,at,642
 8009e54:	08009ec8 	cmpgei	zero,at,635
 8009e58:	0800a080 	call	800a08 <__alt_exception_stack_pointer+0x7ffa08>
 8009e5c:	08009ebc 	xorhi	zero,at,634
 8009e60:	0800a080 	call	800a08 <__alt_exception_stack_pointer+0x7ffa08>
 8009e64:	0800a054 	ori	zero,at,641
 8009e68:	0800a080 	call	800a08 <__alt_exception_stack_pointer+0x7ffa08>
 8009e6c:	08009ebc 	xorhi	zero,at,634
 8009e70:	08009ec8 	cmpgei	zero,at,635
 8009e74:	08009ec8 	cmpgei	zero,at,635
 8009e78:	0800a054 	ori	zero,at,641
 8009e7c:	08009ebc 	xorhi	zero,at,634
 8009e80:	08009eac 	andhi	zero,at,634
 8009e84:	08009eac 	andhi	zero,at,634
 8009e88:	08009eac 	andhi	zero,at,634
 8009e8c:	0800a418 	cmpnei	zero,at,656
 8009e90:	2404b03a 	or	r2,r4,r16
 8009e94:	10006c1e 	bne	r2,zero,800a048 <__divdf3+0x2ec>
 8009e98:	02400204 	movi	r9,8
 8009e9c:	0021883a 	mov	r16,zero
 8009ea0:	002b883a 	mov	r21,zero
 8009ea4:	01400084 	movi	r5,2
 8009ea8:	003fca06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 8009eac:	8023883a 	mov	r17,r16
 8009eb0:	a829883a 	mov	r20,r21
 8009eb4:	4039883a 	mov	fp,r8
 8009eb8:	280f883a 	mov	r7,r5
 8009ebc:	00800084 	movi	r2,2
 8009ec0:	3881601e 	bne	r7,r2,800a444 <__divdf3+0x6e8>
 8009ec4:	e027883a 	mov	r19,fp
 8009ec8:	9900004c 	andi	r4,r19,1
 8009ecc:	0081ffc4 	movi	r2,2047
 8009ed0:	0021883a 	mov	r16,zero
 8009ed4:	002b883a 	mov	r21,zero
 8009ed8:	1004953a 	slli	r2,r2,20
 8009edc:	20c03fcc 	andi	r3,r4,255
 8009ee0:	01400434 	movhi	r5,16
 8009ee4:	297fffc4 	addi	r5,r5,-1
 8009ee8:	180697fa 	slli	r3,r3,31
 8009eec:	8160703a 	and	r16,r16,r5
 8009ef0:	80a0b03a 	or	r16,r16,r2
 8009ef4:	80c6b03a 	or	r3,r16,r3
 8009ef8:	a805883a 	mov	r2,r21
 8009efc:	dfc00f17 	ldw	ra,60(sp)
 8009f00:	df000e17 	ldw	fp,56(sp)
 8009f04:	ddc00d17 	ldw	r23,52(sp)
 8009f08:	dd800c17 	ldw	r22,48(sp)
 8009f0c:	dd400b17 	ldw	r21,44(sp)
 8009f10:	dd000a17 	ldw	r20,40(sp)
 8009f14:	dcc00917 	ldw	r19,36(sp)
 8009f18:	dc800817 	ldw	r18,32(sp)
 8009f1c:	dc400717 	ldw	r17,28(sp)
 8009f20:	dc000617 	ldw	r16,24(sp)
 8009f24:	dec01004 	addi	sp,sp,64
 8009f28:	f800283a 	ret
 8009f2c:	2404b03a 	or	r2,r4,r16
 8009f30:	2023883a 	mov	r17,r4
 8009f34:	10003f26 	beq	r2,zero,800a034 <__divdf3+0x2d8>
 8009f38:	80015e26 	beq	r16,zero,800a4b4 <__divdf3+0x758>
 8009f3c:	8009883a 	mov	r4,r16
 8009f40:	d9800215 	stw	r6,8(sp)
 8009f44:	d9c00515 	stw	r7,20(sp)
 8009f48:	da000415 	stw	r8,16(sp)
 8009f4c:	800bfa80 	call	800bfa8 <__clzsi2>
 8009f50:	d9800217 	ldw	r6,8(sp)
 8009f54:	d9c00517 	ldw	r7,20(sp)
 8009f58:	da000417 	ldw	r8,16(sp)
 8009f5c:	113ffd44 	addi	r4,r2,-11
 8009f60:	00c00704 	movi	r3,28
 8009f64:	19014f16 	blt	r3,r4,800a4a4 <__divdf3+0x748>
 8009f68:	00c00744 	movi	r3,29
 8009f6c:	157ffe04 	addi	r21,r2,-8
 8009f70:	1907c83a 	sub	r3,r3,r4
 8009f74:	8560983a 	sll	r16,r16,r21
 8009f78:	88c6d83a 	srl	r3,r17,r3
 8009f7c:	8d6a983a 	sll	r21,r17,r21
 8009f80:	1c20b03a 	or	r16,r3,r16
 8009f84:	1080fcc4 	addi	r2,r2,1011
 8009f88:	00a5c83a 	sub	r18,zero,r2
 8009f8c:	0013883a 	mov	r9,zero
 8009f90:	000b883a 	mov	r5,zero
 8009f94:	003f8f06 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 8009f98:	3444b03a 	or	r2,r6,r17
 8009f9c:	1000231e 	bne	r2,zero,800a02c <__divdf3+0x2d0>
 8009fa0:	0023883a 	mov	r17,zero
 8009fa4:	0029883a 	mov	r20,zero
 8009fa8:	01c00084 	movi	r7,2
 8009fac:	003f9b06 	br	8009e1c <__alt_data_end+0xfc009e1c>
 8009fb0:	3444b03a 	or	r2,r6,r17
 8009fb4:	10001926 	beq	r2,zero,800a01c <__divdf3+0x2c0>
 8009fb8:	88014b26 	beq	r17,zero,800a4e8 <__divdf3+0x78c>
 8009fbc:	8809883a 	mov	r4,r17
 8009fc0:	d9400115 	stw	r5,4(sp)
 8009fc4:	d9800215 	stw	r6,8(sp)
 8009fc8:	da000415 	stw	r8,16(sp)
 8009fcc:	da400315 	stw	r9,12(sp)
 8009fd0:	800bfa80 	call	800bfa8 <__clzsi2>
 8009fd4:	d9400117 	ldw	r5,4(sp)
 8009fd8:	d9800217 	ldw	r6,8(sp)
 8009fdc:	da000417 	ldw	r8,16(sp)
 8009fe0:	da400317 	ldw	r9,12(sp)
 8009fe4:	113ffd44 	addi	r4,r2,-11
 8009fe8:	00c00704 	movi	r3,28
 8009fec:	19013a16 	blt	r3,r4,800a4d8 <__divdf3+0x77c>
 8009ff0:	00c00744 	movi	r3,29
 8009ff4:	153ffe04 	addi	r20,r2,-8
 8009ff8:	1907c83a 	sub	r3,r3,r4
 8009ffc:	8d22983a 	sll	r17,r17,r20
 800a000:	30c6d83a 	srl	r3,r6,r3
 800a004:	3528983a 	sll	r20,r6,r20
 800a008:	1c62b03a 	or	r17,r3,r17
 800a00c:	1080fcc4 	addi	r2,r2,1011
 800a010:	0087c83a 	sub	r3,zero,r2
 800a014:	000f883a 	mov	r7,zero
 800a018:	003f8006 	br	8009e1c <__alt_data_end+0xfc009e1c>
 800a01c:	0023883a 	mov	r17,zero
 800a020:	0029883a 	mov	r20,zero
 800a024:	01c00044 	movi	r7,1
 800a028:	003f7c06 	br	8009e1c <__alt_data_end+0xfc009e1c>
 800a02c:	01c000c4 	movi	r7,3
 800a030:	003f7a06 	br	8009e1c <__alt_data_end+0xfc009e1c>
 800a034:	02400104 	movi	r9,4
 800a038:	0021883a 	mov	r16,zero
 800a03c:	002b883a 	mov	r21,zero
 800a040:	01400044 	movi	r5,1
 800a044:	003f6306 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a048:	02400304 	movi	r9,12
 800a04c:	014000c4 	movi	r5,3
 800a050:	003f6006 	br	8009dd4 <__alt_data_end+0xfc009dd4>
 800a054:	04000434 	movhi	r16,16
 800a058:	0009883a 	mov	r4,zero
 800a05c:	843fffc4 	addi	r16,r16,-1
 800a060:	057fffc4 	movi	r21,-1
 800a064:	0081ffc4 	movi	r2,2047
 800a068:	003f9b06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a06c:	00c00044 	movi	r3,1
 800a070:	1887c83a 	sub	r3,r3,r2
 800a074:	01000e04 	movi	r4,56
 800a078:	20c1530e 	bge	r4,r3,800a5c8 <__divdf3+0x86c>
 800a07c:	9900004c 	andi	r4,r19,1
 800a080:	0005883a 	mov	r2,zero
 800a084:	0021883a 	mov	r16,zero
 800a088:	002b883a 	mov	r21,zero
 800a08c:	003f9206 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a090:	8c012e36 	bltu	r17,r16,800a54c <__divdf3+0x7f0>
 800a094:	84412c26 	beq	r16,r17,800a548 <__divdf3+0x7ec>
 800a098:	a82f883a 	mov	r23,r21
 800a09c:	18ffffc4 	addi	r3,r3,-1
 800a0a0:	002b883a 	mov	r21,zero
 800a0a4:	a004d63a 	srli	r2,r20,24
 800a0a8:	8822923a 	slli	r17,r17,8
 800a0ac:	a028923a 	slli	r20,r20,8
 800a0b0:	8009883a 	mov	r4,r16
 800a0b4:	88acb03a 	or	r22,r17,r2
 800a0b8:	dd000015 	stw	r20,0(sp)
 800a0bc:	b028d43a 	srli	r20,r22,16
 800a0c0:	d8c00215 	stw	r3,8(sp)
 800a0c4:	b4bfffcc 	andi	r18,r22,65535
 800a0c8:	a00b883a 	mov	r5,r20
 800a0cc:	8007e980 	call	8007e98 <__udivsi3>
 800a0d0:	100b883a 	mov	r5,r2
 800a0d4:	9009883a 	mov	r4,r18
 800a0d8:	1023883a 	mov	r17,r2
 800a0dc:	8007f540 	call	8007f54 <__mulsi3>
 800a0e0:	8009883a 	mov	r4,r16
 800a0e4:	a00b883a 	mov	r5,r20
 800a0e8:	1039883a 	mov	fp,r2
 800a0ec:	8007efc0 	call	8007efc <__umodsi3>
 800a0f0:	1004943a 	slli	r2,r2,16
 800a0f4:	b808d43a 	srli	r4,r23,16
 800a0f8:	d8c00217 	ldw	r3,8(sp)
 800a0fc:	2084b03a 	or	r2,r4,r2
 800a100:	1700062e 	bgeu	r2,fp,800a11c <__divdf3+0x3c0>
 800a104:	1585883a 	add	r2,r2,r22
 800a108:	893fffc4 	addi	r4,r17,-1
 800a10c:	15811d36 	bltu	r2,r22,800a584 <__divdf3+0x828>
 800a110:	17011c2e 	bgeu	r2,fp,800a584 <__divdf3+0x828>
 800a114:	8c7fff84 	addi	r17,r17,-2
 800a118:	1585883a 	add	r2,r2,r22
 800a11c:	1739c83a 	sub	fp,r2,fp
 800a120:	a00b883a 	mov	r5,r20
 800a124:	e009883a 	mov	r4,fp
 800a128:	d8c00215 	stw	r3,8(sp)
 800a12c:	8007e980 	call	8007e98 <__udivsi3>
 800a130:	100b883a 	mov	r5,r2
 800a134:	9009883a 	mov	r4,r18
 800a138:	1021883a 	mov	r16,r2
 800a13c:	8007f540 	call	8007f54 <__mulsi3>
 800a140:	a00b883a 	mov	r5,r20
 800a144:	e009883a 	mov	r4,fp
 800a148:	d8800415 	stw	r2,16(sp)
 800a14c:	8007efc0 	call	8007efc <__umodsi3>
 800a150:	1004943a 	slli	r2,r2,16
 800a154:	da000417 	ldw	r8,16(sp)
 800a158:	bdffffcc 	andi	r23,r23,65535
 800a15c:	b884b03a 	or	r2,r23,r2
 800a160:	d8c00217 	ldw	r3,8(sp)
 800a164:	1200062e 	bgeu	r2,r8,800a180 <__divdf3+0x424>
 800a168:	1585883a 	add	r2,r2,r22
 800a16c:	813fffc4 	addi	r4,r16,-1
 800a170:	15810236 	bltu	r2,r22,800a57c <__divdf3+0x820>
 800a174:	1201012e 	bgeu	r2,r8,800a57c <__divdf3+0x820>
 800a178:	843fff84 	addi	r16,r16,-2
 800a17c:	1585883a 	add	r2,r2,r22
 800a180:	8822943a 	slli	r17,r17,16
 800a184:	d9800017 	ldw	r6,0(sp)
 800a188:	1211c83a 	sub	r8,r2,r8
 800a18c:	8c22b03a 	or	r17,r17,r16
 800a190:	373fffcc 	andi	fp,r6,65535
 800a194:	8abfffcc 	andi	r10,r17,65535
 800a198:	8820d43a 	srli	r16,r17,16
 800a19c:	5009883a 	mov	r4,r10
 800a1a0:	e00b883a 	mov	r5,fp
 800a1a4:	302ed43a 	srli	r23,r6,16
 800a1a8:	d8c00215 	stw	r3,8(sp)
 800a1ac:	da000415 	stw	r8,16(sp)
 800a1b0:	da800115 	stw	r10,4(sp)
 800a1b4:	8007f540 	call	8007f54 <__mulsi3>
 800a1b8:	800b883a 	mov	r5,r16
 800a1bc:	e009883a 	mov	r4,fp
 800a1c0:	d8800515 	stw	r2,20(sp)
 800a1c4:	8007f540 	call	8007f54 <__mulsi3>
 800a1c8:	8009883a 	mov	r4,r16
 800a1cc:	b80b883a 	mov	r5,r23
 800a1d0:	d8800315 	stw	r2,12(sp)
 800a1d4:	8007f540 	call	8007f54 <__mulsi3>
 800a1d8:	da800117 	ldw	r10,4(sp)
 800a1dc:	b80b883a 	mov	r5,r23
 800a1e0:	1021883a 	mov	r16,r2
 800a1e4:	5009883a 	mov	r4,r10
 800a1e8:	8007f540 	call	8007f54 <__mulsi3>
 800a1ec:	d9c00517 	ldw	r7,20(sp)
 800a1f0:	da400317 	ldw	r9,12(sp)
 800a1f4:	d8c00217 	ldw	r3,8(sp)
 800a1f8:	3808d43a 	srli	r4,r7,16
 800a1fc:	1245883a 	add	r2,r2,r9
 800a200:	da000417 	ldw	r8,16(sp)
 800a204:	2085883a 	add	r2,r4,r2
 800a208:	1240022e 	bgeu	r2,r9,800a214 <__divdf3+0x4b8>
 800a20c:	01000074 	movhi	r4,1
 800a210:	8121883a 	add	r16,r16,r4
 800a214:	1008d43a 	srli	r4,r2,16
 800a218:	1004943a 	slli	r2,r2,16
 800a21c:	39ffffcc 	andi	r7,r7,65535
 800a220:	2409883a 	add	r4,r4,r16
 800a224:	11c5883a 	add	r2,r2,r7
 800a228:	4100bb36 	bltu	r8,r4,800a518 <__divdf3+0x7bc>
 800a22c:	4100d726 	beq	r8,r4,800a58c <__divdf3+0x830>
 800a230:	4109c83a 	sub	r4,r8,r4
 800a234:	a8a1c83a 	sub	r16,r21,r2
 800a238:	ac2b803a 	cmpltu	r21,r21,r16
 800a23c:	256bc83a 	sub	r21,r4,r21
 800a240:	b540d926 	beq	r22,r21,800a5a8 <__divdf3+0x84c>
 800a244:	a00b883a 	mov	r5,r20
 800a248:	a809883a 	mov	r4,r21
 800a24c:	d8c00215 	stw	r3,8(sp)
 800a250:	8007e980 	call	8007e98 <__udivsi3>
 800a254:	100b883a 	mov	r5,r2
 800a258:	9009883a 	mov	r4,r18
 800a25c:	d8800515 	stw	r2,20(sp)
 800a260:	8007f540 	call	8007f54 <__mulsi3>
 800a264:	a809883a 	mov	r4,r21
 800a268:	a00b883a 	mov	r5,r20
 800a26c:	d8800415 	stw	r2,16(sp)
 800a270:	8007efc0 	call	8007efc <__umodsi3>
 800a274:	1004943a 	slli	r2,r2,16
 800a278:	8008d43a 	srli	r4,r16,16
 800a27c:	da000417 	ldw	r8,16(sp)
 800a280:	d8c00217 	ldw	r3,8(sp)
 800a284:	2084b03a 	or	r2,r4,r2
 800a288:	d9c00517 	ldw	r7,20(sp)
 800a28c:	1200062e 	bgeu	r2,r8,800a2a8 <__divdf3+0x54c>
 800a290:	1585883a 	add	r2,r2,r22
 800a294:	393fffc4 	addi	r4,r7,-1
 800a298:	1580c536 	bltu	r2,r22,800a5b0 <__divdf3+0x854>
 800a29c:	1200c42e 	bgeu	r2,r8,800a5b0 <__divdf3+0x854>
 800a2a0:	39ffff84 	addi	r7,r7,-2
 800a2a4:	1585883a 	add	r2,r2,r22
 800a2a8:	122bc83a 	sub	r21,r2,r8
 800a2ac:	a00b883a 	mov	r5,r20
 800a2b0:	a809883a 	mov	r4,r21
 800a2b4:	d8c00215 	stw	r3,8(sp)
 800a2b8:	d9c00515 	stw	r7,20(sp)
 800a2bc:	8007e980 	call	8007e98 <__udivsi3>
 800a2c0:	9009883a 	mov	r4,r18
 800a2c4:	100b883a 	mov	r5,r2
 800a2c8:	d8800415 	stw	r2,16(sp)
 800a2cc:	8007f540 	call	8007f54 <__mulsi3>
 800a2d0:	a809883a 	mov	r4,r21
 800a2d4:	a00b883a 	mov	r5,r20
 800a2d8:	1025883a 	mov	r18,r2
 800a2dc:	8007efc0 	call	8007efc <__umodsi3>
 800a2e0:	1004943a 	slli	r2,r2,16
 800a2e4:	813fffcc 	andi	r4,r16,65535
 800a2e8:	d8c00217 	ldw	r3,8(sp)
 800a2ec:	20a0b03a 	or	r16,r4,r2
 800a2f0:	d9c00517 	ldw	r7,20(sp)
 800a2f4:	da000417 	ldw	r8,16(sp)
 800a2f8:	8480062e 	bgeu	r16,r18,800a314 <__divdf3+0x5b8>
 800a2fc:	85a1883a 	add	r16,r16,r22
 800a300:	40bfffc4 	addi	r2,r8,-1
 800a304:	8580ac36 	bltu	r16,r22,800a5b8 <__divdf3+0x85c>
 800a308:	8480ab2e 	bgeu	r16,r18,800a5b8 <__divdf3+0x85c>
 800a30c:	423fff84 	addi	r8,r8,-2
 800a310:	85a1883a 	add	r16,r16,r22
 800a314:	3804943a 	slli	r2,r7,16
 800a318:	84a1c83a 	sub	r16,r16,r18
 800a31c:	e009883a 	mov	r4,fp
 800a320:	1228b03a 	or	r20,r2,r8
 800a324:	a1ffffcc 	andi	r7,r20,65535
 800a328:	a024d43a 	srli	r18,r20,16
 800a32c:	380b883a 	mov	r5,r7
 800a330:	d8c00215 	stw	r3,8(sp)
 800a334:	d9c00515 	stw	r7,20(sp)
 800a338:	8007f540 	call	8007f54 <__mulsi3>
 800a33c:	900b883a 	mov	r5,r18
 800a340:	e009883a 	mov	r4,fp
 800a344:	102b883a 	mov	r21,r2
 800a348:	8007f540 	call	8007f54 <__mulsi3>
 800a34c:	900b883a 	mov	r5,r18
 800a350:	b809883a 	mov	r4,r23
 800a354:	1039883a 	mov	fp,r2
 800a358:	8007f540 	call	8007f54 <__mulsi3>
 800a35c:	d9c00517 	ldw	r7,20(sp)
 800a360:	b80b883a 	mov	r5,r23
 800a364:	1025883a 	mov	r18,r2
 800a368:	3809883a 	mov	r4,r7
 800a36c:	8007f540 	call	8007f54 <__mulsi3>
 800a370:	a808d43a 	srli	r4,r21,16
 800a374:	1705883a 	add	r2,r2,fp
 800a378:	d8c00217 	ldw	r3,8(sp)
 800a37c:	2085883a 	add	r2,r4,r2
 800a380:	1700022e 	bgeu	r2,fp,800a38c <__divdf3+0x630>
 800a384:	01000074 	movhi	r4,1
 800a388:	9125883a 	add	r18,r18,r4
 800a38c:	1008d43a 	srli	r4,r2,16
 800a390:	1004943a 	slli	r2,r2,16
 800a394:	ad7fffcc 	andi	r21,r21,65535
 800a398:	2489883a 	add	r4,r4,r18
 800a39c:	1545883a 	add	r2,r2,r21
 800a3a0:	81003836 	bltu	r16,r4,800a484 <__divdf3+0x728>
 800a3a4:	81003626 	beq	r16,r4,800a480 <__divdf3+0x724>
 800a3a8:	a5000054 	ori	r20,r20,1
 800a3ac:	1880ffc4 	addi	r2,r3,1023
 800a3b0:	00bf2e0e 	bge	zero,r2,800a06c <__alt_data_end+0xfc00a06c>
 800a3b4:	a10001cc 	andi	r4,r20,7
 800a3b8:	20000726 	beq	r4,zero,800a3d8 <__divdf3+0x67c>
 800a3bc:	a10003cc 	andi	r4,r20,15
 800a3c0:	01400104 	movi	r5,4
 800a3c4:	21400426 	beq	r4,r5,800a3d8 <__divdf3+0x67c>
 800a3c8:	a149883a 	add	r4,r20,r5
 800a3cc:	2529803a 	cmpltu	r20,r4,r20
 800a3d0:	8d23883a 	add	r17,r17,r20
 800a3d4:	2029883a 	mov	r20,r4
 800a3d8:	8900402c 	andhi	r4,r17,256
 800a3dc:	20000426 	beq	r4,zero,800a3f0 <__divdf3+0x694>
 800a3e0:	18810004 	addi	r2,r3,1024
 800a3e4:	00ffc034 	movhi	r3,65280
 800a3e8:	18ffffc4 	addi	r3,r3,-1
 800a3ec:	88e2703a 	and	r17,r17,r3
 800a3f0:	00c1ff84 	movi	r3,2046
 800a3f4:	18beb416 	blt	r3,r2,8009ec8 <__alt_data_end+0xfc009ec8>
 800a3f8:	a028d0fa 	srli	r20,r20,3
 800a3fc:	882a977a 	slli	r21,r17,29
 800a400:	8820927a 	slli	r16,r17,9
 800a404:	1081ffcc 	andi	r2,r2,2047
 800a408:	ad2ab03a 	or	r21,r21,r20
 800a40c:	8020d33a 	srli	r16,r16,12
 800a410:	9900004c 	andi	r4,r19,1
 800a414:	003eb006 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a418:	8080022c 	andhi	r2,r16,8
 800a41c:	10001226 	beq	r2,zero,800a468 <__divdf3+0x70c>
 800a420:	8880022c 	andhi	r2,r17,8
 800a424:	1000101e 	bne	r2,zero,800a468 <__divdf3+0x70c>
 800a428:	00800434 	movhi	r2,16
 800a42c:	8c000234 	orhi	r16,r17,8
 800a430:	10bfffc4 	addi	r2,r2,-1
 800a434:	b809883a 	mov	r4,r23
 800a438:	80a0703a 	and	r16,r16,r2
 800a43c:	a02b883a 	mov	r21,r20
 800a440:	003f0806 	br	800a064 <__alt_data_end+0xfc00a064>
 800a444:	008000c4 	movi	r2,3
 800a448:	3880b126 	beq	r7,r2,800a710 <__divdf3+0x9b4>
 800a44c:	00800044 	movi	r2,1
 800a450:	38805b1e 	bne	r7,r2,800a5c0 <__divdf3+0x864>
 800a454:	e009883a 	mov	r4,fp
 800a458:	0005883a 	mov	r2,zero
 800a45c:	0021883a 	mov	r16,zero
 800a460:	002b883a 	mov	r21,zero
 800a464:	003e9c06 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a468:	00800434 	movhi	r2,16
 800a46c:	84000234 	orhi	r16,r16,8
 800a470:	10bfffc4 	addi	r2,r2,-1
 800a474:	b009883a 	mov	r4,r22
 800a478:	80a0703a 	and	r16,r16,r2
 800a47c:	003ef906 	br	800a064 <__alt_data_end+0xfc00a064>
 800a480:	103fca26 	beq	r2,zero,800a3ac <__alt_data_end+0xfc00a3ac>
 800a484:	b421883a 	add	r16,r22,r16
 800a488:	a17fffc4 	addi	r5,r20,-1
 800a48c:	8580422e 	bgeu	r16,r22,800a598 <__divdf3+0x83c>
 800a490:	2829883a 	mov	r20,r5
 800a494:	813fc41e 	bne	r16,r4,800a3a8 <__alt_data_end+0xfc00a3a8>
 800a498:	d9800017 	ldw	r6,0(sp)
 800a49c:	30bfc21e 	bne	r6,r2,800a3a8 <__alt_data_end+0xfc00a3a8>
 800a4a0:	003fc206 	br	800a3ac <__alt_data_end+0xfc00a3ac>
 800a4a4:	143ff604 	addi	r16,r2,-40
 800a4a8:	8c20983a 	sll	r16,r17,r16
 800a4ac:	002b883a 	mov	r21,zero
 800a4b0:	003eb406 	br	8009f84 <__alt_data_end+0xfc009f84>
 800a4b4:	d9800215 	stw	r6,8(sp)
 800a4b8:	d9c00515 	stw	r7,20(sp)
 800a4bc:	da000415 	stw	r8,16(sp)
 800a4c0:	800bfa80 	call	800bfa8 <__clzsi2>
 800a4c4:	10800804 	addi	r2,r2,32
 800a4c8:	da000417 	ldw	r8,16(sp)
 800a4cc:	d9c00517 	ldw	r7,20(sp)
 800a4d0:	d9800217 	ldw	r6,8(sp)
 800a4d4:	003ea106 	br	8009f5c <__alt_data_end+0xfc009f5c>
 800a4d8:	147ff604 	addi	r17,r2,-40
 800a4dc:	3462983a 	sll	r17,r6,r17
 800a4e0:	0029883a 	mov	r20,zero
 800a4e4:	003ec906 	br	800a00c <__alt_data_end+0xfc00a00c>
 800a4e8:	3009883a 	mov	r4,r6
 800a4ec:	d9400115 	stw	r5,4(sp)
 800a4f0:	d9800215 	stw	r6,8(sp)
 800a4f4:	da000415 	stw	r8,16(sp)
 800a4f8:	da400315 	stw	r9,12(sp)
 800a4fc:	800bfa80 	call	800bfa8 <__clzsi2>
 800a500:	10800804 	addi	r2,r2,32
 800a504:	da400317 	ldw	r9,12(sp)
 800a508:	da000417 	ldw	r8,16(sp)
 800a50c:	d9800217 	ldw	r6,8(sp)
 800a510:	d9400117 	ldw	r5,4(sp)
 800a514:	003eb306 	br	8009fe4 <__alt_data_end+0xfc009fe4>
 800a518:	d9800017 	ldw	r6,0(sp)
 800a51c:	a9ab883a 	add	r21,r21,r6
 800a520:	a98b803a 	cmpltu	r5,r21,r6
 800a524:	2d8b883a 	add	r5,r5,r22
 800a528:	2a11883a 	add	r8,r5,r8
 800a52c:	897fffc4 	addi	r5,r17,-1
 800a530:	b2000c2e 	bgeu	r22,r8,800a564 <__divdf3+0x808>
 800a534:	41003f36 	bltu	r8,r4,800a634 <__divdf3+0x8d8>
 800a538:	22006c26 	beq	r4,r8,800a6ec <__divdf3+0x990>
 800a53c:	4109c83a 	sub	r4,r8,r4
 800a540:	2823883a 	mov	r17,r5
 800a544:	003f3b06 	br	800a234 <__alt_data_end+0xfc00a234>
 800a548:	ad3ed336 	bltu	r21,r20,800a098 <__alt_data_end+0xfc00a098>
 800a54c:	a804d07a 	srli	r2,r21,1
 800a550:	802e97fa 	slli	r23,r16,31
 800a554:	a82a97fa 	slli	r21,r21,31
 800a558:	8020d07a 	srli	r16,r16,1
 800a55c:	b8aeb03a 	or	r23,r23,r2
 800a560:	003ed006 	br	800a0a4 <__alt_data_end+0xfc00a0a4>
 800a564:	b23ff51e 	bne	r22,r8,800a53c <__alt_data_end+0xfc00a53c>
 800a568:	d9800017 	ldw	r6,0(sp)
 800a56c:	a9bff12e 	bgeu	r21,r6,800a534 <__alt_data_end+0xfc00a534>
 800a570:	b109c83a 	sub	r4,r22,r4
 800a574:	2823883a 	mov	r17,r5
 800a578:	003f2e06 	br	800a234 <__alt_data_end+0xfc00a234>
 800a57c:	2021883a 	mov	r16,r4
 800a580:	003eff06 	br	800a180 <__alt_data_end+0xfc00a180>
 800a584:	2023883a 	mov	r17,r4
 800a588:	003ee406 	br	800a11c <__alt_data_end+0xfc00a11c>
 800a58c:	a8bfe236 	bltu	r21,r2,800a518 <__alt_data_end+0xfc00a518>
 800a590:	0009883a 	mov	r4,zero
 800a594:	003f2706 	br	800a234 <__alt_data_end+0xfc00a234>
 800a598:	81002d36 	bltu	r16,r4,800a650 <__divdf3+0x8f4>
 800a59c:	24005626 	beq	r4,r16,800a6f8 <__divdf3+0x99c>
 800a5a0:	2829883a 	mov	r20,r5
 800a5a4:	003f8006 	br	800a3a8 <__alt_data_end+0xfc00a3a8>
 800a5a8:	053fffc4 	movi	r20,-1
 800a5ac:	003f7f06 	br	800a3ac <__alt_data_end+0xfc00a3ac>
 800a5b0:	200f883a 	mov	r7,r4
 800a5b4:	003f3c06 	br	800a2a8 <__alt_data_end+0xfc00a2a8>
 800a5b8:	1011883a 	mov	r8,r2
 800a5bc:	003f5506 	br	800a314 <__alt_data_end+0xfc00a314>
 800a5c0:	e027883a 	mov	r19,fp
 800a5c4:	003f7906 	br	800a3ac <__alt_data_end+0xfc00a3ac>
 800a5c8:	010007c4 	movi	r4,31
 800a5cc:	20c02816 	blt	r4,r3,800a670 <__divdf3+0x914>
 800a5d0:	00800804 	movi	r2,32
 800a5d4:	10c5c83a 	sub	r2,r2,r3
 800a5d8:	888a983a 	sll	r5,r17,r2
 800a5dc:	a0c8d83a 	srl	r4,r20,r3
 800a5e0:	a084983a 	sll	r2,r20,r2
 800a5e4:	88e2d83a 	srl	r17,r17,r3
 800a5e8:	2906b03a 	or	r3,r5,r4
 800a5ec:	1004c03a 	cmpne	r2,r2,zero
 800a5f0:	1886b03a 	or	r3,r3,r2
 800a5f4:	188001cc 	andi	r2,r3,7
 800a5f8:	10000726 	beq	r2,zero,800a618 <__divdf3+0x8bc>
 800a5fc:	188003cc 	andi	r2,r3,15
 800a600:	01000104 	movi	r4,4
 800a604:	11000426 	beq	r2,r4,800a618 <__divdf3+0x8bc>
 800a608:	1805883a 	mov	r2,r3
 800a60c:	10c00104 	addi	r3,r2,4
 800a610:	1885803a 	cmpltu	r2,r3,r2
 800a614:	88a3883a 	add	r17,r17,r2
 800a618:	8880202c 	andhi	r2,r17,128
 800a61c:	10002926 	beq	r2,zero,800a6c4 <__divdf3+0x968>
 800a620:	9900004c 	andi	r4,r19,1
 800a624:	00800044 	movi	r2,1
 800a628:	0021883a 	mov	r16,zero
 800a62c:	002b883a 	mov	r21,zero
 800a630:	003e2906 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a634:	d9800017 	ldw	r6,0(sp)
 800a638:	8c7fff84 	addi	r17,r17,-2
 800a63c:	a9ab883a 	add	r21,r21,r6
 800a640:	a98b803a 	cmpltu	r5,r21,r6
 800a644:	2d8b883a 	add	r5,r5,r22
 800a648:	2a11883a 	add	r8,r5,r8
 800a64c:	003ef806 	br	800a230 <__alt_data_end+0xfc00a230>
 800a650:	d9800017 	ldw	r6,0(sp)
 800a654:	318f883a 	add	r7,r6,r6
 800a658:	398b803a 	cmpltu	r5,r7,r6
 800a65c:	2d8d883a 	add	r6,r5,r22
 800a660:	81a1883a 	add	r16,r16,r6
 800a664:	a17fff84 	addi	r5,r20,-2
 800a668:	d9c00015 	stw	r7,0(sp)
 800a66c:	003f8806 	br	800a490 <__alt_data_end+0xfc00a490>
 800a670:	013ff844 	movi	r4,-31
 800a674:	2085c83a 	sub	r2,r4,r2
 800a678:	8888d83a 	srl	r4,r17,r2
 800a67c:	00800804 	movi	r2,32
 800a680:	18802126 	beq	r3,r2,800a708 <__divdf3+0x9ac>
 800a684:	04001004 	movi	r16,64
 800a688:	80c7c83a 	sub	r3,r16,r3
 800a68c:	88e0983a 	sll	r16,r17,r3
 800a690:	8504b03a 	or	r2,r16,r20
 800a694:	1004c03a 	cmpne	r2,r2,zero
 800a698:	2084b03a 	or	r2,r4,r2
 800a69c:	144001cc 	andi	r17,r2,7
 800a6a0:	88000d1e 	bne	r17,zero,800a6d8 <__divdf3+0x97c>
 800a6a4:	0021883a 	mov	r16,zero
 800a6a8:	102ad0fa 	srli	r21,r2,3
 800a6ac:	9900004c 	andi	r4,r19,1
 800a6b0:	0005883a 	mov	r2,zero
 800a6b4:	ac6ab03a 	or	r21,r21,r17
 800a6b8:	003e0706 	br	8009ed8 <__alt_data_end+0xfc009ed8>
 800a6bc:	1007883a 	mov	r3,r2
 800a6c0:	0023883a 	mov	r17,zero
 800a6c4:	8820927a 	slli	r16,r17,9
 800a6c8:	1805883a 	mov	r2,r3
 800a6cc:	8822977a 	slli	r17,r17,29
 800a6d0:	8020d33a 	srli	r16,r16,12
 800a6d4:	003ff406 	br	800a6a8 <__alt_data_end+0xfc00a6a8>
 800a6d8:	10c003cc 	andi	r3,r2,15
 800a6dc:	01000104 	movi	r4,4
 800a6e0:	193ff626 	beq	r3,r4,800a6bc <__alt_data_end+0xfc00a6bc>
 800a6e4:	0023883a 	mov	r17,zero
 800a6e8:	003fc806 	br	800a60c <__alt_data_end+0xfc00a60c>
 800a6ec:	a8bfd136 	bltu	r21,r2,800a634 <__alt_data_end+0xfc00a634>
 800a6f0:	2823883a 	mov	r17,r5
 800a6f4:	003fa606 	br	800a590 <__alt_data_end+0xfc00a590>
 800a6f8:	d9800017 	ldw	r6,0(sp)
 800a6fc:	30bfd436 	bltu	r6,r2,800a650 <__alt_data_end+0xfc00a650>
 800a700:	2829883a 	mov	r20,r5
 800a704:	003f6406 	br	800a498 <__alt_data_end+0xfc00a498>
 800a708:	0021883a 	mov	r16,zero
 800a70c:	003fe006 	br	800a690 <__alt_data_end+0xfc00a690>
 800a710:	00800434 	movhi	r2,16
 800a714:	8c000234 	orhi	r16,r17,8
 800a718:	10bfffc4 	addi	r2,r2,-1
 800a71c:	e009883a 	mov	r4,fp
 800a720:	80a0703a 	and	r16,r16,r2
 800a724:	a02b883a 	mov	r21,r20
 800a728:	003e4e06 	br	800a064 <__alt_data_end+0xfc00a064>

0800a72c <__eqdf2>:
 800a72c:	2804d53a 	srli	r2,r5,20
 800a730:	3806d53a 	srli	r3,r7,20
 800a734:	02000434 	movhi	r8,16
 800a738:	423fffc4 	addi	r8,r8,-1
 800a73c:	1081ffcc 	andi	r2,r2,2047
 800a740:	0281ffc4 	movi	r10,2047
 800a744:	2a12703a 	and	r9,r5,r8
 800a748:	18c1ffcc 	andi	r3,r3,2047
 800a74c:	3a10703a 	and	r8,r7,r8
 800a750:	280ad7fa 	srli	r5,r5,31
 800a754:	380ed7fa 	srli	r7,r7,31
 800a758:	12801026 	beq	r2,r10,800a79c <__eqdf2+0x70>
 800a75c:	0281ffc4 	movi	r10,2047
 800a760:	1a800a26 	beq	r3,r10,800a78c <__eqdf2+0x60>
 800a764:	10c00226 	beq	r2,r3,800a770 <__eqdf2+0x44>
 800a768:	00800044 	movi	r2,1
 800a76c:	f800283a 	ret
 800a770:	4a3ffd1e 	bne	r9,r8,800a768 <__alt_data_end+0xfc00a768>
 800a774:	21bffc1e 	bne	r4,r6,800a768 <__alt_data_end+0xfc00a768>
 800a778:	29c00c26 	beq	r5,r7,800a7ac <__eqdf2+0x80>
 800a77c:	103ffa1e 	bne	r2,zero,800a768 <__alt_data_end+0xfc00a768>
 800a780:	2244b03a 	or	r2,r4,r9
 800a784:	1004c03a 	cmpne	r2,r2,zero
 800a788:	f800283a 	ret
 800a78c:	3214b03a 	or	r10,r6,r8
 800a790:	503ff426 	beq	r10,zero,800a764 <__alt_data_end+0xfc00a764>
 800a794:	00800044 	movi	r2,1
 800a798:	f800283a 	ret
 800a79c:	2254b03a 	or	r10,r4,r9
 800a7a0:	503fee26 	beq	r10,zero,800a75c <__alt_data_end+0xfc00a75c>
 800a7a4:	00800044 	movi	r2,1
 800a7a8:	f800283a 	ret
 800a7ac:	0005883a 	mov	r2,zero
 800a7b0:	f800283a 	ret

0800a7b4 <__gedf2>:
 800a7b4:	2804d53a 	srli	r2,r5,20
 800a7b8:	3806d53a 	srli	r3,r7,20
 800a7bc:	02000434 	movhi	r8,16
 800a7c0:	423fffc4 	addi	r8,r8,-1
 800a7c4:	1081ffcc 	andi	r2,r2,2047
 800a7c8:	0241ffc4 	movi	r9,2047
 800a7cc:	2a14703a 	and	r10,r5,r8
 800a7d0:	18c1ffcc 	andi	r3,r3,2047
 800a7d4:	3a10703a 	and	r8,r7,r8
 800a7d8:	280ad7fa 	srli	r5,r5,31
 800a7dc:	380ed7fa 	srli	r7,r7,31
 800a7e0:	12401d26 	beq	r2,r9,800a858 <__gedf2+0xa4>
 800a7e4:	0241ffc4 	movi	r9,2047
 800a7e8:	1a401226 	beq	r3,r9,800a834 <__gedf2+0x80>
 800a7ec:	1000081e 	bne	r2,zero,800a810 <__gedf2+0x5c>
 800a7f0:	2296b03a 	or	r11,r4,r10
 800a7f4:	5813003a 	cmpeq	r9,r11,zero
 800a7f8:	1800091e 	bne	r3,zero,800a820 <__gedf2+0x6c>
 800a7fc:	3218b03a 	or	r12,r6,r8
 800a800:	6000071e 	bne	r12,zero,800a820 <__gedf2+0x6c>
 800a804:	0005883a 	mov	r2,zero
 800a808:	5800101e 	bne	r11,zero,800a84c <__gedf2+0x98>
 800a80c:	f800283a 	ret
 800a810:	18000c1e 	bne	r3,zero,800a844 <__gedf2+0x90>
 800a814:	3212b03a 	or	r9,r6,r8
 800a818:	48000c26 	beq	r9,zero,800a84c <__gedf2+0x98>
 800a81c:	0013883a 	mov	r9,zero
 800a820:	39c03fcc 	andi	r7,r7,255
 800a824:	48000826 	beq	r9,zero,800a848 <__gedf2+0x94>
 800a828:	38000926 	beq	r7,zero,800a850 <__gedf2+0x9c>
 800a82c:	00800044 	movi	r2,1
 800a830:	f800283a 	ret
 800a834:	3212b03a 	or	r9,r6,r8
 800a838:	483fec26 	beq	r9,zero,800a7ec <__alt_data_end+0xfc00a7ec>
 800a83c:	00bfff84 	movi	r2,-2
 800a840:	f800283a 	ret
 800a844:	39c03fcc 	andi	r7,r7,255
 800a848:	29c00626 	beq	r5,r7,800a864 <__gedf2+0xb0>
 800a84c:	283ff726 	beq	r5,zero,800a82c <__alt_data_end+0xfc00a82c>
 800a850:	00bfffc4 	movi	r2,-1
 800a854:	f800283a 	ret
 800a858:	2292b03a 	or	r9,r4,r10
 800a85c:	483fe126 	beq	r9,zero,800a7e4 <__alt_data_end+0xfc00a7e4>
 800a860:	003ff606 	br	800a83c <__alt_data_end+0xfc00a83c>
 800a864:	18bff916 	blt	r3,r2,800a84c <__alt_data_end+0xfc00a84c>
 800a868:	10c00316 	blt	r2,r3,800a878 <__gedf2+0xc4>
 800a86c:	42bff736 	bltu	r8,r10,800a84c <__alt_data_end+0xfc00a84c>
 800a870:	52000326 	beq	r10,r8,800a880 <__gedf2+0xcc>
 800a874:	5200042e 	bgeu	r10,r8,800a888 <__gedf2+0xd4>
 800a878:	283fec1e 	bne	r5,zero,800a82c <__alt_data_end+0xfc00a82c>
 800a87c:	003ff406 	br	800a850 <__alt_data_end+0xfc00a850>
 800a880:	313ff236 	bltu	r6,r4,800a84c <__alt_data_end+0xfc00a84c>
 800a884:	21bffc36 	bltu	r4,r6,800a878 <__alt_data_end+0xfc00a878>
 800a888:	0005883a 	mov	r2,zero
 800a88c:	f800283a 	ret

0800a890 <__ledf2>:
 800a890:	2804d53a 	srli	r2,r5,20
 800a894:	3810d53a 	srli	r8,r7,20
 800a898:	00c00434 	movhi	r3,16
 800a89c:	18ffffc4 	addi	r3,r3,-1
 800a8a0:	1081ffcc 	andi	r2,r2,2047
 800a8a4:	0241ffc4 	movi	r9,2047
 800a8a8:	28d4703a 	and	r10,r5,r3
 800a8ac:	4201ffcc 	andi	r8,r8,2047
 800a8b0:	38c6703a 	and	r3,r7,r3
 800a8b4:	280ad7fa 	srli	r5,r5,31
 800a8b8:	380ed7fa 	srli	r7,r7,31
 800a8bc:	12401f26 	beq	r2,r9,800a93c <__ledf2+0xac>
 800a8c0:	0241ffc4 	movi	r9,2047
 800a8c4:	42401426 	beq	r8,r9,800a918 <__ledf2+0x88>
 800a8c8:	1000091e 	bne	r2,zero,800a8f0 <__ledf2+0x60>
 800a8cc:	2296b03a 	or	r11,r4,r10
 800a8d0:	5813003a 	cmpeq	r9,r11,zero
 800a8d4:	29403fcc 	andi	r5,r5,255
 800a8d8:	40000a1e 	bne	r8,zero,800a904 <__ledf2+0x74>
 800a8dc:	30d8b03a 	or	r12,r6,r3
 800a8e0:	6000081e 	bne	r12,zero,800a904 <__ledf2+0x74>
 800a8e4:	0005883a 	mov	r2,zero
 800a8e8:	5800111e 	bne	r11,zero,800a930 <__ledf2+0xa0>
 800a8ec:	f800283a 	ret
 800a8f0:	29403fcc 	andi	r5,r5,255
 800a8f4:	40000c1e 	bne	r8,zero,800a928 <__ledf2+0x98>
 800a8f8:	30d2b03a 	or	r9,r6,r3
 800a8fc:	48000c26 	beq	r9,zero,800a930 <__ledf2+0xa0>
 800a900:	0013883a 	mov	r9,zero
 800a904:	39c03fcc 	andi	r7,r7,255
 800a908:	48000826 	beq	r9,zero,800a92c <__ledf2+0x9c>
 800a90c:	38001126 	beq	r7,zero,800a954 <__ledf2+0xc4>
 800a910:	00800044 	movi	r2,1
 800a914:	f800283a 	ret
 800a918:	30d2b03a 	or	r9,r6,r3
 800a91c:	483fea26 	beq	r9,zero,800a8c8 <__alt_data_end+0xfc00a8c8>
 800a920:	00800084 	movi	r2,2
 800a924:	f800283a 	ret
 800a928:	39c03fcc 	andi	r7,r7,255
 800a92c:	39400726 	beq	r7,r5,800a94c <__ledf2+0xbc>
 800a930:	2800081e 	bne	r5,zero,800a954 <__ledf2+0xc4>
 800a934:	00800044 	movi	r2,1
 800a938:	f800283a 	ret
 800a93c:	2292b03a 	or	r9,r4,r10
 800a940:	483fdf26 	beq	r9,zero,800a8c0 <__alt_data_end+0xfc00a8c0>
 800a944:	00800084 	movi	r2,2
 800a948:	f800283a 	ret
 800a94c:	4080030e 	bge	r8,r2,800a95c <__ledf2+0xcc>
 800a950:	383fef26 	beq	r7,zero,800a910 <__alt_data_end+0xfc00a910>
 800a954:	00bfffc4 	movi	r2,-1
 800a958:	f800283a 	ret
 800a95c:	123feb16 	blt	r2,r8,800a90c <__alt_data_end+0xfc00a90c>
 800a960:	1abff336 	bltu	r3,r10,800a930 <__alt_data_end+0xfc00a930>
 800a964:	50c00326 	beq	r10,r3,800a974 <__ledf2+0xe4>
 800a968:	50c0042e 	bgeu	r10,r3,800a97c <__ledf2+0xec>
 800a96c:	283fe81e 	bne	r5,zero,800a910 <__alt_data_end+0xfc00a910>
 800a970:	003ff806 	br	800a954 <__alt_data_end+0xfc00a954>
 800a974:	313fee36 	bltu	r6,r4,800a930 <__alt_data_end+0xfc00a930>
 800a978:	21bffc36 	bltu	r4,r6,800a96c <__alt_data_end+0xfc00a96c>
 800a97c:	0005883a 	mov	r2,zero
 800a980:	f800283a 	ret

0800a984 <__muldf3>:
 800a984:	deffee04 	addi	sp,sp,-72
 800a988:	dd000c15 	stw	r20,48(sp)
 800a98c:	2828d53a 	srli	r20,r5,20
 800a990:	ddc00f15 	stw	r23,60(sp)
 800a994:	282ed7fa 	srli	r23,r5,31
 800a998:	dc000815 	stw	r16,32(sp)
 800a99c:	04000434 	movhi	r16,16
 800a9a0:	dcc00b15 	stw	r19,44(sp)
 800a9a4:	843fffc4 	addi	r16,r16,-1
 800a9a8:	dfc01115 	stw	ra,68(sp)
 800a9ac:	df001015 	stw	fp,64(sp)
 800a9b0:	dd800e15 	stw	r22,56(sp)
 800a9b4:	dd400d15 	stw	r21,52(sp)
 800a9b8:	dc800a15 	stw	r18,40(sp)
 800a9bc:	dc400915 	stw	r17,36(sp)
 800a9c0:	a501ffcc 	andi	r20,r20,2047
 800a9c4:	2c20703a 	and	r16,r5,r16
 800a9c8:	b827883a 	mov	r19,r23
 800a9cc:	ba403fcc 	andi	r9,r23,255
 800a9d0:	a0006026 	beq	r20,zero,800ab54 <__muldf3+0x1d0>
 800a9d4:	0081ffc4 	movi	r2,2047
 800a9d8:	202d883a 	mov	r22,r4
 800a9dc:	a0803626 	beq	r20,r2,800aab8 <__muldf3+0x134>
 800a9e0:	84000434 	orhi	r16,r16,16
 800a9e4:	200ad77a 	srli	r5,r4,29
 800a9e8:	800490fa 	slli	r2,r16,3
 800a9ec:	202c90fa 	slli	r22,r4,3
 800a9f0:	a53f0044 	addi	r20,r20,-1023
 800a9f4:	28a0b03a 	or	r16,r5,r2
 800a9f8:	002b883a 	mov	r21,zero
 800a9fc:	000b883a 	mov	r5,zero
 800aa00:	3804d53a 	srli	r2,r7,20
 800aa04:	3838d7fa 	srli	fp,r7,31
 800aa08:	04400434 	movhi	r17,16
 800aa0c:	8c7fffc4 	addi	r17,r17,-1
 800aa10:	1081ffcc 	andi	r2,r2,2047
 800aa14:	3025883a 	mov	r18,r6
 800aa18:	3c62703a 	and	r17,r7,r17
 800aa1c:	e2803fcc 	andi	r10,fp,255
 800aa20:	10006d26 	beq	r2,zero,800abd8 <__muldf3+0x254>
 800aa24:	00c1ffc4 	movi	r3,2047
 800aa28:	10c06526 	beq	r2,r3,800abc0 <__muldf3+0x23c>
 800aa2c:	8c400434 	orhi	r17,r17,16
 800aa30:	300ed77a 	srli	r7,r6,29
 800aa34:	880690fa 	slli	r3,r17,3
 800aa38:	302490fa 	slli	r18,r6,3
 800aa3c:	10bf0044 	addi	r2,r2,-1023
 800aa40:	38e2b03a 	or	r17,r7,r3
 800aa44:	000f883a 	mov	r7,zero
 800aa48:	a087883a 	add	r3,r20,r2
 800aa4c:	010003c4 	movi	r4,15
 800aa50:	3d44b03a 	or	r2,r7,r21
 800aa54:	e5ccf03a 	xor	r6,fp,r23
 800aa58:	1a000044 	addi	r8,r3,1
 800aa5c:	20809b36 	bltu	r4,r2,800accc <__muldf3+0x348>
 800aa60:	100490ba 	slli	r2,r2,2
 800aa64:	01020074 	movhi	r4,2049
 800aa68:	212a9e04 	addi	r4,r4,-21896
 800aa6c:	1105883a 	add	r2,r2,r4
 800aa70:	10800017 	ldw	r2,0(r2)
 800aa74:	1000683a 	jmp	r2
 800aa78:	0800accc 	andi	zero,at,691
 800aa7c:	0800aad8 	cmpnei	zero,at,683
 800aa80:	0800aad8 	cmpnei	zero,at,683
 800aa84:	0800aad4 	ori	zero,at,683
 800aa88:	0800aca8 	cmpgeui	zero,at,690
 800aa8c:	0800aca8 	cmpgeui	zero,at,690
 800aa90:	0800ac90 	cmplti	zero,at,690
 800aa94:	0800aad4 	ori	zero,at,683
 800aa98:	0800aca8 	cmpgeui	zero,at,690
 800aa9c:	0800ac90 	cmplti	zero,at,690
 800aaa0:	0800aca8 	cmpgeui	zero,at,690
 800aaa4:	0800aad4 	ori	zero,at,683
 800aaa8:	0800acb8 	rdprs	zero,at,690
 800aaac:	0800acb8 	rdprs	zero,at,690
 800aab0:	0800acb8 	rdprs	zero,at,690
 800aab4:	0800b018 	cmpnei	zero,at,704
 800aab8:	2404b03a 	or	r2,r4,r16
 800aabc:	1000711e 	bne	r2,zero,800ac84 <__muldf3+0x300>
 800aac0:	05400204 	movi	r21,8
 800aac4:	0021883a 	mov	r16,zero
 800aac8:	002d883a 	mov	r22,zero
 800aacc:	01400084 	movi	r5,2
 800aad0:	003fcb06 	br	800aa00 <__alt_data_end+0xfc00aa00>
 800aad4:	500d883a 	mov	r6,r10
 800aad8:	00800084 	movi	r2,2
 800aadc:	38805926 	beq	r7,r2,800ac44 <__muldf3+0x2c0>
 800aae0:	008000c4 	movi	r2,3
 800aae4:	3881bb26 	beq	r7,r2,800b1d4 <__muldf3+0x850>
 800aae8:	00800044 	movi	r2,1
 800aaec:	3881961e 	bne	r7,r2,800b148 <__muldf3+0x7c4>
 800aaf0:	3027883a 	mov	r19,r6
 800aaf4:	0005883a 	mov	r2,zero
 800aaf8:	0021883a 	mov	r16,zero
 800aafc:	002d883a 	mov	r22,zero
 800ab00:	1004953a 	slli	r2,r2,20
 800ab04:	98c03fcc 	andi	r3,r19,255
 800ab08:	04400434 	movhi	r17,16
 800ab0c:	8c7fffc4 	addi	r17,r17,-1
 800ab10:	180697fa 	slli	r3,r3,31
 800ab14:	8460703a 	and	r16,r16,r17
 800ab18:	80a0b03a 	or	r16,r16,r2
 800ab1c:	80c6b03a 	or	r3,r16,r3
 800ab20:	b005883a 	mov	r2,r22
 800ab24:	dfc01117 	ldw	ra,68(sp)
 800ab28:	df001017 	ldw	fp,64(sp)
 800ab2c:	ddc00f17 	ldw	r23,60(sp)
 800ab30:	dd800e17 	ldw	r22,56(sp)
 800ab34:	dd400d17 	ldw	r21,52(sp)
 800ab38:	dd000c17 	ldw	r20,48(sp)
 800ab3c:	dcc00b17 	ldw	r19,44(sp)
 800ab40:	dc800a17 	ldw	r18,40(sp)
 800ab44:	dc400917 	ldw	r17,36(sp)
 800ab48:	dc000817 	ldw	r16,32(sp)
 800ab4c:	dec01204 	addi	sp,sp,72
 800ab50:	f800283a 	ret
 800ab54:	2404b03a 	or	r2,r4,r16
 800ab58:	202b883a 	mov	r21,r4
 800ab5c:	10004426 	beq	r2,zero,800ac70 <__muldf3+0x2ec>
 800ab60:	80015126 	beq	r16,zero,800b0a8 <__muldf3+0x724>
 800ab64:	8009883a 	mov	r4,r16
 800ab68:	d9800715 	stw	r6,28(sp)
 800ab6c:	d9c00215 	stw	r7,8(sp)
 800ab70:	da400415 	stw	r9,16(sp)
 800ab74:	800bfa80 	call	800bfa8 <__clzsi2>
 800ab78:	d9800717 	ldw	r6,28(sp)
 800ab7c:	d9c00217 	ldw	r7,8(sp)
 800ab80:	da400417 	ldw	r9,16(sp)
 800ab84:	113ffd44 	addi	r4,r2,-11
 800ab88:	00c00704 	movi	r3,28
 800ab8c:	19014216 	blt	r3,r4,800b098 <__muldf3+0x714>
 800ab90:	00c00744 	movi	r3,29
 800ab94:	15bffe04 	addi	r22,r2,-8
 800ab98:	1907c83a 	sub	r3,r3,r4
 800ab9c:	85a0983a 	sll	r16,r16,r22
 800aba0:	a8c6d83a 	srl	r3,r21,r3
 800aba4:	adac983a 	sll	r22,r21,r22
 800aba8:	1c20b03a 	or	r16,r3,r16
 800abac:	1080fcc4 	addi	r2,r2,1011
 800abb0:	00a9c83a 	sub	r20,zero,r2
 800abb4:	002b883a 	mov	r21,zero
 800abb8:	000b883a 	mov	r5,zero
 800abbc:	003f9006 	br	800aa00 <__alt_data_end+0xfc00aa00>
 800abc0:	3446b03a 	or	r3,r6,r17
 800abc4:	1800281e 	bne	r3,zero,800ac68 <__muldf3+0x2e4>
 800abc8:	0023883a 	mov	r17,zero
 800abcc:	0025883a 	mov	r18,zero
 800abd0:	01c00084 	movi	r7,2
 800abd4:	003f9c06 	br	800aa48 <__alt_data_end+0xfc00aa48>
 800abd8:	3446b03a 	or	r3,r6,r17
 800abdc:	18001e26 	beq	r3,zero,800ac58 <__muldf3+0x2d4>
 800abe0:	88012126 	beq	r17,zero,800b068 <__muldf3+0x6e4>
 800abe4:	8809883a 	mov	r4,r17
 800abe8:	d9400215 	stw	r5,8(sp)
 800abec:	d9800715 	stw	r6,28(sp)
 800abf0:	da400415 	stw	r9,16(sp)
 800abf4:	da800315 	stw	r10,12(sp)
 800abf8:	800bfa80 	call	800bfa8 <__clzsi2>
 800abfc:	d9400217 	ldw	r5,8(sp)
 800ac00:	d9800717 	ldw	r6,28(sp)
 800ac04:	da400417 	ldw	r9,16(sp)
 800ac08:	da800317 	ldw	r10,12(sp)
 800ac0c:	113ffd44 	addi	r4,r2,-11
 800ac10:	00c00704 	movi	r3,28
 800ac14:	19011016 	blt	r3,r4,800b058 <__muldf3+0x6d4>
 800ac18:	00c00744 	movi	r3,29
 800ac1c:	14bffe04 	addi	r18,r2,-8
 800ac20:	1907c83a 	sub	r3,r3,r4
 800ac24:	8ca2983a 	sll	r17,r17,r18
 800ac28:	30c6d83a 	srl	r3,r6,r3
 800ac2c:	34a4983a 	sll	r18,r6,r18
 800ac30:	1c62b03a 	or	r17,r3,r17
 800ac34:	1080fcc4 	addi	r2,r2,1011
 800ac38:	0085c83a 	sub	r2,zero,r2
 800ac3c:	000f883a 	mov	r7,zero
 800ac40:	003f8106 	br	800aa48 <__alt_data_end+0xfc00aa48>
 800ac44:	3027883a 	mov	r19,r6
 800ac48:	0081ffc4 	movi	r2,2047
 800ac4c:	0021883a 	mov	r16,zero
 800ac50:	002d883a 	mov	r22,zero
 800ac54:	003faa06 	br	800ab00 <__alt_data_end+0xfc00ab00>
 800ac58:	0023883a 	mov	r17,zero
 800ac5c:	0025883a 	mov	r18,zero
 800ac60:	01c00044 	movi	r7,1
 800ac64:	003f7806 	br	800aa48 <__alt_data_end+0xfc00aa48>
 800ac68:	01c000c4 	movi	r7,3
 800ac6c:	003f7606 	br	800aa48 <__alt_data_end+0xfc00aa48>
 800ac70:	05400104 	movi	r21,4
 800ac74:	0021883a 	mov	r16,zero
 800ac78:	002d883a 	mov	r22,zero
 800ac7c:	01400044 	movi	r5,1
 800ac80:	003f5f06 	br	800aa00 <__alt_data_end+0xfc00aa00>
 800ac84:	05400304 	movi	r21,12
 800ac88:	014000c4 	movi	r5,3
 800ac8c:	003f5c06 	br	800aa00 <__alt_data_end+0xfc00aa00>
 800ac90:	04000434 	movhi	r16,16
 800ac94:	0027883a 	mov	r19,zero
 800ac98:	843fffc4 	addi	r16,r16,-1
 800ac9c:	05bfffc4 	movi	r22,-1
 800aca0:	0081ffc4 	movi	r2,2047
 800aca4:	003f9606 	br	800ab00 <__alt_data_end+0xfc00ab00>
 800aca8:	8023883a 	mov	r17,r16
 800acac:	b025883a 	mov	r18,r22
 800acb0:	280f883a 	mov	r7,r5
 800acb4:	003f8806 	br	800aad8 <__alt_data_end+0xfc00aad8>
 800acb8:	8023883a 	mov	r17,r16
 800acbc:	b025883a 	mov	r18,r22
 800acc0:	480d883a 	mov	r6,r9
 800acc4:	280f883a 	mov	r7,r5
 800acc8:	003f8306 	br	800aad8 <__alt_data_end+0xfc00aad8>
 800accc:	b026d43a 	srli	r19,r22,16
 800acd0:	902ed43a 	srli	r23,r18,16
 800acd4:	b5bfffcc 	andi	r22,r22,65535
 800acd8:	94bfffcc 	andi	r18,r18,65535
 800acdc:	b00b883a 	mov	r5,r22
 800ace0:	9009883a 	mov	r4,r18
 800ace4:	d8c00515 	stw	r3,20(sp)
 800ace8:	d9800715 	stw	r6,28(sp)
 800acec:	da000615 	stw	r8,24(sp)
 800acf0:	8007f540 	call	8007f54 <__mulsi3>
 800acf4:	980b883a 	mov	r5,r19
 800acf8:	9009883a 	mov	r4,r18
 800acfc:	1029883a 	mov	r20,r2
 800ad00:	8007f540 	call	8007f54 <__mulsi3>
 800ad04:	b80b883a 	mov	r5,r23
 800ad08:	9809883a 	mov	r4,r19
 800ad0c:	102b883a 	mov	r21,r2
 800ad10:	8007f540 	call	8007f54 <__mulsi3>
 800ad14:	b809883a 	mov	r4,r23
 800ad18:	b00b883a 	mov	r5,r22
 800ad1c:	1039883a 	mov	fp,r2
 800ad20:	8007f540 	call	8007f54 <__mulsi3>
 800ad24:	a008d43a 	srli	r4,r20,16
 800ad28:	1545883a 	add	r2,r2,r21
 800ad2c:	d8c00517 	ldw	r3,20(sp)
 800ad30:	2085883a 	add	r2,r4,r2
 800ad34:	d9800717 	ldw	r6,28(sp)
 800ad38:	da000617 	ldw	r8,24(sp)
 800ad3c:	1540022e 	bgeu	r2,r21,800ad48 <__muldf3+0x3c4>
 800ad40:	01000074 	movhi	r4,1
 800ad44:	e139883a 	add	fp,fp,r4
 800ad48:	100e943a 	slli	r7,r2,16
 800ad4c:	1004d43a 	srli	r2,r2,16
 800ad50:	882ad43a 	srli	r21,r17,16
 800ad54:	a53fffcc 	andi	r20,r20,65535
 800ad58:	8c7fffcc 	andi	r17,r17,65535
 800ad5c:	3d29883a 	add	r20,r7,r20
 800ad60:	b00b883a 	mov	r5,r22
 800ad64:	8809883a 	mov	r4,r17
 800ad68:	d8c00515 	stw	r3,20(sp)
 800ad6c:	d9800715 	stw	r6,28(sp)
 800ad70:	da000615 	stw	r8,24(sp)
 800ad74:	dd000115 	stw	r20,4(sp)
 800ad78:	d8800015 	stw	r2,0(sp)
 800ad7c:	8007f540 	call	8007f54 <__mulsi3>
 800ad80:	980b883a 	mov	r5,r19
 800ad84:	8809883a 	mov	r4,r17
 800ad88:	d8800215 	stw	r2,8(sp)
 800ad8c:	8007f540 	call	8007f54 <__mulsi3>
 800ad90:	9809883a 	mov	r4,r19
 800ad94:	a80b883a 	mov	r5,r21
 800ad98:	1029883a 	mov	r20,r2
 800ad9c:	8007f540 	call	8007f54 <__mulsi3>
 800ada0:	b00b883a 	mov	r5,r22
 800ada4:	a809883a 	mov	r4,r21
 800ada8:	d8800415 	stw	r2,16(sp)
 800adac:	8007f540 	call	8007f54 <__mulsi3>
 800adb0:	d9c00217 	ldw	r7,8(sp)
 800adb4:	1505883a 	add	r2,r2,r20
 800adb8:	d8c00517 	ldw	r3,20(sp)
 800adbc:	3826d43a 	srli	r19,r7,16
 800adc0:	d9800717 	ldw	r6,28(sp)
 800adc4:	da000617 	ldw	r8,24(sp)
 800adc8:	9885883a 	add	r2,r19,r2
 800adcc:	da400417 	ldw	r9,16(sp)
 800add0:	1500022e 	bgeu	r2,r20,800addc <__muldf3+0x458>
 800add4:	01000074 	movhi	r4,1
 800add8:	4913883a 	add	r9,r9,r4
 800addc:	1028d43a 	srli	r20,r2,16
 800ade0:	1004943a 	slli	r2,r2,16
 800ade4:	802cd43a 	srli	r22,r16,16
 800ade8:	843fffcc 	andi	r16,r16,65535
 800adec:	3cffffcc 	andi	r19,r7,65535
 800adf0:	9009883a 	mov	r4,r18
 800adf4:	800b883a 	mov	r5,r16
 800adf8:	a269883a 	add	r20,r20,r9
 800adfc:	d8c00515 	stw	r3,20(sp)
 800ae00:	d9800715 	stw	r6,28(sp)
 800ae04:	da000615 	stw	r8,24(sp)
 800ae08:	14e7883a 	add	r19,r2,r19
 800ae0c:	8007f540 	call	8007f54 <__mulsi3>
 800ae10:	9009883a 	mov	r4,r18
 800ae14:	b00b883a 	mov	r5,r22
 800ae18:	d8800315 	stw	r2,12(sp)
 800ae1c:	8007f540 	call	8007f54 <__mulsi3>
 800ae20:	b809883a 	mov	r4,r23
 800ae24:	b00b883a 	mov	r5,r22
 800ae28:	d8800215 	stw	r2,8(sp)
 800ae2c:	8007f540 	call	8007f54 <__mulsi3>
 800ae30:	b80b883a 	mov	r5,r23
 800ae34:	8009883a 	mov	r4,r16
 800ae38:	d8800415 	stw	r2,16(sp)
 800ae3c:	8007f540 	call	8007f54 <__mulsi3>
 800ae40:	da800317 	ldw	r10,12(sp)
 800ae44:	d9c00217 	ldw	r7,8(sp)
 800ae48:	d9000017 	ldw	r4,0(sp)
 800ae4c:	502ed43a 	srli	r23,r10,16
 800ae50:	11c5883a 	add	r2,r2,r7
 800ae54:	24e5883a 	add	r18,r4,r19
 800ae58:	b885883a 	add	r2,r23,r2
 800ae5c:	d8c00517 	ldw	r3,20(sp)
 800ae60:	d9800717 	ldw	r6,28(sp)
 800ae64:	da000617 	ldw	r8,24(sp)
 800ae68:	da400417 	ldw	r9,16(sp)
 800ae6c:	11c0022e 	bgeu	r2,r7,800ae78 <__muldf3+0x4f4>
 800ae70:	01000074 	movhi	r4,1
 800ae74:	4913883a 	add	r9,r9,r4
 800ae78:	100ed43a 	srli	r7,r2,16
 800ae7c:	1004943a 	slli	r2,r2,16
 800ae80:	55ffffcc 	andi	r23,r10,65535
 800ae84:	3a53883a 	add	r9,r7,r9
 800ae88:	8809883a 	mov	r4,r17
 800ae8c:	800b883a 	mov	r5,r16
 800ae90:	d8c00515 	stw	r3,20(sp)
 800ae94:	d9800715 	stw	r6,28(sp)
 800ae98:	da000615 	stw	r8,24(sp)
 800ae9c:	da400415 	stw	r9,16(sp)
 800aea0:	15ef883a 	add	r23,r2,r23
 800aea4:	8007f540 	call	8007f54 <__mulsi3>
 800aea8:	8809883a 	mov	r4,r17
 800aeac:	b00b883a 	mov	r5,r22
 800aeb0:	d8800215 	stw	r2,8(sp)
 800aeb4:	8007f540 	call	8007f54 <__mulsi3>
 800aeb8:	b00b883a 	mov	r5,r22
 800aebc:	a809883a 	mov	r4,r21
 800aec0:	d8800315 	stw	r2,12(sp)
 800aec4:	8007f540 	call	8007f54 <__mulsi3>
 800aec8:	8009883a 	mov	r4,r16
 800aecc:	a80b883a 	mov	r5,r21
 800aed0:	1023883a 	mov	r17,r2
 800aed4:	8007f540 	call	8007f54 <__mulsi3>
 800aed8:	d9c00217 	ldw	r7,8(sp)
 800aedc:	da800317 	ldw	r10,12(sp)
 800aee0:	d8c00517 	ldw	r3,20(sp)
 800aee4:	3808d43a 	srli	r4,r7,16
 800aee8:	1285883a 	add	r2,r2,r10
 800aeec:	d9800717 	ldw	r6,28(sp)
 800aef0:	2085883a 	add	r2,r4,r2
 800aef4:	da000617 	ldw	r8,24(sp)
 800aef8:	da400417 	ldw	r9,16(sp)
 800aefc:	1280022e 	bgeu	r2,r10,800af08 <__muldf3+0x584>
 800af00:	01000074 	movhi	r4,1
 800af04:	8923883a 	add	r17,r17,r4
 800af08:	1008943a 	slli	r4,r2,16
 800af0c:	39ffffcc 	andi	r7,r7,65535
 800af10:	e4b9883a 	add	fp,fp,r18
 800af14:	21cf883a 	add	r7,r4,r7
 800af18:	e4e7803a 	cmpltu	r19,fp,r19
 800af1c:	3d0f883a 	add	r7,r7,r20
 800af20:	bf39883a 	add	fp,r23,fp
 800af24:	99c9883a 	add	r4,r19,r7
 800af28:	e5ef803a 	cmpltu	r23,fp,r23
 800af2c:	490b883a 	add	r5,r9,r4
 800af30:	1004d43a 	srli	r2,r2,16
 800af34:	b965883a 	add	r18,r23,r5
 800af38:	24c9803a 	cmpltu	r4,r4,r19
 800af3c:	3d29803a 	cmpltu	r20,r7,r20
 800af40:	a128b03a 	or	r20,r20,r4
 800af44:	95ef803a 	cmpltu	r23,r18,r23
 800af48:	2a53803a 	cmpltu	r9,r5,r9
 800af4c:	a0a9883a 	add	r20,r20,r2
 800af50:	4deeb03a 	or	r23,r9,r23
 800af54:	a5ef883a 	add	r23,r20,r23
 800af58:	bc63883a 	add	r17,r23,r17
 800af5c:	e004927a 	slli	r2,fp,9
 800af60:	d9000117 	ldw	r4,4(sp)
 800af64:	882e927a 	slli	r23,r17,9
 800af68:	9022d5fa 	srli	r17,r18,23
 800af6c:	e038d5fa 	srli	fp,fp,23
 800af70:	1104b03a 	or	r2,r2,r4
 800af74:	9024927a 	slli	r18,r18,9
 800af78:	1004c03a 	cmpne	r2,r2,zero
 800af7c:	bc62b03a 	or	r17,r23,r17
 800af80:	1738b03a 	or	fp,r2,fp
 800af84:	8880402c 	andhi	r2,r17,256
 800af88:	e4a4b03a 	or	r18,fp,r18
 800af8c:	10000726 	beq	r2,zero,800afac <__muldf3+0x628>
 800af90:	9006d07a 	srli	r3,r18,1
 800af94:	880497fa 	slli	r2,r17,31
 800af98:	9480004c 	andi	r18,r18,1
 800af9c:	8822d07a 	srli	r17,r17,1
 800afa0:	1ca4b03a 	or	r18,r3,r18
 800afa4:	14a4b03a 	or	r18,r2,r18
 800afa8:	4007883a 	mov	r3,r8
 800afac:	1880ffc4 	addi	r2,r3,1023
 800afb0:	0080460e 	bge	zero,r2,800b0cc <__muldf3+0x748>
 800afb4:	910001cc 	andi	r4,r18,7
 800afb8:	20000726 	beq	r4,zero,800afd8 <__muldf3+0x654>
 800afbc:	910003cc 	andi	r4,r18,15
 800afc0:	01400104 	movi	r5,4
 800afc4:	21400426 	beq	r4,r5,800afd8 <__muldf3+0x654>
 800afc8:	9149883a 	add	r4,r18,r5
 800afcc:	24a5803a 	cmpltu	r18,r4,r18
 800afd0:	8ca3883a 	add	r17,r17,r18
 800afd4:	2025883a 	mov	r18,r4
 800afd8:	8900402c 	andhi	r4,r17,256
 800afdc:	20000426 	beq	r4,zero,800aff0 <__muldf3+0x66c>
 800afe0:	18810004 	addi	r2,r3,1024
 800afe4:	00ffc034 	movhi	r3,65280
 800afe8:	18ffffc4 	addi	r3,r3,-1
 800afec:	88e2703a 	and	r17,r17,r3
 800aff0:	00c1ff84 	movi	r3,2046
 800aff4:	18bf1316 	blt	r3,r2,800ac44 <__alt_data_end+0xfc00ac44>
 800aff8:	882c977a 	slli	r22,r17,29
 800affc:	9024d0fa 	srli	r18,r18,3
 800b000:	8822927a 	slli	r17,r17,9
 800b004:	1081ffcc 	andi	r2,r2,2047
 800b008:	b4acb03a 	or	r22,r22,r18
 800b00c:	8820d33a 	srli	r16,r17,12
 800b010:	3027883a 	mov	r19,r6
 800b014:	003eba06 	br	800ab00 <__alt_data_end+0xfc00ab00>
 800b018:	8080022c 	andhi	r2,r16,8
 800b01c:	10000926 	beq	r2,zero,800b044 <__muldf3+0x6c0>
 800b020:	8880022c 	andhi	r2,r17,8
 800b024:	1000071e 	bne	r2,zero,800b044 <__muldf3+0x6c0>
 800b028:	00800434 	movhi	r2,16
 800b02c:	8c000234 	orhi	r16,r17,8
 800b030:	10bfffc4 	addi	r2,r2,-1
 800b034:	e027883a 	mov	r19,fp
 800b038:	80a0703a 	and	r16,r16,r2
 800b03c:	902d883a 	mov	r22,r18
 800b040:	003f1706 	br	800aca0 <__alt_data_end+0xfc00aca0>
 800b044:	00800434 	movhi	r2,16
 800b048:	84000234 	orhi	r16,r16,8
 800b04c:	10bfffc4 	addi	r2,r2,-1
 800b050:	80a0703a 	and	r16,r16,r2
 800b054:	003f1206 	br	800aca0 <__alt_data_end+0xfc00aca0>
 800b058:	147ff604 	addi	r17,r2,-40
 800b05c:	3462983a 	sll	r17,r6,r17
 800b060:	0025883a 	mov	r18,zero
 800b064:	003ef306 	br	800ac34 <__alt_data_end+0xfc00ac34>
 800b068:	3009883a 	mov	r4,r6
 800b06c:	d9400215 	stw	r5,8(sp)
 800b070:	d9800715 	stw	r6,28(sp)
 800b074:	da400415 	stw	r9,16(sp)
 800b078:	da800315 	stw	r10,12(sp)
 800b07c:	800bfa80 	call	800bfa8 <__clzsi2>
 800b080:	10800804 	addi	r2,r2,32
 800b084:	da800317 	ldw	r10,12(sp)
 800b088:	da400417 	ldw	r9,16(sp)
 800b08c:	d9800717 	ldw	r6,28(sp)
 800b090:	d9400217 	ldw	r5,8(sp)
 800b094:	003edd06 	br	800ac0c <__alt_data_end+0xfc00ac0c>
 800b098:	143ff604 	addi	r16,r2,-40
 800b09c:	ac20983a 	sll	r16,r21,r16
 800b0a0:	002d883a 	mov	r22,zero
 800b0a4:	003ec106 	br	800abac <__alt_data_end+0xfc00abac>
 800b0a8:	d9800715 	stw	r6,28(sp)
 800b0ac:	d9c00215 	stw	r7,8(sp)
 800b0b0:	da400415 	stw	r9,16(sp)
 800b0b4:	800bfa80 	call	800bfa8 <__clzsi2>
 800b0b8:	10800804 	addi	r2,r2,32
 800b0bc:	da400417 	ldw	r9,16(sp)
 800b0c0:	d9c00217 	ldw	r7,8(sp)
 800b0c4:	d9800717 	ldw	r6,28(sp)
 800b0c8:	003eae06 	br	800ab84 <__alt_data_end+0xfc00ab84>
 800b0cc:	00c00044 	movi	r3,1
 800b0d0:	1887c83a 	sub	r3,r3,r2
 800b0d4:	01000e04 	movi	r4,56
 800b0d8:	20fe8516 	blt	r4,r3,800aaf0 <__alt_data_end+0xfc00aaf0>
 800b0dc:	010007c4 	movi	r4,31
 800b0e0:	20c01b16 	blt	r4,r3,800b150 <__muldf3+0x7cc>
 800b0e4:	00800804 	movi	r2,32
 800b0e8:	10c5c83a 	sub	r2,r2,r3
 800b0ec:	888a983a 	sll	r5,r17,r2
 800b0f0:	90c8d83a 	srl	r4,r18,r3
 800b0f4:	9084983a 	sll	r2,r18,r2
 800b0f8:	88e2d83a 	srl	r17,r17,r3
 800b0fc:	2906b03a 	or	r3,r5,r4
 800b100:	1004c03a 	cmpne	r2,r2,zero
 800b104:	1886b03a 	or	r3,r3,r2
 800b108:	188001cc 	andi	r2,r3,7
 800b10c:	10000726 	beq	r2,zero,800b12c <__muldf3+0x7a8>
 800b110:	188003cc 	andi	r2,r3,15
 800b114:	01000104 	movi	r4,4
 800b118:	11000426 	beq	r2,r4,800b12c <__muldf3+0x7a8>
 800b11c:	1805883a 	mov	r2,r3
 800b120:	10c00104 	addi	r3,r2,4
 800b124:	1885803a 	cmpltu	r2,r3,r2
 800b128:	88a3883a 	add	r17,r17,r2
 800b12c:	8880202c 	andhi	r2,r17,128
 800b130:	10001c26 	beq	r2,zero,800b1a4 <__muldf3+0x820>
 800b134:	3027883a 	mov	r19,r6
 800b138:	00800044 	movi	r2,1
 800b13c:	0021883a 	mov	r16,zero
 800b140:	002d883a 	mov	r22,zero
 800b144:	003e6e06 	br	800ab00 <__alt_data_end+0xfc00ab00>
 800b148:	4007883a 	mov	r3,r8
 800b14c:	003f9706 	br	800afac <__alt_data_end+0xfc00afac>
 800b150:	017ff844 	movi	r5,-31
 800b154:	2885c83a 	sub	r2,r5,r2
 800b158:	888ad83a 	srl	r5,r17,r2
 800b15c:	00800804 	movi	r2,32
 800b160:	18801a26 	beq	r3,r2,800b1cc <__muldf3+0x848>
 800b164:	01001004 	movi	r4,64
 800b168:	20c7c83a 	sub	r3,r4,r3
 800b16c:	88e2983a 	sll	r17,r17,r3
 800b170:	8ca4b03a 	or	r18,r17,r18
 800b174:	9004c03a 	cmpne	r2,r18,zero
 800b178:	2884b03a 	or	r2,r5,r2
 800b17c:	144001cc 	andi	r17,r2,7
 800b180:	88000d1e 	bne	r17,zero,800b1b8 <__muldf3+0x834>
 800b184:	0021883a 	mov	r16,zero
 800b188:	102cd0fa 	srli	r22,r2,3
 800b18c:	3027883a 	mov	r19,r6
 800b190:	0005883a 	mov	r2,zero
 800b194:	b46cb03a 	or	r22,r22,r17
 800b198:	003e5906 	br	800ab00 <__alt_data_end+0xfc00ab00>
 800b19c:	1007883a 	mov	r3,r2
 800b1a0:	0023883a 	mov	r17,zero
 800b1a4:	8820927a 	slli	r16,r17,9
 800b1a8:	1805883a 	mov	r2,r3
 800b1ac:	8822977a 	slli	r17,r17,29
 800b1b0:	8020d33a 	srli	r16,r16,12
 800b1b4:	003ff406 	br	800b188 <__alt_data_end+0xfc00b188>
 800b1b8:	10c003cc 	andi	r3,r2,15
 800b1bc:	01000104 	movi	r4,4
 800b1c0:	193ff626 	beq	r3,r4,800b19c <__alt_data_end+0xfc00b19c>
 800b1c4:	0023883a 	mov	r17,zero
 800b1c8:	003fd506 	br	800b120 <__alt_data_end+0xfc00b120>
 800b1cc:	0023883a 	mov	r17,zero
 800b1d0:	003fe706 	br	800b170 <__alt_data_end+0xfc00b170>
 800b1d4:	00800434 	movhi	r2,16
 800b1d8:	8c000234 	orhi	r16,r17,8
 800b1dc:	10bfffc4 	addi	r2,r2,-1
 800b1e0:	3027883a 	mov	r19,r6
 800b1e4:	80a0703a 	and	r16,r16,r2
 800b1e8:	902d883a 	mov	r22,r18
 800b1ec:	003eac06 	br	800aca0 <__alt_data_end+0xfc00aca0>

0800b1f0 <__subdf3>:
 800b1f0:	02000434 	movhi	r8,16
 800b1f4:	423fffc4 	addi	r8,r8,-1
 800b1f8:	defffb04 	addi	sp,sp,-20
 800b1fc:	2a14703a 	and	r10,r5,r8
 800b200:	3812d53a 	srli	r9,r7,20
 800b204:	3a10703a 	and	r8,r7,r8
 800b208:	2006d77a 	srli	r3,r4,29
 800b20c:	3004d77a 	srli	r2,r6,29
 800b210:	dc000015 	stw	r16,0(sp)
 800b214:	501490fa 	slli	r10,r10,3
 800b218:	2820d53a 	srli	r16,r5,20
 800b21c:	401090fa 	slli	r8,r8,3
 800b220:	dc800215 	stw	r18,8(sp)
 800b224:	dc400115 	stw	r17,4(sp)
 800b228:	dfc00415 	stw	ra,16(sp)
 800b22c:	202290fa 	slli	r17,r4,3
 800b230:	dcc00315 	stw	r19,12(sp)
 800b234:	4a41ffcc 	andi	r9,r9,2047
 800b238:	0101ffc4 	movi	r4,2047
 800b23c:	2824d7fa 	srli	r18,r5,31
 800b240:	8401ffcc 	andi	r16,r16,2047
 800b244:	50c6b03a 	or	r3,r10,r3
 800b248:	380ed7fa 	srli	r7,r7,31
 800b24c:	408ab03a 	or	r5,r8,r2
 800b250:	300c90fa 	slli	r6,r6,3
 800b254:	49009626 	beq	r9,r4,800b4b0 <__subdf3+0x2c0>
 800b258:	39c0005c 	xori	r7,r7,1
 800b25c:	8245c83a 	sub	r2,r16,r9
 800b260:	3c807426 	beq	r7,r18,800b434 <__subdf3+0x244>
 800b264:	0080af0e 	bge	zero,r2,800b524 <__subdf3+0x334>
 800b268:	48002a1e 	bne	r9,zero,800b314 <__subdf3+0x124>
 800b26c:	2988b03a 	or	r4,r5,r6
 800b270:	20009a1e 	bne	r4,zero,800b4dc <__subdf3+0x2ec>
 800b274:	888001cc 	andi	r2,r17,7
 800b278:	10000726 	beq	r2,zero,800b298 <__subdf3+0xa8>
 800b27c:	888003cc 	andi	r2,r17,15
 800b280:	01000104 	movi	r4,4
 800b284:	11000426 	beq	r2,r4,800b298 <__subdf3+0xa8>
 800b288:	890b883a 	add	r5,r17,r4
 800b28c:	2c63803a 	cmpltu	r17,r5,r17
 800b290:	1c47883a 	add	r3,r3,r17
 800b294:	2823883a 	mov	r17,r5
 800b298:	1880202c 	andhi	r2,r3,128
 800b29c:	10005926 	beq	r2,zero,800b404 <__subdf3+0x214>
 800b2a0:	84000044 	addi	r16,r16,1
 800b2a4:	0081ffc4 	movi	r2,2047
 800b2a8:	8080be26 	beq	r16,r2,800b5a4 <__subdf3+0x3b4>
 800b2ac:	017fe034 	movhi	r5,65408
 800b2b0:	297fffc4 	addi	r5,r5,-1
 800b2b4:	1946703a 	and	r3,r3,r5
 800b2b8:	1804977a 	slli	r2,r3,29
 800b2bc:	1806927a 	slli	r3,r3,9
 800b2c0:	8822d0fa 	srli	r17,r17,3
 800b2c4:	8401ffcc 	andi	r16,r16,2047
 800b2c8:	180ad33a 	srli	r5,r3,12
 800b2cc:	9100004c 	andi	r4,r18,1
 800b2d0:	1444b03a 	or	r2,r2,r17
 800b2d4:	80c1ffcc 	andi	r3,r16,2047
 800b2d8:	1820953a 	slli	r16,r3,20
 800b2dc:	20c03fcc 	andi	r3,r4,255
 800b2e0:	180897fa 	slli	r4,r3,31
 800b2e4:	00c00434 	movhi	r3,16
 800b2e8:	18ffffc4 	addi	r3,r3,-1
 800b2ec:	28c6703a 	and	r3,r5,r3
 800b2f0:	1c06b03a 	or	r3,r3,r16
 800b2f4:	1906b03a 	or	r3,r3,r4
 800b2f8:	dfc00417 	ldw	ra,16(sp)
 800b2fc:	dcc00317 	ldw	r19,12(sp)
 800b300:	dc800217 	ldw	r18,8(sp)
 800b304:	dc400117 	ldw	r17,4(sp)
 800b308:	dc000017 	ldw	r16,0(sp)
 800b30c:	dec00504 	addi	sp,sp,20
 800b310:	f800283a 	ret
 800b314:	0101ffc4 	movi	r4,2047
 800b318:	813fd626 	beq	r16,r4,800b274 <__alt_data_end+0xfc00b274>
 800b31c:	29402034 	orhi	r5,r5,128
 800b320:	01000e04 	movi	r4,56
 800b324:	2080a316 	blt	r4,r2,800b5b4 <__subdf3+0x3c4>
 800b328:	010007c4 	movi	r4,31
 800b32c:	2080c616 	blt	r4,r2,800b648 <__subdf3+0x458>
 800b330:	01000804 	movi	r4,32
 800b334:	2089c83a 	sub	r4,r4,r2
 800b338:	2910983a 	sll	r8,r5,r4
 800b33c:	308ed83a 	srl	r7,r6,r2
 800b340:	3108983a 	sll	r4,r6,r4
 800b344:	2884d83a 	srl	r2,r5,r2
 800b348:	41ccb03a 	or	r6,r8,r7
 800b34c:	2008c03a 	cmpne	r4,r4,zero
 800b350:	310cb03a 	or	r6,r6,r4
 800b354:	898dc83a 	sub	r6,r17,r6
 800b358:	89a3803a 	cmpltu	r17,r17,r6
 800b35c:	1887c83a 	sub	r3,r3,r2
 800b360:	1c47c83a 	sub	r3,r3,r17
 800b364:	3023883a 	mov	r17,r6
 800b368:	1880202c 	andhi	r2,r3,128
 800b36c:	10002326 	beq	r2,zero,800b3fc <__subdf3+0x20c>
 800b370:	04c02034 	movhi	r19,128
 800b374:	9cffffc4 	addi	r19,r19,-1
 800b378:	1ce6703a 	and	r19,r3,r19
 800b37c:	98007a26 	beq	r19,zero,800b568 <__subdf3+0x378>
 800b380:	9809883a 	mov	r4,r19
 800b384:	800bfa80 	call	800bfa8 <__clzsi2>
 800b388:	113ffe04 	addi	r4,r2,-8
 800b38c:	00c007c4 	movi	r3,31
 800b390:	19007b16 	blt	r3,r4,800b580 <__subdf3+0x390>
 800b394:	00800804 	movi	r2,32
 800b398:	1105c83a 	sub	r2,r2,r4
 800b39c:	8884d83a 	srl	r2,r17,r2
 800b3a0:	9906983a 	sll	r3,r19,r4
 800b3a4:	8922983a 	sll	r17,r17,r4
 800b3a8:	10c4b03a 	or	r2,r2,r3
 800b3ac:	24007816 	blt	r4,r16,800b590 <__subdf3+0x3a0>
 800b3b0:	2421c83a 	sub	r16,r4,r16
 800b3b4:	80c00044 	addi	r3,r16,1
 800b3b8:	010007c4 	movi	r4,31
 800b3bc:	20c09516 	blt	r4,r3,800b614 <__subdf3+0x424>
 800b3c0:	01400804 	movi	r5,32
 800b3c4:	28cbc83a 	sub	r5,r5,r3
 800b3c8:	88c8d83a 	srl	r4,r17,r3
 800b3cc:	8962983a 	sll	r17,r17,r5
 800b3d0:	114a983a 	sll	r5,r2,r5
 800b3d4:	10c6d83a 	srl	r3,r2,r3
 800b3d8:	8804c03a 	cmpne	r2,r17,zero
 800b3dc:	290ab03a 	or	r5,r5,r4
 800b3e0:	28a2b03a 	or	r17,r5,r2
 800b3e4:	0021883a 	mov	r16,zero
 800b3e8:	003fa206 	br	800b274 <__alt_data_end+0xfc00b274>
 800b3ec:	2090b03a 	or	r8,r4,r2
 800b3f0:	40018e26 	beq	r8,zero,800ba2c <__subdf3+0x83c>
 800b3f4:	1007883a 	mov	r3,r2
 800b3f8:	2023883a 	mov	r17,r4
 800b3fc:	888001cc 	andi	r2,r17,7
 800b400:	103f9e1e 	bne	r2,zero,800b27c <__alt_data_end+0xfc00b27c>
 800b404:	1804977a 	slli	r2,r3,29
 800b408:	8822d0fa 	srli	r17,r17,3
 800b40c:	1810d0fa 	srli	r8,r3,3
 800b410:	9100004c 	andi	r4,r18,1
 800b414:	1444b03a 	or	r2,r2,r17
 800b418:	00c1ffc4 	movi	r3,2047
 800b41c:	80c02826 	beq	r16,r3,800b4c0 <__subdf3+0x2d0>
 800b420:	01400434 	movhi	r5,16
 800b424:	297fffc4 	addi	r5,r5,-1
 800b428:	80e0703a 	and	r16,r16,r3
 800b42c:	414a703a 	and	r5,r8,r5
 800b430:	003fa806 	br	800b2d4 <__alt_data_end+0xfc00b2d4>
 800b434:	0080630e 	bge	zero,r2,800b5c4 <__subdf3+0x3d4>
 800b438:	48003026 	beq	r9,zero,800b4fc <__subdf3+0x30c>
 800b43c:	0101ffc4 	movi	r4,2047
 800b440:	813f8c26 	beq	r16,r4,800b274 <__alt_data_end+0xfc00b274>
 800b444:	29402034 	orhi	r5,r5,128
 800b448:	01000e04 	movi	r4,56
 800b44c:	2080a90e 	bge	r4,r2,800b6f4 <__subdf3+0x504>
 800b450:	298cb03a 	or	r6,r5,r6
 800b454:	3012c03a 	cmpne	r9,r6,zero
 800b458:	0005883a 	mov	r2,zero
 800b45c:	4c53883a 	add	r9,r9,r17
 800b460:	4c63803a 	cmpltu	r17,r9,r17
 800b464:	10c7883a 	add	r3,r2,r3
 800b468:	88c7883a 	add	r3,r17,r3
 800b46c:	4823883a 	mov	r17,r9
 800b470:	1880202c 	andhi	r2,r3,128
 800b474:	1000d026 	beq	r2,zero,800b7b8 <__subdf3+0x5c8>
 800b478:	84000044 	addi	r16,r16,1
 800b47c:	0081ffc4 	movi	r2,2047
 800b480:	8080fe26 	beq	r16,r2,800b87c <__subdf3+0x68c>
 800b484:	00bfe034 	movhi	r2,65408
 800b488:	10bfffc4 	addi	r2,r2,-1
 800b48c:	1886703a 	and	r3,r3,r2
 800b490:	880ad07a 	srli	r5,r17,1
 800b494:	180497fa 	slli	r2,r3,31
 800b498:	8900004c 	andi	r4,r17,1
 800b49c:	2922b03a 	or	r17,r5,r4
 800b4a0:	1806d07a 	srli	r3,r3,1
 800b4a4:	1462b03a 	or	r17,r2,r17
 800b4a8:	3825883a 	mov	r18,r7
 800b4ac:	003f7106 	br	800b274 <__alt_data_end+0xfc00b274>
 800b4b0:	2984b03a 	or	r2,r5,r6
 800b4b4:	103f6826 	beq	r2,zero,800b258 <__alt_data_end+0xfc00b258>
 800b4b8:	39c03fcc 	andi	r7,r7,255
 800b4bc:	003f6706 	br	800b25c <__alt_data_end+0xfc00b25c>
 800b4c0:	4086b03a 	or	r3,r8,r2
 800b4c4:	18015226 	beq	r3,zero,800ba10 <__subdf3+0x820>
 800b4c8:	00c00434 	movhi	r3,16
 800b4cc:	41400234 	orhi	r5,r8,8
 800b4d0:	18ffffc4 	addi	r3,r3,-1
 800b4d4:	28ca703a 	and	r5,r5,r3
 800b4d8:	003f7e06 	br	800b2d4 <__alt_data_end+0xfc00b2d4>
 800b4dc:	10bfffc4 	addi	r2,r2,-1
 800b4e0:	1000491e 	bne	r2,zero,800b608 <__subdf3+0x418>
 800b4e4:	898fc83a 	sub	r7,r17,r6
 800b4e8:	89e3803a 	cmpltu	r17,r17,r7
 800b4ec:	1947c83a 	sub	r3,r3,r5
 800b4f0:	1c47c83a 	sub	r3,r3,r17
 800b4f4:	3823883a 	mov	r17,r7
 800b4f8:	003f9b06 	br	800b368 <__alt_data_end+0xfc00b368>
 800b4fc:	2988b03a 	or	r4,r5,r6
 800b500:	203f5c26 	beq	r4,zero,800b274 <__alt_data_end+0xfc00b274>
 800b504:	10bfffc4 	addi	r2,r2,-1
 800b508:	1000931e 	bne	r2,zero,800b758 <__subdf3+0x568>
 800b50c:	898d883a 	add	r6,r17,r6
 800b510:	3463803a 	cmpltu	r17,r6,r17
 800b514:	1947883a 	add	r3,r3,r5
 800b518:	88c7883a 	add	r3,r17,r3
 800b51c:	3023883a 	mov	r17,r6
 800b520:	003fd306 	br	800b470 <__alt_data_end+0xfc00b470>
 800b524:	1000541e 	bne	r2,zero,800b678 <__subdf3+0x488>
 800b528:	80800044 	addi	r2,r16,1
 800b52c:	1081ffcc 	andi	r2,r2,2047
 800b530:	01000044 	movi	r4,1
 800b534:	2080a20e 	bge	r4,r2,800b7c0 <__subdf3+0x5d0>
 800b538:	8989c83a 	sub	r4,r17,r6
 800b53c:	8905803a 	cmpltu	r2,r17,r4
 800b540:	1967c83a 	sub	r19,r3,r5
 800b544:	98a7c83a 	sub	r19,r19,r2
 800b548:	9880202c 	andhi	r2,r19,128
 800b54c:	10006326 	beq	r2,zero,800b6dc <__subdf3+0x4ec>
 800b550:	3463c83a 	sub	r17,r6,r17
 800b554:	28c7c83a 	sub	r3,r5,r3
 800b558:	344d803a 	cmpltu	r6,r6,r17
 800b55c:	19a7c83a 	sub	r19,r3,r6
 800b560:	3825883a 	mov	r18,r7
 800b564:	983f861e 	bne	r19,zero,800b380 <__alt_data_end+0xfc00b380>
 800b568:	8809883a 	mov	r4,r17
 800b56c:	800bfa80 	call	800bfa8 <__clzsi2>
 800b570:	10800804 	addi	r2,r2,32
 800b574:	113ffe04 	addi	r4,r2,-8
 800b578:	00c007c4 	movi	r3,31
 800b57c:	193f850e 	bge	r3,r4,800b394 <__alt_data_end+0xfc00b394>
 800b580:	10bff604 	addi	r2,r2,-40
 800b584:	8884983a 	sll	r2,r17,r2
 800b588:	0023883a 	mov	r17,zero
 800b58c:	243f880e 	bge	r4,r16,800b3b0 <__alt_data_end+0xfc00b3b0>
 800b590:	00ffe034 	movhi	r3,65408
 800b594:	18ffffc4 	addi	r3,r3,-1
 800b598:	8121c83a 	sub	r16,r16,r4
 800b59c:	10c6703a 	and	r3,r2,r3
 800b5a0:	003f3406 	br	800b274 <__alt_data_end+0xfc00b274>
 800b5a4:	9100004c 	andi	r4,r18,1
 800b5a8:	000b883a 	mov	r5,zero
 800b5ac:	0005883a 	mov	r2,zero
 800b5b0:	003f4806 	br	800b2d4 <__alt_data_end+0xfc00b2d4>
 800b5b4:	298cb03a 	or	r6,r5,r6
 800b5b8:	300cc03a 	cmpne	r6,r6,zero
 800b5bc:	0005883a 	mov	r2,zero
 800b5c0:	003f6406 	br	800b354 <__alt_data_end+0xfc00b354>
 800b5c4:	10009a1e 	bne	r2,zero,800b830 <__subdf3+0x640>
 800b5c8:	82400044 	addi	r9,r16,1
 800b5cc:	4881ffcc 	andi	r2,r9,2047
 800b5d0:	02800044 	movi	r10,1
 800b5d4:	5080670e 	bge	r10,r2,800b774 <__subdf3+0x584>
 800b5d8:	0081ffc4 	movi	r2,2047
 800b5dc:	4880af26 	beq	r9,r2,800b89c <__subdf3+0x6ac>
 800b5e0:	898d883a 	add	r6,r17,r6
 800b5e4:	1945883a 	add	r2,r3,r5
 800b5e8:	3447803a 	cmpltu	r3,r6,r17
 800b5ec:	1887883a 	add	r3,r3,r2
 800b5f0:	182297fa 	slli	r17,r3,31
 800b5f4:	300cd07a 	srli	r6,r6,1
 800b5f8:	1806d07a 	srli	r3,r3,1
 800b5fc:	4821883a 	mov	r16,r9
 800b600:	89a2b03a 	or	r17,r17,r6
 800b604:	003f1b06 	br	800b274 <__alt_data_end+0xfc00b274>
 800b608:	0101ffc4 	movi	r4,2047
 800b60c:	813f441e 	bne	r16,r4,800b320 <__alt_data_end+0xfc00b320>
 800b610:	003f1806 	br	800b274 <__alt_data_end+0xfc00b274>
 800b614:	843ff844 	addi	r16,r16,-31
 800b618:	01400804 	movi	r5,32
 800b61c:	1408d83a 	srl	r4,r2,r16
 800b620:	19405026 	beq	r3,r5,800b764 <__subdf3+0x574>
 800b624:	01401004 	movi	r5,64
 800b628:	28c7c83a 	sub	r3,r5,r3
 800b62c:	10c4983a 	sll	r2,r2,r3
 800b630:	88a2b03a 	or	r17,r17,r2
 800b634:	8822c03a 	cmpne	r17,r17,zero
 800b638:	2462b03a 	or	r17,r4,r17
 800b63c:	0007883a 	mov	r3,zero
 800b640:	0021883a 	mov	r16,zero
 800b644:	003f6d06 	br	800b3fc <__alt_data_end+0xfc00b3fc>
 800b648:	11fff804 	addi	r7,r2,-32
 800b64c:	01000804 	movi	r4,32
 800b650:	29ced83a 	srl	r7,r5,r7
 800b654:	11004526 	beq	r2,r4,800b76c <__subdf3+0x57c>
 800b658:	01001004 	movi	r4,64
 800b65c:	2089c83a 	sub	r4,r4,r2
 800b660:	2904983a 	sll	r2,r5,r4
 800b664:	118cb03a 	or	r6,r2,r6
 800b668:	300cc03a 	cmpne	r6,r6,zero
 800b66c:	398cb03a 	or	r6,r7,r6
 800b670:	0005883a 	mov	r2,zero
 800b674:	003f3706 	br	800b354 <__alt_data_end+0xfc00b354>
 800b678:	80002a26 	beq	r16,zero,800b724 <__subdf3+0x534>
 800b67c:	0101ffc4 	movi	r4,2047
 800b680:	49006626 	beq	r9,r4,800b81c <__subdf3+0x62c>
 800b684:	0085c83a 	sub	r2,zero,r2
 800b688:	18c02034 	orhi	r3,r3,128
 800b68c:	01000e04 	movi	r4,56
 800b690:	20807e16 	blt	r4,r2,800b88c <__subdf3+0x69c>
 800b694:	010007c4 	movi	r4,31
 800b698:	2080e716 	blt	r4,r2,800ba38 <__subdf3+0x848>
 800b69c:	01000804 	movi	r4,32
 800b6a0:	2089c83a 	sub	r4,r4,r2
 800b6a4:	1914983a 	sll	r10,r3,r4
 800b6a8:	8890d83a 	srl	r8,r17,r2
 800b6ac:	8908983a 	sll	r4,r17,r4
 800b6b0:	1884d83a 	srl	r2,r3,r2
 800b6b4:	5222b03a 	or	r17,r10,r8
 800b6b8:	2006c03a 	cmpne	r3,r4,zero
 800b6bc:	88e2b03a 	or	r17,r17,r3
 800b6c0:	3463c83a 	sub	r17,r6,r17
 800b6c4:	2885c83a 	sub	r2,r5,r2
 800b6c8:	344d803a 	cmpltu	r6,r6,r17
 800b6cc:	1187c83a 	sub	r3,r2,r6
 800b6d0:	4821883a 	mov	r16,r9
 800b6d4:	3825883a 	mov	r18,r7
 800b6d8:	003f2306 	br	800b368 <__alt_data_end+0xfc00b368>
 800b6dc:	24d0b03a 	or	r8,r4,r19
 800b6e0:	40001b1e 	bne	r8,zero,800b750 <__subdf3+0x560>
 800b6e4:	0005883a 	mov	r2,zero
 800b6e8:	0009883a 	mov	r4,zero
 800b6ec:	0021883a 	mov	r16,zero
 800b6f0:	003f4906 	br	800b418 <__alt_data_end+0xfc00b418>
 800b6f4:	010007c4 	movi	r4,31
 800b6f8:	20803a16 	blt	r4,r2,800b7e4 <__subdf3+0x5f4>
 800b6fc:	01000804 	movi	r4,32
 800b700:	2089c83a 	sub	r4,r4,r2
 800b704:	2912983a 	sll	r9,r5,r4
 800b708:	3090d83a 	srl	r8,r6,r2
 800b70c:	3108983a 	sll	r4,r6,r4
 800b710:	2884d83a 	srl	r2,r5,r2
 800b714:	4a12b03a 	or	r9,r9,r8
 800b718:	2008c03a 	cmpne	r4,r4,zero
 800b71c:	4912b03a 	or	r9,r9,r4
 800b720:	003f4e06 	br	800b45c <__alt_data_end+0xfc00b45c>
 800b724:	1c48b03a 	or	r4,r3,r17
 800b728:	20003c26 	beq	r4,zero,800b81c <__subdf3+0x62c>
 800b72c:	0084303a 	nor	r2,zero,r2
 800b730:	1000381e 	bne	r2,zero,800b814 <__subdf3+0x624>
 800b734:	3463c83a 	sub	r17,r6,r17
 800b738:	28c5c83a 	sub	r2,r5,r3
 800b73c:	344d803a 	cmpltu	r6,r6,r17
 800b740:	1187c83a 	sub	r3,r2,r6
 800b744:	4821883a 	mov	r16,r9
 800b748:	3825883a 	mov	r18,r7
 800b74c:	003f0606 	br	800b368 <__alt_data_end+0xfc00b368>
 800b750:	2023883a 	mov	r17,r4
 800b754:	003f0906 	br	800b37c <__alt_data_end+0xfc00b37c>
 800b758:	0101ffc4 	movi	r4,2047
 800b75c:	813f3a1e 	bne	r16,r4,800b448 <__alt_data_end+0xfc00b448>
 800b760:	003ec406 	br	800b274 <__alt_data_end+0xfc00b274>
 800b764:	0005883a 	mov	r2,zero
 800b768:	003fb106 	br	800b630 <__alt_data_end+0xfc00b630>
 800b76c:	0005883a 	mov	r2,zero
 800b770:	003fbc06 	br	800b664 <__alt_data_end+0xfc00b664>
 800b774:	1c44b03a 	or	r2,r3,r17
 800b778:	80008e1e 	bne	r16,zero,800b9b4 <__subdf3+0x7c4>
 800b77c:	1000c826 	beq	r2,zero,800baa0 <__subdf3+0x8b0>
 800b780:	2984b03a 	or	r2,r5,r6
 800b784:	103ebb26 	beq	r2,zero,800b274 <__alt_data_end+0xfc00b274>
 800b788:	8989883a 	add	r4,r17,r6
 800b78c:	1945883a 	add	r2,r3,r5
 800b790:	2447803a 	cmpltu	r3,r4,r17
 800b794:	1887883a 	add	r3,r3,r2
 800b798:	1880202c 	andhi	r2,r3,128
 800b79c:	2023883a 	mov	r17,r4
 800b7a0:	103f1626 	beq	r2,zero,800b3fc <__alt_data_end+0xfc00b3fc>
 800b7a4:	00bfe034 	movhi	r2,65408
 800b7a8:	10bfffc4 	addi	r2,r2,-1
 800b7ac:	5021883a 	mov	r16,r10
 800b7b0:	1886703a 	and	r3,r3,r2
 800b7b4:	003eaf06 	br	800b274 <__alt_data_end+0xfc00b274>
 800b7b8:	3825883a 	mov	r18,r7
 800b7bc:	003f0f06 	br	800b3fc <__alt_data_end+0xfc00b3fc>
 800b7c0:	1c44b03a 	or	r2,r3,r17
 800b7c4:	8000251e 	bne	r16,zero,800b85c <__subdf3+0x66c>
 800b7c8:	1000661e 	bne	r2,zero,800b964 <__subdf3+0x774>
 800b7cc:	2990b03a 	or	r8,r5,r6
 800b7d0:	40009626 	beq	r8,zero,800ba2c <__subdf3+0x83c>
 800b7d4:	2807883a 	mov	r3,r5
 800b7d8:	3023883a 	mov	r17,r6
 800b7dc:	3825883a 	mov	r18,r7
 800b7e0:	003ea406 	br	800b274 <__alt_data_end+0xfc00b274>
 800b7e4:	127ff804 	addi	r9,r2,-32
 800b7e8:	01000804 	movi	r4,32
 800b7ec:	2a52d83a 	srl	r9,r5,r9
 800b7f0:	11008c26 	beq	r2,r4,800ba24 <__subdf3+0x834>
 800b7f4:	01001004 	movi	r4,64
 800b7f8:	2085c83a 	sub	r2,r4,r2
 800b7fc:	2884983a 	sll	r2,r5,r2
 800b800:	118cb03a 	or	r6,r2,r6
 800b804:	300cc03a 	cmpne	r6,r6,zero
 800b808:	4992b03a 	or	r9,r9,r6
 800b80c:	0005883a 	mov	r2,zero
 800b810:	003f1206 	br	800b45c <__alt_data_end+0xfc00b45c>
 800b814:	0101ffc4 	movi	r4,2047
 800b818:	493f9c1e 	bne	r9,r4,800b68c <__alt_data_end+0xfc00b68c>
 800b81c:	2807883a 	mov	r3,r5
 800b820:	3023883a 	mov	r17,r6
 800b824:	4821883a 	mov	r16,r9
 800b828:	3825883a 	mov	r18,r7
 800b82c:	003e9106 	br	800b274 <__alt_data_end+0xfc00b274>
 800b830:	80001f1e 	bne	r16,zero,800b8b0 <__subdf3+0x6c0>
 800b834:	1c48b03a 	or	r4,r3,r17
 800b838:	20005a26 	beq	r4,zero,800b9a4 <__subdf3+0x7b4>
 800b83c:	0084303a 	nor	r2,zero,r2
 800b840:	1000561e 	bne	r2,zero,800b99c <__subdf3+0x7ac>
 800b844:	89a3883a 	add	r17,r17,r6
 800b848:	1945883a 	add	r2,r3,r5
 800b84c:	898d803a 	cmpltu	r6,r17,r6
 800b850:	3087883a 	add	r3,r6,r2
 800b854:	4821883a 	mov	r16,r9
 800b858:	003f0506 	br	800b470 <__alt_data_end+0xfc00b470>
 800b85c:	10002b1e 	bne	r2,zero,800b90c <__subdf3+0x71c>
 800b860:	2984b03a 	or	r2,r5,r6
 800b864:	10008026 	beq	r2,zero,800ba68 <__subdf3+0x878>
 800b868:	2807883a 	mov	r3,r5
 800b86c:	3023883a 	mov	r17,r6
 800b870:	3825883a 	mov	r18,r7
 800b874:	0401ffc4 	movi	r16,2047
 800b878:	003e7e06 	br	800b274 <__alt_data_end+0xfc00b274>
 800b87c:	3809883a 	mov	r4,r7
 800b880:	0011883a 	mov	r8,zero
 800b884:	0005883a 	mov	r2,zero
 800b888:	003ee306 	br	800b418 <__alt_data_end+0xfc00b418>
 800b88c:	1c62b03a 	or	r17,r3,r17
 800b890:	8822c03a 	cmpne	r17,r17,zero
 800b894:	0005883a 	mov	r2,zero
 800b898:	003f8906 	br	800b6c0 <__alt_data_end+0xfc00b6c0>
 800b89c:	3809883a 	mov	r4,r7
 800b8a0:	4821883a 	mov	r16,r9
 800b8a4:	0011883a 	mov	r8,zero
 800b8a8:	0005883a 	mov	r2,zero
 800b8ac:	003eda06 	br	800b418 <__alt_data_end+0xfc00b418>
 800b8b0:	0101ffc4 	movi	r4,2047
 800b8b4:	49003b26 	beq	r9,r4,800b9a4 <__subdf3+0x7b4>
 800b8b8:	0085c83a 	sub	r2,zero,r2
 800b8bc:	18c02034 	orhi	r3,r3,128
 800b8c0:	01000e04 	movi	r4,56
 800b8c4:	20806e16 	blt	r4,r2,800ba80 <__subdf3+0x890>
 800b8c8:	010007c4 	movi	r4,31
 800b8cc:	20807716 	blt	r4,r2,800baac <__subdf3+0x8bc>
 800b8d0:	01000804 	movi	r4,32
 800b8d4:	2089c83a 	sub	r4,r4,r2
 800b8d8:	1914983a 	sll	r10,r3,r4
 800b8dc:	8890d83a 	srl	r8,r17,r2
 800b8e0:	8908983a 	sll	r4,r17,r4
 800b8e4:	1884d83a 	srl	r2,r3,r2
 800b8e8:	5222b03a 	or	r17,r10,r8
 800b8ec:	2006c03a 	cmpne	r3,r4,zero
 800b8f0:	88e2b03a 	or	r17,r17,r3
 800b8f4:	89a3883a 	add	r17,r17,r6
 800b8f8:	1145883a 	add	r2,r2,r5
 800b8fc:	898d803a 	cmpltu	r6,r17,r6
 800b900:	3087883a 	add	r3,r6,r2
 800b904:	4821883a 	mov	r16,r9
 800b908:	003ed906 	br	800b470 <__alt_data_end+0xfc00b470>
 800b90c:	2984b03a 	or	r2,r5,r6
 800b910:	10004226 	beq	r2,zero,800ba1c <__subdf3+0x82c>
 800b914:	1808d0fa 	srli	r4,r3,3
 800b918:	8822d0fa 	srli	r17,r17,3
 800b91c:	1806977a 	slli	r3,r3,29
 800b920:	2080022c 	andhi	r2,r4,8
 800b924:	1c62b03a 	or	r17,r3,r17
 800b928:	10000826 	beq	r2,zero,800b94c <__subdf3+0x75c>
 800b92c:	2812d0fa 	srli	r9,r5,3
 800b930:	4880022c 	andhi	r2,r9,8
 800b934:	1000051e 	bne	r2,zero,800b94c <__subdf3+0x75c>
 800b938:	300cd0fa 	srli	r6,r6,3
 800b93c:	2804977a 	slli	r2,r5,29
 800b940:	4809883a 	mov	r4,r9
 800b944:	3825883a 	mov	r18,r7
 800b948:	11a2b03a 	or	r17,r2,r6
 800b94c:	8806d77a 	srli	r3,r17,29
 800b950:	200890fa 	slli	r4,r4,3
 800b954:	882290fa 	slli	r17,r17,3
 800b958:	0401ffc4 	movi	r16,2047
 800b95c:	1906b03a 	or	r3,r3,r4
 800b960:	003e4406 	br	800b274 <__alt_data_end+0xfc00b274>
 800b964:	2984b03a 	or	r2,r5,r6
 800b968:	103e4226 	beq	r2,zero,800b274 <__alt_data_end+0xfc00b274>
 800b96c:	8989c83a 	sub	r4,r17,r6
 800b970:	8911803a 	cmpltu	r8,r17,r4
 800b974:	1945c83a 	sub	r2,r3,r5
 800b978:	1205c83a 	sub	r2,r2,r8
 800b97c:	1200202c 	andhi	r8,r2,128
 800b980:	403e9a26 	beq	r8,zero,800b3ec <__alt_data_end+0xfc00b3ec>
 800b984:	3463c83a 	sub	r17,r6,r17
 800b988:	28c5c83a 	sub	r2,r5,r3
 800b98c:	344d803a 	cmpltu	r6,r6,r17
 800b990:	1187c83a 	sub	r3,r2,r6
 800b994:	3825883a 	mov	r18,r7
 800b998:	003e3606 	br	800b274 <__alt_data_end+0xfc00b274>
 800b99c:	0101ffc4 	movi	r4,2047
 800b9a0:	493fc71e 	bne	r9,r4,800b8c0 <__alt_data_end+0xfc00b8c0>
 800b9a4:	2807883a 	mov	r3,r5
 800b9a8:	3023883a 	mov	r17,r6
 800b9ac:	4821883a 	mov	r16,r9
 800b9b0:	003e3006 	br	800b274 <__alt_data_end+0xfc00b274>
 800b9b4:	10003626 	beq	r2,zero,800ba90 <__subdf3+0x8a0>
 800b9b8:	2984b03a 	or	r2,r5,r6
 800b9bc:	10001726 	beq	r2,zero,800ba1c <__subdf3+0x82c>
 800b9c0:	1808d0fa 	srli	r4,r3,3
 800b9c4:	8822d0fa 	srli	r17,r17,3
 800b9c8:	1806977a 	slli	r3,r3,29
 800b9cc:	2080022c 	andhi	r2,r4,8
 800b9d0:	1c62b03a 	or	r17,r3,r17
 800b9d4:	10000726 	beq	r2,zero,800b9f4 <__subdf3+0x804>
 800b9d8:	2812d0fa 	srli	r9,r5,3
 800b9dc:	4880022c 	andhi	r2,r9,8
 800b9e0:	1000041e 	bne	r2,zero,800b9f4 <__subdf3+0x804>
 800b9e4:	300cd0fa 	srli	r6,r6,3
 800b9e8:	2804977a 	slli	r2,r5,29
 800b9ec:	4809883a 	mov	r4,r9
 800b9f0:	11a2b03a 	or	r17,r2,r6
 800b9f4:	8806d77a 	srli	r3,r17,29
 800b9f8:	200890fa 	slli	r4,r4,3
 800b9fc:	882290fa 	slli	r17,r17,3
 800ba00:	3825883a 	mov	r18,r7
 800ba04:	1906b03a 	or	r3,r3,r4
 800ba08:	0401ffc4 	movi	r16,2047
 800ba0c:	003e1906 	br	800b274 <__alt_data_end+0xfc00b274>
 800ba10:	000b883a 	mov	r5,zero
 800ba14:	0005883a 	mov	r2,zero
 800ba18:	003e2e06 	br	800b2d4 <__alt_data_end+0xfc00b2d4>
 800ba1c:	0401ffc4 	movi	r16,2047
 800ba20:	003e1406 	br	800b274 <__alt_data_end+0xfc00b274>
 800ba24:	0005883a 	mov	r2,zero
 800ba28:	003f7506 	br	800b800 <__alt_data_end+0xfc00b800>
 800ba2c:	0005883a 	mov	r2,zero
 800ba30:	0009883a 	mov	r4,zero
 800ba34:	003e7806 	br	800b418 <__alt_data_end+0xfc00b418>
 800ba38:	123ff804 	addi	r8,r2,-32
 800ba3c:	01000804 	movi	r4,32
 800ba40:	1a10d83a 	srl	r8,r3,r8
 800ba44:	11002526 	beq	r2,r4,800badc <__subdf3+0x8ec>
 800ba48:	01001004 	movi	r4,64
 800ba4c:	2085c83a 	sub	r2,r4,r2
 800ba50:	1884983a 	sll	r2,r3,r2
 800ba54:	1444b03a 	or	r2,r2,r17
 800ba58:	1004c03a 	cmpne	r2,r2,zero
 800ba5c:	40a2b03a 	or	r17,r8,r2
 800ba60:	0005883a 	mov	r2,zero
 800ba64:	003f1606 	br	800b6c0 <__alt_data_end+0xfc00b6c0>
 800ba68:	02000434 	movhi	r8,16
 800ba6c:	0009883a 	mov	r4,zero
 800ba70:	423fffc4 	addi	r8,r8,-1
 800ba74:	00bfffc4 	movi	r2,-1
 800ba78:	0401ffc4 	movi	r16,2047
 800ba7c:	003e6606 	br	800b418 <__alt_data_end+0xfc00b418>
 800ba80:	1c62b03a 	or	r17,r3,r17
 800ba84:	8822c03a 	cmpne	r17,r17,zero
 800ba88:	0005883a 	mov	r2,zero
 800ba8c:	003f9906 	br	800b8f4 <__alt_data_end+0xfc00b8f4>
 800ba90:	2807883a 	mov	r3,r5
 800ba94:	3023883a 	mov	r17,r6
 800ba98:	0401ffc4 	movi	r16,2047
 800ba9c:	003df506 	br	800b274 <__alt_data_end+0xfc00b274>
 800baa0:	2807883a 	mov	r3,r5
 800baa4:	3023883a 	mov	r17,r6
 800baa8:	003df206 	br	800b274 <__alt_data_end+0xfc00b274>
 800baac:	123ff804 	addi	r8,r2,-32
 800bab0:	01000804 	movi	r4,32
 800bab4:	1a10d83a 	srl	r8,r3,r8
 800bab8:	11000a26 	beq	r2,r4,800bae4 <__subdf3+0x8f4>
 800babc:	01001004 	movi	r4,64
 800bac0:	2085c83a 	sub	r2,r4,r2
 800bac4:	1884983a 	sll	r2,r3,r2
 800bac8:	1444b03a 	or	r2,r2,r17
 800bacc:	1004c03a 	cmpne	r2,r2,zero
 800bad0:	40a2b03a 	or	r17,r8,r2
 800bad4:	0005883a 	mov	r2,zero
 800bad8:	003f8606 	br	800b8f4 <__alt_data_end+0xfc00b8f4>
 800badc:	0005883a 	mov	r2,zero
 800bae0:	003fdc06 	br	800ba54 <__alt_data_end+0xfc00ba54>
 800bae4:	0005883a 	mov	r2,zero
 800bae8:	003ff706 	br	800bac8 <__alt_data_end+0xfc00bac8>

0800baec <__fixdfsi>:
 800baec:	280cd53a 	srli	r6,r5,20
 800baf0:	00c00434 	movhi	r3,16
 800baf4:	18ffffc4 	addi	r3,r3,-1
 800baf8:	3181ffcc 	andi	r6,r6,2047
 800bafc:	01c0ff84 	movi	r7,1022
 800bb00:	28c6703a 	and	r3,r5,r3
 800bb04:	280ad7fa 	srli	r5,r5,31
 800bb08:	3980120e 	bge	r7,r6,800bb54 <__fixdfsi+0x68>
 800bb0c:	00810744 	movi	r2,1053
 800bb10:	11800c16 	blt	r2,r6,800bb44 <__fixdfsi+0x58>
 800bb14:	00810cc4 	movi	r2,1075
 800bb18:	1185c83a 	sub	r2,r2,r6
 800bb1c:	01c007c4 	movi	r7,31
 800bb20:	18c00434 	orhi	r3,r3,16
 800bb24:	38800d16 	blt	r7,r2,800bb5c <__fixdfsi+0x70>
 800bb28:	31befb44 	addi	r6,r6,-1043
 800bb2c:	2084d83a 	srl	r2,r4,r2
 800bb30:	1986983a 	sll	r3,r3,r6
 800bb34:	1884b03a 	or	r2,r3,r2
 800bb38:	28000726 	beq	r5,zero,800bb58 <__fixdfsi+0x6c>
 800bb3c:	0085c83a 	sub	r2,zero,r2
 800bb40:	f800283a 	ret
 800bb44:	00a00034 	movhi	r2,32768
 800bb48:	10bfffc4 	addi	r2,r2,-1
 800bb4c:	2885883a 	add	r2,r5,r2
 800bb50:	f800283a 	ret
 800bb54:	0005883a 	mov	r2,zero
 800bb58:	f800283a 	ret
 800bb5c:	008104c4 	movi	r2,1043
 800bb60:	1185c83a 	sub	r2,r2,r6
 800bb64:	1884d83a 	srl	r2,r3,r2
 800bb68:	003ff306 	br	800bb38 <__alt_data_end+0xfc00bb38>

0800bb6c <__floatsidf>:
 800bb6c:	defffd04 	addi	sp,sp,-12
 800bb70:	dfc00215 	stw	ra,8(sp)
 800bb74:	dc400115 	stw	r17,4(sp)
 800bb78:	dc000015 	stw	r16,0(sp)
 800bb7c:	20002b26 	beq	r4,zero,800bc2c <__floatsidf+0xc0>
 800bb80:	2023883a 	mov	r17,r4
 800bb84:	2020d7fa 	srli	r16,r4,31
 800bb88:	20002d16 	blt	r4,zero,800bc40 <__floatsidf+0xd4>
 800bb8c:	8809883a 	mov	r4,r17
 800bb90:	800bfa80 	call	800bfa8 <__clzsi2>
 800bb94:	01410784 	movi	r5,1054
 800bb98:	288bc83a 	sub	r5,r5,r2
 800bb9c:	01010cc4 	movi	r4,1075
 800bba0:	2149c83a 	sub	r4,r4,r5
 800bba4:	00c007c4 	movi	r3,31
 800bba8:	1900160e 	bge	r3,r4,800bc04 <__floatsidf+0x98>
 800bbac:	00c104c4 	movi	r3,1043
 800bbb0:	1947c83a 	sub	r3,r3,r5
 800bbb4:	88c6983a 	sll	r3,r17,r3
 800bbb8:	00800434 	movhi	r2,16
 800bbbc:	10bfffc4 	addi	r2,r2,-1
 800bbc0:	1886703a 	and	r3,r3,r2
 800bbc4:	2941ffcc 	andi	r5,r5,2047
 800bbc8:	800d883a 	mov	r6,r16
 800bbcc:	0005883a 	mov	r2,zero
 800bbd0:	280a953a 	slli	r5,r5,20
 800bbd4:	31803fcc 	andi	r6,r6,255
 800bbd8:	01000434 	movhi	r4,16
 800bbdc:	300c97fa 	slli	r6,r6,31
 800bbe0:	213fffc4 	addi	r4,r4,-1
 800bbe4:	1906703a 	and	r3,r3,r4
 800bbe8:	1946b03a 	or	r3,r3,r5
 800bbec:	1986b03a 	or	r3,r3,r6
 800bbf0:	dfc00217 	ldw	ra,8(sp)
 800bbf4:	dc400117 	ldw	r17,4(sp)
 800bbf8:	dc000017 	ldw	r16,0(sp)
 800bbfc:	dec00304 	addi	sp,sp,12
 800bc00:	f800283a 	ret
 800bc04:	00c002c4 	movi	r3,11
 800bc08:	1887c83a 	sub	r3,r3,r2
 800bc0c:	88c6d83a 	srl	r3,r17,r3
 800bc10:	8904983a 	sll	r2,r17,r4
 800bc14:	01000434 	movhi	r4,16
 800bc18:	213fffc4 	addi	r4,r4,-1
 800bc1c:	2941ffcc 	andi	r5,r5,2047
 800bc20:	1906703a 	and	r3,r3,r4
 800bc24:	800d883a 	mov	r6,r16
 800bc28:	003fe906 	br	800bbd0 <__alt_data_end+0xfc00bbd0>
 800bc2c:	000d883a 	mov	r6,zero
 800bc30:	000b883a 	mov	r5,zero
 800bc34:	0007883a 	mov	r3,zero
 800bc38:	0005883a 	mov	r2,zero
 800bc3c:	003fe406 	br	800bbd0 <__alt_data_end+0xfc00bbd0>
 800bc40:	0123c83a 	sub	r17,zero,r4
 800bc44:	003fd106 	br	800bb8c <__alt_data_end+0xfc00bb8c>

0800bc48 <__floatunsidf>:
 800bc48:	defffe04 	addi	sp,sp,-8
 800bc4c:	dc000015 	stw	r16,0(sp)
 800bc50:	dfc00115 	stw	ra,4(sp)
 800bc54:	2021883a 	mov	r16,r4
 800bc58:	20002226 	beq	r4,zero,800bce4 <__floatunsidf+0x9c>
 800bc5c:	800bfa80 	call	800bfa8 <__clzsi2>
 800bc60:	01010784 	movi	r4,1054
 800bc64:	2089c83a 	sub	r4,r4,r2
 800bc68:	01810cc4 	movi	r6,1075
 800bc6c:	310dc83a 	sub	r6,r6,r4
 800bc70:	00c007c4 	movi	r3,31
 800bc74:	1980120e 	bge	r3,r6,800bcc0 <__floatunsidf+0x78>
 800bc78:	00c104c4 	movi	r3,1043
 800bc7c:	1907c83a 	sub	r3,r3,r4
 800bc80:	80ca983a 	sll	r5,r16,r3
 800bc84:	00800434 	movhi	r2,16
 800bc88:	10bfffc4 	addi	r2,r2,-1
 800bc8c:	2101ffcc 	andi	r4,r4,2047
 800bc90:	0021883a 	mov	r16,zero
 800bc94:	288a703a 	and	r5,r5,r2
 800bc98:	2008953a 	slli	r4,r4,20
 800bc9c:	00c00434 	movhi	r3,16
 800bca0:	18ffffc4 	addi	r3,r3,-1
 800bca4:	28c6703a 	and	r3,r5,r3
 800bca8:	8005883a 	mov	r2,r16
 800bcac:	1906b03a 	or	r3,r3,r4
 800bcb0:	dfc00117 	ldw	ra,4(sp)
 800bcb4:	dc000017 	ldw	r16,0(sp)
 800bcb8:	dec00204 	addi	sp,sp,8
 800bcbc:	f800283a 	ret
 800bcc0:	00c002c4 	movi	r3,11
 800bcc4:	188bc83a 	sub	r5,r3,r2
 800bcc8:	814ad83a 	srl	r5,r16,r5
 800bccc:	00c00434 	movhi	r3,16
 800bcd0:	18ffffc4 	addi	r3,r3,-1
 800bcd4:	81a0983a 	sll	r16,r16,r6
 800bcd8:	2101ffcc 	andi	r4,r4,2047
 800bcdc:	28ca703a 	and	r5,r5,r3
 800bce0:	003fed06 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800bce4:	0009883a 	mov	r4,zero
 800bce8:	000b883a 	mov	r5,zero
 800bcec:	003fea06 	br	800bc98 <__alt_data_end+0xfc00bc98>

0800bcf0 <__extendsfdf2>:
 800bcf0:	200ad5fa 	srli	r5,r4,23
 800bcf4:	defffd04 	addi	sp,sp,-12
 800bcf8:	dc400115 	stw	r17,4(sp)
 800bcfc:	29403fcc 	andi	r5,r5,255
 800bd00:	29800044 	addi	r6,r5,1
 800bd04:	04402034 	movhi	r17,128
 800bd08:	dc000015 	stw	r16,0(sp)
 800bd0c:	8c7fffc4 	addi	r17,r17,-1
 800bd10:	dfc00215 	stw	ra,8(sp)
 800bd14:	31803fcc 	andi	r6,r6,255
 800bd18:	00800044 	movi	r2,1
 800bd1c:	8922703a 	and	r17,r17,r4
 800bd20:	2020d7fa 	srli	r16,r4,31
 800bd24:	1180110e 	bge	r2,r6,800bd6c <__extendsfdf2+0x7c>
 800bd28:	880cd0fa 	srli	r6,r17,3
 800bd2c:	8822977a 	slli	r17,r17,29
 800bd30:	2940e004 	addi	r5,r5,896
 800bd34:	2941ffcc 	andi	r5,r5,2047
 800bd38:	2804953a 	slli	r2,r5,20
 800bd3c:	01400434 	movhi	r5,16
 800bd40:	800697fa 	slli	r3,r16,31
 800bd44:	297fffc4 	addi	r5,r5,-1
 800bd48:	314a703a 	and	r5,r6,r5
 800bd4c:	288ab03a 	or	r5,r5,r2
 800bd50:	28c6b03a 	or	r3,r5,r3
 800bd54:	8805883a 	mov	r2,r17
 800bd58:	dfc00217 	ldw	ra,8(sp)
 800bd5c:	dc400117 	ldw	r17,4(sp)
 800bd60:	dc000017 	ldw	r16,0(sp)
 800bd64:	dec00304 	addi	sp,sp,12
 800bd68:	f800283a 	ret
 800bd6c:	2800111e 	bne	r5,zero,800bdb4 <__extendsfdf2+0xc4>
 800bd70:	88001c26 	beq	r17,zero,800bde4 <__extendsfdf2+0xf4>
 800bd74:	8809883a 	mov	r4,r17
 800bd78:	800bfa80 	call	800bfa8 <__clzsi2>
 800bd7c:	00c00284 	movi	r3,10
 800bd80:	18801b16 	blt	r3,r2,800bdf0 <__extendsfdf2+0x100>
 800bd84:	018002c4 	movi	r6,11
 800bd88:	308dc83a 	sub	r6,r6,r2
 800bd8c:	11000544 	addi	r4,r2,21
 800bd90:	8986d83a 	srl	r3,r17,r6
 800bd94:	8922983a 	sll	r17,r17,r4
 800bd98:	0180e244 	movi	r6,905
 800bd9c:	01400434 	movhi	r5,16
 800bda0:	3085c83a 	sub	r2,r6,r2
 800bda4:	297fffc4 	addi	r5,r5,-1
 800bda8:	194c703a 	and	r6,r3,r5
 800bdac:	1141ffcc 	andi	r5,r2,2047
 800bdb0:	003fe006 	br	800bd34 <__alt_data_end+0xfc00bd34>
 800bdb4:	88000826 	beq	r17,zero,800bdd8 <__extendsfdf2+0xe8>
 800bdb8:	880cd0fa 	srli	r6,r17,3
 800bdbc:	00800434 	movhi	r2,16
 800bdc0:	10bfffc4 	addi	r2,r2,-1
 800bdc4:	31800234 	orhi	r6,r6,8
 800bdc8:	8822977a 	slli	r17,r17,29
 800bdcc:	308c703a 	and	r6,r6,r2
 800bdd0:	0141ffc4 	movi	r5,2047
 800bdd4:	003fd706 	br	800bd34 <__alt_data_end+0xfc00bd34>
 800bdd8:	0141ffc4 	movi	r5,2047
 800bddc:	000d883a 	mov	r6,zero
 800bde0:	003fd406 	br	800bd34 <__alt_data_end+0xfc00bd34>
 800bde4:	000b883a 	mov	r5,zero
 800bde8:	000d883a 	mov	r6,zero
 800bdec:	003fd106 	br	800bd34 <__alt_data_end+0xfc00bd34>
 800bdf0:	11bffd44 	addi	r6,r2,-11
 800bdf4:	8986983a 	sll	r3,r17,r6
 800bdf8:	0023883a 	mov	r17,zero
 800bdfc:	003fe606 	br	800bd98 <__alt_data_end+0xfc00bd98>

0800be00 <__truncdfsf2>:
 800be00:	2810d53a 	srli	r8,r5,20
 800be04:	01c00434 	movhi	r7,16
 800be08:	39ffffc4 	addi	r7,r7,-1
 800be0c:	29ce703a 	and	r7,r5,r7
 800be10:	4201ffcc 	andi	r8,r8,2047
 800be14:	380e90fa 	slli	r7,r7,3
 800be18:	200cd77a 	srli	r6,r4,29
 800be1c:	42400044 	addi	r9,r8,1
 800be20:	4a41ffcc 	andi	r9,r9,2047
 800be24:	00c00044 	movi	r3,1
 800be28:	280ad7fa 	srli	r5,r5,31
 800be2c:	31ceb03a 	or	r7,r6,r7
 800be30:	200490fa 	slli	r2,r4,3
 800be34:	1a40230e 	bge	r3,r9,800bec4 <__truncdfsf2+0xc4>
 800be38:	40ff2004 	addi	r3,r8,-896
 800be3c:	01803f84 	movi	r6,254
 800be40:	30c01516 	blt	r6,r3,800be98 <__truncdfsf2+0x98>
 800be44:	00c0380e 	bge	zero,r3,800bf28 <__truncdfsf2+0x128>
 800be48:	200c91ba 	slli	r6,r4,6
 800be4c:	380e90fa 	slli	r7,r7,3
 800be50:	1004d77a 	srli	r2,r2,29
 800be54:	300cc03a 	cmpne	r6,r6,zero
 800be58:	31ccb03a 	or	r6,r6,r7
 800be5c:	308cb03a 	or	r6,r6,r2
 800be60:	308001cc 	andi	r2,r6,7
 800be64:	10000426 	beq	r2,zero,800be78 <__truncdfsf2+0x78>
 800be68:	308003cc 	andi	r2,r6,15
 800be6c:	01000104 	movi	r4,4
 800be70:	11000126 	beq	r2,r4,800be78 <__truncdfsf2+0x78>
 800be74:	31800104 	addi	r6,r6,4
 800be78:	3081002c 	andhi	r2,r6,1024
 800be7c:	10001626 	beq	r2,zero,800bed8 <__truncdfsf2+0xd8>
 800be80:	18c00044 	addi	r3,r3,1
 800be84:	00803fc4 	movi	r2,255
 800be88:	18800326 	beq	r3,r2,800be98 <__truncdfsf2+0x98>
 800be8c:	300c91ba 	slli	r6,r6,6
 800be90:	300cd27a 	srli	r6,r6,9
 800be94:	00000206 	br	800bea0 <__truncdfsf2+0xa0>
 800be98:	00ffffc4 	movi	r3,-1
 800be9c:	000d883a 	mov	r6,zero
 800bea0:	18c03fcc 	andi	r3,r3,255
 800bea4:	180895fa 	slli	r4,r3,23
 800bea8:	00c02034 	movhi	r3,128
 800beac:	280a97fa 	slli	r5,r5,31
 800beb0:	18ffffc4 	addi	r3,r3,-1
 800beb4:	30c6703a 	and	r3,r6,r3
 800beb8:	1906b03a 	or	r3,r3,r4
 800bebc:	1944b03a 	or	r2,r3,r5
 800bec0:	f800283a 	ret
 800bec4:	40000b1e 	bne	r8,zero,800bef4 <__truncdfsf2+0xf4>
 800bec8:	388cb03a 	or	r6,r7,r2
 800becc:	0007883a 	mov	r3,zero
 800bed0:	30000426 	beq	r6,zero,800bee4 <__truncdfsf2+0xe4>
 800bed4:	01800144 	movi	r6,5
 800bed8:	00803fc4 	movi	r2,255
 800bedc:	300cd0fa 	srli	r6,r6,3
 800bee0:	18800a26 	beq	r3,r2,800bf0c <__truncdfsf2+0x10c>
 800bee4:	00802034 	movhi	r2,128
 800bee8:	10bfffc4 	addi	r2,r2,-1
 800beec:	308c703a 	and	r6,r6,r2
 800bef0:	003feb06 	br	800bea0 <__alt_data_end+0xfc00bea0>
 800bef4:	3888b03a 	or	r4,r7,r2
 800bef8:	203fe726 	beq	r4,zero,800be98 <__alt_data_end+0xfc00be98>
 800befc:	380c90fa 	slli	r6,r7,3
 800bf00:	00c03fc4 	movi	r3,255
 800bf04:	31808034 	orhi	r6,r6,512
 800bf08:	003fd506 	br	800be60 <__alt_data_end+0xfc00be60>
 800bf0c:	303fe226 	beq	r6,zero,800be98 <__alt_data_end+0xfc00be98>
 800bf10:	00802034 	movhi	r2,128
 800bf14:	31801034 	orhi	r6,r6,64
 800bf18:	10bfffc4 	addi	r2,r2,-1
 800bf1c:	00ffffc4 	movi	r3,-1
 800bf20:	308c703a 	and	r6,r6,r2
 800bf24:	003fde06 	br	800bea0 <__alt_data_end+0xfc00bea0>
 800bf28:	013ffa44 	movi	r4,-23
 800bf2c:	19000e16 	blt	r3,r4,800bf68 <__truncdfsf2+0x168>
 800bf30:	01000784 	movi	r4,30
 800bf34:	20c9c83a 	sub	r4,r4,r3
 800bf38:	018007c4 	movi	r6,31
 800bf3c:	39c02034 	orhi	r7,r7,128
 800bf40:	31000b16 	blt	r6,r4,800bf70 <__truncdfsf2+0x170>
 800bf44:	423f2084 	addi	r8,r8,-894
 800bf48:	120c983a 	sll	r6,r2,r8
 800bf4c:	3a0e983a 	sll	r7,r7,r8
 800bf50:	1104d83a 	srl	r2,r2,r4
 800bf54:	300cc03a 	cmpne	r6,r6,zero
 800bf58:	31ceb03a 	or	r7,r6,r7
 800bf5c:	388cb03a 	or	r6,r7,r2
 800bf60:	0007883a 	mov	r3,zero
 800bf64:	003fbe06 	br	800be60 <__alt_data_end+0xfc00be60>
 800bf68:	0007883a 	mov	r3,zero
 800bf6c:	003fd906 	br	800bed4 <__alt_data_end+0xfc00bed4>
 800bf70:	01bfff84 	movi	r6,-2
 800bf74:	30cdc83a 	sub	r6,r6,r3
 800bf78:	00c00804 	movi	r3,32
 800bf7c:	398cd83a 	srl	r6,r7,r6
 800bf80:	20c00726 	beq	r4,r3,800bfa0 <__truncdfsf2+0x1a0>
 800bf84:	423f2884 	addi	r8,r8,-862
 800bf88:	3a0e983a 	sll	r7,r7,r8
 800bf8c:	3884b03a 	or	r2,r7,r2
 800bf90:	1004c03a 	cmpne	r2,r2,zero
 800bf94:	118cb03a 	or	r6,r2,r6
 800bf98:	0007883a 	mov	r3,zero
 800bf9c:	003fb006 	br	800be60 <__alt_data_end+0xfc00be60>
 800bfa0:	000f883a 	mov	r7,zero
 800bfa4:	003ff906 	br	800bf8c <__alt_data_end+0xfc00bf8c>

0800bfa8 <__clzsi2>:
 800bfa8:	00bfffd4 	movui	r2,65535
 800bfac:	11000536 	bltu	r2,r4,800bfc4 <__clzsi2+0x1c>
 800bfb0:	00803fc4 	movi	r2,255
 800bfb4:	11000f36 	bltu	r2,r4,800bff4 <__clzsi2+0x4c>
 800bfb8:	00800804 	movi	r2,32
 800bfbc:	0007883a 	mov	r3,zero
 800bfc0:	00000506 	br	800bfd8 <__clzsi2+0x30>
 800bfc4:	00804034 	movhi	r2,256
 800bfc8:	10bfffc4 	addi	r2,r2,-1
 800bfcc:	11000c2e 	bgeu	r2,r4,800c000 <__clzsi2+0x58>
 800bfd0:	00800204 	movi	r2,8
 800bfd4:	00c00604 	movi	r3,24
 800bfd8:	20c8d83a 	srl	r4,r4,r3
 800bfdc:	00c20d74 	movhi	r3,2101
 800bfe0:	18e10304 	addi	r3,r3,-31732
 800bfe4:	1909883a 	add	r4,r3,r4
 800bfe8:	20c00003 	ldbu	r3,0(r4)
 800bfec:	10c5c83a 	sub	r2,r2,r3
 800bff0:	f800283a 	ret
 800bff4:	00800604 	movi	r2,24
 800bff8:	00c00204 	movi	r3,8
 800bffc:	003ff606 	br	800bfd8 <__alt_data_end+0xfc00bfd8>
 800c000:	00800404 	movi	r2,16
 800c004:	1007883a 	mov	r3,r2
 800c008:	003ff306 	br	800bfd8 <__alt_data_end+0xfc00bfd8>

0800c00c <__errno>:
 800c00c:	00820d74 	movhi	r2,2101
 800c010:	10a88304 	addi	r2,r2,-24052
 800c014:	10800017 	ldw	r2,0(r2)
 800c018:	f800283a 	ret

0800c01c <memset>:
 800c01c:	20c000cc 	andi	r3,r4,3
 800c020:	2005883a 	mov	r2,r4
 800c024:	18004426 	beq	r3,zero,800c138 <memset+0x11c>
 800c028:	31ffffc4 	addi	r7,r6,-1
 800c02c:	30004026 	beq	r6,zero,800c130 <memset+0x114>
 800c030:	2813883a 	mov	r9,r5
 800c034:	200d883a 	mov	r6,r4
 800c038:	2007883a 	mov	r3,r4
 800c03c:	00000406 	br	800c050 <memset+0x34>
 800c040:	3a3fffc4 	addi	r8,r7,-1
 800c044:	31800044 	addi	r6,r6,1
 800c048:	38003926 	beq	r7,zero,800c130 <memset+0x114>
 800c04c:	400f883a 	mov	r7,r8
 800c050:	18c00044 	addi	r3,r3,1
 800c054:	32400005 	stb	r9,0(r6)
 800c058:	1a0000cc 	andi	r8,r3,3
 800c05c:	403ff81e 	bne	r8,zero,800c040 <__alt_data_end+0xfc00c040>
 800c060:	010000c4 	movi	r4,3
 800c064:	21c02d2e 	bgeu	r4,r7,800c11c <memset+0x100>
 800c068:	29003fcc 	andi	r4,r5,255
 800c06c:	200c923a 	slli	r6,r4,8
 800c070:	3108b03a 	or	r4,r6,r4
 800c074:	200c943a 	slli	r6,r4,16
 800c078:	218cb03a 	or	r6,r4,r6
 800c07c:	010003c4 	movi	r4,15
 800c080:	21c0182e 	bgeu	r4,r7,800c0e4 <memset+0xc8>
 800c084:	3b3ffc04 	addi	r12,r7,-16
 800c088:	6018d13a 	srli	r12,r12,4
 800c08c:	1a000104 	addi	r8,r3,4
 800c090:	1ac00204 	addi	r11,r3,8
 800c094:	6008913a 	slli	r4,r12,4
 800c098:	1a800304 	addi	r10,r3,12
 800c09c:	1813883a 	mov	r9,r3
 800c0a0:	21000504 	addi	r4,r4,20
 800c0a4:	1909883a 	add	r4,r3,r4
 800c0a8:	49800015 	stw	r6,0(r9)
 800c0ac:	41800015 	stw	r6,0(r8)
 800c0b0:	59800015 	stw	r6,0(r11)
 800c0b4:	51800015 	stw	r6,0(r10)
 800c0b8:	42000404 	addi	r8,r8,16
 800c0bc:	4a400404 	addi	r9,r9,16
 800c0c0:	5ac00404 	addi	r11,r11,16
 800c0c4:	52800404 	addi	r10,r10,16
 800c0c8:	413ff71e 	bne	r8,r4,800c0a8 <__alt_data_end+0xfc00c0a8>
 800c0cc:	63000044 	addi	r12,r12,1
 800c0d0:	6018913a 	slli	r12,r12,4
 800c0d4:	39c003cc 	andi	r7,r7,15
 800c0d8:	010000c4 	movi	r4,3
 800c0dc:	1b07883a 	add	r3,r3,r12
 800c0e0:	21c00e2e 	bgeu	r4,r7,800c11c <memset+0x100>
 800c0e4:	1813883a 	mov	r9,r3
 800c0e8:	3811883a 	mov	r8,r7
 800c0ec:	010000c4 	movi	r4,3
 800c0f0:	49800015 	stw	r6,0(r9)
 800c0f4:	423fff04 	addi	r8,r8,-4
 800c0f8:	4a400104 	addi	r9,r9,4
 800c0fc:	223ffc36 	bltu	r4,r8,800c0f0 <__alt_data_end+0xfc00c0f0>
 800c100:	393fff04 	addi	r4,r7,-4
 800c104:	2008d0ba 	srli	r4,r4,2
 800c108:	39c000cc 	andi	r7,r7,3
 800c10c:	21000044 	addi	r4,r4,1
 800c110:	2109883a 	add	r4,r4,r4
 800c114:	2109883a 	add	r4,r4,r4
 800c118:	1907883a 	add	r3,r3,r4
 800c11c:	38000526 	beq	r7,zero,800c134 <memset+0x118>
 800c120:	19cf883a 	add	r7,r3,r7
 800c124:	19400005 	stb	r5,0(r3)
 800c128:	18c00044 	addi	r3,r3,1
 800c12c:	38fffd1e 	bne	r7,r3,800c124 <__alt_data_end+0xfc00c124>
 800c130:	f800283a 	ret
 800c134:	f800283a 	ret
 800c138:	2007883a 	mov	r3,r4
 800c13c:	300f883a 	mov	r7,r6
 800c140:	003fc706 	br	800c060 <__alt_data_end+0xfc00c060>

0800c144 <_printf_r>:
 800c144:	defffd04 	addi	sp,sp,-12
 800c148:	2805883a 	mov	r2,r5
 800c14c:	dfc00015 	stw	ra,0(sp)
 800c150:	d9800115 	stw	r6,4(sp)
 800c154:	d9c00215 	stw	r7,8(sp)
 800c158:	21400217 	ldw	r5,8(r4)
 800c15c:	d9c00104 	addi	r7,sp,4
 800c160:	100d883a 	mov	r6,r2
 800c164:	800c31c0 	call	800c31c <___vfprintf_internal_r>
 800c168:	dfc00017 	ldw	ra,0(sp)
 800c16c:	dec00304 	addi	sp,sp,12
 800c170:	f800283a 	ret

0800c174 <printf>:
 800c174:	defffc04 	addi	sp,sp,-16
 800c178:	dfc00015 	stw	ra,0(sp)
 800c17c:	d9400115 	stw	r5,4(sp)
 800c180:	d9800215 	stw	r6,8(sp)
 800c184:	d9c00315 	stw	r7,12(sp)
 800c188:	00820d74 	movhi	r2,2101
 800c18c:	10a88304 	addi	r2,r2,-24052
 800c190:	10800017 	ldw	r2,0(r2)
 800c194:	200b883a 	mov	r5,r4
 800c198:	d9800104 	addi	r6,sp,4
 800c19c:	11000217 	ldw	r4,8(r2)
 800c1a0:	800e5f80 	call	800e5f8 <__vfprintf_internal>
 800c1a4:	dfc00017 	ldw	ra,0(sp)
 800c1a8:	dec00404 	addi	sp,sp,16
 800c1ac:	f800283a 	ret

0800c1b0 <_puts_r>:
 800c1b0:	defff604 	addi	sp,sp,-40
 800c1b4:	dc000715 	stw	r16,28(sp)
 800c1b8:	2021883a 	mov	r16,r4
 800c1bc:	2809883a 	mov	r4,r5
 800c1c0:	dc400815 	stw	r17,32(sp)
 800c1c4:	dfc00915 	stw	ra,36(sp)
 800c1c8:	2823883a 	mov	r17,r5
 800c1cc:	800c2840 	call	800c284 <strlen>
 800c1d0:	10c00044 	addi	r3,r2,1
 800c1d4:	d8800115 	stw	r2,4(sp)
 800c1d8:	00820d74 	movhi	r2,2101
 800c1dc:	10a14404 	addi	r2,r2,-31472
 800c1e0:	d8800215 	stw	r2,8(sp)
 800c1e4:	00800044 	movi	r2,1
 800c1e8:	d8800315 	stw	r2,12(sp)
 800c1ec:	00800084 	movi	r2,2
 800c1f0:	dc400015 	stw	r17,0(sp)
 800c1f4:	d8c00615 	stw	r3,24(sp)
 800c1f8:	dec00415 	stw	sp,16(sp)
 800c1fc:	d8800515 	stw	r2,20(sp)
 800c200:	80000226 	beq	r16,zero,800c20c <_puts_r+0x5c>
 800c204:	80800e17 	ldw	r2,56(r16)
 800c208:	10001426 	beq	r2,zero,800c25c <_puts_r+0xac>
 800c20c:	81400217 	ldw	r5,8(r16)
 800c210:	2880030b 	ldhu	r2,12(r5)
 800c214:	10c8000c 	andi	r3,r2,8192
 800c218:	1800061e 	bne	r3,zero,800c234 <_puts_r+0x84>
 800c21c:	29001917 	ldw	r4,100(r5)
 800c220:	00f7ffc4 	movi	r3,-8193
 800c224:	10880014 	ori	r2,r2,8192
 800c228:	20c6703a 	and	r3,r4,r3
 800c22c:	2880030d 	sth	r2,12(r5)
 800c230:	28c01915 	stw	r3,100(r5)
 800c234:	d9800404 	addi	r6,sp,16
 800c238:	8009883a 	mov	r4,r16
 800c23c:	8010b600 	call	8010b60 <__sfvwrite_r>
 800c240:	1000091e 	bne	r2,zero,800c268 <_puts_r+0xb8>
 800c244:	00800284 	movi	r2,10
 800c248:	dfc00917 	ldw	ra,36(sp)
 800c24c:	dc400817 	ldw	r17,32(sp)
 800c250:	dc000717 	ldw	r16,28(sp)
 800c254:	dec00a04 	addi	sp,sp,40
 800c258:	f800283a 	ret
 800c25c:	8009883a 	mov	r4,r16
 800c260:	80106dc0 	call	80106dc <__sinit>
 800c264:	003fe906 	br	800c20c <__alt_data_end+0xfc00c20c>
 800c268:	00bfffc4 	movi	r2,-1
 800c26c:	003ff606 	br	800c248 <__alt_data_end+0xfc00c248>

0800c270 <puts>:
 800c270:	00820d74 	movhi	r2,2101
 800c274:	10a88304 	addi	r2,r2,-24052
 800c278:	200b883a 	mov	r5,r4
 800c27c:	11000017 	ldw	r4,0(r2)
 800c280:	800c1b01 	jmpi	800c1b0 <_puts_r>

0800c284 <strlen>:
 800c284:	208000cc 	andi	r2,r4,3
 800c288:	10002026 	beq	r2,zero,800c30c <strlen+0x88>
 800c28c:	20800007 	ldb	r2,0(r4)
 800c290:	10002026 	beq	r2,zero,800c314 <strlen+0x90>
 800c294:	2005883a 	mov	r2,r4
 800c298:	00000206 	br	800c2a4 <strlen+0x20>
 800c29c:	10c00007 	ldb	r3,0(r2)
 800c2a0:	18001826 	beq	r3,zero,800c304 <strlen+0x80>
 800c2a4:	10800044 	addi	r2,r2,1
 800c2a8:	10c000cc 	andi	r3,r2,3
 800c2ac:	183ffb1e 	bne	r3,zero,800c29c <__alt_data_end+0xfc00c29c>
 800c2b0:	10c00017 	ldw	r3,0(r2)
 800c2b4:	01ffbff4 	movhi	r7,65279
 800c2b8:	39ffbfc4 	addi	r7,r7,-257
 800c2bc:	00ca303a 	nor	r5,zero,r3
 800c2c0:	01a02074 	movhi	r6,32897
 800c2c4:	19c7883a 	add	r3,r3,r7
 800c2c8:	31a02004 	addi	r6,r6,-32640
 800c2cc:	1946703a 	and	r3,r3,r5
 800c2d0:	1986703a 	and	r3,r3,r6
 800c2d4:	1800091e 	bne	r3,zero,800c2fc <strlen+0x78>
 800c2d8:	10800104 	addi	r2,r2,4
 800c2dc:	10c00017 	ldw	r3,0(r2)
 800c2e0:	19cb883a 	add	r5,r3,r7
 800c2e4:	00c6303a 	nor	r3,zero,r3
 800c2e8:	28c6703a 	and	r3,r5,r3
 800c2ec:	1986703a 	and	r3,r3,r6
 800c2f0:	183ff926 	beq	r3,zero,800c2d8 <__alt_data_end+0xfc00c2d8>
 800c2f4:	00000106 	br	800c2fc <strlen+0x78>
 800c2f8:	10800044 	addi	r2,r2,1
 800c2fc:	10c00007 	ldb	r3,0(r2)
 800c300:	183ffd1e 	bne	r3,zero,800c2f8 <__alt_data_end+0xfc00c2f8>
 800c304:	1105c83a 	sub	r2,r2,r4
 800c308:	f800283a 	ret
 800c30c:	2005883a 	mov	r2,r4
 800c310:	003fe706 	br	800c2b0 <__alt_data_end+0xfc00c2b0>
 800c314:	0005883a 	mov	r2,zero
 800c318:	f800283a 	ret

0800c31c <___vfprintf_internal_r>:
 800c31c:	deffb804 	addi	sp,sp,-288
 800c320:	dfc04715 	stw	ra,284(sp)
 800c324:	ddc04515 	stw	r23,276(sp)
 800c328:	dd404315 	stw	r21,268(sp)
 800c32c:	d9002d15 	stw	r4,180(sp)
 800c330:	282f883a 	mov	r23,r5
 800c334:	302b883a 	mov	r21,r6
 800c338:	d9c02e15 	stw	r7,184(sp)
 800c33c:	df004615 	stw	fp,280(sp)
 800c340:	dd804415 	stw	r22,272(sp)
 800c344:	dd004215 	stw	r20,264(sp)
 800c348:	dcc04115 	stw	r19,260(sp)
 800c34c:	dc804015 	stw	r18,256(sp)
 800c350:	dc403f15 	stw	r17,252(sp)
 800c354:	dc003e15 	stw	r16,248(sp)
 800c358:	801125c0 	call	801125c <_localeconv_r>
 800c35c:	10800017 	ldw	r2,0(r2)
 800c360:	1009883a 	mov	r4,r2
 800c364:	d8803415 	stw	r2,208(sp)
 800c368:	800c2840 	call	800c284 <strlen>
 800c36c:	d8803715 	stw	r2,220(sp)
 800c370:	d8802d17 	ldw	r2,180(sp)
 800c374:	10000226 	beq	r2,zero,800c380 <___vfprintf_internal_r+0x64>
 800c378:	10800e17 	ldw	r2,56(r2)
 800c37c:	1000fb26 	beq	r2,zero,800c76c <___vfprintf_internal_r+0x450>
 800c380:	b880030b 	ldhu	r2,12(r23)
 800c384:	10c8000c 	andi	r3,r2,8192
 800c388:	1800061e 	bne	r3,zero,800c3a4 <___vfprintf_internal_r+0x88>
 800c38c:	b9001917 	ldw	r4,100(r23)
 800c390:	00f7ffc4 	movi	r3,-8193
 800c394:	10880014 	ori	r2,r2,8192
 800c398:	20c6703a 	and	r3,r4,r3
 800c39c:	b880030d 	sth	r2,12(r23)
 800c3a0:	b8c01915 	stw	r3,100(r23)
 800c3a4:	10c0020c 	andi	r3,r2,8
 800c3a8:	1800c326 	beq	r3,zero,800c6b8 <___vfprintf_internal_r+0x39c>
 800c3ac:	b8c00417 	ldw	r3,16(r23)
 800c3b0:	1800c126 	beq	r3,zero,800c6b8 <___vfprintf_internal_r+0x39c>
 800c3b4:	1080068c 	andi	r2,r2,26
 800c3b8:	00c00284 	movi	r3,10
 800c3bc:	10c0c626 	beq	r2,r3,800c6d8 <___vfprintf_internal_r+0x3bc>
 800c3c0:	d8c00404 	addi	r3,sp,16
 800c3c4:	05020d74 	movhi	r20,2101
 800c3c8:	d9001e04 	addi	r4,sp,120
 800c3cc:	a5215584 	addi	r20,r20,-31402
 800c3d0:	d8c01e15 	stw	r3,120(sp)
 800c3d4:	d8002015 	stw	zero,128(sp)
 800c3d8:	d8001f15 	stw	zero,124(sp)
 800c3dc:	d8003315 	stw	zero,204(sp)
 800c3e0:	d8003615 	stw	zero,216(sp)
 800c3e4:	d8003815 	stw	zero,224(sp)
 800c3e8:	1811883a 	mov	r8,r3
 800c3ec:	d8003915 	stw	zero,228(sp)
 800c3f0:	d8003a15 	stw	zero,232(sp)
 800c3f4:	d8002f15 	stw	zero,188(sp)
 800c3f8:	d9002815 	stw	r4,160(sp)
 800c3fc:	a8800007 	ldb	r2,0(r21)
 800c400:	10028b26 	beq	r2,zero,800ce30 <___vfprintf_internal_r+0xb14>
 800c404:	00c00944 	movi	r3,37
 800c408:	a823883a 	mov	r17,r21
 800c40c:	10c0021e 	bne	r2,r3,800c418 <___vfprintf_internal_r+0xfc>
 800c410:	00001406 	br	800c464 <___vfprintf_internal_r+0x148>
 800c414:	10c00326 	beq	r2,r3,800c424 <___vfprintf_internal_r+0x108>
 800c418:	8c400044 	addi	r17,r17,1
 800c41c:	88800007 	ldb	r2,0(r17)
 800c420:	103ffc1e 	bne	r2,zero,800c414 <__alt_data_end+0xfc00c414>
 800c424:	8d61c83a 	sub	r16,r17,r21
 800c428:	80000e26 	beq	r16,zero,800c464 <___vfprintf_internal_r+0x148>
 800c42c:	d8c02017 	ldw	r3,128(sp)
 800c430:	d8801f17 	ldw	r2,124(sp)
 800c434:	45400015 	stw	r21,0(r8)
 800c438:	1c07883a 	add	r3,r3,r16
 800c43c:	10800044 	addi	r2,r2,1
 800c440:	d8c02015 	stw	r3,128(sp)
 800c444:	44000115 	stw	r16,4(r8)
 800c448:	d8801f15 	stw	r2,124(sp)
 800c44c:	00c001c4 	movi	r3,7
 800c450:	1880a916 	blt	r3,r2,800c6f8 <___vfprintf_internal_r+0x3dc>
 800c454:	42000204 	addi	r8,r8,8
 800c458:	d9402f17 	ldw	r5,188(sp)
 800c45c:	2c0b883a 	add	r5,r5,r16
 800c460:	d9402f15 	stw	r5,188(sp)
 800c464:	88800007 	ldb	r2,0(r17)
 800c468:	1000aa26 	beq	r2,zero,800c714 <___vfprintf_internal_r+0x3f8>
 800c46c:	8d400044 	addi	r21,r17,1
 800c470:	8c400047 	ldb	r17,1(r17)
 800c474:	0021883a 	mov	r16,zero
 800c478:	00bfffc4 	movi	r2,-1
 800c47c:	0025883a 	mov	r18,zero
 800c480:	dc002905 	stb	r16,164(sp)
 800c484:	d8002785 	stb	zero,158(sp)
 800c488:	d8002b05 	stb	zero,172(sp)
 800c48c:	d8802a15 	stw	r2,168(sp)
 800c490:	d8003115 	stw	zero,196(sp)
 800c494:	04c01604 	movi	r19,88
 800c498:	05800244 	movi	r22,9
 800c49c:	9021883a 	mov	r16,r18
 800c4a0:	4039883a 	mov	fp,r8
 800c4a4:	ad400044 	addi	r21,r21,1
 800c4a8:	88bff804 	addi	r2,r17,-32
 800c4ac:	98833236 	bltu	r19,r2,800d178 <___vfprintf_internal_r+0xe5c>
 800c4b0:	100490ba 	slli	r2,r2,2
 800c4b4:	00c20074 	movhi	r3,2049
 800c4b8:	18f13204 	addi	r3,r3,-15160
 800c4bc:	10c5883a 	add	r2,r2,r3
 800c4c0:	10800017 	ldw	r2,0(r2)
 800c4c4:	1000683a 	jmp	r2
 800c4c8:	0800d070 	cmpltui	zero,at,833
 800c4cc:	0800d178 	rdprs	zero,at,837
 800c4d0:	0800d178 	rdprs	zero,at,837
 800c4d4:	0800d090 	cmplti	zero,at,834
 800c4d8:	0800d178 	rdprs	zero,at,837
 800c4dc:	0800d178 	rdprs	zero,at,837
 800c4e0:	0800d178 	rdprs	zero,at,837
 800c4e4:	0800d178 	rdprs	zero,at,837
 800c4e8:	0800d178 	rdprs	zero,at,837
 800c4ec:	0800d178 	rdprs	zero,at,837
 800c4f0:	0800c778 	rdprs	zero,at,797
 800c4f4:	0800cf80 	call	800cf8 <__alt_exception_stack_pointer+0x7ffcf8>
 800c4f8:	0800d178 	rdprs	zero,at,837
 800c4fc:	0800c63c 	xorhi	zero,at,792
 800c500:	0800c79c 	xori	zero,at,798
 800c504:	0800d178 	rdprs	zero,at,837
 800c508:	0800c7ec 	andhi	zero,at,799
 800c50c:	0800c7f8 	rdprs	zero,at,799
 800c510:	0800c7f8 	rdprs	zero,at,799
 800c514:	0800c7f8 	rdprs	zero,at,799
 800c518:	0800c7f8 	rdprs	zero,at,799
 800c51c:	0800c7f8 	rdprs	zero,at,799
 800c520:	0800c7f8 	rdprs	zero,at,799
 800c524:	0800c7f8 	rdprs	zero,at,799
 800c528:	0800c7f8 	rdprs	zero,at,799
 800c52c:	0800c7f8 	rdprs	zero,at,799
 800c530:	0800d178 	rdprs	zero,at,837
 800c534:	0800d178 	rdprs	zero,at,837
 800c538:	0800d178 	rdprs	zero,at,837
 800c53c:	0800d178 	rdprs	zero,at,837
 800c540:	0800d178 	rdprs	zero,at,837
 800c544:	0800d178 	rdprs	zero,at,837
 800c548:	0800d178 	rdprs	zero,at,837
 800c54c:	0800d178 	rdprs	zero,at,837
 800c550:	0800d178 	rdprs	zero,at,837
 800c554:	0800d178 	rdprs	zero,at,837
 800c558:	0800c834 	orhi	zero,at,800
 800c55c:	0800c8fc 	xorhi	zero,at,803
 800c560:	0800d178 	rdprs	zero,at,837
 800c564:	0800c8fc 	xorhi	zero,at,803
 800c568:	0800d178 	rdprs	zero,at,837
 800c56c:	0800d178 	rdprs	zero,at,837
 800c570:	0800d178 	rdprs	zero,at,837
 800c574:	0800d178 	rdprs	zero,at,837
 800c578:	0800c9a8 	cmpgeui	zero,at,806
 800c57c:	0800d178 	rdprs	zero,at,837
 800c580:	0800d178 	rdprs	zero,at,837
 800c584:	0800c9b4 	orhi	zero,at,806
 800c588:	0800d178 	rdprs	zero,at,837
 800c58c:	0800d178 	rdprs	zero,at,837
 800c590:	0800d178 	rdprs	zero,at,837
 800c594:	0800d178 	rdprs	zero,at,837
 800c598:	0800d178 	rdprs	zero,at,837
 800c59c:	0800ce38 	rdprs	zero,at,824
 800c5a0:	0800d178 	rdprs	zero,at,837
 800c5a4:	0800d178 	rdprs	zero,at,837
 800c5a8:	0800cea4 	muli	zero,at,826
 800c5ac:	0800d178 	rdprs	zero,at,837
 800c5b0:	0800d178 	rdprs	zero,at,837
 800c5b4:	0800d178 	rdprs	zero,at,837
 800c5b8:	0800d178 	rdprs	zero,at,837
 800c5bc:	0800d178 	rdprs	zero,at,837
 800c5c0:	0800d178 	rdprs	zero,at,837
 800c5c4:	0800d178 	rdprs	zero,at,837
 800c5c8:	0800d178 	rdprs	zero,at,837
 800c5cc:	0800d178 	rdprs	zero,at,837
 800c5d0:	0800d178 	rdprs	zero,at,837
 800c5d4:	0800d11c 	xori	zero,at,836
 800c5d8:	0800d09c 	xori	zero,at,834
 800c5dc:	0800c8fc 	xorhi	zero,at,803
 800c5e0:	0800c8fc 	xorhi	zero,at,803
 800c5e4:	0800c8fc 	xorhi	zero,at,803
 800c5e8:	0800d0bc 	xorhi	zero,at,834
 800c5ec:	0800d09c 	xori	zero,at,834
 800c5f0:	0800d178 	rdprs	zero,at,837
 800c5f4:	0800d178 	rdprs	zero,at,837
 800c5f8:	0800d0c8 	cmpgei	zero,at,835
 800c5fc:	0800d178 	rdprs	zero,at,837
 800c600:	0800d0dc 	xori	zero,at,835
 800c604:	0800cf60 	cmpeqi	zero,at,829
 800c608:	0800c648 	cmpgei	zero,at,793
 800c60c:	0800cf98 	cmpnei	zero,at,830
 800c610:	0800d178 	rdprs	zero,at,837
 800c614:	0800cfa4 	muli	zero,at,830
 800c618:	0800d178 	rdprs	zero,at,837
 800c61c:	0800d008 	cmpgei	zero,at,832
 800c620:	0800d178 	rdprs	zero,at,837
 800c624:	0800d178 	rdprs	zero,at,837
 800c628:	0800d028 	cmpgeui	zero,at,832
 800c62c:	d8c03117 	ldw	r3,196(sp)
 800c630:	d8802e15 	stw	r2,184(sp)
 800c634:	00c7c83a 	sub	r3,zero,r3
 800c638:	d8c03115 	stw	r3,196(sp)
 800c63c:	84000114 	ori	r16,r16,4
 800c640:	ac400007 	ldb	r17,0(r21)
 800c644:	003f9706 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c648:	00800c04 	movi	r2,48
 800c64c:	d8802705 	stb	r2,156(sp)
 800c650:	00801e04 	movi	r2,120
 800c654:	d8802745 	stb	r2,157(sp)
 800c658:	d9002a17 	ldw	r4,168(sp)
 800c65c:	d8802e17 	ldw	r2,184(sp)
 800c660:	d8002785 	stb	zero,158(sp)
 800c664:	e011883a 	mov	r8,fp
 800c668:	10c00104 	addi	r3,r2,4
 800c66c:	14c00017 	ldw	r19,0(r2)
 800c670:	002d883a 	mov	r22,zero
 800c674:	80800094 	ori	r2,r16,2
 800c678:	2002ca16 	blt	r4,zero,800d1a4 <___vfprintf_internal_r+0xe88>
 800c67c:	00bfdfc4 	movi	r2,-129
 800c680:	80a4703a 	and	r18,r16,r2
 800c684:	d8c02e15 	stw	r3,184(sp)
 800c688:	94800094 	ori	r18,r18,2
 800c68c:	9802b41e 	bne	r19,zero,800d160 <___vfprintf_internal_r+0xe44>
 800c690:	01420d74 	movhi	r5,2101
 800c694:	29614e04 	addi	r5,r5,-31432
 800c698:	d9403915 	stw	r5,228(sp)
 800c69c:	04401e04 	movi	r17,120
 800c6a0:	d8802a17 	ldw	r2,168(sp)
 800c6a4:	0039883a 	mov	fp,zero
 800c6a8:	1001fa26 	beq	r2,zero,800ce94 <___vfprintf_internal_r+0xb78>
 800c6ac:	0027883a 	mov	r19,zero
 800c6b0:	002d883a 	mov	r22,zero
 800c6b4:	00021906 	br	800cf1c <___vfprintf_internal_r+0xc00>
 800c6b8:	d9002d17 	ldw	r4,180(sp)
 800c6bc:	b80b883a 	mov	r5,r23
 800c6c0:	800e6d00 	call	800e6d0 <__swsetup_r>
 800c6c4:	1005dc1e 	bne	r2,zero,800de38 <___vfprintf_internal_r+0x1b1c>
 800c6c8:	b880030b 	ldhu	r2,12(r23)
 800c6cc:	00c00284 	movi	r3,10
 800c6d0:	1080068c 	andi	r2,r2,26
 800c6d4:	10ff3a1e 	bne	r2,r3,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c6d8:	b880038f 	ldh	r2,14(r23)
 800c6dc:	103f3816 	blt	r2,zero,800c3c0 <__alt_data_end+0xfc00c3c0>
 800c6e0:	d9c02e17 	ldw	r7,184(sp)
 800c6e4:	d9002d17 	ldw	r4,180(sp)
 800c6e8:	a80d883a 	mov	r6,r21
 800c6ec:	b80b883a 	mov	r5,r23
 800c6f0:	800e6140 	call	800e614 <__sbprintf>
 800c6f4:	00001106 	br	800c73c <___vfprintf_internal_r+0x420>
 800c6f8:	d9002d17 	ldw	r4,180(sp)
 800c6fc:	d9801e04 	addi	r6,sp,120
 800c700:	b80b883a 	mov	r5,r23
 800c704:	80139600 	call	8013960 <__sprint_r>
 800c708:	1000081e 	bne	r2,zero,800c72c <___vfprintf_internal_r+0x410>
 800c70c:	da000404 	addi	r8,sp,16
 800c710:	003f5106 	br	800c458 <__alt_data_end+0xfc00c458>
 800c714:	d8802017 	ldw	r2,128(sp)
 800c718:	10000426 	beq	r2,zero,800c72c <___vfprintf_internal_r+0x410>
 800c71c:	d9002d17 	ldw	r4,180(sp)
 800c720:	d9801e04 	addi	r6,sp,120
 800c724:	b80b883a 	mov	r5,r23
 800c728:	80139600 	call	8013960 <__sprint_r>
 800c72c:	b880030b 	ldhu	r2,12(r23)
 800c730:	1080100c 	andi	r2,r2,64
 800c734:	1005c01e 	bne	r2,zero,800de38 <___vfprintf_internal_r+0x1b1c>
 800c738:	d8802f17 	ldw	r2,188(sp)
 800c73c:	dfc04717 	ldw	ra,284(sp)
 800c740:	df004617 	ldw	fp,280(sp)
 800c744:	ddc04517 	ldw	r23,276(sp)
 800c748:	dd804417 	ldw	r22,272(sp)
 800c74c:	dd404317 	ldw	r21,268(sp)
 800c750:	dd004217 	ldw	r20,264(sp)
 800c754:	dcc04117 	ldw	r19,260(sp)
 800c758:	dc804017 	ldw	r18,256(sp)
 800c75c:	dc403f17 	ldw	r17,252(sp)
 800c760:	dc003e17 	ldw	r16,248(sp)
 800c764:	dec04804 	addi	sp,sp,288
 800c768:	f800283a 	ret
 800c76c:	d9002d17 	ldw	r4,180(sp)
 800c770:	80106dc0 	call	80106dc <__sinit>
 800c774:	003f0206 	br	800c380 <__alt_data_end+0xfc00c380>
 800c778:	d9002e17 	ldw	r4,184(sp)
 800c77c:	d9402e17 	ldw	r5,184(sp)
 800c780:	21000017 	ldw	r4,0(r4)
 800c784:	28800104 	addi	r2,r5,4
 800c788:	d9003115 	stw	r4,196(sp)
 800c78c:	203fa716 	blt	r4,zero,800c62c <__alt_data_end+0xfc00c62c>
 800c790:	d8802e15 	stw	r2,184(sp)
 800c794:	ac400007 	ldb	r17,0(r21)
 800c798:	003f4206 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c79c:	ac400007 	ldb	r17,0(r21)
 800c7a0:	01000a84 	movi	r4,42
 800c7a4:	a8c00044 	addi	r3,r21,1
 800c7a8:	89075826 	beq	r17,r4,800e50c <___vfprintf_internal_r+0x21f0>
 800c7ac:	8cbff404 	addi	r18,r17,-48
 800c7b0:	b486ae36 	bltu	r22,r18,800e26c <___vfprintf_internal_r+0x1f50>
 800c7b4:	0009883a 	mov	r4,zero
 800c7b8:	1823883a 	mov	r17,r3
 800c7bc:	01400284 	movi	r5,10
 800c7c0:	8007f540 	call	8007f54 <__mulsi3>
 800c7c4:	88c00007 	ldb	r3,0(r17)
 800c7c8:	1489883a 	add	r4,r2,r18
 800c7cc:	8d400044 	addi	r21,r17,1
 800c7d0:	1cbff404 	addi	r18,r3,-48
 800c7d4:	a823883a 	mov	r17,r21
 800c7d8:	b4bff82e 	bgeu	r22,r18,800c7bc <__alt_data_end+0xfc00c7bc>
 800c7dc:	1823883a 	mov	r17,r3
 800c7e0:	2005f616 	blt	r4,zero,800dfbc <___vfprintf_internal_r+0x1ca0>
 800c7e4:	d9002a15 	stw	r4,168(sp)
 800c7e8:	003f2f06 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800c7ec:	84002014 	ori	r16,r16,128
 800c7f0:	ac400007 	ldb	r17,0(r21)
 800c7f4:	003f2b06 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c7f8:	8cbff404 	addi	r18,r17,-48
 800c7fc:	d8003115 	stw	zero,196(sp)
 800c800:	0009883a 	mov	r4,zero
 800c804:	a823883a 	mov	r17,r21
 800c808:	01400284 	movi	r5,10
 800c80c:	8007f540 	call	8007f54 <__mulsi3>
 800c810:	88c00007 	ldb	r3,0(r17)
 800c814:	9089883a 	add	r4,r18,r2
 800c818:	ad400044 	addi	r21,r21,1
 800c81c:	1cbff404 	addi	r18,r3,-48
 800c820:	a823883a 	mov	r17,r21
 800c824:	b4bff82e 	bgeu	r22,r18,800c808 <__alt_data_end+0xfc00c808>
 800c828:	1823883a 	mov	r17,r3
 800c82c:	d9003115 	stw	r4,196(sp)
 800c830:	003f1d06 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800c834:	8025883a 	mov	r18,r16
 800c838:	dc002903 	ldbu	r16,164(sp)
 800c83c:	e011883a 	mov	r8,fp
 800c840:	84003fcc 	andi	r16,r16,255
 800c844:	8007531e 	bne	r16,zero,800e594 <___vfprintf_internal_r+0x2278>
 800c848:	94800414 	ori	r18,r18,16
 800c84c:	9080080c 	andi	r2,r18,32
 800c850:	1003a326 	beq	r2,zero,800d6e0 <___vfprintf_internal_r+0x13c4>
 800c854:	d9002e17 	ldw	r4,184(sp)
 800c858:	20800117 	ldw	r2,4(r4)
 800c85c:	24c00017 	ldw	r19,0(r4)
 800c860:	21000204 	addi	r4,r4,8
 800c864:	d9002e15 	stw	r4,184(sp)
 800c868:	102d883a 	mov	r22,r2
 800c86c:	10047316 	blt	r2,zero,800da3c <___vfprintf_internal_r+0x1720>
 800c870:	d9002a17 	ldw	r4,168(sp)
 800c874:	df002783 	ldbu	fp,158(sp)
 800c878:	2003e416 	blt	r4,zero,800d80c <___vfprintf_internal_r+0x14f0>
 800c87c:	00ffdfc4 	movi	r3,-129
 800c880:	9d84b03a 	or	r2,r19,r22
 800c884:	90e4703a 	and	r18,r18,r3
 800c888:	10018026 	beq	r2,zero,800ce8c <___vfprintf_internal_r+0xb70>
 800c88c:	b003ab26 	beq	r22,zero,800d73c <___vfprintf_internal_r+0x1420>
 800c890:	dc402915 	stw	r17,164(sp)
 800c894:	dc001e04 	addi	r16,sp,120
 800c898:	b023883a 	mov	r17,r22
 800c89c:	402d883a 	mov	r22,r8
 800c8a0:	9809883a 	mov	r4,r19
 800c8a4:	880b883a 	mov	r5,r17
 800c8a8:	01800284 	movi	r6,10
 800c8ac:	000f883a 	mov	r7,zero
 800c8b0:	80158a80 	call	80158a8 <__umoddi3>
 800c8b4:	10800c04 	addi	r2,r2,48
 800c8b8:	843fffc4 	addi	r16,r16,-1
 800c8bc:	9809883a 	mov	r4,r19
 800c8c0:	880b883a 	mov	r5,r17
 800c8c4:	80800005 	stb	r2,0(r16)
 800c8c8:	01800284 	movi	r6,10
 800c8cc:	000f883a 	mov	r7,zero
 800c8d0:	80077a40 	call	80077a4 <__udivdi3>
 800c8d4:	1027883a 	mov	r19,r2
 800c8d8:	10c4b03a 	or	r2,r2,r3
 800c8dc:	1823883a 	mov	r17,r3
 800c8e0:	103fef1e 	bne	r2,zero,800c8a0 <__alt_data_end+0xfc00c8a0>
 800c8e4:	d8c02817 	ldw	r3,160(sp)
 800c8e8:	dc402917 	ldw	r17,164(sp)
 800c8ec:	b011883a 	mov	r8,r22
 800c8f0:	1c07c83a 	sub	r3,r3,r16
 800c8f4:	d8c02b15 	stw	r3,172(sp)
 800c8f8:	00005f06 	br	800ca78 <___vfprintf_internal_r+0x75c>
 800c8fc:	8025883a 	mov	r18,r16
 800c900:	dc002903 	ldbu	r16,164(sp)
 800c904:	e011883a 	mov	r8,fp
 800c908:	84003fcc 	andi	r16,r16,255
 800c90c:	80071e1e 	bne	r16,zero,800e588 <___vfprintf_internal_r+0x226c>
 800c910:	9080020c 	andi	r2,r18,8
 800c914:	1004af26 	beq	r2,zero,800dbd4 <___vfprintf_internal_r+0x18b8>
 800c918:	d9002e17 	ldw	r4,184(sp)
 800c91c:	d9402e17 	ldw	r5,184(sp)
 800c920:	d8802e17 	ldw	r2,184(sp)
 800c924:	21000017 	ldw	r4,0(r4)
 800c928:	29400117 	ldw	r5,4(r5)
 800c92c:	10800204 	addi	r2,r2,8
 800c930:	d9003615 	stw	r4,216(sp)
 800c934:	d9403815 	stw	r5,224(sp)
 800c938:	d8802e15 	stw	r2,184(sp)
 800c93c:	d9003617 	ldw	r4,216(sp)
 800c940:	d9403817 	ldw	r5,224(sp)
 800c944:	da003d15 	stw	r8,244(sp)
 800c948:	04000044 	movi	r16,1
 800c94c:	80071b00 	call	80071b0 <__fpclassifyd>
 800c950:	da003d17 	ldw	r8,244(sp)
 800c954:	1404441e 	bne	r2,r16,800da68 <___vfprintf_internal_r+0x174c>
 800c958:	d9003617 	ldw	r4,216(sp)
 800c95c:	d9403817 	ldw	r5,224(sp)
 800c960:	000d883a 	mov	r6,zero
 800c964:	000f883a 	mov	r7,zero
 800c968:	800a8900 	call	800a890 <__ledf2>
 800c96c:	da003d17 	ldw	r8,244(sp)
 800c970:	1005e316 	blt	r2,zero,800e100 <___vfprintf_internal_r+0x1de4>
 800c974:	df002783 	ldbu	fp,158(sp)
 800c978:	008011c4 	movi	r2,71
 800c97c:	1445580e 	bge	r2,r17,800dee0 <___vfprintf_internal_r+0x1bc4>
 800c980:	04020d74 	movhi	r16,2101
 800c984:	84214604 	addi	r16,r16,-31464
 800c988:	00c000c4 	movi	r3,3
 800c98c:	00bfdfc4 	movi	r2,-129
 800c990:	d8c02915 	stw	r3,164(sp)
 800c994:	90a4703a 	and	r18,r18,r2
 800c998:	d8c02b15 	stw	r3,172(sp)
 800c99c:	d8002a15 	stw	zero,168(sp)
 800c9a0:	d8003215 	stw	zero,200(sp)
 800c9a4:	00003a06 	br	800ca90 <___vfprintf_internal_r+0x774>
 800c9a8:	84000214 	ori	r16,r16,8
 800c9ac:	ac400007 	ldb	r17,0(r21)
 800c9b0:	003ebc06 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800c9b4:	8025883a 	mov	r18,r16
 800c9b8:	dc002903 	ldbu	r16,164(sp)
 800c9bc:	e011883a 	mov	r8,fp
 800c9c0:	84003fcc 	andi	r16,r16,255
 800c9c4:	8007001e 	bne	r16,zero,800e5c8 <___vfprintf_internal_r+0x22ac>
 800c9c8:	94800414 	ori	r18,r18,16
 800c9cc:	9080080c 	andi	r2,r18,32
 800c9d0:	1002fa26 	beq	r2,zero,800d5bc <___vfprintf_internal_r+0x12a0>
 800c9d4:	d9002e17 	ldw	r4,184(sp)
 800c9d8:	d9402a17 	ldw	r5,168(sp)
 800c9dc:	d8002785 	stb	zero,158(sp)
 800c9e0:	20800204 	addi	r2,r4,8
 800c9e4:	24c00017 	ldw	r19,0(r4)
 800c9e8:	25800117 	ldw	r22,4(r4)
 800c9ec:	2804b116 	blt	r5,zero,800dcb4 <___vfprintf_internal_r+0x1998>
 800c9f0:	013fdfc4 	movi	r4,-129
 800c9f4:	9d86b03a 	or	r3,r19,r22
 800c9f8:	d8802e15 	stw	r2,184(sp)
 800c9fc:	9124703a 	and	r18,r18,r4
 800ca00:	1802fb1e 	bne	r3,zero,800d5f0 <___vfprintf_internal_r+0x12d4>
 800ca04:	d8c02a17 	ldw	r3,168(sp)
 800ca08:	0039883a 	mov	fp,zero
 800ca0c:	1805e526 	beq	r3,zero,800e1a4 <___vfprintf_internal_r+0x1e88>
 800ca10:	0027883a 	mov	r19,zero
 800ca14:	002d883a 	mov	r22,zero
 800ca18:	dc001e04 	addi	r16,sp,120
 800ca1c:	9806d0fa 	srli	r3,r19,3
 800ca20:	b008977a 	slli	r4,r22,29
 800ca24:	b02cd0fa 	srli	r22,r22,3
 800ca28:	9cc001cc 	andi	r19,r19,7
 800ca2c:	98800c04 	addi	r2,r19,48
 800ca30:	843fffc4 	addi	r16,r16,-1
 800ca34:	20e6b03a 	or	r19,r4,r3
 800ca38:	80800005 	stb	r2,0(r16)
 800ca3c:	9d86b03a 	or	r3,r19,r22
 800ca40:	183ff61e 	bne	r3,zero,800ca1c <__alt_data_end+0xfc00ca1c>
 800ca44:	90c0004c 	andi	r3,r18,1
 800ca48:	18014126 	beq	r3,zero,800cf50 <___vfprintf_internal_r+0xc34>
 800ca4c:	10803fcc 	andi	r2,r2,255
 800ca50:	1080201c 	xori	r2,r2,128
 800ca54:	10bfe004 	addi	r2,r2,-128
 800ca58:	00c00c04 	movi	r3,48
 800ca5c:	10c13c26 	beq	r2,r3,800cf50 <___vfprintf_internal_r+0xc34>
 800ca60:	80ffffc5 	stb	r3,-1(r16)
 800ca64:	d8c02817 	ldw	r3,160(sp)
 800ca68:	80bfffc4 	addi	r2,r16,-1
 800ca6c:	1021883a 	mov	r16,r2
 800ca70:	1887c83a 	sub	r3,r3,r2
 800ca74:	d8c02b15 	stw	r3,172(sp)
 800ca78:	d8802b17 	ldw	r2,172(sp)
 800ca7c:	d9002a17 	ldw	r4,168(sp)
 800ca80:	1100010e 	bge	r2,r4,800ca88 <___vfprintf_internal_r+0x76c>
 800ca84:	2005883a 	mov	r2,r4
 800ca88:	d8802915 	stw	r2,164(sp)
 800ca8c:	d8003215 	stw	zero,200(sp)
 800ca90:	e7003fcc 	andi	fp,fp,255
 800ca94:	e700201c 	xori	fp,fp,128
 800ca98:	e73fe004 	addi	fp,fp,-128
 800ca9c:	e0000326 	beq	fp,zero,800caac <___vfprintf_internal_r+0x790>
 800caa0:	d8c02917 	ldw	r3,164(sp)
 800caa4:	18c00044 	addi	r3,r3,1
 800caa8:	d8c02915 	stw	r3,164(sp)
 800caac:	90c0008c 	andi	r3,r18,2
 800cab0:	d8c02c15 	stw	r3,176(sp)
 800cab4:	18000326 	beq	r3,zero,800cac4 <___vfprintf_internal_r+0x7a8>
 800cab8:	d8c02917 	ldw	r3,164(sp)
 800cabc:	18c00084 	addi	r3,r3,2
 800cac0:	d8c02915 	stw	r3,164(sp)
 800cac4:	90c0210c 	andi	r3,r18,132
 800cac8:	d8c03015 	stw	r3,192(sp)
 800cacc:	1801c51e 	bne	r3,zero,800d1e4 <___vfprintf_internal_r+0xec8>
 800cad0:	d9003117 	ldw	r4,196(sp)
 800cad4:	d8c02917 	ldw	r3,164(sp)
 800cad8:	20e7c83a 	sub	r19,r4,r3
 800cadc:	04c1c10e 	bge	zero,r19,800d1e4 <___vfprintf_internal_r+0xec8>
 800cae0:	02400404 	movi	r9,16
 800cae4:	d8c02017 	ldw	r3,128(sp)
 800cae8:	d8801f17 	ldw	r2,124(sp)
 800caec:	4cc52f0e 	bge	r9,r19,800dfac <___vfprintf_internal_r+0x1c90>
 800caf0:	01420d74 	movhi	r5,2101
 800caf4:	29615984 	addi	r5,r5,-31386
 800caf8:	dc403b15 	stw	r17,236(sp)
 800cafc:	d9403515 	stw	r5,212(sp)
 800cb00:	9823883a 	mov	r17,r19
 800cb04:	482d883a 	mov	r22,r9
 800cb08:	9027883a 	mov	r19,r18
 800cb0c:	070001c4 	movi	fp,7
 800cb10:	8025883a 	mov	r18,r16
 800cb14:	dc002d17 	ldw	r16,180(sp)
 800cb18:	00000306 	br	800cb28 <___vfprintf_internal_r+0x80c>
 800cb1c:	8c7ffc04 	addi	r17,r17,-16
 800cb20:	42000204 	addi	r8,r8,8
 800cb24:	b440130e 	bge	r22,r17,800cb74 <___vfprintf_internal_r+0x858>
 800cb28:	01020d74 	movhi	r4,2101
 800cb2c:	18c00404 	addi	r3,r3,16
 800cb30:	10800044 	addi	r2,r2,1
 800cb34:	21215984 	addi	r4,r4,-31386
 800cb38:	41000015 	stw	r4,0(r8)
 800cb3c:	45800115 	stw	r22,4(r8)
 800cb40:	d8c02015 	stw	r3,128(sp)
 800cb44:	d8801f15 	stw	r2,124(sp)
 800cb48:	e0bff40e 	bge	fp,r2,800cb1c <__alt_data_end+0xfc00cb1c>
 800cb4c:	d9801e04 	addi	r6,sp,120
 800cb50:	b80b883a 	mov	r5,r23
 800cb54:	8009883a 	mov	r4,r16
 800cb58:	80139600 	call	8013960 <__sprint_r>
 800cb5c:	103ef31e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800cb60:	8c7ffc04 	addi	r17,r17,-16
 800cb64:	d8c02017 	ldw	r3,128(sp)
 800cb68:	d8801f17 	ldw	r2,124(sp)
 800cb6c:	da000404 	addi	r8,sp,16
 800cb70:	b47fed16 	blt	r22,r17,800cb28 <__alt_data_end+0xfc00cb28>
 800cb74:	9021883a 	mov	r16,r18
 800cb78:	9825883a 	mov	r18,r19
 800cb7c:	8827883a 	mov	r19,r17
 800cb80:	dc403b17 	ldw	r17,236(sp)
 800cb84:	d9403517 	ldw	r5,212(sp)
 800cb88:	98c7883a 	add	r3,r19,r3
 800cb8c:	10800044 	addi	r2,r2,1
 800cb90:	41400015 	stw	r5,0(r8)
 800cb94:	44c00115 	stw	r19,4(r8)
 800cb98:	d8c02015 	stw	r3,128(sp)
 800cb9c:	d8801f15 	stw	r2,124(sp)
 800cba0:	010001c4 	movi	r4,7
 800cba4:	2082c516 	blt	r4,r2,800d6bc <___vfprintf_internal_r+0x13a0>
 800cba8:	df002787 	ldb	fp,158(sp)
 800cbac:	42000204 	addi	r8,r8,8
 800cbb0:	e0000c26 	beq	fp,zero,800cbe4 <___vfprintf_internal_r+0x8c8>
 800cbb4:	d8801f17 	ldw	r2,124(sp)
 800cbb8:	d9002784 	addi	r4,sp,158
 800cbbc:	18c00044 	addi	r3,r3,1
 800cbc0:	10800044 	addi	r2,r2,1
 800cbc4:	41000015 	stw	r4,0(r8)
 800cbc8:	01000044 	movi	r4,1
 800cbcc:	41000115 	stw	r4,4(r8)
 800cbd0:	d8c02015 	stw	r3,128(sp)
 800cbd4:	d8801f15 	stw	r2,124(sp)
 800cbd8:	010001c4 	movi	r4,7
 800cbdc:	20825e16 	blt	r4,r2,800d558 <___vfprintf_internal_r+0x123c>
 800cbe0:	42000204 	addi	r8,r8,8
 800cbe4:	d8802c17 	ldw	r2,176(sp)
 800cbe8:	10000c26 	beq	r2,zero,800cc1c <___vfprintf_internal_r+0x900>
 800cbec:	d8801f17 	ldw	r2,124(sp)
 800cbf0:	d9002704 	addi	r4,sp,156
 800cbf4:	18c00084 	addi	r3,r3,2
 800cbf8:	10800044 	addi	r2,r2,1
 800cbfc:	41000015 	stw	r4,0(r8)
 800cc00:	01000084 	movi	r4,2
 800cc04:	41000115 	stw	r4,4(r8)
 800cc08:	d8c02015 	stw	r3,128(sp)
 800cc0c:	d8801f15 	stw	r2,124(sp)
 800cc10:	010001c4 	movi	r4,7
 800cc14:	20825816 	blt	r4,r2,800d578 <___vfprintf_internal_r+0x125c>
 800cc18:	42000204 	addi	r8,r8,8
 800cc1c:	d9003017 	ldw	r4,192(sp)
 800cc20:	00802004 	movi	r2,128
 800cc24:	2081bb26 	beq	r4,r2,800d314 <___vfprintf_internal_r+0xff8>
 800cc28:	d9402a17 	ldw	r5,168(sp)
 800cc2c:	d8802b17 	ldw	r2,172(sp)
 800cc30:	28adc83a 	sub	r22,r5,r2
 800cc34:	0580310e 	bge	zero,r22,800ccfc <___vfprintf_internal_r+0x9e0>
 800cc38:	07000404 	movi	fp,16
 800cc3c:	d8801f17 	ldw	r2,124(sp)
 800cc40:	e584360e 	bge	fp,r22,800dd1c <___vfprintf_internal_r+0x1a00>
 800cc44:	01420d74 	movhi	r5,2101
 800cc48:	29615584 	addi	r5,r5,-31402
 800cc4c:	dc402a15 	stw	r17,168(sp)
 800cc50:	d9402c15 	stw	r5,176(sp)
 800cc54:	b023883a 	mov	r17,r22
 800cc58:	04c001c4 	movi	r19,7
 800cc5c:	a82d883a 	mov	r22,r21
 800cc60:	902b883a 	mov	r21,r18
 800cc64:	8025883a 	mov	r18,r16
 800cc68:	dc002d17 	ldw	r16,180(sp)
 800cc6c:	00000306 	br	800cc7c <___vfprintf_internal_r+0x960>
 800cc70:	8c7ffc04 	addi	r17,r17,-16
 800cc74:	42000204 	addi	r8,r8,8
 800cc78:	e440110e 	bge	fp,r17,800ccc0 <___vfprintf_internal_r+0x9a4>
 800cc7c:	18c00404 	addi	r3,r3,16
 800cc80:	10800044 	addi	r2,r2,1
 800cc84:	45000015 	stw	r20,0(r8)
 800cc88:	47000115 	stw	fp,4(r8)
 800cc8c:	d8c02015 	stw	r3,128(sp)
 800cc90:	d8801f15 	stw	r2,124(sp)
 800cc94:	98bff60e 	bge	r19,r2,800cc70 <__alt_data_end+0xfc00cc70>
 800cc98:	d9801e04 	addi	r6,sp,120
 800cc9c:	b80b883a 	mov	r5,r23
 800cca0:	8009883a 	mov	r4,r16
 800cca4:	80139600 	call	8013960 <__sprint_r>
 800cca8:	103ea01e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800ccac:	8c7ffc04 	addi	r17,r17,-16
 800ccb0:	d8c02017 	ldw	r3,128(sp)
 800ccb4:	d8801f17 	ldw	r2,124(sp)
 800ccb8:	da000404 	addi	r8,sp,16
 800ccbc:	e47fef16 	blt	fp,r17,800cc7c <__alt_data_end+0xfc00cc7c>
 800ccc0:	9021883a 	mov	r16,r18
 800ccc4:	a825883a 	mov	r18,r21
 800ccc8:	b02b883a 	mov	r21,r22
 800cccc:	882d883a 	mov	r22,r17
 800ccd0:	dc402a17 	ldw	r17,168(sp)
 800ccd4:	d9002c17 	ldw	r4,176(sp)
 800ccd8:	1d87883a 	add	r3,r3,r22
 800ccdc:	10800044 	addi	r2,r2,1
 800cce0:	41000015 	stw	r4,0(r8)
 800cce4:	45800115 	stw	r22,4(r8)
 800cce8:	d8c02015 	stw	r3,128(sp)
 800ccec:	d8801f15 	stw	r2,124(sp)
 800ccf0:	010001c4 	movi	r4,7
 800ccf4:	20821016 	blt	r4,r2,800d538 <___vfprintf_internal_r+0x121c>
 800ccf8:	42000204 	addi	r8,r8,8
 800ccfc:	9080400c 	andi	r2,r18,256
 800cd00:	10013a1e 	bne	r2,zero,800d1ec <___vfprintf_internal_r+0xed0>
 800cd04:	d9402b17 	ldw	r5,172(sp)
 800cd08:	d8801f17 	ldw	r2,124(sp)
 800cd0c:	44000015 	stw	r16,0(r8)
 800cd10:	1947883a 	add	r3,r3,r5
 800cd14:	10800044 	addi	r2,r2,1
 800cd18:	41400115 	stw	r5,4(r8)
 800cd1c:	d8c02015 	stw	r3,128(sp)
 800cd20:	d8801f15 	stw	r2,124(sp)
 800cd24:	010001c4 	movi	r4,7
 800cd28:	2081f516 	blt	r4,r2,800d500 <___vfprintf_internal_r+0x11e4>
 800cd2c:	42000204 	addi	r8,r8,8
 800cd30:	9480010c 	andi	r18,r18,4
 800cd34:	90003226 	beq	r18,zero,800ce00 <___vfprintf_internal_r+0xae4>
 800cd38:	d9403117 	ldw	r5,196(sp)
 800cd3c:	d8802917 	ldw	r2,164(sp)
 800cd40:	28a1c83a 	sub	r16,r5,r2
 800cd44:	04002e0e 	bge	zero,r16,800ce00 <___vfprintf_internal_r+0xae4>
 800cd48:	04400404 	movi	r17,16
 800cd4c:	d8801f17 	ldw	r2,124(sp)
 800cd50:	8c04c40e 	bge	r17,r16,800e064 <___vfprintf_internal_r+0x1d48>
 800cd54:	01420d74 	movhi	r5,2101
 800cd58:	29615984 	addi	r5,r5,-31386
 800cd5c:	d9403515 	stw	r5,212(sp)
 800cd60:	048001c4 	movi	r18,7
 800cd64:	dcc02d17 	ldw	r19,180(sp)
 800cd68:	00000306 	br	800cd78 <___vfprintf_internal_r+0xa5c>
 800cd6c:	843ffc04 	addi	r16,r16,-16
 800cd70:	42000204 	addi	r8,r8,8
 800cd74:	8c00130e 	bge	r17,r16,800cdc4 <___vfprintf_internal_r+0xaa8>
 800cd78:	01020d74 	movhi	r4,2101
 800cd7c:	18c00404 	addi	r3,r3,16
 800cd80:	10800044 	addi	r2,r2,1
 800cd84:	21215984 	addi	r4,r4,-31386
 800cd88:	41000015 	stw	r4,0(r8)
 800cd8c:	44400115 	stw	r17,4(r8)
 800cd90:	d8c02015 	stw	r3,128(sp)
 800cd94:	d8801f15 	stw	r2,124(sp)
 800cd98:	90bff40e 	bge	r18,r2,800cd6c <__alt_data_end+0xfc00cd6c>
 800cd9c:	d9801e04 	addi	r6,sp,120
 800cda0:	b80b883a 	mov	r5,r23
 800cda4:	9809883a 	mov	r4,r19
 800cda8:	80139600 	call	8013960 <__sprint_r>
 800cdac:	103e5f1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800cdb0:	843ffc04 	addi	r16,r16,-16
 800cdb4:	d8c02017 	ldw	r3,128(sp)
 800cdb8:	d8801f17 	ldw	r2,124(sp)
 800cdbc:	da000404 	addi	r8,sp,16
 800cdc0:	8c3fed16 	blt	r17,r16,800cd78 <__alt_data_end+0xfc00cd78>
 800cdc4:	d9403517 	ldw	r5,212(sp)
 800cdc8:	1c07883a 	add	r3,r3,r16
 800cdcc:	10800044 	addi	r2,r2,1
 800cdd0:	41400015 	stw	r5,0(r8)
 800cdd4:	44000115 	stw	r16,4(r8)
 800cdd8:	d8c02015 	stw	r3,128(sp)
 800cddc:	d8801f15 	stw	r2,124(sp)
 800cde0:	010001c4 	movi	r4,7
 800cde4:	2080060e 	bge	r4,r2,800ce00 <___vfprintf_internal_r+0xae4>
 800cde8:	d9002d17 	ldw	r4,180(sp)
 800cdec:	d9801e04 	addi	r6,sp,120
 800cdf0:	b80b883a 	mov	r5,r23
 800cdf4:	80139600 	call	8013960 <__sprint_r>
 800cdf8:	103e4c1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800cdfc:	d8c02017 	ldw	r3,128(sp)
 800ce00:	d8803117 	ldw	r2,196(sp)
 800ce04:	d9002917 	ldw	r4,164(sp)
 800ce08:	1100010e 	bge	r2,r4,800ce10 <___vfprintf_internal_r+0xaf4>
 800ce0c:	2005883a 	mov	r2,r4
 800ce10:	d9402f17 	ldw	r5,188(sp)
 800ce14:	288b883a 	add	r5,r5,r2
 800ce18:	d9402f15 	stw	r5,188(sp)
 800ce1c:	1801c01e 	bne	r3,zero,800d520 <___vfprintf_internal_r+0x1204>
 800ce20:	a8800007 	ldb	r2,0(r21)
 800ce24:	d8001f15 	stw	zero,124(sp)
 800ce28:	da000404 	addi	r8,sp,16
 800ce2c:	103d751e 	bne	r2,zero,800c404 <__alt_data_end+0xfc00c404>
 800ce30:	a823883a 	mov	r17,r21
 800ce34:	003d8b06 	br	800c464 <__alt_data_end+0xfc00c464>
 800ce38:	8025883a 	mov	r18,r16
 800ce3c:	dc002903 	ldbu	r16,164(sp)
 800ce40:	e011883a 	mov	r8,fp
 800ce44:	84003fcc 	andi	r16,r16,255
 800ce48:	8005e51e 	bne	r16,zero,800e5e0 <___vfprintf_internal_r+0x22c4>
 800ce4c:	94800414 	ori	r18,r18,16
 800ce50:	9080080c 	andi	r2,r18,32
 800ce54:	10022b26 	beq	r2,zero,800d704 <___vfprintf_internal_r+0x13e8>
 800ce58:	d9002e17 	ldw	r4,184(sp)
 800ce5c:	d9402a17 	ldw	r5,168(sp)
 800ce60:	d8002785 	stb	zero,158(sp)
 800ce64:	20c00204 	addi	r3,r4,8
 800ce68:	24c00017 	ldw	r19,0(r4)
 800ce6c:	25800117 	ldw	r22,4(r4)
 800ce70:	28042e16 	blt	r5,zero,800df2c <___vfprintf_internal_r+0x1c10>
 800ce74:	013fdfc4 	movi	r4,-129
 800ce78:	9d84b03a 	or	r2,r19,r22
 800ce7c:	d8c02e15 	stw	r3,184(sp)
 800ce80:	9124703a 	and	r18,r18,r4
 800ce84:	0039883a 	mov	fp,zero
 800ce88:	103e801e 	bne	r2,zero,800c88c <__alt_data_end+0xfc00c88c>
 800ce8c:	d9002a17 	ldw	r4,168(sp)
 800ce90:	2002e01e 	bne	r4,zero,800da14 <___vfprintf_internal_r+0x16f8>
 800ce94:	d8002a15 	stw	zero,168(sp)
 800ce98:	d8002b15 	stw	zero,172(sp)
 800ce9c:	dc001e04 	addi	r16,sp,120
 800cea0:	003ef506 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800cea4:	8025883a 	mov	r18,r16
 800cea8:	dc002903 	ldbu	r16,164(sp)
 800ceac:	e011883a 	mov	r8,fp
 800ceb0:	84003fcc 	andi	r16,r16,255
 800ceb4:	8005ba1e 	bne	r16,zero,800e5a0 <___vfprintf_internal_r+0x2284>
 800ceb8:	01020d74 	movhi	r4,2101
 800cebc:	21214904 	addi	r4,r4,-31452
 800cec0:	d9003915 	stw	r4,228(sp)
 800cec4:	9080080c 	andi	r2,r18,32
 800cec8:	10006126 	beq	r2,zero,800d050 <___vfprintf_internal_r+0xd34>
 800cecc:	d9402e17 	ldw	r5,184(sp)
 800ced0:	2cc00017 	ldw	r19,0(r5)
 800ced4:	2d800117 	ldw	r22,4(r5)
 800ced8:	29400204 	addi	r5,r5,8
 800cedc:	d9402e15 	stw	r5,184(sp)
 800cee0:	9080004c 	andi	r2,r18,1
 800cee4:	1001ac26 	beq	r2,zero,800d598 <___vfprintf_internal_r+0x127c>
 800cee8:	9d84b03a 	or	r2,r19,r22
 800ceec:	10038526 	beq	r2,zero,800dd04 <___vfprintf_internal_r+0x19e8>
 800cef0:	d8c02a17 	ldw	r3,168(sp)
 800cef4:	00800c04 	movi	r2,48
 800cef8:	d8802705 	stb	r2,156(sp)
 800cefc:	dc402745 	stb	r17,157(sp)
 800cf00:	d8002785 	stb	zero,158(sp)
 800cf04:	90800094 	ori	r2,r18,2
 800cf08:	18047916 	blt	r3,zero,800e0f0 <___vfprintf_internal_r+0x1dd4>
 800cf0c:	00bfdfc4 	movi	r2,-129
 800cf10:	90a4703a 	and	r18,r18,r2
 800cf14:	94800094 	ori	r18,r18,2
 800cf18:	0039883a 	mov	fp,zero
 800cf1c:	d9003917 	ldw	r4,228(sp)
 800cf20:	dc001e04 	addi	r16,sp,120
 800cf24:	988003cc 	andi	r2,r19,15
 800cf28:	b006973a 	slli	r3,r22,28
 800cf2c:	2085883a 	add	r2,r4,r2
 800cf30:	9826d13a 	srli	r19,r19,4
 800cf34:	10800003 	ldbu	r2,0(r2)
 800cf38:	b02cd13a 	srli	r22,r22,4
 800cf3c:	843fffc4 	addi	r16,r16,-1
 800cf40:	1ce6b03a 	or	r19,r3,r19
 800cf44:	80800005 	stb	r2,0(r16)
 800cf48:	9d84b03a 	or	r2,r19,r22
 800cf4c:	103ff51e 	bne	r2,zero,800cf24 <__alt_data_end+0xfc00cf24>
 800cf50:	d8c02817 	ldw	r3,160(sp)
 800cf54:	1c07c83a 	sub	r3,r3,r16
 800cf58:	d8c02b15 	stw	r3,172(sp)
 800cf5c:	003ec606 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800cf60:	8025883a 	mov	r18,r16
 800cf64:	dc002903 	ldbu	r16,164(sp)
 800cf68:	e011883a 	mov	r8,fp
 800cf6c:	84003fcc 	andi	r16,r16,255
 800cf70:	803e9626 	beq	r16,zero,800c9cc <__alt_data_end+0xfc00c9cc>
 800cf74:	d8c02b03 	ldbu	r3,172(sp)
 800cf78:	d8c02785 	stb	r3,158(sp)
 800cf7c:	003e9306 	br	800c9cc <__alt_data_end+0xfc00c9cc>
 800cf80:	00c00044 	movi	r3,1
 800cf84:	d8c02905 	stb	r3,164(sp)
 800cf88:	00c00ac4 	movi	r3,43
 800cf8c:	d8c02b05 	stb	r3,172(sp)
 800cf90:	ac400007 	ldb	r17,0(r21)
 800cf94:	003d4306 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800cf98:	84000814 	ori	r16,r16,32
 800cf9c:	ac400007 	ldb	r17,0(r21)
 800cfa0:	003d4006 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800cfa4:	d8802e17 	ldw	r2,184(sp)
 800cfa8:	8025883a 	mov	r18,r16
 800cfac:	d8002785 	stb	zero,158(sp)
 800cfb0:	14000017 	ldw	r16,0(r2)
 800cfb4:	e011883a 	mov	r8,fp
 800cfb8:	14c00104 	addi	r19,r2,4
 800cfbc:	80042d26 	beq	r16,zero,800e074 <___vfprintf_internal_r+0x1d58>
 800cfc0:	d8c02a17 	ldw	r3,168(sp)
 800cfc4:	1803e416 	blt	r3,zero,800df58 <___vfprintf_internal_r+0x1c3c>
 800cfc8:	180d883a 	mov	r6,r3
 800cfcc:	000b883a 	mov	r5,zero
 800cfd0:	8009883a 	mov	r4,r16
 800cfd4:	df003d15 	stw	fp,244(sp)
 800cfd8:	8011c540 	call	8011c54 <memchr>
 800cfdc:	da003d17 	ldw	r8,244(sp)
 800cfe0:	10046826 	beq	r2,zero,800e184 <___vfprintf_internal_r+0x1e68>
 800cfe4:	1405c83a 	sub	r2,r2,r16
 800cfe8:	d8802b15 	stw	r2,172(sp)
 800cfec:	1003e016 	blt	r2,zero,800df70 <___vfprintf_internal_r+0x1c54>
 800cff0:	df002783 	ldbu	fp,158(sp)
 800cff4:	d8802915 	stw	r2,164(sp)
 800cff8:	dcc02e15 	stw	r19,184(sp)
 800cffc:	d8002a15 	stw	zero,168(sp)
 800d000:	d8003215 	stw	zero,200(sp)
 800d004:	003ea206 	br	800ca90 <__alt_data_end+0xfc00ca90>
 800d008:	8025883a 	mov	r18,r16
 800d00c:	dc002903 	ldbu	r16,164(sp)
 800d010:	e011883a 	mov	r8,fp
 800d014:	84003fcc 	andi	r16,r16,255
 800d018:	803f8d26 	beq	r16,zero,800ce50 <__alt_data_end+0xfc00ce50>
 800d01c:	d8c02b03 	ldbu	r3,172(sp)
 800d020:	d8c02785 	stb	r3,158(sp)
 800d024:	003f8a06 	br	800ce50 <__alt_data_end+0xfc00ce50>
 800d028:	8025883a 	mov	r18,r16
 800d02c:	dc002903 	ldbu	r16,164(sp)
 800d030:	e011883a 	mov	r8,fp
 800d034:	84003fcc 	andi	r16,r16,255
 800d038:	8005661e 	bne	r16,zero,800e5d4 <___vfprintf_internal_r+0x22b8>
 800d03c:	01020d74 	movhi	r4,2101
 800d040:	21214e04 	addi	r4,r4,-31432
 800d044:	d9003915 	stw	r4,228(sp)
 800d048:	9080080c 	andi	r2,r18,32
 800d04c:	103f9f1e 	bne	r2,zero,800cecc <__alt_data_end+0xfc00cecc>
 800d050:	9080040c 	andi	r2,r18,16
 800d054:	1002eb26 	beq	r2,zero,800dc04 <___vfprintf_internal_r+0x18e8>
 800d058:	d8802e17 	ldw	r2,184(sp)
 800d05c:	002d883a 	mov	r22,zero
 800d060:	14c00017 	ldw	r19,0(r2)
 800d064:	10800104 	addi	r2,r2,4
 800d068:	d8802e15 	stw	r2,184(sp)
 800d06c:	003f9c06 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800d070:	d8802b07 	ldb	r2,172(sp)
 800d074:	1002e11e 	bne	r2,zero,800dbfc <___vfprintf_internal_r+0x18e0>
 800d078:	00c00044 	movi	r3,1
 800d07c:	d8c02905 	stb	r3,164(sp)
 800d080:	00c00804 	movi	r3,32
 800d084:	d8c02b05 	stb	r3,172(sp)
 800d088:	ac400007 	ldb	r17,0(r21)
 800d08c:	003d0506 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800d090:	84000054 	ori	r16,r16,1
 800d094:	ac400007 	ldb	r17,0(r21)
 800d098:	003d0206 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800d09c:	8025883a 	mov	r18,r16
 800d0a0:	dc002903 	ldbu	r16,164(sp)
 800d0a4:	e011883a 	mov	r8,fp
 800d0a8:	84003fcc 	andi	r16,r16,255
 800d0ac:	803de726 	beq	r16,zero,800c84c <__alt_data_end+0xfc00c84c>
 800d0b0:	d8c02b03 	ldbu	r3,172(sp)
 800d0b4:	d8c02785 	stb	r3,158(sp)
 800d0b8:	003de406 	br	800c84c <__alt_data_end+0xfc00c84c>
 800d0bc:	84001014 	ori	r16,r16,64
 800d0c0:	ac400007 	ldb	r17,0(r21)
 800d0c4:	003cf706 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800d0c8:	ac400007 	ldb	r17,0(r21)
 800d0cc:	00801b04 	movi	r2,108
 800d0d0:	88838f26 	beq	r17,r2,800df10 <___vfprintf_internal_r+0x1bf4>
 800d0d4:	84000414 	ori	r16,r16,16
 800d0d8:	003cf206 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800d0dc:	8025883a 	mov	r18,r16
 800d0e0:	dc002903 	ldbu	r16,164(sp)
 800d0e4:	e011883a 	mov	r8,fp
 800d0e8:	84003fcc 	andi	r16,r16,255
 800d0ec:	80053f1e 	bne	r16,zero,800e5ec <___vfprintf_internal_r+0x22d0>
 800d0f0:	9080080c 	andi	r2,r18,32
 800d0f4:	1002d226 	beq	r2,zero,800dc40 <___vfprintf_internal_r+0x1924>
 800d0f8:	d9002e17 	ldw	r4,184(sp)
 800d0fc:	d9402f17 	ldw	r5,188(sp)
 800d100:	20800017 	ldw	r2,0(r4)
 800d104:	2807d7fa 	srai	r3,r5,31
 800d108:	21000104 	addi	r4,r4,4
 800d10c:	d9002e15 	stw	r4,184(sp)
 800d110:	11400015 	stw	r5,0(r2)
 800d114:	10c00115 	stw	r3,4(r2)
 800d118:	003cb806 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800d11c:	d8c02e17 	ldw	r3,184(sp)
 800d120:	d9002e17 	ldw	r4,184(sp)
 800d124:	8025883a 	mov	r18,r16
 800d128:	18800017 	ldw	r2,0(r3)
 800d12c:	21000104 	addi	r4,r4,4
 800d130:	00c00044 	movi	r3,1
 800d134:	e011883a 	mov	r8,fp
 800d138:	d8c02915 	stw	r3,164(sp)
 800d13c:	d8002785 	stb	zero,158(sp)
 800d140:	d8801405 	stb	r2,80(sp)
 800d144:	d9002e15 	stw	r4,184(sp)
 800d148:	d8c02b15 	stw	r3,172(sp)
 800d14c:	d8002a15 	stw	zero,168(sp)
 800d150:	d8003215 	stw	zero,200(sp)
 800d154:	dc001404 	addi	r16,sp,80
 800d158:	0039883a 	mov	fp,zero
 800d15c:	003e5306 	br	800caac <__alt_data_end+0xfc00caac>
 800d160:	01020d74 	movhi	r4,2101
 800d164:	21214e04 	addi	r4,r4,-31432
 800d168:	0039883a 	mov	fp,zero
 800d16c:	d9003915 	stw	r4,228(sp)
 800d170:	04401e04 	movi	r17,120
 800d174:	003f6906 	br	800cf1c <__alt_data_end+0xfc00cf1c>
 800d178:	8025883a 	mov	r18,r16
 800d17c:	dc002903 	ldbu	r16,164(sp)
 800d180:	e011883a 	mov	r8,fp
 800d184:	84003fcc 	andi	r16,r16,255
 800d188:	8005081e 	bne	r16,zero,800e5ac <___vfprintf_internal_r+0x2290>
 800d18c:	883d6126 	beq	r17,zero,800c714 <__alt_data_end+0xfc00c714>
 800d190:	00c00044 	movi	r3,1
 800d194:	d8c02915 	stw	r3,164(sp)
 800d198:	dc401405 	stb	r17,80(sp)
 800d19c:	d8002785 	stb	zero,158(sp)
 800d1a0:	003fe906 	br	800d148 <__alt_data_end+0xfc00d148>
 800d1a4:	01420d74 	movhi	r5,2101
 800d1a8:	29614e04 	addi	r5,r5,-31432
 800d1ac:	d9403915 	stw	r5,228(sp)
 800d1b0:	d8c02e15 	stw	r3,184(sp)
 800d1b4:	1025883a 	mov	r18,r2
 800d1b8:	04401e04 	movi	r17,120
 800d1bc:	9d84b03a 	or	r2,r19,r22
 800d1c0:	1000fc1e 	bne	r2,zero,800d5b4 <___vfprintf_internal_r+0x1298>
 800d1c4:	0039883a 	mov	fp,zero
 800d1c8:	00800084 	movi	r2,2
 800d1cc:	10803fcc 	andi	r2,r2,255
 800d1d0:	00c00044 	movi	r3,1
 800d1d4:	10c20f26 	beq	r2,r3,800da14 <___vfprintf_internal_r+0x16f8>
 800d1d8:	00c00084 	movi	r3,2
 800d1dc:	10fd3326 	beq	r2,r3,800c6ac <__alt_data_end+0xfc00c6ac>
 800d1e0:	003e0b06 	br	800ca10 <__alt_data_end+0xfc00ca10>
 800d1e4:	d8c02017 	ldw	r3,128(sp)
 800d1e8:	003e7106 	br	800cbb0 <__alt_data_end+0xfc00cbb0>
 800d1ec:	00801944 	movi	r2,101
 800d1f0:	14407e0e 	bge	r2,r17,800d3ec <___vfprintf_internal_r+0x10d0>
 800d1f4:	d9003617 	ldw	r4,216(sp)
 800d1f8:	d9403817 	ldw	r5,224(sp)
 800d1fc:	000d883a 	mov	r6,zero
 800d200:	000f883a 	mov	r7,zero
 800d204:	d8c03c15 	stw	r3,240(sp)
 800d208:	da003d15 	stw	r8,244(sp)
 800d20c:	800a72c0 	call	800a72c <__eqdf2>
 800d210:	d8c03c17 	ldw	r3,240(sp)
 800d214:	da003d17 	ldw	r8,244(sp)
 800d218:	1000f71e 	bne	r2,zero,800d5f8 <___vfprintf_internal_r+0x12dc>
 800d21c:	d8801f17 	ldw	r2,124(sp)
 800d220:	01020d74 	movhi	r4,2101
 800d224:	21215504 	addi	r4,r4,-31404
 800d228:	18c00044 	addi	r3,r3,1
 800d22c:	10800044 	addi	r2,r2,1
 800d230:	41000015 	stw	r4,0(r8)
 800d234:	01000044 	movi	r4,1
 800d238:	41000115 	stw	r4,4(r8)
 800d23c:	d8c02015 	stw	r3,128(sp)
 800d240:	d8801f15 	stw	r2,124(sp)
 800d244:	010001c4 	movi	r4,7
 800d248:	2082b816 	blt	r4,r2,800dd2c <___vfprintf_internal_r+0x1a10>
 800d24c:	42000204 	addi	r8,r8,8
 800d250:	d8802617 	ldw	r2,152(sp)
 800d254:	d9403317 	ldw	r5,204(sp)
 800d258:	11400216 	blt	r2,r5,800d264 <___vfprintf_internal_r+0xf48>
 800d25c:	9080004c 	andi	r2,r18,1
 800d260:	103eb326 	beq	r2,zero,800cd30 <__alt_data_end+0xfc00cd30>
 800d264:	d8803717 	ldw	r2,220(sp)
 800d268:	d9003417 	ldw	r4,208(sp)
 800d26c:	d9403717 	ldw	r5,220(sp)
 800d270:	1887883a 	add	r3,r3,r2
 800d274:	d8801f17 	ldw	r2,124(sp)
 800d278:	41000015 	stw	r4,0(r8)
 800d27c:	41400115 	stw	r5,4(r8)
 800d280:	10800044 	addi	r2,r2,1
 800d284:	d8c02015 	stw	r3,128(sp)
 800d288:	d8801f15 	stw	r2,124(sp)
 800d28c:	010001c4 	movi	r4,7
 800d290:	20832916 	blt	r4,r2,800df38 <___vfprintf_internal_r+0x1c1c>
 800d294:	42000204 	addi	r8,r8,8
 800d298:	d8803317 	ldw	r2,204(sp)
 800d29c:	143fffc4 	addi	r16,r2,-1
 800d2a0:	043ea30e 	bge	zero,r16,800cd30 <__alt_data_end+0xfc00cd30>
 800d2a4:	04400404 	movi	r17,16
 800d2a8:	d8801f17 	ldw	r2,124(sp)
 800d2ac:	8c00880e 	bge	r17,r16,800d4d0 <___vfprintf_internal_r+0x11b4>
 800d2b0:	01420d74 	movhi	r5,2101
 800d2b4:	29615584 	addi	r5,r5,-31402
 800d2b8:	d9402c15 	stw	r5,176(sp)
 800d2bc:	058001c4 	movi	r22,7
 800d2c0:	dcc02d17 	ldw	r19,180(sp)
 800d2c4:	00000306 	br	800d2d4 <___vfprintf_internal_r+0xfb8>
 800d2c8:	42000204 	addi	r8,r8,8
 800d2cc:	843ffc04 	addi	r16,r16,-16
 800d2d0:	8c00820e 	bge	r17,r16,800d4dc <___vfprintf_internal_r+0x11c0>
 800d2d4:	18c00404 	addi	r3,r3,16
 800d2d8:	10800044 	addi	r2,r2,1
 800d2dc:	45000015 	stw	r20,0(r8)
 800d2e0:	44400115 	stw	r17,4(r8)
 800d2e4:	d8c02015 	stw	r3,128(sp)
 800d2e8:	d8801f15 	stw	r2,124(sp)
 800d2ec:	b0bff60e 	bge	r22,r2,800d2c8 <__alt_data_end+0xfc00d2c8>
 800d2f0:	d9801e04 	addi	r6,sp,120
 800d2f4:	b80b883a 	mov	r5,r23
 800d2f8:	9809883a 	mov	r4,r19
 800d2fc:	80139600 	call	8013960 <__sprint_r>
 800d300:	103d0a1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d304:	d8c02017 	ldw	r3,128(sp)
 800d308:	d8801f17 	ldw	r2,124(sp)
 800d30c:	da000404 	addi	r8,sp,16
 800d310:	003fee06 	br	800d2cc <__alt_data_end+0xfc00d2cc>
 800d314:	d9403117 	ldw	r5,196(sp)
 800d318:	d8802917 	ldw	r2,164(sp)
 800d31c:	28adc83a 	sub	r22,r5,r2
 800d320:	05be410e 	bge	zero,r22,800cc28 <__alt_data_end+0xfc00cc28>
 800d324:	07000404 	movi	fp,16
 800d328:	d8801f17 	ldw	r2,124(sp)
 800d32c:	e5838f0e 	bge	fp,r22,800e16c <___vfprintf_internal_r+0x1e50>
 800d330:	01420d74 	movhi	r5,2101
 800d334:	29615584 	addi	r5,r5,-31402
 800d338:	dc403015 	stw	r17,192(sp)
 800d33c:	d9402c15 	stw	r5,176(sp)
 800d340:	b023883a 	mov	r17,r22
 800d344:	04c001c4 	movi	r19,7
 800d348:	a82d883a 	mov	r22,r21
 800d34c:	902b883a 	mov	r21,r18
 800d350:	8025883a 	mov	r18,r16
 800d354:	dc002d17 	ldw	r16,180(sp)
 800d358:	00000306 	br	800d368 <___vfprintf_internal_r+0x104c>
 800d35c:	8c7ffc04 	addi	r17,r17,-16
 800d360:	42000204 	addi	r8,r8,8
 800d364:	e440110e 	bge	fp,r17,800d3ac <___vfprintf_internal_r+0x1090>
 800d368:	18c00404 	addi	r3,r3,16
 800d36c:	10800044 	addi	r2,r2,1
 800d370:	45000015 	stw	r20,0(r8)
 800d374:	47000115 	stw	fp,4(r8)
 800d378:	d8c02015 	stw	r3,128(sp)
 800d37c:	d8801f15 	stw	r2,124(sp)
 800d380:	98bff60e 	bge	r19,r2,800d35c <__alt_data_end+0xfc00d35c>
 800d384:	d9801e04 	addi	r6,sp,120
 800d388:	b80b883a 	mov	r5,r23
 800d38c:	8009883a 	mov	r4,r16
 800d390:	80139600 	call	8013960 <__sprint_r>
 800d394:	103ce51e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d398:	8c7ffc04 	addi	r17,r17,-16
 800d39c:	d8c02017 	ldw	r3,128(sp)
 800d3a0:	d8801f17 	ldw	r2,124(sp)
 800d3a4:	da000404 	addi	r8,sp,16
 800d3a8:	e47fef16 	blt	fp,r17,800d368 <__alt_data_end+0xfc00d368>
 800d3ac:	9021883a 	mov	r16,r18
 800d3b0:	a825883a 	mov	r18,r21
 800d3b4:	b02b883a 	mov	r21,r22
 800d3b8:	882d883a 	mov	r22,r17
 800d3bc:	dc403017 	ldw	r17,192(sp)
 800d3c0:	d9002c17 	ldw	r4,176(sp)
 800d3c4:	1d87883a 	add	r3,r3,r22
 800d3c8:	10800044 	addi	r2,r2,1
 800d3cc:	41000015 	stw	r4,0(r8)
 800d3d0:	45800115 	stw	r22,4(r8)
 800d3d4:	d8c02015 	stw	r3,128(sp)
 800d3d8:	d8801f15 	stw	r2,124(sp)
 800d3dc:	010001c4 	movi	r4,7
 800d3e0:	20818e16 	blt	r4,r2,800da1c <___vfprintf_internal_r+0x1700>
 800d3e4:	42000204 	addi	r8,r8,8
 800d3e8:	003e0f06 	br	800cc28 <__alt_data_end+0xfc00cc28>
 800d3ec:	d9403317 	ldw	r5,204(sp)
 800d3f0:	00800044 	movi	r2,1
 800d3f4:	18c00044 	addi	r3,r3,1
 800d3f8:	1141530e 	bge	r2,r5,800d948 <___vfprintf_internal_r+0x162c>
 800d3fc:	dc401f17 	ldw	r17,124(sp)
 800d400:	00800044 	movi	r2,1
 800d404:	40800115 	stw	r2,4(r8)
 800d408:	8c400044 	addi	r17,r17,1
 800d40c:	44000015 	stw	r16,0(r8)
 800d410:	d8c02015 	stw	r3,128(sp)
 800d414:	dc401f15 	stw	r17,124(sp)
 800d418:	008001c4 	movi	r2,7
 800d41c:	14416b16 	blt	r2,r17,800d9cc <___vfprintf_internal_r+0x16b0>
 800d420:	42000204 	addi	r8,r8,8
 800d424:	d8803717 	ldw	r2,220(sp)
 800d428:	d9003417 	ldw	r4,208(sp)
 800d42c:	8c400044 	addi	r17,r17,1
 800d430:	10c7883a 	add	r3,r2,r3
 800d434:	40800115 	stw	r2,4(r8)
 800d438:	41000015 	stw	r4,0(r8)
 800d43c:	d8c02015 	stw	r3,128(sp)
 800d440:	dc401f15 	stw	r17,124(sp)
 800d444:	008001c4 	movi	r2,7
 800d448:	14416916 	blt	r2,r17,800d9f0 <___vfprintf_internal_r+0x16d4>
 800d44c:	45800204 	addi	r22,r8,8
 800d450:	d9003617 	ldw	r4,216(sp)
 800d454:	d9403817 	ldw	r5,224(sp)
 800d458:	000d883a 	mov	r6,zero
 800d45c:	000f883a 	mov	r7,zero
 800d460:	d8c03c15 	stw	r3,240(sp)
 800d464:	800a72c0 	call	800a72c <__eqdf2>
 800d468:	d8c03c17 	ldw	r3,240(sp)
 800d46c:	1000bc26 	beq	r2,zero,800d760 <___vfprintf_internal_r+0x1444>
 800d470:	d9403317 	ldw	r5,204(sp)
 800d474:	84000044 	addi	r16,r16,1
 800d478:	8c400044 	addi	r17,r17,1
 800d47c:	28bfffc4 	addi	r2,r5,-1
 800d480:	1887883a 	add	r3,r3,r2
 800d484:	b0800115 	stw	r2,4(r22)
 800d488:	b4000015 	stw	r16,0(r22)
 800d48c:	d8c02015 	stw	r3,128(sp)
 800d490:	dc401f15 	stw	r17,124(sp)
 800d494:	008001c4 	movi	r2,7
 800d498:	14414316 	blt	r2,r17,800d9a8 <___vfprintf_internal_r+0x168c>
 800d49c:	b5800204 	addi	r22,r22,8
 800d4a0:	d9003a17 	ldw	r4,232(sp)
 800d4a4:	df0022c4 	addi	fp,sp,139
 800d4a8:	8c400044 	addi	r17,r17,1
 800d4ac:	20c7883a 	add	r3,r4,r3
 800d4b0:	b7000015 	stw	fp,0(r22)
 800d4b4:	b1000115 	stw	r4,4(r22)
 800d4b8:	d8c02015 	stw	r3,128(sp)
 800d4bc:	dc401f15 	stw	r17,124(sp)
 800d4c0:	008001c4 	movi	r2,7
 800d4c4:	14400e16 	blt	r2,r17,800d500 <___vfprintf_internal_r+0x11e4>
 800d4c8:	b2000204 	addi	r8,r22,8
 800d4cc:	003e1806 	br	800cd30 <__alt_data_end+0xfc00cd30>
 800d4d0:	01020d74 	movhi	r4,2101
 800d4d4:	21215584 	addi	r4,r4,-31402
 800d4d8:	d9002c15 	stw	r4,176(sp)
 800d4dc:	d9002c17 	ldw	r4,176(sp)
 800d4e0:	1c07883a 	add	r3,r3,r16
 800d4e4:	44000115 	stw	r16,4(r8)
 800d4e8:	41000015 	stw	r4,0(r8)
 800d4ec:	10800044 	addi	r2,r2,1
 800d4f0:	d8c02015 	stw	r3,128(sp)
 800d4f4:	d8801f15 	stw	r2,124(sp)
 800d4f8:	010001c4 	movi	r4,7
 800d4fc:	20be0b0e 	bge	r4,r2,800cd2c <__alt_data_end+0xfc00cd2c>
 800d500:	d9002d17 	ldw	r4,180(sp)
 800d504:	d9801e04 	addi	r6,sp,120
 800d508:	b80b883a 	mov	r5,r23
 800d50c:	80139600 	call	8013960 <__sprint_r>
 800d510:	103c861e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d514:	d8c02017 	ldw	r3,128(sp)
 800d518:	da000404 	addi	r8,sp,16
 800d51c:	003e0406 	br	800cd30 <__alt_data_end+0xfc00cd30>
 800d520:	d9002d17 	ldw	r4,180(sp)
 800d524:	d9801e04 	addi	r6,sp,120
 800d528:	b80b883a 	mov	r5,r23
 800d52c:	80139600 	call	8013960 <__sprint_r>
 800d530:	103e3b26 	beq	r2,zero,800ce20 <__alt_data_end+0xfc00ce20>
 800d534:	003c7d06 	br	800c72c <__alt_data_end+0xfc00c72c>
 800d538:	d9002d17 	ldw	r4,180(sp)
 800d53c:	d9801e04 	addi	r6,sp,120
 800d540:	b80b883a 	mov	r5,r23
 800d544:	80139600 	call	8013960 <__sprint_r>
 800d548:	103c781e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d54c:	d8c02017 	ldw	r3,128(sp)
 800d550:	da000404 	addi	r8,sp,16
 800d554:	003de906 	br	800ccfc <__alt_data_end+0xfc00ccfc>
 800d558:	d9002d17 	ldw	r4,180(sp)
 800d55c:	d9801e04 	addi	r6,sp,120
 800d560:	b80b883a 	mov	r5,r23
 800d564:	80139600 	call	8013960 <__sprint_r>
 800d568:	103c701e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d56c:	d8c02017 	ldw	r3,128(sp)
 800d570:	da000404 	addi	r8,sp,16
 800d574:	003d9b06 	br	800cbe4 <__alt_data_end+0xfc00cbe4>
 800d578:	d9002d17 	ldw	r4,180(sp)
 800d57c:	d9801e04 	addi	r6,sp,120
 800d580:	b80b883a 	mov	r5,r23
 800d584:	80139600 	call	8013960 <__sprint_r>
 800d588:	103c681e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d58c:	d8c02017 	ldw	r3,128(sp)
 800d590:	da000404 	addi	r8,sp,16
 800d594:	003da106 	br	800cc1c <__alt_data_end+0xfc00cc1c>
 800d598:	d9402a17 	ldw	r5,168(sp)
 800d59c:	d8002785 	stb	zero,158(sp)
 800d5a0:	283f0616 	blt	r5,zero,800d1bc <__alt_data_end+0xfc00d1bc>
 800d5a4:	00ffdfc4 	movi	r3,-129
 800d5a8:	9d84b03a 	or	r2,r19,r22
 800d5ac:	90e4703a 	and	r18,r18,r3
 800d5b0:	103c3b26 	beq	r2,zero,800c6a0 <__alt_data_end+0xfc00c6a0>
 800d5b4:	0039883a 	mov	fp,zero
 800d5b8:	003e5806 	br	800cf1c <__alt_data_end+0xfc00cf1c>
 800d5bc:	9080040c 	andi	r2,r18,16
 800d5c0:	1001b326 	beq	r2,zero,800dc90 <___vfprintf_internal_r+0x1974>
 800d5c4:	d8c02e17 	ldw	r3,184(sp)
 800d5c8:	d9002a17 	ldw	r4,168(sp)
 800d5cc:	d8002785 	stb	zero,158(sp)
 800d5d0:	18800104 	addi	r2,r3,4
 800d5d4:	1cc00017 	ldw	r19,0(r3)
 800d5d8:	002d883a 	mov	r22,zero
 800d5dc:	2001b516 	blt	r4,zero,800dcb4 <___vfprintf_internal_r+0x1998>
 800d5e0:	00ffdfc4 	movi	r3,-129
 800d5e4:	d8802e15 	stw	r2,184(sp)
 800d5e8:	90e4703a 	and	r18,r18,r3
 800d5ec:	983d0526 	beq	r19,zero,800ca04 <__alt_data_end+0xfc00ca04>
 800d5f0:	0039883a 	mov	fp,zero
 800d5f4:	003d0806 	br	800ca18 <__alt_data_end+0xfc00ca18>
 800d5f8:	dc402617 	ldw	r17,152(sp)
 800d5fc:	0441d30e 	bge	zero,r17,800dd4c <___vfprintf_internal_r+0x1a30>
 800d600:	dc403217 	ldw	r17,200(sp)
 800d604:	d8803317 	ldw	r2,204(sp)
 800d608:	1440010e 	bge	r2,r17,800d610 <___vfprintf_internal_r+0x12f4>
 800d60c:	1023883a 	mov	r17,r2
 800d610:	04400a0e 	bge	zero,r17,800d63c <___vfprintf_internal_r+0x1320>
 800d614:	d8801f17 	ldw	r2,124(sp)
 800d618:	1c47883a 	add	r3,r3,r17
 800d61c:	44000015 	stw	r16,0(r8)
 800d620:	10800044 	addi	r2,r2,1
 800d624:	44400115 	stw	r17,4(r8)
 800d628:	d8c02015 	stw	r3,128(sp)
 800d62c:	d8801f15 	stw	r2,124(sp)
 800d630:	010001c4 	movi	r4,7
 800d634:	20826516 	blt	r4,r2,800dfcc <___vfprintf_internal_r+0x1cb0>
 800d638:	42000204 	addi	r8,r8,8
 800d63c:	88026116 	blt	r17,zero,800dfc4 <___vfprintf_internal_r+0x1ca8>
 800d640:	d9003217 	ldw	r4,200(sp)
 800d644:	2463c83a 	sub	r17,r4,r17
 800d648:	04407b0e 	bge	zero,r17,800d838 <___vfprintf_internal_r+0x151c>
 800d64c:	05800404 	movi	r22,16
 800d650:	d8801f17 	ldw	r2,124(sp)
 800d654:	b4419d0e 	bge	r22,r17,800dccc <___vfprintf_internal_r+0x19b0>
 800d658:	01020d74 	movhi	r4,2101
 800d65c:	21215584 	addi	r4,r4,-31402
 800d660:	d9002c15 	stw	r4,176(sp)
 800d664:	070001c4 	movi	fp,7
 800d668:	dcc02d17 	ldw	r19,180(sp)
 800d66c:	00000306 	br	800d67c <___vfprintf_internal_r+0x1360>
 800d670:	42000204 	addi	r8,r8,8
 800d674:	8c7ffc04 	addi	r17,r17,-16
 800d678:	b441970e 	bge	r22,r17,800dcd8 <___vfprintf_internal_r+0x19bc>
 800d67c:	18c00404 	addi	r3,r3,16
 800d680:	10800044 	addi	r2,r2,1
 800d684:	45000015 	stw	r20,0(r8)
 800d688:	45800115 	stw	r22,4(r8)
 800d68c:	d8c02015 	stw	r3,128(sp)
 800d690:	d8801f15 	stw	r2,124(sp)
 800d694:	e0bff60e 	bge	fp,r2,800d670 <__alt_data_end+0xfc00d670>
 800d698:	d9801e04 	addi	r6,sp,120
 800d69c:	b80b883a 	mov	r5,r23
 800d6a0:	9809883a 	mov	r4,r19
 800d6a4:	80139600 	call	8013960 <__sprint_r>
 800d6a8:	103c201e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d6ac:	d8c02017 	ldw	r3,128(sp)
 800d6b0:	d8801f17 	ldw	r2,124(sp)
 800d6b4:	da000404 	addi	r8,sp,16
 800d6b8:	003fee06 	br	800d674 <__alt_data_end+0xfc00d674>
 800d6bc:	d9002d17 	ldw	r4,180(sp)
 800d6c0:	d9801e04 	addi	r6,sp,120
 800d6c4:	b80b883a 	mov	r5,r23
 800d6c8:	80139600 	call	8013960 <__sprint_r>
 800d6cc:	103c171e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d6d0:	d8c02017 	ldw	r3,128(sp)
 800d6d4:	df002787 	ldb	fp,158(sp)
 800d6d8:	da000404 	addi	r8,sp,16
 800d6dc:	003d3406 	br	800cbb0 <__alt_data_end+0xfc00cbb0>
 800d6e0:	9080040c 	andi	r2,r18,16
 800d6e4:	10016126 	beq	r2,zero,800dc6c <___vfprintf_internal_r+0x1950>
 800d6e8:	d9402e17 	ldw	r5,184(sp)
 800d6ec:	2cc00017 	ldw	r19,0(r5)
 800d6f0:	29400104 	addi	r5,r5,4
 800d6f4:	d9402e15 	stw	r5,184(sp)
 800d6f8:	982dd7fa 	srai	r22,r19,31
 800d6fc:	b005883a 	mov	r2,r22
 800d700:	003c5a06 	br	800c86c <__alt_data_end+0xfc00c86c>
 800d704:	9080040c 	andi	r2,r18,16
 800d708:	10003526 	beq	r2,zero,800d7e0 <___vfprintf_internal_r+0x14c4>
 800d70c:	d8c02e17 	ldw	r3,184(sp)
 800d710:	d9002a17 	ldw	r4,168(sp)
 800d714:	d8002785 	stb	zero,158(sp)
 800d718:	18800104 	addi	r2,r3,4
 800d71c:	1cc00017 	ldw	r19,0(r3)
 800d720:	002d883a 	mov	r22,zero
 800d724:	20003716 	blt	r4,zero,800d804 <___vfprintf_internal_r+0x14e8>
 800d728:	00ffdfc4 	movi	r3,-129
 800d72c:	d8802e15 	stw	r2,184(sp)
 800d730:	90e4703a 	and	r18,r18,r3
 800d734:	0039883a 	mov	fp,zero
 800d738:	983dd426 	beq	r19,zero,800ce8c <__alt_data_end+0xfc00ce8c>
 800d73c:	00800244 	movi	r2,9
 800d740:	14fc5336 	bltu	r2,r19,800c890 <__alt_data_end+0xfc00c890>
 800d744:	d8c02817 	ldw	r3,160(sp)
 800d748:	dc001dc4 	addi	r16,sp,119
 800d74c:	9cc00c04 	addi	r19,r19,48
 800d750:	1c07c83a 	sub	r3,r3,r16
 800d754:	dcc01dc5 	stb	r19,119(sp)
 800d758:	d8c02b15 	stw	r3,172(sp)
 800d75c:	003cc606 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800d760:	d8803317 	ldw	r2,204(sp)
 800d764:	143fffc4 	addi	r16,r2,-1
 800d768:	043f4d0e 	bge	zero,r16,800d4a0 <__alt_data_end+0xfc00d4a0>
 800d76c:	07000404 	movi	fp,16
 800d770:	e400810e 	bge	fp,r16,800d978 <___vfprintf_internal_r+0x165c>
 800d774:	01420d74 	movhi	r5,2101
 800d778:	29615584 	addi	r5,r5,-31402
 800d77c:	d9402c15 	stw	r5,176(sp)
 800d780:	01c001c4 	movi	r7,7
 800d784:	dcc02d17 	ldw	r19,180(sp)
 800d788:	00000306 	br	800d798 <___vfprintf_internal_r+0x147c>
 800d78c:	b5800204 	addi	r22,r22,8
 800d790:	843ffc04 	addi	r16,r16,-16
 800d794:	e4007b0e 	bge	fp,r16,800d984 <___vfprintf_internal_r+0x1668>
 800d798:	18c00404 	addi	r3,r3,16
 800d79c:	8c400044 	addi	r17,r17,1
 800d7a0:	b5000015 	stw	r20,0(r22)
 800d7a4:	b7000115 	stw	fp,4(r22)
 800d7a8:	d8c02015 	stw	r3,128(sp)
 800d7ac:	dc401f15 	stw	r17,124(sp)
 800d7b0:	3c7ff60e 	bge	r7,r17,800d78c <__alt_data_end+0xfc00d78c>
 800d7b4:	d9801e04 	addi	r6,sp,120
 800d7b8:	b80b883a 	mov	r5,r23
 800d7bc:	9809883a 	mov	r4,r19
 800d7c0:	d9c03c15 	stw	r7,240(sp)
 800d7c4:	80139600 	call	8013960 <__sprint_r>
 800d7c8:	d9c03c17 	ldw	r7,240(sp)
 800d7cc:	103bd71e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d7d0:	d8c02017 	ldw	r3,128(sp)
 800d7d4:	dc401f17 	ldw	r17,124(sp)
 800d7d8:	dd800404 	addi	r22,sp,16
 800d7dc:	003fec06 	br	800d790 <__alt_data_end+0xfc00d790>
 800d7e0:	9080100c 	andi	r2,r18,64
 800d7e4:	d8002785 	stb	zero,158(sp)
 800d7e8:	10010e26 	beq	r2,zero,800dc24 <___vfprintf_internal_r+0x1908>
 800d7ec:	d9402e17 	ldw	r5,184(sp)
 800d7f0:	d8c02a17 	ldw	r3,168(sp)
 800d7f4:	002d883a 	mov	r22,zero
 800d7f8:	28800104 	addi	r2,r5,4
 800d7fc:	2cc0000b 	ldhu	r19,0(r5)
 800d800:	183fc90e 	bge	r3,zero,800d728 <__alt_data_end+0xfc00d728>
 800d804:	d8802e15 	stw	r2,184(sp)
 800d808:	0039883a 	mov	fp,zero
 800d80c:	9d84b03a 	or	r2,r19,r22
 800d810:	103c1e1e 	bne	r2,zero,800c88c <__alt_data_end+0xfc00c88c>
 800d814:	00800044 	movi	r2,1
 800d818:	003e6c06 	br	800d1cc <__alt_data_end+0xfc00d1cc>
 800d81c:	d9002d17 	ldw	r4,180(sp)
 800d820:	d9801e04 	addi	r6,sp,120
 800d824:	b80b883a 	mov	r5,r23
 800d828:	80139600 	call	8013960 <__sprint_r>
 800d82c:	103bbf1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d830:	d8c02017 	ldw	r3,128(sp)
 800d834:	da000404 	addi	r8,sp,16
 800d838:	d9003217 	ldw	r4,200(sp)
 800d83c:	d8802617 	ldw	r2,152(sp)
 800d840:	d9403317 	ldw	r5,204(sp)
 800d844:	8123883a 	add	r17,r16,r4
 800d848:	11400216 	blt	r2,r5,800d854 <___vfprintf_internal_r+0x1538>
 800d84c:	9100004c 	andi	r4,r18,1
 800d850:	20000d26 	beq	r4,zero,800d888 <___vfprintf_internal_r+0x156c>
 800d854:	d9003717 	ldw	r4,220(sp)
 800d858:	d9403417 	ldw	r5,208(sp)
 800d85c:	1907883a 	add	r3,r3,r4
 800d860:	d9001f17 	ldw	r4,124(sp)
 800d864:	41400015 	stw	r5,0(r8)
 800d868:	d9403717 	ldw	r5,220(sp)
 800d86c:	21000044 	addi	r4,r4,1
 800d870:	d8c02015 	stw	r3,128(sp)
 800d874:	41400115 	stw	r5,4(r8)
 800d878:	d9001f15 	stw	r4,124(sp)
 800d87c:	014001c4 	movi	r5,7
 800d880:	2901e816 	blt	r5,r4,800e024 <___vfprintf_internal_r+0x1d08>
 800d884:	42000204 	addi	r8,r8,8
 800d888:	d9003317 	ldw	r4,204(sp)
 800d88c:	8121883a 	add	r16,r16,r4
 800d890:	2085c83a 	sub	r2,r4,r2
 800d894:	8461c83a 	sub	r16,r16,r17
 800d898:	1400010e 	bge	r2,r16,800d8a0 <___vfprintf_internal_r+0x1584>
 800d89c:	1021883a 	mov	r16,r2
 800d8a0:	04000a0e 	bge	zero,r16,800d8cc <___vfprintf_internal_r+0x15b0>
 800d8a4:	d9001f17 	ldw	r4,124(sp)
 800d8a8:	1c07883a 	add	r3,r3,r16
 800d8ac:	44400015 	stw	r17,0(r8)
 800d8b0:	21000044 	addi	r4,r4,1
 800d8b4:	44000115 	stw	r16,4(r8)
 800d8b8:	d8c02015 	stw	r3,128(sp)
 800d8bc:	d9001f15 	stw	r4,124(sp)
 800d8c0:	014001c4 	movi	r5,7
 800d8c4:	2901fb16 	blt	r5,r4,800e0b4 <___vfprintf_internal_r+0x1d98>
 800d8c8:	42000204 	addi	r8,r8,8
 800d8cc:	8001f716 	blt	r16,zero,800e0ac <___vfprintf_internal_r+0x1d90>
 800d8d0:	1421c83a 	sub	r16,r2,r16
 800d8d4:	043d160e 	bge	zero,r16,800cd30 <__alt_data_end+0xfc00cd30>
 800d8d8:	04400404 	movi	r17,16
 800d8dc:	d8801f17 	ldw	r2,124(sp)
 800d8e0:	8c3efb0e 	bge	r17,r16,800d4d0 <__alt_data_end+0xfc00d4d0>
 800d8e4:	01420d74 	movhi	r5,2101
 800d8e8:	29615584 	addi	r5,r5,-31402
 800d8ec:	d9402c15 	stw	r5,176(sp)
 800d8f0:	058001c4 	movi	r22,7
 800d8f4:	dcc02d17 	ldw	r19,180(sp)
 800d8f8:	00000306 	br	800d908 <___vfprintf_internal_r+0x15ec>
 800d8fc:	42000204 	addi	r8,r8,8
 800d900:	843ffc04 	addi	r16,r16,-16
 800d904:	8c3ef50e 	bge	r17,r16,800d4dc <__alt_data_end+0xfc00d4dc>
 800d908:	18c00404 	addi	r3,r3,16
 800d90c:	10800044 	addi	r2,r2,1
 800d910:	45000015 	stw	r20,0(r8)
 800d914:	44400115 	stw	r17,4(r8)
 800d918:	d8c02015 	stw	r3,128(sp)
 800d91c:	d8801f15 	stw	r2,124(sp)
 800d920:	b0bff60e 	bge	r22,r2,800d8fc <__alt_data_end+0xfc00d8fc>
 800d924:	d9801e04 	addi	r6,sp,120
 800d928:	b80b883a 	mov	r5,r23
 800d92c:	9809883a 	mov	r4,r19
 800d930:	80139600 	call	8013960 <__sprint_r>
 800d934:	103b7d1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d938:	d8c02017 	ldw	r3,128(sp)
 800d93c:	d8801f17 	ldw	r2,124(sp)
 800d940:	da000404 	addi	r8,sp,16
 800d944:	003fee06 	br	800d900 <__alt_data_end+0xfc00d900>
 800d948:	9088703a 	and	r4,r18,r2
 800d94c:	203eab1e 	bne	r4,zero,800d3fc <__alt_data_end+0xfc00d3fc>
 800d950:	dc401f17 	ldw	r17,124(sp)
 800d954:	40800115 	stw	r2,4(r8)
 800d958:	44000015 	stw	r16,0(r8)
 800d95c:	8c400044 	addi	r17,r17,1
 800d960:	d8c02015 	stw	r3,128(sp)
 800d964:	dc401f15 	stw	r17,124(sp)
 800d968:	008001c4 	movi	r2,7
 800d96c:	14400e16 	blt	r2,r17,800d9a8 <___vfprintf_internal_r+0x168c>
 800d970:	45800204 	addi	r22,r8,8
 800d974:	003eca06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d978:	01020d74 	movhi	r4,2101
 800d97c:	21215584 	addi	r4,r4,-31402
 800d980:	d9002c15 	stw	r4,176(sp)
 800d984:	d8802c17 	ldw	r2,176(sp)
 800d988:	1c07883a 	add	r3,r3,r16
 800d98c:	8c400044 	addi	r17,r17,1
 800d990:	b0800015 	stw	r2,0(r22)
 800d994:	b4000115 	stw	r16,4(r22)
 800d998:	d8c02015 	stw	r3,128(sp)
 800d99c:	dc401f15 	stw	r17,124(sp)
 800d9a0:	008001c4 	movi	r2,7
 800d9a4:	147ebd0e 	bge	r2,r17,800d49c <__alt_data_end+0xfc00d49c>
 800d9a8:	d9002d17 	ldw	r4,180(sp)
 800d9ac:	d9801e04 	addi	r6,sp,120
 800d9b0:	b80b883a 	mov	r5,r23
 800d9b4:	80139600 	call	8013960 <__sprint_r>
 800d9b8:	103b5c1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d9bc:	d8c02017 	ldw	r3,128(sp)
 800d9c0:	dc401f17 	ldw	r17,124(sp)
 800d9c4:	dd800404 	addi	r22,sp,16
 800d9c8:	003eb506 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d9cc:	d9002d17 	ldw	r4,180(sp)
 800d9d0:	d9801e04 	addi	r6,sp,120
 800d9d4:	b80b883a 	mov	r5,r23
 800d9d8:	80139600 	call	8013960 <__sprint_r>
 800d9dc:	103b531e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800d9e0:	d8c02017 	ldw	r3,128(sp)
 800d9e4:	dc401f17 	ldw	r17,124(sp)
 800d9e8:	da000404 	addi	r8,sp,16
 800d9ec:	003e8d06 	br	800d424 <__alt_data_end+0xfc00d424>
 800d9f0:	d9002d17 	ldw	r4,180(sp)
 800d9f4:	d9801e04 	addi	r6,sp,120
 800d9f8:	b80b883a 	mov	r5,r23
 800d9fc:	80139600 	call	8013960 <__sprint_r>
 800da00:	103b4a1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800da04:	d8c02017 	ldw	r3,128(sp)
 800da08:	dc401f17 	ldw	r17,124(sp)
 800da0c:	dd800404 	addi	r22,sp,16
 800da10:	003e8f06 	br	800d450 <__alt_data_end+0xfc00d450>
 800da14:	0027883a 	mov	r19,zero
 800da18:	003f4a06 	br	800d744 <__alt_data_end+0xfc00d744>
 800da1c:	d9002d17 	ldw	r4,180(sp)
 800da20:	d9801e04 	addi	r6,sp,120
 800da24:	b80b883a 	mov	r5,r23
 800da28:	80139600 	call	8013960 <__sprint_r>
 800da2c:	103b3f1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800da30:	d8c02017 	ldw	r3,128(sp)
 800da34:	da000404 	addi	r8,sp,16
 800da38:	003c7b06 	br	800cc28 <__alt_data_end+0xfc00cc28>
 800da3c:	d9402a17 	ldw	r5,168(sp)
 800da40:	04e7c83a 	sub	r19,zero,r19
 800da44:	07000b44 	movi	fp,45
 800da48:	9804c03a 	cmpne	r2,r19,zero
 800da4c:	05adc83a 	sub	r22,zero,r22
 800da50:	df002785 	stb	fp,158(sp)
 800da54:	b0adc83a 	sub	r22,r22,r2
 800da58:	28017b16 	blt	r5,zero,800e048 <___vfprintf_internal_r+0x1d2c>
 800da5c:	00bfdfc4 	movi	r2,-129
 800da60:	90a4703a 	and	r18,r18,r2
 800da64:	003b8906 	br	800c88c <__alt_data_end+0xfc00c88c>
 800da68:	d9003617 	ldw	r4,216(sp)
 800da6c:	d9403817 	ldw	r5,224(sp)
 800da70:	da003d15 	stw	r8,244(sp)
 800da74:	80071b00 	call	80071b0 <__fpclassifyd>
 800da78:	da003d17 	ldw	r8,244(sp)
 800da7c:	1000f026 	beq	r2,zero,800de40 <___vfprintf_internal_r+0x1b24>
 800da80:	d9002a17 	ldw	r4,168(sp)
 800da84:	05bff7c4 	movi	r22,-33
 800da88:	00bfffc4 	movi	r2,-1
 800da8c:	8dac703a 	and	r22,r17,r22
 800da90:	20820026 	beq	r4,r2,800e294 <___vfprintf_internal_r+0x1f78>
 800da94:	008011c4 	movi	r2,71
 800da98:	b081f726 	beq	r22,r2,800e278 <___vfprintf_internal_r+0x1f5c>
 800da9c:	d9003817 	ldw	r4,224(sp)
 800daa0:	90c04014 	ori	r3,r18,256
 800daa4:	d8c02c15 	stw	r3,176(sp)
 800daa8:	20021516 	blt	r4,zero,800e300 <___vfprintf_internal_r+0x1fe4>
 800daac:	dcc03817 	ldw	r19,224(sp)
 800dab0:	d8002905 	stb	zero,164(sp)
 800dab4:	00801984 	movi	r2,102
 800dab8:	8881f926 	beq	r17,r2,800e2a0 <___vfprintf_internal_r+0x1f84>
 800dabc:	00801184 	movi	r2,70
 800dac0:	88821c26 	beq	r17,r2,800e334 <___vfprintf_internal_r+0x2018>
 800dac4:	00801144 	movi	r2,69
 800dac8:	b081ef26 	beq	r22,r2,800e288 <___vfprintf_internal_r+0x1f6c>
 800dacc:	d8c02a17 	ldw	r3,168(sp)
 800dad0:	d8802104 	addi	r2,sp,132
 800dad4:	d8800315 	stw	r2,12(sp)
 800dad8:	d9403617 	ldw	r5,216(sp)
 800dadc:	d8802504 	addi	r2,sp,148
 800dae0:	d9002d17 	ldw	r4,180(sp)
 800dae4:	d8800215 	stw	r2,8(sp)
 800dae8:	d8802604 	addi	r2,sp,152
 800daec:	d8c00015 	stw	r3,0(sp)
 800daf0:	d8800115 	stw	r2,4(sp)
 800daf4:	01c00084 	movi	r7,2
 800daf8:	980d883a 	mov	r6,r19
 800dafc:	d8c03c15 	stw	r3,240(sp)
 800db00:	da003d15 	stw	r8,244(sp)
 800db04:	800ea4c0 	call	800ea4c <_dtoa_r>
 800db08:	1021883a 	mov	r16,r2
 800db0c:	008019c4 	movi	r2,103
 800db10:	d8c03c17 	ldw	r3,240(sp)
 800db14:	da003d17 	ldw	r8,244(sp)
 800db18:	88817126 	beq	r17,r2,800e0e0 <___vfprintf_internal_r+0x1dc4>
 800db1c:	008011c4 	movi	r2,71
 800db20:	88829126 	beq	r17,r2,800e568 <___vfprintf_internal_r+0x224c>
 800db24:	80f9883a 	add	fp,r16,r3
 800db28:	d9003617 	ldw	r4,216(sp)
 800db2c:	000d883a 	mov	r6,zero
 800db30:	000f883a 	mov	r7,zero
 800db34:	980b883a 	mov	r5,r19
 800db38:	da003d15 	stw	r8,244(sp)
 800db3c:	800a72c0 	call	800a72c <__eqdf2>
 800db40:	da003d17 	ldw	r8,244(sp)
 800db44:	10018d26 	beq	r2,zero,800e17c <___vfprintf_internal_r+0x1e60>
 800db48:	d8802117 	ldw	r2,132(sp)
 800db4c:	1700062e 	bgeu	r2,fp,800db68 <___vfprintf_internal_r+0x184c>
 800db50:	01000c04 	movi	r4,48
 800db54:	10c00044 	addi	r3,r2,1
 800db58:	d8c02115 	stw	r3,132(sp)
 800db5c:	11000005 	stb	r4,0(r2)
 800db60:	d8802117 	ldw	r2,132(sp)
 800db64:	173ffb36 	bltu	r2,fp,800db54 <__alt_data_end+0xfc00db54>
 800db68:	1405c83a 	sub	r2,r2,r16
 800db6c:	d8803315 	stw	r2,204(sp)
 800db70:	008011c4 	movi	r2,71
 800db74:	b0817626 	beq	r22,r2,800e150 <___vfprintf_internal_r+0x1e34>
 800db78:	00801944 	movi	r2,101
 800db7c:	1442800e 	bge	r2,r17,800e580 <___vfprintf_internal_r+0x2264>
 800db80:	d8c02617 	ldw	r3,152(sp)
 800db84:	00801984 	movi	r2,102
 800db88:	d8c03215 	stw	r3,200(sp)
 800db8c:	8881fe26 	beq	r17,r2,800e388 <___vfprintf_internal_r+0x206c>
 800db90:	d8c03217 	ldw	r3,200(sp)
 800db94:	d9003317 	ldw	r4,204(sp)
 800db98:	1901dd16 	blt	r3,r4,800e310 <___vfprintf_internal_r+0x1ff4>
 800db9c:	9480004c 	andi	r18,r18,1
 800dba0:	90022b1e 	bne	r18,zero,800e450 <___vfprintf_internal_r+0x2134>
 800dba4:	1805883a 	mov	r2,r3
 800dba8:	18028316 	blt	r3,zero,800e5b8 <___vfprintf_internal_r+0x229c>
 800dbac:	d8c03217 	ldw	r3,200(sp)
 800dbb0:	044019c4 	movi	r17,103
 800dbb4:	d8c02b15 	stw	r3,172(sp)
 800dbb8:	df002907 	ldb	fp,164(sp)
 800dbbc:	e001531e 	bne	fp,zero,800e10c <___vfprintf_internal_r+0x1df0>
 800dbc0:	df002783 	ldbu	fp,158(sp)
 800dbc4:	d8802915 	stw	r2,164(sp)
 800dbc8:	dc802c17 	ldw	r18,176(sp)
 800dbcc:	d8002a15 	stw	zero,168(sp)
 800dbd0:	003baf06 	br	800ca90 <__alt_data_end+0xfc00ca90>
 800dbd4:	d8c02e17 	ldw	r3,184(sp)
 800dbd8:	d9002e17 	ldw	r4,184(sp)
 800dbdc:	d9402e17 	ldw	r5,184(sp)
 800dbe0:	18c00017 	ldw	r3,0(r3)
 800dbe4:	21000117 	ldw	r4,4(r4)
 800dbe8:	29400204 	addi	r5,r5,8
 800dbec:	d8c03615 	stw	r3,216(sp)
 800dbf0:	d9003815 	stw	r4,224(sp)
 800dbf4:	d9402e15 	stw	r5,184(sp)
 800dbf8:	003b5006 	br	800c93c <__alt_data_end+0xfc00c93c>
 800dbfc:	ac400007 	ldb	r17,0(r21)
 800dc00:	003a2806 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800dc04:	9080100c 	andi	r2,r18,64
 800dc08:	1000a826 	beq	r2,zero,800deac <___vfprintf_internal_r+0x1b90>
 800dc0c:	d8c02e17 	ldw	r3,184(sp)
 800dc10:	002d883a 	mov	r22,zero
 800dc14:	1cc0000b 	ldhu	r19,0(r3)
 800dc18:	18c00104 	addi	r3,r3,4
 800dc1c:	d8c02e15 	stw	r3,184(sp)
 800dc20:	003caf06 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800dc24:	d9002e17 	ldw	r4,184(sp)
 800dc28:	d9402a17 	ldw	r5,168(sp)
 800dc2c:	002d883a 	mov	r22,zero
 800dc30:	20800104 	addi	r2,r4,4
 800dc34:	24c00017 	ldw	r19,0(r4)
 800dc38:	283ebb0e 	bge	r5,zero,800d728 <__alt_data_end+0xfc00d728>
 800dc3c:	003ef106 	br	800d804 <__alt_data_end+0xfc00d804>
 800dc40:	9080040c 	andi	r2,r18,16
 800dc44:	1000921e 	bne	r2,zero,800de90 <___vfprintf_internal_r+0x1b74>
 800dc48:	9480100c 	andi	r18,r18,64
 800dc4c:	90013926 	beq	r18,zero,800e134 <___vfprintf_internal_r+0x1e18>
 800dc50:	d9402e17 	ldw	r5,184(sp)
 800dc54:	d8c02f17 	ldw	r3,188(sp)
 800dc58:	28800017 	ldw	r2,0(r5)
 800dc5c:	29400104 	addi	r5,r5,4
 800dc60:	d9402e15 	stw	r5,184(sp)
 800dc64:	10c0000d 	sth	r3,0(r2)
 800dc68:	0039e406 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800dc6c:	9080100c 	andi	r2,r18,64
 800dc70:	10008026 	beq	r2,zero,800de74 <___vfprintf_internal_r+0x1b58>
 800dc74:	d8802e17 	ldw	r2,184(sp)
 800dc78:	14c0000f 	ldh	r19,0(r2)
 800dc7c:	10800104 	addi	r2,r2,4
 800dc80:	d8802e15 	stw	r2,184(sp)
 800dc84:	982dd7fa 	srai	r22,r19,31
 800dc88:	b005883a 	mov	r2,r22
 800dc8c:	003af706 	br	800c86c <__alt_data_end+0xfc00c86c>
 800dc90:	9080100c 	andi	r2,r18,64
 800dc94:	d8002785 	stb	zero,158(sp)
 800dc98:	10008a1e 	bne	r2,zero,800dec4 <___vfprintf_internal_r+0x1ba8>
 800dc9c:	d9002e17 	ldw	r4,184(sp)
 800dca0:	d9402a17 	ldw	r5,168(sp)
 800dca4:	002d883a 	mov	r22,zero
 800dca8:	20800104 	addi	r2,r4,4
 800dcac:	24c00017 	ldw	r19,0(r4)
 800dcb0:	283e4b0e 	bge	r5,zero,800d5e0 <__alt_data_end+0xfc00d5e0>
 800dcb4:	9d86b03a 	or	r3,r19,r22
 800dcb8:	d8802e15 	stw	r2,184(sp)
 800dcbc:	183e4c1e 	bne	r3,zero,800d5f0 <__alt_data_end+0xfc00d5f0>
 800dcc0:	0039883a 	mov	fp,zero
 800dcc4:	0005883a 	mov	r2,zero
 800dcc8:	003d4006 	br	800d1cc <__alt_data_end+0xfc00d1cc>
 800dccc:	01420d74 	movhi	r5,2101
 800dcd0:	29615584 	addi	r5,r5,-31402
 800dcd4:	d9402c15 	stw	r5,176(sp)
 800dcd8:	d9402c17 	ldw	r5,176(sp)
 800dcdc:	1c47883a 	add	r3,r3,r17
 800dce0:	10800044 	addi	r2,r2,1
 800dce4:	41400015 	stw	r5,0(r8)
 800dce8:	44400115 	stw	r17,4(r8)
 800dcec:	d8c02015 	stw	r3,128(sp)
 800dcf0:	d8801f15 	stw	r2,124(sp)
 800dcf4:	010001c4 	movi	r4,7
 800dcf8:	20bec816 	blt	r4,r2,800d81c <__alt_data_end+0xfc00d81c>
 800dcfc:	42000204 	addi	r8,r8,8
 800dd00:	003ecd06 	br	800d838 <__alt_data_end+0xfc00d838>
 800dd04:	d9002a17 	ldw	r4,168(sp)
 800dd08:	d8002785 	stb	zero,158(sp)
 800dd0c:	203d2d16 	blt	r4,zero,800d1c4 <__alt_data_end+0xfc00d1c4>
 800dd10:	00bfdfc4 	movi	r2,-129
 800dd14:	90a4703a 	and	r18,r18,r2
 800dd18:	003a6106 	br	800c6a0 <__alt_data_end+0xfc00c6a0>
 800dd1c:	01020d74 	movhi	r4,2101
 800dd20:	21215584 	addi	r4,r4,-31402
 800dd24:	d9002c15 	stw	r4,176(sp)
 800dd28:	003bea06 	br	800ccd4 <__alt_data_end+0xfc00ccd4>
 800dd2c:	d9002d17 	ldw	r4,180(sp)
 800dd30:	d9801e04 	addi	r6,sp,120
 800dd34:	b80b883a 	mov	r5,r23
 800dd38:	80139600 	call	8013960 <__sprint_r>
 800dd3c:	103a7b1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800dd40:	d8c02017 	ldw	r3,128(sp)
 800dd44:	da000404 	addi	r8,sp,16
 800dd48:	003d4106 	br	800d250 <__alt_data_end+0xfc00d250>
 800dd4c:	d8801f17 	ldw	r2,124(sp)
 800dd50:	01420d74 	movhi	r5,2101
 800dd54:	01000044 	movi	r4,1
 800dd58:	18c00044 	addi	r3,r3,1
 800dd5c:	10800044 	addi	r2,r2,1
 800dd60:	29615504 	addi	r5,r5,-31404
 800dd64:	41000115 	stw	r4,4(r8)
 800dd68:	41400015 	stw	r5,0(r8)
 800dd6c:	d8c02015 	stw	r3,128(sp)
 800dd70:	d8801f15 	stw	r2,124(sp)
 800dd74:	010001c4 	movi	r4,7
 800dd78:	20805c16 	blt	r4,r2,800deec <___vfprintf_internal_r+0x1bd0>
 800dd7c:	42000204 	addi	r8,r8,8
 800dd80:	8800041e 	bne	r17,zero,800dd94 <___vfprintf_internal_r+0x1a78>
 800dd84:	d8803317 	ldw	r2,204(sp)
 800dd88:	1000021e 	bne	r2,zero,800dd94 <___vfprintf_internal_r+0x1a78>
 800dd8c:	9080004c 	andi	r2,r18,1
 800dd90:	103be726 	beq	r2,zero,800cd30 <__alt_data_end+0xfc00cd30>
 800dd94:	d9003717 	ldw	r4,220(sp)
 800dd98:	d8801f17 	ldw	r2,124(sp)
 800dd9c:	d9403417 	ldw	r5,208(sp)
 800dda0:	20c7883a 	add	r3,r4,r3
 800dda4:	10800044 	addi	r2,r2,1
 800dda8:	41000115 	stw	r4,4(r8)
 800ddac:	41400015 	stw	r5,0(r8)
 800ddb0:	d8c02015 	stw	r3,128(sp)
 800ddb4:	d8801f15 	stw	r2,124(sp)
 800ddb8:	010001c4 	movi	r4,7
 800ddbc:	20812116 	blt	r4,r2,800e244 <___vfprintf_internal_r+0x1f28>
 800ddc0:	42000204 	addi	r8,r8,8
 800ddc4:	0463c83a 	sub	r17,zero,r17
 800ddc8:	0440730e 	bge	zero,r17,800df98 <___vfprintf_internal_r+0x1c7c>
 800ddcc:	05800404 	movi	r22,16
 800ddd0:	b440860e 	bge	r22,r17,800dfec <___vfprintf_internal_r+0x1cd0>
 800ddd4:	01420d74 	movhi	r5,2101
 800ddd8:	29615584 	addi	r5,r5,-31402
 800dddc:	d9402c15 	stw	r5,176(sp)
 800dde0:	070001c4 	movi	fp,7
 800dde4:	dcc02d17 	ldw	r19,180(sp)
 800dde8:	00000306 	br	800ddf8 <___vfprintf_internal_r+0x1adc>
 800ddec:	42000204 	addi	r8,r8,8
 800ddf0:	8c7ffc04 	addi	r17,r17,-16
 800ddf4:	b440800e 	bge	r22,r17,800dff8 <___vfprintf_internal_r+0x1cdc>
 800ddf8:	18c00404 	addi	r3,r3,16
 800ddfc:	10800044 	addi	r2,r2,1
 800de00:	45000015 	stw	r20,0(r8)
 800de04:	45800115 	stw	r22,4(r8)
 800de08:	d8c02015 	stw	r3,128(sp)
 800de0c:	d8801f15 	stw	r2,124(sp)
 800de10:	e0bff60e 	bge	fp,r2,800ddec <__alt_data_end+0xfc00ddec>
 800de14:	d9801e04 	addi	r6,sp,120
 800de18:	b80b883a 	mov	r5,r23
 800de1c:	9809883a 	mov	r4,r19
 800de20:	80139600 	call	8013960 <__sprint_r>
 800de24:	103a411e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800de28:	d8c02017 	ldw	r3,128(sp)
 800de2c:	d8801f17 	ldw	r2,124(sp)
 800de30:	da000404 	addi	r8,sp,16
 800de34:	003fee06 	br	800ddf0 <__alt_data_end+0xfc00ddf0>
 800de38:	00bfffc4 	movi	r2,-1
 800de3c:	003a3f06 	br	800c73c <__alt_data_end+0xfc00c73c>
 800de40:	008011c4 	movi	r2,71
 800de44:	1440b816 	blt	r2,r17,800e128 <___vfprintf_internal_r+0x1e0c>
 800de48:	04020d74 	movhi	r16,2101
 800de4c:	84214704 	addi	r16,r16,-31460
 800de50:	00c000c4 	movi	r3,3
 800de54:	00bfdfc4 	movi	r2,-129
 800de58:	d8c02915 	stw	r3,164(sp)
 800de5c:	90a4703a 	and	r18,r18,r2
 800de60:	df002783 	ldbu	fp,158(sp)
 800de64:	d8c02b15 	stw	r3,172(sp)
 800de68:	d8002a15 	stw	zero,168(sp)
 800de6c:	d8003215 	stw	zero,200(sp)
 800de70:	003b0706 	br	800ca90 <__alt_data_end+0xfc00ca90>
 800de74:	d8c02e17 	ldw	r3,184(sp)
 800de78:	1cc00017 	ldw	r19,0(r3)
 800de7c:	18c00104 	addi	r3,r3,4
 800de80:	d8c02e15 	stw	r3,184(sp)
 800de84:	982dd7fa 	srai	r22,r19,31
 800de88:	b005883a 	mov	r2,r22
 800de8c:	003a7706 	br	800c86c <__alt_data_end+0xfc00c86c>
 800de90:	d8c02e17 	ldw	r3,184(sp)
 800de94:	d9002f17 	ldw	r4,188(sp)
 800de98:	18800017 	ldw	r2,0(r3)
 800de9c:	18c00104 	addi	r3,r3,4
 800dea0:	d8c02e15 	stw	r3,184(sp)
 800dea4:	11000015 	stw	r4,0(r2)
 800dea8:	00395406 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800deac:	d9002e17 	ldw	r4,184(sp)
 800deb0:	002d883a 	mov	r22,zero
 800deb4:	24c00017 	ldw	r19,0(r4)
 800deb8:	21000104 	addi	r4,r4,4
 800debc:	d9002e15 	stw	r4,184(sp)
 800dec0:	003c0706 	br	800cee0 <__alt_data_end+0xfc00cee0>
 800dec4:	d9402e17 	ldw	r5,184(sp)
 800dec8:	d8c02a17 	ldw	r3,168(sp)
 800decc:	002d883a 	mov	r22,zero
 800ded0:	28800104 	addi	r2,r5,4
 800ded4:	2cc0000b 	ldhu	r19,0(r5)
 800ded8:	183dc10e 	bge	r3,zero,800d5e0 <__alt_data_end+0xfc00d5e0>
 800dedc:	003f7506 	br	800dcb4 <__alt_data_end+0xfc00dcb4>
 800dee0:	04020d74 	movhi	r16,2101
 800dee4:	84214504 	addi	r16,r16,-31468
 800dee8:	003aa706 	br	800c988 <__alt_data_end+0xfc00c988>
 800deec:	d9002d17 	ldw	r4,180(sp)
 800def0:	d9801e04 	addi	r6,sp,120
 800def4:	b80b883a 	mov	r5,r23
 800def8:	80139600 	call	8013960 <__sprint_r>
 800defc:	103a0b1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800df00:	dc402617 	ldw	r17,152(sp)
 800df04:	d8c02017 	ldw	r3,128(sp)
 800df08:	da000404 	addi	r8,sp,16
 800df0c:	003f9c06 	br	800dd80 <__alt_data_end+0xfc00dd80>
 800df10:	ac400043 	ldbu	r17,1(r21)
 800df14:	84000814 	ori	r16,r16,32
 800df18:	ad400044 	addi	r21,r21,1
 800df1c:	8c403fcc 	andi	r17,r17,255
 800df20:	8c40201c 	xori	r17,r17,128
 800df24:	8c7fe004 	addi	r17,r17,-128
 800df28:	00395e06 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800df2c:	d8c02e15 	stw	r3,184(sp)
 800df30:	0039883a 	mov	fp,zero
 800df34:	003e3506 	br	800d80c <__alt_data_end+0xfc00d80c>
 800df38:	d9002d17 	ldw	r4,180(sp)
 800df3c:	d9801e04 	addi	r6,sp,120
 800df40:	b80b883a 	mov	r5,r23
 800df44:	80139600 	call	8013960 <__sprint_r>
 800df48:	1039f81e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800df4c:	d8c02017 	ldw	r3,128(sp)
 800df50:	da000404 	addi	r8,sp,16
 800df54:	003cd006 	br	800d298 <__alt_data_end+0xfc00d298>
 800df58:	8009883a 	mov	r4,r16
 800df5c:	df003d15 	stw	fp,244(sp)
 800df60:	800c2840 	call	800c284 <strlen>
 800df64:	d8802b15 	stw	r2,172(sp)
 800df68:	da003d17 	ldw	r8,244(sp)
 800df6c:	103c200e 	bge	r2,zero,800cff0 <__alt_data_end+0xfc00cff0>
 800df70:	0005883a 	mov	r2,zero
 800df74:	003c1e06 	br	800cff0 <__alt_data_end+0xfc00cff0>
 800df78:	d9002d17 	ldw	r4,180(sp)
 800df7c:	d9801e04 	addi	r6,sp,120
 800df80:	b80b883a 	mov	r5,r23
 800df84:	80139600 	call	8013960 <__sprint_r>
 800df88:	1039e81e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800df8c:	d8c02017 	ldw	r3,128(sp)
 800df90:	d8801f17 	ldw	r2,124(sp)
 800df94:	da000404 	addi	r8,sp,16
 800df98:	d9403317 	ldw	r5,204(sp)
 800df9c:	10800044 	addi	r2,r2,1
 800dfa0:	44000015 	stw	r16,0(r8)
 800dfa4:	28c7883a 	add	r3,r5,r3
 800dfa8:	003b5b06 	br	800cd18 <__alt_data_end+0xfc00cd18>
 800dfac:	01020d74 	movhi	r4,2101
 800dfb0:	21215984 	addi	r4,r4,-31386
 800dfb4:	d9003515 	stw	r4,212(sp)
 800dfb8:	003af206 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800dfbc:	013fffc4 	movi	r4,-1
 800dfc0:	003a0806 	br	800c7e4 <__alt_data_end+0xfc00c7e4>
 800dfc4:	0023883a 	mov	r17,zero
 800dfc8:	003d9d06 	br	800d640 <__alt_data_end+0xfc00d640>
 800dfcc:	d9002d17 	ldw	r4,180(sp)
 800dfd0:	d9801e04 	addi	r6,sp,120
 800dfd4:	b80b883a 	mov	r5,r23
 800dfd8:	80139600 	call	8013960 <__sprint_r>
 800dfdc:	1039d31e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800dfe0:	d8c02017 	ldw	r3,128(sp)
 800dfe4:	da000404 	addi	r8,sp,16
 800dfe8:	003d9406 	br	800d63c <__alt_data_end+0xfc00d63c>
 800dfec:	01020d74 	movhi	r4,2101
 800dff0:	21215584 	addi	r4,r4,-31402
 800dff4:	d9002c15 	stw	r4,176(sp)
 800dff8:	d9002c17 	ldw	r4,176(sp)
 800dffc:	1c47883a 	add	r3,r3,r17
 800e000:	10800044 	addi	r2,r2,1
 800e004:	41000015 	stw	r4,0(r8)
 800e008:	44400115 	stw	r17,4(r8)
 800e00c:	d8c02015 	stw	r3,128(sp)
 800e010:	d8801f15 	stw	r2,124(sp)
 800e014:	010001c4 	movi	r4,7
 800e018:	20bfd716 	blt	r4,r2,800df78 <__alt_data_end+0xfc00df78>
 800e01c:	42000204 	addi	r8,r8,8
 800e020:	003fdd06 	br	800df98 <__alt_data_end+0xfc00df98>
 800e024:	d9002d17 	ldw	r4,180(sp)
 800e028:	d9801e04 	addi	r6,sp,120
 800e02c:	b80b883a 	mov	r5,r23
 800e030:	80139600 	call	8013960 <__sprint_r>
 800e034:	1039bd1e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800e038:	d8802617 	ldw	r2,152(sp)
 800e03c:	d8c02017 	ldw	r3,128(sp)
 800e040:	da000404 	addi	r8,sp,16
 800e044:	003e1006 	br	800d888 <__alt_data_end+0xfc00d888>
 800e048:	00800044 	movi	r2,1
 800e04c:	10803fcc 	andi	r2,r2,255
 800e050:	00c00044 	movi	r3,1
 800e054:	10fa0d26 	beq	r2,r3,800c88c <__alt_data_end+0xfc00c88c>
 800e058:	00c00084 	movi	r3,2
 800e05c:	10fbaf26 	beq	r2,r3,800cf1c <__alt_data_end+0xfc00cf1c>
 800e060:	003a6d06 	br	800ca18 <__alt_data_end+0xfc00ca18>
 800e064:	01020d74 	movhi	r4,2101
 800e068:	21215984 	addi	r4,r4,-31386
 800e06c:	d9003515 	stw	r4,212(sp)
 800e070:	003b5406 	br	800cdc4 <__alt_data_end+0xfc00cdc4>
 800e074:	d8802a17 	ldw	r2,168(sp)
 800e078:	00c00184 	movi	r3,6
 800e07c:	1880012e 	bgeu	r3,r2,800e084 <___vfprintf_internal_r+0x1d68>
 800e080:	1805883a 	mov	r2,r3
 800e084:	d8802b15 	stw	r2,172(sp)
 800e088:	1000ef16 	blt	r2,zero,800e448 <___vfprintf_internal_r+0x212c>
 800e08c:	04020d74 	movhi	r16,2101
 800e090:	d8802915 	stw	r2,164(sp)
 800e094:	dcc02e15 	stw	r19,184(sp)
 800e098:	d8002a15 	stw	zero,168(sp)
 800e09c:	d8003215 	stw	zero,200(sp)
 800e0a0:	84215304 	addi	r16,r16,-31412
 800e0a4:	0039883a 	mov	fp,zero
 800e0a8:	003a8006 	br	800caac <__alt_data_end+0xfc00caac>
 800e0ac:	0021883a 	mov	r16,zero
 800e0b0:	003e0706 	br	800d8d0 <__alt_data_end+0xfc00d8d0>
 800e0b4:	d9002d17 	ldw	r4,180(sp)
 800e0b8:	d9801e04 	addi	r6,sp,120
 800e0bc:	b80b883a 	mov	r5,r23
 800e0c0:	80139600 	call	8013960 <__sprint_r>
 800e0c4:	1039991e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800e0c8:	d8802617 	ldw	r2,152(sp)
 800e0cc:	d9403317 	ldw	r5,204(sp)
 800e0d0:	d8c02017 	ldw	r3,128(sp)
 800e0d4:	da000404 	addi	r8,sp,16
 800e0d8:	2885c83a 	sub	r2,r5,r2
 800e0dc:	003dfb06 	br	800d8cc <__alt_data_end+0xfc00d8cc>
 800e0e0:	9080004c 	andi	r2,r18,1
 800e0e4:	103e8f1e 	bne	r2,zero,800db24 <__alt_data_end+0xfc00db24>
 800e0e8:	d8802117 	ldw	r2,132(sp)
 800e0ec:	003e9e06 	br	800db68 <__alt_data_end+0xfc00db68>
 800e0f0:	1025883a 	mov	r18,r2
 800e0f4:	0039883a 	mov	fp,zero
 800e0f8:	00800084 	movi	r2,2
 800e0fc:	003fd306 	br	800e04c <__alt_data_end+0xfc00e04c>
 800e100:	07000b44 	movi	fp,45
 800e104:	df002785 	stb	fp,158(sp)
 800e108:	003a1b06 	br	800c978 <__alt_data_end+0xfc00c978>
 800e10c:	00c00b44 	movi	r3,45
 800e110:	d8c02785 	stb	r3,158(sp)
 800e114:	d8802915 	stw	r2,164(sp)
 800e118:	dc802c17 	ldw	r18,176(sp)
 800e11c:	d8002a15 	stw	zero,168(sp)
 800e120:	07000b44 	movi	fp,45
 800e124:	003a5e06 	br	800caa0 <__alt_data_end+0xfc00caa0>
 800e128:	04020d74 	movhi	r16,2101
 800e12c:	84214804 	addi	r16,r16,-31456
 800e130:	003f4706 	br	800de50 <__alt_data_end+0xfc00de50>
 800e134:	d9002e17 	ldw	r4,184(sp)
 800e138:	d9402f17 	ldw	r5,188(sp)
 800e13c:	20800017 	ldw	r2,0(r4)
 800e140:	21000104 	addi	r4,r4,4
 800e144:	d9002e15 	stw	r4,184(sp)
 800e148:	11400015 	stw	r5,0(r2)
 800e14c:	0038ab06 	br	800c3fc <__alt_data_end+0xfc00c3fc>
 800e150:	dd802617 	ldw	r22,152(sp)
 800e154:	00bfff44 	movi	r2,-3
 800e158:	b0801c16 	blt	r22,r2,800e1cc <___vfprintf_internal_r+0x1eb0>
 800e15c:	d9402a17 	ldw	r5,168(sp)
 800e160:	2d801a16 	blt	r5,r22,800e1cc <___vfprintf_internal_r+0x1eb0>
 800e164:	dd803215 	stw	r22,200(sp)
 800e168:	003e8906 	br	800db90 <__alt_data_end+0xfc00db90>
 800e16c:	01020d74 	movhi	r4,2101
 800e170:	21215584 	addi	r4,r4,-31402
 800e174:	d9002c15 	stw	r4,176(sp)
 800e178:	003c9106 	br	800d3c0 <__alt_data_end+0xfc00d3c0>
 800e17c:	e005883a 	mov	r2,fp
 800e180:	003e7906 	br	800db68 <__alt_data_end+0xfc00db68>
 800e184:	d9002a17 	ldw	r4,168(sp)
 800e188:	df002783 	ldbu	fp,158(sp)
 800e18c:	dcc02e15 	stw	r19,184(sp)
 800e190:	d9002915 	stw	r4,164(sp)
 800e194:	d9002b15 	stw	r4,172(sp)
 800e198:	d8002a15 	stw	zero,168(sp)
 800e19c:	d8003215 	stw	zero,200(sp)
 800e1a0:	003a3b06 	br	800ca90 <__alt_data_end+0xfc00ca90>
 800e1a4:	9080004c 	andi	r2,r18,1
 800e1a8:	0039883a 	mov	fp,zero
 800e1ac:	10000426 	beq	r2,zero,800e1c0 <___vfprintf_internal_r+0x1ea4>
 800e1b0:	00800c04 	movi	r2,48
 800e1b4:	dc001dc4 	addi	r16,sp,119
 800e1b8:	d8801dc5 	stb	r2,119(sp)
 800e1bc:	003b6406 	br	800cf50 <__alt_data_end+0xfc00cf50>
 800e1c0:	d8002b15 	stw	zero,172(sp)
 800e1c4:	dc001e04 	addi	r16,sp,120
 800e1c8:	003a2b06 	br	800ca78 <__alt_data_end+0xfc00ca78>
 800e1cc:	8c7fff84 	addi	r17,r17,-2
 800e1d0:	b5bfffc4 	addi	r22,r22,-1
 800e1d4:	dd802615 	stw	r22,152(sp)
 800e1d8:	dc4022c5 	stb	r17,139(sp)
 800e1dc:	b000bf16 	blt	r22,zero,800e4dc <___vfprintf_internal_r+0x21c0>
 800e1e0:	00800ac4 	movi	r2,43
 800e1e4:	d8802305 	stb	r2,140(sp)
 800e1e8:	00800244 	movi	r2,9
 800e1ec:	15807016 	blt	r2,r22,800e3b0 <___vfprintf_internal_r+0x2094>
 800e1f0:	00800c04 	movi	r2,48
 800e1f4:	b5800c04 	addi	r22,r22,48
 800e1f8:	d8802345 	stb	r2,141(sp)
 800e1fc:	dd802385 	stb	r22,142(sp)
 800e200:	d88023c4 	addi	r2,sp,143
 800e204:	df0022c4 	addi	fp,sp,139
 800e208:	d8c03317 	ldw	r3,204(sp)
 800e20c:	1739c83a 	sub	fp,r2,fp
 800e210:	d9003317 	ldw	r4,204(sp)
 800e214:	e0c7883a 	add	r3,fp,r3
 800e218:	df003a15 	stw	fp,232(sp)
 800e21c:	d8c02b15 	stw	r3,172(sp)
 800e220:	00800044 	movi	r2,1
 800e224:	1100b30e 	bge	r2,r4,800e4f4 <___vfprintf_internal_r+0x21d8>
 800e228:	d8c02b17 	ldw	r3,172(sp)
 800e22c:	18c00044 	addi	r3,r3,1
 800e230:	d8c02b15 	stw	r3,172(sp)
 800e234:	1805883a 	mov	r2,r3
 800e238:	1800ac16 	blt	r3,zero,800e4ec <___vfprintf_internal_r+0x21d0>
 800e23c:	d8003215 	stw	zero,200(sp)
 800e240:	003e5d06 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800e244:	d9002d17 	ldw	r4,180(sp)
 800e248:	d9801e04 	addi	r6,sp,120
 800e24c:	b80b883a 	mov	r5,r23
 800e250:	80139600 	call	8013960 <__sprint_r>
 800e254:	1039351e 	bne	r2,zero,800c72c <__alt_data_end+0xfc00c72c>
 800e258:	dc402617 	ldw	r17,152(sp)
 800e25c:	d8c02017 	ldw	r3,128(sp)
 800e260:	d8801f17 	ldw	r2,124(sp)
 800e264:	da000404 	addi	r8,sp,16
 800e268:	003ed606 	br	800ddc4 <__alt_data_end+0xfc00ddc4>
 800e26c:	182b883a 	mov	r21,r3
 800e270:	d8002a15 	stw	zero,168(sp)
 800e274:	00388c06 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800e278:	d8802a17 	ldw	r2,168(sp)
 800e27c:	103e071e 	bne	r2,zero,800da9c <__alt_data_end+0xfc00da9c>
 800e280:	dc002a15 	stw	r16,168(sp)
 800e284:	003e0506 	br	800da9c <__alt_data_end+0xfc00da9c>
 800e288:	d9002a17 	ldw	r4,168(sp)
 800e28c:	20c00044 	addi	r3,r4,1
 800e290:	003e0f06 	br	800dad0 <__alt_data_end+0xfc00dad0>
 800e294:	01400184 	movi	r5,6
 800e298:	d9402a15 	stw	r5,168(sp)
 800e29c:	003dff06 	br	800da9c <__alt_data_end+0xfc00da9c>
 800e2a0:	d8802104 	addi	r2,sp,132
 800e2a4:	d8800315 	stw	r2,12(sp)
 800e2a8:	d8802504 	addi	r2,sp,148
 800e2ac:	d8800215 	stw	r2,8(sp)
 800e2b0:	d8802604 	addi	r2,sp,152
 800e2b4:	d8800115 	stw	r2,4(sp)
 800e2b8:	d8802a17 	ldw	r2,168(sp)
 800e2bc:	d9403617 	ldw	r5,216(sp)
 800e2c0:	d9002d17 	ldw	r4,180(sp)
 800e2c4:	d8800015 	stw	r2,0(sp)
 800e2c8:	01c000c4 	movi	r7,3
 800e2cc:	980d883a 	mov	r6,r19
 800e2d0:	da003d15 	stw	r8,244(sp)
 800e2d4:	800ea4c0 	call	800ea4c <_dtoa_r>
 800e2d8:	d8c02a17 	ldw	r3,168(sp)
 800e2dc:	da003d17 	ldw	r8,244(sp)
 800e2e0:	1021883a 	mov	r16,r2
 800e2e4:	10f9883a 	add	fp,r2,r3
 800e2e8:	81000007 	ldb	r4,0(r16)
 800e2ec:	00800c04 	movi	r2,48
 800e2f0:	20805e26 	beq	r4,r2,800e46c <___vfprintf_internal_r+0x2150>
 800e2f4:	d8c02617 	ldw	r3,152(sp)
 800e2f8:	e0f9883a 	add	fp,fp,r3
 800e2fc:	003e0a06 	br	800db28 <__alt_data_end+0xfc00db28>
 800e300:	00c00b44 	movi	r3,45
 800e304:	24e0003c 	xorhi	r19,r4,32768
 800e308:	d8c02905 	stb	r3,164(sp)
 800e30c:	003de906 	br	800dab4 <__alt_data_end+0xfc00dab4>
 800e310:	d8c03217 	ldw	r3,200(sp)
 800e314:	00c07a0e 	bge	zero,r3,800e500 <___vfprintf_internal_r+0x21e4>
 800e318:	00800044 	movi	r2,1
 800e31c:	d9003317 	ldw	r4,204(sp)
 800e320:	1105883a 	add	r2,r2,r4
 800e324:	d8802b15 	stw	r2,172(sp)
 800e328:	10004e16 	blt	r2,zero,800e464 <___vfprintf_internal_r+0x2148>
 800e32c:	044019c4 	movi	r17,103
 800e330:	003e2106 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800e334:	d9002a17 	ldw	r4,168(sp)
 800e338:	d8802104 	addi	r2,sp,132
 800e33c:	d8800315 	stw	r2,12(sp)
 800e340:	d9000015 	stw	r4,0(sp)
 800e344:	d8802504 	addi	r2,sp,148
 800e348:	d9403617 	ldw	r5,216(sp)
 800e34c:	d9002d17 	ldw	r4,180(sp)
 800e350:	d8800215 	stw	r2,8(sp)
 800e354:	d8802604 	addi	r2,sp,152
 800e358:	d8800115 	stw	r2,4(sp)
 800e35c:	01c000c4 	movi	r7,3
 800e360:	980d883a 	mov	r6,r19
 800e364:	da003d15 	stw	r8,244(sp)
 800e368:	800ea4c0 	call	800ea4c <_dtoa_r>
 800e36c:	d8c02a17 	ldw	r3,168(sp)
 800e370:	da003d17 	ldw	r8,244(sp)
 800e374:	1021883a 	mov	r16,r2
 800e378:	00801184 	movi	r2,70
 800e37c:	80f9883a 	add	fp,r16,r3
 800e380:	88bfd926 	beq	r17,r2,800e2e8 <__alt_data_end+0xfc00e2e8>
 800e384:	003de806 	br	800db28 <__alt_data_end+0xfc00db28>
 800e388:	d9002a17 	ldw	r4,168(sp)
 800e38c:	00c04d0e 	bge	zero,r3,800e4c4 <___vfprintf_internal_r+0x21a8>
 800e390:	2000441e 	bne	r4,zero,800e4a4 <___vfprintf_internal_r+0x2188>
 800e394:	9480004c 	andi	r18,r18,1
 800e398:	9000421e 	bne	r18,zero,800e4a4 <___vfprintf_internal_r+0x2188>
 800e39c:	1805883a 	mov	r2,r3
 800e3a0:	18006f16 	blt	r3,zero,800e560 <___vfprintf_internal_r+0x2244>
 800e3a4:	d8c03217 	ldw	r3,200(sp)
 800e3a8:	d8c02b15 	stw	r3,172(sp)
 800e3ac:	003e0206 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800e3b0:	df0022c4 	addi	fp,sp,139
 800e3b4:	dc002a15 	stw	r16,168(sp)
 800e3b8:	4027883a 	mov	r19,r8
 800e3bc:	e021883a 	mov	r16,fp
 800e3c0:	b009883a 	mov	r4,r22
 800e3c4:	01400284 	movi	r5,10
 800e3c8:	8007e240 	call	8007e24 <__modsi3>
 800e3cc:	10800c04 	addi	r2,r2,48
 800e3d0:	843fffc4 	addi	r16,r16,-1
 800e3d4:	b009883a 	mov	r4,r22
 800e3d8:	01400284 	movi	r5,10
 800e3dc:	80800005 	stb	r2,0(r16)
 800e3e0:	8007da00 	call	8007da0 <__divsi3>
 800e3e4:	102d883a 	mov	r22,r2
 800e3e8:	00800244 	movi	r2,9
 800e3ec:	15bff416 	blt	r2,r22,800e3c0 <__alt_data_end+0xfc00e3c0>
 800e3f0:	9811883a 	mov	r8,r19
 800e3f4:	b0800c04 	addi	r2,r22,48
 800e3f8:	8027883a 	mov	r19,r16
 800e3fc:	997fffc4 	addi	r5,r19,-1
 800e400:	98bfffc5 	stb	r2,-1(r19)
 800e404:	dc002a17 	ldw	r16,168(sp)
 800e408:	2f006d2e 	bgeu	r5,fp,800e5c0 <___vfprintf_internal_r+0x22a4>
 800e40c:	d9c02384 	addi	r7,sp,142
 800e410:	3ccfc83a 	sub	r7,r7,r19
 800e414:	d9002344 	addi	r4,sp,141
 800e418:	e1cf883a 	add	r7,fp,r7
 800e41c:	00000106 	br	800e424 <___vfprintf_internal_r+0x2108>
 800e420:	28800003 	ldbu	r2,0(r5)
 800e424:	20800005 	stb	r2,0(r4)
 800e428:	21000044 	addi	r4,r4,1
 800e42c:	29400044 	addi	r5,r5,1
 800e430:	393ffb1e 	bne	r7,r4,800e420 <__alt_data_end+0xfc00e420>
 800e434:	d8802304 	addi	r2,sp,140
 800e438:	14c5c83a 	sub	r2,r2,r19
 800e43c:	d8c02344 	addi	r3,sp,141
 800e440:	1885883a 	add	r2,r3,r2
 800e444:	003f7006 	br	800e208 <__alt_data_end+0xfc00e208>
 800e448:	0005883a 	mov	r2,zero
 800e44c:	003f0f06 	br	800e08c <__alt_data_end+0xfc00e08c>
 800e450:	d8c03217 	ldw	r3,200(sp)
 800e454:	18c00044 	addi	r3,r3,1
 800e458:	d8c02b15 	stw	r3,172(sp)
 800e45c:	1805883a 	mov	r2,r3
 800e460:	183fb20e 	bge	r3,zero,800e32c <__alt_data_end+0xfc00e32c>
 800e464:	0005883a 	mov	r2,zero
 800e468:	003fb006 	br	800e32c <__alt_data_end+0xfc00e32c>
 800e46c:	d9003617 	ldw	r4,216(sp)
 800e470:	000d883a 	mov	r6,zero
 800e474:	000f883a 	mov	r7,zero
 800e478:	980b883a 	mov	r5,r19
 800e47c:	d8c03c15 	stw	r3,240(sp)
 800e480:	da003d15 	stw	r8,244(sp)
 800e484:	800a72c0 	call	800a72c <__eqdf2>
 800e488:	d8c03c17 	ldw	r3,240(sp)
 800e48c:	da003d17 	ldw	r8,244(sp)
 800e490:	103f9826 	beq	r2,zero,800e2f4 <__alt_data_end+0xfc00e2f4>
 800e494:	00800044 	movi	r2,1
 800e498:	10c7c83a 	sub	r3,r2,r3
 800e49c:	d8c02615 	stw	r3,152(sp)
 800e4a0:	003f9506 	br	800e2f8 <__alt_data_end+0xfc00e2f8>
 800e4a4:	d9002a17 	ldw	r4,168(sp)
 800e4a8:	d8c03217 	ldw	r3,200(sp)
 800e4ac:	20800044 	addi	r2,r4,1
 800e4b0:	1885883a 	add	r2,r3,r2
 800e4b4:	d8802b15 	stw	r2,172(sp)
 800e4b8:	103dbf0e 	bge	r2,zero,800dbb8 <__alt_data_end+0xfc00dbb8>
 800e4bc:	0005883a 	mov	r2,zero
 800e4c0:	003dbd06 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800e4c4:	2000201e 	bne	r4,zero,800e548 <___vfprintf_internal_r+0x222c>
 800e4c8:	9480004c 	andi	r18,r18,1
 800e4cc:	90001e1e 	bne	r18,zero,800e548 <___vfprintf_internal_r+0x222c>
 800e4d0:	00800044 	movi	r2,1
 800e4d4:	d8802b15 	stw	r2,172(sp)
 800e4d8:	003db706 	br	800dbb8 <__alt_data_end+0xfc00dbb8>
 800e4dc:	00800b44 	movi	r2,45
 800e4e0:	05adc83a 	sub	r22,zero,r22
 800e4e4:	d8802305 	stb	r2,140(sp)
 800e4e8:	003f3f06 	br	800e1e8 <__alt_data_end+0xfc00e1e8>
 800e4ec:	0005883a 	mov	r2,zero
 800e4f0:	003f5206 	br	800e23c <__alt_data_end+0xfc00e23c>
 800e4f4:	90a4703a 	and	r18,r18,r2
 800e4f8:	903f4e26 	beq	r18,zero,800e234 <__alt_data_end+0xfc00e234>
 800e4fc:	003f4a06 	br	800e228 <__alt_data_end+0xfc00e228>
 800e500:	00800084 	movi	r2,2
 800e504:	10c5c83a 	sub	r2,r2,r3
 800e508:	003f8406 	br	800e31c <__alt_data_end+0xfc00e31c>
 800e50c:	d9402e17 	ldw	r5,184(sp)
 800e510:	d9002e17 	ldw	r4,184(sp)
 800e514:	ac400043 	ldbu	r17,1(r21)
 800e518:	29400017 	ldw	r5,0(r5)
 800e51c:	20800104 	addi	r2,r4,4
 800e520:	d8802e15 	stw	r2,184(sp)
 800e524:	d9402a15 	stw	r5,168(sp)
 800e528:	182b883a 	mov	r21,r3
 800e52c:	283e7b0e 	bge	r5,zero,800df1c <__alt_data_end+0xfc00df1c>
 800e530:	8c403fcc 	andi	r17,r17,255
 800e534:	017fffc4 	movi	r5,-1
 800e538:	8c40201c 	xori	r17,r17,128
 800e53c:	d9402a15 	stw	r5,168(sp)
 800e540:	8c7fe004 	addi	r17,r17,-128
 800e544:	0037d706 	br	800c4a4 <__alt_data_end+0xfc00c4a4>
 800e548:	d8c02a17 	ldw	r3,168(sp)
 800e54c:	18c00084 	addi	r3,r3,2
 800e550:	d8c02b15 	stw	r3,172(sp)
 800e554:	1805883a 	mov	r2,r3
 800e558:	183d970e 	bge	r3,zero,800dbb8 <__alt_data_end+0xfc00dbb8>
 800e55c:	003fd706 	br	800e4bc <__alt_data_end+0xfc00e4bc>
 800e560:	0005883a 	mov	r2,zero
 800e564:	003f8f06 	br	800e3a4 <__alt_data_end+0xfc00e3a4>
 800e568:	9080004c 	andi	r2,r18,1
 800e56c:	103f821e 	bne	r2,zero,800e378 <__alt_data_end+0xfc00e378>
 800e570:	d8802117 	ldw	r2,132(sp)
 800e574:	1405c83a 	sub	r2,r2,r16
 800e578:	d8803315 	stw	r2,204(sp)
 800e57c:	b47ef426 	beq	r22,r17,800e150 <__alt_data_end+0xfc00e150>
 800e580:	dd802617 	ldw	r22,152(sp)
 800e584:	003f1206 	br	800e1d0 <__alt_data_end+0xfc00e1d0>
 800e588:	d8c02b03 	ldbu	r3,172(sp)
 800e58c:	d8c02785 	stb	r3,158(sp)
 800e590:	0038df06 	br	800c910 <__alt_data_end+0xfc00c910>
 800e594:	d8c02b03 	ldbu	r3,172(sp)
 800e598:	d8c02785 	stb	r3,158(sp)
 800e59c:	0038aa06 	br	800c848 <__alt_data_end+0xfc00c848>
 800e5a0:	d8c02b03 	ldbu	r3,172(sp)
 800e5a4:	d8c02785 	stb	r3,158(sp)
 800e5a8:	003a4306 	br	800ceb8 <__alt_data_end+0xfc00ceb8>
 800e5ac:	d8c02b03 	ldbu	r3,172(sp)
 800e5b0:	d8c02785 	stb	r3,158(sp)
 800e5b4:	003af506 	br	800d18c <__alt_data_end+0xfc00d18c>
 800e5b8:	0005883a 	mov	r2,zero
 800e5bc:	003d7b06 	br	800dbac <__alt_data_end+0xfc00dbac>
 800e5c0:	d8802344 	addi	r2,sp,141
 800e5c4:	003f1006 	br	800e208 <__alt_data_end+0xfc00e208>
 800e5c8:	d8c02b03 	ldbu	r3,172(sp)
 800e5cc:	d8c02785 	stb	r3,158(sp)
 800e5d0:	0038fd06 	br	800c9c8 <__alt_data_end+0xfc00c9c8>
 800e5d4:	d8c02b03 	ldbu	r3,172(sp)
 800e5d8:	d8c02785 	stb	r3,158(sp)
 800e5dc:	003a9706 	br	800d03c <__alt_data_end+0xfc00d03c>
 800e5e0:	d8c02b03 	ldbu	r3,172(sp)
 800e5e4:	d8c02785 	stb	r3,158(sp)
 800e5e8:	003a1806 	br	800ce4c <__alt_data_end+0xfc00ce4c>
 800e5ec:	d8c02b03 	ldbu	r3,172(sp)
 800e5f0:	d8c02785 	stb	r3,158(sp)
 800e5f4:	003abe06 	br	800d0f0 <__alt_data_end+0xfc00d0f0>

0800e5f8 <__vfprintf_internal>:
 800e5f8:	00820d74 	movhi	r2,2101
 800e5fc:	10a88304 	addi	r2,r2,-24052
 800e600:	300f883a 	mov	r7,r6
 800e604:	280d883a 	mov	r6,r5
 800e608:	200b883a 	mov	r5,r4
 800e60c:	11000017 	ldw	r4,0(r2)
 800e610:	800c31c1 	jmpi	800c31c <___vfprintf_internal_r>

0800e614 <__sbprintf>:
 800e614:	2880030b 	ldhu	r2,12(r5)
 800e618:	2ac01917 	ldw	r11,100(r5)
 800e61c:	2a80038b 	ldhu	r10,14(r5)
 800e620:	2a400717 	ldw	r9,28(r5)
 800e624:	2a000917 	ldw	r8,36(r5)
 800e628:	defee204 	addi	sp,sp,-1144
 800e62c:	00c10004 	movi	r3,1024
 800e630:	dc011a15 	stw	r16,1128(sp)
 800e634:	10bfff4c 	andi	r2,r2,65533
 800e638:	2821883a 	mov	r16,r5
 800e63c:	d8cb883a 	add	r5,sp,r3
 800e640:	dc811c15 	stw	r18,1136(sp)
 800e644:	dc411b15 	stw	r17,1132(sp)
 800e648:	dfc11d15 	stw	ra,1140(sp)
 800e64c:	2025883a 	mov	r18,r4
 800e650:	d881030d 	sth	r2,1036(sp)
 800e654:	dac11915 	stw	r11,1124(sp)
 800e658:	da81038d 	sth	r10,1038(sp)
 800e65c:	da410715 	stw	r9,1052(sp)
 800e660:	da010915 	stw	r8,1060(sp)
 800e664:	dec10015 	stw	sp,1024(sp)
 800e668:	dec10415 	stw	sp,1040(sp)
 800e66c:	d8c10215 	stw	r3,1032(sp)
 800e670:	d8c10515 	stw	r3,1044(sp)
 800e674:	d8010615 	stw	zero,1048(sp)
 800e678:	800c31c0 	call	800c31c <___vfprintf_internal_r>
 800e67c:	1023883a 	mov	r17,r2
 800e680:	10000416 	blt	r2,zero,800e694 <__sbprintf+0x80>
 800e684:	d9410004 	addi	r5,sp,1024
 800e688:	9009883a 	mov	r4,r18
 800e68c:	80102f00 	call	80102f0 <_fflush_r>
 800e690:	10000d1e 	bne	r2,zero,800e6c8 <__sbprintf+0xb4>
 800e694:	d881030b 	ldhu	r2,1036(sp)
 800e698:	1080100c 	andi	r2,r2,64
 800e69c:	10000326 	beq	r2,zero,800e6ac <__sbprintf+0x98>
 800e6a0:	8080030b 	ldhu	r2,12(r16)
 800e6a4:	10801014 	ori	r2,r2,64
 800e6a8:	8080030d 	sth	r2,12(r16)
 800e6ac:	8805883a 	mov	r2,r17
 800e6b0:	dfc11d17 	ldw	ra,1140(sp)
 800e6b4:	dc811c17 	ldw	r18,1136(sp)
 800e6b8:	dc411b17 	ldw	r17,1132(sp)
 800e6bc:	dc011a17 	ldw	r16,1128(sp)
 800e6c0:	dec11e04 	addi	sp,sp,1144
 800e6c4:	f800283a 	ret
 800e6c8:	047fffc4 	movi	r17,-1
 800e6cc:	003ff106 	br	800e694 <__alt_data_end+0xfc00e694>

0800e6d0 <__swsetup_r>:
 800e6d0:	00820d74 	movhi	r2,2101
 800e6d4:	defffd04 	addi	sp,sp,-12
 800e6d8:	10a88304 	addi	r2,r2,-24052
 800e6dc:	dc400115 	stw	r17,4(sp)
 800e6e0:	2023883a 	mov	r17,r4
 800e6e4:	11000017 	ldw	r4,0(r2)
 800e6e8:	dc000015 	stw	r16,0(sp)
 800e6ec:	dfc00215 	stw	ra,8(sp)
 800e6f0:	2821883a 	mov	r16,r5
 800e6f4:	20000226 	beq	r4,zero,800e700 <__swsetup_r+0x30>
 800e6f8:	20800e17 	ldw	r2,56(r4)
 800e6fc:	10003126 	beq	r2,zero,800e7c4 <__swsetup_r+0xf4>
 800e700:	8080030b 	ldhu	r2,12(r16)
 800e704:	10c0020c 	andi	r3,r2,8
 800e708:	1009883a 	mov	r4,r2
 800e70c:	18000f26 	beq	r3,zero,800e74c <__swsetup_r+0x7c>
 800e710:	80c00417 	ldw	r3,16(r16)
 800e714:	18001526 	beq	r3,zero,800e76c <__swsetup_r+0x9c>
 800e718:	1100004c 	andi	r4,r2,1
 800e71c:	20001c1e 	bne	r4,zero,800e790 <__swsetup_r+0xc0>
 800e720:	1080008c 	andi	r2,r2,2
 800e724:	1000291e 	bne	r2,zero,800e7cc <__swsetup_r+0xfc>
 800e728:	80800517 	ldw	r2,20(r16)
 800e72c:	80800215 	stw	r2,8(r16)
 800e730:	18001c26 	beq	r3,zero,800e7a4 <__swsetup_r+0xd4>
 800e734:	0005883a 	mov	r2,zero
 800e738:	dfc00217 	ldw	ra,8(sp)
 800e73c:	dc400117 	ldw	r17,4(sp)
 800e740:	dc000017 	ldw	r16,0(sp)
 800e744:	dec00304 	addi	sp,sp,12
 800e748:	f800283a 	ret
 800e74c:	2080040c 	andi	r2,r4,16
 800e750:	10002e26 	beq	r2,zero,800e80c <__swsetup_r+0x13c>
 800e754:	2080010c 	andi	r2,r4,4
 800e758:	10001e1e 	bne	r2,zero,800e7d4 <__swsetup_r+0x104>
 800e75c:	80c00417 	ldw	r3,16(r16)
 800e760:	20800214 	ori	r2,r4,8
 800e764:	8080030d 	sth	r2,12(r16)
 800e768:	183feb1e 	bne	r3,zero,800e718 <__alt_data_end+0xfc00e718>
 800e76c:	1100a00c 	andi	r4,r2,640
 800e770:	01408004 	movi	r5,512
 800e774:	217fe826 	beq	r4,r5,800e718 <__alt_data_end+0xfc00e718>
 800e778:	800b883a 	mov	r5,r16
 800e77c:	8809883a 	mov	r4,r17
 800e780:	801128c0 	call	801128c <__smakebuf_r>
 800e784:	8080030b 	ldhu	r2,12(r16)
 800e788:	80c00417 	ldw	r3,16(r16)
 800e78c:	003fe206 	br	800e718 <__alt_data_end+0xfc00e718>
 800e790:	80800517 	ldw	r2,20(r16)
 800e794:	80000215 	stw	zero,8(r16)
 800e798:	0085c83a 	sub	r2,zero,r2
 800e79c:	80800615 	stw	r2,24(r16)
 800e7a0:	183fe41e 	bne	r3,zero,800e734 <__alt_data_end+0xfc00e734>
 800e7a4:	80c0030b 	ldhu	r3,12(r16)
 800e7a8:	0005883a 	mov	r2,zero
 800e7ac:	1900200c 	andi	r4,r3,128
 800e7b0:	203fe126 	beq	r4,zero,800e738 <__alt_data_end+0xfc00e738>
 800e7b4:	18c01014 	ori	r3,r3,64
 800e7b8:	80c0030d 	sth	r3,12(r16)
 800e7bc:	00bfffc4 	movi	r2,-1
 800e7c0:	003fdd06 	br	800e738 <__alt_data_end+0xfc00e738>
 800e7c4:	80106dc0 	call	80106dc <__sinit>
 800e7c8:	003fcd06 	br	800e700 <__alt_data_end+0xfc00e700>
 800e7cc:	0005883a 	mov	r2,zero
 800e7d0:	003fd606 	br	800e72c <__alt_data_end+0xfc00e72c>
 800e7d4:	81400c17 	ldw	r5,48(r16)
 800e7d8:	28000626 	beq	r5,zero,800e7f4 <__swsetup_r+0x124>
 800e7dc:	80801004 	addi	r2,r16,64
 800e7e0:	28800326 	beq	r5,r2,800e7f0 <__swsetup_r+0x120>
 800e7e4:	8809883a 	mov	r4,r17
 800e7e8:	80108500 	call	8010850 <_free_r>
 800e7ec:	8100030b 	ldhu	r4,12(r16)
 800e7f0:	80000c15 	stw	zero,48(r16)
 800e7f4:	80c00417 	ldw	r3,16(r16)
 800e7f8:	00bff6c4 	movi	r2,-37
 800e7fc:	1108703a 	and	r4,r2,r4
 800e800:	80000115 	stw	zero,4(r16)
 800e804:	80c00015 	stw	r3,0(r16)
 800e808:	003fd506 	br	800e760 <__alt_data_end+0xfc00e760>
 800e80c:	00800244 	movi	r2,9
 800e810:	88800015 	stw	r2,0(r17)
 800e814:	20801014 	ori	r2,r4,64
 800e818:	8080030d 	sth	r2,12(r16)
 800e81c:	00bfffc4 	movi	r2,-1
 800e820:	003fc506 	br	800e738 <__alt_data_end+0xfc00e738>

0800e824 <quorem>:
 800e824:	defff204 	addi	sp,sp,-56
 800e828:	ddc00b15 	stw	r23,44(sp)
 800e82c:	20800417 	ldw	r2,16(r4)
 800e830:	2dc00417 	ldw	r23,16(r5)
 800e834:	dfc00d15 	stw	ra,52(sp)
 800e838:	df000c15 	stw	fp,48(sp)
 800e83c:	dd800a15 	stw	r22,40(sp)
 800e840:	dd400915 	stw	r21,36(sp)
 800e844:	dd000815 	stw	r20,32(sp)
 800e848:	dcc00715 	stw	r19,28(sp)
 800e84c:	dc800615 	stw	r18,24(sp)
 800e850:	dc400515 	stw	r17,20(sp)
 800e854:	dc000415 	stw	r16,16(sp)
 800e858:	15c07a16 	blt	r2,r23,800ea44 <quorem+0x220>
 800e85c:	bdffffc4 	addi	r23,r23,-1
 800e860:	bde9883a 	add	r20,r23,r23
 800e864:	28c00504 	addi	r3,r5,20
 800e868:	a529883a 	add	r20,r20,r20
 800e86c:	1d39883a 	add	fp,r3,r20
 800e870:	24c00504 	addi	r19,r4,20
 800e874:	d9400215 	stw	r5,8(sp)
 800e878:	9d29883a 	add	r20,r19,r20
 800e87c:	e1400017 	ldw	r5,0(fp)
 800e880:	d9000015 	stw	r4,0(sp)
 800e884:	a1000017 	ldw	r4,0(r20)
 800e888:	29400044 	addi	r5,r5,1
 800e88c:	d8c00115 	stw	r3,4(sp)
 800e890:	dd000315 	stw	r20,12(sp)
 800e894:	8007e980 	call	8007e98 <__udivsi3>
 800e898:	1025883a 	mov	r18,r2
 800e89c:	10003026 	beq	r2,zero,800e960 <quorem+0x13c>
 800e8a0:	dc400117 	ldw	r17,4(sp)
 800e8a4:	9829883a 	mov	r20,r19
 800e8a8:	002d883a 	mov	r22,zero
 800e8ac:	0021883a 	mov	r16,zero
 800e8b0:	8d400017 	ldw	r21,0(r17)
 800e8b4:	900b883a 	mov	r5,r18
 800e8b8:	8c400104 	addi	r17,r17,4
 800e8bc:	a93fffcc 	andi	r4,r21,65535
 800e8c0:	8007f540 	call	8007f54 <__mulsi3>
 800e8c4:	a808d43a 	srli	r4,r21,16
 800e8c8:	900b883a 	mov	r5,r18
 800e8cc:	15ad883a 	add	r22,r2,r22
 800e8d0:	8007f540 	call	8007f54 <__mulsi3>
 800e8d4:	a1000017 	ldw	r4,0(r20)
 800e8d8:	b00cd43a 	srli	r6,r22,16
 800e8dc:	b0ffffcc 	andi	r3,r22,65535
 800e8e0:	217fffcc 	andi	r5,r4,65535
 800e8e4:	2c21883a 	add	r16,r5,r16
 800e8e8:	80c7c83a 	sub	r3,r16,r3
 800e8ec:	2008d43a 	srli	r4,r4,16
 800e8f0:	1185883a 	add	r2,r2,r6
 800e8f4:	1821d43a 	srai	r16,r3,16
 800e8f8:	117fffcc 	andi	r5,r2,65535
 800e8fc:	2149c83a 	sub	r4,r4,r5
 800e900:	2421883a 	add	r16,r4,r16
 800e904:	8008943a 	slli	r4,r16,16
 800e908:	18ffffcc 	andi	r3,r3,65535
 800e90c:	102cd43a 	srli	r22,r2,16
 800e910:	20c8b03a 	or	r4,r4,r3
 800e914:	a1000015 	stw	r4,0(r20)
 800e918:	8021d43a 	srai	r16,r16,16
 800e91c:	a5000104 	addi	r20,r20,4
 800e920:	e47fe32e 	bgeu	fp,r17,800e8b0 <__alt_data_end+0xfc00e8b0>
 800e924:	d8c00317 	ldw	r3,12(sp)
 800e928:	18800017 	ldw	r2,0(r3)
 800e92c:	10000c1e 	bne	r2,zero,800e960 <quorem+0x13c>
 800e930:	18bfff04 	addi	r2,r3,-4
 800e934:	9880082e 	bgeu	r19,r2,800e958 <quorem+0x134>
 800e938:	18ffff17 	ldw	r3,-4(r3)
 800e93c:	18000326 	beq	r3,zero,800e94c <quorem+0x128>
 800e940:	00000506 	br	800e958 <quorem+0x134>
 800e944:	10c00017 	ldw	r3,0(r2)
 800e948:	1800031e 	bne	r3,zero,800e958 <quorem+0x134>
 800e94c:	10bfff04 	addi	r2,r2,-4
 800e950:	bdffffc4 	addi	r23,r23,-1
 800e954:	98bffb36 	bltu	r19,r2,800e944 <__alt_data_end+0xfc00e944>
 800e958:	d8c00017 	ldw	r3,0(sp)
 800e95c:	1dc00415 	stw	r23,16(r3)
 800e960:	d9400217 	ldw	r5,8(sp)
 800e964:	d9000017 	ldw	r4,0(sp)
 800e968:	80129600 	call	8012960 <__mcmp>
 800e96c:	10002816 	blt	r2,zero,800ea10 <quorem+0x1ec>
 800e970:	dc400117 	ldw	r17,4(sp)
 800e974:	94800044 	addi	r18,r18,1
 800e978:	980d883a 	mov	r6,r19
 800e97c:	0007883a 	mov	r3,zero
 800e980:	31000017 	ldw	r4,0(r6)
 800e984:	89400017 	ldw	r5,0(r17)
 800e988:	31800104 	addi	r6,r6,4
 800e98c:	20bfffcc 	andi	r2,r4,65535
 800e990:	10c7883a 	add	r3,r2,r3
 800e994:	28bfffcc 	andi	r2,r5,65535
 800e998:	1885c83a 	sub	r2,r3,r2
 800e99c:	280ad43a 	srli	r5,r5,16
 800e9a0:	2008d43a 	srli	r4,r4,16
 800e9a4:	1007d43a 	srai	r3,r2,16
 800e9a8:	10bfffcc 	andi	r2,r2,65535
 800e9ac:	2149c83a 	sub	r4,r4,r5
 800e9b0:	20c9883a 	add	r4,r4,r3
 800e9b4:	200a943a 	slli	r5,r4,16
 800e9b8:	8c400104 	addi	r17,r17,4
 800e9bc:	2007d43a 	srai	r3,r4,16
 800e9c0:	2884b03a 	or	r2,r5,r2
 800e9c4:	30bfff15 	stw	r2,-4(r6)
 800e9c8:	e47fed2e 	bgeu	fp,r17,800e980 <__alt_data_end+0xfc00e980>
 800e9cc:	bdc5883a 	add	r2,r23,r23
 800e9d0:	1085883a 	add	r2,r2,r2
 800e9d4:	9887883a 	add	r3,r19,r2
 800e9d8:	18800017 	ldw	r2,0(r3)
 800e9dc:	10000c1e 	bne	r2,zero,800ea10 <quorem+0x1ec>
 800e9e0:	18bfff04 	addi	r2,r3,-4
 800e9e4:	9880082e 	bgeu	r19,r2,800ea08 <quorem+0x1e4>
 800e9e8:	18ffff17 	ldw	r3,-4(r3)
 800e9ec:	18000326 	beq	r3,zero,800e9fc <quorem+0x1d8>
 800e9f0:	00000506 	br	800ea08 <quorem+0x1e4>
 800e9f4:	10c00017 	ldw	r3,0(r2)
 800e9f8:	1800031e 	bne	r3,zero,800ea08 <quorem+0x1e4>
 800e9fc:	10bfff04 	addi	r2,r2,-4
 800ea00:	bdffffc4 	addi	r23,r23,-1
 800ea04:	98bffb36 	bltu	r19,r2,800e9f4 <__alt_data_end+0xfc00e9f4>
 800ea08:	d8c00017 	ldw	r3,0(sp)
 800ea0c:	1dc00415 	stw	r23,16(r3)
 800ea10:	9005883a 	mov	r2,r18
 800ea14:	dfc00d17 	ldw	ra,52(sp)
 800ea18:	df000c17 	ldw	fp,48(sp)
 800ea1c:	ddc00b17 	ldw	r23,44(sp)
 800ea20:	dd800a17 	ldw	r22,40(sp)
 800ea24:	dd400917 	ldw	r21,36(sp)
 800ea28:	dd000817 	ldw	r20,32(sp)
 800ea2c:	dcc00717 	ldw	r19,28(sp)
 800ea30:	dc800617 	ldw	r18,24(sp)
 800ea34:	dc400517 	ldw	r17,20(sp)
 800ea38:	dc000417 	ldw	r16,16(sp)
 800ea3c:	dec00e04 	addi	sp,sp,56
 800ea40:	f800283a 	ret
 800ea44:	0005883a 	mov	r2,zero
 800ea48:	003ff206 	br	800ea14 <__alt_data_end+0xfc00ea14>

0800ea4c <_dtoa_r>:
 800ea4c:	20801017 	ldw	r2,64(r4)
 800ea50:	deffde04 	addi	sp,sp,-136
 800ea54:	df002015 	stw	fp,128(sp)
 800ea58:	dcc01b15 	stw	r19,108(sp)
 800ea5c:	dc801a15 	stw	r18,104(sp)
 800ea60:	dc401915 	stw	r17,100(sp)
 800ea64:	dc001815 	stw	r16,96(sp)
 800ea68:	dfc02115 	stw	ra,132(sp)
 800ea6c:	ddc01f15 	stw	r23,124(sp)
 800ea70:	dd801e15 	stw	r22,120(sp)
 800ea74:	dd401d15 	stw	r21,116(sp)
 800ea78:	dd001c15 	stw	r20,112(sp)
 800ea7c:	d9c00315 	stw	r7,12(sp)
 800ea80:	2039883a 	mov	fp,r4
 800ea84:	3023883a 	mov	r17,r6
 800ea88:	2825883a 	mov	r18,r5
 800ea8c:	dc002417 	ldw	r16,144(sp)
 800ea90:	3027883a 	mov	r19,r6
 800ea94:	10000826 	beq	r2,zero,800eab8 <_dtoa_r+0x6c>
 800ea98:	21801117 	ldw	r6,68(r4)
 800ea9c:	00c00044 	movi	r3,1
 800eaa0:	100b883a 	mov	r5,r2
 800eaa4:	1986983a 	sll	r3,r3,r6
 800eaa8:	11800115 	stw	r6,4(r2)
 800eaac:	10c00215 	stw	r3,8(r2)
 800eab0:	80120840 	call	8012084 <_Bfree>
 800eab4:	e0001015 	stw	zero,64(fp)
 800eab8:	88002e16 	blt	r17,zero,800eb74 <_dtoa_r+0x128>
 800eabc:	80000015 	stw	zero,0(r16)
 800eac0:	889ffc2c 	andhi	r2,r17,32752
 800eac4:	00dffc34 	movhi	r3,32752
 800eac8:	10c01c26 	beq	r2,r3,800eb3c <_dtoa_r+0xf0>
 800eacc:	000d883a 	mov	r6,zero
 800ead0:	000f883a 	mov	r7,zero
 800ead4:	9009883a 	mov	r4,r18
 800ead8:	980b883a 	mov	r5,r19
 800eadc:	800a72c0 	call	800a72c <__eqdf2>
 800eae0:	10002b1e 	bne	r2,zero,800eb90 <_dtoa_r+0x144>
 800eae4:	d9c02317 	ldw	r7,140(sp)
 800eae8:	00800044 	movi	r2,1
 800eaec:	38800015 	stw	r2,0(r7)
 800eaf0:	d8802517 	ldw	r2,148(sp)
 800eaf4:	10019e26 	beq	r2,zero,800f170 <_dtoa_r+0x724>
 800eaf8:	d8c02517 	ldw	r3,148(sp)
 800eafc:	00820d74 	movhi	r2,2101
 800eb00:	10a15544 	addi	r2,r2,-31403
 800eb04:	18800015 	stw	r2,0(r3)
 800eb08:	10bfffc4 	addi	r2,r2,-1
 800eb0c:	dfc02117 	ldw	ra,132(sp)
 800eb10:	df002017 	ldw	fp,128(sp)
 800eb14:	ddc01f17 	ldw	r23,124(sp)
 800eb18:	dd801e17 	ldw	r22,120(sp)
 800eb1c:	dd401d17 	ldw	r21,116(sp)
 800eb20:	dd001c17 	ldw	r20,112(sp)
 800eb24:	dcc01b17 	ldw	r19,108(sp)
 800eb28:	dc801a17 	ldw	r18,104(sp)
 800eb2c:	dc401917 	ldw	r17,100(sp)
 800eb30:	dc001817 	ldw	r16,96(sp)
 800eb34:	dec02204 	addi	sp,sp,136
 800eb38:	f800283a 	ret
 800eb3c:	d8c02317 	ldw	r3,140(sp)
 800eb40:	0089c3c4 	movi	r2,9999
 800eb44:	18800015 	stw	r2,0(r3)
 800eb48:	90017726 	beq	r18,zero,800f128 <_dtoa_r+0x6dc>
 800eb4c:	00820d74 	movhi	r2,2101
 800eb50:	10a16104 	addi	r2,r2,-31356
 800eb54:	d9002517 	ldw	r4,148(sp)
 800eb58:	203fec26 	beq	r4,zero,800eb0c <__alt_data_end+0xfc00eb0c>
 800eb5c:	10c000c7 	ldb	r3,3(r2)
 800eb60:	1801781e 	bne	r3,zero,800f144 <_dtoa_r+0x6f8>
 800eb64:	10c000c4 	addi	r3,r2,3
 800eb68:	d9802517 	ldw	r6,148(sp)
 800eb6c:	30c00015 	stw	r3,0(r6)
 800eb70:	003fe606 	br	800eb0c <__alt_data_end+0xfc00eb0c>
 800eb74:	04e00034 	movhi	r19,32768
 800eb78:	9cffffc4 	addi	r19,r19,-1
 800eb7c:	00800044 	movi	r2,1
 800eb80:	8ce6703a 	and	r19,r17,r19
 800eb84:	80800015 	stw	r2,0(r16)
 800eb88:	9823883a 	mov	r17,r19
 800eb8c:	003fcc06 	br	800eac0 <__alt_data_end+0xfc00eac0>
 800eb90:	d8800204 	addi	r2,sp,8
 800eb94:	d8800015 	stw	r2,0(sp)
 800eb98:	d9c00104 	addi	r7,sp,4
 800eb9c:	900b883a 	mov	r5,r18
 800eba0:	980d883a 	mov	r6,r19
 800eba4:	e009883a 	mov	r4,fp
 800eba8:	8820d53a 	srli	r16,r17,20
 800ebac:	8012d2c0 	call	8012d2c <__d2b>
 800ebb0:	d8800915 	stw	r2,36(sp)
 800ebb4:	8001651e 	bne	r16,zero,800f14c <_dtoa_r+0x700>
 800ebb8:	dd800217 	ldw	r22,8(sp)
 800ebbc:	dc000117 	ldw	r16,4(sp)
 800ebc0:	00800804 	movi	r2,32
 800ebc4:	b421883a 	add	r16,r22,r16
 800ebc8:	80c10c84 	addi	r3,r16,1074
 800ebcc:	10c2d10e 	bge	r2,r3,800f714 <_dtoa_r+0xcc8>
 800ebd0:	00801004 	movi	r2,64
 800ebd4:	81010484 	addi	r4,r16,1042
 800ebd8:	10c7c83a 	sub	r3,r2,r3
 800ebdc:	9108d83a 	srl	r4,r18,r4
 800ebe0:	88e2983a 	sll	r17,r17,r3
 800ebe4:	2448b03a 	or	r4,r4,r17
 800ebe8:	800bc480 	call	800bc48 <__floatunsidf>
 800ebec:	017f8434 	movhi	r5,65040
 800ebf0:	01800044 	movi	r6,1
 800ebf4:	1009883a 	mov	r4,r2
 800ebf8:	194b883a 	add	r5,r3,r5
 800ebfc:	843fffc4 	addi	r16,r16,-1
 800ec00:	d9801115 	stw	r6,68(sp)
 800ec04:	000d883a 	mov	r6,zero
 800ec08:	01cffe34 	movhi	r7,16376
 800ec0c:	800b1f00 	call	800b1f0 <__subdf3>
 800ec10:	0198dbf4 	movhi	r6,25455
 800ec14:	01cff4f4 	movhi	r7,16339
 800ec18:	3190d844 	addi	r6,r6,17249
 800ec1c:	39e1e9c4 	addi	r7,r7,-30809
 800ec20:	1009883a 	mov	r4,r2
 800ec24:	180b883a 	mov	r5,r3
 800ec28:	800a9840 	call	800a984 <__muldf3>
 800ec2c:	01a2d874 	movhi	r6,35681
 800ec30:	01cff1f4 	movhi	r7,16327
 800ec34:	31b22cc4 	addi	r6,r6,-14157
 800ec38:	39e28a04 	addi	r7,r7,-30168
 800ec3c:	180b883a 	mov	r5,r3
 800ec40:	1009883a 	mov	r4,r2
 800ec44:	80094b00 	call	80094b0 <__adddf3>
 800ec48:	8009883a 	mov	r4,r16
 800ec4c:	1029883a 	mov	r20,r2
 800ec50:	1823883a 	mov	r17,r3
 800ec54:	800bb6c0 	call	800bb6c <__floatsidf>
 800ec58:	019427f4 	movhi	r6,20639
 800ec5c:	01cff4f4 	movhi	r7,16339
 800ec60:	319e7ec4 	addi	r6,r6,31227
 800ec64:	39d104c4 	addi	r7,r7,17427
 800ec68:	1009883a 	mov	r4,r2
 800ec6c:	180b883a 	mov	r5,r3
 800ec70:	800a9840 	call	800a984 <__muldf3>
 800ec74:	100d883a 	mov	r6,r2
 800ec78:	180f883a 	mov	r7,r3
 800ec7c:	a009883a 	mov	r4,r20
 800ec80:	880b883a 	mov	r5,r17
 800ec84:	80094b00 	call	80094b0 <__adddf3>
 800ec88:	1009883a 	mov	r4,r2
 800ec8c:	180b883a 	mov	r5,r3
 800ec90:	1029883a 	mov	r20,r2
 800ec94:	1823883a 	mov	r17,r3
 800ec98:	800baec0 	call	800baec <__fixdfsi>
 800ec9c:	000d883a 	mov	r6,zero
 800eca0:	000f883a 	mov	r7,zero
 800eca4:	a009883a 	mov	r4,r20
 800eca8:	880b883a 	mov	r5,r17
 800ecac:	d8800515 	stw	r2,20(sp)
 800ecb0:	800a8900 	call	800a890 <__ledf2>
 800ecb4:	10028716 	blt	r2,zero,800f6d4 <_dtoa_r+0xc88>
 800ecb8:	d8c00517 	ldw	r3,20(sp)
 800ecbc:	00800584 	movi	r2,22
 800ecc0:	10c27536 	bltu	r2,r3,800f698 <_dtoa_r+0xc4c>
 800ecc4:	180490fa 	slli	r2,r3,3
 800ecc8:	00c20d74 	movhi	r3,2101
 800eccc:	18e17c04 	addi	r3,r3,-31248
 800ecd0:	1885883a 	add	r2,r3,r2
 800ecd4:	11000017 	ldw	r4,0(r2)
 800ecd8:	11400117 	ldw	r5,4(r2)
 800ecdc:	900d883a 	mov	r6,r18
 800ece0:	980f883a 	mov	r7,r19
 800ece4:	800a7b40 	call	800a7b4 <__gedf2>
 800ece8:	00828d0e 	bge	zero,r2,800f720 <_dtoa_r+0xcd4>
 800ecec:	d9000517 	ldw	r4,20(sp)
 800ecf0:	d8000e15 	stw	zero,56(sp)
 800ecf4:	213fffc4 	addi	r4,r4,-1
 800ecf8:	d9000515 	stw	r4,20(sp)
 800ecfc:	b42dc83a 	sub	r22,r22,r16
 800ed00:	b5bfffc4 	addi	r22,r22,-1
 800ed04:	b0026f16 	blt	r22,zero,800f6c4 <_dtoa_r+0xc78>
 800ed08:	d8000815 	stw	zero,32(sp)
 800ed0c:	d9c00517 	ldw	r7,20(sp)
 800ed10:	38026416 	blt	r7,zero,800f6a4 <_dtoa_r+0xc58>
 800ed14:	b1ed883a 	add	r22,r22,r7
 800ed18:	d9c00d15 	stw	r7,52(sp)
 800ed1c:	d8000a15 	stw	zero,40(sp)
 800ed20:	d9800317 	ldw	r6,12(sp)
 800ed24:	00800244 	movi	r2,9
 800ed28:	11811436 	bltu	r2,r6,800f17c <_dtoa_r+0x730>
 800ed2c:	00800144 	movi	r2,5
 800ed30:	1184e10e 	bge	r2,r6,80100b8 <_dtoa_r+0x166c>
 800ed34:	31bfff04 	addi	r6,r6,-4
 800ed38:	d9800315 	stw	r6,12(sp)
 800ed3c:	0023883a 	mov	r17,zero
 800ed40:	d9800317 	ldw	r6,12(sp)
 800ed44:	008000c4 	movi	r2,3
 800ed48:	30836726 	beq	r6,r2,800fae8 <_dtoa_r+0x109c>
 800ed4c:	1183410e 	bge	r2,r6,800fa54 <_dtoa_r+0x1008>
 800ed50:	d9c00317 	ldw	r7,12(sp)
 800ed54:	00800104 	movi	r2,4
 800ed58:	38827c26 	beq	r7,r2,800f74c <_dtoa_r+0xd00>
 800ed5c:	00800144 	movi	r2,5
 800ed60:	3884c41e 	bne	r7,r2,8010074 <_dtoa_r+0x1628>
 800ed64:	00800044 	movi	r2,1
 800ed68:	d8800b15 	stw	r2,44(sp)
 800ed6c:	d8c00517 	ldw	r3,20(sp)
 800ed70:	d9002217 	ldw	r4,136(sp)
 800ed74:	1907883a 	add	r3,r3,r4
 800ed78:	19800044 	addi	r6,r3,1
 800ed7c:	d8c00c15 	stw	r3,48(sp)
 800ed80:	d9800615 	stw	r6,24(sp)
 800ed84:	0183a40e 	bge	zero,r6,800fc18 <_dtoa_r+0x11cc>
 800ed88:	d9800617 	ldw	r6,24(sp)
 800ed8c:	3021883a 	mov	r16,r6
 800ed90:	e0001115 	stw	zero,68(fp)
 800ed94:	008005c4 	movi	r2,23
 800ed98:	1184c92e 	bgeu	r2,r6,80100c0 <_dtoa_r+0x1674>
 800ed9c:	00c00044 	movi	r3,1
 800eda0:	00800104 	movi	r2,4
 800eda4:	1085883a 	add	r2,r2,r2
 800eda8:	11000504 	addi	r4,r2,20
 800edac:	180b883a 	mov	r5,r3
 800edb0:	18c00044 	addi	r3,r3,1
 800edb4:	313ffb2e 	bgeu	r6,r4,800eda4 <__alt_data_end+0xfc00eda4>
 800edb8:	e1401115 	stw	r5,68(fp)
 800edbc:	e009883a 	mov	r4,fp
 800edc0:	8011fdc0 	call	8011fdc <_Balloc>
 800edc4:	d8800715 	stw	r2,28(sp)
 800edc8:	e0801015 	stw	r2,64(fp)
 800edcc:	00800384 	movi	r2,14
 800edd0:	1400f736 	bltu	r2,r16,800f1b0 <_dtoa_r+0x764>
 800edd4:	8800f626 	beq	r17,zero,800f1b0 <_dtoa_r+0x764>
 800edd8:	d9c00517 	ldw	r7,20(sp)
 800eddc:	01c39a0e 	bge	zero,r7,800fc48 <_dtoa_r+0x11fc>
 800ede0:	388003cc 	andi	r2,r7,15
 800ede4:	100490fa 	slli	r2,r2,3
 800ede8:	382bd13a 	srai	r21,r7,4
 800edec:	00c20d74 	movhi	r3,2101
 800edf0:	18e17c04 	addi	r3,r3,-31248
 800edf4:	1885883a 	add	r2,r3,r2
 800edf8:	a8c0040c 	andi	r3,r21,16
 800edfc:	12400017 	ldw	r9,0(r2)
 800ee00:	12000117 	ldw	r8,4(r2)
 800ee04:	18037926 	beq	r3,zero,800fbec <_dtoa_r+0x11a0>
 800ee08:	00820d74 	movhi	r2,2101
 800ee0c:	10a17204 	addi	r2,r2,-31288
 800ee10:	11800817 	ldw	r6,32(r2)
 800ee14:	11c00917 	ldw	r7,36(r2)
 800ee18:	9009883a 	mov	r4,r18
 800ee1c:	980b883a 	mov	r5,r19
 800ee20:	da001715 	stw	r8,92(sp)
 800ee24:	da401615 	stw	r9,88(sp)
 800ee28:	8009d5c0 	call	8009d5c <__divdf3>
 800ee2c:	da001717 	ldw	r8,92(sp)
 800ee30:	da401617 	ldw	r9,88(sp)
 800ee34:	ad4003cc 	andi	r21,r21,15
 800ee38:	040000c4 	movi	r16,3
 800ee3c:	1023883a 	mov	r17,r2
 800ee40:	1829883a 	mov	r20,r3
 800ee44:	a8001126 	beq	r21,zero,800ee8c <_dtoa_r+0x440>
 800ee48:	05c20d74 	movhi	r23,2101
 800ee4c:	bde17204 	addi	r23,r23,-31288
 800ee50:	4805883a 	mov	r2,r9
 800ee54:	4007883a 	mov	r3,r8
 800ee58:	a980004c 	andi	r6,r21,1
 800ee5c:	1009883a 	mov	r4,r2
 800ee60:	a82bd07a 	srai	r21,r21,1
 800ee64:	180b883a 	mov	r5,r3
 800ee68:	30000426 	beq	r6,zero,800ee7c <_dtoa_r+0x430>
 800ee6c:	b9800017 	ldw	r6,0(r23)
 800ee70:	b9c00117 	ldw	r7,4(r23)
 800ee74:	84000044 	addi	r16,r16,1
 800ee78:	800a9840 	call	800a984 <__muldf3>
 800ee7c:	bdc00204 	addi	r23,r23,8
 800ee80:	a83ff51e 	bne	r21,zero,800ee58 <__alt_data_end+0xfc00ee58>
 800ee84:	1013883a 	mov	r9,r2
 800ee88:	1811883a 	mov	r8,r3
 800ee8c:	480d883a 	mov	r6,r9
 800ee90:	400f883a 	mov	r7,r8
 800ee94:	8809883a 	mov	r4,r17
 800ee98:	a00b883a 	mov	r5,r20
 800ee9c:	8009d5c0 	call	8009d5c <__divdf3>
 800eea0:	d8800f15 	stw	r2,60(sp)
 800eea4:	d8c01015 	stw	r3,64(sp)
 800eea8:	d8c00e17 	ldw	r3,56(sp)
 800eeac:	18000626 	beq	r3,zero,800eec8 <_dtoa_r+0x47c>
 800eeb0:	d9000f17 	ldw	r4,60(sp)
 800eeb4:	d9401017 	ldw	r5,64(sp)
 800eeb8:	000d883a 	mov	r6,zero
 800eebc:	01cffc34 	movhi	r7,16368
 800eec0:	800a8900 	call	800a890 <__ledf2>
 800eec4:	10040b16 	blt	r2,zero,800fef4 <_dtoa_r+0x14a8>
 800eec8:	8009883a 	mov	r4,r16
 800eecc:	800bb6c0 	call	800bb6c <__floatsidf>
 800eed0:	d9800f17 	ldw	r6,60(sp)
 800eed4:	d9c01017 	ldw	r7,64(sp)
 800eed8:	1009883a 	mov	r4,r2
 800eedc:	180b883a 	mov	r5,r3
 800eee0:	800a9840 	call	800a984 <__muldf3>
 800eee4:	000d883a 	mov	r6,zero
 800eee8:	01d00734 	movhi	r7,16412
 800eeec:	1009883a 	mov	r4,r2
 800eef0:	180b883a 	mov	r5,r3
 800eef4:	80094b00 	call	80094b0 <__adddf3>
 800eef8:	1021883a 	mov	r16,r2
 800eefc:	d8800617 	ldw	r2,24(sp)
 800ef00:	047f3034 	movhi	r17,64704
 800ef04:	1c63883a 	add	r17,r3,r17
 800ef08:	10031826 	beq	r2,zero,800fb6c <_dtoa_r+0x1120>
 800ef0c:	d8c00517 	ldw	r3,20(sp)
 800ef10:	db000617 	ldw	r12,24(sp)
 800ef14:	d8c01315 	stw	r3,76(sp)
 800ef18:	d9000b17 	ldw	r4,44(sp)
 800ef1c:	20038f26 	beq	r4,zero,800fd5c <_dtoa_r+0x1310>
 800ef20:	60bfffc4 	addi	r2,r12,-1
 800ef24:	100490fa 	slli	r2,r2,3
 800ef28:	00c20d74 	movhi	r3,2101
 800ef2c:	18e17c04 	addi	r3,r3,-31248
 800ef30:	1885883a 	add	r2,r3,r2
 800ef34:	11800017 	ldw	r6,0(r2)
 800ef38:	11c00117 	ldw	r7,4(r2)
 800ef3c:	d8800717 	ldw	r2,28(sp)
 800ef40:	0009883a 	mov	r4,zero
 800ef44:	014ff834 	movhi	r5,16352
 800ef48:	db001615 	stw	r12,88(sp)
 800ef4c:	15c00044 	addi	r23,r2,1
 800ef50:	8009d5c0 	call	8009d5c <__divdf3>
 800ef54:	800d883a 	mov	r6,r16
 800ef58:	880f883a 	mov	r7,r17
 800ef5c:	1009883a 	mov	r4,r2
 800ef60:	180b883a 	mov	r5,r3
 800ef64:	800b1f00 	call	800b1f0 <__subdf3>
 800ef68:	d9401017 	ldw	r5,64(sp)
 800ef6c:	d9000f17 	ldw	r4,60(sp)
 800ef70:	102b883a 	mov	r21,r2
 800ef74:	d8c01215 	stw	r3,72(sp)
 800ef78:	800baec0 	call	800baec <__fixdfsi>
 800ef7c:	1009883a 	mov	r4,r2
 800ef80:	1029883a 	mov	r20,r2
 800ef84:	800bb6c0 	call	800bb6c <__floatsidf>
 800ef88:	d9000f17 	ldw	r4,60(sp)
 800ef8c:	d9401017 	ldw	r5,64(sp)
 800ef90:	100d883a 	mov	r6,r2
 800ef94:	180f883a 	mov	r7,r3
 800ef98:	800b1f00 	call	800b1f0 <__subdf3>
 800ef9c:	1823883a 	mov	r17,r3
 800efa0:	d8c00717 	ldw	r3,28(sp)
 800efa4:	d9401217 	ldw	r5,72(sp)
 800efa8:	a2000c04 	addi	r8,r20,48
 800efac:	1021883a 	mov	r16,r2
 800efb0:	1a000005 	stb	r8,0(r3)
 800efb4:	800d883a 	mov	r6,r16
 800efb8:	880f883a 	mov	r7,r17
 800efbc:	a809883a 	mov	r4,r21
 800efc0:	4029883a 	mov	r20,r8
 800efc4:	800a7b40 	call	800a7b4 <__gedf2>
 800efc8:	00841d16 	blt	zero,r2,8010040 <_dtoa_r+0x15f4>
 800efcc:	800d883a 	mov	r6,r16
 800efd0:	880f883a 	mov	r7,r17
 800efd4:	0009883a 	mov	r4,zero
 800efd8:	014ffc34 	movhi	r5,16368
 800efdc:	800b1f00 	call	800b1f0 <__subdf3>
 800efe0:	d9401217 	ldw	r5,72(sp)
 800efe4:	100d883a 	mov	r6,r2
 800efe8:	180f883a 	mov	r7,r3
 800efec:	a809883a 	mov	r4,r21
 800eff0:	800a7b40 	call	800a7b4 <__gedf2>
 800eff4:	db001617 	ldw	r12,88(sp)
 800eff8:	00840e16 	blt	zero,r2,8010034 <_dtoa_r+0x15e8>
 800effc:	00800044 	movi	r2,1
 800f000:	13006b0e 	bge	r2,r12,800f1b0 <_dtoa_r+0x764>
 800f004:	d9000717 	ldw	r4,28(sp)
 800f008:	dd800f15 	stw	r22,60(sp)
 800f00c:	dcc01015 	stw	r19,64(sp)
 800f010:	2319883a 	add	r12,r4,r12
 800f014:	dcc01217 	ldw	r19,72(sp)
 800f018:	602d883a 	mov	r22,r12
 800f01c:	dc801215 	stw	r18,72(sp)
 800f020:	b825883a 	mov	r18,r23
 800f024:	00000906 	br	800f04c <_dtoa_r+0x600>
 800f028:	800b1f00 	call	800b1f0 <__subdf3>
 800f02c:	a80d883a 	mov	r6,r21
 800f030:	980f883a 	mov	r7,r19
 800f034:	1009883a 	mov	r4,r2
 800f038:	180b883a 	mov	r5,r3
 800f03c:	800a8900 	call	800a890 <__ledf2>
 800f040:	1003e816 	blt	r2,zero,800ffe4 <_dtoa_r+0x1598>
 800f044:	b825883a 	mov	r18,r23
 800f048:	bd83e926 	beq	r23,r22,800fff0 <_dtoa_r+0x15a4>
 800f04c:	a809883a 	mov	r4,r21
 800f050:	980b883a 	mov	r5,r19
 800f054:	000d883a 	mov	r6,zero
 800f058:	01d00934 	movhi	r7,16420
 800f05c:	800a9840 	call	800a984 <__muldf3>
 800f060:	000d883a 	mov	r6,zero
 800f064:	01d00934 	movhi	r7,16420
 800f068:	8009883a 	mov	r4,r16
 800f06c:	880b883a 	mov	r5,r17
 800f070:	102b883a 	mov	r21,r2
 800f074:	1827883a 	mov	r19,r3
 800f078:	800a9840 	call	800a984 <__muldf3>
 800f07c:	180b883a 	mov	r5,r3
 800f080:	1009883a 	mov	r4,r2
 800f084:	1821883a 	mov	r16,r3
 800f088:	1023883a 	mov	r17,r2
 800f08c:	800baec0 	call	800baec <__fixdfsi>
 800f090:	1009883a 	mov	r4,r2
 800f094:	1029883a 	mov	r20,r2
 800f098:	800bb6c0 	call	800bb6c <__floatsidf>
 800f09c:	8809883a 	mov	r4,r17
 800f0a0:	800b883a 	mov	r5,r16
 800f0a4:	100d883a 	mov	r6,r2
 800f0a8:	180f883a 	mov	r7,r3
 800f0ac:	800b1f00 	call	800b1f0 <__subdf3>
 800f0b0:	a5000c04 	addi	r20,r20,48
 800f0b4:	a80d883a 	mov	r6,r21
 800f0b8:	980f883a 	mov	r7,r19
 800f0bc:	1009883a 	mov	r4,r2
 800f0c0:	180b883a 	mov	r5,r3
 800f0c4:	95000005 	stb	r20,0(r18)
 800f0c8:	1021883a 	mov	r16,r2
 800f0cc:	1823883a 	mov	r17,r3
 800f0d0:	800a8900 	call	800a890 <__ledf2>
 800f0d4:	bdc00044 	addi	r23,r23,1
 800f0d8:	800d883a 	mov	r6,r16
 800f0dc:	880f883a 	mov	r7,r17
 800f0e0:	0009883a 	mov	r4,zero
 800f0e4:	014ffc34 	movhi	r5,16368
 800f0e8:	103fcf0e 	bge	r2,zero,800f028 <__alt_data_end+0xfc00f028>
 800f0ec:	d8c01317 	ldw	r3,76(sp)
 800f0f0:	d8c00515 	stw	r3,20(sp)
 800f0f4:	d9400917 	ldw	r5,36(sp)
 800f0f8:	e009883a 	mov	r4,fp
 800f0fc:	80120840 	call	8012084 <_Bfree>
 800f100:	d9000517 	ldw	r4,20(sp)
 800f104:	d9802317 	ldw	r6,140(sp)
 800f108:	d9c02517 	ldw	r7,148(sp)
 800f10c:	b8000005 	stb	zero,0(r23)
 800f110:	20800044 	addi	r2,r4,1
 800f114:	30800015 	stw	r2,0(r6)
 800f118:	3802aa26 	beq	r7,zero,800fbc4 <_dtoa_r+0x1178>
 800f11c:	3dc00015 	stw	r23,0(r7)
 800f120:	d8800717 	ldw	r2,28(sp)
 800f124:	003e7906 	br	800eb0c <__alt_data_end+0xfc00eb0c>
 800f128:	00800434 	movhi	r2,16
 800f12c:	10bfffc4 	addi	r2,r2,-1
 800f130:	88a2703a 	and	r17,r17,r2
 800f134:	883e851e 	bne	r17,zero,800eb4c <__alt_data_end+0xfc00eb4c>
 800f138:	00820d74 	movhi	r2,2101
 800f13c:	10a15e04 	addi	r2,r2,-31368
 800f140:	003e8406 	br	800eb54 <__alt_data_end+0xfc00eb54>
 800f144:	10c00204 	addi	r3,r2,8
 800f148:	003e8706 	br	800eb68 <__alt_data_end+0xfc00eb68>
 800f14c:	01400434 	movhi	r5,16
 800f150:	297fffc4 	addi	r5,r5,-1
 800f154:	994a703a 	and	r5,r19,r5
 800f158:	9009883a 	mov	r4,r18
 800f15c:	843f0044 	addi	r16,r16,-1023
 800f160:	294ffc34 	orhi	r5,r5,16368
 800f164:	dd800217 	ldw	r22,8(sp)
 800f168:	d8001115 	stw	zero,68(sp)
 800f16c:	003ea506 	br	800ec04 <__alt_data_end+0xfc00ec04>
 800f170:	00820d74 	movhi	r2,2101
 800f174:	10a15504 	addi	r2,r2,-31404
 800f178:	003e6406 	br	800eb0c <__alt_data_end+0xfc00eb0c>
 800f17c:	e0001115 	stw	zero,68(fp)
 800f180:	000b883a 	mov	r5,zero
 800f184:	e009883a 	mov	r4,fp
 800f188:	8011fdc0 	call	8011fdc <_Balloc>
 800f18c:	01bfffc4 	movi	r6,-1
 800f190:	01c00044 	movi	r7,1
 800f194:	d8800715 	stw	r2,28(sp)
 800f198:	d9800c15 	stw	r6,48(sp)
 800f19c:	e0801015 	stw	r2,64(fp)
 800f1a0:	d8000315 	stw	zero,12(sp)
 800f1a4:	d9c00b15 	stw	r7,44(sp)
 800f1a8:	d9800615 	stw	r6,24(sp)
 800f1ac:	d8002215 	stw	zero,136(sp)
 800f1b0:	d8800117 	ldw	r2,4(sp)
 800f1b4:	10008916 	blt	r2,zero,800f3dc <_dtoa_r+0x990>
 800f1b8:	d9000517 	ldw	r4,20(sp)
 800f1bc:	00c00384 	movi	r3,14
 800f1c0:	19008616 	blt	r3,r4,800f3dc <_dtoa_r+0x990>
 800f1c4:	200490fa 	slli	r2,r4,3
 800f1c8:	00c20d74 	movhi	r3,2101
 800f1cc:	d9802217 	ldw	r6,136(sp)
 800f1d0:	18e17c04 	addi	r3,r3,-31248
 800f1d4:	1885883a 	add	r2,r3,r2
 800f1d8:	14000017 	ldw	r16,0(r2)
 800f1dc:	14400117 	ldw	r17,4(r2)
 800f1e0:	30016316 	blt	r6,zero,800f770 <_dtoa_r+0xd24>
 800f1e4:	800d883a 	mov	r6,r16
 800f1e8:	880f883a 	mov	r7,r17
 800f1ec:	9009883a 	mov	r4,r18
 800f1f0:	980b883a 	mov	r5,r19
 800f1f4:	8009d5c0 	call	8009d5c <__divdf3>
 800f1f8:	180b883a 	mov	r5,r3
 800f1fc:	1009883a 	mov	r4,r2
 800f200:	800baec0 	call	800baec <__fixdfsi>
 800f204:	1009883a 	mov	r4,r2
 800f208:	102b883a 	mov	r21,r2
 800f20c:	800bb6c0 	call	800bb6c <__floatsidf>
 800f210:	800d883a 	mov	r6,r16
 800f214:	880f883a 	mov	r7,r17
 800f218:	1009883a 	mov	r4,r2
 800f21c:	180b883a 	mov	r5,r3
 800f220:	800a9840 	call	800a984 <__muldf3>
 800f224:	100d883a 	mov	r6,r2
 800f228:	180f883a 	mov	r7,r3
 800f22c:	9009883a 	mov	r4,r18
 800f230:	980b883a 	mov	r5,r19
 800f234:	800b1f00 	call	800b1f0 <__subdf3>
 800f238:	d9c00717 	ldw	r7,28(sp)
 800f23c:	1009883a 	mov	r4,r2
 800f240:	a8800c04 	addi	r2,r21,48
 800f244:	38800005 	stb	r2,0(r7)
 800f248:	3dc00044 	addi	r23,r7,1
 800f24c:	d9c00617 	ldw	r7,24(sp)
 800f250:	01800044 	movi	r6,1
 800f254:	180b883a 	mov	r5,r3
 800f258:	2005883a 	mov	r2,r4
 800f25c:	39803826 	beq	r7,r6,800f340 <_dtoa_r+0x8f4>
 800f260:	000d883a 	mov	r6,zero
 800f264:	01d00934 	movhi	r7,16420
 800f268:	800a9840 	call	800a984 <__muldf3>
 800f26c:	000d883a 	mov	r6,zero
 800f270:	000f883a 	mov	r7,zero
 800f274:	1009883a 	mov	r4,r2
 800f278:	180b883a 	mov	r5,r3
 800f27c:	1025883a 	mov	r18,r2
 800f280:	1827883a 	mov	r19,r3
 800f284:	800a72c0 	call	800a72c <__eqdf2>
 800f288:	103f9a26 	beq	r2,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f28c:	d9c00617 	ldw	r7,24(sp)
 800f290:	d8c00717 	ldw	r3,28(sp)
 800f294:	b829883a 	mov	r20,r23
 800f298:	38bfffc4 	addi	r2,r7,-1
 800f29c:	18ad883a 	add	r22,r3,r2
 800f2a0:	00000a06 	br	800f2cc <_dtoa_r+0x880>
 800f2a4:	800a9840 	call	800a984 <__muldf3>
 800f2a8:	000d883a 	mov	r6,zero
 800f2ac:	000f883a 	mov	r7,zero
 800f2b0:	1009883a 	mov	r4,r2
 800f2b4:	180b883a 	mov	r5,r3
 800f2b8:	1025883a 	mov	r18,r2
 800f2bc:	1827883a 	mov	r19,r3
 800f2c0:	b829883a 	mov	r20,r23
 800f2c4:	800a72c0 	call	800a72c <__eqdf2>
 800f2c8:	103f8a26 	beq	r2,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f2cc:	800d883a 	mov	r6,r16
 800f2d0:	880f883a 	mov	r7,r17
 800f2d4:	9009883a 	mov	r4,r18
 800f2d8:	980b883a 	mov	r5,r19
 800f2dc:	8009d5c0 	call	8009d5c <__divdf3>
 800f2e0:	180b883a 	mov	r5,r3
 800f2e4:	1009883a 	mov	r4,r2
 800f2e8:	800baec0 	call	800baec <__fixdfsi>
 800f2ec:	1009883a 	mov	r4,r2
 800f2f0:	102b883a 	mov	r21,r2
 800f2f4:	800bb6c0 	call	800bb6c <__floatsidf>
 800f2f8:	800d883a 	mov	r6,r16
 800f2fc:	880f883a 	mov	r7,r17
 800f300:	1009883a 	mov	r4,r2
 800f304:	180b883a 	mov	r5,r3
 800f308:	800a9840 	call	800a984 <__muldf3>
 800f30c:	100d883a 	mov	r6,r2
 800f310:	180f883a 	mov	r7,r3
 800f314:	9009883a 	mov	r4,r18
 800f318:	980b883a 	mov	r5,r19
 800f31c:	800b1f00 	call	800b1f0 <__subdf3>
 800f320:	aa000c04 	addi	r8,r21,48
 800f324:	a2000005 	stb	r8,0(r20)
 800f328:	000d883a 	mov	r6,zero
 800f32c:	01d00934 	movhi	r7,16420
 800f330:	1009883a 	mov	r4,r2
 800f334:	180b883a 	mov	r5,r3
 800f338:	a5c00044 	addi	r23,r20,1
 800f33c:	b53fd91e 	bne	r22,r20,800f2a4 <__alt_data_end+0xfc00f2a4>
 800f340:	100d883a 	mov	r6,r2
 800f344:	180f883a 	mov	r7,r3
 800f348:	1009883a 	mov	r4,r2
 800f34c:	180b883a 	mov	r5,r3
 800f350:	80094b00 	call	80094b0 <__adddf3>
 800f354:	100d883a 	mov	r6,r2
 800f358:	180f883a 	mov	r7,r3
 800f35c:	8009883a 	mov	r4,r16
 800f360:	880b883a 	mov	r5,r17
 800f364:	1027883a 	mov	r19,r2
 800f368:	1825883a 	mov	r18,r3
 800f36c:	800a8900 	call	800a890 <__ledf2>
 800f370:	10000816 	blt	r2,zero,800f394 <_dtoa_r+0x948>
 800f374:	980d883a 	mov	r6,r19
 800f378:	900f883a 	mov	r7,r18
 800f37c:	8009883a 	mov	r4,r16
 800f380:	880b883a 	mov	r5,r17
 800f384:	800a72c0 	call	800a72c <__eqdf2>
 800f388:	103f5a1e 	bne	r2,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f38c:	ad40004c 	andi	r21,r21,1
 800f390:	a83f5826 	beq	r21,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f394:	bd3fffc3 	ldbu	r20,-1(r23)
 800f398:	b8bfffc4 	addi	r2,r23,-1
 800f39c:	1007883a 	mov	r3,r2
 800f3a0:	01400e44 	movi	r5,57
 800f3a4:	d9800717 	ldw	r6,28(sp)
 800f3a8:	00000506 	br	800f3c0 <_dtoa_r+0x974>
 800f3ac:	18ffffc4 	addi	r3,r3,-1
 800f3b0:	11824726 	beq	r2,r6,800fcd0 <_dtoa_r+0x1284>
 800f3b4:	1d000003 	ldbu	r20,0(r3)
 800f3b8:	102f883a 	mov	r23,r2
 800f3bc:	10bfffc4 	addi	r2,r2,-1
 800f3c0:	a1003fcc 	andi	r4,r20,255
 800f3c4:	2100201c 	xori	r4,r4,128
 800f3c8:	213fe004 	addi	r4,r4,-128
 800f3cc:	217ff726 	beq	r4,r5,800f3ac <__alt_data_end+0xfc00f3ac>
 800f3d0:	a2000044 	addi	r8,r20,1
 800f3d4:	12000005 	stb	r8,0(r2)
 800f3d8:	003f4606 	br	800f0f4 <__alt_data_end+0xfc00f0f4>
 800f3dc:	d9000b17 	ldw	r4,44(sp)
 800f3e0:	2000c826 	beq	r4,zero,800f704 <_dtoa_r+0xcb8>
 800f3e4:	d9800317 	ldw	r6,12(sp)
 800f3e8:	00c00044 	movi	r3,1
 800f3ec:	1980f90e 	bge	r3,r6,800f7d4 <_dtoa_r+0xd88>
 800f3f0:	d8800617 	ldw	r2,24(sp)
 800f3f4:	d8c00a17 	ldw	r3,40(sp)
 800f3f8:	157fffc4 	addi	r21,r2,-1
 800f3fc:	1d41f316 	blt	r3,r21,800fbcc <_dtoa_r+0x1180>
 800f400:	1d6bc83a 	sub	r21,r3,r21
 800f404:	d9c00617 	ldw	r7,24(sp)
 800f408:	3802aa16 	blt	r7,zero,800feb4 <_dtoa_r+0x1468>
 800f40c:	dd000817 	ldw	r20,32(sp)
 800f410:	d8800617 	ldw	r2,24(sp)
 800f414:	d8c00817 	ldw	r3,32(sp)
 800f418:	01400044 	movi	r5,1
 800f41c:	e009883a 	mov	r4,fp
 800f420:	1887883a 	add	r3,r3,r2
 800f424:	d8c00815 	stw	r3,32(sp)
 800f428:	b0ad883a 	add	r22,r22,r2
 800f42c:	80124100 	call	8012410 <__i2b>
 800f430:	1023883a 	mov	r17,r2
 800f434:	a0000826 	beq	r20,zero,800f458 <_dtoa_r+0xa0c>
 800f438:	0580070e 	bge	zero,r22,800f458 <_dtoa_r+0xa0c>
 800f43c:	a005883a 	mov	r2,r20
 800f440:	b500b916 	blt	r22,r20,800f728 <_dtoa_r+0xcdc>
 800f444:	d9000817 	ldw	r4,32(sp)
 800f448:	a0a9c83a 	sub	r20,r20,r2
 800f44c:	b0adc83a 	sub	r22,r22,r2
 800f450:	2089c83a 	sub	r4,r4,r2
 800f454:	d9000815 	stw	r4,32(sp)
 800f458:	d9800a17 	ldw	r6,40(sp)
 800f45c:	0181810e 	bge	zero,r6,800fa64 <_dtoa_r+0x1018>
 800f460:	d9c00b17 	ldw	r7,44(sp)
 800f464:	3800b326 	beq	r7,zero,800f734 <_dtoa_r+0xce8>
 800f468:	a800b226 	beq	r21,zero,800f734 <_dtoa_r+0xce8>
 800f46c:	880b883a 	mov	r5,r17
 800f470:	a80d883a 	mov	r6,r21
 800f474:	e009883a 	mov	r4,fp
 800f478:	80126d80 	call	80126d8 <__pow5mult>
 800f47c:	d9800917 	ldw	r6,36(sp)
 800f480:	100b883a 	mov	r5,r2
 800f484:	e009883a 	mov	r4,fp
 800f488:	1023883a 	mov	r17,r2
 800f48c:	801244c0 	call	801244c <__multiply>
 800f490:	1021883a 	mov	r16,r2
 800f494:	d8800a17 	ldw	r2,40(sp)
 800f498:	d9400917 	ldw	r5,36(sp)
 800f49c:	e009883a 	mov	r4,fp
 800f4a0:	1545c83a 	sub	r2,r2,r21
 800f4a4:	d8800a15 	stw	r2,40(sp)
 800f4a8:	80120840 	call	8012084 <_Bfree>
 800f4ac:	d8c00a17 	ldw	r3,40(sp)
 800f4b0:	18009f1e 	bne	r3,zero,800f730 <_dtoa_r+0xce4>
 800f4b4:	05c00044 	movi	r23,1
 800f4b8:	e009883a 	mov	r4,fp
 800f4bc:	b80b883a 	mov	r5,r23
 800f4c0:	80124100 	call	8012410 <__i2b>
 800f4c4:	d9000d17 	ldw	r4,52(sp)
 800f4c8:	102b883a 	mov	r21,r2
 800f4cc:	2000ce26 	beq	r4,zero,800f808 <_dtoa_r+0xdbc>
 800f4d0:	200d883a 	mov	r6,r4
 800f4d4:	100b883a 	mov	r5,r2
 800f4d8:	e009883a 	mov	r4,fp
 800f4dc:	80126d80 	call	80126d8 <__pow5mult>
 800f4e0:	d9800317 	ldw	r6,12(sp)
 800f4e4:	102b883a 	mov	r21,r2
 800f4e8:	b981810e 	bge	r23,r6,800faf0 <_dtoa_r+0x10a4>
 800f4ec:	0027883a 	mov	r19,zero
 800f4f0:	a8800417 	ldw	r2,16(r21)
 800f4f4:	05c00804 	movi	r23,32
 800f4f8:	10800104 	addi	r2,r2,4
 800f4fc:	1085883a 	add	r2,r2,r2
 800f500:	1085883a 	add	r2,r2,r2
 800f504:	a885883a 	add	r2,r21,r2
 800f508:	11000017 	ldw	r4,0(r2)
 800f50c:	80122f80 	call	80122f8 <__hi0bits>
 800f510:	b885c83a 	sub	r2,r23,r2
 800f514:	1585883a 	add	r2,r2,r22
 800f518:	108007cc 	andi	r2,r2,31
 800f51c:	1000b326 	beq	r2,zero,800f7ec <_dtoa_r+0xda0>
 800f520:	00c00804 	movi	r3,32
 800f524:	1887c83a 	sub	r3,r3,r2
 800f528:	01000104 	movi	r4,4
 800f52c:	20c2cd0e 	bge	r4,r3,8010064 <_dtoa_r+0x1618>
 800f530:	00c00704 	movi	r3,28
 800f534:	1885c83a 	sub	r2,r3,r2
 800f538:	d8c00817 	ldw	r3,32(sp)
 800f53c:	a0a9883a 	add	r20,r20,r2
 800f540:	b0ad883a 	add	r22,r22,r2
 800f544:	1887883a 	add	r3,r3,r2
 800f548:	d8c00815 	stw	r3,32(sp)
 800f54c:	d9800817 	ldw	r6,32(sp)
 800f550:	0180040e 	bge	zero,r6,800f564 <_dtoa_r+0xb18>
 800f554:	800b883a 	mov	r5,r16
 800f558:	e009883a 	mov	r4,fp
 800f55c:	80128180 	call	8012818 <__lshift>
 800f560:	1021883a 	mov	r16,r2
 800f564:	0580050e 	bge	zero,r22,800f57c <_dtoa_r+0xb30>
 800f568:	a80b883a 	mov	r5,r21
 800f56c:	b00d883a 	mov	r6,r22
 800f570:	e009883a 	mov	r4,fp
 800f574:	80128180 	call	8012818 <__lshift>
 800f578:	102b883a 	mov	r21,r2
 800f57c:	d9c00e17 	ldw	r7,56(sp)
 800f580:	3801211e 	bne	r7,zero,800fa08 <_dtoa_r+0xfbc>
 800f584:	d9800617 	ldw	r6,24(sp)
 800f588:	0181380e 	bge	zero,r6,800fa6c <_dtoa_r+0x1020>
 800f58c:	d8c00b17 	ldw	r3,44(sp)
 800f590:	1800ab1e 	bne	r3,zero,800f840 <_dtoa_r+0xdf4>
 800f594:	dc800717 	ldw	r18,28(sp)
 800f598:	dcc00617 	ldw	r19,24(sp)
 800f59c:	9029883a 	mov	r20,r18
 800f5a0:	00000206 	br	800f5ac <_dtoa_r+0xb60>
 800f5a4:	80120ac0 	call	80120ac <__multadd>
 800f5a8:	1021883a 	mov	r16,r2
 800f5ac:	a80b883a 	mov	r5,r21
 800f5b0:	8009883a 	mov	r4,r16
 800f5b4:	800e8240 	call	800e824 <quorem>
 800f5b8:	10800c04 	addi	r2,r2,48
 800f5bc:	90800005 	stb	r2,0(r18)
 800f5c0:	94800044 	addi	r18,r18,1
 800f5c4:	9507c83a 	sub	r3,r18,r20
 800f5c8:	000f883a 	mov	r7,zero
 800f5cc:	01800284 	movi	r6,10
 800f5d0:	800b883a 	mov	r5,r16
 800f5d4:	e009883a 	mov	r4,fp
 800f5d8:	1cfff216 	blt	r3,r19,800f5a4 <__alt_data_end+0xfc00f5a4>
 800f5dc:	1011883a 	mov	r8,r2
 800f5e0:	d8800617 	ldw	r2,24(sp)
 800f5e4:	0082370e 	bge	zero,r2,800fec4 <_dtoa_r+0x1478>
 800f5e8:	d9000717 	ldw	r4,28(sp)
 800f5ec:	0025883a 	mov	r18,zero
 800f5f0:	20af883a 	add	r23,r4,r2
 800f5f4:	01800044 	movi	r6,1
 800f5f8:	800b883a 	mov	r5,r16
 800f5fc:	e009883a 	mov	r4,fp
 800f600:	da001715 	stw	r8,92(sp)
 800f604:	80128180 	call	8012818 <__lshift>
 800f608:	a80b883a 	mov	r5,r21
 800f60c:	1009883a 	mov	r4,r2
 800f610:	d8800915 	stw	r2,36(sp)
 800f614:	80129600 	call	8012960 <__mcmp>
 800f618:	da001717 	ldw	r8,92(sp)
 800f61c:	0081800e 	bge	zero,r2,800fc20 <_dtoa_r+0x11d4>
 800f620:	b93fffc3 	ldbu	r4,-1(r23)
 800f624:	b8bfffc4 	addi	r2,r23,-1
 800f628:	1007883a 	mov	r3,r2
 800f62c:	01800e44 	movi	r6,57
 800f630:	d9c00717 	ldw	r7,28(sp)
 800f634:	00000506 	br	800f64c <_dtoa_r+0xc00>
 800f638:	18ffffc4 	addi	r3,r3,-1
 800f63c:	11c12326 	beq	r2,r7,800facc <_dtoa_r+0x1080>
 800f640:	19000003 	ldbu	r4,0(r3)
 800f644:	102f883a 	mov	r23,r2
 800f648:	10bfffc4 	addi	r2,r2,-1
 800f64c:	21403fcc 	andi	r5,r4,255
 800f650:	2940201c 	xori	r5,r5,128
 800f654:	297fe004 	addi	r5,r5,-128
 800f658:	29bff726 	beq	r5,r6,800f638 <__alt_data_end+0xfc00f638>
 800f65c:	21000044 	addi	r4,r4,1
 800f660:	11000005 	stb	r4,0(r2)
 800f664:	a80b883a 	mov	r5,r21
 800f668:	e009883a 	mov	r4,fp
 800f66c:	80120840 	call	8012084 <_Bfree>
 800f670:	883ea026 	beq	r17,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f674:	90000426 	beq	r18,zero,800f688 <_dtoa_r+0xc3c>
 800f678:	94400326 	beq	r18,r17,800f688 <_dtoa_r+0xc3c>
 800f67c:	900b883a 	mov	r5,r18
 800f680:	e009883a 	mov	r4,fp
 800f684:	80120840 	call	8012084 <_Bfree>
 800f688:	880b883a 	mov	r5,r17
 800f68c:	e009883a 	mov	r4,fp
 800f690:	80120840 	call	8012084 <_Bfree>
 800f694:	003e9706 	br	800f0f4 <__alt_data_end+0xfc00f0f4>
 800f698:	01800044 	movi	r6,1
 800f69c:	d9800e15 	stw	r6,56(sp)
 800f6a0:	003d9606 	br	800ecfc <__alt_data_end+0xfc00ecfc>
 800f6a4:	d8800817 	ldw	r2,32(sp)
 800f6a8:	d8c00517 	ldw	r3,20(sp)
 800f6ac:	d8000d15 	stw	zero,52(sp)
 800f6b0:	10c5c83a 	sub	r2,r2,r3
 800f6b4:	00c9c83a 	sub	r4,zero,r3
 800f6b8:	d8800815 	stw	r2,32(sp)
 800f6bc:	d9000a15 	stw	r4,40(sp)
 800f6c0:	003d9706 	br	800ed20 <__alt_data_end+0xfc00ed20>
 800f6c4:	05adc83a 	sub	r22,zero,r22
 800f6c8:	dd800815 	stw	r22,32(sp)
 800f6cc:	002d883a 	mov	r22,zero
 800f6d0:	003d8e06 	br	800ed0c <__alt_data_end+0xfc00ed0c>
 800f6d4:	d9000517 	ldw	r4,20(sp)
 800f6d8:	800bb6c0 	call	800bb6c <__floatsidf>
 800f6dc:	100d883a 	mov	r6,r2
 800f6e0:	180f883a 	mov	r7,r3
 800f6e4:	a009883a 	mov	r4,r20
 800f6e8:	880b883a 	mov	r5,r17
 800f6ec:	800a72c0 	call	800a72c <__eqdf2>
 800f6f0:	103d7126 	beq	r2,zero,800ecb8 <__alt_data_end+0xfc00ecb8>
 800f6f4:	d9c00517 	ldw	r7,20(sp)
 800f6f8:	39ffffc4 	addi	r7,r7,-1
 800f6fc:	d9c00515 	stw	r7,20(sp)
 800f700:	003d6d06 	br	800ecb8 <__alt_data_end+0xfc00ecb8>
 800f704:	dd400a17 	ldw	r21,40(sp)
 800f708:	dd000817 	ldw	r20,32(sp)
 800f70c:	0023883a 	mov	r17,zero
 800f710:	003f4806 	br	800f434 <__alt_data_end+0xfc00f434>
 800f714:	10e3c83a 	sub	r17,r2,r3
 800f718:	9448983a 	sll	r4,r18,r17
 800f71c:	003d3206 	br	800ebe8 <__alt_data_end+0xfc00ebe8>
 800f720:	d8000e15 	stw	zero,56(sp)
 800f724:	003d7506 	br	800ecfc <__alt_data_end+0xfc00ecfc>
 800f728:	b005883a 	mov	r2,r22
 800f72c:	003f4506 	br	800f444 <__alt_data_end+0xfc00f444>
 800f730:	dc000915 	stw	r16,36(sp)
 800f734:	d9800a17 	ldw	r6,40(sp)
 800f738:	d9400917 	ldw	r5,36(sp)
 800f73c:	e009883a 	mov	r4,fp
 800f740:	80126d80 	call	80126d8 <__pow5mult>
 800f744:	1021883a 	mov	r16,r2
 800f748:	003f5a06 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800f74c:	01c00044 	movi	r7,1
 800f750:	d9c00b15 	stw	r7,44(sp)
 800f754:	d8802217 	ldw	r2,136(sp)
 800f758:	0081280e 	bge	zero,r2,800fbfc <_dtoa_r+0x11b0>
 800f75c:	100d883a 	mov	r6,r2
 800f760:	1021883a 	mov	r16,r2
 800f764:	d8800c15 	stw	r2,48(sp)
 800f768:	d8800615 	stw	r2,24(sp)
 800f76c:	003d8806 	br	800ed90 <__alt_data_end+0xfc00ed90>
 800f770:	d8800617 	ldw	r2,24(sp)
 800f774:	00be9b16 	blt	zero,r2,800f1e4 <__alt_data_end+0xfc00f1e4>
 800f778:	10010f1e 	bne	r2,zero,800fbb8 <_dtoa_r+0x116c>
 800f77c:	880b883a 	mov	r5,r17
 800f780:	000d883a 	mov	r6,zero
 800f784:	01d00534 	movhi	r7,16404
 800f788:	8009883a 	mov	r4,r16
 800f78c:	800a9840 	call	800a984 <__muldf3>
 800f790:	900d883a 	mov	r6,r18
 800f794:	980f883a 	mov	r7,r19
 800f798:	1009883a 	mov	r4,r2
 800f79c:	180b883a 	mov	r5,r3
 800f7a0:	800a7b40 	call	800a7b4 <__gedf2>
 800f7a4:	002b883a 	mov	r21,zero
 800f7a8:	0023883a 	mov	r17,zero
 800f7ac:	1000bf16 	blt	r2,zero,800faac <_dtoa_r+0x1060>
 800f7b0:	d9802217 	ldw	r6,136(sp)
 800f7b4:	ddc00717 	ldw	r23,28(sp)
 800f7b8:	018c303a 	nor	r6,zero,r6
 800f7bc:	d9800515 	stw	r6,20(sp)
 800f7c0:	a80b883a 	mov	r5,r21
 800f7c4:	e009883a 	mov	r4,fp
 800f7c8:	80120840 	call	8012084 <_Bfree>
 800f7cc:	883e4926 	beq	r17,zero,800f0f4 <__alt_data_end+0xfc00f0f4>
 800f7d0:	003fad06 	br	800f688 <__alt_data_end+0xfc00f688>
 800f7d4:	d9c01117 	ldw	r7,68(sp)
 800f7d8:	3801bc26 	beq	r7,zero,800fecc <_dtoa_r+0x1480>
 800f7dc:	10810cc4 	addi	r2,r2,1075
 800f7e0:	dd400a17 	ldw	r21,40(sp)
 800f7e4:	dd000817 	ldw	r20,32(sp)
 800f7e8:	003f0a06 	br	800f414 <__alt_data_end+0xfc00f414>
 800f7ec:	00800704 	movi	r2,28
 800f7f0:	d9000817 	ldw	r4,32(sp)
 800f7f4:	a0a9883a 	add	r20,r20,r2
 800f7f8:	b0ad883a 	add	r22,r22,r2
 800f7fc:	2089883a 	add	r4,r4,r2
 800f800:	d9000815 	stw	r4,32(sp)
 800f804:	003f5106 	br	800f54c <__alt_data_end+0xfc00f54c>
 800f808:	d8c00317 	ldw	r3,12(sp)
 800f80c:	b8c1fc0e 	bge	r23,r3,8010000 <_dtoa_r+0x15b4>
 800f810:	0027883a 	mov	r19,zero
 800f814:	b805883a 	mov	r2,r23
 800f818:	003f3e06 	br	800f514 <__alt_data_end+0xfc00f514>
 800f81c:	880b883a 	mov	r5,r17
 800f820:	e009883a 	mov	r4,fp
 800f824:	000f883a 	mov	r7,zero
 800f828:	01800284 	movi	r6,10
 800f82c:	80120ac0 	call	80120ac <__multadd>
 800f830:	d9000c17 	ldw	r4,48(sp)
 800f834:	1023883a 	mov	r17,r2
 800f838:	0102040e 	bge	zero,r4,801004c <_dtoa_r+0x1600>
 800f83c:	d9000615 	stw	r4,24(sp)
 800f840:	0500050e 	bge	zero,r20,800f858 <_dtoa_r+0xe0c>
 800f844:	880b883a 	mov	r5,r17
 800f848:	a00d883a 	mov	r6,r20
 800f84c:	e009883a 	mov	r4,fp
 800f850:	80128180 	call	8012818 <__lshift>
 800f854:	1023883a 	mov	r17,r2
 800f858:	9801241e 	bne	r19,zero,800fcec <_dtoa_r+0x12a0>
 800f85c:	8829883a 	mov	r20,r17
 800f860:	d9000617 	ldw	r4,24(sp)
 800f864:	dcc00717 	ldw	r19,28(sp)
 800f868:	9480004c 	andi	r18,r18,1
 800f86c:	20bfffc4 	addi	r2,r4,-1
 800f870:	9885883a 	add	r2,r19,r2
 800f874:	d8800415 	stw	r2,16(sp)
 800f878:	dc800615 	stw	r18,24(sp)
 800f87c:	a80b883a 	mov	r5,r21
 800f880:	8009883a 	mov	r4,r16
 800f884:	800e8240 	call	800e824 <quorem>
 800f888:	880b883a 	mov	r5,r17
 800f88c:	8009883a 	mov	r4,r16
 800f890:	102f883a 	mov	r23,r2
 800f894:	80129600 	call	8012960 <__mcmp>
 800f898:	a80b883a 	mov	r5,r21
 800f89c:	a00d883a 	mov	r6,r20
 800f8a0:	e009883a 	mov	r4,fp
 800f8a4:	102d883a 	mov	r22,r2
 800f8a8:	80129c00 	call	80129c0 <__mdiff>
 800f8ac:	1007883a 	mov	r3,r2
 800f8b0:	10800317 	ldw	r2,12(r2)
 800f8b4:	bc800c04 	addi	r18,r23,48
 800f8b8:	180b883a 	mov	r5,r3
 800f8bc:	10004e1e 	bne	r2,zero,800f9f8 <_dtoa_r+0xfac>
 800f8c0:	8009883a 	mov	r4,r16
 800f8c4:	d8c01615 	stw	r3,88(sp)
 800f8c8:	80129600 	call	8012960 <__mcmp>
 800f8cc:	d8c01617 	ldw	r3,88(sp)
 800f8d0:	e009883a 	mov	r4,fp
 800f8d4:	d8801615 	stw	r2,88(sp)
 800f8d8:	180b883a 	mov	r5,r3
 800f8dc:	80120840 	call	8012084 <_Bfree>
 800f8e0:	d8801617 	ldw	r2,88(sp)
 800f8e4:	1000041e 	bne	r2,zero,800f8f8 <_dtoa_r+0xeac>
 800f8e8:	d9800317 	ldw	r6,12(sp)
 800f8ec:	3000021e 	bne	r6,zero,800f8f8 <_dtoa_r+0xeac>
 800f8f0:	d8c00617 	ldw	r3,24(sp)
 800f8f4:	18003726 	beq	r3,zero,800f9d4 <_dtoa_r+0xf88>
 800f8f8:	b0002016 	blt	r22,zero,800f97c <_dtoa_r+0xf30>
 800f8fc:	b000041e 	bne	r22,zero,800f910 <_dtoa_r+0xec4>
 800f900:	d9000317 	ldw	r4,12(sp)
 800f904:	2000021e 	bne	r4,zero,800f910 <_dtoa_r+0xec4>
 800f908:	d8c00617 	ldw	r3,24(sp)
 800f90c:	18001b26 	beq	r3,zero,800f97c <_dtoa_r+0xf30>
 800f910:	00810716 	blt	zero,r2,800fd30 <_dtoa_r+0x12e4>
 800f914:	d8c00417 	ldw	r3,16(sp)
 800f918:	9d800044 	addi	r22,r19,1
 800f91c:	9c800005 	stb	r18,0(r19)
 800f920:	b02f883a 	mov	r23,r22
 800f924:	98c10626 	beq	r19,r3,800fd40 <_dtoa_r+0x12f4>
 800f928:	800b883a 	mov	r5,r16
 800f92c:	000f883a 	mov	r7,zero
 800f930:	01800284 	movi	r6,10
 800f934:	e009883a 	mov	r4,fp
 800f938:	80120ac0 	call	80120ac <__multadd>
 800f93c:	1021883a 	mov	r16,r2
 800f940:	000f883a 	mov	r7,zero
 800f944:	01800284 	movi	r6,10
 800f948:	880b883a 	mov	r5,r17
 800f94c:	e009883a 	mov	r4,fp
 800f950:	8d002526 	beq	r17,r20,800f9e8 <_dtoa_r+0xf9c>
 800f954:	80120ac0 	call	80120ac <__multadd>
 800f958:	a00b883a 	mov	r5,r20
 800f95c:	000f883a 	mov	r7,zero
 800f960:	01800284 	movi	r6,10
 800f964:	e009883a 	mov	r4,fp
 800f968:	1023883a 	mov	r17,r2
 800f96c:	80120ac0 	call	80120ac <__multadd>
 800f970:	1029883a 	mov	r20,r2
 800f974:	b027883a 	mov	r19,r22
 800f978:	003fc006 	br	800f87c <__alt_data_end+0xfc00f87c>
 800f97c:	9011883a 	mov	r8,r18
 800f980:	00800e0e 	bge	zero,r2,800f9bc <_dtoa_r+0xf70>
 800f984:	800b883a 	mov	r5,r16
 800f988:	01800044 	movi	r6,1
 800f98c:	e009883a 	mov	r4,fp
 800f990:	da001715 	stw	r8,92(sp)
 800f994:	80128180 	call	8012818 <__lshift>
 800f998:	a80b883a 	mov	r5,r21
 800f99c:	1009883a 	mov	r4,r2
 800f9a0:	1021883a 	mov	r16,r2
 800f9a4:	80129600 	call	8012960 <__mcmp>
 800f9a8:	da001717 	ldw	r8,92(sp)
 800f9ac:	0081960e 	bge	zero,r2,8010008 <_dtoa_r+0x15bc>
 800f9b0:	00800e44 	movi	r2,57
 800f9b4:	40817026 	beq	r8,r2,800ff78 <_dtoa_r+0x152c>
 800f9b8:	ba000c44 	addi	r8,r23,49
 800f9bc:	8825883a 	mov	r18,r17
 800f9c0:	9dc00044 	addi	r23,r19,1
 800f9c4:	9a000005 	stb	r8,0(r19)
 800f9c8:	a023883a 	mov	r17,r20
 800f9cc:	dc000915 	stw	r16,36(sp)
 800f9d0:	003f2406 	br	800f664 <__alt_data_end+0xfc00f664>
 800f9d4:	00800e44 	movi	r2,57
 800f9d8:	9011883a 	mov	r8,r18
 800f9dc:	90816626 	beq	r18,r2,800ff78 <_dtoa_r+0x152c>
 800f9e0:	05bff516 	blt	zero,r22,800f9b8 <__alt_data_end+0xfc00f9b8>
 800f9e4:	003ff506 	br	800f9bc <__alt_data_end+0xfc00f9bc>
 800f9e8:	80120ac0 	call	80120ac <__multadd>
 800f9ec:	1023883a 	mov	r17,r2
 800f9f0:	1029883a 	mov	r20,r2
 800f9f4:	003fdf06 	br	800f974 <__alt_data_end+0xfc00f974>
 800f9f8:	e009883a 	mov	r4,fp
 800f9fc:	80120840 	call	8012084 <_Bfree>
 800fa00:	00800044 	movi	r2,1
 800fa04:	003fbc06 	br	800f8f8 <__alt_data_end+0xfc00f8f8>
 800fa08:	a80b883a 	mov	r5,r21
 800fa0c:	8009883a 	mov	r4,r16
 800fa10:	80129600 	call	8012960 <__mcmp>
 800fa14:	103edb0e 	bge	r2,zero,800f584 <__alt_data_end+0xfc00f584>
 800fa18:	800b883a 	mov	r5,r16
 800fa1c:	000f883a 	mov	r7,zero
 800fa20:	01800284 	movi	r6,10
 800fa24:	e009883a 	mov	r4,fp
 800fa28:	80120ac0 	call	80120ac <__multadd>
 800fa2c:	1021883a 	mov	r16,r2
 800fa30:	d8800517 	ldw	r2,20(sp)
 800fa34:	d8c00b17 	ldw	r3,44(sp)
 800fa38:	10bfffc4 	addi	r2,r2,-1
 800fa3c:	d8800515 	stw	r2,20(sp)
 800fa40:	183f761e 	bne	r3,zero,800f81c <__alt_data_end+0xfc00f81c>
 800fa44:	d9000c17 	ldw	r4,48(sp)
 800fa48:	0101730e 	bge	zero,r4,8010018 <_dtoa_r+0x15cc>
 800fa4c:	d9000615 	stw	r4,24(sp)
 800fa50:	003ed006 	br	800f594 <__alt_data_end+0xfc00f594>
 800fa54:	00800084 	movi	r2,2
 800fa58:	3081861e 	bne	r6,r2,8010074 <_dtoa_r+0x1628>
 800fa5c:	d8000b15 	stw	zero,44(sp)
 800fa60:	003f3c06 	br	800f754 <__alt_data_end+0xfc00f754>
 800fa64:	dc000917 	ldw	r16,36(sp)
 800fa68:	003e9206 	br	800f4b4 <__alt_data_end+0xfc00f4b4>
 800fa6c:	d9c00317 	ldw	r7,12(sp)
 800fa70:	00800084 	movi	r2,2
 800fa74:	11fec50e 	bge	r2,r7,800f58c <__alt_data_end+0xfc00f58c>
 800fa78:	d9000617 	ldw	r4,24(sp)
 800fa7c:	20013c1e 	bne	r4,zero,800ff70 <_dtoa_r+0x1524>
 800fa80:	a80b883a 	mov	r5,r21
 800fa84:	000f883a 	mov	r7,zero
 800fa88:	01800144 	movi	r6,5
 800fa8c:	e009883a 	mov	r4,fp
 800fa90:	80120ac0 	call	80120ac <__multadd>
 800fa94:	100b883a 	mov	r5,r2
 800fa98:	8009883a 	mov	r4,r16
 800fa9c:	102b883a 	mov	r21,r2
 800faa0:	80129600 	call	8012960 <__mcmp>
 800faa4:	dc000915 	stw	r16,36(sp)
 800faa8:	00bf410e 	bge	zero,r2,800f7b0 <__alt_data_end+0xfc00f7b0>
 800faac:	d9c00717 	ldw	r7,28(sp)
 800fab0:	00800c44 	movi	r2,49
 800fab4:	38800005 	stb	r2,0(r7)
 800fab8:	d8800517 	ldw	r2,20(sp)
 800fabc:	3dc00044 	addi	r23,r7,1
 800fac0:	10800044 	addi	r2,r2,1
 800fac4:	d8800515 	stw	r2,20(sp)
 800fac8:	003f3d06 	br	800f7c0 <__alt_data_end+0xfc00f7c0>
 800facc:	d9800517 	ldw	r6,20(sp)
 800fad0:	d9c00717 	ldw	r7,28(sp)
 800fad4:	00800c44 	movi	r2,49
 800fad8:	31800044 	addi	r6,r6,1
 800fadc:	d9800515 	stw	r6,20(sp)
 800fae0:	38800005 	stb	r2,0(r7)
 800fae4:	003edf06 	br	800f664 <__alt_data_end+0xfc00f664>
 800fae8:	d8000b15 	stw	zero,44(sp)
 800faec:	003c9f06 	br	800ed6c <__alt_data_end+0xfc00ed6c>
 800faf0:	903e7e1e 	bne	r18,zero,800f4ec <__alt_data_end+0xfc00f4ec>
 800faf4:	00800434 	movhi	r2,16
 800faf8:	10bfffc4 	addi	r2,r2,-1
 800fafc:	9884703a 	and	r2,r19,r2
 800fb00:	1000ea1e 	bne	r2,zero,800feac <_dtoa_r+0x1460>
 800fb04:	9cdffc2c 	andhi	r19,r19,32752
 800fb08:	9800e826 	beq	r19,zero,800feac <_dtoa_r+0x1460>
 800fb0c:	d9c00817 	ldw	r7,32(sp)
 800fb10:	b5800044 	addi	r22,r22,1
 800fb14:	04c00044 	movi	r19,1
 800fb18:	39c00044 	addi	r7,r7,1
 800fb1c:	d9c00815 	stw	r7,32(sp)
 800fb20:	d8800d17 	ldw	r2,52(sp)
 800fb24:	103e721e 	bne	r2,zero,800f4f0 <__alt_data_end+0xfc00f4f0>
 800fb28:	00800044 	movi	r2,1
 800fb2c:	003e7906 	br	800f514 <__alt_data_end+0xfc00f514>
 800fb30:	8009883a 	mov	r4,r16
 800fb34:	800bb6c0 	call	800bb6c <__floatsidf>
 800fb38:	d9800f17 	ldw	r6,60(sp)
 800fb3c:	d9c01017 	ldw	r7,64(sp)
 800fb40:	1009883a 	mov	r4,r2
 800fb44:	180b883a 	mov	r5,r3
 800fb48:	800a9840 	call	800a984 <__muldf3>
 800fb4c:	000d883a 	mov	r6,zero
 800fb50:	01d00734 	movhi	r7,16412
 800fb54:	1009883a 	mov	r4,r2
 800fb58:	180b883a 	mov	r5,r3
 800fb5c:	80094b00 	call	80094b0 <__adddf3>
 800fb60:	047f3034 	movhi	r17,64704
 800fb64:	1021883a 	mov	r16,r2
 800fb68:	1c63883a 	add	r17,r3,r17
 800fb6c:	d9000f17 	ldw	r4,60(sp)
 800fb70:	d9401017 	ldw	r5,64(sp)
 800fb74:	000d883a 	mov	r6,zero
 800fb78:	01d00534 	movhi	r7,16404
 800fb7c:	800b1f00 	call	800b1f0 <__subdf3>
 800fb80:	800d883a 	mov	r6,r16
 800fb84:	880f883a 	mov	r7,r17
 800fb88:	1009883a 	mov	r4,r2
 800fb8c:	180b883a 	mov	r5,r3
 800fb90:	102b883a 	mov	r21,r2
 800fb94:	1829883a 	mov	r20,r3
 800fb98:	800a7b40 	call	800a7b4 <__gedf2>
 800fb9c:	00806c16 	blt	zero,r2,800fd50 <_dtoa_r+0x1304>
 800fba0:	89e0003c 	xorhi	r7,r17,32768
 800fba4:	800d883a 	mov	r6,r16
 800fba8:	a809883a 	mov	r4,r21
 800fbac:	a00b883a 	mov	r5,r20
 800fbb0:	800a8900 	call	800a890 <__ledf2>
 800fbb4:	103d7e0e 	bge	r2,zero,800f1b0 <__alt_data_end+0xfc00f1b0>
 800fbb8:	002b883a 	mov	r21,zero
 800fbbc:	0023883a 	mov	r17,zero
 800fbc0:	003efb06 	br	800f7b0 <__alt_data_end+0xfc00f7b0>
 800fbc4:	d8800717 	ldw	r2,28(sp)
 800fbc8:	003bd006 	br	800eb0c <__alt_data_end+0xfc00eb0c>
 800fbcc:	d9000a17 	ldw	r4,40(sp)
 800fbd0:	d9800d17 	ldw	r6,52(sp)
 800fbd4:	dd400a15 	stw	r21,40(sp)
 800fbd8:	a905c83a 	sub	r2,r21,r4
 800fbdc:	308d883a 	add	r6,r6,r2
 800fbe0:	d9800d15 	stw	r6,52(sp)
 800fbe4:	002b883a 	mov	r21,zero
 800fbe8:	003e0606 	br	800f404 <__alt_data_end+0xfc00f404>
 800fbec:	9023883a 	mov	r17,r18
 800fbf0:	9829883a 	mov	r20,r19
 800fbf4:	04000084 	movi	r16,2
 800fbf8:	003c9206 	br	800ee44 <__alt_data_end+0xfc00ee44>
 800fbfc:	04000044 	movi	r16,1
 800fc00:	dc000c15 	stw	r16,48(sp)
 800fc04:	dc000615 	stw	r16,24(sp)
 800fc08:	dc002215 	stw	r16,136(sp)
 800fc0c:	e0001115 	stw	zero,68(fp)
 800fc10:	000b883a 	mov	r5,zero
 800fc14:	003c6906 	br	800edbc <__alt_data_end+0xfc00edbc>
 800fc18:	3021883a 	mov	r16,r6
 800fc1c:	003ffb06 	br	800fc0c <__alt_data_end+0xfc00fc0c>
 800fc20:	1000021e 	bne	r2,zero,800fc2c <_dtoa_r+0x11e0>
 800fc24:	4200004c 	andi	r8,r8,1
 800fc28:	403e7d1e 	bne	r8,zero,800f620 <__alt_data_end+0xfc00f620>
 800fc2c:	01000c04 	movi	r4,48
 800fc30:	00000106 	br	800fc38 <_dtoa_r+0x11ec>
 800fc34:	102f883a 	mov	r23,r2
 800fc38:	b8bfffc4 	addi	r2,r23,-1
 800fc3c:	10c00007 	ldb	r3,0(r2)
 800fc40:	193ffc26 	beq	r3,r4,800fc34 <__alt_data_end+0xfc00fc34>
 800fc44:	003e8706 	br	800f664 <__alt_data_end+0xfc00f664>
 800fc48:	d8800517 	ldw	r2,20(sp)
 800fc4c:	00a3c83a 	sub	r17,zero,r2
 800fc50:	8800a426 	beq	r17,zero,800fee4 <_dtoa_r+0x1498>
 800fc54:	888003cc 	andi	r2,r17,15
 800fc58:	100490fa 	slli	r2,r2,3
 800fc5c:	00c20d74 	movhi	r3,2101
 800fc60:	18e17c04 	addi	r3,r3,-31248
 800fc64:	1885883a 	add	r2,r3,r2
 800fc68:	11800017 	ldw	r6,0(r2)
 800fc6c:	11c00117 	ldw	r7,4(r2)
 800fc70:	9009883a 	mov	r4,r18
 800fc74:	980b883a 	mov	r5,r19
 800fc78:	8823d13a 	srai	r17,r17,4
 800fc7c:	800a9840 	call	800a984 <__muldf3>
 800fc80:	d8800f15 	stw	r2,60(sp)
 800fc84:	d8c01015 	stw	r3,64(sp)
 800fc88:	8800e826 	beq	r17,zero,801002c <_dtoa_r+0x15e0>
 800fc8c:	05020d74 	movhi	r20,2101
 800fc90:	a5217204 	addi	r20,r20,-31288
 800fc94:	04000084 	movi	r16,2
 800fc98:	8980004c 	andi	r6,r17,1
 800fc9c:	1009883a 	mov	r4,r2
 800fca0:	8823d07a 	srai	r17,r17,1
 800fca4:	180b883a 	mov	r5,r3
 800fca8:	30000426 	beq	r6,zero,800fcbc <_dtoa_r+0x1270>
 800fcac:	a1800017 	ldw	r6,0(r20)
 800fcb0:	a1c00117 	ldw	r7,4(r20)
 800fcb4:	84000044 	addi	r16,r16,1
 800fcb8:	800a9840 	call	800a984 <__muldf3>
 800fcbc:	a5000204 	addi	r20,r20,8
 800fcc0:	883ff51e 	bne	r17,zero,800fc98 <__alt_data_end+0xfc00fc98>
 800fcc4:	d8800f15 	stw	r2,60(sp)
 800fcc8:	d8c01015 	stw	r3,64(sp)
 800fccc:	003c7606 	br	800eea8 <__alt_data_end+0xfc00eea8>
 800fcd0:	00c00c04 	movi	r3,48
 800fcd4:	10c00005 	stb	r3,0(r2)
 800fcd8:	d8c00517 	ldw	r3,20(sp)
 800fcdc:	bd3fffc3 	ldbu	r20,-1(r23)
 800fce0:	18c00044 	addi	r3,r3,1
 800fce4:	d8c00515 	stw	r3,20(sp)
 800fce8:	003db906 	br	800f3d0 <__alt_data_end+0xfc00f3d0>
 800fcec:	89400117 	ldw	r5,4(r17)
 800fcf0:	e009883a 	mov	r4,fp
 800fcf4:	8011fdc0 	call	8011fdc <_Balloc>
 800fcf8:	89800417 	ldw	r6,16(r17)
 800fcfc:	89400304 	addi	r5,r17,12
 800fd00:	11000304 	addi	r4,r2,12
 800fd04:	31800084 	addi	r6,r6,2
 800fd08:	318d883a 	add	r6,r6,r6
 800fd0c:	318d883a 	add	r6,r6,r6
 800fd10:	1027883a 	mov	r19,r2
 800fd14:	8011d380 	call	8011d38 <memcpy>
 800fd18:	01800044 	movi	r6,1
 800fd1c:	980b883a 	mov	r5,r19
 800fd20:	e009883a 	mov	r4,fp
 800fd24:	80128180 	call	8012818 <__lshift>
 800fd28:	1029883a 	mov	r20,r2
 800fd2c:	003ecc06 	br	800f860 <__alt_data_end+0xfc00f860>
 800fd30:	00800e44 	movi	r2,57
 800fd34:	90809026 	beq	r18,r2,800ff78 <_dtoa_r+0x152c>
 800fd38:	92000044 	addi	r8,r18,1
 800fd3c:	003f1f06 	br	800f9bc <__alt_data_end+0xfc00f9bc>
 800fd40:	9011883a 	mov	r8,r18
 800fd44:	8825883a 	mov	r18,r17
 800fd48:	a023883a 	mov	r17,r20
 800fd4c:	003e2906 	br	800f5f4 <__alt_data_end+0xfc00f5f4>
 800fd50:	002b883a 	mov	r21,zero
 800fd54:	0023883a 	mov	r17,zero
 800fd58:	003f5406 	br	800faac <__alt_data_end+0xfc00faac>
 800fd5c:	61bfffc4 	addi	r6,r12,-1
 800fd60:	300490fa 	slli	r2,r6,3
 800fd64:	00c20d74 	movhi	r3,2101
 800fd68:	18e17c04 	addi	r3,r3,-31248
 800fd6c:	1885883a 	add	r2,r3,r2
 800fd70:	11000017 	ldw	r4,0(r2)
 800fd74:	11400117 	ldw	r5,4(r2)
 800fd78:	d8800717 	ldw	r2,28(sp)
 800fd7c:	880f883a 	mov	r7,r17
 800fd80:	d9801215 	stw	r6,72(sp)
 800fd84:	800d883a 	mov	r6,r16
 800fd88:	db001615 	stw	r12,88(sp)
 800fd8c:	15c00044 	addi	r23,r2,1
 800fd90:	800a9840 	call	800a984 <__muldf3>
 800fd94:	d9401017 	ldw	r5,64(sp)
 800fd98:	d9000f17 	ldw	r4,60(sp)
 800fd9c:	d8c01515 	stw	r3,84(sp)
 800fda0:	d8801415 	stw	r2,80(sp)
 800fda4:	800baec0 	call	800baec <__fixdfsi>
 800fda8:	1009883a 	mov	r4,r2
 800fdac:	1021883a 	mov	r16,r2
 800fdb0:	800bb6c0 	call	800bb6c <__floatsidf>
 800fdb4:	d9000f17 	ldw	r4,60(sp)
 800fdb8:	d9401017 	ldw	r5,64(sp)
 800fdbc:	100d883a 	mov	r6,r2
 800fdc0:	180f883a 	mov	r7,r3
 800fdc4:	800b1f00 	call	800b1f0 <__subdf3>
 800fdc8:	1829883a 	mov	r20,r3
 800fdcc:	d8c00717 	ldw	r3,28(sp)
 800fdd0:	84000c04 	addi	r16,r16,48
 800fdd4:	1023883a 	mov	r17,r2
 800fdd8:	1c000005 	stb	r16,0(r3)
 800fddc:	db001617 	ldw	r12,88(sp)
 800fde0:	00800044 	movi	r2,1
 800fde4:	60802226 	beq	r12,r2,800fe70 <_dtoa_r+0x1424>
 800fde8:	d9c00717 	ldw	r7,28(sp)
 800fdec:	8805883a 	mov	r2,r17
 800fdf0:	b82b883a 	mov	r21,r23
 800fdf4:	3b19883a 	add	r12,r7,r12
 800fdf8:	6023883a 	mov	r17,r12
 800fdfc:	a007883a 	mov	r3,r20
 800fe00:	dc800f15 	stw	r18,60(sp)
 800fe04:	000d883a 	mov	r6,zero
 800fe08:	01d00934 	movhi	r7,16420
 800fe0c:	1009883a 	mov	r4,r2
 800fe10:	180b883a 	mov	r5,r3
 800fe14:	800a9840 	call	800a984 <__muldf3>
 800fe18:	180b883a 	mov	r5,r3
 800fe1c:	1009883a 	mov	r4,r2
 800fe20:	1829883a 	mov	r20,r3
 800fe24:	1025883a 	mov	r18,r2
 800fe28:	800baec0 	call	800baec <__fixdfsi>
 800fe2c:	1009883a 	mov	r4,r2
 800fe30:	1021883a 	mov	r16,r2
 800fe34:	800bb6c0 	call	800bb6c <__floatsidf>
 800fe38:	100d883a 	mov	r6,r2
 800fe3c:	180f883a 	mov	r7,r3
 800fe40:	9009883a 	mov	r4,r18
 800fe44:	a00b883a 	mov	r5,r20
 800fe48:	84000c04 	addi	r16,r16,48
 800fe4c:	800b1f00 	call	800b1f0 <__subdf3>
 800fe50:	ad400044 	addi	r21,r21,1
 800fe54:	ac3fffc5 	stb	r16,-1(r21)
 800fe58:	ac7fea1e 	bne	r21,r17,800fe04 <__alt_data_end+0xfc00fe04>
 800fe5c:	1023883a 	mov	r17,r2
 800fe60:	d8801217 	ldw	r2,72(sp)
 800fe64:	dc800f17 	ldw	r18,60(sp)
 800fe68:	1829883a 	mov	r20,r3
 800fe6c:	b8af883a 	add	r23,r23,r2
 800fe70:	d9001417 	ldw	r4,80(sp)
 800fe74:	d9401517 	ldw	r5,84(sp)
 800fe78:	000d883a 	mov	r6,zero
 800fe7c:	01cff834 	movhi	r7,16352
 800fe80:	80094b00 	call	80094b0 <__adddf3>
 800fe84:	880d883a 	mov	r6,r17
 800fe88:	a00f883a 	mov	r7,r20
 800fe8c:	1009883a 	mov	r4,r2
 800fe90:	180b883a 	mov	r5,r3
 800fe94:	800a8900 	call	800a890 <__ledf2>
 800fe98:	10003e0e 	bge	r2,zero,800ff94 <_dtoa_r+0x1548>
 800fe9c:	d9001317 	ldw	r4,76(sp)
 800fea0:	bd3fffc3 	ldbu	r20,-1(r23)
 800fea4:	d9000515 	stw	r4,20(sp)
 800fea8:	003d3b06 	br	800f398 <__alt_data_end+0xfc00f398>
 800feac:	0027883a 	mov	r19,zero
 800feb0:	003f1b06 	br	800fb20 <__alt_data_end+0xfc00fb20>
 800feb4:	d8800817 	ldw	r2,32(sp)
 800feb8:	11e9c83a 	sub	r20,r2,r7
 800febc:	0005883a 	mov	r2,zero
 800fec0:	003d5406 	br	800f414 <__alt_data_end+0xfc00f414>
 800fec4:	00800044 	movi	r2,1
 800fec8:	003dc706 	br	800f5e8 <__alt_data_end+0xfc00f5e8>
 800fecc:	d8c00217 	ldw	r3,8(sp)
 800fed0:	00800d84 	movi	r2,54
 800fed4:	dd400a17 	ldw	r21,40(sp)
 800fed8:	10c5c83a 	sub	r2,r2,r3
 800fedc:	dd000817 	ldw	r20,32(sp)
 800fee0:	003d4c06 	br	800f414 <__alt_data_end+0xfc00f414>
 800fee4:	dc800f15 	stw	r18,60(sp)
 800fee8:	dcc01015 	stw	r19,64(sp)
 800feec:	04000084 	movi	r16,2
 800fef0:	003bed06 	br	800eea8 <__alt_data_end+0xfc00eea8>
 800fef4:	d9000617 	ldw	r4,24(sp)
 800fef8:	203f0d26 	beq	r4,zero,800fb30 <__alt_data_end+0xfc00fb30>
 800fefc:	d9800c17 	ldw	r6,48(sp)
 800ff00:	01bcab0e 	bge	zero,r6,800f1b0 <__alt_data_end+0xfc00f1b0>
 800ff04:	d9401017 	ldw	r5,64(sp)
 800ff08:	d9000f17 	ldw	r4,60(sp)
 800ff0c:	000d883a 	mov	r6,zero
 800ff10:	01d00934 	movhi	r7,16420
 800ff14:	800a9840 	call	800a984 <__muldf3>
 800ff18:	81000044 	addi	r4,r16,1
 800ff1c:	d8800f15 	stw	r2,60(sp)
 800ff20:	d8c01015 	stw	r3,64(sp)
 800ff24:	800bb6c0 	call	800bb6c <__floatsidf>
 800ff28:	d9800f17 	ldw	r6,60(sp)
 800ff2c:	d9c01017 	ldw	r7,64(sp)
 800ff30:	1009883a 	mov	r4,r2
 800ff34:	180b883a 	mov	r5,r3
 800ff38:	800a9840 	call	800a984 <__muldf3>
 800ff3c:	01d00734 	movhi	r7,16412
 800ff40:	000d883a 	mov	r6,zero
 800ff44:	1009883a 	mov	r4,r2
 800ff48:	180b883a 	mov	r5,r3
 800ff4c:	80094b00 	call	80094b0 <__adddf3>
 800ff50:	d9c00517 	ldw	r7,20(sp)
 800ff54:	047f3034 	movhi	r17,64704
 800ff58:	1021883a 	mov	r16,r2
 800ff5c:	39ffffc4 	addi	r7,r7,-1
 800ff60:	d9c01315 	stw	r7,76(sp)
 800ff64:	1c63883a 	add	r17,r3,r17
 800ff68:	db000c17 	ldw	r12,48(sp)
 800ff6c:	003bea06 	br	800ef18 <__alt_data_end+0xfc00ef18>
 800ff70:	dc000915 	stw	r16,36(sp)
 800ff74:	003e0e06 	br	800f7b0 <__alt_data_end+0xfc00f7b0>
 800ff78:	01000e44 	movi	r4,57
 800ff7c:	8825883a 	mov	r18,r17
 800ff80:	9dc00044 	addi	r23,r19,1
 800ff84:	99000005 	stb	r4,0(r19)
 800ff88:	a023883a 	mov	r17,r20
 800ff8c:	dc000915 	stw	r16,36(sp)
 800ff90:	003da406 	br	800f624 <__alt_data_end+0xfc00f624>
 800ff94:	d9801417 	ldw	r6,80(sp)
 800ff98:	d9c01517 	ldw	r7,84(sp)
 800ff9c:	0009883a 	mov	r4,zero
 800ffa0:	014ff834 	movhi	r5,16352
 800ffa4:	800b1f00 	call	800b1f0 <__subdf3>
 800ffa8:	880d883a 	mov	r6,r17
 800ffac:	a00f883a 	mov	r7,r20
 800ffb0:	1009883a 	mov	r4,r2
 800ffb4:	180b883a 	mov	r5,r3
 800ffb8:	800a7b40 	call	800a7b4 <__gedf2>
 800ffbc:	00bc7c0e 	bge	zero,r2,800f1b0 <__alt_data_end+0xfc00f1b0>
 800ffc0:	01000c04 	movi	r4,48
 800ffc4:	00000106 	br	800ffcc <_dtoa_r+0x1580>
 800ffc8:	102f883a 	mov	r23,r2
 800ffcc:	b8bfffc4 	addi	r2,r23,-1
 800ffd0:	10c00007 	ldb	r3,0(r2)
 800ffd4:	193ffc26 	beq	r3,r4,800ffc8 <__alt_data_end+0xfc00ffc8>
 800ffd8:	d9801317 	ldw	r6,76(sp)
 800ffdc:	d9800515 	stw	r6,20(sp)
 800ffe0:	003c4406 	br	800f0f4 <__alt_data_end+0xfc00f0f4>
 800ffe4:	d9801317 	ldw	r6,76(sp)
 800ffe8:	d9800515 	stw	r6,20(sp)
 800ffec:	003cea06 	br	800f398 <__alt_data_end+0xfc00f398>
 800fff0:	dd800f17 	ldw	r22,60(sp)
 800fff4:	dcc01017 	ldw	r19,64(sp)
 800fff8:	dc801217 	ldw	r18,72(sp)
 800fffc:	003c6c06 	br	800f1b0 <__alt_data_end+0xfc00f1b0>
 8010000:	903e031e 	bne	r18,zero,800f810 <__alt_data_end+0xfc00f810>
 8010004:	003ebb06 	br	800faf4 <__alt_data_end+0xfc00faf4>
 8010008:	103e6c1e 	bne	r2,zero,800f9bc <__alt_data_end+0xfc00f9bc>
 801000c:	4080004c 	andi	r2,r8,1
 8010010:	103e6a26 	beq	r2,zero,800f9bc <__alt_data_end+0xfc00f9bc>
 8010014:	003e6606 	br	800f9b0 <__alt_data_end+0xfc00f9b0>
 8010018:	d8c00317 	ldw	r3,12(sp)
 801001c:	00800084 	movi	r2,2
 8010020:	10c02916 	blt	r2,r3,80100c8 <_dtoa_r+0x167c>
 8010024:	d9000c17 	ldw	r4,48(sp)
 8010028:	003e8806 	br	800fa4c <__alt_data_end+0xfc00fa4c>
 801002c:	04000084 	movi	r16,2
 8010030:	003b9d06 	br	800eea8 <__alt_data_end+0xfc00eea8>
 8010034:	d9001317 	ldw	r4,76(sp)
 8010038:	d9000515 	stw	r4,20(sp)
 801003c:	003cd606 	br	800f398 <__alt_data_end+0xfc00f398>
 8010040:	d8801317 	ldw	r2,76(sp)
 8010044:	d8800515 	stw	r2,20(sp)
 8010048:	003c2a06 	br	800f0f4 <__alt_data_end+0xfc00f0f4>
 801004c:	d9800317 	ldw	r6,12(sp)
 8010050:	00800084 	movi	r2,2
 8010054:	11801516 	blt	r2,r6,80100ac <_dtoa_r+0x1660>
 8010058:	d9c00c17 	ldw	r7,48(sp)
 801005c:	d9c00615 	stw	r7,24(sp)
 8010060:	003df706 	br	800f840 <__alt_data_end+0xfc00f840>
 8010064:	193d3926 	beq	r3,r4,800f54c <__alt_data_end+0xfc00f54c>
 8010068:	00c00f04 	movi	r3,60
 801006c:	1885c83a 	sub	r2,r3,r2
 8010070:	003ddf06 	br	800f7f0 <__alt_data_end+0xfc00f7f0>
 8010074:	e009883a 	mov	r4,fp
 8010078:	e0001115 	stw	zero,68(fp)
 801007c:	000b883a 	mov	r5,zero
 8010080:	8011fdc0 	call	8011fdc <_Balloc>
 8010084:	d8800715 	stw	r2,28(sp)
 8010088:	d8c00717 	ldw	r3,28(sp)
 801008c:	00bfffc4 	movi	r2,-1
 8010090:	01000044 	movi	r4,1
 8010094:	d8800c15 	stw	r2,48(sp)
 8010098:	e0c01015 	stw	r3,64(fp)
 801009c:	d9000b15 	stw	r4,44(sp)
 80100a0:	d8800615 	stw	r2,24(sp)
 80100a4:	d8002215 	stw	zero,136(sp)
 80100a8:	003c4106 	br	800f1b0 <__alt_data_end+0xfc00f1b0>
 80100ac:	d8c00c17 	ldw	r3,48(sp)
 80100b0:	d8c00615 	stw	r3,24(sp)
 80100b4:	003e7006 	br	800fa78 <__alt_data_end+0xfc00fa78>
 80100b8:	04400044 	movi	r17,1
 80100bc:	003b2006 	br	800ed40 <__alt_data_end+0xfc00ed40>
 80100c0:	000b883a 	mov	r5,zero
 80100c4:	003b3d06 	br	800edbc <__alt_data_end+0xfc00edbc>
 80100c8:	d8800c17 	ldw	r2,48(sp)
 80100cc:	d8800615 	stw	r2,24(sp)
 80100d0:	003e6906 	br	800fa78 <__alt_data_end+0xfc00fa78>

080100d4 <__sflush_r>:
 80100d4:	2880030b 	ldhu	r2,12(r5)
 80100d8:	defffb04 	addi	sp,sp,-20
 80100dc:	dcc00315 	stw	r19,12(sp)
 80100e0:	dc400115 	stw	r17,4(sp)
 80100e4:	dfc00415 	stw	ra,16(sp)
 80100e8:	dc800215 	stw	r18,8(sp)
 80100ec:	dc000015 	stw	r16,0(sp)
 80100f0:	10c0020c 	andi	r3,r2,8
 80100f4:	2823883a 	mov	r17,r5
 80100f8:	2027883a 	mov	r19,r4
 80100fc:	1800311e 	bne	r3,zero,80101c4 <__sflush_r+0xf0>
 8010100:	28c00117 	ldw	r3,4(r5)
 8010104:	10820014 	ori	r2,r2,2048
 8010108:	2880030d 	sth	r2,12(r5)
 801010c:	00c04b0e 	bge	zero,r3,801023c <__sflush_r+0x168>
 8010110:	8a000a17 	ldw	r8,40(r17)
 8010114:	40002326 	beq	r8,zero,80101a4 <__sflush_r+0xd0>
 8010118:	9c000017 	ldw	r16,0(r19)
 801011c:	10c4000c 	andi	r3,r2,4096
 8010120:	98000015 	stw	zero,0(r19)
 8010124:	18004826 	beq	r3,zero,8010248 <__sflush_r+0x174>
 8010128:	89801417 	ldw	r6,80(r17)
 801012c:	10c0010c 	andi	r3,r2,4
 8010130:	18000626 	beq	r3,zero,801014c <__sflush_r+0x78>
 8010134:	88c00117 	ldw	r3,4(r17)
 8010138:	88800c17 	ldw	r2,48(r17)
 801013c:	30cdc83a 	sub	r6,r6,r3
 8010140:	10000226 	beq	r2,zero,801014c <__sflush_r+0x78>
 8010144:	88800f17 	ldw	r2,60(r17)
 8010148:	308dc83a 	sub	r6,r6,r2
 801014c:	89400717 	ldw	r5,28(r17)
 8010150:	000f883a 	mov	r7,zero
 8010154:	9809883a 	mov	r4,r19
 8010158:	403ee83a 	callr	r8
 801015c:	00ffffc4 	movi	r3,-1
 8010160:	10c04426 	beq	r2,r3,8010274 <__sflush_r+0x1a0>
 8010164:	88c0030b 	ldhu	r3,12(r17)
 8010168:	89000417 	ldw	r4,16(r17)
 801016c:	88000115 	stw	zero,4(r17)
 8010170:	197dffcc 	andi	r5,r3,63487
 8010174:	8940030d 	sth	r5,12(r17)
 8010178:	89000015 	stw	r4,0(r17)
 801017c:	18c4000c 	andi	r3,r3,4096
 8010180:	18002c1e 	bne	r3,zero,8010234 <__sflush_r+0x160>
 8010184:	89400c17 	ldw	r5,48(r17)
 8010188:	9c000015 	stw	r16,0(r19)
 801018c:	28000526 	beq	r5,zero,80101a4 <__sflush_r+0xd0>
 8010190:	88801004 	addi	r2,r17,64
 8010194:	28800226 	beq	r5,r2,80101a0 <__sflush_r+0xcc>
 8010198:	9809883a 	mov	r4,r19
 801019c:	80108500 	call	8010850 <_free_r>
 80101a0:	88000c15 	stw	zero,48(r17)
 80101a4:	0005883a 	mov	r2,zero
 80101a8:	dfc00417 	ldw	ra,16(sp)
 80101ac:	dcc00317 	ldw	r19,12(sp)
 80101b0:	dc800217 	ldw	r18,8(sp)
 80101b4:	dc400117 	ldw	r17,4(sp)
 80101b8:	dc000017 	ldw	r16,0(sp)
 80101bc:	dec00504 	addi	sp,sp,20
 80101c0:	f800283a 	ret
 80101c4:	2c800417 	ldw	r18,16(r5)
 80101c8:	903ff626 	beq	r18,zero,80101a4 <__alt_data_end+0xfc0101a4>
 80101cc:	2c000017 	ldw	r16,0(r5)
 80101d0:	108000cc 	andi	r2,r2,3
 80101d4:	2c800015 	stw	r18,0(r5)
 80101d8:	84a1c83a 	sub	r16,r16,r18
 80101dc:	1000131e 	bne	r2,zero,801022c <__sflush_r+0x158>
 80101e0:	28800517 	ldw	r2,20(r5)
 80101e4:	88800215 	stw	r2,8(r17)
 80101e8:	04000316 	blt	zero,r16,80101f8 <__sflush_r+0x124>
 80101ec:	003fed06 	br	80101a4 <__alt_data_end+0xfc0101a4>
 80101f0:	90a5883a 	add	r18,r18,r2
 80101f4:	043feb0e 	bge	zero,r16,80101a4 <__alt_data_end+0xfc0101a4>
 80101f8:	88800917 	ldw	r2,36(r17)
 80101fc:	89400717 	ldw	r5,28(r17)
 8010200:	800f883a 	mov	r7,r16
 8010204:	900d883a 	mov	r6,r18
 8010208:	9809883a 	mov	r4,r19
 801020c:	103ee83a 	callr	r2
 8010210:	80a1c83a 	sub	r16,r16,r2
 8010214:	00bff616 	blt	zero,r2,80101f0 <__alt_data_end+0xfc0101f0>
 8010218:	88c0030b 	ldhu	r3,12(r17)
 801021c:	00bfffc4 	movi	r2,-1
 8010220:	18c01014 	ori	r3,r3,64
 8010224:	88c0030d 	sth	r3,12(r17)
 8010228:	003fdf06 	br	80101a8 <__alt_data_end+0xfc0101a8>
 801022c:	0005883a 	mov	r2,zero
 8010230:	003fec06 	br	80101e4 <__alt_data_end+0xfc0101e4>
 8010234:	88801415 	stw	r2,80(r17)
 8010238:	003fd206 	br	8010184 <__alt_data_end+0xfc010184>
 801023c:	28c00f17 	ldw	r3,60(r5)
 8010240:	00ffb316 	blt	zero,r3,8010110 <__alt_data_end+0xfc010110>
 8010244:	003fd706 	br	80101a4 <__alt_data_end+0xfc0101a4>
 8010248:	89400717 	ldw	r5,28(r17)
 801024c:	000d883a 	mov	r6,zero
 8010250:	01c00044 	movi	r7,1
 8010254:	9809883a 	mov	r4,r19
 8010258:	403ee83a 	callr	r8
 801025c:	100d883a 	mov	r6,r2
 8010260:	00bfffc4 	movi	r2,-1
 8010264:	30801426 	beq	r6,r2,80102b8 <__sflush_r+0x1e4>
 8010268:	8880030b 	ldhu	r2,12(r17)
 801026c:	8a000a17 	ldw	r8,40(r17)
 8010270:	003fae06 	br	801012c <__alt_data_end+0xfc01012c>
 8010274:	98c00017 	ldw	r3,0(r19)
 8010278:	183fba26 	beq	r3,zero,8010164 <__alt_data_end+0xfc010164>
 801027c:	01000744 	movi	r4,29
 8010280:	19000626 	beq	r3,r4,801029c <__sflush_r+0x1c8>
 8010284:	01000584 	movi	r4,22
 8010288:	19000426 	beq	r3,r4,801029c <__sflush_r+0x1c8>
 801028c:	88c0030b 	ldhu	r3,12(r17)
 8010290:	18c01014 	ori	r3,r3,64
 8010294:	88c0030d 	sth	r3,12(r17)
 8010298:	003fc306 	br	80101a8 <__alt_data_end+0xfc0101a8>
 801029c:	8880030b 	ldhu	r2,12(r17)
 80102a0:	88c00417 	ldw	r3,16(r17)
 80102a4:	88000115 	stw	zero,4(r17)
 80102a8:	10bdffcc 	andi	r2,r2,63487
 80102ac:	8880030d 	sth	r2,12(r17)
 80102b0:	88c00015 	stw	r3,0(r17)
 80102b4:	003fb306 	br	8010184 <__alt_data_end+0xfc010184>
 80102b8:	98800017 	ldw	r2,0(r19)
 80102bc:	103fea26 	beq	r2,zero,8010268 <__alt_data_end+0xfc010268>
 80102c0:	00c00744 	movi	r3,29
 80102c4:	10c00226 	beq	r2,r3,80102d0 <__sflush_r+0x1fc>
 80102c8:	00c00584 	movi	r3,22
 80102cc:	10c0031e 	bne	r2,r3,80102dc <__sflush_r+0x208>
 80102d0:	9c000015 	stw	r16,0(r19)
 80102d4:	0005883a 	mov	r2,zero
 80102d8:	003fb306 	br	80101a8 <__alt_data_end+0xfc0101a8>
 80102dc:	88c0030b 	ldhu	r3,12(r17)
 80102e0:	3005883a 	mov	r2,r6
 80102e4:	18c01014 	ori	r3,r3,64
 80102e8:	88c0030d 	sth	r3,12(r17)
 80102ec:	003fae06 	br	80101a8 <__alt_data_end+0xfc0101a8>

080102f0 <_fflush_r>:
 80102f0:	defffd04 	addi	sp,sp,-12
 80102f4:	dc000115 	stw	r16,4(sp)
 80102f8:	dfc00215 	stw	ra,8(sp)
 80102fc:	2021883a 	mov	r16,r4
 8010300:	20000226 	beq	r4,zero,801030c <_fflush_r+0x1c>
 8010304:	20800e17 	ldw	r2,56(r4)
 8010308:	10000c26 	beq	r2,zero,801033c <_fflush_r+0x4c>
 801030c:	2880030f 	ldh	r2,12(r5)
 8010310:	1000051e 	bne	r2,zero,8010328 <_fflush_r+0x38>
 8010314:	0005883a 	mov	r2,zero
 8010318:	dfc00217 	ldw	ra,8(sp)
 801031c:	dc000117 	ldw	r16,4(sp)
 8010320:	dec00304 	addi	sp,sp,12
 8010324:	f800283a 	ret
 8010328:	8009883a 	mov	r4,r16
 801032c:	dfc00217 	ldw	ra,8(sp)
 8010330:	dc000117 	ldw	r16,4(sp)
 8010334:	dec00304 	addi	sp,sp,12
 8010338:	80100d41 	jmpi	80100d4 <__sflush_r>
 801033c:	d9400015 	stw	r5,0(sp)
 8010340:	80106dc0 	call	80106dc <__sinit>
 8010344:	d9400017 	ldw	r5,0(sp)
 8010348:	003ff006 	br	801030c <__alt_data_end+0xfc01030c>

0801034c <fflush>:
 801034c:	20000526 	beq	r4,zero,8010364 <fflush+0x18>
 8010350:	00820d74 	movhi	r2,2101
 8010354:	10a88304 	addi	r2,r2,-24052
 8010358:	200b883a 	mov	r5,r4
 801035c:	11000017 	ldw	r4,0(r2)
 8010360:	80102f01 	jmpi	80102f0 <_fflush_r>
 8010364:	00820d74 	movhi	r2,2101
 8010368:	10a88204 	addi	r2,r2,-24056
 801036c:	11000017 	ldw	r4,0(r2)
 8010370:	01420074 	movhi	r5,2049
 8010374:	2940bc04 	addi	r5,r5,752
 8010378:	80110ec1 	jmpi	80110ec <_fwalk_reent>

0801037c <__fp_unlock>:
 801037c:	0005883a 	mov	r2,zero
 8010380:	f800283a 	ret

08010384 <_cleanup_r>:
 8010384:	01420074 	movhi	r5,2049
 8010388:	29543b04 	addi	r5,r5,20716
 801038c:	80110ec1 	jmpi	80110ec <_fwalk_reent>

08010390 <__sinit.part.1>:
 8010390:	defff704 	addi	sp,sp,-36
 8010394:	00c20074 	movhi	r3,2049
 8010398:	dfc00815 	stw	ra,32(sp)
 801039c:	ddc00715 	stw	r23,28(sp)
 80103a0:	dd800615 	stw	r22,24(sp)
 80103a4:	dd400515 	stw	r21,20(sp)
 80103a8:	dd000415 	stw	r20,16(sp)
 80103ac:	dcc00315 	stw	r19,12(sp)
 80103b0:	dc800215 	stw	r18,8(sp)
 80103b4:	dc400115 	stw	r17,4(sp)
 80103b8:	dc000015 	stw	r16,0(sp)
 80103bc:	18c0e104 	addi	r3,r3,900
 80103c0:	24000117 	ldw	r16,4(r4)
 80103c4:	20c00f15 	stw	r3,60(r4)
 80103c8:	2080bb04 	addi	r2,r4,748
 80103cc:	00c000c4 	movi	r3,3
 80103d0:	20c0b915 	stw	r3,740(r4)
 80103d4:	2080ba15 	stw	r2,744(r4)
 80103d8:	2000b815 	stw	zero,736(r4)
 80103dc:	05c00204 	movi	r23,8
 80103e0:	00800104 	movi	r2,4
 80103e4:	2025883a 	mov	r18,r4
 80103e8:	b80d883a 	mov	r6,r23
 80103ec:	81001704 	addi	r4,r16,92
 80103f0:	000b883a 	mov	r5,zero
 80103f4:	80000015 	stw	zero,0(r16)
 80103f8:	80000115 	stw	zero,4(r16)
 80103fc:	80000215 	stw	zero,8(r16)
 8010400:	8080030d 	sth	r2,12(r16)
 8010404:	80001915 	stw	zero,100(r16)
 8010408:	8000038d 	sth	zero,14(r16)
 801040c:	80000415 	stw	zero,16(r16)
 8010410:	80000515 	stw	zero,20(r16)
 8010414:	80000615 	stw	zero,24(r16)
 8010418:	800c01c0 	call	800c01c <memset>
 801041c:	05820074 	movhi	r22,2049
 8010420:	94400217 	ldw	r17,8(r18)
 8010424:	05420074 	movhi	r21,2049
 8010428:	05020074 	movhi	r20,2049
 801042c:	04c20074 	movhi	r19,2049
 8010430:	b58d9304 	addi	r22,r22,13900
 8010434:	ad4daa04 	addi	r21,r21,13992
 8010438:	a50dc904 	addi	r20,r20,14116
 801043c:	9ccde004 	addi	r19,r19,14208
 8010440:	85800815 	stw	r22,32(r16)
 8010444:	85400915 	stw	r21,36(r16)
 8010448:	85000a15 	stw	r20,40(r16)
 801044c:	84c00b15 	stw	r19,44(r16)
 8010450:	84000715 	stw	r16,28(r16)
 8010454:	00800284 	movi	r2,10
 8010458:	8880030d 	sth	r2,12(r17)
 801045c:	00800044 	movi	r2,1
 8010460:	b80d883a 	mov	r6,r23
 8010464:	89001704 	addi	r4,r17,92
 8010468:	000b883a 	mov	r5,zero
 801046c:	88000015 	stw	zero,0(r17)
 8010470:	88000115 	stw	zero,4(r17)
 8010474:	88000215 	stw	zero,8(r17)
 8010478:	88001915 	stw	zero,100(r17)
 801047c:	8880038d 	sth	r2,14(r17)
 8010480:	88000415 	stw	zero,16(r17)
 8010484:	88000515 	stw	zero,20(r17)
 8010488:	88000615 	stw	zero,24(r17)
 801048c:	800c01c0 	call	800c01c <memset>
 8010490:	94000317 	ldw	r16,12(r18)
 8010494:	00800484 	movi	r2,18
 8010498:	8c400715 	stw	r17,28(r17)
 801049c:	8d800815 	stw	r22,32(r17)
 80104a0:	8d400915 	stw	r21,36(r17)
 80104a4:	8d000a15 	stw	r20,40(r17)
 80104a8:	8cc00b15 	stw	r19,44(r17)
 80104ac:	8080030d 	sth	r2,12(r16)
 80104b0:	00800084 	movi	r2,2
 80104b4:	80000015 	stw	zero,0(r16)
 80104b8:	80000115 	stw	zero,4(r16)
 80104bc:	80000215 	stw	zero,8(r16)
 80104c0:	80001915 	stw	zero,100(r16)
 80104c4:	8080038d 	sth	r2,14(r16)
 80104c8:	80000415 	stw	zero,16(r16)
 80104cc:	80000515 	stw	zero,20(r16)
 80104d0:	80000615 	stw	zero,24(r16)
 80104d4:	b80d883a 	mov	r6,r23
 80104d8:	000b883a 	mov	r5,zero
 80104dc:	81001704 	addi	r4,r16,92
 80104e0:	800c01c0 	call	800c01c <memset>
 80104e4:	00800044 	movi	r2,1
 80104e8:	84000715 	stw	r16,28(r16)
 80104ec:	85800815 	stw	r22,32(r16)
 80104f0:	85400915 	stw	r21,36(r16)
 80104f4:	85000a15 	stw	r20,40(r16)
 80104f8:	84c00b15 	stw	r19,44(r16)
 80104fc:	90800e15 	stw	r2,56(r18)
 8010500:	dfc00817 	ldw	ra,32(sp)
 8010504:	ddc00717 	ldw	r23,28(sp)
 8010508:	dd800617 	ldw	r22,24(sp)
 801050c:	dd400517 	ldw	r21,20(sp)
 8010510:	dd000417 	ldw	r20,16(sp)
 8010514:	dcc00317 	ldw	r19,12(sp)
 8010518:	dc800217 	ldw	r18,8(sp)
 801051c:	dc400117 	ldw	r17,4(sp)
 8010520:	dc000017 	ldw	r16,0(sp)
 8010524:	dec00904 	addi	sp,sp,36
 8010528:	f800283a 	ret

0801052c <__fp_lock>:
 801052c:	0005883a 	mov	r2,zero
 8010530:	f800283a 	ret

08010534 <__sfmoreglue>:
 8010534:	defffc04 	addi	sp,sp,-16
 8010538:	dc800215 	stw	r18,8(sp)
 801053c:	2825883a 	mov	r18,r5
 8010540:	dc000015 	stw	r16,0(sp)
 8010544:	01401a04 	movi	r5,104
 8010548:	2021883a 	mov	r16,r4
 801054c:	913fffc4 	addi	r4,r18,-1
 8010550:	dfc00315 	stw	ra,12(sp)
 8010554:	dc400115 	stw	r17,4(sp)
 8010558:	8007f540 	call	8007f54 <__mulsi3>
 801055c:	8009883a 	mov	r4,r16
 8010560:	11401d04 	addi	r5,r2,116
 8010564:	1023883a 	mov	r17,r2
 8010568:	80114480 	call	8011448 <_malloc_r>
 801056c:	1021883a 	mov	r16,r2
 8010570:	10000726 	beq	r2,zero,8010590 <__sfmoreglue+0x5c>
 8010574:	11000304 	addi	r4,r2,12
 8010578:	10000015 	stw	zero,0(r2)
 801057c:	14800115 	stw	r18,4(r2)
 8010580:	11000215 	stw	r4,8(r2)
 8010584:	89801a04 	addi	r6,r17,104
 8010588:	000b883a 	mov	r5,zero
 801058c:	800c01c0 	call	800c01c <memset>
 8010590:	8005883a 	mov	r2,r16
 8010594:	dfc00317 	ldw	ra,12(sp)
 8010598:	dc800217 	ldw	r18,8(sp)
 801059c:	dc400117 	ldw	r17,4(sp)
 80105a0:	dc000017 	ldw	r16,0(sp)
 80105a4:	dec00404 	addi	sp,sp,16
 80105a8:	f800283a 	ret

080105ac <__sfp>:
 80105ac:	defffb04 	addi	sp,sp,-20
 80105b0:	dc000015 	stw	r16,0(sp)
 80105b4:	04020d74 	movhi	r16,2101
 80105b8:	84288204 	addi	r16,r16,-24056
 80105bc:	dcc00315 	stw	r19,12(sp)
 80105c0:	2027883a 	mov	r19,r4
 80105c4:	81000017 	ldw	r4,0(r16)
 80105c8:	dfc00415 	stw	ra,16(sp)
 80105cc:	dc800215 	stw	r18,8(sp)
 80105d0:	20800e17 	ldw	r2,56(r4)
 80105d4:	dc400115 	stw	r17,4(sp)
 80105d8:	1000021e 	bne	r2,zero,80105e4 <__sfp+0x38>
 80105dc:	80103900 	call	8010390 <__sinit.part.1>
 80105e0:	81000017 	ldw	r4,0(r16)
 80105e4:	2480b804 	addi	r18,r4,736
 80105e8:	047fffc4 	movi	r17,-1
 80105ec:	91000117 	ldw	r4,4(r18)
 80105f0:	94000217 	ldw	r16,8(r18)
 80105f4:	213fffc4 	addi	r4,r4,-1
 80105f8:	20000a16 	blt	r4,zero,8010624 <__sfp+0x78>
 80105fc:	8080030f 	ldh	r2,12(r16)
 8010600:	10000c26 	beq	r2,zero,8010634 <__sfp+0x88>
 8010604:	80c01d04 	addi	r3,r16,116
 8010608:	00000206 	br	8010614 <__sfp+0x68>
 801060c:	18bfe60f 	ldh	r2,-104(r3)
 8010610:	10000826 	beq	r2,zero,8010634 <__sfp+0x88>
 8010614:	213fffc4 	addi	r4,r4,-1
 8010618:	1c3ffd04 	addi	r16,r3,-12
 801061c:	18c01a04 	addi	r3,r3,104
 8010620:	247ffa1e 	bne	r4,r17,801060c <__alt_data_end+0xfc01060c>
 8010624:	90800017 	ldw	r2,0(r18)
 8010628:	10001d26 	beq	r2,zero,80106a0 <__sfp+0xf4>
 801062c:	1025883a 	mov	r18,r2
 8010630:	003fee06 	br	80105ec <__alt_data_end+0xfc0105ec>
 8010634:	00bfffc4 	movi	r2,-1
 8010638:	8080038d 	sth	r2,14(r16)
 801063c:	00800044 	movi	r2,1
 8010640:	8080030d 	sth	r2,12(r16)
 8010644:	80001915 	stw	zero,100(r16)
 8010648:	80000015 	stw	zero,0(r16)
 801064c:	80000215 	stw	zero,8(r16)
 8010650:	80000115 	stw	zero,4(r16)
 8010654:	80000415 	stw	zero,16(r16)
 8010658:	80000515 	stw	zero,20(r16)
 801065c:	80000615 	stw	zero,24(r16)
 8010660:	01800204 	movi	r6,8
 8010664:	000b883a 	mov	r5,zero
 8010668:	81001704 	addi	r4,r16,92
 801066c:	800c01c0 	call	800c01c <memset>
 8010670:	8005883a 	mov	r2,r16
 8010674:	80000c15 	stw	zero,48(r16)
 8010678:	80000d15 	stw	zero,52(r16)
 801067c:	80001115 	stw	zero,68(r16)
 8010680:	80001215 	stw	zero,72(r16)
 8010684:	dfc00417 	ldw	ra,16(sp)
 8010688:	dcc00317 	ldw	r19,12(sp)
 801068c:	dc800217 	ldw	r18,8(sp)
 8010690:	dc400117 	ldw	r17,4(sp)
 8010694:	dc000017 	ldw	r16,0(sp)
 8010698:	dec00504 	addi	sp,sp,20
 801069c:	f800283a 	ret
 80106a0:	01400104 	movi	r5,4
 80106a4:	9809883a 	mov	r4,r19
 80106a8:	80105340 	call	8010534 <__sfmoreglue>
 80106ac:	90800015 	stw	r2,0(r18)
 80106b0:	103fde1e 	bne	r2,zero,801062c <__alt_data_end+0xfc01062c>
 80106b4:	00800304 	movi	r2,12
 80106b8:	98800015 	stw	r2,0(r19)
 80106bc:	0005883a 	mov	r2,zero
 80106c0:	003ff006 	br	8010684 <__alt_data_end+0xfc010684>

080106c4 <_cleanup>:
 80106c4:	00820d74 	movhi	r2,2101
 80106c8:	10a88204 	addi	r2,r2,-24056
 80106cc:	11000017 	ldw	r4,0(r2)
 80106d0:	01420074 	movhi	r5,2049
 80106d4:	29543b04 	addi	r5,r5,20716
 80106d8:	80110ec1 	jmpi	80110ec <_fwalk_reent>

080106dc <__sinit>:
 80106dc:	20800e17 	ldw	r2,56(r4)
 80106e0:	10000126 	beq	r2,zero,80106e8 <__sinit+0xc>
 80106e4:	f800283a 	ret
 80106e8:	80103901 	jmpi	8010390 <__sinit.part.1>

080106ec <__sfp_lock_acquire>:
 80106ec:	f800283a 	ret

080106f0 <__sfp_lock_release>:
 80106f0:	f800283a 	ret

080106f4 <__sinit_lock_acquire>:
 80106f4:	f800283a 	ret

080106f8 <__sinit_lock_release>:
 80106f8:	f800283a 	ret

080106fc <__fp_lock_all>:
 80106fc:	00820d74 	movhi	r2,2101
 8010700:	10a88304 	addi	r2,r2,-24052
 8010704:	11000017 	ldw	r4,0(r2)
 8010708:	01420074 	movhi	r5,2049
 801070c:	29414b04 	addi	r5,r5,1324
 8010710:	80110281 	jmpi	8011028 <_fwalk>

08010714 <__fp_unlock_all>:
 8010714:	00820d74 	movhi	r2,2101
 8010718:	10a88304 	addi	r2,r2,-24052
 801071c:	11000017 	ldw	r4,0(r2)
 8010720:	01420074 	movhi	r5,2049
 8010724:	2940df04 	addi	r5,r5,892
 8010728:	80110281 	jmpi	8011028 <_fwalk>

0801072c <_malloc_trim_r>:
 801072c:	defffb04 	addi	sp,sp,-20
 8010730:	dcc00315 	stw	r19,12(sp)
 8010734:	04c20d74 	movhi	r19,2101
 8010738:	dc800215 	stw	r18,8(sp)
 801073c:	dc400115 	stw	r17,4(sp)
 8010740:	dc000015 	stw	r16,0(sp)
 8010744:	dfc00415 	stw	ra,16(sp)
 8010748:	2821883a 	mov	r16,r5
 801074c:	9ce2f604 	addi	r19,r19,-29736
 8010750:	2025883a 	mov	r18,r4
 8010754:	80164080 	call	8016408 <__malloc_lock>
 8010758:	98800217 	ldw	r2,8(r19)
 801075c:	14400117 	ldw	r17,4(r2)
 8010760:	00bfff04 	movi	r2,-4
 8010764:	88a2703a 	and	r17,r17,r2
 8010768:	8c21c83a 	sub	r16,r17,r16
 801076c:	8403fbc4 	addi	r16,r16,4079
 8010770:	8020d33a 	srli	r16,r16,12
 8010774:	0083ffc4 	movi	r2,4095
 8010778:	843fffc4 	addi	r16,r16,-1
 801077c:	8020933a 	slli	r16,r16,12
 8010780:	1400060e 	bge	r2,r16,801079c <_malloc_trim_r+0x70>
 8010784:	000b883a 	mov	r5,zero
 8010788:	9009883a 	mov	r4,r18
 801078c:	80135f80 	call	80135f8 <_sbrk_r>
 8010790:	98c00217 	ldw	r3,8(r19)
 8010794:	1c47883a 	add	r3,r3,r17
 8010798:	10c00a26 	beq	r2,r3,80107c4 <_malloc_trim_r+0x98>
 801079c:	9009883a 	mov	r4,r18
 80107a0:	801642c0 	call	801642c <__malloc_unlock>
 80107a4:	0005883a 	mov	r2,zero
 80107a8:	dfc00417 	ldw	ra,16(sp)
 80107ac:	dcc00317 	ldw	r19,12(sp)
 80107b0:	dc800217 	ldw	r18,8(sp)
 80107b4:	dc400117 	ldw	r17,4(sp)
 80107b8:	dc000017 	ldw	r16,0(sp)
 80107bc:	dec00504 	addi	sp,sp,20
 80107c0:	f800283a 	ret
 80107c4:	040bc83a 	sub	r5,zero,r16
 80107c8:	9009883a 	mov	r4,r18
 80107cc:	80135f80 	call	80135f8 <_sbrk_r>
 80107d0:	00ffffc4 	movi	r3,-1
 80107d4:	10c00d26 	beq	r2,r3,801080c <_malloc_trim_r+0xe0>
 80107d8:	00c211f4 	movhi	r3,2119
 80107dc:	18df8004 	addi	r3,r3,32256
 80107e0:	18800017 	ldw	r2,0(r3)
 80107e4:	99000217 	ldw	r4,8(r19)
 80107e8:	8c23c83a 	sub	r17,r17,r16
 80107ec:	8c400054 	ori	r17,r17,1
 80107f0:	1421c83a 	sub	r16,r2,r16
 80107f4:	24400115 	stw	r17,4(r4)
 80107f8:	9009883a 	mov	r4,r18
 80107fc:	1c000015 	stw	r16,0(r3)
 8010800:	801642c0 	call	801642c <__malloc_unlock>
 8010804:	00800044 	movi	r2,1
 8010808:	003fe706 	br	80107a8 <__alt_data_end+0xfc0107a8>
 801080c:	000b883a 	mov	r5,zero
 8010810:	9009883a 	mov	r4,r18
 8010814:	80135f80 	call	80135f8 <_sbrk_r>
 8010818:	99000217 	ldw	r4,8(r19)
 801081c:	014003c4 	movi	r5,15
 8010820:	1107c83a 	sub	r3,r2,r4
 8010824:	28ffdd0e 	bge	r5,r3,801079c <__alt_data_end+0xfc01079c>
 8010828:	01420d74 	movhi	r5,2101
 801082c:	29688504 	addi	r5,r5,-24044
 8010830:	29400017 	ldw	r5,0(r5)
 8010834:	18c00054 	ori	r3,r3,1
 8010838:	20c00115 	stw	r3,4(r4)
 801083c:	00c211f4 	movhi	r3,2119
 8010840:	1145c83a 	sub	r2,r2,r5
 8010844:	18df8004 	addi	r3,r3,32256
 8010848:	18800015 	stw	r2,0(r3)
 801084c:	003fd306 	br	801079c <__alt_data_end+0xfc01079c>

08010850 <_free_r>:
 8010850:	28004126 	beq	r5,zero,8010958 <_free_r+0x108>
 8010854:	defffd04 	addi	sp,sp,-12
 8010858:	dc400115 	stw	r17,4(sp)
 801085c:	dc000015 	stw	r16,0(sp)
 8010860:	2023883a 	mov	r17,r4
 8010864:	2821883a 	mov	r16,r5
 8010868:	dfc00215 	stw	ra,8(sp)
 801086c:	80164080 	call	8016408 <__malloc_lock>
 8010870:	81ffff17 	ldw	r7,-4(r16)
 8010874:	00bfff84 	movi	r2,-2
 8010878:	01020d74 	movhi	r4,2101
 801087c:	81bffe04 	addi	r6,r16,-8
 8010880:	3884703a 	and	r2,r7,r2
 8010884:	2122f604 	addi	r4,r4,-29736
 8010888:	308b883a 	add	r5,r6,r2
 801088c:	2a400117 	ldw	r9,4(r5)
 8010890:	22000217 	ldw	r8,8(r4)
 8010894:	00ffff04 	movi	r3,-4
 8010898:	48c6703a 	and	r3,r9,r3
 801089c:	2a005726 	beq	r5,r8,80109fc <_free_r+0x1ac>
 80108a0:	28c00115 	stw	r3,4(r5)
 80108a4:	39c0004c 	andi	r7,r7,1
 80108a8:	3800091e 	bne	r7,zero,80108d0 <_free_r+0x80>
 80108ac:	823ffe17 	ldw	r8,-8(r16)
 80108b0:	22400204 	addi	r9,r4,8
 80108b4:	320dc83a 	sub	r6,r6,r8
 80108b8:	31c00217 	ldw	r7,8(r6)
 80108bc:	1205883a 	add	r2,r2,r8
 80108c0:	3a406526 	beq	r7,r9,8010a58 <_free_r+0x208>
 80108c4:	32000317 	ldw	r8,12(r6)
 80108c8:	3a000315 	stw	r8,12(r7)
 80108cc:	41c00215 	stw	r7,8(r8)
 80108d0:	28cf883a 	add	r7,r5,r3
 80108d4:	39c00117 	ldw	r7,4(r7)
 80108d8:	39c0004c 	andi	r7,r7,1
 80108dc:	38003a26 	beq	r7,zero,80109c8 <_free_r+0x178>
 80108e0:	10c00054 	ori	r3,r2,1
 80108e4:	30c00115 	stw	r3,4(r6)
 80108e8:	3087883a 	add	r3,r6,r2
 80108ec:	18800015 	stw	r2,0(r3)
 80108f0:	00c07fc4 	movi	r3,511
 80108f4:	18801936 	bltu	r3,r2,801095c <_free_r+0x10c>
 80108f8:	1004d0fa 	srli	r2,r2,3
 80108fc:	01c00044 	movi	r7,1
 8010900:	21400117 	ldw	r5,4(r4)
 8010904:	10c00044 	addi	r3,r2,1
 8010908:	18c7883a 	add	r3,r3,r3
 801090c:	1005d0ba 	srai	r2,r2,2
 8010910:	18c7883a 	add	r3,r3,r3
 8010914:	18c7883a 	add	r3,r3,r3
 8010918:	1907883a 	add	r3,r3,r4
 801091c:	3884983a 	sll	r2,r7,r2
 8010920:	19c00017 	ldw	r7,0(r3)
 8010924:	1a3ffe04 	addi	r8,r3,-8
 8010928:	1144b03a 	or	r2,r2,r5
 801092c:	32000315 	stw	r8,12(r6)
 8010930:	31c00215 	stw	r7,8(r6)
 8010934:	20800115 	stw	r2,4(r4)
 8010938:	19800015 	stw	r6,0(r3)
 801093c:	39800315 	stw	r6,12(r7)
 8010940:	8809883a 	mov	r4,r17
 8010944:	dfc00217 	ldw	ra,8(sp)
 8010948:	dc400117 	ldw	r17,4(sp)
 801094c:	dc000017 	ldw	r16,0(sp)
 8010950:	dec00304 	addi	sp,sp,12
 8010954:	801642c1 	jmpi	801642c <__malloc_unlock>
 8010958:	f800283a 	ret
 801095c:	100ad27a 	srli	r5,r2,9
 8010960:	00c00104 	movi	r3,4
 8010964:	19404a36 	bltu	r3,r5,8010a90 <_free_r+0x240>
 8010968:	100ad1ba 	srli	r5,r2,6
 801096c:	28c00e44 	addi	r3,r5,57
 8010970:	18c7883a 	add	r3,r3,r3
 8010974:	29400e04 	addi	r5,r5,56
 8010978:	18c7883a 	add	r3,r3,r3
 801097c:	18c7883a 	add	r3,r3,r3
 8010980:	1909883a 	add	r4,r3,r4
 8010984:	20c00017 	ldw	r3,0(r4)
 8010988:	01c20d74 	movhi	r7,2101
 801098c:	213ffe04 	addi	r4,r4,-8
 8010990:	39e2f604 	addi	r7,r7,-29736
 8010994:	20c04426 	beq	r4,r3,8010aa8 <_free_r+0x258>
 8010998:	01ffff04 	movi	r7,-4
 801099c:	19400117 	ldw	r5,4(r3)
 80109a0:	29ca703a 	and	r5,r5,r7
 80109a4:	1140022e 	bgeu	r2,r5,80109b0 <_free_r+0x160>
 80109a8:	18c00217 	ldw	r3,8(r3)
 80109ac:	20fffb1e 	bne	r4,r3,801099c <__alt_data_end+0xfc01099c>
 80109b0:	19000317 	ldw	r4,12(r3)
 80109b4:	31000315 	stw	r4,12(r6)
 80109b8:	30c00215 	stw	r3,8(r6)
 80109bc:	21800215 	stw	r6,8(r4)
 80109c0:	19800315 	stw	r6,12(r3)
 80109c4:	003fde06 	br	8010940 <__alt_data_end+0xfc010940>
 80109c8:	29c00217 	ldw	r7,8(r5)
 80109cc:	10c5883a 	add	r2,r2,r3
 80109d0:	00c20d74 	movhi	r3,2101
 80109d4:	18e2f804 	addi	r3,r3,-29728
 80109d8:	38c03b26 	beq	r7,r3,8010ac8 <_free_r+0x278>
 80109dc:	2a000317 	ldw	r8,12(r5)
 80109e0:	11400054 	ori	r5,r2,1
 80109e4:	3087883a 	add	r3,r6,r2
 80109e8:	3a000315 	stw	r8,12(r7)
 80109ec:	41c00215 	stw	r7,8(r8)
 80109f0:	31400115 	stw	r5,4(r6)
 80109f4:	18800015 	stw	r2,0(r3)
 80109f8:	003fbd06 	br	80108f0 <__alt_data_end+0xfc0108f0>
 80109fc:	39c0004c 	andi	r7,r7,1
 8010a00:	10c5883a 	add	r2,r2,r3
 8010a04:	3800071e 	bne	r7,zero,8010a24 <_free_r+0x1d4>
 8010a08:	81fffe17 	ldw	r7,-8(r16)
 8010a0c:	31cdc83a 	sub	r6,r6,r7
 8010a10:	30c00317 	ldw	r3,12(r6)
 8010a14:	31400217 	ldw	r5,8(r6)
 8010a18:	11c5883a 	add	r2,r2,r7
 8010a1c:	28c00315 	stw	r3,12(r5)
 8010a20:	19400215 	stw	r5,8(r3)
 8010a24:	10c00054 	ori	r3,r2,1
 8010a28:	30c00115 	stw	r3,4(r6)
 8010a2c:	00c20d74 	movhi	r3,2101
 8010a30:	18e88604 	addi	r3,r3,-24040
 8010a34:	18c00017 	ldw	r3,0(r3)
 8010a38:	21800215 	stw	r6,8(r4)
 8010a3c:	10ffc036 	bltu	r2,r3,8010940 <__alt_data_end+0xfc010940>
 8010a40:	00820d74 	movhi	r2,2101
 8010a44:	10af6d04 	addi	r2,r2,-16972
 8010a48:	11400017 	ldw	r5,0(r2)
 8010a4c:	8809883a 	mov	r4,r17
 8010a50:	801072c0 	call	801072c <_malloc_trim_r>
 8010a54:	003fba06 	br	8010940 <__alt_data_end+0xfc010940>
 8010a58:	28c9883a 	add	r4,r5,r3
 8010a5c:	21000117 	ldw	r4,4(r4)
 8010a60:	2100004c 	andi	r4,r4,1
 8010a64:	2000391e 	bne	r4,zero,8010b4c <_free_r+0x2fc>
 8010a68:	29c00217 	ldw	r7,8(r5)
 8010a6c:	29000317 	ldw	r4,12(r5)
 8010a70:	1885883a 	add	r2,r3,r2
 8010a74:	10c00054 	ori	r3,r2,1
 8010a78:	39000315 	stw	r4,12(r7)
 8010a7c:	21c00215 	stw	r7,8(r4)
 8010a80:	30c00115 	stw	r3,4(r6)
 8010a84:	308d883a 	add	r6,r6,r2
 8010a88:	30800015 	stw	r2,0(r6)
 8010a8c:	003fac06 	br	8010940 <__alt_data_end+0xfc010940>
 8010a90:	00c00504 	movi	r3,20
 8010a94:	19401536 	bltu	r3,r5,8010aec <_free_r+0x29c>
 8010a98:	28c01704 	addi	r3,r5,92
 8010a9c:	18c7883a 	add	r3,r3,r3
 8010aa0:	294016c4 	addi	r5,r5,91
 8010aa4:	003fb406 	br	8010978 <__alt_data_end+0xfc010978>
 8010aa8:	280bd0ba 	srai	r5,r5,2
 8010aac:	00c00044 	movi	r3,1
 8010ab0:	38800117 	ldw	r2,4(r7)
 8010ab4:	194a983a 	sll	r5,r3,r5
 8010ab8:	2007883a 	mov	r3,r4
 8010abc:	2884b03a 	or	r2,r5,r2
 8010ac0:	38800115 	stw	r2,4(r7)
 8010ac4:	003fbb06 	br	80109b4 <__alt_data_end+0xfc0109b4>
 8010ac8:	21800515 	stw	r6,20(r4)
 8010acc:	21800415 	stw	r6,16(r4)
 8010ad0:	10c00054 	ori	r3,r2,1
 8010ad4:	31c00315 	stw	r7,12(r6)
 8010ad8:	31c00215 	stw	r7,8(r6)
 8010adc:	30c00115 	stw	r3,4(r6)
 8010ae0:	308d883a 	add	r6,r6,r2
 8010ae4:	30800015 	stw	r2,0(r6)
 8010ae8:	003f9506 	br	8010940 <__alt_data_end+0xfc010940>
 8010aec:	00c01504 	movi	r3,84
 8010af0:	19400536 	bltu	r3,r5,8010b08 <_free_r+0x2b8>
 8010af4:	100ad33a 	srli	r5,r2,12
 8010af8:	28c01bc4 	addi	r3,r5,111
 8010afc:	18c7883a 	add	r3,r3,r3
 8010b00:	29401b84 	addi	r5,r5,110
 8010b04:	003f9c06 	br	8010978 <__alt_data_end+0xfc010978>
 8010b08:	00c05504 	movi	r3,340
 8010b0c:	19400536 	bltu	r3,r5,8010b24 <_free_r+0x2d4>
 8010b10:	100ad3fa 	srli	r5,r2,15
 8010b14:	28c01e04 	addi	r3,r5,120
 8010b18:	18c7883a 	add	r3,r3,r3
 8010b1c:	29401dc4 	addi	r5,r5,119
 8010b20:	003f9506 	br	8010978 <__alt_data_end+0xfc010978>
 8010b24:	00c15504 	movi	r3,1364
 8010b28:	19400536 	bltu	r3,r5,8010b40 <_free_r+0x2f0>
 8010b2c:	100ad4ba 	srli	r5,r2,18
 8010b30:	28c01f44 	addi	r3,r5,125
 8010b34:	18c7883a 	add	r3,r3,r3
 8010b38:	29401f04 	addi	r5,r5,124
 8010b3c:	003f8e06 	br	8010978 <__alt_data_end+0xfc010978>
 8010b40:	00c03f84 	movi	r3,254
 8010b44:	01401f84 	movi	r5,126
 8010b48:	003f8b06 	br	8010978 <__alt_data_end+0xfc010978>
 8010b4c:	10c00054 	ori	r3,r2,1
 8010b50:	30c00115 	stw	r3,4(r6)
 8010b54:	308d883a 	add	r6,r6,r2
 8010b58:	30800015 	stw	r2,0(r6)
 8010b5c:	003f7806 	br	8010940 <__alt_data_end+0xfc010940>

08010b60 <__sfvwrite_r>:
 8010b60:	30800217 	ldw	r2,8(r6)
 8010b64:	10006726 	beq	r2,zero,8010d04 <__sfvwrite_r+0x1a4>
 8010b68:	28c0030b 	ldhu	r3,12(r5)
 8010b6c:	defff404 	addi	sp,sp,-48
 8010b70:	dd400715 	stw	r21,28(sp)
 8010b74:	dd000615 	stw	r20,24(sp)
 8010b78:	dc000215 	stw	r16,8(sp)
 8010b7c:	dfc00b15 	stw	ra,44(sp)
 8010b80:	df000a15 	stw	fp,40(sp)
 8010b84:	ddc00915 	stw	r23,36(sp)
 8010b88:	dd800815 	stw	r22,32(sp)
 8010b8c:	dcc00515 	stw	r19,20(sp)
 8010b90:	dc800415 	stw	r18,16(sp)
 8010b94:	dc400315 	stw	r17,12(sp)
 8010b98:	1880020c 	andi	r2,r3,8
 8010b9c:	2821883a 	mov	r16,r5
 8010ba0:	202b883a 	mov	r21,r4
 8010ba4:	3029883a 	mov	r20,r6
 8010ba8:	10002726 	beq	r2,zero,8010c48 <__sfvwrite_r+0xe8>
 8010bac:	28800417 	ldw	r2,16(r5)
 8010bb0:	10002526 	beq	r2,zero,8010c48 <__sfvwrite_r+0xe8>
 8010bb4:	1880008c 	andi	r2,r3,2
 8010bb8:	a4400017 	ldw	r17,0(r20)
 8010bbc:	10002a26 	beq	r2,zero,8010c68 <__sfvwrite_r+0x108>
 8010bc0:	05a00034 	movhi	r22,32768
 8010bc4:	0027883a 	mov	r19,zero
 8010bc8:	0025883a 	mov	r18,zero
 8010bcc:	b5bf0004 	addi	r22,r22,-1024
 8010bd0:	980d883a 	mov	r6,r19
 8010bd4:	a809883a 	mov	r4,r21
 8010bd8:	90004626 	beq	r18,zero,8010cf4 <__sfvwrite_r+0x194>
 8010bdc:	900f883a 	mov	r7,r18
 8010be0:	b480022e 	bgeu	r22,r18,8010bec <__sfvwrite_r+0x8c>
 8010be4:	01e00034 	movhi	r7,32768
 8010be8:	39ff0004 	addi	r7,r7,-1024
 8010bec:	80800917 	ldw	r2,36(r16)
 8010bf0:	81400717 	ldw	r5,28(r16)
 8010bf4:	103ee83a 	callr	r2
 8010bf8:	00805a0e 	bge	zero,r2,8010d64 <__sfvwrite_r+0x204>
 8010bfc:	a0c00217 	ldw	r3,8(r20)
 8010c00:	98a7883a 	add	r19,r19,r2
 8010c04:	90a5c83a 	sub	r18,r18,r2
 8010c08:	1885c83a 	sub	r2,r3,r2
 8010c0c:	a0800215 	stw	r2,8(r20)
 8010c10:	103fef1e 	bne	r2,zero,8010bd0 <__alt_data_end+0xfc010bd0>
 8010c14:	0005883a 	mov	r2,zero
 8010c18:	dfc00b17 	ldw	ra,44(sp)
 8010c1c:	df000a17 	ldw	fp,40(sp)
 8010c20:	ddc00917 	ldw	r23,36(sp)
 8010c24:	dd800817 	ldw	r22,32(sp)
 8010c28:	dd400717 	ldw	r21,28(sp)
 8010c2c:	dd000617 	ldw	r20,24(sp)
 8010c30:	dcc00517 	ldw	r19,20(sp)
 8010c34:	dc800417 	ldw	r18,16(sp)
 8010c38:	dc400317 	ldw	r17,12(sp)
 8010c3c:	dc000217 	ldw	r16,8(sp)
 8010c40:	dec00c04 	addi	sp,sp,48
 8010c44:	f800283a 	ret
 8010c48:	800b883a 	mov	r5,r16
 8010c4c:	a809883a 	mov	r4,r21
 8010c50:	800e6d00 	call	800e6d0 <__swsetup_r>
 8010c54:	1000ee1e 	bne	r2,zero,8011010 <__sfvwrite_r+0x4b0>
 8010c58:	80c0030b 	ldhu	r3,12(r16)
 8010c5c:	a4400017 	ldw	r17,0(r20)
 8010c60:	1880008c 	andi	r2,r3,2
 8010c64:	103fd61e 	bne	r2,zero,8010bc0 <__alt_data_end+0xfc010bc0>
 8010c68:	1880004c 	andi	r2,r3,1
 8010c6c:	1000421e 	bne	r2,zero,8010d78 <__sfvwrite_r+0x218>
 8010c70:	0039883a 	mov	fp,zero
 8010c74:	0025883a 	mov	r18,zero
 8010c78:	90001a26 	beq	r18,zero,8010ce4 <__sfvwrite_r+0x184>
 8010c7c:	1880800c 	andi	r2,r3,512
 8010c80:	84c00217 	ldw	r19,8(r16)
 8010c84:	10002126 	beq	r2,zero,8010d0c <__sfvwrite_r+0x1ac>
 8010c88:	982f883a 	mov	r23,r19
 8010c8c:	94c09636 	bltu	r18,r19,8010ee8 <__sfvwrite_r+0x388>
 8010c90:	1881200c 	andi	r2,r3,1152
 8010c94:	1000a11e 	bne	r2,zero,8010f1c <__sfvwrite_r+0x3bc>
 8010c98:	81000017 	ldw	r4,0(r16)
 8010c9c:	b80d883a 	mov	r6,r23
 8010ca0:	e00b883a 	mov	r5,fp
 8010ca4:	8011e800 	call	8011e80 <memmove>
 8010ca8:	80c00217 	ldw	r3,8(r16)
 8010cac:	81000017 	ldw	r4,0(r16)
 8010cb0:	9005883a 	mov	r2,r18
 8010cb4:	1ce7c83a 	sub	r19,r3,r19
 8010cb8:	25cf883a 	add	r7,r4,r23
 8010cbc:	84c00215 	stw	r19,8(r16)
 8010cc0:	81c00015 	stw	r7,0(r16)
 8010cc4:	a0c00217 	ldw	r3,8(r20)
 8010cc8:	e0b9883a 	add	fp,fp,r2
 8010ccc:	90a5c83a 	sub	r18,r18,r2
 8010cd0:	18a7c83a 	sub	r19,r3,r2
 8010cd4:	a4c00215 	stw	r19,8(r20)
 8010cd8:	983fce26 	beq	r19,zero,8010c14 <__alt_data_end+0xfc010c14>
 8010cdc:	80c0030b 	ldhu	r3,12(r16)
 8010ce0:	903fe61e 	bne	r18,zero,8010c7c <__alt_data_end+0xfc010c7c>
 8010ce4:	8f000017 	ldw	fp,0(r17)
 8010ce8:	8c800117 	ldw	r18,4(r17)
 8010cec:	8c400204 	addi	r17,r17,8
 8010cf0:	003fe106 	br	8010c78 <__alt_data_end+0xfc010c78>
 8010cf4:	8cc00017 	ldw	r19,0(r17)
 8010cf8:	8c800117 	ldw	r18,4(r17)
 8010cfc:	8c400204 	addi	r17,r17,8
 8010d00:	003fb306 	br	8010bd0 <__alt_data_end+0xfc010bd0>
 8010d04:	0005883a 	mov	r2,zero
 8010d08:	f800283a 	ret
 8010d0c:	81000017 	ldw	r4,0(r16)
 8010d10:	80800417 	ldw	r2,16(r16)
 8010d14:	11005a36 	bltu	r2,r4,8010e80 <__sfvwrite_r+0x320>
 8010d18:	85c00517 	ldw	r23,20(r16)
 8010d1c:	95c05836 	bltu	r18,r23,8010e80 <__sfvwrite_r+0x320>
 8010d20:	00a00034 	movhi	r2,32768
 8010d24:	10bfffc4 	addi	r2,r2,-1
 8010d28:	9009883a 	mov	r4,r18
 8010d2c:	1480012e 	bgeu	r2,r18,8010d34 <__sfvwrite_r+0x1d4>
 8010d30:	1009883a 	mov	r4,r2
 8010d34:	b80b883a 	mov	r5,r23
 8010d38:	8007da00 	call	8007da0 <__divsi3>
 8010d3c:	b80b883a 	mov	r5,r23
 8010d40:	1009883a 	mov	r4,r2
 8010d44:	8007f540 	call	8007f54 <__mulsi3>
 8010d48:	81400717 	ldw	r5,28(r16)
 8010d4c:	80c00917 	ldw	r3,36(r16)
 8010d50:	100f883a 	mov	r7,r2
 8010d54:	e00d883a 	mov	r6,fp
 8010d58:	a809883a 	mov	r4,r21
 8010d5c:	183ee83a 	callr	r3
 8010d60:	00bfd816 	blt	zero,r2,8010cc4 <__alt_data_end+0xfc010cc4>
 8010d64:	8080030b 	ldhu	r2,12(r16)
 8010d68:	10801014 	ori	r2,r2,64
 8010d6c:	8080030d 	sth	r2,12(r16)
 8010d70:	00bfffc4 	movi	r2,-1
 8010d74:	003fa806 	br	8010c18 <__alt_data_end+0xfc010c18>
 8010d78:	0027883a 	mov	r19,zero
 8010d7c:	0011883a 	mov	r8,zero
 8010d80:	0039883a 	mov	fp,zero
 8010d84:	0025883a 	mov	r18,zero
 8010d88:	90001f26 	beq	r18,zero,8010e08 <__sfvwrite_r+0x2a8>
 8010d8c:	40005a26 	beq	r8,zero,8010ef8 <__sfvwrite_r+0x398>
 8010d90:	982d883a 	mov	r22,r19
 8010d94:	94c0012e 	bgeu	r18,r19,8010d9c <__sfvwrite_r+0x23c>
 8010d98:	902d883a 	mov	r22,r18
 8010d9c:	81000017 	ldw	r4,0(r16)
 8010da0:	80800417 	ldw	r2,16(r16)
 8010da4:	b02f883a 	mov	r23,r22
 8010da8:	81c00517 	ldw	r7,20(r16)
 8010dac:	1100032e 	bgeu	r2,r4,8010dbc <__sfvwrite_r+0x25c>
 8010db0:	80c00217 	ldw	r3,8(r16)
 8010db4:	38c7883a 	add	r3,r7,r3
 8010db8:	1d801816 	blt	r3,r22,8010e1c <__sfvwrite_r+0x2bc>
 8010dbc:	b1c03e16 	blt	r22,r7,8010eb8 <__sfvwrite_r+0x358>
 8010dc0:	80800917 	ldw	r2,36(r16)
 8010dc4:	81400717 	ldw	r5,28(r16)
 8010dc8:	e00d883a 	mov	r6,fp
 8010dcc:	da000115 	stw	r8,4(sp)
 8010dd0:	a809883a 	mov	r4,r21
 8010dd4:	103ee83a 	callr	r2
 8010dd8:	102f883a 	mov	r23,r2
 8010ddc:	da000117 	ldw	r8,4(sp)
 8010de0:	00bfe00e 	bge	zero,r2,8010d64 <__alt_data_end+0xfc010d64>
 8010de4:	9de7c83a 	sub	r19,r19,r23
 8010de8:	98001f26 	beq	r19,zero,8010e68 <__sfvwrite_r+0x308>
 8010dec:	a0800217 	ldw	r2,8(r20)
 8010df0:	e5f9883a 	add	fp,fp,r23
 8010df4:	95e5c83a 	sub	r18,r18,r23
 8010df8:	15efc83a 	sub	r23,r2,r23
 8010dfc:	a5c00215 	stw	r23,8(r20)
 8010e00:	b83f8426 	beq	r23,zero,8010c14 <__alt_data_end+0xfc010c14>
 8010e04:	903fe11e 	bne	r18,zero,8010d8c <__alt_data_end+0xfc010d8c>
 8010e08:	8f000017 	ldw	fp,0(r17)
 8010e0c:	8c800117 	ldw	r18,4(r17)
 8010e10:	0011883a 	mov	r8,zero
 8010e14:	8c400204 	addi	r17,r17,8
 8010e18:	003fdb06 	br	8010d88 <__alt_data_end+0xfc010d88>
 8010e1c:	180d883a 	mov	r6,r3
 8010e20:	e00b883a 	mov	r5,fp
 8010e24:	da000115 	stw	r8,4(sp)
 8010e28:	d8c00015 	stw	r3,0(sp)
 8010e2c:	8011e800 	call	8011e80 <memmove>
 8010e30:	d8c00017 	ldw	r3,0(sp)
 8010e34:	80800017 	ldw	r2,0(r16)
 8010e38:	800b883a 	mov	r5,r16
 8010e3c:	a809883a 	mov	r4,r21
 8010e40:	10c5883a 	add	r2,r2,r3
 8010e44:	80800015 	stw	r2,0(r16)
 8010e48:	d8c00015 	stw	r3,0(sp)
 8010e4c:	80102f00 	call	80102f0 <_fflush_r>
 8010e50:	d8c00017 	ldw	r3,0(sp)
 8010e54:	da000117 	ldw	r8,4(sp)
 8010e58:	103fc21e 	bne	r2,zero,8010d64 <__alt_data_end+0xfc010d64>
 8010e5c:	182f883a 	mov	r23,r3
 8010e60:	9de7c83a 	sub	r19,r19,r23
 8010e64:	983fe11e 	bne	r19,zero,8010dec <__alt_data_end+0xfc010dec>
 8010e68:	800b883a 	mov	r5,r16
 8010e6c:	a809883a 	mov	r4,r21
 8010e70:	80102f00 	call	80102f0 <_fflush_r>
 8010e74:	103fbb1e 	bne	r2,zero,8010d64 <__alt_data_end+0xfc010d64>
 8010e78:	0011883a 	mov	r8,zero
 8010e7c:	003fdb06 	br	8010dec <__alt_data_end+0xfc010dec>
 8010e80:	94c0012e 	bgeu	r18,r19,8010e88 <__sfvwrite_r+0x328>
 8010e84:	9027883a 	mov	r19,r18
 8010e88:	980d883a 	mov	r6,r19
 8010e8c:	e00b883a 	mov	r5,fp
 8010e90:	8011e800 	call	8011e80 <memmove>
 8010e94:	80800217 	ldw	r2,8(r16)
 8010e98:	80c00017 	ldw	r3,0(r16)
 8010e9c:	14c5c83a 	sub	r2,r2,r19
 8010ea0:	1cc7883a 	add	r3,r3,r19
 8010ea4:	80800215 	stw	r2,8(r16)
 8010ea8:	80c00015 	stw	r3,0(r16)
 8010eac:	10004326 	beq	r2,zero,8010fbc <__sfvwrite_r+0x45c>
 8010eb0:	9805883a 	mov	r2,r19
 8010eb4:	003f8306 	br	8010cc4 <__alt_data_end+0xfc010cc4>
 8010eb8:	b00d883a 	mov	r6,r22
 8010ebc:	e00b883a 	mov	r5,fp
 8010ec0:	da000115 	stw	r8,4(sp)
 8010ec4:	8011e800 	call	8011e80 <memmove>
 8010ec8:	80800217 	ldw	r2,8(r16)
 8010ecc:	80c00017 	ldw	r3,0(r16)
 8010ed0:	da000117 	ldw	r8,4(sp)
 8010ed4:	1585c83a 	sub	r2,r2,r22
 8010ed8:	1dad883a 	add	r22,r3,r22
 8010edc:	80800215 	stw	r2,8(r16)
 8010ee0:	85800015 	stw	r22,0(r16)
 8010ee4:	003fbf06 	br	8010de4 <__alt_data_end+0xfc010de4>
 8010ee8:	81000017 	ldw	r4,0(r16)
 8010eec:	9027883a 	mov	r19,r18
 8010ef0:	902f883a 	mov	r23,r18
 8010ef4:	003f6906 	br	8010c9c <__alt_data_end+0xfc010c9c>
 8010ef8:	900d883a 	mov	r6,r18
 8010efc:	01400284 	movi	r5,10
 8010f00:	e009883a 	mov	r4,fp
 8010f04:	8011c540 	call	8011c54 <memchr>
 8010f08:	10003e26 	beq	r2,zero,8011004 <__sfvwrite_r+0x4a4>
 8010f0c:	10800044 	addi	r2,r2,1
 8010f10:	1727c83a 	sub	r19,r2,fp
 8010f14:	02000044 	movi	r8,1
 8010f18:	003f9d06 	br	8010d90 <__alt_data_end+0xfc010d90>
 8010f1c:	80800517 	ldw	r2,20(r16)
 8010f20:	81400417 	ldw	r5,16(r16)
 8010f24:	81c00017 	ldw	r7,0(r16)
 8010f28:	10a7883a 	add	r19,r2,r2
 8010f2c:	9885883a 	add	r2,r19,r2
 8010f30:	1026d7fa 	srli	r19,r2,31
 8010f34:	396dc83a 	sub	r22,r7,r5
 8010f38:	b1000044 	addi	r4,r22,1
 8010f3c:	9885883a 	add	r2,r19,r2
 8010f40:	1027d07a 	srai	r19,r2,1
 8010f44:	2485883a 	add	r2,r4,r18
 8010f48:	980d883a 	mov	r6,r19
 8010f4c:	9880022e 	bgeu	r19,r2,8010f58 <__sfvwrite_r+0x3f8>
 8010f50:	1027883a 	mov	r19,r2
 8010f54:	100d883a 	mov	r6,r2
 8010f58:	18c1000c 	andi	r3,r3,1024
 8010f5c:	18001c26 	beq	r3,zero,8010fd0 <__sfvwrite_r+0x470>
 8010f60:	300b883a 	mov	r5,r6
 8010f64:	a809883a 	mov	r4,r21
 8010f68:	80114480 	call	8011448 <_malloc_r>
 8010f6c:	102f883a 	mov	r23,r2
 8010f70:	10002926 	beq	r2,zero,8011018 <__sfvwrite_r+0x4b8>
 8010f74:	81400417 	ldw	r5,16(r16)
 8010f78:	b00d883a 	mov	r6,r22
 8010f7c:	1009883a 	mov	r4,r2
 8010f80:	8011d380 	call	8011d38 <memcpy>
 8010f84:	8080030b 	ldhu	r2,12(r16)
 8010f88:	00fedfc4 	movi	r3,-1153
 8010f8c:	10c4703a 	and	r2,r2,r3
 8010f90:	10802014 	ori	r2,r2,128
 8010f94:	8080030d 	sth	r2,12(r16)
 8010f98:	bd89883a 	add	r4,r23,r22
 8010f9c:	9d8fc83a 	sub	r7,r19,r22
 8010fa0:	85c00415 	stw	r23,16(r16)
 8010fa4:	84c00515 	stw	r19,20(r16)
 8010fa8:	81000015 	stw	r4,0(r16)
 8010fac:	9027883a 	mov	r19,r18
 8010fb0:	81c00215 	stw	r7,8(r16)
 8010fb4:	902f883a 	mov	r23,r18
 8010fb8:	003f3806 	br	8010c9c <__alt_data_end+0xfc010c9c>
 8010fbc:	800b883a 	mov	r5,r16
 8010fc0:	a809883a 	mov	r4,r21
 8010fc4:	80102f00 	call	80102f0 <_fflush_r>
 8010fc8:	103fb926 	beq	r2,zero,8010eb0 <__alt_data_end+0xfc010eb0>
 8010fcc:	003f6506 	br	8010d64 <__alt_data_end+0xfc010d64>
 8010fd0:	a809883a 	mov	r4,r21
 8010fd4:	80130940 	call	8013094 <_realloc_r>
 8010fd8:	102f883a 	mov	r23,r2
 8010fdc:	103fee1e 	bne	r2,zero,8010f98 <__alt_data_end+0xfc010f98>
 8010fe0:	81400417 	ldw	r5,16(r16)
 8010fe4:	a809883a 	mov	r4,r21
 8010fe8:	80108500 	call	8010850 <_free_r>
 8010fec:	8080030b 	ldhu	r2,12(r16)
 8010ff0:	00ffdfc4 	movi	r3,-129
 8010ff4:	1884703a 	and	r2,r3,r2
 8010ff8:	00c00304 	movi	r3,12
 8010ffc:	a8c00015 	stw	r3,0(r21)
 8011000:	003f5906 	br	8010d68 <__alt_data_end+0xfc010d68>
 8011004:	94c00044 	addi	r19,r18,1
 8011008:	02000044 	movi	r8,1
 801100c:	003f6006 	br	8010d90 <__alt_data_end+0xfc010d90>
 8011010:	00bfffc4 	movi	r2,-1
 8011014:	003f0006 	br	8010c18 <__alt_data_end+0xfc010c18>
 8011018:	00800304 	movi	r2,12
 801101c:	a8800015 	stw	r2,0(r21)
 8011020:	8080030b 	ldhu	r2,12(r16)
 8011024:	003f5006 	br	8010d68 <__alt_data_end+0xfc010d68>

08011028 <_fwalk>:
 8011028:	defff704 	addi	sp,sp,-36
 801102c:	dd000415 	stw	r20,16(sp)
 8011030:	dfc00815 	stw	ra,32(sp)
 8011034:	ddc00715 	stw	r23,28(sp)
 8011038:	dd800615 	stw	r22,24(sp)
 801103c:	dd400515 	stw	r21,20(sp)
 8011040:	dcc00315 	stw	r19,12(sp)
 8011044:	dc800215 	stw	r18,8(sp)
 8011048:	dc400115 	stw	r17,4(sp)
 801104c:	dc000015 	stw	r16,0(sp)
 8011050:	2500b804 	addi	r20,r4,736
 8011054:	a0002326 	beq	r20,zero,80110e4 <_fwalk+0xbc>
 8011058:	282b883a 	mov	r21,r5
 801105c:	002f883a 	mov	r23,zero
 8011060:	05800044 	movi	r22,1
 8011064:	04ffffc4 	movi	r19,-1
 8011068:	a4400117 	ldw	r17,4(r20)
 801106c:	a4800217 	ldw	r18,8(r20)
 8011070:	8c7fffc4 	addi	r17,r17,-1
 8011074:	88000d16 	blt	r17,zero,80110ac <_fwalk+0x84>
 8011078:	94000304 	addi	r16,r18,12
 801107c:	94800384 	addi	r18,r18,14
 8011080:	8080000b 	ldhu	r2,0(r16)
 8011084:	8c7fffc4 	addi	r17,r17,-1
 8011088:	813ffd04 	addi	r4,r16,-12
 801108c:	b080042e 	bgeu	r22,r2,80110a0 <_fwalk+0x78>
 8011090:	9080000f 	ldh	r2,0(r18)
 8011094:	14c00226 	beq	r2,r19,80110a0 <_fwalk+0x78>
 8011098:	a83ee83a 	callr	r21
 801109c:	b8aeb03a 	or	r23,r23,r2
 80110a0:	84001a04 	addi	r16,r16,104
 80110a4:	94801a04 	addi	r18,r18,104
 80110a8:	8cfff51e 	bne	r17,r19,8011080 <__alt_data_end+0xfc011080>
 80110ac:	a5000017 	ldw	r20,0(r20)
 80110b0:	a03fed1e 	bne	r20,zero,8011068 <__alt_data_end+0xfc011068>
 80110b4:	b805883a 	mov	r2,r23
 80110b8:	dfc00817 	ldw	ra,32(sp)
 80110bc:	ddc00717 	ldw	r23,28(sp)
 80110c0:	dd800617 	ldw	r22,24(sp)
 80110c4:	dd400517 	ldw	r21,20(sp)
 80110c8:	dd000417 	ldw	r20,16(sp)
 80110cc:	dcc00317 	ldw	r19,12(sp)
 80110d0:	dc800217 	ldw	r18,8(sp)
 80110d4:	dc400117 	ldw	r17,4(sp)
 80110d8:	dc000017 	ldw	r16,0(sp)
 80110dc:	dec00904 	addi	sp,sp,36
 80110e0:	f800283a 	ret
 80110e4:	002f883a 	mov	r23,zero
 80110e8:	003ff206 	br	80110b4 <__alt_data_end+0xfc0110b4>

080110ec <_fwalk_reent>:
 80110ec:	defff704 	addi	sp,sp,-36
 80110f0:	dd000415 	stw	r20,16(sp)
 80110f4:	dfc00815 	stw	ra,32(sp)
 80110f8:	ddc00715 	stw	r23,28(sp)
 80110fc:	dd800615 	stw	r22,24(sp)
 8011100:	dd400515 	stw	r21,20(sp)
 8011104:	dcc00315 	stw	r19,12(sp)
 8011108:	dc800215 	stw	r18,8(sp)
 801110c:	dc400115 	stw	r17,4(sp)
 8011110:	dc000015 	stw	r16,0(sp)
 8011114:	2500b804 	addi	r20,r4,736
 8011118:	a0002326 	beq	r20,zero,80111a8 <_fwalk_reent+0xbc>
 801111c:	282b883a 	mov	r21,r5
 8011120:	2027883a 	mov	r19,r4
 8011124:	002f883a 	mov	r23,zero
 8011128:	05800044 	movi	r22,1
 801112c:	04bfffc4 	movi	r18,-1
 8011130:	a4400117 	ldw	r17,4(r20)
 8011134:	a4000217 	ldw	r16,8(r20)
 8011138:	8c7fffc4 	addi	r17,r17,-1
 801113c:	88000c16 	blt	r17,zero,8011170 <_fwalk_reent+0x84>
 8011140:	84000304 	addi	r16,r16,12
 8011144:	8080000b 	ldhu	r2,0(r16)
 8011148:	8c7fffc4 	addi	r17,r17,-1
 801114c:	817ffd04 	addi	r5,r16,-12
 8011150:	b080052e 	bgeu	r22,r2,8011168 <_fwalk_reent+0x7c>
 8011154:	8080008f 	ldh	r2,2(r16)
 8011158:	9809883a 	mov	r4,r19
 801115c:	14800226 	beq	r2,r18,8011168 <_fwalk_reent+0x7c>
 8011160:	a83ee83a 	callr	r21
 8011164:	b8aeb03a 	or	r23,r23,r2
 8011168:	84001a04 	addi	r16,r16,104
 801116c:	8cbff51e 	bne	r17,r18,8011144 <__alt_data_end+0xfc011144>
 8011170:	a5000017 	ldw	r20,0(r20)
 8011174:	a03fee1e 	bne	r20,zero,8011130 <__alt_data_end+0xfc011130>
 8011178:	b805883a 	mov	r2,r23
 801117c:	dfc00817 	ldw	ra,32(sp)
 8011180:	ddc00717 	ldw	r23,28(sp)
 8011184:	dd800617 	ldw	r22,24(sp)
 8011188:	dd400517 	ldw	r21,20(sp)
 801118c:	dd000417 	ldw	r20,16(sp)
 8011190:	dcc00317 	ldw	r19,12(sp)
 8011194:	dc800217 	ldw	r18,8(sp)
 8011198:	dc400117 	ldw	r17,4(sp)
 801119c:	dc000017 	ldw	r16,0(sp)
 80111a0:	dec00904 	addi	sp,sp,36
 80111a4:	f800283a 	ret
 80111a8:	002f883a 	mov	r23,zero
 80111ac:	003ff206 	br	8011178 <__alt_data_end+0xfc011178>

080111b0 <_setlocale_r>:
 80111b0:	30001b26 	beq	r6,zero,8011220 <_setlocale_r+0x70>
 80111b4:	01420d74 	movhi	r5,2101
 80111b8:	defffe04 	addi	sp,sp,-8
 80111bc:	29616204 	addi	r5,r5,-31352
 80111c0:	3009883a 	mov	r4,r6
 80111c4:	dc000015 	stw	r16,0(sp)
 80111c8:	dfc00115 	stw	ra,4(sp)
 80111cc:	3021883a 	mov	r16,r6
 80111d0:	80137880 	call	8013788 <strcmp>
 80111d4:	1000061e 	bne	r2,zero,80111f0 <_setlocale_r+0x40>
 80111d8:	00820d74 	movhi	r2,2101
 80111dc:	10a14304 	addi	r2,r2,-31476
 80111e0:	dfc00117 	ldw	ra,4(sp)
 80111e4:	dc000017 	ldw	r16,0(sp)
 80111e8:	dec00204 	addi	sp,sp,8
 80111ec:	f800283a 	ret
 80111f0:	01420d74 	movhi	r5,2101
 80111f4:	29614304 	addi	r5,r5,-31476
 80111f8:	8009883a 	mov	r4,r16
 80111fc:	80137880 	call	8013788 <strcmp>
 8011200:	103ff526 	beq	r2,zero,80111d8 <__alt_data_end+0xfc0111d8>
 8011204:	01420d74 	movhi	r5,2101
 8011208:	29614d04 	addi	r5,r5,-31436
 801120c:	8009883a 	mov	r4,r16
 8011210:	80137880 	call	8013788 <strcmp>
 8011214:	103ff026 	beq	r2,zero,80111d8 <__alt_data_end+0xfc0111d8>
 8011218:	0005883a 	mov	r2,zero
 801121c:	003ff006 	br	80111e0 <__alt_data_end+0xfc0111e0>
 8011220:	00820d74 	movhi	r2,2101
 8011224:	10a14304 	addi	r2,r2,-31476
 8011228:	f800283a 	ret

0801122c <__locale_charset>:
 801122c:	00820d74 	movhi	r2,2101
 8011230:	10a2e004 	addi	r2,r2,-29824
 8011234:	f800283a 	ret

08011238 <__locale_mb_cur_max>:
 8011238:	00820d74 	movhi	r2,2101
 801123c:	10a88404 	addi	r2,r2,-24048
 8011240:	10800017 	ldw	r2,0(r2)
 8011244:	f800283a 	ret

08011248 <__locale_msgcharset>:
 8011248:	00820d74 	movhi	r2,2101
 801124c:	10a2d804 	addi	r2,r2,-29856
 8011250:	f800283a 	ret

08011254 <__locale_cjk_lang>:
 8011254:	0005883a 	mov	r2,zero
 8011258:	f800283a 	ret

0801125c <_localeconv_r>:
 801125c:	00820d74 	movhi	r2,2101
 8011260:	10a2e804 	addi	r2,r2,-29792
 8011264:	f800283a 	ret

08011268 <setlocale>:
 8011268:	00820d74 	movhi	r2,2101
 801126c:	10a88304 	addi	r2,r2,-24052
 8011270:	280d883a 	mov	r6,r5
 8011274:	200b883a 	mov	r5,r4
 8011278:	11000017 	ldw	r4,0(r2)
 801127c:	80111b01 	jmpi	80111b0 <_setlocale_r>

08011280 <localeconv>:
 8011280:	00820d74 	movhi	r2,2101
 8011284:	10a2e804 	addi	r2,r2,-29792
 8011288:	f800283a 	ret

0801128c <__smakebuf_r>:
 801128c:	2880030b 	ldhu	r2,12(r5)
 8011290:	10c0008c 	andi	r3,r2,2
 8011294:	1800411e 	bne	r3,zero,801139c <__smakebuf_r+0x110>
 8011298:	deffec04 	addi	sp,sp,-80
 801129c:	dc000f15 	stw	r16,60(sp)
 80112a0:	2821883a 	mov	r16,r5
 80112a4:	2940038f 	ldh	r5,14(r5)
 80112a8:	dc401015 	stw	r17,64(sp)
 80112ac:	dfc01315 	stw	ra,76(sp)
 80112b0:	dcc01215 	stw	r19,72(sp)
 80112b4:	dc801115 	stw	r18,68(sp)
 80112b8:	2023883a 	mov	r17,r4
 80112bc:	28001c16 	blt	r5,zero,8011330 <__smakebuf_r+0xa4>
 80112c0:	d80d883a 	mov	r6,sp
 80112c4:	80153f80 	call	80153f8 <_fstat_r>
 80112c8:	10001816 	blt	r2,zero,801132c <__smakebuf_r+0xa0>
 80112cc:	d8800117 	ldw	r2,4(sp)
 80112d0:	00e00014 	movui	r3,32768
 80112d4:	10bc000c 	andi	r2,r2,61440
 80112d8:	14c80020 	cmpeqi	r19,r2,8192
 80112dc:	10c03726 	beq	r2,r3,80113bc <__smakebuf_r+0x130>
 80112e0:	80c0030b 	ldhu	r3,12(r16)
 80112e4:	18c20014 	ori	r3,r3,2048
 80112e8:	80c0030d 	sth	r3,12(r16)
 80112ec:	00c80004 	movi	r3,8192
 80112f0:	10c0521e 	bne	r2,r3,801143c <__smakebuf_r+0x1b0>
 80112f4:	8140038f 	ldh	r5,14(r16)
 80112f8:	8809883a 	mov	r4,r17
 80112fc:	80154540 	call	8015454 <_isatty_r>
 8011300:	10004c26 	beq	r2,zero,8011434 <__smakebuf_r+0x1a8>
 8011304:	8080030b 	ldhu	r2,12(r16)
 8011308:	80c010c4 	addi	r3,r16,67
 801130c:	80c00015 	stw	r3,0(r16)
 8011310:	10800054 	ori	r2,r2,1
 8011314:	8080030d 	sth	r2,12(r16)
 8011318:	00800044 	movi	r2,1
 801131c:	80c00415 	stw	r3,16(r16)
 8011320:	80800515 	stw	r2,20(r16)
 8011324:	04810004 	movi	r18,1024
 8011328:	00000706 	br	8011348 <__smakebuf_r+0xbc>
 801132c:	8080030b 	ldhu	r2,12(r16)
 8011330:	10c0200c 	andi	r3,r2,128
 8011334:	18001f1e 	bne	r3,zero,80113b4 <__smakebuf_r+0x128>
 8011338:	04810004 	movi	r18,1024
 801133c:	10820014 	ori	r2,r2,2048
 8011340:	8080030d 	sth	r2,12(r16)
 8011344:	0027883a 	mov	r19,zero
 8011348:	900b883a 	mov	r5,r18
 801134c:	8809883a 	mov	r4,r17
 8011350:	80114480 	call	8011448 <_malloc_r>
 8011354:	10002c26 	beq	r2,zero,8011408 <__smakebuf_r+0x17c>
 8011358:	80c0030b 	ldhu	r3,12(r16)
 801135c:	01020074 	movhi	r4,2049
 8011360:	2100e104 	addi	r4,r4,900
 8011364:	89000f15 	stw	r4,60(r17)
 8011368:	18c02014 	ori	r3,r3,128
 801136c:	80c0030d 	sth	r3,12(r16)
 8011370:	80800015 	stw	r2,0(r16)
 8011374:	80800415 	stw	r2,16(r16)
 8011378:	84800515 	stw	r18,20(r16)
 801137c:	98001a1e 	bne	r19,zero,80113e8 <__smakebuf_r+0x15c>
 8011380:	dfc01317 	ldw	ra,76(sp)
 8011384:	dcc01217 	ldw	r19,72(sp)
 8011388:	dc801117 	ldw	r18,68(sp)
 801138c:	dc401017 	ldw	r17,64(sp)
 8011390:	dc000f17 	ldw	r16,60(sp)
 8011394:	dec01404 	addi	sp,sp,80
 8011398:	f800283a 	ret
 801139c:	288010c4 	addi	r2,r5,67
 80113a0:	28800015 	stw	r2,0(r5)
 80113a4:	28800415 	stw	r2,16(r5)
 80113a8:	00800044 	movi	r2,1
 80113ac:	28800515 	stw	r2,20(r5)
 80113b0:	f800283a 	ret
 80113b4:	04801004 	movi	r18,64
 80113b8:	003fe006 	br	801133c <__alt_data_end+0xfc01133c>
 80113bc:	81000a17 	ldw	r4,40(r16)
 80113c0:	00c20074 	movhi	r3,2049
 80113c4:	18cdc904 	addi	r3,r3,14116
 80113c8:	20ffc51e 	bne	r4,r3,80112e0 <__alt_data_end+0xfc0112e0>
 80113cc:	8080030b 	ldhu	r2,12(r16)
 80113d0:	04810004 	movi	r18,1024
 80113d4:	84801315 	stw	r18,76(r16)
 80113d8:	1484b03a 	or	r2,r2,r18
 80113dc:	8080030d 	sth	r2,12(r16)
 80113e0:	0027883a 	mov	r19,zero
 80113e4:	003fd806 	br	8011348 <__alt_data_end+0xfc011348>
 80113e8:	8140038f 	ldh	r5,14(r16)
 80113ec:	8809883a 	mov	r4,r17
 80113f0:	80154540 	call	8015454 <_isatty_r>
 80113f4:	103fe226 	beq	r2,zero,8011380 <__alt_data_end+0xfc011380>
 80113f8:	8080030b 	ldhu	r2,12(r16)
 80113fc:	10800054 	ori	r2,r2,1
 8011400:	8080030d 	sth	r2,12(r16)
 8011404:	003fde06 	br	8011380 <__alt_data_end+0xfc011380>
 8011408:	8080030b 	ldhu	r2,12(r16)
 801140c:	10c0800c 	andi	r3,r2,512
 8011410:	183fdb1e 	bne	r3,zero,8011380 <__alt_data_end+0xfc011380>
 8011414:	10800094 	ori	r2,r2,2
 8011418:	80c010c4 	addi	r3,r16,67
 801141c:	8080030d 	sth	r2,12(r16)
 8011420:	00800044 	movi	r2,1
 8011424:	80c00015 	stw	r3,0(r16)
 8011428:	80c00415 	stw	r3,16(r16)
 801142c:	80800515 	stw	r2,20(r16)
 8011430:	003fd306 	br	8011380 <__alt_data_end+0xfc011380>
 8011434:	04810004 	movi	r18,1024
 8011438:	003fc306 	br	8011348 <__alt_data_end+0xfc011348>
 801143c:	0027883a 	mov	r19,zero
 8011440:	04810004 	movi	r18,1024
 8011444:	003fc006 	br	8011348 <__alt_data_end+0xfc011348>

08011448 <_malloc_r>:
 8011448:	defff504 	addi	sp,sp,-44
 801144c:	dc800315 	stw	r18,12(sp)
 8011450:	dfc00a15 	stw	ra,40(sp)
 8011454:	df000915 	stw	fp,36(sp)
 8011458:	ddc00815 	stw	r23,32(sp)
 801145c:	dd800715 	stw	r22,28(sp)
 8011460:	dd400615 	stw	r21,24(sp)
 8011464:	dd000515 	stw	r20,20(sp)
 8011468:	dcc00415 	stw	r19,16(sp)
 801146c:	dc400215 	stw	r17,8(sp)
 8011470:	dc000115 	stw	r16,4(sp)
 8011474:	288002c4 	addi	r2,r5,11
 8011478:	00c00584 	movi	r3,22
 801147c:	2025883a 	mov	r18,r4
 8011480:	18807f2e 	bgeu	r3,r2,8011680 <_malloc_r+0x238>
 8011484:	047ffe04 	movi	r17,-8
 8011488:	1462703a 	and	r17,r2,r17
 801148c:	8800a316 	blt	r17,zero,801171c <_malloc_r+0x2d4>
 8011490:	8940a236 	bltu	r17,r5,801171c <_malloc_r+0x2d4>
 8011494:	80164080 	call	8016408 <__malloc_lock>
 8011498:	00807dc4 	movi	r2,503
 801149c:	1441e92e 	bgeu	r2,r17,8011c44 <_malloc_r+0x7fc>
 80114a0:	8804d27a 	srli	r2,r17,9
 80114a4:	1000a126 	beq	r2,zero,801172c <_malloc_r+0x2e4>
 80114a8:	00c00104 	movi	r3,4
 80114ac:	18811e36 	bltu	r3,r2,8011928 <_malloc_r+0x4e0>
 80114b0:	8804d1ba 	srli	r2,r17,6
 80114b4:	12000e44 	addi	r8,r2,57
 80114b8:	11c00e04 	addi	r7,r2,56
 80114bc:	4209883a 	add	r4,r8,r8
 80114c0:	04c20d74 	movhi	r19,2101
 80114c4:	2109883a 	add	r4,r4,r4
 80114c8:	9ce2f604 	addi	r19,r19,-29736
 80114cc:	2109883a 	add	r4,r4,r4
 80114d0:	9909883a 	add	r4,r19,r4
 80114d4:	24000117 	ldw	r16,4(r4)
 80114d8:	213ffe04 	addi	r4,r4,-8
 80114dc:	24009726 	beq	r4,r16,801173c <_malloc_r+0x2f4>
 80114e0:	80800117 	ldw	r2,4(r16)
 80114e4:	01bfff04 	movi	r6,-4
 80114e8:	014003c4 	movi	r5,15
 80114ec:	1184703a 	and	r2,r2,r6
 80114f0:	1447c83a 	sub	r3,r2,r17
 80114f4:	28c00716 	blt	r5,r3,8011514 <_malloc_r+0xcc>
 80114f8:	1800920e 	bge	r3,zero,8011744 <_malloc_r+0x2fc>
 80114fc:	84000317 	ldw	r16,12(r16)
 8011500:	24008e26 	beq	r4,r16,801173c <_malloc_r+0x2f4>
 8011504:	80800117 	ldw	r2,4(r16)
 8011508:	1184703a 	and	r2,r2,r6
 801150c:	1447c83a 	sub	r3,r2,r17
 8011510:	28fff90e 	bge	r5,r3,80114f8 <__alt_data_end+0xfc0114f8>
 8011514:	3809883a 	mov	r4,r7
 8011518:	01820d74 	movhi	r6,2101
 801151c:	9c000417 	ldw	r16,16(r19)
 8011520:	31a2f604 	addi	r6,r6,-29736
 8011524:	32000204 	addi	r8,r6,8
 8011528:	82013426 	beq	r16,r8,80119fc <_malloc_r+0x5b4>
 801152c:	80c00117 	ldw	r3,4(r16)
 8011530:	00bfff04 	movi	r2,-4
 8011534:	188e703a 	and	r7,r3,r2
 8011538:	3c45c83a 	sub	r2,r7,r17
 801153c:	00c003c4 	movi	r3,15
 8011540:	18811f16 	blt	r3,r2,80119c0 <_malloc_r+0x578>
 8011544:	32000515 	stw	r8,20(r6)
 8011548:	32000415 	stw	r8,16(r6)
 801154c:	10007f0e 	bge	r2,zero,801174c <_malloc_r+0x304>
 8011550:	00807fc4 	movi	r2,511
 8011554:	11c0fd36 	bltu	r2,r7,801194c <_malloc_r+0x504>
 8011558:	3806d0fa 	srli	r3,r7,3
 801155c:	01c00044 	movi	r7,1
 8011560:	30800117 	ldw	r2,4(r6)
 8011564:	19400044 	addi	r5,r3,1
 8011568:	294b883a 	add	r5,r5,r5
 801156c:	1807d0ba 	srai	r3,r3,2
 8011570:	294b883a 	add	r5,r5,r5
 8011574:	294b883a 	add	r5,r5,r5
 8011578:	298b883a 	add	r5,r5,r6
 801157c:	38c6983a 	sll	r3,r7,r3
 8011580:	29c00017 	ldw	r7,0(r5)
 8011584:	2a7ffe04 	addi	r9,r5,-8
 8011588:	1886b03a 	or	r3,r3,r2
 801158c:	82400315 	stw	r9,12(r16)
 8011590:	81c00215 	stw	r7,8(r16)
 8011594:	30c00115 	stw	r3,4(r6)
 8011598:	2c000015 	stw	r16,0(r5)
 801159c:	3c000315 	stw	r16,12(r7)
 80115a0:	2005d0ba 	srai	r2,r4,2
 80115a4:	01400044 	movi	r5,1
 80115a8:	288a983a 	sll	r5,r5,r2
 80115ac:	19406f36 	bltu	r3,r5,801176c <_malloc_r+0x324>
 80115b0:	28c4703a 	and	r2,r5,r3
 80115b4:	10000a1e 	bne	r2,zero,80115e0 <_malloc_r+0x198>
 80115b8:	00bfff04 	movi	r2,-4
 80115bc:	294b883a 	add	r5,r5,r5
 80115c0:	2088703a 	and	r4,r4,r2
 80115c4:	28c4703a 	and	r2,r5,r3
 80115c8:	21000104 	addi	r4,r4,4
 80115cc:	1000041e 	bne	r2,zero,80115e0 <_malloc_r+0x198>
 80115d0:	294b883a 	add	r5,r5,r5
 80115d4:	28c4703a 	and	r2,r5,r3
 80115d8:	21000104 	addi	r4,r4,4
 80115dc:	103ffc26 	beq	r2,zero,80115d0 <__alt_data_end+0xfc0115d0>
 80115e0:	02bfff04 	movi	r10,-4
 80115e4:	024003c4 	movi	r9,15
 80115e8:	21800044 	addi	r6,r4,1
 80115ec:	318d883a 	add	r6,r6,r6
 80115f0:	318d883a 	add	r6,r6,r6
 80115f4:	318d883a 	add	r6,r6,r6
 80115f8:	998d883a 	add	r6,r19,r6
 80115fc:	333ffe04 	addi	r12,r6,-8
 8011600:	2017883a 	mov	r11,r4
 8011604:	31800104 	addi	r6,r6,4
 8011608:	34000017 	ldw	r16,0(r6)
 801160c:	31fffd04 	addi	r7,r6,-12
 8011610:	81c0041e 	bne	r16,r7,8011624 <_malloc_r+0x1dc>
 8011614:	0000fb06 	br	8011a04 <_malloc_r+0x5bc>
 8011618:	1801030e 	bge	r3,zero,8011a28 <_malloc_r+0x5e0>
 801161c:	84000317 	ldw	r16,12(r16)
 8011620:	81c0f826 	beq	r16,r7,8011a04 <_malloc_r+0x5bc>
 8011624:	80800117 	ldw	r2,4(r16)
 8011628:	1284703a 	and	r2,r2,r10
 801162c:	1447c83a 	sub	r3,r2,r17
 8011630:	48fff90e 	bge	r9,r3,8011618 <__alt_data_end+0xfc011618>
 8011634:	80800317 	ldw	r2,12(r16)
 8011638:	81000217 	ldw	r4,8(r16)
 801163c:	89400054 	ori	r5,r17,1
 8011640:	81400115 	stw	r5,4(r16)
 8011644:	20800315 	stw	r2,12(r4)
 8011648:	11000215 	stw	r4,8(r2)
 801164c:	8463883a 	add	r17,r16,r17
 8011650:	9c400515 	stw	r17,20(r19)
 8011654:	9c400415 	stw	r17,16(r19)
 8011658:	18800054 	ori	r2,r3,1
 801165c:	88800115 	stw	r2,4(r17)
 8011660:	8a000315 	stw	r8,12(r17)
 8011664:	8a000215 	stw	r8,8(r17)
 8011668:	88e3883a 	add	r17,r17,r3
 801166c:	88c00015 	stw	r3,0(r17)
 8011670:	9009883a 	mov	r4,r18
 8011674:	801642c0 	call	801642c <__malloc_unlock>
 8011678:	80800204 	addi	r2,r16,8
 801167c:	00001b06 	br	80116ec <_malloc_r+0x2a4>
 8011680:	04400404 	movi	r17,16
 8011684:	89402536 	bltu	r17,r5,801171c <_malloc_r+0x2d4>
 8011688:	80164080 	call	8016408 <__malloc_lock>
 801168c:	00800184 	movi	r2,6
 8011690:	01000084 	movi	r4,2
 8011694:	04c20d74 	movhi	r19,2101
 8011698:	1085883a 	add	r2,r2,r2
 801169c:	9ce2f604 	addi	r19,r19,-29736
 80116a0:	1085883a 	add	r2,r2,r2
 80116a4:	9885883a 	add	r2,r19,r2
 80116a8:	14000117 	ldw	r16,4(r2)
 80116ac:	10fffe04 	addi	r3,r2,-8
 80116b0:	80c0d926 	beq	r16,r3,8011a18 <_malloc_r+0x5d0>
 80116b4:	80c00117 	ldw	r3,4(r16)
 80116b8:	81000317 	ldw	r4,12(r16)
 80116bc:	00bfff04 	movi	r2,-4
 80116c0:	1884703a 	and	r2,r3,r2
 80116c4:	81400217 	ldw	r5,8(r16)
 80116c8:	8085883a 	add	r2,r16,r2
 80116cc:	10c00117 	ldw	r3,4(r2)
 80116d0:	29000315 	stw	r4,12(r5)
 80116d4:	21400215 	stw	r5,8(r4)
 80116d8:	18c00054 	ori	r3,r3,1
 80116dc:	10c00115 	stw	r3,4(r2)
 80116e0:	9009883a 	mov	r4,r18
 80116e4:	801642c0 	call	801642c <__malloc_unlock>
 80116e8:	80800204 	addi	r2,r16,8
 80116ec:	dfc00a17 	ldw	ra,40(sp)
 80116f0:	df000917 	ldw	fp,36(sp)
 80116f4:	ddc00817 	ldw	r23,32(sp)
 80116f8:	dd800717 	ldw	r22,28(sp)
 80116fc:	dd400617 	ldw	r21,24(sp)
 8011700:	dd000517 	ldw	r20,20(sp)
 8011704:	dcc00417 	ldw	r19,16(sp)
 8011708:	dc800317 	ldw	r18,12(sp)
 801170c:	dc400217 	ldw	r17,8(sp)
 8011710:	dc000117 	ldw	r16,4(sp)
 8011714:	dec00b04 	addi	sp,sp,44
 8011718:	f800283a 	ret
 801171c:	00800304 	movi	r2,12
 8011720:	90800015 	stw	r2,0(r18)
 8011724:	0005883a 	mov	r2,zero
 8011728:	003ff006 	br	80116ec <__alt_data_end+0xfc0116ec>
 801172c:	01002004 	movi	r4,128
 8011730:	02001004 	movi	r8,64
 8011734:	01c00fc4 	movi	r7,63
 8011738:	003f6106 	br	80114c0 <__alt_data_end+0xfc0114c0>
 801173c:	4009883a 	mov	r4,r8
 8011740:	003f7506 	br	8011518 <__alt_data_end+0xfc011518>
 8011744:	81000317 	ldw	r4,12(r16)
 8011748:	003fde06 	br	80116c4 <__alt_data_end+0xfc0116c4>
 801174c:	81c5883a 	add	r2,r16,r7
 8011750:	11400117 	ldw	r5,4(r2)
 8011754:	9009883a 	mov	r4,r18
 8011758:	29400054 	ori	r5,r5,1
 801175c:	11400115 	stw	r5,4(r2)
 8011760:	801642c0 	call	801642c <__malloc_unlock>
 8011764:	80800204 	addi	r2,r16,8
 8011768:	003fe006 	br	80116ec <__alt_data_end+0xfc0116ec>
 801176c:	9c000217 	ldw	r16,8(r19)
 8011770:	00bfff04 	movi	r2,-4
 8011774:	85800117 	ldw	r22,4(r16)
 8011778:	b0ac703a 	and	r22,r22,r2
 801177c:	b4400336 	bltu	r22,r17,801178c <_malloc_r+0x344>
 8011780:	b445c83a 	sub	r2,r22,r17
 8011784:	00c003c4 	movi	r3,15
 8011788:	18805d16 	blt	r3,r2,8011900 <_malloc_r+0x4b8>
 801178c:	05c20d74 	movhi	r23,2101
 8011790:	00820d74 	movhi	r2,2101
 8011794:	10af6d04 	addi	r2,r2,-16972
 8011798:	bde88504 	addi	r23,r23,-24044
 801179c:	15400017 	ldw	r21,0(r2)
 80117a0:	b8c00017 	ldw	r3,0(r23)
 80117a4:	00bfffc4 	movi	r2,-1
 80117a8:	858d883a 	add	r6,r16,r22
 80117ac:	8d6b883a 	add	r21,r17,r21
 80117b0:	1880ea26 	beq	r3,r2,8011b5c <_malloc_r+0x714>
 80117b4:	ad4403c4 	addi	r21,r21,4111
 80117b8:	00bc0004 	movi	r2,-4096
 80117bc:	a8aa703a 	and	r21,r21,r2
 80117c0:	a80b883a 	mov	r5,r21
 80117c4:	9009883a 	mov	r4,r18
 80117c8:	d9800015 	stw	r6,0(sp)
 80117cc:	80135f80 	call	80135f8 <_sbrk_r>
 80117d0:	1029883a 	mov	r20,r2
 80117d4:	00bfffc4 	movi	r2,-1
 80117d8:	d9800017 	ldw	r6,0(sp)
 80117dc:	a080e826 	beq	r20,r2,8011b80 <_malloc_r+0x738>
 80117e0:	a180a636 	bltu	r20,r6,8011a7c <_malloc_r+0x634>
 80117e4:	070211f4 	movhi	fp,2119
 80117e8:	e71f8004 	addi	fp,fp,32256
 80117ec:	e0800017 	ldw	r2,0(fp)
 80117f0:	a887883a 	add	r3,r21,r2
 80117f4:	e0c00015 	stw	r3,0(fp)
 80117f8:	3500e626 	beq	r6,r20,8011b94 <_malloc_r+0x74c>
 80117fc:	b9000017 	ldw	r4,0(r23)
 8011800:	00bfffc4 	movi	r2,-1
 8011804:	2080ee26 	beq	r4,r2,8011bc0 <_malloc_r+0x778>
 8011808:	a185c83a 	sub	r2,r20,r6
 801180c:	10c5883a 	add	r2,r2,r3
 8011810:	e0800015 	stw	r2,0(fp)
 8011814:	a0c001cc 	andi	r3,r20,7
 8011818:	1800bc26 	beq	r3,zero,8011b0c <_malloc_r+0x6c4>
 801181c:	a0e9c83a 	sub	r20,r20,r3
 8011820:	00840204 	movi	r2,4104
 8011824:	a5000204 	addi	r20,r20,8
 8011828:	10c7c83a 	sub	r3,r2,r3
 801182c:	a545883a 	add	r2,r20,r21
 8011830:	1083ffcc 	andi	r2,r2,4095
 8011834:	18abc83a 	sub	r21,r3,r2
 8011838:	a80b883a 	mov	r5,r21
 801183c:	9009883a 	mov	r4,r18
 8011840:	80135f80 	call	80135f8 <_sbrk_r>
 8011844:	00ffffc4 	movi	r3,-1
 8011848:	10c0e126 	beq	r2,r3,8011bd0 <_malloc_r+0x788>
 801184c:	1505c83a 	sub	r2,r2,r20
 8011850:	1545883a 	add	r2,r2,r21
 8011854:	10800054 	ori	r2,r2,1
 8011858:	e0c00017 	ldw	r3,0(fp)
 801185c:	9d000215 	stw	r20,8(r19)
 8011860:	a0800115 	stw	r2,4(r20)
 8011864:	a8c7883a 	add	r3,r21,r3
 8011868:	e0c00015 	stw	r3,0(fp)
 801186c:	84c00e26 	beq	r16,r19,80118a8 <_malloc_r+0x460>
 8011870:	018003c4 	movi	r6,15
 8011874:	3580a72e 	bgeu	r6,r22,8011b14 <_malloc_r+0x6cc>
 8011878:	81400117 	ldw	r5,4(r16)
 801187c:	013ffe04 	movi	r4,-8
 8011880:	b0bffd04 	addi	r2,r22,-12
 8011884:	1104703a 	and	r2,r2,r4
 8011888:	2900004c 	andi	r4,r5,1
 801188c:	2088b03a 	or	r4,r4,r2
 8011890:	81000115 	stw	r4,4(r16)
 8011894:	01400144 	movi	r5,5
 8011898:	8089883a 	add	r4,r16,r2
 801189c:	21400115 	stw	r5,4(r4)
 80118a0:	21400215 	stw	r5,8(r4)
 80118a4:	3080cd36 	bltu	r6,r2,8011bdc <_malloc_r+0x794>
 80118a8:	00820d74 	movhi	r2,2101
 80118ac:	10af6c04 	addi	r2,r2,-16976
 80118b0:	11000017 	ldw	r4,0(r2)
 80118b4:	20c0012e 	bgeu	r4,r3,80118bc <_malloc_r+0x474>
 80118b8:	10c00015 	stw	r3,0(r2)
 80118bc:	00820d74 	movhi	r2,2101
 80118c0:	10af6b04 	addi	r2,r2,-16980
 80118c4:	11000017 	ldw	r4,0(r2)
 80118c8:	9c000217 	ldw	r16,8(r19)
 80118cc:	20c0012e 	bgeu	r4,r3,80118d4 <_malloc_r+0x48c>
 80118d0:	10c00015 	stw	r3,0(r2)
 80118d4:	80c00117 	ldw	r3,4(r16)
 80118d8:	00bfff04 	movi	r2,-4
 80118dc:	1886703a 	and	r3,r3,r2
 80118e0:	1c45c83a 	sub	r2,r3,r17
 80118e4:	1c400236 	bltu	r3,r17,80118f0 <_malloc_r+0x4a8>
 80118e8:	00c003c4 	movi	r3,15
 80118ec:	18800416 	blt	r3,r2,8011900 <_malloc_r+0x4b8>
 80118f0:	9009883a 	mov	r4,r18
 80118f4:	801642c0 	call	801642c <__malloc_unlock>
 80118f8:	0005883a 	mov	r2,zero
 80118fc:	003f7b06 	br	80116ec <__alt_data_end+0xfc0116ec>
 8011900:	88c00054 	ori	r3,r17,1
 8011904:	80c00115 	stw	r3,4(r16)
 8011908:	8463883a 	add	r17,r16,r17
 801190c:	10800054 	ori	r2,r2,1
 8011910:	9c400215 	stw	r17,8(r19)
 8011914:	88800115 	stw	r2,4(r17)
 8011918:	9009883a 	mov	r4,r18
 801191c:	801642c0 	call	801642c <__malloc_unlock>
 8011920:	80800204 	addi	r2,r16,8
 8011924:	003f7106 	br	80116ec <__alt_data_end+0xfc0116ec>
 8011928:	00c00504 	movi	r3,20
 801192c:	18804a2e 	bgeu	r3,r2,8011a58 <_malloc_r+0x610>
 8011930:	00c01504 	movi	r3,84
 8011934:	18806e36 	bltu	r3,r2,8011af0 <_malloc_r+0x6a8>
 8011938:	8804d33a 	srli	r2,r17,12
 801193c:	12001bc4 	addi	r8,r2,111
 8011940:	11c01b84 	addi	r7,r2,110
 8011944:	4209883a 	add	r4,r8,r8
 8011948:	003edd06 	br	80114c0 <__alt_data_end+0xfc0114c0>
 801194c:	3804d27a 	srli	r2,r7,9
 8011950:	00c00104 	movi	r3,4
 8011954:	1880442e 	bgeu	r3,r2,8011a68 <_malloc_r+0x620>
 8011958:	00c00504 	movi	r3,20
 801195c:	18808136 	bltu	r3,r2,8011b64 <_malloc_r+0x71c>
 8011960:	11401704 	addi	r5,r2,92
 8011964:	10c016c4 	addi	r3,r2,91
 8011968:	294b883a 	add	r5,r5,r5
 801196c:	294b883a 	add	r5,r5,r5
 8011970:	294b883a 	add	r5,r5,r5
 8011974:	994b883a 	add	r5,r19,r5
 8011978:	28800017 	ldw	r2,0(r5)
 801197c:	01820d74 	movhi	r6,2101
 8011980:	297ffe04 	addi	r5,r5,-8
 8011984:	31a2f604 	addi	r6,r6,-29736
 8011988:	28806526 	beq	r5,r2,8011b20 <_malloc_r+0x6d8>
 801198c:	01bfff04 	movi	r6,-4
 8011990:	10c00117 	ldw	r3,4(r2)
 8011994:	1986703a 	and	r3,r3,r6
 8011998:	38c0022e 	bgeu	r7,r3,80119a4 <_malloc_r+0x55c>
 801199c:	10800217 	ldw	r2,8(r2)
 80119a0:	28bffb1e 	bne	r5,r2,8011990 <__alt_data_end+0xfc011990>
 80119a4:	11400317 	ldw	r5,12(r2)
 80119a8:	98c00117 	ldw	r3,4(r19)
 80119ac:	81400315 	stw	r5,12(r16)
 80119b0:	80800215 	stw	r2,8(r16)
 80119b4:	2c000215 	stw	r16,8(r5)
 80119b8:	14000315 	stw	r16,12(r2)
 80119bc:	003ef806 	br	80115a0 <__alt_data_end+0xfc0115a0>
 80119c0:	88c00054 	ori	r3,r17,1
 80119c4:	80c00115 	stw	r3,4(r16)
 80119c8:	8463883a 	add	r17,r16,r17
 80119cc:	34400515 	stw	r17,20(r6)
 80119d0:	34400415 	stw	r17,16(r6)
 80119d4:	10c00054 	ori	r3,r2,1
 80119d8:	8a000315 	stw	r8,12(r17)
 80119dc:	8a000215 	stw	r8,8(r17)
 80119e0:	88c00115 	stw	r3,4(r17)
 80119e4:	88a3883a 	add	r17,r17,r2
 80119e8:	88800015 	stw	r2,0(r17)
 80119ec:	9009883a 	mov	r4,r18
 80119f0:	801642c0 	call	801642c <__malloc_unlock>
 80119f4:	80800204 	addi	r2,r16,8
 80119f8:	003f3c06 	br	80116ec <__alt_data_end+0xfc0116ec>
 80119fc:	30c00117 	ldw	r3,4(r6)
 8011a00:	003ee706 	br	80115a0 <__alt_data_end+0xfc0115a0>
 8011a04:	5ac00044 	addi	r11,r11,1
 8011a08:	588000cc 	andi	r2,r11,3
 8011a0c:	31800204 	addi	r6,r6,8
 8011a10:	103efd1e 	bne	r2,zero,8011608 <__alt_data_end+0xfc011608>
 8011a14:	00002406 	br	8011aa8 <_malloc_r+0x660>
 8011a18:	14000317 	ldw	r16,12(r2)
 8011a1c:	143f251e 	bne	r2,r16,80116b4 <__alt_data_end+0xfc0116b4>
 8011a20:	21000084 	addi	r4,r4,2
 8011a24:	003ebc06 	br	8011518 <__alt_data_end+0xfc011518>
 8011a28:	8085883a 	add	r2,r16,r2
 8011a2c:	10c00117 	ldw	r3,4(r2)
 8011a30:	81000317 	ldw	r4,12(r16)
 8011a34:	81400217 	ldw	r5,8(r16)
 8011a38:	18c00054 	ori	r3,r3,1
 8011a3c:	10c00115 	stw	r3,4(r2)
 8011a40:	29000315 	stw	r4,12(r5)
 8011a44:	21400215 	stw	r5,8(r4)
 8011a48:	9009883a 	mov	r4,r18
 8011a4c:	801642c0 	call	801642c <__malloc_unlock>
 8011a50:	80800204 	addi	r2,r16,8
 8011a54:	003f2506 	br	80116ec <__alt_data_end+0xfc0116ec>
 8011a58:	12001704 	addi	r8,r2,92
 8011a5c:	11c016c4 	addi	r7,r2,91
 8011a60:	4209883a 	add	r4,r8,r8
 8011a64:	003e9606 	br	80114c0 <__alt_data_end+0xfc0114c0>
 8011a68:	3804d1ba 	srli	r2,r7,6
 8011a6c:	11400e44 	addi	r5,r2,57
 8011a70:	10c00e04 	addi	r3,r2,56
 8011a74:	294b883a 	add	r5,r5,r5
 8011a78:	003fbc06 	br	801196c <__alt_data_end+0xfc01196c>
 8011a7c:	84ff5926 	beq	r16,r19,80117e4 <__alt_data_end+0xfc0117e4>
 8011a80:	00820d74 	movhi	r2,2101
 8011a84:	10a2f604 	addi	r2,r2,-29736
 8011a88:	14000217 	ldw	r16,8(r2)
 8011a8c:	00bfff04 	movi	r2,-4
 8011a90:	80c00117 	ldw	r3,4(r16)
 8011a94:	1886703a 	and	r3,r3,r2
 8011a98:	003f9106 	br	80118e0 <__alt_data_end+0xfc0118e0>
 8011a9c:	60800217 	ldw	r2,8(r12)
 8011aa0:	213fffc4 	addi	r4,r4,-1
 8011aa4:	1300651e 	bne	r2,r12,8011c3c <_malloc_r+0x7f4>
 8011aa8:	208000cc 	andi	r2,r4,3
 8011aac:	633ffe04 	addi	r12,r12,-8
 8011ab0:	103ffa1e 	bne	r2,zero,8011a9c <__alt_data_end+0xfc011a9c>
 8011ab4:	98800117 	ldw	r2,4(r19)
 8011ab8:	0146303a 	nor	r3,zero,r5
 8011abc:	1884703a 	and	r2,r3,r2
 8011ac0:	98800115 	stw	r2,4(r19)
 8011ac4:	294b883a 	add	r5,r5,r5
 8011ac8:	117f2836 	bltu	r2,r5,801176c <__alt_data_end+0xfc01176c>
 8011acc:	283f2726 	beq	r5,zero,801176c <__alt_data_end+0xfc01176c>
 8011ad0:	2886703a 	and	r3,r5,r2
 8011ad4:	5809883a 	mov	r4,r11
 8011ad8:	183ec31e 	bne	r3,zero,80115e8 <__alt_data_end+0xfc0115e8>
 8011adc:	294b883a 	add	r5,r5,r5
 8011ae0:	2886703a 	and	r3,r5,r2
 8011ae4:	21000104 	addi	r4,r4,4
 8011ae8:	183ffc26 	beq	r3,zero,8011adc <__alt_data_end+0xfc011adc>
 8011aec:	003ebe06 	br	80115e8 <__alt_data_end+0xfc0115e8>
 8011af0:	00c05504 	movi	r3,340
 8011af4:	18801236 	bltu	r3,r2,8011b40 <_malloc_r+0x6f8>
 8011af8:	8804d3fa 	srli	r2,r17,15
 8011afc:	12001e04 	addi	r8,r2,120
 8011b00:	11c01dc4 	addi	r7,r2,119
 8011b04:	4209883a 	add	r4,r8,r8
 8011b08:	003e6d06 	br	80114c0 <__alt_data_end+0xfc0114c0>
 8011b0c:	00c40004 	movi	r3,4096
 8011b10:	003f4606 	br	801182c <__alt_data_end+0xfc01182c>
 8011b14:	00800044 	movi	r2,1
 8011b18:	a0800115 	stw	r2,4(r20)
 8011b1c:	003f7406 	br	80118f0 <__alt_data_end+0xfc0118f0>
 8011b20:	1805d0ba 	srai	r2,r3,2
 8011b24:	01c00044 	movi	r7,1
 8011b28:	30c00117 	ldw	r3,4(r6)
 8011b2c:	388e983a 	sll	r7,r7,r2
 8011b30:	2805883a 	mov	r2,r5
 8011b34:	38c6b03a 	or	r3,r7,r3
 8011b38:	30c00115 	stw	r3,4(r6)
 8011b3c:	003f9b06 	br	80119ac <__alt_data_end+0xfc0119ac>
 8011b40:	00c15504 	movi	r3,1364
 8011b44:	18801a36 	bltu	r3,r2,8011bb0 <_malloc_r+0x768>
 8011b48:	8804d4ba 	srli	r2,r17,18
 8011b4c:	12001f44 	addi	r8,r2,125
 8011b50:	11c01f04 	addi	r7,r2,124
 8011b54:	4209883a 	add	r4,r8,r8
 8011b58:	003e5906 	br	80114c0 <__alt_data_end+0xfc0114c0>
 8011b5c:	ad400404 	addi	r21,r21,16
 8011b60:	003f1706 	br	80117c0 <__alt_data_end+0xfc0117c0>
 8011b64:	00c01504 	movi	r3,84
 8011b68:	18802336 	bltu	r3,r2,8011bf8 <_malloc_r+0x7b0>
 8011b6c:	3804d33a 	srli	r2,r7,12
 8011b70:	11401bc4 	addi	r5,r2,111
 8011b74:	10c01b84 	addi	r3,r2,110
 8011b78:	294b883a 	add	r5,r5,r5
 8011b7c:	003f7b06 	br	801196c <__alt_data_end+0xfc01196c>
 8011b80:	9c000217 	ldw	r16,8(r19)
 8011b84:	00bfff04 	movi	r2,-4
 8011b88:	80c00117 	ldw	r3,4(r16)
 8011b8c:	1886703a 	and	r3,r3,r2
 8011b90:	003f5306 	br	80118e0 <__alt_data_end+0xfc0118e0>
 8011b94:	3083ffcc 	andi	r2,r6,4095
 8011b98:	103f181e 	bne	r2,zero,80117fc <__alt_data_end+0xfc0117fc>
 8011b9c:	99000217 	ldw	r4,8(r19)
 8011ba0:	b545883a 	add	r2,r22,r21
 8011ba4:	10800054 	ori	r2,r2,1
 8011ba8:	20800115 	stw	r2,4(r4)
 8011bac:	003f3e06 	br	80118a8 <__alt_data_end+0xfc0118a8>
 8011bb0:	01003f84 	movi	r4,254
 8011bb4:	02001fc4 	movi	r8,127
 8011bb8:	01c01f84 	movi	r7,126
 8011bbc:	003e4006 	br	80114c0 <__alt_data_end+0xfc0114c0>
 8011bc0:	00820d74 	movhi	r2,2101
 8011bc4:	10a88504 	addi	r2,r2,-24044
 8011bc8:	15000015 	stw	r20,0(r2)
 8011bcc:	003f1106 	br	8011814 <__alt_data_end+0xfc011814>
 8011bd0:	00800044 	movi	r2,1
 8011bd4:	002b883a 	mov	r21,zero
 8011bd8:	003f1f06 	br	8011858 <__alt_data_end+0xfc011858>
 8011bdc:	81400204 	addi	r5,r16,8
 8011be0:	9009883a 	mov	r4,r18
 8011be4:	80108500 	call	8010850 <_free_r>
 8011be8:	008211f4 	movhi	r2,2119
 8011bec:	109f8004 	addi	r2,r2,32256
 8011bf0:	10c00017 	ldw	r3,0(r2)
 8011bf4:	003f2c06 	br	80118a8 <__alt_data_end+0xfc0118a8>
 8011bf8:	00c05504 	movi	r3,340
 8011bfc:	18800536 	bltu	r3,r2,8011c14 <_malloc_r+0x7cc>
 8011c00:	3804d3fa 	srli	r2,r7,15
 8011c04:	11401e04 	addi	r5,r2,120
 8011c08:	10c01dc4 	addi	r3,r2,119
 8011c0c:	294b883a 	add	r5,r5,r5
 8011c10:	003f5606 	br	801196c <__alt_data_end+0xfc01196c>
 8011c14:	00c15504 	movi	r3,1364
 8011c18:	18800536 	bltu	r3,r2,8011c30 <_malloc_r+0x7e8>
 8011c1c:	3804d4ba 	srli	r2,r7,18
 8011c20:	11401f44 	addi	r5,r2,125
 8011c24:	10c01f04 	addi	r3,r2,124
 8011c28:	294b883a 	add	r5,r5,r5
 8011c2c:	003f4f06 	br	801196c <__alt_data_end+0xfc01196c>
 8011c30:	01403f84 	movi	r5,254
 8011c34:	00c01f84 	movi	r3,126
 8011c38:	003f4c06 	br	801196c <__alt_data_end+0xfc01196c>
 8011c3c:	98800117 	ldw	r2,4(r19)
 8011c40:	003fa006 	br	8011ac4 <__alt_data_end+0xfc011ac4>
 8011c44:	8808d0fa 	srli	r4,r17,3
 8011c48:	20800044 	addi	r2,r4,1
 8011c4c:	1085883a 	add	r2,r2,r2
 8011c50:	003e9006 	br	8011694 <__alt_data_end+0xfc011694>

08011c54 <memchr>:
 8011c54:	208000cc 	andi	r2,r4,3
 8011c58:	280f883a 	mov	r7,r5
 8011c5c:	10003426 	beq	r2,zero,8011d30 <memchr+0xdc>
 8011c60:	30bfffc4 	addi	r2,r6,-1
 8011c64:	30001a26 	beq	r6,zero,8011cd0 <memchr+0x7c>
 8011c68:	20c00003 	ldbu	r3,0(r4)
 8011c6c:	29803fcc 	andi	r6,r5,255
 8011c70:	30c0051e 	bne	r6,r3,8011c88 <memchr+0x34>
 8011c74:	00001806 	br	8011cd8 <memchr+0x84>
 8011c78:	10001526 	beq	r2,zero,8011cd0 <memchr+0x7c>
 8011c7c:	20c00003 	ldbu	r3,0(r4)
 8011c80:	10bfffc4 	addi	r2,r2,-1
 8011c84:	30c01426 	beq	r6,r3,8011cd8 <memchr+0x84>
 8011c88:	21000044 	addi	r4,r4,1
 8011c8c:	20c000cc 	andi	r3,r4,3
 8011c90:	183ff91e 	bne	r3,zero,8011c78 <__alt_data_end+0xfc011c78>
 8011c94:	020000c4 	movi	r8,3
 8011c98:	40801136 	bltu	r8,r2,8011ce0 <memchr+0x8c>
 8011c9c:	10000c26 	beq	r2,zero,8011cd0 <memchr+0x7c>
 8011ca0:	20c00003 	ldbu	r3,0(r4)
 8011ca4:	29403fcc 	andi	r5,r5,255
 8011ca8:	28c00b26 	beq	r5,r3,8011cd8 <memchr+0x84>
 8011cac:	20c00044 	addi	r3,r4,1
 8011cb0:	39803fcc 	andi	r6,r7,255
 8011cb4:	2089883a 	add	r4,r4,r2
 8011cb8:	00000306 	br	8011cc8 <memchr+0x74>
 8011cbc:	18c00044 	addi	r3,r3,1
 8011cc0:	197fffc3 	ldbu	r5,-1(r3)
 8011cc4:	31400526 	beq	r6,r5,8011cdc <memchr+0x88>
 8011cc8:	1805883a 	mov	r2,r3
 8011ccc:	20fffb1e 	bne	r4,r3,8011cbc <__alt_data_end+0xfc011cbc>
 8011cd0:	0005883a 	mov	r2,zero
 8011cd4:	f800283a 	ret
 8011cd8:	2005883a 	mov	r2,r4
 8011cdc:	f800283a 	ret
 8011ce0:	28c03fcc 	andi	r3,r5,255
 8011ce4:	1812923a 	slli	r9,r3,8
 8011ce8:	02ffbff4 	movhi	r11,65279
 8011cec:	02a02074 	movhi	r10,32897
 8011cf0:	48d2b03a 	or	r9,r9,r3
 8011cf4:	4806943a 	slli	r3,r9,16
 8011cf8:	5affbfc4 	addi	r11,r11,-257
 8011cfc:	52a02004 	addi	r10,r10,-32640
 8011d00:	48d2b03a 	or	r9,r9,r3
 8011d04:	20c00017 	ldw	r3,0(r4)
 8011d08:	48c6f03a 	xor	r3,r9,r3
 8011d0c:	1acd883a 	add	r6,r3,r11
 8011d10:	00c6303a 	nor	r3,zero,r3
 8011d14:	30c6703a 	and	r3,r6,r3
 8011d18:	1a86703a 	and	r3,r3,r10
 8011d1c:	183fe01e 	bne	r3,zero,8011ca0 <__alt_data_end+0xfc011ca0>
 8011d20:	10bfff04 	addi	r2,r2,-4
 8011d24:	21000104 	addi	r4,r4,4
 8011d28:	40bff636 	bltu	r8,r2,8011d04 <__alt_data_end+0xfc011d04>
 8011d2c:	003fdb06 	br	8011c9c <__alt_data_end+0xfc011c9c>
 8011d30:	3005883a 	mov	r2,r6
 8011d34:	003fd706 	br	8011c94 <__alt_data_end+0xfc011c94>

08011d38 <memcpy>:
 8011d38:	defffd04 	addi	sp,sp,-12
 8011d3c:	dfc00215 	stw	ra,8(sp)
 8011d40:	dc400115 	stw	r17,4(sp)
 8011d44:	dc000015 	stw	r16,0(sp)
 8011d48:	00c003c4 	movi	r3,15
 8011d4c:	2005883a 	mov	r2,r4
 8011d50:	1980452e 	bgeu	r3,r6,8011e68 <memcpy+0x130>
 8011d54:	2906b03a 	or	r3,r5,r4
 8011d58:	18c000cc 	andi	r3,r3,3
 8011d5c:	1800441e 	bne	r3,zero,8011e70 <memcpy+0x138>
 8011d60:	347ffc04 	addi	r17,r6,-16
 8011d64:	8822d13a 	srli	r17,r17,4
 8011d68:	28c00104 	addi	r3,r5,4
 8011d6c:	23400104 	addi	r13,r4,4
 8011d70:	8820913a 	slli	r16,r17,4
 8011d74:	2b000204 	addi	r12,r5,8
 8011d78:	22c00204 	addi	r11,r4,8
 8011d7c:	84000504 	addi	r16,r16,20
 8011d80:	2a800304 	addi	r10,r5,12
 8011d84:	22400304 	addi	r9,r4,12
 8011d88:	2c21883a 	add	r16,r5,r16
 8011d8c:	2811883a 	mov	r8,r5
 8011d90:	200f883a 	mov	r7,r4
 8011d94:	41000017 	ldw	r4,0(r8)
 8011d98:	1fc00017 	ldw	ra,0(r3)
 8011d9c:	63c00017 	ldw	r15,0(r12)
 8011da0:	39000015 	stw	r4,0(r7)
 8011da4:	53800017 	ldw	r14,0(r10)
 8011da8:	6fc00015 	stw	ra,0(r13)
 8011dac:	5bc00015 	stw	r15,0(r11)
 8011db0:	4b800015 	stw	r14,0(r9)
 8011db4:	18c00404 	addi	r3,r3,16
 8011db8:	39c00404 	addi	r7,r7,16
 8011dbc:	42000404 	addi	r8,r8,16
 8011dc0:	6b400404 	addi	r13,r13,16
 8011dc4:	63000404 	addi	r12,r12,16
 8011dc8:	5ac00404 	addi	r11,r11,16
 8011dcc:	52800404 	addi	r10,r10,16
 8011dd0:	4a400404 	addi	r9,r9,16
 8011dd4:	1c3fef1e 	bne	r3,r16,8011d94 <__alt_data_end+0xfc011d94>
 8011dd8:	89c00044 	addi	r7,r17,1
 8011ddc:	380e913a 	slli	r7,r7,4
 8011de0:	310003cc 	andi	r4,r6,15
 8011de4:	02c000c4 	movi	r11,3
 8011de8:	11c7883a 	add	r3,r2,r7
 8011dec:	29cb883a 	add	r5,r5,r7
 8011df0:	5900212e 	bgeu	r11,r4,8011e78 <memcpy+0x140>
 8011df4:	1813883a 	mov	r9,r3
 8011df8:	2811883a 	mov	r8,r5
 8011dfc:	200f883a 	mov	r7,r4
 8011e00:	42800017 	ldw	r10,0(r8)
 8011e04:	4a400104 	addi	r9,r9,4
 8011e08:	39ffff04 	addi	r7,r7,-4
 8011e0c:	4abfff15 	stw	r10,-4(r9)
 8011e10:	42000104 	addi	r8,r8,4
 8011e14:	59fffa36 	bltu	r11,r7,8011e00 <__alt_data_end+0xfc011e00>
 8011e18:	213fff04 	addi	r4,r4,-4
 8011e1c:	2008d0ba 	srli	r4,r4,2
 8011e20:	318000cc 	andi	r6,r6,3
 8011e24:	21000044 	addi	r4,r4,1
 8011e28:	2109883a 	add	r4,r4,r4
 8011e2c:	2109883a 	add	r4,r4,r4
 8011e30:	1907883a 	add	r3,r3,r4
 8011e34:	290b883a 	add	r5,r5,r4
 8011e38:	30000626 	beq	r6,zero,8011e54 <memcpy+0x11c>
 8011e3c:	198d883a 	add	r6,r3,r6
 8011e40:	29c00003 	ldbu	r7,0(r5)
 8011e44:	18c00044 	addi	r3,r3,1
 8011e48:	29400044 	addi	r5,r5,1
 8011e4c:	19ffffc5 	stb	r7,-1(r3)
 8011e50:	19bffb1e 	bne	r3,r6,8011e40 <__alt_data_end+0xfc011e40>
 8011e54:	dfc00217 	ldw	ra,8(sp)
 8011e58:	dc400117 	ldw	r17,4(sp)
 8011e5c:	dc000017 	ldw	r16,0(sp)
 8011e60:	dec00304 	addi	sp,sp,12
 8011e64:	f800283a 	ret
 8011e68:	2007883a 	mov	r3,r4
 8011e6c:	003ff206 	br	8011e38 <__alt_data_end+0xfc011e38>
 8011e70:	2007883a 	mov	r3,r4
 8011e74:	003ff106 	br	8011e3c <__alt_data_end+0xfc011e3c>
 8011e78:	200d883a 	mov	r6,r4
 8011e7c:	003fee06 	br	8011e38 <__alt_data_end+0xfc011e38>

08011e80 <memmove>:
 8011e80:	2005883a 	mov	r2,r4
 8011e84:	29000b2e 	bgeu	r5,r4,8011eb4 <memmove+0x34>
 8011e88:	298f883a 	add	r7,r5,r6
 8011e8c:	21c0092e 	bgeu	r4,r7,8011eb4 <memmove+0x34>
 8011e90:	2187883a 	add	r3,r4,r6
 8011e94:	198bc83a 	sub	r5,r3,r6
 8011e98:	30004826 	beq	r6,zero,8011fbc <memmove+0x13c>
 8011e9c:	39ffffc4 	addi	r7,r7,-1
 8011ea0:	39000003 	ldbu	r4,0(r7)
 8011ea4:	18ffffc4 	addi	r3,r3,-1
 8011ea8:	19000005 	stb	r4,0(r3)
 8011eac:	28fffb1e 	bne	r5,r3,8011e9c <__alt_data_end+0xfc011e9c>
 8011eb0:	f800283a 	ret
 8011eb4:	00c003c4 	movi	r3,15
 8011eb8:	1980412e 	bgeu	r3,r6,8011fc0 <memmove+0x140>
 8011ebc:	2886b03a 	or	r3,r5,r2
 8011ec0:	18c000cc 	andi	r3,r3,3
 8011ec4:	1800401e 	bne	r3,zero,8011fc8 <memmove+0x148>
 8011ec8:	33fffc04 	addi	r15,r6,-16
 8011ecc:	781ed13a 	srli	r15,r15,4
 8011ed0:	28c00104 	addi	r3,r5,4
 8011ed4:	13400104 	addi	r13,r2,4
 8011ed8:	781c913a 	slli	r14,r15,4
 8011edc:	2b000204 	addi	r12,r5,8
 8011ee0:	12c00204 	addi	r11,r2,8
 8011ee4:	73800504 	addi	r14,r14,20
 8011ee8:	2a800304 	addi	r10,r5,12
 8011eec:	12400304 	addi	r9,r2,12
 8011ef0:	2b9d883a 	add	r14,r5,r14
 8011ef4:	2811883a 	mov	r8,r5
 8011ef8:	100f883a 	mov	r7,r2
 8011efc:	41000017 	ldw	r4,0(r8)
 8011f00:	39c00404 	addi	r7,r7,16
 8011f04:	18c00404 	addi	r3,r3,16
 8011f08:	393ffc15 	stw	r4,-16(r7)
 8011f0c:	193ffc17 	ldw	r4,-16(r3)
 8011f10:	6b400404 	addi	r13,r13,16
 8011f14:	5ac00404 	addi	r11,r11,16
 8011f18:	693ffc15 	stw	r4,-16(r13)
 8011f1c:	61000017 	ldw	r4,0(r12)
 8011f20:	4a400404 	addi	r9,r9,16
 8011f24:	42000404 	addi	r8,r8,16
 8011f28:	593ffc15 	stw	r4,-16(r11)
 8011f2c:	51000017 	ldw	r4,0(r10)
 8011f30:	63000404 	addi	r12,r12,16
 8011f34:	52800404 	addi	r10,r10,16
 8011f38:	493ffc15 	stw	r4,-16(r9)
 8011f3c:	1bbfef1e 	bne	r3,r14,8011efc <__alt_data_end+0xfc011efc>
 8011f40:	79000044 	addi	r4,r15,1
 8011f44:	2008913a 	slli	r4,r4,4
 8011f48:	328003cc 	andi	r10,r6,15
 8011f4c:	02c000c4 	movi	r11,3
 8011f50:	1107883a 	add	r3,r2,r4
 8011f54:	290b883a 	add	r5,r5,r4
 8011f58:	5a801e2e 	bgeu	r11,r10,8011fd4 <memmove+0x154>
 8011f5c:	1813883a 	mov	r9,r3
 8011f60:	2811883a 	mov	r8,r5
 8011f64:	500f883a 	mov	r7,r10
 8011f68:	41000017 	ldw	r4,0(r8)
 8011f6c:	4a400104 	addi	r9,r9,4
 8011f70:	39ffff04 	addi	r7,r7,-4
 8011f74:	493fff15 	stw	r4,-4(r9)
 8011f78:	42000104 	addi	r8,r8,4
 8011f7c:	59fffa36 	bltu	r11,r7,8011f68 <__alt_data_end+0xfc011f68>
 8011f80:	513fff04 	addi	r4,r10,-4
 8011f84:	2008d0ba 	srli	r4,r4,2
 8011f88:	318000cc 	andi	r6,r6,3
 8011f8c:	21000044 	addi	r4,r4,1
 8011f90:	2109883a 	add	r4,r4,r4
 8011f94:	2109883a 	add	r4,r4,r4
 8011f98:	1907883a 	add	r3,r3,r4
 8011f9c:	290b883a 	add	r5,r5,r4
 8011fa0:	30000b26 	beq	r6,zero,8011fd0 <memmove+0x150>
 8011fa4:	198d883a 	add	r6,r3,r6
 8011fa8:	29c00003 	ldbu	r7,0(r5)
 8011fac:	18c00044 	addi	r3,r3,1
 8011fb0:	29400044 	addi	r5,r5,1
 8011fb4:	19ffffc5 	stb	r7,-1(r3)
 8011fb8:	19bffb1e 	bne	r3,r6,8011fa8 <__alt_data_end+0xfc011fa8>
 8011fbc:	f800283a 	ret
 8011fc0:	1007883a 	mov	r3,r2
 8011fc4:	003ff606 	br	8011fa0 <__alt_data_end+0xfc011fa0>
 8011fc8:	1007883a 	mov	r3,r2
 8011fcc:	003ff506 	br	8011fa4 <__alt_data_end+0xfc011fa4>
 8011fd0:	f800283a 	ret
 8011fd4:	500d883a 	mov	r6,r10
 8011fd8:	003ff106 	br	8011fa0 <__alt_data_end+0xfc011fa0>

08011fdc <_Balloc>:
 8011fdc:	20801317 	ldw	r2,76(r4)
 8011fe0:	defffc04 	addi	sp,sp,-16
 8011fe4:	dc400115 	stw	r17,4(sp)
 8011fe8:	dc000015 	stw	r16,0(sp)
 8011fec:	dfc00315 	stw	ra,12(sp)
 8011ff0:	dc800215 	stw	r18,8(sp)
 8011ff4:	2023883a 	mov	r17,r4
 8011ff8:	2821883a 	mov	r16,r5
 8011ffc:	10000f26 	beq	r2,zero,801203c <_Balloc+0x60>
 8012000:	8407883a 	add	r3,r16,r16
 8012004:	18c7883a 	add	r3,r3,r3
 8012008:	10c7883a 	add	r3,r2,r3
 801200c:	18800017 	ldw	r2,0(r3)
 8012010:	10001126 	beq	r2,zero,8012058 <_Balloc+0x7c>
 8012014:	11000017 	ldw	r4,0(r2)
 8012018:	19000015 	stw	r4,0(r3)
 801201c:	10000415 	stw	zero,16(r2)
 8012020:	10000315 	stw	zero,12(r2)
 8012024:	dfc00317 	ldw	ra,12(sp)
 8012028:	dc800217 	ldw	r18,8(sp)
 801202c:	dc400117 	ldw	r17,4(sp)
 8012030:	dc000017 	ldw	r16,0(sp)
 8012034:	dec00404 	addi	sp,sp,16
 8012038:	f800283a 	ret
 801203c:	01800844 	movi	r6,33
 8012040:	01400104 	movi	r5,4
 8012044:	80150100 	call	8015010 <_calloc_r>
 8012048:	88801315 	stw	r2,76(r17)
 801204c:	103fec1e 	bne	r2,zero,8012000 <__alt_data_end+0xfc012000>
 8012050:	0005883a 	mov	r2,zero
 8012054:	003ff306 	br	8012024 <__alt_data_end+0xfc012024>
 8012058:	01400044 	movi	r5,1
 801205c:	2c24983a 	sll	r18,r5,r16
 8012060:	8809883a 	mov	r4,r17
 8012064:	91800144 	addi	r6,r18,5
 8012068:	318d883a 	add	r6,r6,r6
 801206c:	318d883a 	add	r6,r6,r6
 8012070:	80150100 	call	8015010 <_calloc_r>
 8012074:	103ff626 	beq	r2,zero,8012050 <__alt_data_end+0xfc012050>
 8012078:	14000115 	stw	r16,4(r2)
 801207c:	14800215 	stw	r18,8(r2)
 8012080:	003fe606 	br	801201c <__alt_data_end+0xfc01201c>

08012084 <_Bfree>:
 8012084:	28000826 	beq	r5,zero,80120a8 <_Bfree+0x24>
 8012088:	28c00117 	ldw	r3,4(r5)
 801208c:	20801317 	ldw	r2,76(r4)
 8012090:	18c7883a 	add	r3,r3,r3
 8012094:	18c7883a 	add	r3,r3,r3
 8012098:	10c5883a 	add	r2,r2,r3
 801209c:	10c00017 	ldw	r3,0(r2)
 80120a0:	28c00015 	stw	r3,0(r5)
 80120a4:	11400015 	stw	r5,0(r2)
 80120a8:	f800283a 	ret

080120ac <__multadd>:
 80120ac:	defff704 	addi	sp,sp,-36
 80120b0:	dc800215 	stw	r18,8(sp)
 80120b4:	2c800417 	ldw	r18,16(r5)
 80120b8:	dd800615 	stw	r22,24(sp)
 80120bc:	dd400515 	stw	r21,20(sp)
 80120c0:	dd000415 	stw	r20,16(sp)
 80120c4:	dcc00315 	stw	r19,12(sp)
 80120c8:	dc400115 	stw	r17,4(sp)
 80120cc:	dc000015 	stw	r16,0(sp)
 80120d0:	dfc00815 	stw	ra,32(sp)
 80120d4:	ddc00715 	stw	r23,28(sp)
 80120d8:	2827883a 	mov	r19,r5
 80120dc:	2029883a 	mov	r20,r4
 80120e0:	3023883a 	mov	r17,r6
 80120e4:	3821883a 	mov	r16,r7
 80120e8:	2d400504 	addi	r21,r5,20
 80120ec:	002d883a 	mov	r22,zero
 80120f0:	adc00017 	ldw	r23,0(r21)
 80120f4:	880b883a 	mov	r5,r17
 80120f8:	ad400104 	addi	r21,r21,4
 80120fc:	b93fffcc 	andi	r4,r23,65535
 8012100:	8007f540 	call	8007f54 <__mulsi3>
 8012104:	b808d43a 	srli	r4,r23,16
 8012108:	880b883a 	mov	r5,r17
 801210c:	1421883a 	add	r16,r2,r16
 8012110:	8007f540 	call	8007f54 <__mulsi3>
 8012114:	800ed43a 	srli	r7,r16,16
 8012118:	80ffffcc 	andi	r3,r16,65535
 801211c:	b5800044 	addi	r22,r22,1
 8012120:	11c5883a 	add	r2,r2,r7
 8012124:	100e943a 	slli	r7,r2,16
 8012128:	1020d43a 	srli	r16,r2,16
 801212c:	38c7883a 	add	r3,r7,r3
 8012130:	a8ffff15 	stw	r3,-4(r21)
 8012134:	b4bfee16 	blt	r22,r18,80120f0 <__alt_data_end+0xfc0120f0>
 8012138:	80000926 	beq	r16,zero,8012160 <__multadd+0xb4>
 801213c:	98800217 	ldw	r2,8(r19)
 8012140:	9080130e 	bge	r18,r2,8012190 <__multadd+0xe4>
 8012144:	90800144 	addi	r2,r18,5
 8012148:	1085883a 	add	r2,r2,r2
 801214c:	1085883a 	add	r2,r2,r2
 8012150:	9885883a 	add	r2,r19,r2
 8012154:	14000015 	stw	r16,0(r2)
 8012158:	94800044 	addi	r18,r18,1
 801215c:	9c800415 	stw	r18,16(r19)
 8012160:	9805883a 	mov	r2,r19
 8012164:	dfc00817 	ldw	ra,32(sp)
 8012168:	ddc00717 	ldw	r23,28(sp)
 801216c:	dd800617 	ldw	r22,24(sp)
 8012170:	dd400517 	ldw	r21,20(sp)
 8012174:	dd000417 	ldw	r20,16(sp)
 8012178:	dcc00317 	ldw	r19,12(sp)
 801217c:	dc800217 	ldw	r18,8(sp)
 8012180:	dc400117 	ldw	r17,4(sp)
 8012184:	dc000017 	ldw	r16,0(sp)
 8012188:	dec00904 	addi	sp,sp,36
 801218c:	f800283a 	ret
 8012190:	99400117 	ldw	r5,4(r19)
 8012194:	a009883a 	mov	r4,r20
 8012198:	29400044 	addi	r5,r5,1
 801219c:	8011fdc0 	call	8011fdc <_Balloc>
 80121a0:	99800417 	ldw	r6,16(r19)
 80121a4:	99400304 	addi	r5,r19,12
 80121a8:	11000304 	addi	r4,r2,12
 80121ac:	31800084 	addi	r6,r6,2
 80121b0:	318d883a 	add	r6,r6,r6
 80121b4:	318d883a 	add	r6,r6,r6
 80121b8:	1023883a 	mov	r17,r2
 80121bc:	8011d380 	call	8011d38 <memcpy>
 80121c0:	98000a26 	beq	r19,zero,80121ec <__multadd+0x140>
 80121c4:	98c00117 	ldw	r3,4(r19)
 80121c8:	a0801317 	ldw	r2,76(r20)
 80121cc:	18c7883a 	add	r3,r3,r3
 80121d0:	18c7883a 	add	r3,r3,r3
 80121d4:	10c5883a 	add	r2,r2,r3
 80121d8:	10c00017 	ldw	r3,0(r2)
 80121dc:	98c00015 	stw	r3,0(r19)
 80121e0:	14c00015 	stw	r19,0(r2)
 80121e4:	8827883a 	mov	r19,r17
 80121e8:	003fd606 	br	8012144 <__alt_data_end+0xfc012144>
 80121ec:	8827883a 	mov	r19,r17
 80121f0:	003fd406 	br	8012144 <__alt_data_end+0xfc012144>

080121f4 <__s2b>:
 80121f4:	defff904 	addi	sp,sp,-28
 80121f8:	dc400115 	stw	r17,4(sp)
 80121fc:	dc000015 	stw	r16,0(sp)
 8012200:	2023883a 	mov	r17,r4
 8012204:	2821883a 	mov	r16,r5
 8012208:	39000204 	addi	r4,r7,8
 801220c:	01400244 	movi	r5,9
 8012210:	dcc00315 	stw	r19,12(sp)
 8012214:	dc800215 	stw	r18,8(sp)
 8012218:	dfc00615 	stw	ra,24(sp)
 801221c:	dd400515 	stw	r21,20(sp)
 8012220:	dd000415 	stw	r20,16(sp)
 8012224:	3825883a 	mov	r18,r7
 8012228:	3027883a 	mov	r19,r6
 801222c:	8007da00 	call	8007da0 <__divsi3>
 8012230:	00c00044 	movi	r3,1
 8012234:	000b883a 	mov	r5,zero
 8012238:	1880030e 	bge	r3,r2,8012248 <__s2b+0x54>
 801223c:	18c7883a 	add	r3,r3,r3
 8012240:	29400044 	addi	r5,r5,1
 8012244:	18bffd16 	blt	r3,r2,801223c <__alt_data_end+0xfc01223c>
 8012248:	8809883a 	mov	r4,r17
 801224c:	8011fdc0 	call	8011fdc <_Balloc>
 8012250:	d8c00717 	ldw	r3,28(sp)
 8012254:	10c00515 	stw	r3,20(r2)
 8012258:	00c00044 	movi	r3,1
 801225c:	10c00415 	stw	r3,16(r2)
 8012260:	00c00244 	movi	r3,9
 8012264:	1cc0210e 	bge	r3,r19,80122ec <__s2b+0xf8>
 8012268:	80eb883a 	add	r21,r16,r3
 801226c:	a829883a 	mov	r20,r21
 8012270:	84e1883a 	add	r16,r16,r19
 8012274:	a1c00007 	ldb	r7,0(r20)
 8012278:	01800284 	movi	r6,10
 801227c:	a5000044 	addi	r20,r20,1
 8012280:	100b883a 	mov	r5,r2
 8012284:	39fff404 	addi	r7,r7,-48
 8012288:	8809883a 	mov	r4,r17
 801228c:	80120ac0 	call	80120ac <__multadd>
 8012290:	a43ff81e 	bne	r20,r16,8012274 <__alt_data_end+0xfc012274>
 8012294:	ace1883a 	add	r16,r21,r19
 8012298:	843ffe04 	addi	r16,r16,-8
 801229c:	9c800a0e 	bge	r19,r18,80122c8 <__s2b+0xd4>
 80122a0:	94e5c83a 	sub	r18,r18,r19
 80122a4:	84a5883a 	add	r18,r16,r18
 80122a8:	81c00007 	ldb	r7,0(r16)
 80122ac:	01800284 	movi	r6,10
 80122b0:	84000044 	addi	r16,r16,1
 80122b4:	100b883a 	mov	r5,r2
 80122b8:	39fff404 	addi	r7,r7,-48
 80122bc:	8809883a 	mov	r4,r17
 80122c0:	80120ac0 	call	80120ac <__multadd>
 80122c4:	84bff81e 	bne	r16,r18,80122a8 <__alt_data_end+0xfc0122a8>
 80122c8:	dfc00617 	ldw	ra,24(sp)
 80122cc:	dd400517 	ldw	r21,20(sp)
 80122d0:	dd000417 	ldw	r20,16(sp)
 80122d4:	dcc00317 	ldw	r19,12(sp)
 80122d8:	dc800217 	ldw	r18,8(sp)
 80122dc:	dc400117 	ldw	r17,4(sp)
 80122e0:	dc000017 	ldw	r16,0(sp)
 80122e4:	dec00704 	addi	sp,sp,28
 80122e8:	f800283a 	ret
 80122ec:	84000284 	addi	r16,r16,10
 80122f0:	1827883a 	mov	r19,r3
 80122f4:	003fe906 	br	801229c <__alt_data_end+0xfc01229c>

080122f8 <__hi0bits>:
 80122f8:	20bfffec 	andhi	r2,r4,65535
 80122fc:	1000141e 	bne	r2,zero,8012350 <__hi0bits+0x58>
 8012300:	2008943a 	slli	r4,r4,16
 8012304:	00800404 	movi	r2,16
 8012308:	20ffc02c 	andhi	r3,r4,65280
 801230c:	1800021e 	bne	r3,zero,8012318 <__hi0bits+0x20>
 8012310:	2008923a 	slli	r4,r4,8
 8012314:	10800204 	addi	r2,r2,8
 8012318:	20fc002c 	andhi	r3,r4,61440
 801231c:	1800021e 	bne	r3,zero,8012328 <__hi0bits+0x30>
 8012320:	2008913a 	slli	r4,r4,4
 8012324:	10800104 	addi	r2,r2,4
 8012328:	20f0002c 	andhi	r3,r4,49152
 801232c:	1800031e 	bne	r3,zero,801233c <__hi0bits+0x44>
 8012330:	2109883a 	add	r4,r4,r4
 8012334:	10800084 	addi	r2,r2,2
 8012338:	2109883a 	add	r4,r4,r4
 801233c:	20000316 	blt	r4,zero,801234c <__hi0bits+0x54>
 8012340:	2110002c 	andhi	r4,r4,16384
 8012344:	2000041e 	bne	r4,zero,8012358 <__hi0bits+0x60>
 8012348:	00800804 	movi	r2,32
 801234c:	f800283a 	ret
 8012350:	0005883a 	mov	r2,zero
 8012354:	003fec06 	br	8012308 <__alt_data_end+0xfc012308>
 8012358:	10800044 	addi	r2,r2,1
 801235c:	f800283a 	ret

08012360 <__lo0bits>:
 8012360:	20c00017 	ldw	r3,0(r4)
 8012364:	188001cc 	andi	r2,r3,7
 8012368:	10000826 	beq	r2,zero,801238c <__lo0bits+0x2c>
 801236c:	1880004c 	andi	r2,r3,1
 8012370:	1000211e 	bne	r2,zero,80123f8 <__lo0bits+0x98>
 8012374:	1880008c 	andi	r2,r3,2
 8012378:	1000211e 	bne	r2,zero,8012400 <__lo0bits+0xa0>
 801237c:	1806d0ba 	srli	r3,r3,2
 8012380:	00800084 	movi	r2,2
 8012384:	20c00015 	stw	r3,0(r4)
 8012388:	f800283a 	ret
 801238c:	18bfffcc 	andi	r2,r3,65535
 8012390:	10001326 	beq	r2,zero,80123e0 <__lo0bits+0x80>
 8012394:	0005883a 	mov	r2,zero
 8012398:	19403fcc 	andi	r5,r3,255
 801239c:	2800021e 	bne	r5,zero,80123a8 <__lo0bits+0x48>
 80123a0:	1806d23a 	srli	r3,r3,8
 80123a4:	10800204 	addi	r2,r2,8
 80123a8:	194003cc 	andi	r5,r3,15
 80123ac:	2800021e 	bne	r5,zero,80123b8 <__lo0bits+0x58>
 80123b0:	1806d13a 	srli	r3,r3,4
 80123b4:	10800104 	addi	r2,r2,4
 80123b8:	194000cc 	andi	r5,r3,3
 80123bc:	2800021e 	bne	r5,zero,80123c8 <__lo0bits+0x68>
 80123c0:	1806d0ba 	srli	r3,r3,2
 80123c4:	10800084 	addi	r2,r2,2
 80123c8:	1940004c 	andi	r5,r3,1
 80123cc:	2800081e 	bne	r5,zero,80123f0 <__lo0bits+0x90>
 80123d0:	1806d07a 	srli	r3,r3,1
 80123d4:	1800051e 	bne	r3,zero,80123ec <__lo0bits+0x8c>
 80123d8:	00800804 	movi	r2,32
 80123dc:	f800283a 	ret
 80123e0:	1806d43a 	srli	r3,r3,16
 80123e4:	00800404 	movi	r2,16
 80123e8:	003feb06 	br	8012398 <__alt_data_end+0xfc012398>
 80123ec:	10800044 	addi	r2,r2,1
 80123f0:	20c00015 	stw	r3,0(r4)
 80123f4:	f800283a 	ret
 80123f8:	0005883a 	mov	r2,zero
 80123fc:	f800283a 	ret
 8012400:	1806d07a 	srli	r3,r3,1
 8012404:	00800044 	movi	r2,1
 8012408:	20c00015 	stw	r3,0(r4)
 801240c:	f800283a 	ret

08012410 <__i2b>:
 8012410:	defffd04 	addi	sp,sp,-12
 8012414:	dc000015 	stw	r16,0(sp)
 8012418:	04000044 	movi	r16,1
 801241c:	dc400115 	stw	r17,4(sp)
 8012420:	2823883a 	mov	r17,r5
 8012424:	800b883a 	mov	r5,r16
 8012428:	dfc00215 	stw	ra,8(sp)
 801242c:	8011fdc0 	call	8011fdc <_Balloc>
 8012430:	14400515 	stw	r17,20(r2)
 8012434:	14000415 	stw	r16,16(r2)
 8012438:	dfc00217 	ldw	ra,8(sp)
 801243c:	dc400117 	ldw	r17,4(sp)
 8012440:	dc000017 	ldw	r16,0(sp)
 8012444:	dec00304 	addi	sp,sp,12
 8012448:	f800283a 	ret

0801244c <__multiply>:
 801244c:	deffef04 	addi	sp,sp,-68
 8012450:	dc400815 	stw	r17,32(sp)
 8012454:	dc000715 	stw	r16,28(sp)
 8012458:	34400417 	ldw	r17,16(r6)
 801245c:	2c000417 	ldw	r16,16(r5)
 8012460:	dd800d15 	stw	r22,52(sp)
 8012464:	dc800915 	stw	r18,36(sp)
 8012468:	dfc01015 	stw	ra,64(sp)
 801246c:	df000f15 	stw	fp,60(sp)
 8012470:	ddc00e15 	stw	r23,56(sp)
 8012474:	dd400c15 	stw	r21,48(sp)
 8012478:	dd000b15 	stw	r20,44(sp)
 801247c:	dcc00a15 	stw	r19,40(sp)
 8012480:	2825883a 	mov	r18,r5
 8012484:	302d883a 	mov	r22,r6
 8012488:	8440050e 	bge	r16,r17,80124a0 <__multiply+0x54>
 801248c:	8007883a 	mov	r3,r16
 8012490:	3025883a 	mov	r18,r6
 8012494:	8821883a 	mov	r16,r17
 8012498:	282d883a 	mov	r22,r5
 801249c:	1823883a 	mov	r17,r3
 80124a0:	90800217 	ldw	r2,8(r18)
 80124a4:	8447883a 	add	r3,r16,r17
 80124a8:	d8c00215 	stw	r3,8(sp)
 80124ac:	91400117 	ldw	r5,4(r18)
 80124b0:	10c0010e 	bge	r2,r3,80124b8 <__multiply+0x6c>
 80124b4:	29400044 	addi	r5,r5,1
 80124b8:	8011fdc0 	call	8011fdc <_Balloc>
 80124bc:	d8c00217 	ldw	r3,8(sp)
 80124c0:	d8800615 	stw	r2,24(sp)
 80124c4:	18eb883a 	add	r21,r3,r3
 80124c8:	ad6b883a 	add	r21,r21,r21
 80124cc:	10c00504 	addi	r3,r2,20
 80124d0:	1d6b883a 	add	r21,r3,r21
 80124d4:	d8c00115 	stw	r3,4(sp)
 80124d8:	dd400315 	stw	r21,12(sp)
 80124dc:	1805883a 	mov	r2,r3
 80124e0:	1d40042e 	bgeu	r3,r21,80124f4 <__multiply+0xa8>
 80124e4:	d8c00317 	ldw	r3,12(sp)
 80124e8:	10000015 	stw	zero,0(r2)
 80124ec:	10800104 	addi	r2,r2,4
 80124f0:	10fffc36 	bltu	r2,r3,80124e4 <__alt_data_end+0xfc0124e4>
 80124f4:	8c63883a 	add	r17,r17,r17
 80124f8:	b5800504 	addi	r22,r22,20
 80124fc:	8c63883a 	add	r17,r17,r17
 8012500:	94800504 	addi	r18,r18,20
 8012504:	8421883a 	add	r16,r16,r16
 8012508:	b463883a 	add	r17,r22,r17
 801250c:	8421883a 	add	r16,r16,r16
 8012510:	dd800015 	stw	r22,0(sp)
 8012514:	dc800415 	stw	r18,16(sp)
 8012518:	dc400515 	stw	r17,20(sp)
 801251c:	9429883a 	add	r20,r18,r16
 8012520:	b4404f2e 	bgeu	r22,r17,8012660 <__multiply+0x214>
 8012524:	d8c00017 	ldw	r3,0(sp)
 8012528:	1c800017 	ldw	r18,0(r3)
 801252c:	947fffcc 	andi	r17,r18,65535
 8012530:	88001e26 	beq	r17,zero,80125ac <__multiply+0x160>
 8012534:	dd800117 	ldw	r22,4(sp)
 8012538:	dd400417 	ldw	r21,16(sp)
 801253c:	0027883a 	mov	r19,zero
 8012540:	ac800017 	ldw	r18,0(r21)
 8012544:	b4000017 	ldw	r16,0(r22)
 8012548:	880b883a 	mov	r5,r17
 801254c:	913fffcc 	andi	r4,r18,65535
 8012550:	8007f540 	call	8007f54 <__mulsi3>
 8012554:	9008d43a 	srli	r4,r18,16
 8012558:	84bfffcc 	andi	r18,r16,65535
 801255c:	1485883a 	add	r2,r2,r18
 8012560:	14e5883a 	add	r18,r2,r19
 8012564:	8020d43a 	srli	r16,r16,16
 8012568:	9026d43a 	srli	r19,r18,16
 801256c:	880b883a 	mov	r5,r17
 8012570:	8007f540 	call	8007f54 <__mulsi3>
 8012574:	1405883a 	add	r2,r2,r16
 8012578:	14e1883a 	add	r16,r2,r19
 801257c:	90ffffcc 	andi	r3,r18,65535
 8012580:	8024943a 	slli	r18,r16,16
 8012584:	ad400104 	addi	r21,r21,4
 8012588:	b005883a 	mov	r2,r22
 801258c:	90c6b03a 	or	r3,r18,r3
 8012590:	b0c00015 	stw	r3,0(r22)
 8012594:	8026d43a 	srli	r19,r16,16
 8012598:	b5800104 	addi	r22,r22,4
 801259c:	ad3fe836 	bltu	r21,r20,8012540 <__alt_data_end+0xfc012540>
 80125a0:	d8c00017 	ldw	r3,0(sp)
 80125a4:	14c00115 	stw	r19,4(r2)
 80125a8:	1c800017 	ldw	r18,0(r3)
 80125ac:	9024d43a 	srli	r18,r18,16
 80125b0:	90002226 	beq	r18,zero,801263c <__multiply+0x1f0>
 80125b4:	d8c00117 	ldw	r3,4(sp)
 80125b8:	dd800417 	ldw	r22,16(sp)
 80125bc:	002f883a 	mov	r23,zero
 80125c0:	1f000017 	ldw	fp,0(r3)
 80125c4:	1823883a 	mov	r17,r3
 80125c8:	182b883a 	mov	r21,r3
 80125cc:	e021883a 	mov	r16,fp
 80125d0:	00000106 	br	80125d8 <__multiply+0x18c>
 80125d4:	982b883a 	mov	r21,r19
 80125d8:	b100000b 	ldhu	r4,0(r22)
 80125dc:	8020d43a 	srli	r16,r16,16
 80125e0:	900b883a 	mov	r5,r18
 80125e4:	8007f540 	call	8007f54 <__mulsi3>
 80125e8:	1405883a 	add	r2,r2,r16
 80125ec:	15ef883a 	add	r23,r2,r23
 80125f0:	b804943a 	slli	r2,r23,16
 80125f4:	e0ffffcc 	andi	r3,fp,65535
 80125f8:	8c400104 	addi	r17,r17,4
 80125fc:	10c6b03a 	or	r3,r2,r3
 8012600:	88ffff15 	stw	r3,-4(r17)
 8012604:	b5800104 	addi	r22,r22,4
 8012608:	b13fff17 	ldw	r4,-4(r22)
 801260c:	acc00104 	addi	r19,r21,4
 8012610:	900b883a 	mov	r5,r18
 8012614:	2008d43a 	srli	r4,r4,16
 8012618:	9c000017 	ldw	r16,0(r19)
 801261c:	8007f540 	call	8007f54 <__mulsi3>
 8012620:	b806d43a 	srli	r3,r23,16
 8012624:	813fffcc 	andi	r4,r16,65535
 8012628:	1105883a 	add	r2,r2,r4
 801262c:	10f9883a 	add	fp,r2,r3
 8012630:	e02ed43a 	srli	r23,fp,16
 8012634:	b53fe736 	bltu	r22,r20,80125d4 <__alt_data_end+0xfc0125d4>
 8012638:	af000115 	stw	fp,4(r21)
 801263c:	d8c00017 	ldw	r3,0(sp)
 8012640:	d9000517 	ldw	r4,20(sp)
 8012644:	18c00104 	addi	r3,r3,4
 8012648:	d8c00015 	stw	r3,0(sp)
 801264c:	d8c00117 	ldw	r3,4(sp)
 8012650:	18c00104 	addi	r3,r3,4
 8012654:	d8c00115 	stw	r3,4(sp)
 8012658:	d8c00017 	ldw	r3,0(sp)
 801265c:	193fb136 	bltu	r3,r4,8012524 <__alt_data_end+0xfc012524>
 8012660:	d8c00217 	ldw	r3,8(sp)
 8012664:	00c00c0e 	bge	zero,r3,8012698 <__multiply+0x24c>
 8012668:	d8c00317 	ldw	r3,12(sp)
 801266c:	18bfff17 	ldw	r2,-4(r3)
 8012670:	1d7fff04 	addi	r21,r3,-4
 8012674:	10000326 	beq	r2,zero,8012684 <__multiply+0x238>
 8012678:	00000706 	br	8012698 <__multiply+0x24c>
 801267c:	a8800017 	ldw	r2,0(r21)
 8012680:	1000051e 	bne	r2,zero,8012698 <__multiply+0x24c>
 8012684:	d8c00217 	ldw	r3,8(sp)
 8012688:	ad7fff04 	addi	r21,r21,-4
 801268c:	18ffffc4 	addi	r3,r3,-1
 8012690:	d8c00215 	stw	r3,8(sp)
 8012694:	183ff91e 	bne	r3,zero,801267c <__alt_data_end+0xfc01267c>
 8012698:	d8c00617 	ldw	r3,24(sp)
 801269c:	d9000217 	ldw	r4,8(sp)
 80126a0:	1805883a 	mov	r2,r3
 80126a4:	19000415 	stw	r4,16(r3)
 80126a8:	dfc01017 	ldw	ra,64(sp)
 80126ac:	df000f17 	ldw	fp,60(sp)
 80126b0:	ddc00e17 	ldw	r23,56(sp)
 80126b4:	dd800d17 	ldw	r22,52(sp)
 80126b8:	dd400c17 	ldw	r21,48(sp)
 80126bc:	dd000b17 	ldw	r20,44(sp)
 80126c0:	dcc00a17 	ldw	r19,40(sp)
 80126c4:	dc800917 	ldw	r18,36(sp)
 80126c8:	dc400817 	ldw	r17,32(sp)
 80126cc:	dc000717 	ldw	r16,28(sp)
 80126d0:	dec01104 	addi	sp,sp,68
 80126d4:	f800283a 	ret

080126d8 <__pow5mult>:
 80126d8:	defffa04 	addi	sp,sp,-24
 80126dc:	dcc00315 	stw	r19,12(sp)
 80126e0:	dc000015 	stw	r16,0(sp)
 80126e4:	dfc00515 	stw	ra,20(sp)
 80126e8:	dd000415 	stw	r20,16(sp)
 80126ec:	dc800215 	stw	r18,8(sp)
 80126f0:	dc400115 	stw	r17,4(sp)
 80126f4:	308000cc 	andi	r2,r6,3
 80126f8:	3021883a 	mov	r16,r6
 80126fc:	2027883a 	mov	r19,r4
 8012700:	10002f1e 	bne	r2,zero,80127c0 <__pow5mult+0xe8>
 8012704:	2825883a 	mov	r18,r5
 8012708:	8021d0ba 	srai	r16,r16,2
 801270c:	80001a26 	beq	r16,zero,8012778 <__pow5mult+0xa0>
 8012710:	9c401217 	ldw	r17,72(r19)
 8012714:	8800061e 	bne	r17,zero,8012730 <__pow5mult+0x58>
 8012718:	00003406 	br	80127ec <__pow5mult+0x114>
 801271c:	8021d07a 	srai	r16,r16,1
 8012720:	80001526 	beq	r16,zero,8012778 <__pow5mult+0xa0>
 8012724:	88800017 	ldw	r2,0(r17)
 8012728:	10001c26 	beq	r2,zero,801279c <__pow5mult+0xc4>
 801272c:	1023883a 	mov	r17,r2
 8012730:	8080004c 	andi	r2,r16,1
 8012734:	103ff926 	beq	r2,zero,801271c <__alt_data_end+0xfc01271c>
 8012738:	880d883a 	mov	r6,r17
 801273c:	900b883a 	mov	r5,r18
 8012740:	9809883a 	mov	r4,r19
 8012744:	801244c0 	call	801244c <__multiply>
 8012748:	90001b26 	beq	r18,zero,80127b8 <__pow5mult+0xe0>
 801274c:	91000117 	ldw	r4,4(r18)
 8012750:	98c01317 	ldw	r3,76(r19)
 8012754:	8021d07a 	srai	r16,r16,1
 8012758:	2109883a 	add	r4,r4,r4
 801275c:	2109883a 	add	r4,r4,r4
 8012760:	1907883a 	add	r3,r3,r4
 8012764:	19000017 	ldw	r4,0(r3)
 8012768:	91000015 	stw	r4,0(r18)
 801276c:	1c800015 	stw	r18,0(r3)
 8012770:	1025883a 	mov	r18,r2
 8012774:	803feb1e 	bne	r16,zero,8012724 <__alt_data_end+0xfc012724>
 8012778:	9005883a 	mov	r2,r18
 801277c:	dfc00517 	ldw	ra,20(sp)
 8012780:	dd000417 	ldw	r20,16(sp)
 8012784:	dcc00317 	ldw	r19,12(sp)
 8012788:	dc800217 	ldw	r18,8(sp)
 801278c:	dc400117 	ldw	r17,4(sp)
 8012790:	dc000017 	ldw	r16,0(sp)
 8012794:	dec00604 	addi	sp,sp,24
 8012798:	f800283a 	ret
 801279c:	880d883a 	mov	r6,r17
 80127a0:	880b883a 	mov	r5,r17
 80127a4:	9809883a 	mov	r4,r19
 80127a8:	801244c0 	call	801244c <__multiply>
 80127ac:	88800015 	stw	r2,0(r17)
 80127b0:	10000015 	stw	zero,0(r2)
 80127b4:	003fdd06 	br	801272c <__alt_data_end+0xfc01272c>
 80127b8:	1025883a 	mov	r18,r2
 80127bc:	003fd706 	br	801271c <__alt_data_end+0xfc01271c>
 80127c0:	10bfffc4 	addi	r2,r2,-1
 80127c4:	1085883a 	add	r2,r2,r2
 80127c8:	00c20d74 	movhi	r3,2101
 80127cc:	18e16504 	addi	r3,r3,-31340
 80127d0:	1085883a 	add	r2,r2,r2
 80127d4:	1885883a 	add	r2,r3,r2
 80127d8:	11800017 	ldw	r6,0(r2)
 80127dc:	000f883a 	mov	r7,zero
 80127e0:	80120ac0 	call	80120ac <__multadd>
 80127e4:	1025883a 	mov	r18,r2
 80127e8:	003fc706 	br	8012708 <__alt_data_end+0xfc012708>
 80127ec:	05000044 	movi	r20,1
 80127f0:	a00b883a 	mov	r5,r20
 80127f4:	9809883a 	mov	r4,r19
 80127f8:	8011fdc0 	call	8011fdc <_Balloc>
 80127fc:	1023883a 	mov	r17,r2
 8012800:	00809c44 	movi	r2,625
 8012804:	88800515 	stw	r2,20(r17)
 8012808:	8d000415 	stw	r20,16(r17)
 801280c:	9c401215 	stw	r17,72(r19)
 8012810:	88000015 	stw	zero,0(r17)
 8012814:	003fc606 	br	8012730 <__alt_data_end+0xfc012730>

08012818 <__lshift>:
 8012818:	defff904 	addi	sp,sp,-28
 801281c:	dd400515 	stw	r21,20(sp)
 8012820:	dcc00315 	stw	r19,12(sp)
 8012824:	302bd17a 	srai	r21,r6,5
 8012828:	2cc00417 	ldw	r19,16(r5)
 801282c:	28800217 	ldw	r2,8(r5)
 8012830:	dd000415 	stw	r20,16(sp)
 8012834:	ace7883a 	add	r19,r21,r19
 8012838:	dc800215 	stw	r18,8(sp)
 801283c:	dc400115 	stw	r17,4(sp)
 8012840:	dc000015 	stw	r16,0(sp)
 8012844:	dfc00615 	stw	ra,24(sp)
 8012848:	9c000044 	addi	r16,r19,1
 801284c:	2823883a 	mov	r17,r5
 8012850:	3029883a 	mov	r20,r6
 8012854:	2025883a 	mov	r18,r4
 8012858:	29400117 	ldw	r5,4(r5)
 801285c:	1400030e 	bge	r2,r16,801286c <__lshift+0x54>
 8012860:	1085883a 	add	r2,r2,r2
 8012864:	29400044 	addi	r5,r5,1
 8012868:	143ffd16 	blt	r2,r16,8012860 <__alt_data_end+0xfc012860>
 801286c:	9009883a 	mov	r4,r18
 8012870:	8011fdc0 	call	8011fdc <_Balloc>
 8012874:	10c00504 	addi	r3,r2,20
 8012878:	0540070e 	bge	zero,r21,8012898 <__lshift+0x80>
 801287c:	ad6b883a 	add	r21,r21,r21
 8012880:	ad6b883a 	add	r21,r21,r21
 8012884:	1809883a 	mov	r4,r3
 8012888:	1d47883a 	add	r3,r3,r21
 801288c:	20000015 	stw	zero,0(r4)
 8012890:	21000104 	addi	r4,r4,4
 8012894:	193ffd1e 	bne	r3,r4,801288c <__alt_data_end+0xfc01288c>
 8012898:	8a000417 	ldw	r8,16(r17)
 801289c:	89000504 	addi	r4,r17,20
 80128a0:	a18007cc 	andi	r6,r20,31
 80128a4:	4211883a 	add	r8,r8,r8
 80128a8:	4211883a 	add	r8,r8,r8
 80128ac:	2211883a 	add	r8,r4,r8
 80128b0:	30002326 	beq	r6,zero,8012940 <__lshift+0x128>
 80128b4:	02400804 	movi	r9,32
 80128b8:	4993c83a 	sub	r9,r9,r6
 80128bc:	000b883a 	mov	r5,zero
 80128c0:	21c00017 	ldw	r7,0(r4)
 80128c4:	1815883a 	mov	r10,r3
 80128c8:	18c00104 	addi	r3,r3,4
 80128cc:	398e983a 	sll	r7,r7,r6
 80128d0:	21000104 	addi	r4,r4,4
 80128d4:	394ab03a 	or	r5,r7,r5
 80128d8:	197fff15 	stw	r5,-4(r3)
 80128dc:	217fff17 	ldw	r5,-4(r4)
 80128e0:	2a4ad83a 	srl	r5,r5,r9
 80128e4:	223ff636 	bltu	r4,r8,80128c0 <__alt_data_end+0xfc0128c0>
 80128e8:	51400115 	stw	r5,4(r10)
 80128ec:	28001a1e 	bne	r5,zero,8012958 <__lshift+0x140>
 80128f0:	843fffc4 	addi	r16,r16,-1
 80128f4:	14000415 	stw	r16,16(r2)
 80128f8:	88000826 	beq	r17,zero,801291c <__lshift+0x104>
 80128fc:	89000117 	ldw	r4,4(r17)
 8012900:	90c01317 	ldw	r3,76(r18)
 8012904:	2109883a 	add	r4,r4,r4
 8012908:	2109883a 	add	r4,r4,r4
 801290c:	1907883a 	add	r3,r3,r4
 8012910:	19000017 	ldw	r4,0(r3)
 8012914:	89000015 	stw	r4,0(r17)
 8012918:	1c400015 	stw	r17,0(r3)
 801291c:	dfc00617 	ldw	ra,24(sp)
 8012920:	dd400517 	ldw	r21,20(sp)
 8012924:	dd000417 	ldw	r20,16(sp)
 8012928:	dcc00317 	ldw	r19,12(sp)
 801292c:	dc800217 	ldw	r18,8(sp)
 8012930:	dc400117 	ldw	r17,4(sp)
 8012934:	dc000017 	ldw	r16,0(sp)
 8012938:	dec00704 	addi	sp,sp,28
 801293c:	f800283a 	ret
 8012940:	21400017 	ldw	r5,0(r4)
 8012944:	18c00104 	addi	r3,r3,4
 8012948:	21000104 	addi	r4,r4,4
 801294c:	197fff15 	stw	r5,-4(r3)
 8012950:	223ffb36 	bltu	r4,r8,8012940 <__alt_data_end+0xfc012940>
 8012954:	003fe606 	br	80128f0 <__alt_data_end+0xfc0128f0>
 8012958:	9c000084 	addi	r16,r19,2
 801295c:	003fe406 	br	80128f0 <__alt_data_end+0xfc0128f0>

08012960 <__mcmp>:
 8012960:	20800417 	ldw	r2,16(r4)
 8012964:	28c00417 	ldw	r3,16(r5)
 8012968:	10c5c83a 	sub	r2,r2,r3
 801296c:	1000111e 	bne	r2,zero,80129b4 <__mcmp+0x54>
 8012970:	18c7883a 	add	r3,r3,r3
 8012974:	18c7883a 	add	r3,r3,r3
 8012978:	21000504 	addi	r4,r4,20
 801297c:	29400504 	addi	r5,r5,20
 8012980:	20c5883a 	add	r2,r4,r3
 8012984:	28cb883a 	add	r5,r5,r3
 8012988:	00000106 	br	8012990 <__mcmp+0x30>
 801298c:	20800a2e 	bgeu	r4,r2,80129b8 <__mcmp+0x58>
 8012990:	10bfff04 	addi	r2,r2,-4
 8012994:	297fff04 	addi	r5,r5,-4
 8012998:	11800017 	ldw	r6,0(r2)
 801299c:	28c00017 	ldw	r3,0(r5)
 80129a0:	30fffa26 	beq	r6,r3,801298c <__alt_data_end+0xfc01298c>
 80129a4:	30c00236 	bltu	r6,r3,80129b0 <__mcmp+0x50>
 80129a8:	00800044 	movi	r2,1
 80129ac:	f800283a 	ret
 80129b0:	00bfffc4 	movi	r2,-1
 80129b4:	f800283a 	ret
 80129b8:	0005883a 	mov	r2,zero
 80129bc:	f800283a 	ret

080129c0 <__mdiff>:
 80129c0:	28c00417 	ldw	r3,16(r5)
 80129c4:	30800417 	ldw	r2,16(r6)
 80129c8:	defffa04 	addi	sp,sp,-24
 80129cc:	dcc00315 	stw	r19,12(sp)
 80129d0:	dc800215 	stw	r18,8(sp)
 80129d4:	dfc00515 	stw	ra,20(sp)
 80129d8:	dd000415 	stw	r20,16(sp)
 80129dc:	dc400115 	stw	r17,4(sp)
 80129e0:	dc000015 	stw	r16,0(sp)
 80129e4:	1887c83a 	sub	r3,r3,r2
 80129e8:	2825883a 	mov	r18,r5
 80129ec:	3027883a 	mov	r19,r6
 80129f0:	1800141e 	bne	r3,zero,8012a44 <__mdiff+0x84>
 80129f4:	1085883a 	add	r2,r2,r2
 80129f8:	1085883a 	add	r2,r2,r2
 80129fc:	2a000504 	addi	r8,r5,20
 8012a00:	34000504 	addi	r16,r6,20
 8012a04:	4087883a 	add	r3,r8,r2
 8012a08:	8085883a 	add	r2,r16,r2
 8012a0c:	00000106 	br	8012a14 <__mdiff+0x54>
 8012a10:	40c0592e 	bgeu	r8,r3,8012b78 <__mdiff+0x1b8>
 8012a14:	18ffff04 	addi	r3,r3,-4
 8012a18:	10bfff04 	addi	r2,r2,-4
 8012a1c:	19c00017 	ldw	r7,0(r3)
 8012a20:	11400017 	ldw	r5,0(r2)
 8012a24:	397ffa26 	beq	r7,r5,8012a10 <__alt_data_end+0xfc012a10>
 8012a28:	3940592e 	bgeu	r7,r5,8012b90 <__mdiff+0x1d0>
 8012a2c:	9005883a 	mov	r2,r18
 8012a30:	4023883a 	mov	r17,r8
 8012a34:	9825883a 	mov	r18,r19
 8012a38:	05000044 	movi	r20,1
 8012a3c:	1027883a 	mov	r19,r2
 8012a40:	00000406 	br	8012a54 <__mdiff+0x94>
 8012a44:	18005616 	blt	r3,zero,8012ba0 <__mdiff+0x1e0>
 8012a48:	34400504 	addi	r17,r6,20
 8012a4c:	2c000504 	addi	r16,r5,20
 8012a50:	0029883a 	mov	r20,zero
 8012a54:	91400117 	ldw	r5,4(r18)
 8012a58:	8011fdc0 	call	8011fdc <_Balloc>
 8012a5c:	92400417 	ldw	r9,16(r18)
 8012a60:	9b000417 	ldw	r12,16(r19)
 8012a64:	12c00504 	addi	r11,r2,20
 8012a68:	4a51883a 	add	r8,r9,r9
 8012a6c:	6319883a 	add	r12,r12,r12
 8012a70:	4211883a 	add	r8,r8,r8
 8012a74:	6319883a 	add	r12,r12,r12
 8012a78:	15000315 	stw	r20,12(r2)
 8012a7c:	8211883a 	add	r8,r16,r8
 8012a80:	8b19883a 	add	r12,r17,r12
 8012a84:	0007883a 	mov	r3,zero
 8012a88:	81400017 	ldw	r5,0(r16)
 8012a8c:	89c00017 	ldw	r7,0(r17)
 8012a90:	59800104 	addi	r6,r11,4
 8012a94:	293fffcc 	andi	r4,r5,65535
 8012a98:	20c7883a 	add	r3,r4,r3
 8012a9c:	393fffcc 	andi	r4,r7,65535
 8012aa0:	1909c83a 	sub	r4,r3,r4
 8012aa4:	280ad43a 	srli	r5,r5,16
 8012aa8:	380ed43a 	srli	r7,r7,16
 8012aac:	2007d43a 	srai	r3,r4,16
 8012ab0:	213fffcc 	andi	r4,r4,65535
 8012ab4:	29cbc83a 	sub	r5,r5,r7
 8012ab8:	28c7883a 	add	r3,r5,r3
 8012abc:	180a943a 	slli	r5,r3,16
 8012ac0:	8c400104 	addi	r17,r17,4
 8012ac4:	84000104 	addi	r16,r16,4
 8012ac8:	2908b03a 	or	r4,r5,r4
 8012acc:	59000015 	stw	r4,0(r11)
 8012ad0:	1807d43a 	srai	r3,r3,16
 8012ad4:	3015883a 	mov	r10,r6
 8012ad8:	3017883a 	mov	r11,r6
 8012adc:	8b3fea36 	bltu	r17,r12,8012a88 <__alt_data_end+0xfc012a88>
 8012ae0:	8200162e 	bgeu	r16,r8,8012b3c <__mdiff+0x17c>
 8012ae4:	8017883a 	mov	r11,r16
 8012ae8:	59400017 	ldw	r5,0(r11)
 8012aec:	31800104 	addi	r6,r6,4
 8012af0:	5ac00104 	addi	r11,r11,4
 8012af4:	293fffcc 	andi	r4,r5,65535
 8012af8:	20c7883a 	add	r3,r4,r3
 8012afc:	280ed43a 	srli	r7,r5,16
 8012b00:	180bd43a 	srai	r5,r3,16
 8012b04:	193fffcc 	andi	r4,r3,65535
 8012b08:	3947883a 	add	r3,r7,r5
 8012b0c:	180a943a 	slli	r5,r3,16
 8012b10:	1807d43a 	srai	r3,r3,16
 8012b14:	2908b03a 	or	r4,r5,r4
 8012b18:	313fff15 	stw	r4,-4(r6)
 8012b1c:	5a3ff236 	bltu	r11,r8,8012ae8 <__alt_data_end+0xfc012ae8>
 8012b20:	0406303a 	nor	r3,zero,r16
 8012b24:	1a07883a 	add	r3,r3,r8
 8012b28:	1806d0ba 	srli	r3,r3,2
 8012b2c:	18c00044 	addi	r3,r3,1
 8012b30:	18c7883a 	add	r3,r3,r3
 8012b34:	18c7883a 	add	r3,r3,r3
 8012b38:	50d5883a 	add	r10,r10,r3
 8012b3c:	50ffff04 	addi	r3,r10,-4
 8012b40:	2000041e 	bne	r4,zero,8012b54 <__mdiff+0x194>
 8012b44:	18ffff04 	addi	r3,r3,-4
 8012b48:	19000017 	ldw	r4,0(r3)
 8012b4c:	4a7fffc4 	addi	r9,r9,-1
 8012b50:	203ffc26 	beq	r4,zero,8012b44 <__alt_data_end+0xfc012b44>
 8012b54:	12400415 	stw	r9,16(r2)
 8012b58:	dfc00517 	ldw	ra,20(sp)
 8012b5c:	dd000417 	ldw	r20,16(sp)
 8012b60:	dcc00317 	ldw	r19,12(sp)
 8012b64:	dc800217 	ldw	r18,8(sp)
 8012b68:	dc400117 	ldw	r17,4(sp)
 8012b6c:	dc000017 	ldw	r16,0(sp)
 8012b70:	dec00604 	addi	sp,sp,24
 8012b74:	f800283a 	ret
 8012b78:	000b883a 	mov	r5,zero
 8012b7c:	8011fdc0 	call	8011fdc <_Balloc>
 8012b80:	00c00044 	movi	r3,1
 8012b84:	10c00415 	stw	r3,16(r2)
 8012b88:	10000515 	stw	zero,20(r2)
 8012b8c:	003ff206 	br	8012b58 <__alt_data_end+0xfc012b58>
 8012b90:	8023883a 	mov	r17,r16
 8012b94:	0029883a 	mov	r20,zero
 8012b98:	4021883a 	mov	r16,r8
 8012b9c:	003fad06 	br	8012a54 <__alt_data_end+0xfc012a54>
 8012ba0:	9005883a 	mov	r2,r18
 8012ba4:	94400504 	addi	r17,r18,20
 8012ba8:	9c000504 	addi	r16,r19,20
 8012bac:	9825883a 	mov	r18,r19
 8012bb0:	05000044 	movi	r20,1
 8012bb4:	1027883a 	mov	r19,r2
 8012bb8:	003fa606 	br	8012a54 <__alt_data_end+0xfc012a54>

08012bbc <__ulp>:
 8012bbc:	295ffc2c 	andhi	r5,r5,32752
 8012bc0:	00bf3034 	movhi	r2,64704
 8012bc4:	2887883a 	add	r3,r5,r2
 8012bc8:	00c0020e 	bge	zero,r3,8012bd4 <__ulp+0x18>
 8012bcc:	0005883a 	mov	r2,zero
 8012bd0:	f800283a 	ret
 8012bd4:	00c7c83a 	sub	r3,zero,r3
 8012bd8:	1807d53a 	srai	r3,r3,20
 8012bdc:	008004c4 	movi	r2,19
 8012be0:	10c00b0e 	bge	r2,r3,8012c10 <__ulp+0x54>
 8012be4:	18bffb04 	addi	r2,r3,-20
 8012be8:	01000784 	movi	r4,30
 8012bec:	0007883a 	mov	r3,zero
 8012bf0:	20800516 	blt	r4,r2,8012c08 <__ulp+0x4c>
 8012bf4:	010007c4 	movi	r4,31
 8012bf8:	2089c83a 	sub	r4,r4,r2
 8012bfc:	00800044 	movi	r2,1
 8012c00:	1104983a 	sll	r2,r2,r4
 8012c04:	f800283a 	ret
 8012c08:	00800044 	movi	r2,1
 8012c0c:	f800283a 	ret
 8012c10:	01400234 	movhi	r5,8
 8012c14:	28c7d83a 	sra	r3,r5,r3
 8012c18:	0005883a 	mov	r2,zero
 8012c1c:	f800283a 	ret

08012c20 <__b2d>:
 8012c20:	defffa04 	addi	sp,sp,-24
 8012c24:	dc000015 	stw	r16,0(sp)
 8012c28:	24000417 	ldw	r16,16(r4)
 8012c2c:	dc400115 	stw	r17,4(sp)
 8012c30:	24400504 	addi	r17,r4,20
 8012c34:	8421883a 	add	r16,r16,r16
 8012c38:	8421883a 	add	r16,r16,r16
 8012c3c:	8c21883a 	add	r16,r17,r16
 8012c40:	dc800215 	stw	r18,8(sp)
 8012c44:	84bfff17 	ldw	r18,-4(r16)
 8012c48:	dd000415 	stw	r20,16(sp)
 8012c4c:	dcc00315 	stw	r19,12(sp)
 8012c50:	9009883a 	mov	r4,r18
 8012c54:	2829883a 	mov	r20,r5
 8012c58:	dfc00515 	stw	ra,20(sp)
 8012c5c:	80122f80 	call	80122f8 <__hi0bits>
 8012c60:	00c00804 	movi	r3,32
 8012c64:	1889c83a 	sub	r4,r3,r2
 8012c68:	a1000015 	stw	r4,0(r20)
 8012c6c:	01000284 	movi	r4,10
 8012c70:	84ffff04 	addi	r19,r16,-4
 8012c74:	20801216 	blt	r4,r2,8012cc0 <__b2d+0xa0>
 8012c78:	018002c4 	movi	r6,11
 8012c7c:	308dc83a 	sub	r6,r6,r2
 8012c80:	9186d83a 	srl	r3,r18,r6
 8012c84:	18cffc34 	orhi	r3,r3,16368
 8012c88:	8cc0212e 	bgeu	r17,r19,8012d10 <__b2d+0xf0>
 8012c8c:	813ffe17 	ldw	r4,-8(r16)
 8012c90:	218cd83a 	srl	r6,r4,r6
 8012c94:	10800544 	addi	r2,r2,21
 8012c98:	9084983a 	sll	r2,r18,r2
 8012c9c:	1184b03a 	or	r2,r2,r6
 8012ca0:	dfc00517 	ldw	ra,20(sp)
 8012ca4:	dd000417 	ldw	r20,16(sp)
 8012ca8:	dcc00317 	ldw	r19,12(sp)
 8012cac:	dc800217 	ldw	r18,8(sp)
 8012cb0:	dc400117 	ldw	r17,4(sp)
 8012cb4:	dc000017 	ldw	r16,0(sp)
 8012cb8:	dec00604 	addi	sp,sp,24
 8012cbc:	f800283a 	ret
 8012cc0:	8cc00f2e 	bgeu	r17,r19,8012d00 <__b2d+0xe0>
 8012cc4:	117ffd44 	addi	r5,r2,-11
 8012cc8:	80bffe17 	ldw	r2,-8(r16)
 8012ccc:	28000e26 	beq	r5,zero,8012d08 <__b2d+0xe8>
 8012cd0:	1949c83a 	sub	r4,r3,r5
 8012cd4:	9164983a 	sll	r18,r18,r5
 8012cd8:	1106d83a 	srl	r3,r2,r4
 8012cdc:	81bffe04 	addi	r6,r16,-8
 8012ce0:	948ffc34 	orhi	r18,r18,16368
 8012ce4:	90c6b03a 	or	r3,r18,r3
 8012ce8:	89800e2e 	bgeu	r17,r6,8012d24 <__b2d+0x104>
 8012cec:	81bffd17 	ldw	r6,-12(r16)
 8012cf0:	1144983a 	sll	r2,r2,r5
 8012cf4:	310ad83a 	srl	r5,r6,r4
 8012cf8:	2884b03a 	or	r2,r5,r2
 8012cfc:	003fe806 	br	8012ca0 <__alt_data_end+0xfc012ca0>
 8012d00:	10bffd44 	addi	r2,r2,-11
 8012d04:	1000041e 	bne	r2,zero,8012d18 <__b2d+0xf8>
 8012d08:	90cffc34 	orhi	r3,r18,16368
 8012d0c:	003fe406 	br	8012ca0 <__alt_data_end+0xfc012ca0>
 8012d10:	000d883a 	mov	r6,zero
 8012d14:	003fdf06 	br	8012c94 <__alt_data_end+0xfc012c94>
 8012d18:	90a4983a 	sll	r18,r18,r2
 8012d1c:	0005883a 	mov	r2,zero
 8012d20:	003ff906 	br	8012d08 <__alt_data_end+0xfc012d08>
 8012d24:	1144983a 	sll	r2,r2,r5
 8012d28:	003fdd06 	br	8012ca0 <__alt_data_end+0xfc012ca0>

08012d2c <__d2b>:
 8012d2c:	defff804 	addi	sp,sp,-32
 8012d30:	dc000215 	stw	r16,8(sp)
 8012d34:	3021883a 	mov	r16,r6
 8012d38:	dc400315 	stw	r17,12(sp)
 8012d3c:	8022907a 	slli	r17,r16,1
 8012d40:	dd000615 	stw	r20,24(sp)
 8012d44:	2829883a 	mov	r20,r5
 8012d48:	01400044 	movi	r5,1
 8012d4c:	dcc00515 	stw	r19,20(sp)
 8012d50:	dc800415 	stw	r18,16(sp)
 8012d54:	dfc00715 	stw	ra,28(sp)
 8012d58:	3825883a 	mov	r18,r7
 8012d5c:	8822d57a 	srli	r17,r17,21
 8012d60:	8011fdc0 	call	8011fdc <_Balloc>
 8012d64:	1027883a 	mov	r19,r2
 8012d68:	00800434 	movhi	r2,16
 8012d6c:	10bfffc4 	addi	r2,r2,-1
 8012d70:	808c703a 	and	r6,r16,r2
 8012d74:	88000126 	beq	r17,zero,8012d7c <__d2b+0x50>
 8012d78:	31800434 	orhi	r6,r6,16
 8012d7c:	d9800015 	stw	r6,0(sp)
 8012d80:	a0002426 	beq	r20,zero,8012e14 <__d2b+0xe8>
 8012d84:	d9000104 	addi	r4,sp,4
 8012d88:	dd000115 	stw	r20,4(sp)
 8012d8c:	80123600 	call	8012360 <__lo0bits>
 8012d90:	d8c00017 	ldw	r3,0(sp)
 8012d94:	10002f1e 	bne	r2,zero,8012e54 <__d2b+0x128>
 8012d98:	d9000117 	ldw	r4,4(sp)
 8012d9c:	99000515 	stw	r4,20(r19)
 8012da0:	1821003a 	cmpeq	r16,r3,zero
 8012da4:	01000084 	movi	r4,2
 8012da8:	2421c83a 	sub	r16,r4,r16
 8012dac:	98c00615 	stw	r3,24(r19)
 8012db0:	9c000415 	stw	r16,16(r19)
 8012db4:	88001f1e 	bne	r17,zero,8012e34 <__d2b+0x108>
 8012db8:	10bef384 	addi	r2,r2,-1074
 8012dbc:	90800015 	stw	r2,0(r18)
 8012dc0:	00900034 	movhi	r2,16384
 8012dc4:	10bfffc4 	addi	r2,r2,-1
 8012dc8:	8085883a 	add	r2,r16,r2
 8012dcc:	1085883a 	add	r2,r2,r2
 8012dd0:	1085883a 	add	r2,r2,r2
 8012dd4:	9885883a 	add	r2,r19,r2
 8012dd8:	11000517 	ldw	r4,20(r2)
 8012ddc:	8020917a 	slli	r16,r16,5
 8012de0:	80122f80 	call	80122f8 <__hi0bits>
 8012de4:	d8c00817 	ldw	r3,32(sp)
 8012de8:	8085c83a 	sub	r2,r16,r2
 8012dec:	18800015 	stw	r2,0(r3)
 8012df0:	9805883a 	mov	r2,r19
 8012df4:	dfc00717 	ldw	ra,28(sp)
 8012df8:	dd000617 	ldw	r20,24(sp)
 8012dfc:	dcc00517 	ldw	r19,20(sp)
 8012e00:	dc800417 	ldw	r18,16(sp)
 8012e04:	dc400317 	ldw	r17,12(sp)
 8012e08:	dc000217 	ldw	r16,8(sp)
 8012e0c:	dec00804 	addi	sp,sp,32
 8012e10:	f800283a 	ret
 8012e14:	d809883a 	mov	r4,sp
 8012e18:	80123600 	call	8012360 <__lo0bits>
 8012e1c:	d8c00017 	ldw	r3,0(sp)
 8012e20:	04000044 	movi	r16,1
 8012e24:	9c000415 	stw	r16,16(r19)
 8012e28:	98c00515 	stw	r3,20(r19)
 8012e2c:	10800804 	addi	r2,r2,32
 8012e30:	883fe126 	beq	r17,zero,8012db8 <__alt_data_end+0xfc012db8>
 8012e34:	00c00d44 	movi	r3,53
 8012e38:	8c7ef344 	addi	r17,r17,-1075
 8012e3c:	88a3883a 	add	r17,r17,r2
 8012e40:	1885c83a 	sub	r2,r3,r2
 8012e44:	d8c00817 	ldw	r3,32(sp)
 8012e48:	94400015 	stw	r17,0(r18)
 8012e4c:	18800015 	stw	r2,0(r3)
 8012e50:	003fe706 	br	8012df0 <__alt_data_end+0xfc012df0>
 8012e54:	01000804 	movi	r4,32
 8012e58:	2089c83a 	sub	r4,r4,r2
 8012e5c:	1908983a 	sll	r4,r3,r4
 8012e60:	d9400117 	ldw	r5,4(sp)
 8012e64:	1886d83a 	srl	r3,r3,r2
 8012e68:	2148b03a 	or	r4,r4,r5
 8012e6c:	99000515 	stw	r4,20(r19)
 8012e70:	d8c00015 	stw	r3,0(sp)
 8012e74:	003fca06 	br	8012da0 <__alt_data_end+0xfc012da0>

08012e78 <__ratio>:
 8012e78:	defff904 	addi	sp,sp,-28
 8012e7c:	dc400315 	stw	r17,12(sp)
 8012e80:	2823883a 	mov	r17,r5
 8012e84:	d9400104 	addi	r5,sp,4
 8012e88:	dfc00615 	stw	ra,24(sp)
 8012e8c:	dcc00515 	stw	r19,20(sp)
 8012e90:	dc800415 	stw	r18,16(sp)
 8012e94:	2027883a 	mov	r19,r4
 8012e98:	dc000215 	stw	r16,8(sp)
 8012e9c:	8012c200 	call	8012c20 <__b2d>
 8012ea0:	d80b883a 	mov	r5,sp
 8012ea4:	8809883a 	mov	r4,r17
 8012ea8:	1025883a 	mov	r18,r2
 8012eac:	1821883a 	mov	r16,r3
 8012eb0:	8012c200 	call	8012c20 <__b2d>
 8012eb4:	8a000417 	ldw	r8,16(r17)
 8012eb8:	99000417 	ldw	r4,16(r19)
 8012ebc:	d9400117 	ldw	r5,4(sp)
 8012ec0:	2209c83a 	sub	r4,r4,r8
 8012ec4:	2010917a 	slli	r8,r4,5
 8012ec8:	d9000017 	ldw	r4,0(sp)
 8012ecc:	2909c83a 	sub	r4,r5,r4
 8012ed0:	4109883a 	add	r4,r8,r4
 8012ed4:	01000e0e 	bge	zero,r4,8012f10 <__ratio+0x98>
 8012ed8:	2008953a 	slli	r4,r4,20
 8012edc:	2421883a 	add	r16,r4,r16
 8012ee0:	100d883a 	mov	r6,r2
 8012ee4:	180f883a 	mov	r7,r3
 8012ee8:	9009883a 	mov	r4,r18
 8012eec:	800b883a 	mov	r5,r16
 8012ef0:	8009d5c0 	call	8009d5c <__divdf3>
 8012ef4:	dfc00617 	ldw	ra,24(sp)
 8012ef8:	dcc00517 	ldw	r19,20(sp)
 8012efc:	dc800417 	ldw	r18,16(sp)
 8012f00:	dc400317 	ldw	r17,12(sp)
 8012f04:	dc000217 	ldw	r16,8(sp)
 8012f08:	dec00704 	addi	sp,sp,28
 8012f0c:	f800283a 	ret
 8012f10:	2008953a 	slli	r4,r4,20
 8012f14:	1907c83a 	sub	r3,r3,r4
 8012f18:	003ff106 	br	8012ee0 <__alt_data_end+0xfc012ee0>

08012f1c <_mprec_log10>:
 8012f1c:	defffe04 	addi	sp,sp,-8
 8012f20:	dc000015 	stw	r16,0(sp)
 8012f24:	dfc00115 	stw	ra,4(sp)
 8012f28:	008005c4 	movi	r2,23
 8012f2c:	2021883a 	mov	r16,r4
 8012f30:	11000d0e 	bge	r2,r4,8012f68 <_mprec_log10+0x4c>
 8012f34:	0005883a 	mov	r2,zero
 8012f38:	00cffc34 	movhi	r3,16368
 8012f3c:	843fffc4 	addi	r16,r16,-1
 8012f40:	000d883a 	mov	r6,zero
 8012f44:	01d00934 	movhi	r7,16420
 8012f48:	1009883a 	mov	r4,r2
 8012f4c:	180b883a 	mov	r5,r3
 8012f50:	800a9840 	call	800a984 <__muldf3>
 8012f54:	803ff91e 	bne	r16,zero,8012f3c <__alt_data_end+0xfc012f3c>
 8012f58:	dfc00117 	ldw	ra,4(sp)
 8012f5c:	dc000017 	ldw	r16,0(sp)
 8012f60:	dec00204 	addi	sp,sp,8
 8012f64:	f800283a 	ret
 8012f68:	202090fa 	slli	r16,r4,3
 8012f6c:	00820d74 	movhi	r2,2101
 8012f70:	10a17c04 	addi	r2,r2,-31248
 8012f74:	1421883a 	add	r16,r2,r16
 8012f78:	80800017 	ldw	r2,0(r16)
 8012f7c:	80c00117 	ldw	r3,4(r16)
 8012f80:	dfc00117 	ldw	ra,4(sp)
 8012f84:	dc000017 	ldw	r16,0(sp)
 8012f88:	dec00204 	addi	sp,sp,8
 8012f8c:	f800283a 	ret

08012f90 <__copybits>:
 8012f90:	297fffc4 	addi	r5,r5,-1
 8012f94:	280fd17a 	srai	r7,r5,5
 8012f98:	30c00417 	ldw	r3,16(r6)
 8012f9c:	30800504 	addi	r2,r6,20
 8012fa0:	39c00044 	addi	r7,r7,1
 8012fa4:	18c7883a 	add	r3,r3,r3
 8012fa8:	39cf883a 	add	r7,r7,r7
 8012fac:	18c7883a 	add	r3,r3,r3
 8012fb0:	39cf883a 	add	r7,r7,r7
 8012fb4:	10c7883a 	add	r3,r2,r3
 8012fb8:	21cf883a 	add	r7,r4,r7
 8012fbc:	10c00d2e 	bgeu	r2,r3,8012ff4 <__copybits+0x64>
 8012fc0:	200b883a 	mov	r5,r4
 8012fc4:	12000017 	ldw	r8,0(r2)
 8012fc8:	29400104 	addi	r5,r5,4
 8012fcc:	10800104 	addi	r2,r2,4
 8012fd0:	2a3fff15 	stw	r8,-4(r5)
 8012fd4:	10fffb36 	bltu	r2,r3,8012fc4 <__alt_data_end+0xfc012fc4>
 8012fd8:	1985c83a 	sub	r2,r3,r6
 8012fdc:	10bffac4 	addi	r2,r2,-21
 8012fe0:	1004d0ba 	srli	r2,r2,2
 8012fe4:	10800044 	addi	r2,r2,1
 8012fe8:	1085883a 	add	r2,r2,r2
 8012fec:	1085883a 	add	r2,r2,r2
 8012ff0:	2089883a 	add	r4,r4,r2
 8012ff4:	21c0032e 	bgeu	r4,r7,8013004 <__copybits+0x74>
 8012ff8:	20000015 	stw	zero,0(r4)
 8012ffc:	21000104 	addi	r4,r4,4
 8013000:	21fffd36 	bltu	r4,r7,8012ff8 <__alt_data_end+0xfc012ff8>
 8013004:	f800283a 	ret

08013008 <__any_on>:
 8013008:	20c00417 	ldw	r3,16(r4)
 801300c:	2805d17a 	srai	r2,r5,5
 8013010:	21000504 	addi	r4,r4,20
 8013014:	18800d0e 	bge	r3,r2,801304c <__any_on+0x44>
 8013018:	18c7883a 	add	r3,r3,r3
 801301c:	18c7883a 	add	r3,r3,r3
 8013020:	20c7883a 	add	r3,r4,r3
 8013024:	20c0192e 	bgeu	r4,r3,801308c <__any_on+0x84>
 8013028:	18bfff17 	ldw	r2,-4(r3)
 801302c:	18ffff04 	addi	r3,r3,-4
 8013030:	1000041e 	bne	r2,zero,8013044 <__any_on+0x3c>
 8013034:	20c0142e 	bgeu	r4,r3,8013088 <__any_on+0x80>
 8013038:	18ffff04 	addi	r3,r3,-4
 801303c:	19400017 	ldw	r5,0(r3)
 8013040:	283ffc26 	beq	r5,zero,8013034 <__alt_data_end+0xfc013034>
 8013044:	00800044 	movi	r2,1
 8013048:	f800283a 	ret
 801304c:	10c00a0e 	bge	r2,r3,8013078 <__any_on+0x70>
 8013050:	1085883a 	add	r2,r2,r2
 8013054:	1085883a 	add	r2,r2,r2
 8013058:	294007cc 	andi	r5,r5,31
 801305c:	2087883a 	add	r3,r4,r2
 8013060:	283ff026 	beq	r5,zero,8013024 <__alt_data_end+0xfc013024>
 8013064:	19800017 	ldw	r6,0(r3)
 8013068:	3144d83a 	srl	r2,r6,r5
 801306c:	114a983a 	sll	r5,r2,r5
 8013070:	317ff41e 	bne	r6,r5,8013044 <__alt_data_end+0xfc013044>
 8013074:	003feb06 	br	8013024 <__alt_data_end+0xfc013024>
 8013078:	1085883a 	add	r2,r2,r2
 801307c:	1085883a 	add	r2,r2,r2
 8013080:	2087883a 	add	r3,r4,r2
 8013084:	003fe706 	br	8013024 <__alt_data_end+0xfc013024>
 8013088:	f800283a 	ret
 801308c:	0005883a 	mov	r2,zero
 8013090:	f800283a 	ret

08013094 <_realloc_r>:
 8013094:	defff604 	addi	sp,sp,-40
 8013098:	dc800215 	stw	r18,8(sp)
 801309c:	dfc00915 	stw	ra,36(sp)
 80130a0:	df000815 	stw	fp,32(sp)
 80130a4:	ddc00715 	stw	r23,28(sp)
 80130a8:	dd800615 	stw	r22,24(sp)
 80130ac:	dd400515 	stw	r21,20(sp)
 80130b0:	dd000415 	stw	r20,16(sp)
 80130b4:	dcc00315 	stw	r19,12(sp)
 80130b8:	dc400115 	stw	r17,4(sp)
 80130bc:	dc000015 	stw	r16,0(sp)
 80130c0:	3025883a 	mov	r18,r6
 80130c4:	2800b726 	beq	r5,zero,80133a4 <_realloc_r+0x310>
 80130c8:	282b883a 	mov	r21,r5
 80130cc:	2029883a 	mov	r20,r4
 80130d0:	80164080 	call	8016408 <__malloc_lock>
 80130d4:	a8bfff17 	ldw	r2,-4(r21)
 80130d8:	043fff04 	movi	r16,-4
 80130dc:	90c002c4 	addi	r3,r18,11
 80130e0:	01000584 	movi	r4,22
 80130e4:	acfffe04 	addi	r19,r21,-8
 80130e8:	1420703a 	and	r16,r2,r16
 80130ec:	20c0332e 	bgeu	r4,r3,80131bc <_realloc_r+0x128>
 80130f0:	047ffe04 	movi	r17,-8
 80130f4:	1c62703a 	and	r17,r3,r17
 80130f8:	8807883a 	mov	r3,r17
 80130fc:	88005816 	blt	r17,zero,8013260 <_realloc_r+0x1cc>
 8013100:	8c805736 	bltu	r17,r18,8013260 <_realloc_r+0x1cc>
 8013104:	80c0300e 	bge	r16,r3,80131c8 <_realloc_r+0x134>
 8013108:	07020d74 	movhi	fp,2101
 801310c:	e722f604 	addi	fp,fp,-29736
 8013110:	e1c00217 	ldw	r7,8(fp)
 8013114:	9c09883a 	add	r4,r19,r16
 8013118:	22000117 	ldw	r8,4(r4)
 801311c:	21c06326 	beq	r4,r7,80132ac <_realloc_r+0x218>
 8013120:	017fff84 	movi	r5,-2
 8013124:	414a703a 	and	r5,r8,r5
 8013128:	214b883a 	add	r5,r4,r5
 801312c:	29800117 	ldw	r6,4(r5)
 8013130:	3180004c 	andi	r6,r6,1
 8013134:	30003f26 	beq	r6,zero,8013234 <_realloc_r+0x1a0>
 8013138:	1080004c 	andi	r2,r2,1
 801313c:	10008326 	beq	r2,zero,801334c <_realloc_r+0x2b8>
 8013140:	900b883a 	mov	r5,r18
 8013144:	a009883a 	mov	r4,r20
 8013148:	80114480 	call	8011448 <_malloc_r>
 801314c:	1025883a 	mov	r18,r2
 8013150:	10011e26 	beq	r2,zero,80135cc <_realloc_r+0x538>
 8013154:	a93fff17 	ldw	r4,-4(r21)
 8013158:	10fffe04 	addi	r3,r2,-8
 801315c:	00bfff84 	movi	r2,-2
 8013160:	2084703a 	and	r2,r4,r2
 8013164:	9885883a 	add	r2,r19,r2
 8013168:	1880ee26 	beq	r3,r2,8013524 <_realloc_r+0x490>
 801316c:	81bfff04 	addi	r6,r16,-4
 8013170:	00800904 	movi	r2,36
 8013174:	1180b836 	bltu	r2,r6,8013458 <_realloc_r+0x3c4>
 8013178:	00c004c4 	movi	r3,19
 801317c:	19809636 	bltu	r3,r6,80133d8 <_realloc_r+0x344>
 8013180:	9005883a 	mov	r2,r18
 8013184:	a807883a 	mov	r3,r21
 8013188:	19000017 	ldw	r4,0(r3)
 801318c:	11000015 	stw	r4,0(r2)
 8013190:	19000117 	ldw	r4,4(r3)
 8013194:	11000115 	stw	r4,4(r2)
 8013198:	18c00217 	ldw	r3,8(r3)
 801319c:	10c00215 	stw	r3,8(r2)
 80131a0:	a80b883a 	mov	r5,r21
 80131a4:	a009883a 	mov	r4,r20
 80131a8:	80108500 	call	8010850 <_free_r>
 80131ac:	a009883a 	mov	r4,r20
 80131b0:	801642c0 	call	801642c <__malloc_unlock>
 80131b4:	9005883a 	mov	r2,r18
 80131b8:	00001206 	br	8013204 <_realloc_r+0x170>
 80131bc:	00c00404 	movi	r3,16
 80131c0:	1823883a 	mov	r17,r3
 80131c4:	003fce06 	br	8013100 <__alt_data_end+0xfc013100>
 80131c8:	a825883a 	mov	r18,r21
 80131cc:	8445c83a 	sub	r2,r16,r17
 80131d0:	00c003c4 	movi	r3,15
 80131d4:	18802636 	bltu	r3,r2,8013270 <_realloc_r+0x1dc>
 80131d8:	99800117 	ldw	r6,4(r19)
 80131dc:	9c07883a 	add	r3,r19,r16
 80131e0:	3180004c 	andi	r6,r6,1
 80131e4:	3420b03a 	or	r16,r6,r16
 80131e8:	9c000115 	stw	r16,4(r19)
 80131ec:	18800117 	ldw	r2,4(r3)
 80131f0:	10800054 	ori	r2,r2,1
 80131f4:	18800115 	stw	r2,4(r3)
 80131f8:	a009883a 	mov	r4,r20
 80131fc:	801642c0 	call	801642c <__malloc_unlock>
 8013200:	9005883a 	mov	r2,r18
 8013204:	dfc00917 	ldw	ra,36(sp)
 8013208:	df000817 	ldw	fp,32(sp)
 801320c:	ddc00717 	ldw	r23,28(sp)
 8013210:	dd800617 	ldw	r22,24(sp)
 8013214:	dd400517 	ldw	r21,20(sp)
 8013218:	dd000417 	ldw	r20,16(sp)
 801321c:	dcc00317 	ldw	r19,12(sp)
 8013220:	dc800217 	ldw	r18,8(sp)
 8013224:	dc400117 	ldw	r17,4(sp)
 8013228:	dc000017 	ldw	r16,0(sp)
 801322c:	dec00a04 	addi	sp,sp,40
 8013230:	f800283a 	ret
 8013234:	017fff04 	movi	r5,-4
 8013238:	414a703a 	and	r5,r8,r5
 801323c:	814d883a 	add	r6,r16,r5
 8013240:	30c01f16 	blt	r6,r3,80132c0 <_realloc_r+0x22c>
 8013244:	20800317 	ldw	r2,12(r4)
 8013248:	20c00217 	ldw	r3,8(r4)
 801324c:	a825883a 	mov	r18,r21
 8013250:	3021883a 	mov	r16,r6
 8013254:	18800315 	stw	r2,12(r3)
 8013258:	10c00215 	stw	r3,8(r2)
 801325c:	003fdb06 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013260:	00800304 	movi	r2,12
 8013264:	a0800015 	stw	r2,0(r20)
 8013268:	0005883a 	mov	r2,zero
 801326c:	003fe506 	br	8013204 <__alt_data_end+0xfc013204>
 8013270:	98c00117 	ldw	r3,4(r19)
 8013274:	9c4b883a 	add	r5,r19,r17
 8013278:	11000054 	ori	r4,r2,1
 801327c:	18c0004c 	andi	r3,r3,1
 8013280:	1c62b03a 	or	r17,r3,r17
 8013284:	9c400115 	stw	r17,4(r19)
 8013288:	29000115 	stw	r4,4(r5)
 801328c:	2885883a 	add	r2,r5,r2
 8013290:	10c00117 	ldw	r3,4(r2)
 8013294:	29400204 	addi	r5,r5,8
 8013298:	a009883a 	mov	r4,r20
 801329c:	18c00054 	ori	r3,r3,1
 80132a0:	10c00115 	stw	r3,4(r2)
 80132a4:	80108500 	call	8010850 <_free_r>
 80132a8:	003fd306 	br	80131f8 <__alt_data_end+0xfc0131f8>
 80132ac:	017fff04 	movi	r5,-4
 80132b0:	414a703a 	and	r5,r8,r5
 80132b4:	89800404 	addi	r6,r17,16
 80132b8:	8151883a 	add	r8,r16,r5
 80132bc:	4180590e 	bge	r8,r6,8013424 <_realloc_r+0x390>
 80132c0:	1080004c 	andi	r2,r2,1
 80132c4:	103f9e1e 	bne	r2,zero,8013140 <__alt_data_end+0xfc013140>
 80132c8:	adbffe17 	ldw	r22,-8(r21)
 80132cc:	00bfff04 	movi	r2,-4
 80132d0:	9dadc83a 	sub	r22,r19,r22
 80132d4:	b1800117 	ldw	r6,4(r22)
 80132d8:	3084703a 	and	r2,r6,r2
 80132dc:	20002026 	beq	r4,zero,8013360 <_realloc_r+0x2cc>
 80132e0:	80af883a 	add	r23,r16,r2
 80132e4:	b96f883a 	add	r23,r23,r5
 80132e8:	21c05f26 	beq	r4,r7,8013468 <_realloc_r+0x3d4>
 80132ec:	b8c01c16 	blt	r23,r3,8013360 <_realloc_r+0x2cc>
 80132f0:	20800317 	ldw	r2,12(r4)
 80132f4:	20c00217 	ldw	r3,8(r4)
 80132f8:	81bfff04 	addi	r6,r16,-4
 80132fc:	01000904 	movi	r4,36
 8013300:	18800315 	stw	r2,12(r3)
 8013304:	10c00215 	stw	r3,8(r2)
 8013308:	b0c00217 	ldw	r3,8(r22)
 801330c:	b0800317 	ldw	r2,12(r22)
 8013310:	b4800204 	addi	r18,r22,8
 8013314:	18800315 	stw	r2,12(r3)
 8013318:	10c00215 	stw	r3,8(r2)
 801331c:	21801b36 	bltu	r4,r6,801338c <_realloc_r+0x2f8>
 8013320:	008004c4 	movi	r2,19
 8013324:	1180352e 	bgeu	r2,r6,80133fc <_realloc_r+0x368>
 8013328:	a8800017 	ldw	r2,0(r21)
 801332c:	b0800215 	stw	r2,8(r22)
 8013330:	a8800117 	ldw	r2,4(r21)
 8013334:	b0800315 	stw	r2,12(r22)
 8013338:	008006c4 	movi	r2,27
 801333c:	11807f36 	bltu	r2,r6,801353c <_realloc_r+0x4a8>
 8013340:	b0800404 	addi	r2,r22,16
 8013344:	ad400204 	addi	r21,r21,8
 8013348:	00002d06 	br	8013400 <_realloc_r+0x36c>
 801334c:	adbffe17 	ldw	r22,-8(r21)
 8013350:	00bfff04 	movi	r2,-4
 8013354:	9dadc83a 	sub	r22,r19,r22
 8013358:	b1000117 	ldw	r4,4(r22)
 801335c:	2084703a 	and	r2,r4,r2
 8013360:	b03f7726 	beq	r22,zero,8013140 <__alt_data_end+0xfc013140>
 8013364:	80af883a 	add	r23,r16,r2
 8013368:	b8ff7516 	blt	r23,r3,8013140 <__alt_data_end+0xfc013140>
 801336c:	b0800317 	ldw	r2,12(r22)
 8013370:	b0c00217 	ldw	r3,8(r22)
 8013374:	81bfff04 	addi	r6,r16,-4
 8013378:	01000904 	movi	r4,36
 801337c:	18800315 	stw	r2,12(r3)
 8013380:	10c00215 	stw	r3,8(r2)
 8013384:	b4800204 	addi	r18,r22,8
 8013388:	21bfe52e 	bgeu	r4,r6,8013320 <__alt_data_end+0xfc013320>
 801338c:	a80b883a 	mov	r5,r21
 8013390:	9009883a 	mov	r4,r18
 8013394:	8011e800 	call	8011e80 <memmove>
 8013398:	b821883a 	mov	r16,r23
 801339c:	b027883a 	mov	r19,r22
 80133a0:	003f8a06 	br	80131cc <__alt_data_end+0xfc0131cc>
 80133a4:	300b883a 	mov	r5,r6
 80133a8:	dfc00917 	ldw	ra,36(sp)
 80133ac:	df000817 	ldw	fp,32(sp)
 80133b0:	ddc00717 	ldw	r23,28(sp)
 80133b4:	dd800617 	ldw	r22,24(sp)
 80133b8:	dd400517 	ldw	r21,20(sp)
 80133bc:	dd000417 	ldw	r20,16(sp)
 80133c0:	dcc00317 	ldw	r19,12(sp)
 80133c4:	dc800217 	ldw	r18,8(sp)
 80133c8:	dc400117 	ldw	r17,4(sp)
 80133cc:	dc000017 	ldw	r16,0(sp)
 80133d0:	dec00a04 	addi	sp,sp,40
 80133d4:	80114481 	jmpi	8011448 <_malloc_r>
 80133d8:	a8c00017 	ldw	r3,0(r21)
 80133dc:	90c00015 	stw	r3,0(r18)
 80133e0:	a8c00117 	ldw	r3,4(r21)
 80133e4:	90c00115 	stw	r3,4(r18)
 80133e8:	00c006c4 	movi	r3,27
 80133ec:	19804536 	bltu	r3,r6,8013504 <_realloc_r+0x470>
 80133f0:	90800204 	addi	r2,r18,8
 80133f4:	a8c00204 	addi	r3,r21,8
 80133f8:	003f6306 	br	8013188 <__alt_data_end+0xfc013188>
 80133fc:	9005883a 	mov	r2,r18
 8013400:	a8c00017 	ldw	r3,0(r21)
 8013404:	b821883a 	mov	r16,r23
 8013408:	b027883a 	mov	r19,r22
 801340c:	10c00015 	stw	r3,0(r2)
 8013410:	a8c00117 	ldw	r3,4(r21)
 8013414:	10c00115 	stw	r3,4(r2)
 8013418:	a8c00217 	ldw	r3,8(r21)
 801341c:	10c00215 	stw	r3,8(r2)
 8013420:	003f6a06 	br	80131cc <__alt_data_end+0xfc0131cc>
 8013424:	9c67883a 	add	r19,r19,r17
 8013428:	4445c83a 	sub	r2,r8,r17
 801342c:	e4c00215 	stw	r19,8(fp)
 8013430:	10800054 	ori	r2,r2,1
 8013434:	98800115 	stw	r2,4(r19)
 8013438:	a8bfff17 	ldw	r2,-4(r21)
 801343c:	a009883a 	mov	r4,r20
 8013440:	1080004c 	andi	r2,r2,1
 8013444:	1462b03a 	or	r17,r2,r17
 8013448:	ac7fff15 	stw	r17,-4(r21)
 801344c:	801642c0 	call	801642c <__malloc_unlock>
 8013450:	a805883a 	mov	r2,r21
 8013454:	003f6b06 	br	8013204 <__alt_data_end+0xfc013204>
 8013458:	a80b883a 	mov	r5,r21
 801345c:	9009883a 	mov	r4,r18
 8013460:	8011e800 	call	8011e80 <memmove>
 8013464:	003f4e06 	br	80131a0 <__alt_data_end+0xfc0131a0>
 8013468:	89000404 	addi	r4,r17,16
 801346c:	b93fbc16 	blt	r23,r4,8013360 <__alt_data_end+0xfc013360>
 8013470:	b0800317 	ldw	r2,12(r22)
 8013474:	b0c00217 	ldw	r3,8(r22)
 8013478:	81bfff04 	addi	r6,r16,-4
 801347c:	01000904 	movi	r4,36
 8013480:	18800315 	stw	r2,12(r3)
 8013484:	10c00215 	stw	r3,8(r2)
 8013488:	b4800204 	addi	r18,r22,8
 801348c:	21804336 	bltu	r4,r6,801359c <_realloc_r+0x508>
 8013490:	008004c4 	movi	r2,19
 8013494:	11803f2e 	bgeu	r2,r6,8013594 <_realloc_r+0x500>
 8013498:	a8800017 	ldw	r2,0(r21)
 801349c:	b0800215 	stw	r2,8(r22)
 80134a0:	a8800117 	ldw	r2,4(r21)
 80134a4:	b0800315 	stw	r2,12(r22)
 80134a8:	008006c4 	movi	r2,27
 80134ac:	11803f36 	bltu	r2,r6,80135ac <_realloc_r+0x518>
 80134b0:	b0800404 	addi	r2,r22,16
 80134b4:	ad400204 	addi	r21,r21,8
 80134b8:	a8c00017 	ldw	r3,0(r21)
 80134bc:	10c00015 	stw	r3,0(r2)
 80134c0:	a8c00117 	ldw	r3,4(r21)
 80134c4:	10c00115 	stw	r3,4(r2)
 80134c8:	a8c00217 	ldw	r3,8(r21)
 80134cc:	10c00215 	stw	r3,8(r2)
 80134d0:	b447883a 	add	r3,r22,r17
 80134d4:	bc45c83a 	sub	r2,r23,r17
 80134d8:	e0c00215 	stw	r3,8(fp)
 80134dc:	10800054 	ori	r2,r2,1
 80134e0:	18800115 	stw	r2,4(r3)
 80134e4:	b0800117 	ldw	r2,4(r22)
 80134e8:	a009883a 	mov	r4,r20
 80134ec:	1080004c 	andi	r2,r2,1
 80134f0:	1462b03a 	or	r17,r2,r17
 80134f4:	b4400115 	stw	r17,4(r22)
 80134f8:	801642c0 	call	801642c <__malloc_unlock>
 80134fc:	9005883a 	mov	r2,r18
 8013500:	003f4006 	br	8013204 <__alt_data_end+0xfc013204>
 8013504:	a8c00217 	ldw	r3,8(r21)
 8013508:	90c00215 	stw	r3,8(r18)
 801350c:	a8c00317 	ldw	r3,12(r21)
 8013510:	90c00315 	stw	r3,12(r18)
 8013514:	30801126 	beq	r6,r2,801355c <_realloc_r+0x4c8>
 8013518:	90800404 	addi	r2,r18,16
 801351c:	a8c00404 	addi	r3,r21,16
 8013520:	003f1906 	br	8013188 <__alt_data_end+0xfc013188>
 8013524:	90ffff17 	ldw	r3,-4(r18)
 8013528:	00bfff04 	movi	r2,-4
 801352c:	a825883a 	mov	r18,r21
 8013530:	1884703a 	and	r2,r3,r2
 8013534:	80a1883a 	add	r16,r16,r2
 8013538:	003f2406 	br	80131cc <__alt_data_end+0xfc0131cc>
 801353c:	a8800217 	ldw	r2,8(r21)
 8013540:	b0800415 	stw	r2,16(r22)
 8013544:	a8800317 	ldw	r2,12(r21)
 8013548:	b0800515 	stw	r2,20(r22)
 801354c:	31000a26 	beq	r6,r4,8013578 <_realloc_r+0x4e4>
 8013550:	b0800604 	addi	r2,r22,24
 8013554:	ad400404 	addi	r21,r21,16
 8013558:	003fa906 	br	8013400 <__alt_data_end+0xfc013400>
 801355c:	a9000417 	ldw	r4,16(r21)
 8013560:	90800604 	addi	r2,r18,24
 8013564:	a8c00604 	addi	r3,r21,24
 8013568:	91000415 	stw	r4,16(r18)
 801356c:	a9000517 	ldw	r4,20(r21)
 8013570:	91000515 	stw	r4,20(r18)
 8013574:	003f0406 	br	8013188 <__alt_data_end+0xfc013188>
 8013578:	a8c00417 	ldw	r3,16(r21)
 801357c:	ad400604 	addi	r21,r21,24
 8013580:	b0800804 	addi	r2,r22,32
 8013584:	b0c00615 	stw	r3,24(r22)
 8013588:	a8ffff17 	ldw	r3,-4(r21)
 801358c:	b0c00715 	stw	r3,28(r22)
 8013590:	003f9b06 	br	8013400 <__alt_data_end+0xfc013400>
 8013594:	9005883a 	mov	r2,r18
 8013598:	003fc706 	br	80134b8 <__alt_data_end+0xfc0134b8>
 801359c:	a80b883a 	mov	r5,r21
 80135a0:	9009883a 	mov	r4,r18
 80135a4:	8011e800 	call	8011e80 <memmove>
 80135a8:	003fc906 	br	80134d0 <__alt_data_end+0xfc0134d0>
 80135ac:	a8800217 	ldw	r2,8(r21)
 80135b0:	b0800415 	stw	r2,16(r22)
 80135b4:	a8800317 	ldw	r2,12(r21)
 80135b8:	b0800515 	stw	r2,20(r22)
 80135bc:	31000726 	beq	r6,r4,80135dc <_realloc_r+0x548>
 80135c0:	b0800604 	addi	r2,r22,24
 80135c4:	ad400404 	addi	r21,r21,16
 80135c8:	003fbb06 	br	80134b8 <__alt_data_end+0xfc0134b8>
 80135cc:	a009883a 	mov	r4,r20
 80135d0:	801642c0 	call	801642c <__malloc_unlock>
 80135d4:	0005883a 	mov	r2,zero
 80135d8:	003f0a06 	br	8013204 <__alt_data_end+0xfc013204>
 80135dc:	a8c00417 	ldw	r3,16(r21)
 80135e0:	ad400604 	addi	r21,r21,24
 80135e4:	b0800804 	addi	r2,r22,32
 80135e8:	b0c00615 	stw	r3,24(r22)
 80135ec:	a8ffff17 	ldw	r3,-4(r21)
 80135f0:	b0c00715 	stw	r3,28(r22)
 80135f4:	003fb006 	br	80134b8 <__alt_data_end+0xfc0134b8>

080135f8 <_sbrk_r>:
 80135f8:	defffd04 	addi	sp,sp,-12
 80135fc:	dc000015 	stw	r16,0(sp)
 8013600:	04020d74 	movhi	r16,2101
 8013604:	dc400115 	stw	r17,4(sp)
 8013608:	842f6e04 	addi	r16,r16,-16968
 801360c:	2023883a 	mov	r17,r4
 8013610:	2809883a 	mov	r4,r5
 8013614:	dfc00215 	stw	ra,8(sp)
 8013618:	80000015 	stw	zero,0(r16)
 801361c:	80166140 	call	8016614 <sbrk>
 8013620:	00ffffc4 	movi	r3,-1
 8013624:	10c00526 	beq	r2,r3,801363c <_sbrk_r+0x44>
 8013628:	dfc00217 	ldw	ra,8(sp)
 801362c:	dc400117 	ldw	r17,4(sp)
 8013630:	dc000017 	ldw	r16,0(sp)
 8013634:	dec00304 	addi	sp,sp,12
 8013638:	f800283a 	ret
 801363c:	80c00017 	ldw	r3,0(r16)
 8013640:	183ff926 	beq	r3,zero,8013628 <__alt_data_end+0xfc013628>
 8013644:	88c00015 	stw	r3,0(r17)
 8013648:	003ff706 	br	8013628 <__alt_data_end+0xfc013628>

0801364c <__sread>:
 801364c:	defffe04 	addi	sp,sp,-8
 8013650:	dc000015 	stw	r16,0(sp)
 8013654:	2821883a 	mov	r16,r5
 8013658:	2940038f 	ldh	r5,14(r5)
 801365c:	dfc00115 	stw	ra,4(sp)
 8013660:	80155080 	call	8015508 <_read_r>
 8013664:	10000716 	blt	r2,zero,8013684 <__sread+0x38>
 8013668:	80c01417 	ldw	r3,80(r16)
 801366c:	1887883a 	add	r3,r3,r2
 8013670:	80c01415 	stw	r3,80(r16)
 8013674:	dfc00117 	ldw	ra,4(sp)
 8013678:	dc000017 	ldw	r16,0(sp)
 801367c:	dec00204 	addi	sp,sp,8
 8013680:	f800283a 	ret
 8013684:	80c0030b 	ldhu	r3,12(r16)
 8013688:	18fbffcc 	andi	r3,r3,61439
 801368c:	80c0030d 	sth	r3,12(r16)
 8013690:	dfc00117 	ldw	ra,4(sp)
 8013694:	dc000017 	ldw	r16,0(sp)
 8013698:	dec00204 	addi	sp,sp,8
 801369c:	f800283a 	ret

080136a0 <__seofread>:
 80136a0:	0005883a 	mov	r2,zero
 80136a4:	f800283a 	ret

080136a8 <__swrite>:
 80136a8:	2880030b 	ldhu	r2,12(r5)
 80136ac:	defffb04 	addi	sp,sp,-20
 80136b0:	dcc00315 	stw	r19,12(sp)
 80136b4:	dc800215 	stw	r18,8(sp)
 80136b8:	dc400115 	stw	r17,4(sp)
 80136bc:	dc000015 	stw	r16,0(sp)
 80136c0:	dfc00415 	stw	ra,16(sp)
 80136c4:	10c0400c 	andi	r3,r2,256
 80136c8:	2821883a 	mov	r16,r5
 80136cc:	2023883a 	mov	r17,r4
 80136d0:	3025883a 	mov	r18,r6
 80136d4:	3827883a 	mov	r19,r7
 80136d8:	18000526 	beq	r3,zero,80136f0 <__swrite+0x48>
 80136dc:	2940038f 	ldh	r5,14(r5)
 80136e0:	01c00084 	movi	r7,2
 80136e4:	000d883a 	mov	r6,zero
 80136e8:	80154a80 	call	80154a8 <_lseek_r>
 80136ec:	8080030b 	ldhu	r2,12(r16)
 80136f0:	8140038f 	ldh	r5,14(r16)
 80136f4:	10bbffcc 	andi	r2,r2,61439
 80136f8:	980f883a 	mov	r7,r19
 80136fc:	900d883a 	mov	r6,r18
 8013700:	8809883a 	mov	r4,r17
 8013704:	8080030d 	sth	r2,12(r16)
 8013708:	dfc00417 	ldw	ra,16(sp)
 801370c:	dcc00317 	ldw	r19,12(sp)
 8013710:	dc800217 	ldw	r18,8(sp)
 8013714:	dc400117 	ldw	r17,4(sp)
 8013718:	dc000017 	ldw	r16,0(sp)
 801371c:	dec00504 	addi	sp,sp,20
 8013720:	8014f5c1 	jmpi	8014f5c <_write_r>

08013724 <__sseek>:
 8013724:	defffe04 	addi	sp,sp,-8
 8013728:	dc000015 	stw	r16,0(sp)
 801372c:	2821883a 	mov	r16,r5
 8013730:	2940038f 	ldh	r5,14(r5)
 8013734:	dfc00115 	stw	ra,4(sp)
 8013738:	80154a80 	call	80154a8 <_lseek_r>
 801373c:	00ffffc4 	movi	r3,-1
 8013740:	10c00826 	beq	r2,r3,8013764 <__sseek+0x40>
 8013744:	80c0030b 	ldhu	r3,12(r16)
 8013748:	80801415 	stw	r2,80(r16)
 801374c:	18c40014 	ori	r3,r3,4096
 8013750:	80c0030d 	sth	r3,12(r16)
 8013754:	dfc00117 	ldw	ra,4(sp)
 8013758:	dc000017 	ldw	r16,0(sp)
 801375c:	dec00204 	addi	sp,sp,8
 8013760:	f800283a 	ret
 8013764:	80c0030b 	ldhu	r3,12(r16)
 8013768:	18fbffcc 	andi	r3,r3,61439
 801376c:	80c0030d 	sth	r3,12(r16)
 8013770:	dfc00117 	ldw	ra,4(sp)
 8013774:	dc000017 	ldw	r16,0(sp)
 8013778:	dec00204 	addi	sp,sp,8
 801377c:	f800283a 	ret

08013780 <__sclose>:
 8013780:	2940038f 	ldh	r5,14(r5)
 8013784:	8014fbc1 	jmpi	8014fbc <_close_r>

08013788 <strcmp>:
 8013788:	2144b03a 	or	r2,r4,r5
 801378c:	108000cc 	andi	r2,r2,3
 8013790:	1000171e 	bne	r2,zero,80137f0 <strcmp+0x68>
 8013794:	20800017 	ldw	r2,0(r4)
 8013798:	28c00017 	ldw	r3,0(r5)
 801379c:	10c0141e 	bne	r2,r3,80137f0 <strcmp+0x68>
 80137a0:	027fbff4 	movhi	r9,65279
 80137a4:	4a7fbfc4 	addi	r9,r9,-257
 80137a8:	0086303a 	nor	r3,zero,r2
 80137ac:	02202074 	movhi	r8,32897
 80137b0:	1245883a 	add	r2,r2,r9
 80137b4:	42202004 	addi	r8,r8,-32640
 80137b8:	10c4703a 	and	r2,r2,r3
 80137bc:	1204703a 	and	r2,r2,r8
 80137c0:	10000226 	beq	r2,zero,80137cc <strcmp+0x44>
 80137c4:	00002306 	br	8013854 <strcmp+0xcc>
 80137c8:	1000221e 	bne	r2,zero,8013854 <strcmp+0xcc>
 80137cc:	21000104 	addi	r4,r4,4
 80137d0:	20c00017 	ldw	r3,0(r4)
 80137d4:	29400104 	addi	r5,r5,4
 80137d8:	29800017 	ldw	r6,0(r5)
 80137dc:	1a4f883a 	add	r7,r3,r9
 80137e0:	00c4303a 	nor	r2,zero,r3
 80137e4:	3884703a 	and	r2,r7,r2
 80137e8:	1204703a 	and	r2,r2,r8
 80137ec:	19bff626 	beq	r3,r6,80137c8 <__alt_data_end+0xfc0137c8>
 80137f0:	20800003 	ldbu	r2,0(r4)
 80137f4:	10c03fcc 	andi	r3,r2,255
 80137f8:	18c0201c 	xori	r3,r3,128
 80137fc:	18ffe004 	addi	r3,r3,-128
 8013800:	18000c26 	beq	r3,zero,8013834 <strcmp+0xac>
 8013804:	29800007 	ldb	r6,0(r5)
 8013808:	19800326 	beq	r3,r6,8013818 <strcmp+0x90>
 801380c:	00001306 	br	801385c <strcmp+0xd4>
 8013810:	29800007 	ldb	r6,0(r5)
 8013814:	11800b1e 	bne	r2,r6,8013844 <strcmp+0xbc>
 8013818:	21000044 	addi	r4,r4,1
 801381c:	20c00003 	ldbu	r3,0(r4)
 8013820:	29400044 	addi	r5,r5,1
 8013824:	18803fcc 	andi	r2,r3,255
 8013828:	1080201c 	xori	r2,r2,128
 801382c:	10bfe004 	addi	r2,r2,-128
 8013830:	103ff71e 	bne	r2,zero,8013810 <__alt_data_end+0xfc013810>
 8013834:	0007883a 	mov	r3,zero
 8013838:	28800003 	ldbu	r2,0(r5)
 801383c:	1885c83a 	sub	r2,r3,r2
 8013840:	f800283a 	ret
 8013844:	28800003 	ldbu	r2,0(r5)
 8013848:	18c03fcc 	andi	r3,r3,255
 801384c:	1885c83a 	sub	r2,r3,r2
 8013850:	f800283a 	ret
 8013854:	0005883a 	mov	r2,zero
 8013858:	f800283a 	ret
 801385c:	10c03fcc 	andi	r3,r2,255
 8013860:	003ff506 	br	8013838 <__alt_data_end+0xfc013838>

08013864 <__sprint_r.part.0>:
 8013864:	28801917 	ldw	r2,100(r5)
 8013868:	defff604 	addi	sp,sp,-40
 801386c:	dd400515 	stw	r21,20(sp)
 8013870:	dfc00915 	stw	ra,36(sp)
 8013874:	df000815 	stw	fp,32(sp)
 8013878:	ddc00715 	stw	r23,28(sp)
 801387c:	dd800615 	stw	r22,24(sp)
 8013880:	dd000415 	stw	r20,16(sp)
 8013884:	dcc00315 	stw	r19,12(sp)
 8013888:	dc800215 	stw	r18,8(sp)
 801388c:	dc400115 	stw	r17,4(sp)
 8013890:	dc000015 	stw	r16,0(sp)
 8013894:	1088000c 	andi	r2,r2,8192
 8013898:	302b883a 	mov	r21,r6
 801389c:	10002e26 	beq	r2,zero,8013958 <__sprint_r.part.0+0xf4>
 80138a0:	30800217 	ldw	r2,8(r6)
 80138a4:	35800017 	ldw	r22,0(r6)
 80138a8:	10002926 	beq	r2,zero,8013950 <__sprint_r.part.0+0xec>
 80138ac:	2827883a 	mov	r19,r5
 80138b0:	2029883a 	mov	r20,r4
 80138b4:	b5c00104 	addi	r23,r22,4
 80138b8:	04bfffc4 	movi	r18,-1
 80138bc:	bc400017 	ldw	r17,0(r23)
 80138c0:	b4000017 	ldw	r16,0(r22)
 80138c4:	0039883a 	mov	fp,zero
 80138c8:	8822d0ba 	srli	r17,r17,2
 80138cc:	8800031e 	bne	r17,zero,80138dc <__sprint_r.part.0+0x78>
 80138d0:	00001806 	br	8013934 <__sprint_r.part.0+0xd0>
 80138d4:	84000104 	addi	r16,r16,4
 80138d8:	8f001526 	beq	r17,fp,8013930 <__sprint_r.part.0+0xcc>
 80138dc:	81400017 	ldw	r5,0(r16)
 80138e0:	980d883a 	mov	r6,r19
 80138e4:	a009883a 	mov	r4,r20
 80138e8:	80153540 	call	8015354 <_fputwc_r>
 80138ec:	e7000044 	addi	fp,fp,1
 80138f0:	14bff81e 	bne	r2,r18,80138d4 <__alt_data_end+0xfc0138d4>
 80138f4:	9005883a 	mov	r2,r18
 80138f8:	a8000215 	stw	zero,8(r21)
 80138fc:	a8000115 	stw	zero,4(r21)
 8013900:	dfc00917 	ldw	ra,36(sp)
 8013904:	df000817 	ldw	fp,32(sp)
 8013908:	ddc00717 	ldw	r23,28(sp)
 801390c:	dd800617 	ldw	r22,24(sp)
 8013910:	dd400517 	ldw	r21,20(sp)
 8013914:	dd000417 	ldw	r20,16(sp)
 8013918:	dcc00317 	ldw	r19,12(sp)
 801391c:	dc800217 	ldw	r18,8(sp)
 8013920:	dc400117 	ldw	r17,4(sp)
 8013924:	dc000017 	ldw	r16,0(sp)
 8013928:	dec00a04 	addi	sp,sp,40
 801392c:	f800283a 	ret
 8013930:	a8800217 	ldw	r2,8(r21)
 8013934:	8c63883a 	add	r17,r17,r17
 8013938:	8c63883a 	add	r17,r17,r17
 801393c:	1445c83a 	sub	r2,r2,r17
 8013940:	a8800215 	stw	r2,8(r21)
 8013944:	b5800204 	addi	r22,r22,8
 8013948:	bdc00204 	addi	r23,r23,8
 801394c:	103fdb1e 	bne	r2,zero,80138bc <__alt_data_end+0xfc0138bc>
 8013950:	0005883a 	mov	r2,zero
 8013954:	003fe806 	br	80138f8 <__alt_data_end+0xfc0138f8>
 8013958:	8010b600 	call	8010b60 <__sfvwrite_r>
 801395c:	003fe606 	br	80138f8 <__alt_data_end+0xfc0138f8>

08013960 <__sprint_r>:
 8013960:	30c00217 	ldw	r3,8(r6)
 8013964:	18000126 	beq	r3,zero,801396c <__sprint_r+0xc>
 8013968:	80138641 	jmpi	8013864 <__sprint_r.part.0>
 801396c:	30000115 	stw	zero,4(r6)
 8013970:	0005883a 	mov	r2,zero
 8013974:	f800283a 	ret

08013978 <___vfiprintf_internal_r>:
 8013978:	deffca04 	addi	sp,sp,-216
 801397c:	dd403115 	stw	r21,196(sp)
 8013980:	dfc03515 	stw	ra,212(sp)
 8013984:	df003415 	stw	fp,208(sp)
 8013988:	ddc03315 	stw	r23,204(sp)
 801398c:	dd803215 	stw	r22,200(sp)
 8013990:	dd003015 	stw	r20,192(sp)
 8013994:	dcc02f15 	stw	r19,188(sp)
 8013998:	dc802e15 	stw	r18,184(sp)
 801399c:	dc402d15 	stw	r17,180(sp)
 80139a0:	dc002c15 	stw	r16,176(sp)
 80139a4:	d9002115 	stw	r4,132(sp)
 80139a8:	d9402015 	stw	r5,128(sp)
 80139ac:	d9c02215 	stw	r7,136(sp)
 80139b0:	302b883a 	mov	r21,r6
 80139b4:	20000226 	beq	r4,zero,80139c0 <___vfiprintf_internal_r+0x48>
 80139b8:	20800e17 	ldw	r2,56(r4)
 80139bc:	1000cf26 	beq	r2,zero,8013cfc <___vfiprintf_internal_r+0x384>
 80139c0:	d8c02017 	ldw	r3,128(sp)
 80139c4:	1880030b 	ldhu	r2,12(r3)
 80139c8:	10c8000c 	andi	r3,r2,8192
 80139cc:	1800071e 	bne	r3,zero,80139ec <___vfiprintf_internal_r+0x74>
 80139d0:	d9402017 	ldw	r5,128(sp)
 80139d4:	00f7ffc4 	movi	r3,-8193
 80139d8:	10880014 	ori	r2,r2,8192
 80139dc:	29001917 	ldw	r4,100(r5)
 80139e0:	2880030d 	sth	r2,12(r5)
 80139e4:	20c6703a 	and	r3,r4,r3
 80139e8:	28c01915 	stw	r3,100(r5)
 80139ec:	10c0020c 	andi	r3,r2,8
 80139f0:	1800a526 	beq	r3,zero,8013c88 <___vfiprintf_internal_r+0x310>
 80139f4:	d9002017 	ldw	r4,128(sp)
 80139f8:	20c00417 	ldw	r3,16(r4)
 80139fc:	1800a226 	beq	r3,zero,8013c88 <___vfiprintf_internal_r+0x310>
 8013a00:	1080068c 	andi	r2,r2,26
 8013a04:	00c00284 	movi	r3,10
 8013a08:	10c0a826 	beq	r2,r3,8013cac <___vfiprintf_internal_r+0x334>
 8013a0c:	d9001a04 	addi	r4,sp,104
 8013a10:	d94019c4 	addi	r5,sp,103
 8013a14:	04820d74 	movhi	r18,2101
 8013a18:	2145c83a 	sub	r2,r4,r5
 8013a1c:	94a1ae04 	addi	r18,r18,-31048
 8013a20:	d9001e15 	stw	r4,120(sp)
 8013a24:	d9401f15 	stw	r5,124(sp)
 8013a28:	dec01a15 	stw	sp,104(sp)
 8013a2c:	d8001c15 	stw	zero,112(sp)
 8013a30:	d8001b15 	stw	zero,108(sp)
 8013a34:	d811883a 	mov	r8,sp
 8013a38:	d8002615 	stw	zero,152(sp)
 8013a3c:	d8002415 	stw	zero,144(sp)
 8013a40:	d8802815 	stw	r2,160(sp)
 8013a44:	a82d883a 	mov	r22,r21
 8013a48:	b0800007 	ldb	r2,0(r22)
 8013a4c:	10040d26 	beq	r2,zero,8014a84 <___vfiprintf_internal_r+0x110c>
 8013a50:	00c00944 	movi	r3,37
 8013a54:	b029883a 	mov	r20,r22
 8013a58:	10c0021e 	bne	r2,r3,8013a64 <___vfiprintf_internal_r+0xec>
 8013a5c:	00001606 	br	8013ab8 <___vfiprintf_internal_r+0x140>
 8013a60:	10c00326 	beq	r2,r3,8013a70 <___vfiprintf_internal_r+0xf8>
 8013a64:	a5000044 	addi	r20,r20,1
 8013a68:	a0800007 	ldb	r2,0(r20)
 8013a6c:	103ffc1e 	bne	r2,zero,8013a60 <__alt_data_end+0xfc013a60>
 8013a70:	a5a1c83a 	sub	r16,r20,r22
 8013a74:	80001026 	beq	r16,zero,8013ab8 <___vfiprintf_internal_r+0x140>
 8013a78:	d8c01c17 	ldw	r3,112(sp)
 8013a7c:	d8801b17 	ldw	r2,108(sp)
 8013a80:	45800015 	stw	r22,0(r8)
 8013a84:	80c7883a 	add	r3,r16,r3
 8013a88:	10800044 	addi	r2,r2,1
 8013a8c:	44000115 	stw	r16,4(r8)
 8013a90:	d8c01c15 	stw	r3,112(sp)
 8013a94:	d8801b15 	stw	r2,108(sp)
 8013a98:	010001c4 	movi	r4,7
 8013a9c:	2080750e 	bge	r4,r2,8013c74 <___vfiprintf_internal_r+0x2fc>
 8013aa0:	1803951e 	bne	r3,zero,80148f8 <___vfiprintf_internal_r+0xf80>
 8013aa4:	d8c02417 	ldw	r3,144(sp)
 8013aa8:	d8001b15 	stw	zero,108(sp)
 8013aac:	d811883a 	mov	r8,sp
 8013ab0:	1c07883a 	add	r3,r3,r16
 8013ab4:	d8c02415 	stw	r3,144(sp)
 8013ab8:	a0800007 	ldb	r2,0(r20)
 8013abc:	1002e026 	beq	r2,zero,8014640 <___vfiprintf_internal_r+0xcc8>
 8013ac0:	a5800044 	addi	r22,r20,1
 8013ac4:	a0c00047 	ldb	r3,1(r20)
 8013ac8:	d8001d85 	stb	zero,118(sp)
 8013acc:	0027883a 	mov	r19,zero
 8013ad0:	d8002305 	stb	zero,140(sp)
 8013ad4:	043fffc4 	movi	r16,-1
 8013ad8:	d8002515 	stw	zero,148(sp)
 8013adc:	0023883a 	mov	r17,zero
 8013ae0:	05001604 	movi	r20,88
 8013ae4:	05400244 	movi	r21,9
 8013ae8:	402f883a 	mov	r23,r8
 8013aec:	b5800044 	addi	r22,r22,1
 8013af0:	18bff804 	addi	r2,r3,-32
 8013af4:	a0827736 	bltu	r20,r2,80144d4 <___vfiprintf_internal_r+0xb5c>
 8013af8:	100490ba 	slli	r2,r2,2
 8013afc:	01020074 	movhi	r4,2049
 8013b00:	210ec404 	addi	r4,r4,15120
 8013b04:	1105883a 	add	r2,r2,r4
 8013b08:	10800017 	ldw	r2,0(r2)
 8013b0c:	1000683a 	jmp	r2
 8013b10:	080141d4 	ori	zero,at,1287
 8013b14:	080144d4 	ori	zero,at,1299
 8013b18:	080144d4 	ori	zero,at,1299
 8013b1c:	080141f0 	cmpltui	zero,at,1287
 8013b20:	080144d4 	ori	zero,at,1299
 8013b24:	080144d4 	ori	zero,at,1299
 8013b28:	080144d4 	ori	zero,at,1299
 8013b2c:	080144d4 	ori	zero,at,1299
 8013b30:	080144d4 	ori	zero,at,1299
 8013b34:	080144d4 	ori	zero,at,1299
 8013b38:	080143f8 	rdprs	zero,at,1295
 8013b3c:	0801441c 	xori	zero,at,1296
 8013b40:	080144d4 	ori	zero,at,1299
 8013b44:	08013d14 	ori	zero,at,1268
 8013b48:	08014430 	cmpltui	zero,at,1296
 8013b4c:	080144d4 	ori	zero,at,1299
 8013b50:	080141fc 	xorhi	zero,at,1287
 8013b54:	08014208 	cmpgei	zero,at,1288
 8013b58:	08014208 	cmpgei	zero,at,1288
 8013b5c:	08014208 	cmpgei	zero,at,1288
 8013b60:	08014208 	cmpgei	zero,at,1288
 8013b64:	08014208 	cmpgei	zero,at,1288
 8013b68:	08014208 	cmpgei	zero,at,1288
 8013b6c:	08014208 	cmpgei	zero,at,1288
 8013b70:	08014208 	cmpgei	zero,at,1288
 8013b74:	08014208 	cmpgei	zero,at,1288
 8013b78:	080144d4 	ori	zero,at,1299
 8013b7c:	080144d4 	ori	zero,at,1299
 8013b80:	080144d4 	ori	zero,at,1299
 8013b84:	080144d4 	ori	zero,at,1299
 8013b88:	080144d4 	ori	zero,at,1299
 8013b8c:	080144d4 	ori	zero,at,1299
 8013b90:	080144d4 	ori	zero,at,1299
 8013b94:	080144d4 	ori	zero,at,1299
 8013b98:	080144d4 	ori	zero,at,1299
 8013b9c:	080144d4 	ori	zero,at,1299
 8013ba0:	08014248 	cmpgei	zero,at,1289
 8013ba4:	080144d4 	ori	zero,at,1299
 8013ba8:	080144d4 	ori	zero,at,1299
 8013bac:	080144d4 	ori	zero,at,1299
 8013bb0:	080144d4 	ori	zero,at,1299
 8013bb4:	080144d4 	ori	zero,at,1299
 8013bb8:	080144d4 	ori	zero,at,1299
 8013bbc:	080144d4 	ori	zero,at,1299
 8013bc0:	080144d4 	ori	zero,at,1299
 8013bc4:	080144d4 	ori	zero,at,1299
 8013bc8:	080144d4 	ori	zero,at,1299
 8013bcc:	08014284 	addi	zero,at,1290
 8013bd0:	080144d4 	ori	zero,at,1299
 8013bd4:	080144d4 	ori	zero,at,1299
 8013bd8:	080144d4 	ori	zero,at,1299
 8013bdc:	080144d4 	ori	zero,at,1299
 8013be0:	080144d4 	ori	zero,at,1299
 8013be4:	080142e0 	cmpeqi	zero,at,1291
 8013be8:	080144d4 	ori	zero,at,1299
 8013bec:	080144d4 	ori	zero,at,1299
 8013bf0:	08014354 	ori	zero,at,1293
 8013bf4:	080144d4 	ori	zero,at,1299
 8013bf8:	080144d4 	ori	zero,at,1299
 8013bfc:	080144d4 	ori	zero,at,1299
 8013c00:	080144d4 	ori	zero,at,1299
 8013c04:	080144d4 	ori	zero,at,1299
 8013c08:	080144d4 	ori	zero,at,1299
 8013c0c:	080144d4 	ori	zero,at,1299
 8013c10:	080144d4 	ori	zero,at,1299
 8013c14:	080144d4 	ori	zero,at,1299
 8013c18:	080144d4 	ori	zero,at,1299
 8013c1c:	080140fc 	xorhi	zero,at,1283
 8013c20:	0801412c 	andhi	zero,at,1284
 8013c24:	080144d4 	ori	zero,at,1299
 8013c28:	080144d4 	ori	zero,at,1299
 8013c2c:	080144d4 	ori	zero,at,1299
 8013c30:	0801447c 	xorhi	zero,at,1297
 8013c34:	0801412c 	andhi	zero,at,1284
 8013c38:	080144d4 	ori	zero,at,1299
 8013c3c:	080144d4 	ori	zero,at,1299
 8013c40:	08013fd4 	ori	zero,at,1279
 8013c44:	080144d4 	ori	zero,at,1299
 8013c48:	08013fe8 	cmpgeui	zero,at,1279
 8013c4c:	08014020 	cmpeqi	zero,at,1280
 8013c50:	08013d20 	cmpeqi	zero,at,1268
 8013c54:	08013fc8 	cmpgei	zero,at,1279
 8013c58:	080144d4 	ori	zero,at,1299
 8013c5c:	08014394 	ori	zero,at,1294
 8013c60:	080144d4 	ori	zero,at,1299
 8013c64:	080143e0 	cmpeqi	zero,at,1295
 8013c68:	080144d4 	ori	zero,at,1299
 8013c6c:	080144d4 	ori	zero,at,1299
 8013c70:	080140a4 	muli	zero,at,1282
 8013c74:	42000204 	addi	r8,r8,8
 8013c78:	d8c02417 	ldw	r3,144(sp)
 8013c7c:	1c07883a 	add	r3,r3,r16
 8013c80:	d8c02415 	stw	r3,144(sp)
 8013c84:	003f8c06 	br	8013ab8 <__alt_data_end+0xfc013ab8>
 8013c88:	d9402017 	ldw	r5,128(sp)
 8013c8c:	d9002117 	ldw	r4,132(sp)
 8013c90:	800e6d00 	call	800e6d0 <__swsetup_r>
 8013c94:	1003c11e 	bne	r2,zero,8014b9c <___vfiprintf_internal_r+0x1224>
 8013c98:	d9402017 	ldw	r5,128(sp)
 8013c9c:	00c00284 	movi	r3,10
 8013ca0:	2880030b 	ldhu	r2,12(r5)
 8013ca4:	1080068c 	andi	r2,r2,26
 8013ca8:	10ff581e 	bne	r2,r3,8013a0c <__alt_data_end+0xfc013a0c>
 8013cac:	d8c02017 	ldw	r3,128(sp)
 8013cb0:	1880038f 	ldh	r2,14(r3)
 8013cb4:	103f5516 	blt	r2,zero,8013a0c <__alt_data_end+0xfc013a0c>
 8013cb8:	d9c02217 	ldw	r7,136(sp)
 8013cbc:	d9002117 	ldw	r4,132(sp)
 8013cc0:	a80d883a 	mov	r6,r21
 8013cc4:	180b883a 	mov	r5,r3
 8013cc8:	8014ea00 	call	8014ea0 <__sbprintf>
 8013ccc:	dfc03517 	ldw	ra,212(sp)
 8013cd0:	df003417 	ldw	fp,208(sp)
 8013cd4:	ddc03317 	ldw	r23,204(sp)
 8013cd8:	dd803217 	ldw	r22,200(sp)
 8013cdc:	dd403117 	ldw	r21,196(sp)
 8013ce0:	dd003017 	ldw	r20,192(sp)
 8013ce4:	dcc02f17 	ldw	r19,188(sp)
 8013ce8:	dc802e17 	ldw	r18,184(sp)
 8013cec:	dc402d17 	ldw	r17,180(sp)
 8013cf0:	dc002c17 	ldw	r16,176(sp)
 8013cf4:	dec03604 	addi	sp,sp,216
 8013cf8:	f800283a 	ret
 8013cfc:	80106dc0 	call	80106dc <__sinit>
 8013d00:	003f2f06 	br	80139c0 <__alt_data_end+0xfc0139c0>
 8013d04:	d8c02517 	ldw	r3,148(sp)
 8013d08:	d8802215 	stw	r2,136(sp)
 8013d0c:	00c7c83a 	sub	r3,zero,r3
 8013d10:	d8c02515 	stw	r3,148(sp)
 8013d14:	8c400114 	ori	r17,r17,4
 8013d18:	b0c00007 	ldb	r3,0(r22)
 8013d1c:	003f7306 	br	8013aec <__alt_data_end+0xfc013aec>
 8013d20:	00800c04 	movi	r2,48
 8013d24:	d9402217 	ldw	r5,136(sp)
 8013d28:	d8801d05 	stb	r2,116(sp)
 8013d2c:	00801e04 	movi	r2,120
 8013d30:	d8801d45 	stb	r2,117(sp)
 8013d34:	d8001d85 	stb	zero,118(sp)
 8013d38:	b811883a 	mov	r8,r23
 8013d3c:	28c00104 	addi	r3,r5,4
 8013d40:	2cc00017 	ldw	r19,0(r5)
 8013d44:	0029883a 	mov	r20,zero
 8013d48:	88800094 	ori	r2,r17,2
 8013d4c:	80032516 	blt	r16,zero,80149e4 <___vfiprintf_internal_r+0x106c>
 8013d50:	00bfdfc4 	movi	r2,-129
 8013d54:	88a2703a 	and	r17,r17,r2
 8013d58:	d8c02215 	stw	r3,136(sp)
 8013d5c:	8c400094 	ori	r17,r17,2
 8013d60:	98032a1e 	bne	r19,zero,8014a0c <___vfiprintf_internal_r+0x1094>
 8013d64:	00820d74 	movhi	r2,2101
 8013d68:	10a14e04 	addi	r2,r2,-31432
 8013d6c:	d8802615 	stw	r2,152(sp)
 8013d70:	002b883a 	mov	r21,zero
 8013d74:	8001741e 	bne	r16,zero,8014348 <___vfiprintf_internal_r+0x9d0>
 8013d78:	0021883a 	mov	r16,zero
 8013d7c:	0029883a 	mov	r20,zero
 8013d80:	ddc01a04 	addi	r23,sp,104
 8013d84:	8027883a 	mov	r19,r16
 8013d88:	8500010e 	bge	r16,r20,8013d90 <___vfiprintf_internal_r+0x418>
 8013d8c:	a027883a 	mov	r19,r20
 8013d90:	ad403fcc 	andi	r21,r21,255
 8013d94:	ad40201c 	xori	r21,r21,128
 8013d98:	ad7fe004 	addi	r21,r21,-128
 8013d9c:	a8000126 	beq	r21,zero,8013da4 <___vfiprintf_internal_r+0x42c>
 8013da0:	9cc00044 	addi	r19,r19,1
 8013da4:	89c0008c 	andi	r7,r17,2
 8013da8:	38000126 	beq	r7,zero,8013db0 <___vfiprintf_internal_r+0x438>
 8013dac:	9cc00084 	addi	r19,r19,2
 8013db0:	88c0210c 	andi	r3,r17,132
 8013db4:	1801dd1e 	bne	r3,zero,801452c <___vfiprintf_internal_r+0xbb4>
 8013db8:	d9402517 	ldw	r5,148(sp)
 8013dbc:	2cebc83a 	sub	r21,r5,r19
 8013dc0:	0541da0e 	bge	zero,r21,801452c <___vfiprintf_internal_r+0xbb4>
 8013dc4:	07000404 	movi	fp,16
 8013dc8:	d8801c17 	ldw	r2,112(sp)
 8013dcc:	e543be0e 	bge	fp,r21,8014cc8 <___vfiprintf_internal_r+0x1350>
 8013dd0:	01420d74 	movhi	r5,2101
 8013dd4:	2961b204 	addi	r5,r5,-31032
 8013dd8:	dc002715 	stw	r16,156(sp)
 8013ddc:	d9801b17 	ldw	r6,108(sp)
 8013de0:	a821883a 	mov	r16,r21
 8013de4:	d9402315 	stw	r5,140(sp)
 8013de8:	028001c4 	movi	r10,7
 8013dec:	d9c02915 	stw	r7,164(sp)
 8013df0:	182b883a 	mov	r21,r3
 8013df4:	00000506 	br	8013e0c <___vfiprintf_internal_r+0x494>
 8013df8:	31000084 	addi	r4,r6,2
 8013dfc:	42000204 	addi	r8,r8,8
 8013e00:	180d883a 	mov	r6,r3
 8013e04:	843ffc04 	addi	r16,r16,-16
 8013e08:	e4000f0e 	bge	fp,r16,8013e48 <___vfiprintf_internal_r+0x4d0>
 8013e0c:	01020d74 	movhi	r4,2101
 8013e10:	10800404 	addi	r2,r2,16
 8013e14:	30c00044 	addi	r3,r6,1
 8013e18:	2121b204 	addi	r4,r4,-31032
 8013e1c:	41000015 	stw	r4,0(r8)
 8013e20:	47000115 	stw	fp,4(r8)
 8013e24:	d8801c15 	stw	r2,112(sp)
 8013e28:	d8c01b15 	stw	r3,108(sp)
 8013e2c:	50fff20e 	bge	r10,r3,8013df8 <__alt_data_end+0xfc013df8>
 8013e30:	1001b21e 	bne	r2,zero,80144fc <___vfiprintf_internal_r+0xb84>
 8013e34:	843ffc04 	addi	r16,r16,-16
 8013e38:	000d883a 	mov	r6,zero
 8013e3c:	01000044 	movi	r4,1
 8013e40:	d811883a 	mov	r8,sp
 8013e44:	e43ff116 	blt	fp,r16,8013e0c <__alt_data_end+0xfc013e0c>
 8013e48:	a807883a 	mov	r3,r21
 8013e4c:	d9c02917 	ldw	r7,164(sp)
 8013e50:	802b883a 	mov	r21,r16
 8013e54:	dc002717 	ldw	r16,156(sp)
 8013e58:	d9402317 	ldw	r5,140(sp)
 8013e5c:	a885883a 	add	r2,r21,r2
 8013e60:	45400115 	stw	r21,4(r8)
 8013e64:	41400015 	stw	r5,0(r8)
 8013e68:	d8801c15 	stw	r2,112(sp)
 8013e6c:	d9001b15 	stw	r4,108(sp)
 8013e70:	014001c4 	movi	r5,7
 8013e74:	29026216 	blt	r5,r4,8014800 <___vfiprintf_internal_r+0xe88>
 8013e78:	d9801d87 	ldb	r6,118(sp)
 8013e7c:	42000204 	addi	r8,r8,8
 8013e80:	21400044 	addi	r5,r4,1
 8013e84:	3001ae1e 	bne	r6,zero,8014540 <___vfiprintf_internal_r+0xbc8>
 8013e88:	3801bb26 	beq	r7,zero,8014578 <___vfiprintf_internal_r+0xc00>
 8013e8c:	d9001d04 	addi	r4,sp,116
 8013e90:	10800084 	addi	r2,r2,2
 8013e94:	41000015 	stw	r4,0(r8)
 8013e98:	01000084 	movi	r4,2
 8013e9c:	41000115 	stw	r4,4(r8)
 8013ea0:	d8801c15 	stw	r2,112(sp)
 8013ea4:	d9401b15 	stw	r5,108(sp)
 8013ea8:	010001c4 	movi	r4,7
 8013eac:	2142680e 	bge	r4,r5,8014850 <___vfiprintf_internal_r+0xed8>
 8013eb0:	1002b11e 	bne	r2,zero,8014978 <___vfiprintf_internal_r+0x1000>
 8013eb4:	01802004 	movi	r6,128
 8013eb8:	01400044 	movi	r5,1
 8013ebc:	0009883a 	mov	r4,zero
 8013ec0:	d811883a 	mov	r8,sp
 8013ec4:	1981ae1e 	bne	r3,r6,8014580 <___vfiprintf_internal_r+0xc08>
 8013ec8:	d8c02517 	ldw	r3,148(sp)
 8013ecc:	1cf9c83a 	sub	fp,r3,r19
 8013ed0:	0701ab0e 	bge	zero,fp,8014580 <___vfiprintf_internal_r+0xc08>
 8013ed4:	05400404 	movi	r21,16
 8013ed8:	af03a90e 	bge	r21,fp,8014d80 <___vfiprintf_internal_r+0x1408>
 8013edc:	01420d74 	movhi	r5,2101
 8013ee0:	2961ae04 	addi	r5,r5,-31048
 8013ee4:	d9402315 	stw	r5,140(sp)
 8013ee8:	01c001c4 	movi	r7,7
 8013eec:	00000506 	br	8013f04 <___vfiprintf_internal_r+0x58c>
 8013ef0:	21800084 	addi	r6,r4,2
 8013ef4:	42000204 	addi	r8,r8,8
 8013ef8:	1809883a 	mov	r4,r3
 8013efc:	e73ffc04 	addi	fp,fp,-16
 8013f00:	af000d0e 	bge	r21,fp,8013f38 <___vfiprintf_internal_r+0x5c0>
 8013f04:	10800404 	addi	r2,r2,16
 8013f08:	20c00044 	addi	r3,r4,1
 8013f0c:	44800015 	stw	r18,0(r8)
 8013f10:	45400115 	stw	r21,4(r8)
 8013f14:	d8801c15 	stw	r2,112(sp)
 8013f18:	d8c01b15 	stw	r3,108(sp)
 8013f1c:	38fff40e 	bge	r7,r3,8013ef0 <__alt_data_end+0xfc013ef0>
 8013f20:	10022b1e 	bne	r2,zero,80147d0 <___vfiprintf_internal_r+0xe58>
 8013f24:	e73ffc04 	addi	fp,fp,-16
 8013f28:	01800044 	movi	r6,1
 8013f2c:	0009883a 	mov	r4,zero
 8013f30:	d811883a 	mov	r8,sp
 8013f34:	af3ff316 	blt	r21,fp,8013f04 <__alt_data_end+0xfc013f04>
 8013f38:	d8c02317 	ldw	r3,140(sp)
 8013f3c:	1705883a 	add	r2,r2,fp
 8013f40:	47000115 	stw	fp,4(r8)
 8013f44:	40c00015 	stw	r3,0(r8)
 8013f48:	d8801c15 	stw	r2,112(sp)
 8013f4c:	d9801b15 	stw	r6,108(sp)
 8013f50:	00c001c4 	movi	r3,7
 8013f54:	19829416 	blt	r3,r6,80149a8 <___vfiprintf_internal_r+0x1030>
 8013f58:	8521c83a 	sub	r16,r16,r20
 8013f5c:	42000204 	addi	r8,r8,8
 8013f60:	31400044 	addi	r5,r6,1
 8013f64:	3009883a 	mov	r4,r6
 8013f68:	04018716 	blt	zero,r16,8014588 <___vfiprintf_internal_r+0xc10>
 8013f6c:	a085883a 	add	r2,r20,r2
 8013f70:	45c00015 	stw	r23,0(r8)
 8013f74:	45000115 	stw	r20,4(r8)
 8013f78:	d8801c15 	stw	r2,112(sp)
 8013f7c:	d9401b15 	stw	r5,108(sp)
 8013f80:	00c001c4 	movi	r3,7
 8013f84:	1941c20e 	bge	r3,r5,8014690 <___vfiprintf_internal_r+0xd18>
 8013f88:	1002531e 	bne	r2,zero,80148d8 <___vfiprintf_internal_r+0xf60>
 8013f8c:	d8001b15 	stw	zero,108(sp)
 8013f90:	8c40010c 	andi	r17,r17,4
 8013f94:	88023226 	beq	r17,zero,8014860 <___vfiprintf_internal_r+0xee8>
 8013f98:	d9002517 	ldw	r4,148(sp)
 8013f9c:	24e3c83a 	sub	r17,r4,r19
 8013fa0:	04432916 	blt	zero,r17,8014c48 <___vfiprintf_internal_r+0x12d0>
 8013fa4:	d8802517 	ldw	r2,148(sp)
 8013fa8:	14c0010e 	bge	r2,r19,8013fb0 <___vfiprintf_internal_r+0x638>
 8013fac:	9805883a 	mov	r2,r19
 8013fb0:	d8c02417 	ldw	r3,144(sp)
 8013fb4:	1887883a 	add	r3,r3,r2
 8013fb8:	d8c02415 	stw	r3,144(sp)
 8013fbc:	d8001b15 	stw	zero,108(sp)
 8013fc0:	d811883a 	mov	r8,sp
 8013fc4:	003ea006 	br	8013a48 <__alt_data_end+0xfc013a48>
 8013fc8:	8c400814 	ori	r17,r17,32
 8013fcc:	b0c00007 	ldb	r3,0(r22)
 8013fd0:	003ec606 	br	8013aec <__alt_data_end+0xfc013aec>
 8013fd4:	b0c00007 	ldb	r3,0(r22)
 8013fd8:	00801b04 	movi	r2,108
 8013fdc:	18832026 	beq	r3,r2,8014c60 <___vfiprintf_internal_r+0x12e8>
 8013fe0:	8c400414 	ori	r17,r17,16
 8013fe4:	003ec106 	br	8013aec <__alt_data_end+0xfc013aec>
 8013fe8:	9cc03fcc 	andi	r19,r19,255
 8013fec:	b811883a 	mov	r8,r23
 8013ff0:	9803981e 	bne	r19,zero,8014e54 <___vfiprintf_internal_r+0x14dc>
 8013ff4:	8880080c 	andi	r2,r17,32
 8013ff8:	1002be26 	beq	r2,zero,8014af4 <___vfiprintf_internal_r+0x117c>
 8013ffc:	d9002217 	ldw	r4,136(sp)
 8014000:	d9402417 	ldw	r5,144(sp)
 8014004:	20800017 	ldw	r2,0(r4)
 8014008:	2807d7fa 	srai	r3,r5,31
 801400c:	21000104 	addi	r4,r4,4
 8014010:	d9002215 	stw	r4,136(sp)
 8014014:	11400015 	stw	r5,0(r2)
 8014018:	10c00115 	stw	r3,4(r2)
 801401c:	003e8a06 	br	8013a48 <__alt_data_end+0xfc013a48>
 8014020:	9cc03fcc 	andi	r19,r19,255
 8014024:	b811883a 	mov	r8,r23
 8014028:	9803871e 	bne	r19,zero,8014e48 <___vfiprintf_internal_r+0x14d0>
 801402c:	8880080c 	andi	r2,r17,32
 8014030:	10009a26 	beq	r2,zero,801429c <___vfiprintf_internal_r+0x924>
 8014034:	d9002217 	ldw	r4,136(sp)
 8014038:	d8001d85 	stb	zero,118(sp)
 801403c:	20800204 	addi	r2,r4,8
 8014040:	24c00017 	ldw	r19,0(r4)
 8014044:	25000117 	ldw	r20,4(r4)
 8014048:	8002a416 	blt	r16,zero,8014adc <___vfiprintf_internal_r+0x1164>
 801404c:	013fdfc4 	movi	r4,-129
 8014050:	9d06b03a 	or	r3,r19,r20
 8014054:	d8802215 	stw	r2,136(sp)
 8014058:	8922703a 	and	r17,r17,r4
 801405c:	18009b26 	beq	r3,zero,80142cc <___vfiprintf_internal_r+0x954>
 8014060:	002b883a 	mov	r21,zero
 8014064:	ddc01a04 	addi	r23,sp,104
 8014068:	9806d0fa 	srli	r3,r19,3
 801406c:	a008977a 	slli	r4,r20,29
 8014070:	a028d0fa 	srli	r20,r20,3
 8014074:	9cc001cc 	andi	r19,r19,7
 8014078:	98800c04 	addi	r2,r19,48
 801407c:	bdffffc4 	addi	r23,r23,-1
 8014080:	20e6b03a 	or	r19,r4,r3
 8014084:	b8800005 	stb	r2,0(r23)
 8014088:	9d06b03a 	or	r3,r19,r20
 801408c:	183ff61e 	bne	r3,zero,8014068 <__alt_data_end+0xfc014068>
 8014090:	88c0004c 	andi	r3,r17,1
 8014094:	18021f1e 	bne	r3,zero,8014914 <___vfiprintf_internal_r+0xf9c>
 8014098:	d9401e17 	ldw	r5,120(sp)
 801409c:	2de9c83a 	sub	r20,r5,r23
 80140a0:	003f3806 	br	8013d84 <__alt_data_end+0xfc013d84>
 80140a4:	9cc03fcc 	andi	r19,r19,255
 80140a8:	b811883a 	mov	r8,r23
 80140ac:	98034f1e 	bne	r19,zero,8014dec <___vfiprintf_internal_r+0x1474>
 80140b0:	00820d74 	movhi	r2,2101
 80140b4:	10a14e04 	addi	r2,r2,-31432
 80140b8:	d8802615 	stw	r2,152(sp)
 80140bc:	8880080c 	andi	r2,r17,32
 80140c0:	1000ac26 	beq	r2,zero,8014374 <___vfiprintf_internal_r+0x9fc>
 80140c4:	d9002217 	ldw	r4,136(sp)
 80140c8:	24c00017 	ldw	r19,0(r4)
 80140cc:	25000117 	ldw	r20,4(r4)
 80140d0:	21000204 	addi	r4,r4,8
 80140d4:	d9002215 	stw	r4,136(sp)
 80140d8:	8880004c 	andi	r2,r17,1
 80140dc:	1001e726 	beq	r2,zero,801487c <___vfiprintf_internal_r+0xf04>
 80140e0:	9d04b03a 	or	r2,r19,r20
 80140e4:	10025c1e 	bne	r2,zero,8014a58 <___vfiprintf_internal_r+0x10e0>
 80140e8:	d8001d85 	stb	zero,118(sp)
 80140ec:	80024416 	blt	r16,zero,8014a00 <___vfiprintf_internal_r+0x1088>
 80140f0:	00bfdfc4 	movi	r2,-129
 80140f4:	88a2703a 	and	r17,r17,r2
 80140f8:	003f1d06 	br	8013d70 <__alt_data_end+0xfc013d70>
 80140fc:	d8c02217 	ldw	r3,136(sp)
 8014100:	04c00044 	movi	r19,1
 8014104:	b811883a 	mov	r8,r23
 8014108:	18800017 	ldw	r2,0(r3)
 801410c:	18c00104 	addi	r3,r3,4
 8014110:	d8001d85 	stb	zero,118(sp)
 8014114:	d8801005 	stb	r2,64(sp)
 8014118:	d8c02215 	stw	r3,136(sp)
 801411c:	9829883a 	mov	r20,r19
 8014120:	ddc01004 	addi	r23,sp,64
 8014124:	0021883a 	mov	r16,zero
 8014128:	003f1e06 	br	8013da4 <__alt_data_end+0xfc013da4>
 801412c:	9cc03fcc 	andi	r19,r19,255
 8014130:	b811883a 	mov	r8,r23
 8014134:	9803331e 	bne	r19,zero,8014e04 <___vfiprintf_internal_r+0x148c>
 8014138:	8880080c 	andi	r2,r17,32
 801413c:	10004826 	beq	r2,zero,8014260 <___vfiprintf_internal_r+0x8e8>
 8014140:	d9002217 	ldw	r4,136(sp)
 8014144:	20800117 	ldw	r2,4(r4)
 8014148:	24c00017 	ldw	r19,0(r4)
 801414c:	21000204 	addi	r4,r4,8
 8014150:	d9002215 	stw	r4,136(sp)
 8014154:	1029883a 	mov	r20,r2
 8014158:	10024c16 	blt	r2,zero,8014a8c <___vfiprintf_internal_r+0x1114>
 801415c:	dd401d83 	ldbu	r21,118(sp)
 8014160:	80007116 	blt	r16,zero,8014328 <___vfiprintf_internal_r+0x9b0>
 8014164:	00ffdfc4 	movi	r3,-129
 8014168:	9d04b03a 	or	r2,r19,r20
 801416c:	88e2703a 	and	r17,r17,r3
 8014170:	1000d126 	beq	r2,zero,80144b8 <___vfiprintf_internal_r+0xb40>
 8014174:	a0023526 	beq	r20,zero,8014a4c <___vfiprintf_internal_r+0x10d4>
 8014178:	ddc01a04 	addi	r23,sp,104
 801417c:	4039883a 	mov	fp,r8
 8014180:	9809883a 	mov	r4,r19
 8014184:	a00b883a 	mov	r5,r20
 8014188:	01800284 	movi	r6,10
 801418c:	000f883a 	mov	r7,zero
 8014190:	80158a80 	call	80158a8 <__umoddi3>
 8014194:	10800c04 	addi	r2,r2,48
 8014198:	bdffffc4 	addi	r23,r23,-1
 801419c:	9809883a 	mov	r4,r19
 80141a0:	a00b883a 	mov	r5,r20
 80141a4:	b8800005 	stb	r2,0(r23)
 80141a8:	01800284 	movi	r6,10
 80141ac:	000f883a 	mov	r7,zero
 80141b0:	80077a40 	call	80077a4 <__udivdi3>
 80141b4:	1027883a 	mov	r19,r2
 80141b8:	10c4b03a 	or	r2,r2,r3
 80141bc:	1829883a 	mov	r20,r3
 80141c0:	103fef1e 	bne	r2,zero,8014180 <__alt_data_end+0xfc014180>
 80141c4:	d9001e17 	ldw	r4,120(sp)
 80141c8:	e011883a 	mov	r8,fp
 80141cc:	25e9c83a 	sub	r20,r4,r23
 80141d0:	003eec06 	br	8013d84 <__alt_data_end+0xfc013d84>
 80141d4:	d8802307 	ldb	r2,140(sp)
 80141d8:	1002361e 	bne	r2,zero,8014ab4 <___vfiprintf_internal_r+0x113c>
 80141dc:	00c00804 	movi	r3,32
 80141e0:	d8c02305 	stb	r3,140(sp)
 80141e4:	04c00044 	movi	r19,1
 80141e8:	b0c00007 	ldb	r3,0(r22)
 80141ec:	003e3f06 	br	8013aec <__alt_data_end+0xfc013aec>
 80141f0:	8c400054 	ori	r17,r17,1
 80141f4:	b0c00007 	ldb	r3,0(r22)
 80141f8:	003e3c06 	br	8013aec <__alt_data_end+0xfc013aec>
 80141fc:	8c402014 	ori	r17,r17,128
 8014200:	b0c00007 	ldb	r3,0(r22)
 8014204:	003e3906 	br	8013aec <__alt_data_end+0xfc013aec>
 8014208:	dc002715 	stw	r16,156(sp)
 801420c:	d8002515 	stw	zero,148(sp)
 8014210:	1f3ff404 	addi	fp,r3,-48
 8014214:	0009883a 	mov	r4,zero
 8014218:	b021883a 	mov	r16,r22
 801421c:	01400284 	movi	r5,10
 8014220:	8007f540 	call	8007f54 <__mulsi3>
 8014224:	80c00007 	ldb	r3,0(r16)
 8014228:	e089883a 	add	r4,fp,r2
 801422c:	b5800044 	addi	r22,r22,1
 8014230:	1f3ff404 	addi	fp,r3,-48
 8014234:	b021883a 	mov	r16,r22
 8014238:	af3ff82e 	bgeu	r21,fp,801421c <__alt_data_end+0xfc01421c>
 801423c:	d9002515 	stw	r4,148(sp)
 8014240:	dc002717 	ldw	r16,156(sp)
 8014244:	003e2a06 	br	8013af0 <__alt_data_end+0xfc013af0>
 8014248:	9cc03fcc 	andi	r19,r19,255
 801424c:	b811883a 	mov	r8,r23
 8014250:	9802e91e 	bne	r19,zero,8014df8 <___vfiprintf_internal_r+0x1480>
 8014254:	8c400414 	ori	r17,r17,16
 8014258:	8880080c 	andi	r2,r17,32
 801425c:	103fb81e 	bne	r2,zero,8014140 <__alt_data_end+0xfc014140>
 8014260:	8880040c 	andi	r2,r17,16
 8014264:	10022e26 	beq	r2,zero,8014b20 <___vfiprintf_internal_r+0x11a8>
 8014268:	d9402217 	ldw	r5,136(sp)
 801426c:	2cc00017 	ldw	r19,0(r5)
 8014270:	29400104 	addi	r5,r5,4
 8014274:	d9402215 	stw	r5,136(sp)
 8014278:	9829d7fa 	srai	r20,r19,31
 801427c:	a005883a 	mov	r2,r20
 8014280:	003fb506 	br	8014158 <__alt_data_end+0xfc014158>
 8014284:	9cc03fcc 	andi	r19,r19,255
 8014288:	b811883a 	mov	r8,r23
 801428c:	9802fa1e 	bne	r19,zero,8014e78 <___vfiprintf_internal_r+0x1500>
 8014290:	8c400414 	ori	r17,r17,16
 8014294:	8880080c 	andi	r2,r17,32
 8014298:	103f661e 	bne	r2,zero,8014034 <__alt_data_end+0xfc014034>
 801429c:	8880040c 	andi	r2,r17,16
 80142a0:	10020626 	beq	r2,zero,8014abc <___vfiprintf_internal_r+0x1144>
 80142a4:	d9402217 	ldw	r5,136(sp)
 80142a8:	d8001d85 	stb	zero,118(sp)
 80142ac:	0029883a 	mov	r20,zero
 80142b0:	28800104 	addi	r2,r5,4
 80142b4:	2cc00017 	ldw	r19,0(r5)
 80142b8:	80020816 	blt	r16,zero,8014adc <___vfiprintf_internal_r+0x1164>
 80142bc:	00ffdfc4 	movi	r3,-129
 80142c0:	d8802215 	stw	r2,136(sp)
 80142c4:	88e2703a 	and	r17,r17,r3
 80142c8:	983f651e 	bne	r19,zero,8014060 <__alt_data_end+0xfc014060>
 80142cc:	002b883a 	mov	r21,zero
 80142d0:	8002cf26 	beq	r16,zero,8014e10 <___vfiprintf_internal_r+0x1498>
 80142d4:	0027883a 	mov	r19,zero
 80142d8:	0029883a 	mov	r20,zero
 80142dc:	003f6106 	br	8014064 <__alt_data_end+0xfc014064>
 80142e0:	9cc03fcc 	andi	r19,r19,255
 80142e4:	b811883a 	mov	r8,r23
 80142e8:	9802e01e 	bne	r19,zero,8014e6c <___vfiprintf_internal_r+0x14f4>
 80142ec:	8c400414 	ori	r17,r17,16
 80142f0:	8880080c 	andi	r2,r17,32
 80142f4:	1000641e 	bne	r2,zero,8014488 <___vfiprintf_internal_r+0xb10>
 80142f8:	8880040c 	andi	r2,r17,16
 80142fc:	1001c81e 	bne	r2,zero,8014a20 <___vfiprintf_internal_r+0x10a8>
 8014300:	8880100c 	andi	r2,r17,64
 8014304:	d8001d85 	stb	zero,118(sp)
 8014308:	1002281e 	bne	r2,zero,8014bac <___vfiprintf_internal_r+0x1234>
 801430c:	d9002217 	ldw	r4,136(sp)
 8014310:	0029883a 	mov	r20,zero
 8014314:	20800104 	addi	r2,r4,4
 8014318:	24c00017 	ldw	r19,0(r4)
 801431c:	8001c60e 	bge	r16,zero,8014a38 <___vfiprintf_internal_r+0x10c0>
 8014320:	d8802215 	stw	r2,136(sp)
 8014324:	002b883a 	mov	r21,zero
 8014328:	9d04b03a 	or	r2,r19,r20
 801432c:	103f911e 	bne	r2,zero,8014174 <__alt_data_end+0xfc014174>
 8014330:	00800044 	movi	r2,1
 8014334:	10803fcc 	andi	r2,r2,255
 8014338:	00c00044 	movi	r3,1
 801433c:	10c05f26 	beq	r2,r3,80144bc <___vfiprintf_internal_r+0xb44>
 8014340:	00c00084 	movi	r3,2
 8014344:	10ffe31e 	bne	r2,r3,80142d4 <__alt_data_end+0xfc0142d4>
 8014348:	0027883a 	mov	r19,zero
 801434c:	0029883a 	mov	r20,zero
 8014350:	00015106 	br	8014898 <___vfiprintf_internal_r+0xf20>
 8014354:	9cc03fcc 	andi	r19,r19,255
 8014358:	b811883a 	mov	r8,r23
 801435c:	9802c01e 	bne	r19,zero,8014e60 <___vfiprintf_internal_r+0x14e8>
 8014360:	01420d74 	movhi	r5,2101
 8014364:	29614904 	addi	r5,r5,-31452
 8014368:	d9402615 	stw	r5,152(sp)
 801436c:	8880080c 	andi	r2,r17,32
 8014370:	103f541e 	bne	r2,zero,80140c4 <__alt_data_end+0xfc0140c4>
 8014374:	8880040c 	andi	r2,r17,16
 8014378:	1001f226 	beq	r2,zero,8014b44 <___vfiprintf_internal_r+0x11cc>
 801437c:	d9402217 	ldw	r5,136(sp)
 8014380:	0029883a 	mov	r20,zero
 8014384:	2cc00017 	ldw	r19,0(r5)
 8014388:	29400104 	addi	r5,r5,4
 801438c:	d9402215 	stw	r5,136(sp)
 8014390:	003f5106 	br	80140d8 <__alt_data_end+0xfc0140d8>
 8014394:	d8c02217 	ldw	r3,136(sp)
 8014398:	b811883a 	mov	r8,r23
 801439c:	d8001d85 	stb	zero,118(sp)
 80143a0:	1dc00017 	ldw	r23,0(r3)
 80143a4:	1f000104 	addi	fp,r3,4
 80143a8:	b8025926 	beq	r23,zero,8014d10 <___vfiprintf_internal_r+0x1398>
 80143ac:	80023316 	blt	r16,zero,8014c7c <___vfiprintf_internal_r+0x1304>
 80143b0:	800d883a 	mov	r6,r16
 80143b4:	000b883a 	mov	r5,zero
 80143b8:	b809883a 	mov	r4,r23
 80143bc:	da002a15 	stw	r8,168(sp)
 80143c0:	8011c540 	call	8011c54 <memchr>
 80143c4:	da002a17 	ldw	r8,168(sp)
 80143c8:	10026826 	beq	r2,zero,8014d6c <___vfiprintf_internal_r+0x13f4>
 80143cc:	15e9c83a 	sub	r20,r2,r23
 80143d0:	dd401d83 	ldbu	r21,118(sp)
 80143d4:	df002215 	stw	fp,136(sp)
 80143d8:	0021883a 	mov	r16,zero
 80143dc:	003e6906 	br	8013d84 <__alt_data_end+0xfc013d84>
 80143e0:	9cc03fcc 	andi	r19,r19,255
 80143e4:	b811883a 	mov	r8,r23
 80143e8:	983fc126 	beq	r19,zero,80142f0 <__alt_data_end+0xfc0142f0>
 80143ec:	d8c02303 	ldbu	r3,140(sp)
 80143f0:	d8c01d85 	stb	r3,118(sp)
 80143f4:	003fbe06 	br	80142f0 <__alt_data_end+0xfc0142f0>
 80143f8:	d9002217 	ldw	r4,136(sp)
 80143fc:	d9402217 	ldw	r5,136(sp)
 8014400:	21000017 	ldw	r4,0(r4)
 8014404:	28800104 	addi	r2,r5,4
 8014408:	d9002515 	stw	r4,148(sp)
 801440c:	203e3d16 	blt	r4,zero,8013d04 <__alt_data_end+0xfc013d04>
 8014410:	d8802215 	stw	r2,136(sp)
 8014414:	b0c00007 	ldb	r3,0(r22)
 8014418:	003db406 	br	8013aec <__alt_data_end+0xfc013aec>
 801441c:	00c00ac4 	movi	r3,43
 8014420:	d8c02305 	stb	r3,140(sp)
 8014424:	04c00044 	movi	r19,1
 8014428:	b0c00007 	ldb	r3,0(r22)
 801442c:	003daf06 	br	8013aec <__alt_data_end+0xfc013aec>
 8014430:	b0c00007 	ldb	r3,0(r22)
 8014434:	01000a84 	movi	r4,42
 8014438:	b4000044 	addi	r16,r22,1
 801443c:	19025e26 	beq	r3,r4,8014db8 <___vfiprintf_internal_r+0x1440>
 8014440:	1f3ff404 	addi	fp,r3,-48
 8014444:	0009883a 	mov	r4,zero
 8014448:	af025236 	bltu	r21,fp,8014d94 <___vfiprintf_internal_r+0x141c>
 801444c:	01400284 	movi	r5,10
 8014450:	8007f540 	call	8007f54 <__mulsi3>
 8014454:	80c00007 	ldb	r3,0(r16)
 8014458:	1709883a 	add	r4,r2,fp
 801445c:	85800044 	addi	r22,r16,1
 8014460:	1f3ff404 	addi	fp,r3,-48
 8014464:	b021883a 	mov	r16,r22
 8014468:	af3ff82e 	bgeu	r21,fp,801444c <__alt_data_end+0xfc01444c>
 801446c:	2021883a 	mov	r16,r4
 8014470:	203d9f0e 	bge	r4,zero,8013af0 <__alt_data_end+0xfc013af0>
 8014474:	043fffc4 	movi	r16,-1
 8014478:	003d9d06 	br	8013af0 <__alt_data_end+0xfc013af0>
 801447c:	8c401014 	ori	r17,r17,64
 8014480:	b0c00007 	ldb	r3,0(r22)
 8014484:	003d9906 	br	8013aec <__alt_data_end+0xfc013aec>
 8014488:	d9002217 	ldw	r4,136(sp)
 801448c:	d8001d85 	stb	zero,118(sp)
 8014490:	20c00204 	addi	r3,r4,8
 8014494:	24c00017 	ldw	r19,0(r4)
 8014498:	25000117 	ldw	r20,4(r4)
 801449c:	8001e716 	blt	r16,zero,8014c3c <___vfiprintf_internal_r+0x12c4>
 80144a0:	013fdfc4 	movi	r4,-129
 80144a4:	9d04b03a 	or	r2,r19,r20
 80144a8:	d8c02215 	stw	r3,136(sp)
 80144ac:	8922703a 	and	r17,r17,r4
 80144b0:	002b883a 	mov	r21,zero
 80144b4:	103f2f1e 	bne	r2,zero,8014174 <__alt_data_end+0xfc014174>
 80144b8:	803e2f26 	beq	r16,zero,8013d78 <__alt_data_end+0xfc013d78>
 80144bc:	0027883a 	mov	r19,zero
 80144c0:	9cc00c04 	addi	r19,r19,48
 80144c4:	dcc019c5 	stb	r19,103(sp)
 80144c8:	dd002817 	ldw	r20,160(sp)
 80144cc:	ddc019c4 	addi	r23,sp,103
 80144d0:	003e2c06 	br	8013d84 <__alt_data_end+0xfc013d84>
 80144d4:	9cc03fcc 	andi	r19,r19,255
 80144d8:	b811883a 	mov	r8,r23
 80144dc:	9802571e 	bne	r19,zero,8014e3c <___vfiprintf_internal_r+0x14c4>
 80144e0:	18005726 	beq	r3,zero,8014640 <___vfiprintf_internal_r+0xcc8>
 80144e4:	04c00044 	movi	r19,1
 80144e8:	d8c01005 	stb	r3,64(sp)
 80144ec:	d8001d85 	stb	zero,118(sp)
 80144f0:	9829883a 	mov	r20,r19
 80144f4:	ddc01004 	addi	r23,sp,64
 80144f8:	003f0a06 	br	8014124 <__alt_data_end+0xfc014124>
 80144fc:	d9402017 	ldw	r5,128(sp)
 8014500:	d9002117 	ldw	r4,132(sp)
 8014504:	d9801a04 	addi	r6,sp,104
 8014508:	da802a15 	stw	r10,168(sp)
 801450c:	80138640 	call	8013864 <__sprint_r.part.0>
 8014510:	da802a17 	ldw	r10,168(sp)
 8014514:	1000501e 	bne	r2,zero,8014658 <___vfiprintf_internal_r+0xce0>
 8014518:	d9801b17 	ldw	r6,108(sp)
 801451c:	d8801c17 	ldw	r2,112(sp)
 8014520:	d811883a 	mov	r8,sp
 8014524:	31000044 	addi	r4,r6,1
 8014528:	003e3606 	br	8013e04 <__alt_data_end+0xfc013e04>
 801452c:	d9001b17 	ldw	r4,108(sp)
 8014530:	d8801c17 	ldw	r2,112(sp)
 8014534:	21400044 	addi	r5,r4,1
 8014538:	d9801d87 	ldb	r6,118(sp)
 801453c:	303e5226 	beq	r6,zero,8013e88 <__alt_data_end+0xfc013e88>
 8014540:	01800044 	movi	r6,1
 8014544:	d9001d84 	addi	r4,sp,118
 8014548:	1185883a 	add	r2,r2,r6
 801454c:	41000015 	stw	r4,0(r8)
 8014550:	41800115 	stw	r6,4(r8)
 8014554:	d8801c15 	stw	r2,112(sp)
 8014558:	d9401b15 	stw	r5,108(sp)
 801455c:	010001c4 	movi	r4,7
 8014560:	2140b00e 	bge	r4,r5,8014824 <___vfiprintf_internal_r+0xeac>
 8014564:	1000f61e 	bne	r2,zero,8014940 <___vfiprintf_internal_r+0xfc8>
 8014568:	3800b31e 	bne	r7,zero,8014838 <___vfiprintf_internal_r+0xec0>
 801456c:	0009883a 	mov	r4,zero
 8014570:	300b883a 	mov	r5,r6
 8014574:	d811883a 	mov	r8,sp
 8014578:	01802004 	movi	r6,128
 801457c:	19be5226 	beq	r3,r6,8013ec8 <__alt_data_end+0xfc013ec8>
 8014580:	8521c83a 	sub	r16,r16,r20
 8014584:	043e790e 	bge	zero,r16,8013f6c <__alt_data_end+0xfc013f6c>
 8014588:	05400404 	movi	r21,16
 801458c:	ac01b00e 	bge	r21,r16,8014c50 <___vfiprintf_internal_r+0x12d8>
 8014590:	01420d74 	movhi	r5,2101
 8014594:	2961ae04 	addi	r5,r5,-31048
 8014598:	d9402315 	stw	r5,140(sp)
 801459c:	070001c4 	movi	fp,7
 80145a0:	00000506 	br	80145b8 <___vfiprintf_internal_r+0xc40>
 80145a4:	21400084 	addi	r5,r4,2
 80145a8:	42000204 	addi	r8,r8,8
 80145ac:	1809883a 	mov	r4,r3
 80145b0:	843ffc04 	addi	r16,r16,-16
 80145b4:	ac000d0e 	bge	r21,r16,80145ec <___vfiprintf_internal_r+0xc74>
 80145b8:	10800404 	addi	r2,r2,16
 80145bc:	20c00044 	addi	r3,r4,1
 80145c0:	44800015 	stw	r18,0(r8)
 80145c4:	45400115 	stw	r21,4(r8)
 80145c8:	d8801c15 	stw	r2,112(sp)
 80145cc:	d8c01b15 	stw	r3,108(sp)
 80145d0:	e0fff40e 	bge	fp,r3,80145a4 <__alt_data_end+0xfc0145a4>
 80145d4:	1000101e 	bne	r2,zero,8014618 <___vfiprintf_internal_r+0xca0>
 80145d8:	843ffc04 	addi	r16,r16,-16
 80145dc:	01400044 	movi	r5,1
 80145e0:	0009883a 	mov	r4,zero
 80145e4:	d811883a 	mov	r8,sp
 80145e8:	ac3ff316 	blt	r21,r16,80145b8 <__alt_data_end+0xfc0145b8>
 80145ec:	d8c02317 	ldw	r3,140(sp)
 80145f0:	1405883a 	add	r2,r2,r16
 80145f4:	44000115 	stw	r16,4(r8)
 80145f8:	40c00015 	stw	r3,0(r8)
 80145fc:	d8801c15 	stw	r2,112(sp)
 8014600:	d9401b15 	stw	r5,108(sp)
 8014604:	00c001c4 	movi	r3,7
 8014608:	19401916 	blt	r3,r5,8014670 <___vfiprintf_internal_r+0xcf8>
 801460c:	42000204 	addi	r8,r8,8
 8014610:	29400044 	addi	r5,r5,1
 8014614:	003e5506 	br	8013f6c <__alt_data_end+0xfc013f6c>
 8014618:	d9402017 	ldw	r5,128(sp)
 801461c:	d9002117 	ldw	r4,132(sp)
 8014620:	d9801a04 	addi	r6,sp,104
 8014624:	80138640 	call	8013864 <__sprint_r.part.0>
 8014628:	10000b1e 	bne	r2,zero,8014658 <___vfiprintf_internal_r+0xce0>
 801462c:	d9001b17 	ldw	r4,108(sp)
 8014630:	d8801c17 	ldw	r2,112(sp)
 8014634:	d811883a 	mov	r8,sp
 8014638:	21400044 	addi	r5,r4,1
 801463c:	003fdc06 	br	80145b0 <__alt_data_end+0xfc0145b0>
 8014640:	d8801c17 	ldw	r2,112(sp)
 8014644:	10000426 	beq	r2,zero,8014658 <___vfiprintf_internal_r+0xce0>
 8014648:	d9402017 	ldw	r5,128(sp)
 801464c:	d9002117 	ldw	r4,132(sp)
 8014650:	d9801a04 	addi	r6,sp,104
 8014654:	80138640 	call	8013864 <__sprint_r.part.0>
 8014658:	d9402017 	ldw	r5,128(sp)
 801465c:	2880030b 	ldhu	r2,12(r5)
 8014660:	1080100c 	andi	r2,r2,64
 8014664:	10014d1e 	bne	r2,zero,8014b9c <___vfiprintf_internal_r+0x1224>
 8014668:	d8802417 	ldw	r2,144(sp)
 801466c:	003d9706 	br	8013ccc <__alt_data_end+0xfc013ccc>
 8014670:	1000d21e 	bne	r2,zero,80149bc <___vfiprintf_internal_r+0x1044>
 8014674:	00c00044 	movi	r3,1
 8014678:	a005883a 	mov	r2,r20
 801467c:	ddc00015 	stw	r23,0(sp)
 8014680:	dd000115 	stw	r20,4(sp)
 8014684:	dd001c15 	stw	r20,112(sp)
 8014688:	d8c01b15 	stw	r3,108(sp)
 801468c:	d811883a 	mov	r8,sp
 8014690:	42000204 	addi	r8,r8,8
 8014694:	8c40010c 	andi	r17,r17,4
 8014698:	88004026 	beq	r17,zero,801479c <___vfiprintf_internal_r+0xe24>
 801469c:	d9002517 	ldw	r4,148(sp)
 80146a0:	24e3c83a 	sub	r17,r4,r19
 80146a4:	04403d0e 	bge	zero,r17,801479c <___vfiprintf_internal_r+0xe24>
 80146a8:	04000404 	movi	r16,16
 80146ac:	8441a90e 	bge	r16,r17,8014d54 <___vfiprintf_internal_r+0x13dc>
 80146b0:	00c20d74 	movhi	r3,2101
 80146b4:	18e1b204 	addi	r3,r3,-31032
 80146b8:	d9001b17 	ldw	r4,108(sp)
 80146bc:	d8c02315 	stw	r3,140(sp)
 80146c0:	050001c4 	movi	r20,7
 80146c4:	dd402117 	ldw	r21,132(sp)
 80146c8:	ddc02017 	ldw	r23,128(sp)
 80146cc:	00000506 	br	80146e4 <___vfiprintf_internal_r+0xd6c>
 80146d0:	21400084 	addi	r5,r4,2
 80146d4:	42000204 	addi	r8,r8,8
 80146d8:	1809883a 	mov	r4,r3
 80146dc:	8c7ffc04 	addi	r17,r17,-16
 80146e0:	84400f0e 	bge	r16,r17,8014720 <___vfiprintf_internal_r+0xda8>
 80146e4:	01420d74 	movhi	r5,2101
 80146e8:	10800404 	addi	r2,r2,16
 80146ec:	20c00044 	addi	r3,r4,1
 80146f0:	2961b204 	addi	r5,r5,-31032
 80146f4:	41400015 	stw	r5,0(r8)
 80146f8:	44000115 	stw	r16,4(r8)
 80146fc:	d8801c15 	stw	r2,112(sp)
 8014700:	d8c01b15 	stw	r3,108(sp)
 8014704:	a0fff20e 	bge	r20,r3,80146d0 <__alt_data_end+0xfc0146d0>
 8014708:	1000141e 	bne	r2,zero,801475c <___vfiprintf_internal_r+0xde4>
 801470c:	8c7ffc04 	addi	r17,r17,-16
 8014710:	01400044 	movi	r5,1
 8014714:	0009883a 	mov	r4,zero
 8014718:	d811883a 	mov	r8,sp
 801471c:	847ff116 	blt	r16,r17,80146e4 <__alt_data_end+0xfc0146e4>
 8014720:	d8c02317 	ldw	r3,140(sp)
 8014724:	1445883a 	add	r2,r2,r17
 8014728:	44400115 	stw	r17,4(r8)
 801472c:	40c00015 	stw	r3,0(r8)
 8014730:	d8801c15 	stw	r2,112(sp)
 8014734:	d9401b15 	stw	r5,108(sp)
 8014738:	00c001c4 	movi	r3,7
 801473c:	1940170e 	bge	r3,r5,801479c <___vfiprintf_internal_r+0xe24>
 8014740:	1000101e 	bne	r2,zero,8014784 <___vfiprintf_internal_r+0xe0c>
 8014744:	d8802517 	ldw	r2,148(sp)
 8014748:	14c11616 	blt	r2,r19,8014ba4 <___vfiprintf_internal_r+0x122c>
 801474c:	d9002417 	ldw	r4,144(sp)
 8014750:	2089883a 	add	r4,r4,r2
 8014754:	d9002415 	stw	r4,144(sp)
 8014758:	003e1806 	br	8013fbc <__alt_data_end+0xfc013fbc>
 801475c:	d9801a04 	addi	r6,sp,104
 8014760:	b80b883a 	mov	r5,r23
 8014764:	a809883a 	mov	r4,r21
 8014768:	80138640 	call	8013864 <__sprint_r.part.0>
 801476c:	103fba1e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014770:	d9001b17 	ldw	r4,108(sp)
 8014774:	d8801c17 	ldw	r2,112(sp)
 8014778:	d811883a 	mov	r8,sp
 801477c:	21400044 	addi	r5,r4,1
 8014780:	003fd606 	br	80146dc <__alt_data_end+0xfc0146dc>
 8014784:	d9402017 	ldw	r5,128(sp)
 8014788:	d9002117 	ldw	r4,132(sp)
 801478c:	d9801a04 	addi	r6,sp,104
 8014790:	80138640 	call	8013864 <__sprint_r.part.0>
 8014794:	103fb01e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014798:	d8801c17 	ldw	r2,112(sp)
 801479c:	d8c02517 	ldw	r3,148(sp)
 80147a0:	1cc0010e 	bge	r3,r19,80147a8 <___vfiprintf_internal_r+0xe30>
 80147a4:	9807883a 	mov	r3,r19
 80147a8:	d9002417 	ldw	r4,144(sp)
 80147ac:	20c9883a 	add	r4,r4,r3
 80147b0:	d9002415 	stw	r4,144(sp)
 80147b4:	103e0126 	beq	r2,zero,8013fbc <__alt_data_end+0xfc013fbc>
 80147b8:	d9402017 	ldw	r5,128(sp)
 80147bc:	d9002117 	ldw	r4,132(sp)
 80147c0:	d9801a04 	addi	r6,sp,104
 80147c4:	80138640 	call	8013864 <__sprint_r.part.0>
 80147c8:	103dfc26 	beq	r2,zero,8013fbc <__alt_data_end+0xfc013fbc>
 80147cc:	003fa206 	br	8014658 <__alt_data_end+0xfc014658>
 80147d0:	d9402017 	ldw	r5,128(sp)
 80147d4:	d9002117 	ldw	r4,132(sp)
 80147d8:	d9801a04 	addi	r6,sp,104
 80147dc:	d9c02b15 	stw	r7,172(sp)
 80147e0:	80138640 	call	8013864 <__sprint_r.part.0>
 80147e4:	d9c02b17 	ldw	r7,172(sp)
 80147e8:	103f9b1e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 80147ec:	d9001b17 	ldw	r4,108(sp)
 80147f0:	d8801c17 	ldw	r2,112(sp)
 80147f4:	d811883a 	mov	r8,sp
 80147f8:	21800044 	addi	r6,r4,1
 80147fc:	003dbf06 	br	8013efc <__alt_data_end+0xfc013efc>
 8014800:	1000d81e 	bne	r2,zero,8014b64 <___vfiprintf_internal_r+0x11ec>
 8014804:	d9001d87 	ldb	r4,118(sp)
 8014808:	20000a26 	beq	r4,zero,8014834 <___vfiprintf_internal_r+0xebc>
 801480c:	00800044 	movi	r2,1
 8014810:	d9001d84 	addi	r4,sp,118
 8014814:	100b883a 	mov	r5,r2
 8014818:	d9000015 	stw	r4,0(sp)
 801481c:	d8800115 	stw	r2,4(sp)
 8014820:	d811883a 	mov	r8,sp
 8014824:	2809883a 	mov	r4,r5
 8014828:	42000204 	addi	r8,r8,8
 801482c:	29400044 	addi	r5,r5,1
 8014830:	003d9506 	br	8013e88 <__alt_data_end+0xfc013e88>
 8014834:	3800fd26 	beq	r7,zero,8014c2c <___vfiprintf_internal_r+0x12b4>
 8014838:	00800084 	movi	r2,2
 801483c:	d9001d04 	addi	r4,sp,116
 8014840:	d9000015 	stw	r4,0(sp)
 8014844:	d8800115 	stw	r2,4(sp)
 8014848:	01400044 	movi	r5,1
 801484c:	d811883a 	mov	r8,sp
 8014850:	2809883a 	mov	r4,r5
 8014854:	42000204 	addi	r8,r8,8
 8014858:	29400044 	addi	r5,r5,1
 801485c:	003f4606 	br	8014578 <__alt_data_end+0xfc014578>
 8014860:	d8802517 	ldw	r2,148(sp)
 8014864:	14c0010e 	bge	r2,r19,801486c <___vfiprintf_internal_r+0xef4>
 8014868:	9805883a 	mov	r2,r19
 801486c:	d9402417 	ldw	r5,144(sp)
 8014870:	288b883a 	add	r5,r5,r2
 8014874:	d9402415 	stw	r5,144(sp)
 8014878:	003dd006 	br	8013fbc <__alt_data_end+0xfc013fbc>
 801487c:	d8001d85 	stb	zero,118(sp)
 8014880:	80005d16 	blt	r16,zero,80149f8 <___vfiprintf_internal_r+0x1080>
 8014884:	00ffdfc4 	movi	r3,-129
 8014888:	9d04b03a 	or	r2,r19,r20
 801488c:	88e2703a 	and	r17,r17,r3
 8014890:	103d3726 	beq	r2,zero,8013d70 <__alt_data_end+0xfc013d70>
 8014894:	002b883a 	mov	r21,zero
 8014898:	d9002617 	ldw	r4,152(sp)
 801489c:	ddc01a04 	addi	r23,sp,104
 80148a0:	988003cc 	andi	r2,r19,15
 80148a4:	a006973a 	slli	r3,r20,28
 80148a8:	2085883a 	add	r2,r4,r2
 80148ac:	9826d13a 	srli	r19,r19,4
 80148b0:	10800003 	ldbu	r2,0(r2)
 80148b4:	a028d13a 	srli	r20,r20,4
 80148b8:	bdffffc4 	addi	r23,r23,-1
 80148bc:	1ce6b03a 	or	r19,r3,r19
 80148c0:	b8800005 	stb	r2,0(r23)
 80148c4:	9d04b03a 	or	r2,r19,r20
 80148c8:	103ff51e 	bne	r2,zero,80148a0 <__alt_data_end+0xfc0148a0>
 80148cc:	d8801e17 	ldw	r2,120(sp)
 80148d0:	15e9c83a 	sub	r20,r2,r23
 80148d4:	003d2b06 	br	8013d84 <__alt_data_end+0xfc013d84>
 80148d8:	d9402017 	ldw	r5,128(sp)
 80148dc:	d9002117 	ldw	r4,132(sp)
 80148e0:	d9801a04 	addi	r6,sp,104
 80148e4:	80138640 	call	8013864 <__sprint_r.part.0>
 80148e8:	103f5b1e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 80148ec:	d8801c17 	ldw	r2,112(sp)
 80148f0:	d811883a 	mov	r8,sp
 80148f4:	003f6706 	br	8014694 <__alt_data_end+0xfc014694>
 80148f8:	d9402017 	ldw	r5,128(sp)
 80148fc:	d9002117 	ldw	r4,132(sp)
 8014900:	d9801a04 	addi	r6,sp,104
 8014904:	80138640 	call	8013864 <__sprint_r.part.0>
 8014908:	103f531e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 801490c:	d811883a 	mov	r8,sp
 8014910:	003cd906 	br	8013c78 <__alt_data_end+0xfc013c78>
 8014914:	10803fcc 	andi	r2,r2,255
 8014918:	1080201c 	xori	r2,r2,128
 801491c:	10bfe004 	addi	r2,r2,-128
 8014920:	00c00c04 	movi	r3,48
 8014924:	10ffe926 	beq	r2,r3,80148cc <__alt_data_end+0xfc0148cc>
 8014928:	b8ffffc5 	stb	r3,-1(r23)
 801492c:	d8c01e17 	ldw	r3,120(sp)
 8014930:	b8bfffc4 	addi	r2,r23,-1
 8014934:	102f883a 	mov	r23,r2
 8014938:	18a9c83a 	sub	r20,r3,r2
 801493c:	003d1106 	br	8013d84 <__alt_data_end+0xfc013d84>
 8014940:	d9402017 	ldw	r5,128(sp)
 8014944:	d9002117 	ldw	r4,132(sp)
 8014948:	d9801a04 	addi	r6,sp,104
 801494c:	d8c02a15 	stw	r3,168(sp)
 8014950:	d9c02b15 	stw	r7,172(sp)
 8014954:	80138640 	call	8013864 <__sprint_r.part.0>
 8014958:	d8c02a17 	ldw	r3,168(sp)
 801495c:	d9c02b17 	ldw	r7,172(sp)
 8014960:	103f3d1e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014964:	d9001b17 	ldw	r4,108(sp)
 8014968:	d8801c17 	ldw	r2,112(sp)
 801496c:	d811883a 	mov	r8,sp
 8014970:	21400044 	addi	r5,r4,1
 8014974:	003d4406 	br	8013e88 <__alt_data_end+0xfc013e88>
 8014978:	d9402017 	ldw	r5,128(sp)
 801497c:	d9002117 	ldw	r4,132(sp)
 8014980:	d9801a04 	addi	r6,sp,104
 8014984:	d8c02a15 	stw	r3,168(sp)
 8014988:	80138640 	call	8013864 <__sprint_r.part.0>
 801498c:	d8c02a17 	ldw	r3,168(sp)
 8014990:	103f311e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014994:	d9001b17 	ldw	r4,108(sp)
 8014998:	d8801c17 	ldw	r2,112(sp)
 801499c:	d811883a 	mov	r8,sp
 80149a0:	21400044 	addi	r5,r4,1
 80149a4:	003ef406 	br	8014578 <__alt_data_end+0xfc014578>
 80149a8:	1000bd1e 	bne	r2,zero,8014ca0 <___vfiprintf_internal_r+0x1328>
 80149ac:	01400044 	movi	r5,1
 80149b0:	0009883a 	mov	r4,zero
 80149b4:	d811883a 	mov	r8,sp
 80149b8:	003ef106 	br	8014580 <__alt_data_end+0xfc014580>
 80149bc:	d9402017 	ldw	r5,128(sp)
 80149c0:	d9002117 	ldw	r4,132(sp)
 80149c4:	d9801a04 	addi	r6,sp,104
 80149c8:	80138640 	call	8013864 <__sprint_r.part.0>
 80149cc:	103f221e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 80149d0:	d9401b17 	ldw	r5,108(sp)
 80149d4:	d8801c17 	ldw	r2,112(sp)
 80149d8:	d811883a 	mov	r8,sp
 80149dc:	29400044 	addi	r5,r5,1
 80149e0:	003d6206 	br	8013f6c <__alt_data_end+0xfc013f6c>
 80149e4:	01420d74 	movhi	r5,2101
 80149e8:	29614e04 	addi	r5,r5,-31432
 80149ec:	d9402615 	stw	r5,152(sp)
 80149f0:	d8c02215 	stw	r3,136(sp)
 80149f4:	1023883a 	mov	r17,r2
 80149f8:	9d04b03a 	or	r2,r19,r20
 80149fc:	103fa51e 	bne	r2,zero,8014894 <__alt_data_end+0xfc014894>
 8014a00:	002b883a 	mov	r21,zero
 8014a04:	00800084 	movi	r2,2
 8014a08:	003e4a06 	br	8014334 <__alt_data_end+0xfc014334>
 8014a0c:	01420d74 	movhi	r5,2101
 8014a10:	29614e04 	addi	r5,r5,-31432
 8014a14:	002b883a 	mov	r21,zero
 8014a18:	d9402615 	stw	r5,152(sp)
 8014a1c:	003f9e06 	br	8014898 <__alt_data_end+0xfc014898>
 8014a20:	d9402217 	ldw	r5,136(sp)
 8014a24:	d8001d85 	stb	zero,118(sp)
 8014a28:	0029883a 	mov	r20,zero
 8014a2c:	28800104 	addi	r2,r5,4
 8014a30:	2cc00017 	ldw	r19,0(r5)
 8014a34:	803e3a16 	blt	r16,zero,8014320 <__alt_data_end+0xfc014320>
 8014a38:	00ffdfc4 	movi	r3,-129
 8014a3c:	d8802215 	stw	r2,136(sp)
 8014a40:	88e2703a 	and	r17,r17,r3
 8014a44:	002b883a 	mov	r21,zero
 8014a48:	983e9b26 	beq	r19,zero,80144b8 <__alt_data_end+0xfc0144b8>
 8014a4c:	00800244 	movi	r2,9
 8014a50:	14fdc936 	bltu	r2,r19,8014178 <__alt_data_end+0xfc014178>
 8014a54:	003e9a06 	br	80144c0 <__alt_data_end+0xfc0144c0>
 8014a58:	00800c04 	movi	r2,48
 8014a5c:	d8c01d45 	stb	r3,117(sp)
 8014a60:	d8801d05 	stb	r2,116(sp)
 8014a64:	d8001d85 	stb	zero,118(sp)
 8014a68:	88c00094 	ori	r3,r17,2
 8014a6c:	80009c16 	blt	r16,zero,8014ce0 <___vfiprintf_internal_r+0x1368>
 8014a70:	00bfdfc4 	movi	r2,-129
 8014a74:	88a2703a 	and	r17,r17,r2
 8014a78:	8c400094 	ori	r17,r17,2
 8014a7c:	002b883a 	mov	r21,zero
 8014a80:	003f8506 	br	8014898 <__alt_data_end+0xfc014898>
 8014a84:	b029883a 	mov	r20,r22
 8014a88:	003c0b06 	br	8013ab8 <__alt_data_end+0xfc013ab8>
 8014a8c:	04e7c83a 	sub	r19,zero,r19
 8014a90:	05400b44 	movi	r21,45
 8014a94:	9804c03a 	cmpne	r2,r19,zero
 8014a98:	0529c83a 	sub	r20,zero,r20
 8014a9c:	dd401d85 	stb	r21,118(sp)
 8014aa0:	a0a9c83a 	sub	r20,r20,r2
 8014aa4:	80009716 	blt	r16,zero,8014d04 <___vfiprintf_internal_r+0x138c>
 8014aa8:	00bfdfc4 	movi	r2,-129
 8014aac:	88a2703a 	and	r17,r17,r2
 8014ab0:	003db006 	br	8014174 <__alt_data_end+0xfc014174>
 8014ab4:	b0c00007 	ldb	r3,0(r22)
 8014ab8:	003c0c06 	br	8013aec <__alt_data_end+0xfc013aec>
 8014abc:	8880100c 	andi	r2,r17,64
 8014ac0:	d8001d85 	stb	zero,118(sp)
 8014ac4:	1000461e 	bne	r2,zero,8014be0 <___vfiprintf_internal_r+0x1268>
 8014ac8:	d9002217 	ldw	r4,136(sp)
 8014acc:	0029883a 	mov	r20,zero
 8014ad0:	20800104 	addi	r2,r4,4
 8014ad4:	24c00017 	ldw	r19,0(r4)
 8014ad8:	803df80e 	bge	r16,zero,80142bc <__alt_data_end+0xfc0142bc>
 8014adc:	9d06b03a 	or	r3,r19,r20
 8014ae0:	d8802215 	stw	r2,136(sp)
 8014ae4:	183d5e1e 	bne	r3,zero,8014060 <__alt_data_end+0xfc014060>
 8014ae8:	002b883a 	mov	r21,zero
 8014aec:	0005883a 	mov	r2,zero
 8014af0:	003e1006 	br	8014334 <__alt_data_end+0xfc014334>
 8014af4:	8880040c 	andi	r2,r17,16
 8014af8:	1000321e 	bne	r2,zero,8014bc4 <___vfiprintf_internal_r+0x124c>
 8014afc:	8c40100c 	andi	r17,r17,64
 8014b00:	88008d26 	beq	r17,zero,8014d38 <___vfiprintf_internal_r+0x13c0>
 8014b04:	d9402217 	ldw	r5,136(sp)
 8014b08:	d8c02417 	ldw	r3,144(sp)
 8014b0c:	28800017 	ldw	r2,0(r5)
 8014b10:	29400104 	addi	r5,r5,4
 8014b14:	d9402215 	stw	r5,136(sp)
 8014b18:	10c0000d 	sth	r3,0(r2)
 8014b1c:	003bca06 	br	8013a48 <__alt_data_end+0xfc013a48>
 8014b20:	8880100c 	andi	r2,r17,64
 8014b24:	10003a26 	beq	r2,zero,8014c10 <___vfiprintf_internal_r+0x1298>
 8014b28:	d8802217 	ldw	r2,136(sp)
 8014b2c:	14c0000f 	ldh	r19,0(r2)
 8014b30:	10800104 	addi	r2,r2,4
 8014b34:	d8802215 	stw	r2,136(sp)
 8014b38:	9829d7fa 	srai	r20,r19,31
 8014b3c:	a005883a 	mov	r2,r20
 8014b40:	003d8506 	br	8014158 <__alt_data_end+0xfc014158>
 8014b44:	8880100c 	andi	r2,r17,64
 8014b48:	10002b26 	beq	r2,zero,8014bf8 <___vfiprintf_internal_r+0x1280>
 8014b4c:	d8802217 	ldw	r2,136(sp)
 8014b50:	0029883a 	mov	r20,zero
 8014b54:	14c0000b 	ldhu	r19,0(r2)
 8014b58:	10800104 	addi	r2,r2,4
 8014b5c:	d8802215 	stw	r2,136(sp)
 8014b60:	003d5d06 	br	80140d8 <__alt_data_end+0xfc0140d8>
 8014b64:	d9402017 	ldw	r5,128(sp)
 8014b68:	d9002117 	ldw	r4,132(sp)
 8014b6c:	d9801a04 	addi	r6,sp,104
 8014b70:	d8c02a15 	stw	r3,168(sp)
 8014b74:	d9c02b15 	stw	r7,172(sp)
 8014b78:	80138640 	call	8013864 <__sprint_r.part.0>
 8014b7c:	d8c02a17 	ldw	r3,168(sp)
 8014b80:	d9c02b17 	ldw	r7,172(sp)
 8014b84:	103eb41e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014b88:	d9001b17 	ldw	r4,108(sp)
 8014b8c:	d8801c17 	ldw	r2,112(sp)
 8014b90:	d811883a 	mov	r8,sp
 8014b94:	21400044 	addi	r5,r4,1
 8014b98:	003e6706 	br	8014538 <__alt_data_end+0xfc014538>
 8014b9c:	00bfffc4 	movi	r2,-1
 8014ba0:	003c4a06 	br	8013ccc <__alt_data_end+0xfc013ccc>
 8014ba4:	9805883a 	mov	r2,r19
 8014ba8:	003ee806 	br	801474c <__alt_data_end+0xfc01474c>
 8014bac:	d8c02217 	ldw	r3,136(sp)
 8014bb0:	0029883a 	mov	r20,zero
 8014bb4:	18800104 	addi	r2,r3,4
 8014bb8:	1cc0000b 	ldhu	r19,0(r3)
 8014bbc:	803f9e0e 	bge	r16,zero,8014a38 <__alt_data_end+0xfc014a38>
 8014bc0:	003dd706 	br	8014320 <__alt_data_end+0xfc014320>
 8014bc4:	d8c02217 	ldw	r3,136(sp)
 8014bc8:	d9002417 	ldw	r4,144(sp)
 8014bcc:	18800017 	ldw	r2,0(r3)
 8014bd0:	18c00104 	addi	r3,r3,4
 8014bd4:	d8c02215 	stw	r3,136(sp)
 8014bd8:	11000015 	stw	r4,0(r2)
 8014bdc:	003b9a06 	br	8013a48 <__alt_data_end+0xfc013a48>
 8014be0:	d8c02217 	ldw	r3,136(sp)
 8014be4:	0029883a 	mov	r20,zero
 8014be8:	18800104 	addi	r2,r3,4
 8014bec:	1cc0000b 	ldhu	r19,0(r3)
 8014bf0:	803db20e 	bge	r16,zero,80142bc <__alt_data_end+0xfc0142bc>
 8014bf4:	003fb906 	br	8014adc <__alt_data_end+0xfc014adc>
 8014bf8:	d9002217 	ldw	r4,136(sp)
 8014bfc:	0029883a 	mov	r20,zero
 8014c00:	24c00017 	ldw	r19,0(r4)
 8014c04:	21000104 	addi	r4,r4,4
 8014c08:	d9002215 	stw	r4,136(sp)
 8014c0c:	003d3206 	br	80140d8 <__alt_data_end+0xfc0140d8>
 8014c10:	d8c02217 	ldw	r3,136(sp)
 8014c14:	1cc00017 	ldw	r19,0(r3)
 8014c18:	18c00104 	addi	r3,r3,4
 8014c1c:	d8c02215 	stw	r3,136(sp)
 8014c20:	9829d7fa 	srai	r20,r19,31
 8014c24:	a005883a 	mov	r2,r20
 8014c28:	003d4b06 	br	8014158 <__alt_data_end+0xfc014158>
 8014c2c:	0009883a 	mov	r4,zero
 8014c30:	01400044 	movi	r5,1
 8014c34:	d811883a 	mov	r8,sp
 8014c38:	003e4f06 	br	8014578 <__alt_data_end+0xfc014578>
 8014c3c:	d8c02215 	stw	r3,136(sp)
 8014c40:	002b883a 	mov	r21,zero
 8014c44:	003db806 	br	8014328 <__alt_data_end+0xfc014328>
 8014c48:	d811883a 	mov	r8,sp
 8014c4c:	003e9606 	br	80146a8 <__alt_data_end+0xfc0146a8>
 8014c50:	01020d74 	movhi	r4,2101
 8014c54:	2121ae04 	addi	r4,r4,-31048
 8014c58:	d9002315 	stw	r4,140(sp)
 8014c5c:	003e6306 	br	80145ec <__alt_data_end+0xfc0145ec>
 8014c60:	b0c00043 	ldbu	r3,1(r22)
 8014c64:	8c400814 	ori	r17,r17,32
 8014c68:	b5800044 	addi	r22,r22,1
 8014c6c:	18c03fcc 	andi	r3,r3,255
 8014c70:	18c0201c 	xori	r3,r3,128
 8014c74:	18ffe004 	addi	r3,r3,-128
 8014c78:	003b9c06 	br	8013aec <__alt_data_end+0xfc013aec>
 8014c7c:	b809883a 	mov	r4,r23
 8014c80:	da002a15 	stw	r8,168(sp)
 8014c84:	800c2840 	call	800c284 <strlen>
 8014c88:	1029883a 	mov	r20,r2
 8014c8c:	dd401d83 	ldbu	r21,118(sp)
 8014c90:	df002215 	stw	fp,136(sp)
 8014c94:	0021883a 	mov	r16,zero
 8014c98:	da002a17 	ldw	r8,168(sp)
 8014c9c:	003c3906 	br	8013d84 <__alt_data_end+0xfc013d84>
 8014ca0:	d9402017 	ldw	r5,128(sp)
 8014ca4:	d9002117 	ldw	r4,132(sp)
 8014ca8:	d9801a04 	addi	r6,sp,104
 8014cac:	80138640 	call	8013864 <__sprint_r.part.0>
 8014cb0:	103e691e 	bne	r2,zero,8014658 <__alt_data_end+0xfc014658>
 8014cb4:	d9001b17 	ldw	r4,108(sp)
 8014cb8:	d8801c17 	ldw	r2,112(sp)
 8014cbc:	d811883a 	mov	r8,sp
 8014cc0:	21400044 	addi	r5,r4,1
 8014cc4:	003e2e06 	br	8014580 <__alt_data_end+0xfc014580>
 8014cc8:	01020d74 	movhi	r4,2101
 8014ccc:	2121b204 	addi	r4,r4,-31032
 8014cd0:	d9002315 	stw	r4,140(sp)
 8014cd4:	d9001b17 	ldw	r4,108(sp)
 8014cd8:	21000044 	addi	r4,r4,1
 8014cdc:	003c5e06 	br	8013e58 <__alt_data_end+0xfc013e58>
 8014ce0:	002b883a 	mov	r21,zero
 8014ce4:	00800084 	movi	r2,2
 8014ce8:	10803fcc 	andi	r2,r2,255
 8014cec:	01000044 	movi	r4,1
 8014cf0:	11002b26 	beq	r2,r4,8014da0 <___vfiprintf_internal_r+0x1428>
 8014cf4:	01000084 	movi	r4,2
 8014cf8:	11002b1e 	bne	r2,r4,8014da8 <___vfiprintf_internal_r+0x1430>
 8014cfc:	1823883a 	mov	r17,r3
 8014d00:	003ee506 	br	8014898 <__alt_data_end+0xfc014898>
 8014d04:	8807883a 	mov	r3,r17
 8014d08:	00800044 	movi	r2,1
 8014d0c:	003ff606 	br	8014ce8 <__alt_data_end+0xfc014ce8>
 8014d10:	00800184 	movi	r2,6
 8014d14:	1400012e 	bgeu	r2,r16,8014d1c <___vfiprintf_internal_r+0x13a4>
 8014d18:	1021883a 	mov	r16,r2
 8014d1c:	8029883a 	mov	r20,r16
 8014d20:	8027883a 	mov	r19,r16
 8014d24:	80002216 	blt	r16,zero,8014db0 <___vfiprintf_internal_r+0x1438>
 8014d28:	05c20d74 	movhi	r23,2101
 8014d2c:	df002215 	stw	fp,136(sp)
 8014d30:	bde15304 	addi	r23,r23,-31412
 8014d34:	003cfb06 	br	8014124 <__alt_data_end+0xfc014124>
 8014d38:	d9002217 	ldw	r4,136(sp)
 8014d3c:	d9402417 	ldw	r5,144(sp)
 8014d40:	20800017 	ldw	r2,0(r4)
 8014d44:	21000104 	addi	r4,r4,4
 8014d48:	d9002215 	stw	r4,136(sp)
 8014d4c:	11400015 	stw	r5,0(r2)
 8014d50:	003b3d06 	br	8013a48 <__alt_data_end+0xfc013a48>
 8014d54:	01420d74 	movhi	r5,2101
 8014d58:	2961b204 	addi	r5,r5,-31032
 8014d5c:	d9402315 	stw	r5,140(sp)
 8014d60:	d9401b17 	ldw	r5,108(sp)
 8014d64:	29400044 	addi	r5,r5,1
 8014d68:	003e6d06 	br	8014720 <__alt_data_end+0xfc014720>
 8014d6c:	8029883a 	mov	r20,r16
 8014d70:	dd401d83 	ldbu	r21,118(sp)
 8014d74:	df002215 	stw	fp,136(sp)
 8014d78:	0021883a 	mov	r16,zero
 8014d7c:	003c0106 	br	8013d84 <__alt_data_end+0xfc013d84>
 8014d80:	00c20d74 	movhi	r3,2101
 8014d84:	18e1ae04 	addi	r3,r3,-31048
 8014d88:	d8c02315 	stw	r3,140(sp)
 8014d8c:	280d883a 	mov	r6,r5
 8014d90:	003c6906 	br	8013f38 <__alt_data_end+0xfc013f38>
 8014d94:	802d883a 	mov	r22,r16
 8014d98:	0021883a 	mov	r16,zero
 8014d9c:	003b5406 	br	8013af0 <__alt_data_end+0xfc013af0>
 8014da0:	1823883a 	mov	r17,r3
 8014da4:	003cf306 	br	8014174 <__alt_data_end+0xfc014174>
 8014da8:	1823883a 	mov	r17,r3
 8014dac:	003cad06 	br	8014064 <__alt_data_end+0xfc014064>
 8014db0:	0027883a 	mov	r19,zero
 8014db4:	003fdc06 	br	8014d28 <__alt_data_end+0xfc014d28>
 8014db8:	d9402217 	ldw	r5,136(sp)
 8014dbc:	8005883a 	mov	r2,r16
 8014dc0:	b0c00043 	ldbu	r3,1(r22)
 8014dc4:	2c000017 	ldw	r16,0(r5)
 8014dc8:	29000104 	addi	r4,r5,4
 8014dcc:	d9002215 	stw	r4,136(sp)
 8014dd0:	102d883a 	mov	r22,r2
 8014dd4:	803fa50e 	bge	r16,zero,8014c6c <__alt_data_end+0xfc014c6c>
 8014dd8:	18c03fcc 	andi	r3,r3,255
 8014ddc:	18c0201c 	xori	r3,r3,128
 8014de0:	043fffc4 	movi	r16,-1
 8014de4:	18ffe004 	addi	r3,r3,-128
 8014de8:	003b4006 	br	8013aec <__alt_data_end+0xfc013aec>
 8014dec:	d9402303 	ldbu	r5,140(sp)
 8014df0:	d9401d85 	stb	r5,118(sp)
 8014df4:	003cae06 	br	80140b0 <__alt_data_end+0xfc0140b0>
 8014df8:	d8c02303 	ldbu	r3,140(sp)
 8014dfc:	d8c01d85 	stb	r3,118(sp)
 8014e00:	003d1406 	br	8014254 <__alt_data_end+0xfc014254>
 8014e04:	d8c02303 	ldbu	r3,140(sp)
 8014e08:	d8c01d85 	stb	r3,118(sp)
 8014e0c:	003cca06 	br	8014138 <__alt_data_end+0xfc014138>
 8014e10:	8880004c 	andi	r2,r17,1
 8014e14:	002b883a 	mov	r21,zero
 8014e18:	10000526 	beq	r2,zero,8014e30 <___vfiprintf_internal_r+0x14b8>
 8014e1c:	00800c04 	movi	r2,48
 8014e20:	d88019c5 	stb	r2,103(sp)
 8014e24:	dd002817 	ldw	r20,160(sp)
 8014e28:	ddc019c4 	addi	r23,sp,103
 8014e2c:	003bd506 	br	8013d84 <__alt_data_end+0xfc013d84>
 8014e30:	0029883a 	mov	r20,zero
 8014e34:	ddc01a04 	addi	r23,sp,104
 8014e38:	003bd206 	br	8013d84 <__alt_data_end+0xfc013d84>
 8014e3c:	d9002303 	ldbu	r4,140(sp)
 8014e40:	d9001d85 	stb	r4,118(sp)
 8014e44:	003da606 	br	80144e0 <__alt_data_end+0xfc0144e0>
 8014e48:	d8c02303 	ldbu	r3,140(sp)
 8014e4c:	d8c01d85 	stb	r3,118(sp)
 8014e50:	003c7606 	br	801402c <__alt_data_end+0xfc01402c>
 8014e54:	d8c02303 	ldbu	r3,140(sp)
 8014e58:	d8c01d85 	stb	r3,118(sp)
 8014e5c:	003c6506 	br	8013ff4 <__alt_data_end+0xfc013ff4>
 8014e60:	d9002303 	ldbu	r4,140(sp)
 8014e64:	d9001d85 	stb	r4,118(sp)
 8014e68:	003d3d06 	br	8014360 <__alt_data_end+0xfc014360>
 8014e6c:	d8c02303 	ldbu	r3,140(sp)
 8014e70:	d8c01d85 	stb	r3,118(sp)
 8014e74:	003d1d06 	br	80142ec <__alt_data_end+0xfc0142ec>
 8014e78:	d8c02303 	ldbu	r3,140(sp)
 8014e7c:	d8c01d85 	stb	r3,118(sp)
 8014e80:	003d0306 	br	8014290 <__alt_data_end+0xfc014290>

08014e84 <__vfiprintf_internal>:
 8014e84:	00820d74 	movhi	r2,2101
 8014e88:	10a88304 	addi	r2,r2,-24052
 8014e8c:	300f883a 	mov	r7,r6
 8014e90:	280d883a 	mov	r6,r5
 8014e94:	200b883a 	mov	r5,r4
 8014e98:	11000017 	ldw	r4,0(r2)
 8014e9c:	80139781 	jmpi	8013978 <___vfiprintf_internal_r>

08014ea0 <__sbprintf>:
 8014ea0:	2880030b 	ldhu	r2,12(r5)
 8014ea4:	2ac01917 	ldw	r11,100(r5)
 8014ea8:	2a80038b 	ldhu	r10,14(r5)
 8014eac:	2a400717 	ldw	r9,28(r5)
 8014eb0:	2a000917 	ldw	r8,36(r5)
 8014eb4:	defee204 	addi	sp,sp,-1144
 8014eb8:	00c10004 	movi	r3,1024
 8014ebc:	dc011a15 	stw	r16,1128(sp)
 8014ec0:	10bfff4c 	andi	r2,r2,65533
 8014ec4:	2821883a 	mov	r16,r5
 8014ec8:	d8cb883a 	add	r5,sp,r3
 8014ecc:	dc811c15 	stw	r18,1136(sp)
 8014ed0:	dc411b15 	stw	r17,1132(sp)
 8014ed4:	dfc11d15 	stw	ra,1140(sp)
 8014ed8:	2025883a 	mov	r18,r4
 8014edc:	d881030d 	sth	r2,1036(sp)
 8014ee0:	dac11915 	stw	r11,1124(sp)
 8014ee4:	da81038d 	sth	r10,1038(sp)
 8014ee8:	da410715 	stw	r9,1052(sp)
 8014eec:	da010915 	stw	r8,1060(sp)
 8014ef0:	dec10015 	stw	sp,1024(sp)
 8014ef4:	dec10415 	stw	sp,1040(sp)
 8014ef8:	d8c10215 	stw	r3,1032(sp)
 8014efc:	d8c10515 	stw	r3,1044(sp)
 8014f00:	d8010615 	stw	zero,1048(sp)
 8014f04:	80139780 	call	8013978 <___vfiprintf_internal_r>
 8014f08:	1023883a 	mov	r17,r2
 8014f0c:	10000416 	blt	r2,zero,8014f20 <__sbprintf+0x80>
 8014f10:	d9410004 	addi	r5,sp,1024
 8014f14:	9009883a 	mov	r4,r18
 8014f18:	80102f00 	call	80102f0 <_fflush_r>
 8014f1c:	10000d1e 	bne	r2,zero,8014f54 <__sbprintf+0xb4>
 8014f20:	d881030b 	ldhu	r2,1036(sp)
 8014f24:	1080100c 	andi	r2,r2,64
 8014f28:	10000326 	beq	r2,zero,8014f38 <__sbprintf+0x98>
 8014f2c:	8080030b 	ldhu	r2,12(r16)
 8014f30:	10801014 	ori	r2,r2,64
 8014f34:	8080030d 	sth	r2,12(r16)
 8014f38:	8805883a 	mov	r2,r17
 8014f3c:	dfc11d17 	ldw	ra,1140(sp)
 8014f40:	dc811c17 	ldw	r18,1136(sp)
 8014f44:	dc411b17 	ldw	r17,1132(sp)
 8014f48:	dc011a17 	ldw	r16,1128(sp)
 8014f4c:	dec11e04 	addi	sp,sp,1144
 8014f50:	f800283a 	ret
 8014f54:	047fffc4 	movi	r17,-1
 8014f58:	003ff106 	br	8014f20 <__alt_data_end+0xfc014f20>

08014f5c <_write_r>:
 8014f5c:	defffd04 	addi	sp,sp,-12
 8014f60:	2805883a 	mov	r2,r5
 8014f64:	dc000015 	stw	r16,0(sp)
 8014f68:	04020d74 	movhi	r16,2101
 8014f6c:	dc400115 	stw	r17,4(sp)
 8014f70:	300b883a 	mov	r5,r6
 8014f74:	842f6e04 	addi	r16,r16,-16968
 8014f78:	2023883a 	mov	r17,r4
 8014f7c:	380d883a 	mov	r6,r7
 8014f80:	1009883a 	mov	r4,r2
 8014f84:	dfc00215 	stw	ra,8(sp)
 8014f88:	80000015 	stw	zero,0(r16)
 8014f8c:	80168d40 	call	80168d4 <write>
 8014f90:	00ffffc4 	movi	r3,-1
 8014f94:	10c00526 	beq	r2,r3,8014fac <_write_r+0x50>
 8014f98:	dfc00217 	ldw	ra,8(sp)
 8014f9c:	dc400117 	ldw	r17,4(sp)
 8014fa0:	dc000017 	ldw	r16,0(sp)
 8014fa4:	dec00304 	addi	sp,sp,12
 8014fa8:	f800283a 	ret
 8014fac:	80c00017 	ldw	r3,0(r16)
 8014fb0:	183ff926 	beq	r3,zero,8014f98 <__alt_data_end+0xfc014f98>
 8014fb4:	88c00015 	stw	r3,0(r17)
 8014fb8:	003ff706 	br	8014f98 <__alt_data_end+0xfc014f98>

08014fbc <_close_r>:
 8014fbc:	defffd04 	addi	sp,sp,-12
 8014fc0:	dc000015 	stw	r16,0(sp)
 8014fc4:	04020d74 	movhi	r16,2101
 8014fc8:	dc400115 	stw	r17,4(sp)
 8014fcc:	842f6e04 	addi	r16,r16,-16968
 8014fd0:	2023883a 	mov	r17,r4
 8014fd4:	2809883a 	mov	r4,r5
 8014fd8:	dfc00215 	stw	ra,8(sp)
 8014fdc:	80000015 	stw	zero,0(r16)
 8014fe0:	8015ea80 	call	8015ea8 <close>
 8014fe4:	00ffffc4 	movi	r3,-1
 8014fe8:	10c00526 	beq	r2,r3,8015000 <_close_r+0x44>
 8014fec:	dfc00217 	ldw	ra,8(sp)
 8014ff0:	dc400117 	ldw	r17,4(sp)
 8014ff4:	dc000017 	ldw	r16,0(sp)
 8014ff8:	dec00304 	addi	sp,sp,12
 8014ffc:	f800283a 	ret
 8015000:	80c00017 	ldw	r3,0(r16)
 8015004:	183ff926 	beq	r3,zero,8014fec <__alt_data_end+0xfc014fec>
 8015008:	88c00015 	stw	r3,0(r17)
 801500c:	003ff706 	br	8014fec <__alt_data_end+0xfc014fec>

08015010 <_calloc_r>:
 8015010:	defffe04 	addi	sp,sp,-8
 8015014:	2805883a 	mov	r2,r5
 8015018:	dc000015 	stw	r16,0(sp)
 801501c:	300b883a 	mov	r5,r6
 8015020:	2021883a 	mov	r16,r4
 8015024:	1009883a 	mov	r4,r2
 8015028:	dfc00115 	stw	ra,4(sp)
 801502c:	8007f540 	call	8007f54 <__mulsi3>
 8015030:	100b883a 	mov	r5,r2
 8015034:	8009883a 	mov	r4,r16
 8015038:	80114480 	call	8011448 <_malloc_r>
 801503c:	10002926 	beq	r2,zero,80150e4 <_calloc_r+0xd4>
 8015040:	11bfff17 	ldw	r6,-4(r2)
 8015044:	1021883a 	mov	r16,r2
 8015048:	00bfff04 	movi	r2,-4
 801504c:	308c703a 	and	r6,r6,r2
 8015050:	00c00904 	movi	r3,36
 8015054:	308d883a 	add	r6,r6,r2
 8015058:	19801636 	bltu	r3,r6,80150b4 <_calloc_r+0xa4>
 801505c:	008004c4 	movi	r2,19
 8015060:	11800b2e 	bgeu	r2,r6,8015090 <_calloc_r+0x80>
 8015064:	80000015 	stw	zero,0(r16)
 8015068:	80000115 	stw	zero,4(r16)
 801506c:	008006c4 	movi	r2,27
 8015070:	11801a2e 	bgeu	r2,r6,80150dc <_calloc_r+0xcc>
 8015074:	80000215 	stw	zero,8(r16)
 8015078:	80000315 	stw	zero,12(r16)
 801507c:	30c0151e 	bne	r6,r3,80150d4 <_calloc_r+0xc4>
 8015080:	80000415 	stw	zero,16(r16)
 8015084:	80800604 	addi	r2,r16,24
 8015088:	80000515 	stw	zero,20(r16)
 801508c:	00000106 	br	8015094 <_calloc_r+0x84>
 8015090:	8005883a 	mov	r2,r16
 8015094:	10000015 	stw	zero,0(r2)
 8015098:	10000115 	stw	zero,4(r2)
 801509c:	10000215 	stw	zero,8(r2)
 80150a0:	8005883a 	mov	r2,r16
 80150a4:	dfc00117 	ldw	ra,4(sp)
 80150a8:	dc000017 	ldw	r16,0(sp)
 80150ac:	dec00204 	addi	sp,sp,8
 80150b0:	f800283a 	ret
 80150b4:	000b883a 	mov	r5,zero
 80150b8:	8009883a 	mov	r4,r16
 80150bc:	800c01c0 	call	800c01c <memset>
 80150c0:	8005883a 	mov	r2,r16
 80150c4:	dfc00117 	ldw	ra,4(sp)
 80150c8:	dc000017 	ldw	r16,0(sp)
 80150cc:	dec00204 	addi	sp,sp,8
 80150d0:	f800283a 	ret
 80150d4:	80800404 	addi	r2,r16,16
 80150d8:	003fee06 	br	8015094 <__alt_data_end+0xfc015094>
 80150dc:	80800204 	addi	r2,r16,8
 80150e0:	003fec06 	br	8015094 <__alt_data_end+0xfc015094>
 80150e4:	0005883a 	mov	r2,zero
 80150e8:	003fee06 	br	80150a4 <__alt_data_end+0xfc0150a4>

080150ec <_fclose_r>:
 80150ec:	28003926 	beq	r5,zero,80151d4 <_fclose_r+0xe8>
 80150f0:	defffc04 	addi	sp,sp,-16
 80150f4:	dc400115 	stw	r17,4(sp)
 80150f8:	dc000015 	stw	r16,0(sp)
 80150fc:	dfc00315 	stw	ra,12(sp)
 8015100:	dc800215 	stw	r18,8(sp)
 8015104:	2023883a 	mov	r17,r4
 8015108:	2821883a 	mov	r16,r5
 801510c:	20000226 	beq	r4,zero,8015118 <_fclose_r+0x2c>
 8015110:	20800e17 	ldw	r2,56(r4)
 8015114:	10002726 	beq	r2,zero,80151b4 <_fclose_r+0xc8>
 8015118:	8080030f 	ldh	r2,12(r16)
 801511c:	1000071e 	bne	r2,zero,801513c <_fclose_r+0x50>
 8015120:	0005883a 	mov	r2,zero
 8015124:	dfc00317 	ldw	ra,12(sp)
 8015128:	dc800217 	ldw	r18,8(sp)
 801512c:	dc400117 	ldw	r17,4(sp)
 8015130:	dc000017 	ldw	r16,0(sp)
 8015134:	dec00404 	addi	sp,sp,16
 8015138:	f800283a 	ret
 801513c:	800b883a 	mov	r5,r16
 8015140:	8809883a 	mov	r4,r17
 8015144:	80100d40 	call	80100d4 <__sflush_r>
 8015148:	1025883a 	mov	r18,r2
 801514c:	80800b17 	ldw	r2,44(r16)
 8015150:	10000426 	beq	r2,zero,8015164 <_fclose_r+0x78>
 8015154:	81400717 	ldw	r5,28(r16)
 8015158:	8809883a 	mov	r4,r17
 801515c:	103ee83a 	callr	r2
 8015160:	10001616 	blt	r2,zero,80151bc <_fclose_r+0xd0>
 8015164:	8080030b 	ldhu	r2,12(r16)
 8015168:	1080200c 	andi	r2,r2,128
 801516c:	1000151e 	bne	r2,zero,80151c4 <_fclose_r+0xd8>
 8015170:	81400c17 	ldw	r5,48(r16)
 8015174:	28000526 	beq	r5,zero,801518c <_fclose_r+0xa0>
 8015178:	80801004 	addi	r2,r16,64
 801517c:	28800226 	beq	r5,r2,8015188 <_fclose_r+0x9c>
 8015180:	8809883a 	mov	r4,r17
 8015184:	80108500 	call	8010850 <_free_r>
 8015188:	80000c15 	stw	zero,48(r16)
 801518c:	81401117 	ldw	r5,68(r16)
 8015190:	28000326 	beq	r5,zero,80151a0 <_fclose_r+0xb4>
 8015194:	8809883a 	mov	r4,r17
 8015198:	80108500 	call	8010850 <_free_r>
 801519c:	80001115 	stw	zero,68(r16)
 80151a0:	80106ec0 	call	80106ec <__sfp_lock_acquire>
 80151a4:	8000030d 	sth	zero,12(r16)
 80151a8:	80106f00 	call	80106f0 <__sfp_lock_release>
 80151ac:	9005883a 	mov	r2,r18
 80151b0:	003fdc06 	br	8015124 <__alt_data_end+0xfc015124>
 80151b4:	80106dc0 	call	80106dc <__sinit>
 80151b8:	003fd706 	br	8015118 <__alt_data_end+0xfc015118>
 80151bc:	04bfffc4 	movi	r18,-1
 80151c0:	003fe806 	br	8015164 <__alt_data_end+0xfc015164>
 80151c4:	81400417 	ldw	r5,16(r16)
 80151c8:	8809883a 	mov	r4,r17
 80151cc:	80108500 	call	8010850 <_free_r>
 80151d0:	003fe706 	br	8015170 <__alt_data_end+0xfc015170>
 80151d4:	0005883a 	mov	r2,zero
 80151d8:	f800283a 	ret

080151dc <fclose>:
 80151dc:	00820d74 	movhi	r2,2101
 80151e0:	10a88304 	addi	r2,r2,-24052
 80151e4:	200b883a 	mov	r5,r4
 80151e8:	11000017 	ldw	r4,0(r2)
 80151ec:	80150ec1 	jmpi	80150ec <_fclose_r>

080151f0 <__fputwc>:
 80151f0:	defff804 	addi	sp,sp,-32
 80151f4:	dcc00415 	stw	r19,16(sp)
 80151f8:	dc800315 	stw	r18,12(sp)
 80151fc:	dc000115 	stw	r16,4(sp)
 8015200:	dfc00715 	stw	ra,28(sp)
 8015204:	dd400615 	stw	r21,24(sp)
 8015208:	dd000515 	stw	r20,20(sp)
 801520c:	dc400215 	stw	r17,8(sp)
 8015210:	2027883a 	mov	r19,r4
 8015214:	2825883a 	mov	r18,r5
 8015218:	3021883a 	mov	r16,r6
 801521c:	80112380 	call	8011238 <__locale_mb_cur_max>
 8015220:	00c00044 	movi	r3,1
 8015224:	10c03e26 	beq	r2,r3,8015320 <__fputwc+0x130>
 8015228:	81c01704 	addi	r7,r16,92
 801522c:	900d883a 	mov	r6,r18
 8015230:	d80b883a 	mov	r5,sp
 8015234:	9809883a 	mov	r4,r19
 8015238:	80156c00 	call	80156c0 <_wcrtomb_r>
 801523c:	1029883a 	mov	r20,r2
 8015240:	00bfffc4 	movi	r2,-1
 8015244:	a0802026 	beq	r20,r2,80152c8 <__fputwc+0xd8>
 8015248:	d9400003 	ldbu	r5,0(sp)
 801524c:	a0001c26 	beq	r20,zero,80152c0 <__fputwc+0xd0>
 8015250:	0023883a 	mov	r17,zero
 8015254:	05400284 	movi	r21,10
 8015258:	00000906 	br	8015280 <__fputwc+0x90>
 801525c:	80800017 	ldw	r2,0(r16)
 8015260:	11400005 	stb	r5,0(r2)
 8015264:	80c00017 	ldw	r3,0(r16)
 8015268:	18c00044 	addi	r3,r3,1
 801526c:	80c00015 	stw	r3,0(r16)
 8015270:	8c400044 	addi	r17,r17,1
 8015274:	dc45883a 	add	r2,sp,r17
 8015278:	8d00112e 	bgeu	r17,r20,80152c0 <__fputwc+0xd0>
 801527c:	11400003 	ldbu	r5,0(r2)
 8015280:	80c00217 	ldw	r3,8(r16)
 8015284:	18ffffc4 	addi	r3,r3,-1
 8015288:	80c00215 	stw	r3,8(r16)
 801528c:	183ff30e 	bge	r3,zero,801525c <__alt_data_end+0xfc01525c>
 8015290:	80800617 	ldw	r2,24(r16)
 8015294:	18801916 	blt	r3,r2,80152fc <__fputwc+0x10c>
 8015298:	80800017 	ldw	r2,0(r16)
 801529c:	11400005 	stb	r5,0(r2)
 80152a0:	80800017 	ldw	r2,0(r16)
 80152a4:	10c00003 	ldbu	r3,0(r2)
 80152a8:	10800044 	addi	r2,r2,1
 80152ac:	1d402326 	beq	r3,r21,801533c <__fputwc+0x14c>
 80152b0:	80800015 	stw	r2,0(r16)
 80152b4:	8c400044 	addi	r17,r17,1
 80152b8:	dc45883a 	add	r2,sp,r17
 80152bc:	8d3fef36 	bltu	r17,r20,801527c <__alt_data_end+0xfc01527c>
 80152c0:	9005883a 	mov	r2,r18
 80152c4:	00000406 	br	80152d8 <__fputwc+0xe8>
 80152c8:	80c0030b 	ldhu	r3,12(r16)
 80152cc:	a005883a 	mov	r2,r20
 80152d0:	18c01014 	ori	r3,r3,64
 80152d4:	80c0030d 	sth	r3,12(r16)
 80152d8:	dfc00717 	ldw	ra,28(sp)
 80152dc:	dd400617 	ldw	r21,24(sp)
 80152e0:	dd000517 	ldw	r20,20(sp)
 80152e4:	dcc00417 	ldw	r19,16(sp)
 80152e8:	dc800317 	ldw	r18,12(sp)
 80152ec:	dc400217 	ldw	r17,8(sp)
 80152f0:	dc000117 	ldw	r16,4(sp)
 80152f4:	dec00804 	addi	sp,sp,32
 80152f8:	f800283a 	ret
 80152fc:	800d883a 	mov	r6,r16
 8015300:	29403fcc 	andi	r5,r5,255
 8015304:	9809883a 	mov	r4,r19
 8015308:	80155680 	call	8015568 <__swbuf_r>
 801530c:	10bfffe0 	cmpeqi	r2,r2,-1
 8015310:	10803fcc 	andi	r2,r2,255
 8015314:	103fd626 	beq	r2,zero,8015270 <__alt_data_end+0xfc015270>
 8015318:	00bfffc4 	movi	r2,-1
 801531c:	003fee06 	br	80152d8 <__alt_data_end+0xfc0152d8>
 8015320:	90ffffc4 	addi	r3,r18,-1
 8015324:	01003f84 	movi	r4,254
 8015328:	20ffbf36 	bltu	r4,r3,8015228 <__alt_data_end+0xfc015228>
 801532c:	900b883a 	mov	r5,r18
 8015330:	dc800005 	stb	r18,0(sp)
 8015334:	1029883a 	mov	r20,r2
 8015338:	003fc506 	br	8015250 <__alt_data_end+0xfc015250>
 801533c:	800d883a 	mov	r6,r16
 8015340:	a80b883a 	mov	r5,r21
 8015344:	9809883a 	mov	r4,r19
 8015348:	80155680 	call	8015568 <__swbuf_r>
 801534c:	10bfffe0 	cmpeqi	r2,r2,-1
 8015350:	003fef06 	br	8015310 <__alt_data_end+0xfc015310>

08015354 <_fputwc_r>:
 8015354:	3080030b 	ldhu	r2,12(r6)
 8015358:	10c8000c 	andi	r3,r2,8192
 801535c:	1800051e 	bne	r3,zero,8015374 <_fputwc_r+0x20>
 8015360:	30c01917 	ldw	r3,100(r6)
 8015364:	10880014 	ori	r2,r2,8192
 8015368:	3080030d 	sth	r2,12(r6)
 801536c:	18880014 	ori	r2,r3,8192
 8015370:	30801915 	stw	r2,100(r6)
 8015374:	80151f01 	jmpi	80151f0 <__fputwc>

08015378 <fputwc>:
 8015378:	00820d74 	movhi	r2,2101
 801537c:	defffc04 	addi	sp,sp,-16
 8015380:	10a88304 	addi	r2,r2,-24052
 8015384:	dc000115 	stw	r16,4(sp)
 8015388:	14000017 	ldw	r16,0(r2)
 801538c:	dc400215 	stw	r17,8(sp)
 8015390:	dfc00315 	stw	ra,12(sp)
 8015394:	2023883a 	mov	r17,r4
 8015398:	80000226 	beq	r16,zero,80153a4 <fputwc+0x2c>
 801539c:	80800e17 	ldw	r2,56(r16)
 80153a0:	10001026 	beq	r2,zero,80153e4 <fputwc+0x6c>
 80153a4:	2880030b 	ldhu	r2,12(r5)
 80153a8:	10c8000c 	andi	r3,r2,8192
 80153ac:	1800051e 	bne	r3,zero,80153c4 <fputwc+0x4c>
 80153b0:	28c01917 	ldw	r3,100(r5)
 80153b4:	10880014 	ori	r2,r2,8192
 80153b8:	2880030d 	sth	r2,12(r5)
 80153bc:	18880014 	ori	r2,r3,8192
 80153c0:	28801915 	stw	r2,100(r5)
 80153c4:	280d883a 	mov	r6,r5
 80153c8:	8009883a 	mov	r4,r16
 80153cc:	880b883a 	mov	r5,r17
 80153d0:	dfc00317 	ldw	ra,12(sp)
 80153d4:	dc400217 	ldw	r17,8(sp)
 80153d8:	dc000117 	ldw	r16,4(sp)
 80153dc:	dec00404 	addi	sp,sp,16
 80153e0:	80151f01 	jmpi	80151f0 <__fputwc>
 80153e4:	8009883a 	mov	r4,r16
 80153e8:	d9400015 	stw	r5,0(sp)
 80153ec:	80106dc0 	call	80106dc <__sinit>
 80153f0:	d9400017 	ldw	r5,0(sp)
 80153f4:	003feb06 	br	80153a4 <__alt_data_end+0xfc0153a4>

080153f8 <_fstat_r>:
 80153f8:	defffd04 	addi	sp,sp,-12
 80153fc:	2805883a 	mov	r2,r5
 8015400:	dc000015 	stw	r16,0(sp)
 8015404:	04020d74 	movhi	r16,2101
 8015408:	dc400115 	stw	r17,4(sp)
 801540c:	842f6e04 	addi	r16,r16,-16968
 8015410:	2023883a 	mov	r17,r4
 8015414:	300b883a 	mov	r5,r6
 8015418:	1009883a 	mov	r4,r2
 801541c:	dfc00215 	stw	ra,8(sp)
 8015420:	80000015 	stw	zero,0(r16)
 8015424:	8015fe80 	call	8015fe8 <fstat>
 8015428:	00ffffc4 	movi	r3,-1
 801542c:	10c00526 	beq	r2,r3,8015444 <_fstat_r+0x4c>
 8015430:	dfc00217 	ldw	ra,8(sp)
 8015434:	dc400117 	ldw	r17,4(sp)
 8015438:	dc000017 	ldw	r16,0(sp)
 801543c:	dec00304 	addi	sp,sp,12
 8015440:	f800283a 	ret
 8015444:	80c00017 	ldw	r3,0(r16)
 8015448:	183ff926 	beq	r3,zero,8015430 <__alt_data_end+0xfc015430>
 801544c:	88c00015 	stw	r3,0(r17)
 8015450:	003ff706 	br	8015430 <__alt_data_end+0xfc015430>

08015454 <_isatty_r>:
 8015454:	defffd04 	addi	sp,sp,-12
 8015458:	dc000015 	stw	r16,0(sp)
 801545c:	04020d74 	movhi	r16,2101
 8015460:	dc400115 	stw	r17,4(sp)
 8015464:	842f6e04 	addi	r16,r16,-16968
 8015468:	2023883a 	mov	r17,r4
 801546c:	2809883a 	mov	r4,r5
 8015470:	dfc00215 	stw	ra,8(sp)
 8015474:	80000015 	stw	zero,0(r16)
 8015478:	80160dc0 	call	80160dc <isatty>
 801547c:	00ffffc4 	movi	r3,-1
 8015480:	10c00526 	beq	r2,r3,8015498 <_isatty_r+0x44>
 8015484:	dfc00217 	ldw	ra,8(sp)
 8015488:	dc400117 	ldw	r17,4(sp)
 801548c:	dc000017 	ldw	r16,0(sp)
 8015490:	dec00304 	addi	sp,sp,12
 8015494:	f800283a 	ret
 8015498:	80c00017 	ldw	r3,0(r16)
 801549c:	183ff926 	beq	r3,zero,8015484 <__alt_data_end+0xfc015484>
 80154a0:	88c00015 	stw	r3,0(r17)
 80154a4:	003ff706 	br	8015484 <__alt_data_end+0xfc015484>

080154a8 <_lseek_r>:
 80154a8:	defffd04 	addi	sp,sp,-12
 80154ac:	2805883a 	mov	r2,r5
 80154b0:	dc000015 	stw	r16,0(sp)
 80154b4:	04020d74 	movhi	r16,2101
 80154b8:	dc400115 	stw	r17,4(sp)
 80154bc:	300b883a 	mov	r5,r6
 80154c0:	842f6e04 	addi	r16,r16,-16968
 80154c4:	2023883a 	mov	r17,r4
 80154c8:	380d883a 	mov	r6,r7
 80154cc:	1009883a 	mov	r4,r2
 80154d0:	dfc00215 	stw	ra,8(sp)
 80154d4:	80000015 	stw	zero,0(r16)
 80154d8:	80162b00 	call	80162b0 <lseek>
 80154dc:	00ffffc4 	movi	r3,-1
 80154e0:	10c00526 	beq	r2,r3,80154f8 <_lseek_r+0x50>
 80154e4:	dfc00217 	ldw	ra,8(sp)
 80154e8:	dc400117 	ldw	r17,4(sp)
 80154ec:	dc000017 	ldw	r16,0(sp)
 80154f0:	dec00304 	addi	sp,sp,12
 80154f4:	f800283a 	ret
 80154f8:	80c00017 	ldw	r3,0(r16)
 80154fc:	183ff926 	beq	r3,zero,80154e4 <__alt_data_end+0xfc0154e4>
 8015500:	88c00015 	stw	r3,0(r17)
 8015504:	003ff706 	br	80154e4 <__alt_data_end+0xfc0154e4>

08015508 <_read_r>:
 8015508:	defffd04 	addi	sp,sp,-12
 801550c:	2805883a 	mov	r2,r5
 8015510:	dc000015 	stw	r16,0(sp)
 8015514:	04020d74 	movhi	r16,2101
 8015518:	dc400115 	stw	r17,4(sp)
 801551c:	300b883a 	mov	r5,r6
 8015520:	842f6e04 	addi	r16,r16,-16968
 8015524:	2023883a 	mov	r17,r4
 8015528:	380d883a 	mov	r6,r7
 801552c:	1009883a 	mov	r4,r2
 8015530:	dfc00215 	stw	ra,8(sp)
 8015534:	80000015 	stw	zero,0(r16)
 8015538:	801648c0 	call	801648c <read>
 801553c:	00ffffc4 	movi	r3,-1
 8015540:	10c00526 	beq	r2,r3,8015558 <_read_r+0x50>
 8015544:	dfc00217 	ldw	ra,8(sp)
 8015548:	dc400117 	ldw	r17,4(sp)
 801554c:	dc000017 	ldw	r16,0(sp)
 8015550:	dec00304 	addi	sp,sp,12
 8015554:	f800283a 	ret
 8015558:	80c00017 	ldw	r3,0(r16)
 801555c:	183ff926 	beq	r3,zero,8015544 <__alt_data_end+0xfc015544>
 8015560:	88c00015 	stw	r3,0(r17)
 8015564:	003ff706 	br	8015544 <__alt_data_end+0xfc015544>

08015568 <__swbuf_r>:
 8015568:	defffb04 	addi	sp,sp,-20
 801556c:	dcc00315 	stw	r19,12(sp)
 8015570:	dc800215 	stw	r18,8(sp)
 8015574:	dc000015 	stw	r16,0(sp)
 8015578:	dfc00415 	stw	ra,16(sp)
 801557c:	dc400115 	stw	r17,4(sp)
 8015580:	2025883a 	mov	r18,r4
 8015584:	2827883a 	mov	r19,r5
 8015588:	3021883a 	mov	r16,r6
 801558c:	20000226 	beq	r4,zero,8015598 <__swbuf_r+0x30>
 8015590:	20800e17 	ldw	r2,56(r4)
 8015594:	10004226 	beq	r2,zero,80156a0 <__swbuf_r+0x138>
 8015598:	80800617 	ldw	r2,24(r16)
 801559c:	8100030b 	ldhu	r4,12(r16)
 80155a0:	80800215 	stw	r2,8(r16)
 80155a4:	2080020c 	andi	r2,r4,8
 80155a8:	10003626 	beq	r2,zero,8015684 <__swbuf_r+0x11c>
 80155ac:	80c00417 	ldw	r3,16(r16)
 80155b0:	18003426 	beq	r3,zero,8015684 <__swbuf_r+0x11c>
 80155b4:	2088000c 	andi	r2,r4,8192
 80155b8:	9c403fcc 	andi	r17,r19,255
 80155bc:	10001a26 	beq	r2,zero,8015628 <__swbuf_r+0xc0>
 80155c0:	80800017 	ldw	r2,0(r16)
 80155c4:	81000517 	ldw	r4,20(r16)
 80155c8:	10c7c83a 	sub	r3,r2,r3
 80155cc:	1900200e 	bge	r3,r4,8015650 <__swbuf_r+0xe8>
 80155d0:	18c00044 	addi	r3,r3,1
 80155d4:	81000217 	ldw	r4,8(r16)
 80155d8:	11400044 	addi	r5,r2,1
 80155dc:	81400015 	stw	r5,0(r16)
 80155e0:	213fffc4 	addi	r4,r4,-1
 80155e4:	81000215 	stw	r4,8(r16)
 80155e8:	14c00005 	stb	r19,0(r2)
 80155ec:	80800517 	ldw	r2,20(r16)
 80155f0:	10c01e26 	beq	r2,r3,801566c <__swbuf_r+0x104>
 80155f4:	8080030b 	ldhu	r2,12(r16)
 80155f8:	1080004c 	andi	r2,r2,1
 80155fc:	10000226 	beq	r2,zero,8015608 <__swbuf_r+0xa0>
 8015600:	00800284 	movi	r2,10
 8015604:	88801926 	beq	r17,r2,801566c <__swbuf_r+0x104>
 8015608:	8805883a 	mov	r2,r17
 801560c:	dfc00417 	ldw	ra,16(sp)
 8015610:	dcc00317 	ldw	r19,12(sp)
 8015614:	dc800217 	ldw	r18,8(sp)
 8015618:	dc400117 	ldw	r17,4(sp)
 801561c:	dc000017 	ldw	r16,0(sp)
 8015620:	dec00504 	addi	sp,sp,20
 8015624:	f800283a 	ret
 8015628:	81401917 	ldw	r5,100(r16)
 801562c:	00b7ffc4 	movi	r2,-8193
 8015630:	21080014 	ori	r4,r4,8192
 8015634:	2884703a 	and	r2,r5,r2
 8015638:	80801915 	stw	r2,100(r16)
 801563c:	80800017 	ldw	r2,0(r16)
 8015640:	8100030d 	sth	r4,12(r16)
 8015644:	81000517 	ldw	r4,20(r16)
 8015648:	10c7c83a 	sub	r3,r2,r3
 801564c:	193fe016 	blt	r3,r4,80155d0 <__alt_data_end+0xfc0155d0>
 8015650:	800b883a 	mov	r5,r16
 8015654:	9009883a 	mov	r4,r18
 8015658:	80102f00 	call	80102f0 <_fflush_r>
 801565c:	1000071e 	bne	r2,zero,801567c <__swbuf_r+0x114>
 8015660:	80800017 	ldw	r2,0(r16)
 8015664:	00c00044 	movi	r3,1
 8015668:	003fda06 	br	80155d4 <__alt_data_end+0xfc0155d4>
 801566c:	800b883a 	mov	r5,r16
 8015670:	9009883a 	mov	r4,r18
 8015674:	80102f00 	call	80102f0 <_fflush_r>
 8015678:	103fe326 	beq	r2,zero,8015608 <__alt_data_end+0xfc015608>
 801567c:	00bfffc4 	movi	r2,-1
 8015680:	003fe206 	br	801560c <__alt_data_end+0xfc01560c>
 8015684:	800b883a 	mov	r5,r16
 8015688:	9009883a 	mov	r4,r18
 801568c:	800e6d00 	call	800e6d0 <__swsetup_r>
 8015690:	103ffa1e 	bne	r2,zero,801567c <__alt_data_end+0xfc01567c>
 8015694:	8100030b 	ldhu	r4,12(r16)
 8015698:	80c00417 	ldw	r3,16(r16)
 801569c:	003fc506 	br	80155b4 <__alt_data_end+0xfc0155b4>
 80156a0:	80106dc0 	call	80106dc <__sinit>
 80156a4:	003fbc06 	br	8015598 <__alt_data_end+0xfc015598>

080156a8 <__swbuf>:
 80156a8:	00820d74 	movhi	r2,2101
 80156ac:	10a88304 	addi	r2,r2,-24052
 80156b0:	280d883a 	mov	r6,r5
 80156b4:	200b883a 	mov	r5,r4
 80156b8:	11000017 	ldw	r4,0(r2)
 80156bc:	80155681 	jmpi	8015568 <__swbuf_r>

080156c0 <_wcrtomb_r>:
 80156c0:	defff604 	addi	sp,sp,-40
 80156c4:	00820d74 	movhi	r2,2101
 80156c8:	dc800815 	stw	r18,32(sp)
 80156cc:	dc400715 	stw	r17,28(sp)
 80156d0:	dc000615 	stw	r16,24(sp)
 80156d4:	10a88704 	addi	r2,r2,-24036
 80156d8:	dfc00915 	stw	ra,36(sp)
 80156dc:	2021883a 	mov	r16,r4
 80156e0:	3823883a 	mov	r17,r7
 80156e4:	14800017 	ldw	r18,0(r2)
 80156e8:	28001426 	beq	r5,zero,801573c <_wcrtomb_r+0x7c>
 80156ec:	d9400415 	stw	r5,16(sp)
 80156f0:	d9800515 	stw	r6,20(sp)
 80156f4:	801122c0 	call	801122c <__locale_charset>
 80156f8:	d9800517 	ldw	r6,20(sp)
 80156fc:	d9400417 	ldw	r5,16(sp)
 8015700:	100f883a 	mov	r7,r2
 8015704:	dc400015 	stw	r17,0(sp)
 8015708:	8009883a 	mov	r4,r16
 801570c:	903ee83a 	callr	r18
 8015710:	00ffffc4 	movi	r3,-1
 8015714:	10c0031e 	bne	r2,r3,8015724 <_wcrtomb_r+0x64>
 8015718:	88000015 	stw	zero,0(r17)
 801571c:	00c02284 	movi	r3,138
 8015720:	80c00015 	stw	r3,0(r16)
 8015724:	dfc00917 	ldw	ra,36(sp)
 8015728:	dc800817 	ldw	r18,32(sp)
 801572c:	dc400717 	ldw	r17,28(sp)
 8015730:	dc000617 	ldw	r16,24(sp)
 8015734:	dec00a04 	addi	sp,sp,40
 8015738:	f800283a 	ret
 801573c:	801122c0 	call	801122c <__locale_charset>
 8015740:	100f883a 	mov	r7,r2
 8015744:	dc400015 	stw	r17,0(sp)
 8015748:	000d883a 	mov	r6,zero
 801574c:	d9400104 	addi	r5,sp,4
 8015750:	8009883a 	mov	r4,r16
 8015754:	903ee83a 	callr	r18
 8015758:	003fed06 	br	8015710 <__alt_data_end+0xfc015710>

0801575c <wcrtomb>:
 801575c:	defff604 	addi	sp,sp,-40
 8015760:	00820d74 	movhi	r2,2101
 8015764:	dc800615 	stw	r18,24(sp)
 8015768:	dc400515 	stw	r17,20(sp)
 801576c:	10a88304 	addi	r2,r2,-24052
 8015770:	dfc00915 	stw	ra,36(sp)
 8015774:	dd000815 	stw	r20,32(sp)
 8015778:	dcc00715 	stw	r19,28(sp)
 801577c:	dc000415 	stw	r16,16(sp)
 8015780:	3025883a 	mov	r18,r6
 8015784:	14400017 	ldw	r17,0(r2)
 8015788:	20001926 	beq	r4,zero,80157f0 <wcrtomb+0x94>
 801578c:	00820d74 	movhi	r2,2101
 8015790:	10a88704 	addi	r2,r2,-24036
 8015794:	15000017 	ldw	r20,0(r2)
 8015798:	2021883a 	mov	r16,r4
 801579c:	2827883a 	mov	r19,r5
 80157a0:	801122c0 	call	801122c <__locale_charset>
 80157a4:	100f883a 	mov	r7,r2
 80157a8:	dc800015 	stw	r18,0(sp)
 80157ac:	980d883a 	mov	r6,r19
 80157b0:	800b883a 	mov	r5,r16
 80157b4:	8809883a 	mov	r4,r17
 80157b8:	a03ee83a 	callr	r20
 80157bc:	00ffffc4 	movi	r3,-1
 80157c0:	10c0031e 	bne	r2,r3,80157d0 <wcrtomb+0x74>
 80157c4:	90000015 	stw	zero,0(r18)
 80157c8:	00c02284 	movi	r3,138
 80157cc:	88c00015 	stw	r3,0(r17)
 80157d0:	dfc00917 	ldw	ra,36(sp)
 80157d4:	dd000817 	ldw	r20,32(sp)
 80157d8:	dcc00717 	ldw	r19,28(sp)
 80157dc:	dc800617 	ldw	r18,24(sp)
 80157e0:	dc400517 	ldw	r17,20(sp)
 80157e4:	dc000417 	ldw	r16,16(sp)
 80157e8:	dec00a04 	addi	sp,sp,40
 80157ec:	f800283a 	ret
 80157f0:	00820d74 	movhi	r2,2101
 80157f4:	10a88704 	addi	r2,r2,-24036
 80157f8:	14000017 	ldw	r16,0(r2)
 80157fc:	801122c0 	call	801122c <__locale_charset>
 8015800:	100f883a 	mov	r7,r2
 8015804:	dc800015 	stw	r18,0(sp)
 8015808:	000d883a 	mov	r6,zero
 801580c:	d9400104 	addi	r5,sp,4
 8015810:	8809883a 	mov	r4,r17
 8015814:	803ee83a 	callr	r16
 8015818:	003fe806 	br	80157bc <__alt_data_end+0xfc0157bc>

0801581c <__ascii_wctomb>:
 801581c:	28000526 	beq	r5,zero,8015834 <__ascii_wctomb+0x18>
 8015820:	00803fc4 	movi	r2,255
 8015824:	11800536 	bltu	r2,r6,801583c <__ascii_wctomb+0x20>
 8015828:	29800005 	stb	r6,0(r5)
 801582c:	00800044 	movi	r2,1
 8015830:	f800283a 	ret
 8015834:	0005883a 	mov	r2,zero
 8015838:	f800283a 	ret
 801583c:	00802284 	movi	r2,138
 8015840:	20800015 	stw	r2,0(r4)
 8015844:	00bfffc4 	movi	r2,-1
 8015848:	f800283a 	ret

0801584c <_wctomb_r>:
 801584c:	00820d74 	movhi	r2,2101
 8015850:	defff904 	addi	sp,sp,-28
 8015854:	10a88704 	addi	r2,r2,-24036
 8015858:	dfc00615 	stw	ra,24(sp)
 801585c:	dc400515 	stw	r17,20(sp)
 8015860:	dc000415 	stw	r16,16(sp)
 8015864:	3823883a 	mov	r17,r7
 8015868:	14000017 	ldw	r16,0(r2)
 801586c:	d9000115 	stw	r4,4(sp)
 8015870:	d9400215 	stw	r5,8(sp)
 8015874:	d9800315 	stw	r6,12(sp)
 8015878:	801122c0 	call	801122c <__locale_charset>
 801587c:	d9800317 	ldw	r6,12(sp)
 8015880:	d9400217 	ldw	r5,8(sp)
 8015884:	d9000117 	ldw	r4,4(sp)
 8015888:	100f883a 	mov	r7,r2
 801588c:	dc400015 	stw	r17,0(sp)
 8015890:	803ee83a 	callr	r16
 8015894:	dfc00617 	ldw	ra,24(sp)
 8015898:	dc400517 	ldw	r17,20(sp)
 801589c:	dc000417 	ldw	r16,16(sp)
 80158a0:	dec00704 	addi	sp,sp,28
 80158a4:	f800283a 	ret

080158a8 <__umoddi3>:
 80158a8:	defff304 	addi	sp,sp,-52
 80158ac:	df000b15 	stw	fp,44(sp)
 80158b0:	dc400415 	stw	r17,16(sp)
 80158b4:	dc000315 	stw	r16,12(sp)
 80158b8:	dfc00c15 	stw	ra,48(sp)
 80158bc:	ddc00a15 	stw	r23,40(sp)
 80158c0:	dd800915 	stw	r22,36(sp)
 80158c4:	dd400815 	stw	r21,32(sp)
 80158c8:	dd000715 	stw	r20,28(sp)
 80158cc:	dcc00615 	stw	r19,24(sp)
 80158d0:	dc800515 	stw	r18,20(sp)
 80158d4:	2021883a 	mov	r16,r4
 80158d8:	2823883a 	mov	r17,r5
 80158dc:	2839883a 	mov	fp,r5
 80158e0:	3800401e 	bne	r7,zero,80159e4 <__umoddi3+0x13c>
 80158e4:	3027883a 	mov	r19,r6
 80158e8:	2029883a 	mov	r20,r4
 80158ec:	2980552e 	bgeu	r5,r6,8015a44 <__umoddi3+0x19c>
 80158f0:	00bfffd4 	movui	r2,65535
 80158f4:	1180a236 	bltu	r2,r6,8015b80 <__umoddi3+0x2d8>
 80158f8:	01003fc4 	movi	r4,255
 80158fc:	2189803a 	cmpltu	r4,r4,r6
 8015900:	200890fa 	slli	r4,r4,3
 8015904:	3104d83a 	srl	r2,r6,r4
 8015908:	00c20d74 	movhi	r3,2101
 801590c:	18e10304 	addi	r3,r3,-31732
 8015910:	1885883a 	add	r2,r3,r2
 8015914:	10c00003 	ldbu	r3,0(r2)
 8015918:	00800804 	movi	r2,32
 801591c:	1909883a 	add	r4,r3,r4
 8015920:	1125c83a 	sub	r18,r2,r4
 8015924:	90000526 	beq	r18,zero,801593c <__umoddi3+0x94>
 8015928:	8ca2983a 	sll	r17,r17,r18
 801592c:	8108d83a 	srl	r4,r16,r4
 8015930:	34a6983a 	sll	r19,r6,r18
 8015934:	84a8983a 	sll	r20,r16,r18
 8015938:	2478b03a 	or	fp,r4,r17
 801593c:	982cd43a 	srli	r22,r19,16
 8015940:	e009883a 	mov	r4,fp
 8015944:	9dffffcc 	andi	r23,r19,65535
 8015948:	b00b883a 	mov	r5,r22
 801594c:	8007efc0 	call	8007efc <__umodsi3>
 8015950:	b00b883a 	mov	r5,r22
 8015954:	e009883a 	mov	r4,fp
 8015958:	102b883a 	mov	r21,r2
 801595c:	8007e980 	call	8007e98 <__udivsi3>
 8015960:	100b883a 	mov	r5,r2
 8015964:	b809883a 	mov	r4,r23
 8015968:	8007f540 	call	8007f54 <__mulsi3>
 801596c:	a82a943a 	slli	r21,r21,16
 8015970:	a006d43a 	srli	r3,r20,16
 8015974:	1d46b03a 	or	r3,r3,r21
 8015978:	1880032e 	bgeu	r3,r2,8015988 <__umoddi3+0xe0>
 801597c:	1cc7883a 	add	r3,r3,r19
 8015980:	1cc00136 	bltu	r3,r19,8015988 <__umoddi3+0xe0>
 8015984:	18813136 	bltu	r3,r2,8015e4c <__umoddi3+0x5a4>
 8015988:	18a1c83a 	sub	r16,r3,r2
 801598c:	b00b883a 	mov	r5,r22
 8015990:	8009883a 	mov	r4,r16
 8015994:	8007efc0 	call	8007efc <__umodsi3>
 8015998:	b00b883a 	mov	r5,r22
 801599c:	8009883a 	mov	r4,r16
 80159a0:	1023883a 	mov	r17,r2
 80159a4:	8007e980 	call	8007e98 <__udivsi3>
 80159a8:	100b883a 	mov	r5,r2
 80159ac:	b809883a 	mov	r4,r23
 80159b0:	8822943a 	slli	r17,r17,16
 80159b4:	8007f540 	call	8007f54 <__mulsi3>
 80159b8:	a0ffffcc 	andi	r3,r20,65535
 80159bc:	1c46b03a 	or	r3,r3,r17
 80159c0:	1880042e 	bgeu	r3,r2,80159d4 <__umoddi3+0x12c>
 80159c4:	1cc7883a 	add	r3,r3,r19
 80159c8:	1cc00236 	bltu	r3,r19,80159d4 <__umoddi3+0x12c>
 80159cc:	1880012e 	bgeu	r3,r2,80159d4 <__umoddi3+0x12c>
 80159d0:	1cc7883a 	add	r3,r3,r19
 80159d4:	1885c83a 	sub	r2,r3,r2
 80159d8:	1484d83a 	srl	r2,r2,r18
 80159dc:	0007883a 	mov	r3,zero
 80159e0:	00005306 	br	8015b30 <__umoddi3+0x288>
 80159e4:	29c05036 	bltu	r5,r7,8015b28 <__umoddi3+0x280>
 80159e8:	00bfffd4 	movui	r2,65535
 80159ec:	11c05c2e 	bgeu	r2,r7,8015b60 <__umoddi3+0x2b8>
 80159f0:	00804034 	movhi	r2,256
 80159f4:	10bfffc4 	addi	r2,r2,-1
 80159f8:	11c10636 	bltu	r2,r7,8015e14 <__umoddi3+0x56c>
 80159fc:	01000404 	movi	r4,16
 8015a00:	3904d83a 	srl	r2,r7,r4
 8015a04:	00c20d74 	movhi	r3,2101
 8015a08:	18e10304 	addi	r3,r3,-31732
 8015a0c:	1885883a 	add	r2,r3,r2
 8015a10:	14c00003 	ldbu	r19,0(r2)
 8015a14:	00c00804 	movi	r3,32
 8015a18:	9927883a 	add	r19,r19,r4
 8015a1c:	1ce9c83a 	sub	r20,r3,r19
 8015a20:	a0005c1e 	bne	r20,zero,8015b94 <__umoddi3+0x2ec>
 8015a24:	3c400136 	bltu	r7,r17,8015a2c <__umoddi3+0x184>
 8015a28:	81810a36 	bltu	r16,r6,8015e54 <__umoddi3+0x5ac>
 8015a2c:	8185c83a 	sub	r2,r16,r6
 8015a30:	89e3c83a 	sub	r17,r17,r7
 8015a34:	8089803a 	cmpltu	r4,r16,r2
 8015a38:	8939c83a 	sub	fp,r17,r4
 8015a3c:	e007883a 	mov	r3,fp
 8015a40:	00003b06 	br	8015b30 <__umoddi3+0x288>
 8015a44:	3000041e 	bne	r6,zero,8015a58 <__umoddi3+0x1b0>
 8015a48:	000b883a 	mov	r5,zero
 8015a4c:	01000044 	movi	r4,1
 8015a50:	8007e980 	call	8007e98 <__udivsi3>
 8015a54:	1027883a 	mov	r19,r2
 8015a58:	00bfffd4 	movui	r2,65535
 8015a5c:	14c0442e 	bgeu	r2,r19,8015b70 <__umoddi3+0x2c8>
 8015a60:	00804034 	movhi	r2,256
 8015a64:	10bfffc4 	addi	r2,r2,-1
 8015a68:	14c0ec36 	bltu	r2,r19,8015e1c <__umoddi3+0x574>
 8015a6c:	00800404 	movi	r2,16
 8015a70:	9886d83a 	srl	r3,r19,r2
 8015a74:	01020d74 	movhi	r4,2101
 8015a78:	21210304 	addi	r4,r4,-31732
 8015a7c:	20c7883a 	add	r3,r4,r3
 8015a80:	18c00003 	ldbu	r3,0(r3)
 8015a84:	1887883a 	add	r3,r3,r2
 8015a88:	00800804 	movi	r2,32
 8015a8c:	10e5c83a 	sub	r18,r2,r3
 8015a90:	9000ab1e 	bne	r18,zero,8015d40 <__umoddi3+0x498>
 8015a94:	982cd43a 	srli	r22,r19,16
 8015a98:	8ce3c83a 	sub	r17,r17,r19
 8015a9c:	9dffffcc 	andi	r23,r19,65535
 8015aa0:	b00b883a 	mov	r5,r22
 8015aa4:	8809883a 	mov	r4,r17
 8015aa8:	8007efc0 	call	8007efc <__umodsi3>
 8015aac:	b00b883a 	mov	r5,r22
 8015ab0:	8809883a 	mov	r4,r17
 8015ab4:	102b883a 	mov	r21,r2
 8015ab8:	8007e980 	call	8007e98 <__udivsi3>
 8015abc:	b80b883a 	mov	r5,r23
 8015ac0:	1009883a 	mov	r4,r2
 8015ac4:	8007f540 	call	8007f54 <__mulsi3>
 8015ac8:	a82a943a 	slli	r21,r21,16
 8015acc:	a006d43a 	srli	r3,r20,16
 8015ad0:	1d46b03a 	or	r3,r3,r21
 8015ad4:	1880042e 	bgeu	r3,r2,8015ae8 <__umoddi3+0x240>
 8015ad8:	1cc7883a 	add	r3,r3,r19
 8015adc:	1cc00236 	bltu	r3,r19,8015ae8 <__umoddi3+0x240>
 8015ae0:	1880012e 	bgeu	r3,r2,8015ae8 <__umoddi3+0x240>
 8015ae4:	1cc7883a 	add	r3,r3,r19
 8015ae8:	18a1c83a 	sub	r16,r3,r2
 8015aec:	b00b883a 	mov	r5,r22
 8015af0:	8009883a 	mov	r4,r16
 8015af4:	8007efc0 	call	8007efc <__umodsi3>
 8015af8:	1023883a 	mov	r17,r2
 8015afc:	b00b883a 	mov	r5,r22
 8015b00:	8009883a 	mov	r4,r16
 8015b04:	8007e980 	call	8007e98 <__udivsi3>
 8015b08:	8822943a 	slli	r17,r17,16
 8015b0c:	b80b883a 	mov	r5,r23
 8015b10:	1009883a 	mov	r4,r2
 8015b14:	8007f540 	call	8007f54 <__mulsi3>
 8015b18:	a53fffcc 	andi	r20,r20,65535
 8015b1c:	a446b03a 	or	r3,r20,r17
 8015b20:	18bfac2e 	bgeu	r3,r2,80159d4 <__alt_data_end+0xfc0159d4>
 8015b24:	003fa706 	br	80159c4 <__alt_data_end+0xfc0159c4>
 8015b28:	2005883a 	mov	r2,r4
 8015b2c:	2807883a 	mov	r3,r5
 8015b30:	dfc00c17 	ldw	ra,48(sp)
 8015b34:	df000b17 	ldw	fp,44(sp)
 8015b38:	ddc00a17 	ldw	r23,40(sp)
 8015b3c:	dd800917 	ldw	r22,36(sp)
 8015b40:	dd400817 	ldw	r21,32(sp)
 8015b44:	dd000717 	ldw	r20,28(sp)
 8015b48:	dcc00617 	ldw	r19,24(sp)
 8015b4c:	dc800517 	ldw	r18,20(sp)
 8015b50:	dc400417 	ldw	r17,16(sp)
 8015b54:	dc000317 	ldw	r16,12(sp)
 8015b58:	dec00d04 	addi	sp,sp,52
 8015b5c:	f800283a 	ret
 8015b60:	04c03fc4 	movi	r19,255
 8015b64:	99c9803a 	cmpltu	r4,r19,r7
 8015b68:	200890fa 	slli	r4,r4,3
 8015b6c:	003fa406 	br	8015a00 <__alt_data_end+0xfc015a00>
 8015b70:	00803fc4 	movi	r2,255
 8015b74:	14c5803a 	cmpltu	r2,r2,r19
 8015b78:	100490fa 	slli	r2,r2,3
 8015b7c:	003fbc06 	br	8015a70 <__alt_data_end+0xfc015a70>
 8015b80:	00804034 	movhi	r2,256
 8015b84:	10bfffc4 	addi	r2,r2,-1
 8015b88:	1180a636 	bltu	r2,r6,8015e24 <__umoddi3+0x57c>
 8015b8c:	01000404 	movi	r4,16
 8015b90:	003f5c06 	br	8015904 <__alt_data_end+0xfc015904>
 8015b94:	3d0e983a 	sll	r7,r7,r20
 8015b98:	34ead83a 	srl	r21,r6,r19
 8015b9c:	8cc6d83a 	srl	r3,r17,r19
 8015ba0:	8d10983a 	sll	r8,r17,r20
 8015ba4:	3d6ab03a 	or	r21,r7,r21
 8015ba8:	a82cd43a 	srli	r22,r21,16
 8015bac:	84e2d83a 	srl	r17,r16,r19
 8015bb0:	1809883a 	mov	r4,r3
 8015bb4:	b00b883a 	mov	r5,r22
 8015bb8:	8a22b03a 	or	r17,r17,r8
 8015bbc:	3524983a 	sll	r18,r6,r20
 8015bc0:	dc400015 	stw	r17,0(sp)
 8015bc4:	d8c00115 	stw	r3,4(sp)
 8015bc8:	8007efc0 	call	8007efc <__umodsi3>
 8015bcc:	d8c00117 	ldw	r3,4(sp)
 8015bd0:	b00b883a 	mov	r5,r22
 8015bd4:	1039883a 	mov	fp,r2
 8015bd8:	1809883a 	mov	r4,r3
 8015bdc:	8007e980 	call	8007e98 <__udivsi3>
 8015be0:	adffffcc 	andi	r23,r21,65535
 8015be4:	100b883a 	mov	r5,r2
 8015be8:	b809883a 	mov	r4,r23
 8015bec:	1023883a 	mov	r17,r2
 8015bf0:	8007f540 	call	8007f54 <__mulsi3>
 8015bf4:	d9400017 	ldw	r5,0(sp)
 8015bf8:	e008943a 	slli	r4,fp,16
 8015bfc:	8520983a 	sll	r16,r16,r20
 8015c00:	2806d43a 	srli	r3,r5,16
 8015c04:	1906b03a 	or	r3,r3,r4
 8015c08:	1880042e 	bgeu	r3,r2,8015c1c <__umoddi3+0x374>
 8015c0c:	1d47883a 	add	r3,r3,r21
 8015c10:	893fffc4 	addi	r4,r17,-1
 8015c14:	1d40892e 	bgeu	r3,r21,8015e3c <__umoddi3+0x594>
 8015c18:	2023883a 	mov	r17,r4
 8015c1c:	18b9c83a 	sub	fp,r3,r2
 8015c20:	b00b883a 	mov	r5,r22
 8015c24:	e009883a 	mov	r4,fp
 8015c28:	8007efc0 	call	8007efc <__umodsi3>
 8015c2c:	b00b883a 	mov	r5,r22
 8015c30:	e009883a 	mov	r4,fp
 8015c34:	d8800215 	stw	r2,8(sp)
 8015c38:	8007e980 	call	8007e98 <__udivsi3>
 8015c3c:	100b883a 	mov	r5,r2
 8015c40:	b809883a 	mov	r4,r23
 8015c44:	102d883a 	mov	r22,r2
 8015c48:	8007f540 	call	8007f54 <__mulsi3>
 8015c4c:	d9800217 	ldw	r6,8(sp)
 8015c50:	d8c00017 	ldw	r3,0(sp)
 8015c54:	300c943a 	slli	r6,r6,16
 8015c58:	1a3fffcc 	andi	r8,r3,65535
 8015c5c:	4190b03a 	or	r8,r8,r6
 8015c60:	4080042e 	bgeu	r8,r2,8015c74 <__umoddi3+0x3cc>
 8015c64:	4551883a 	add	r8,r8,r21
 8015c68:	b0ffffc4 	addi	r3,r22,-1
 8015c6c:	45406f2e 	bgeu	r8,r21,8015e2c <__umoddi3+0x584>
 8015c70:	182d883a 	mov	r22,r3
 8015c74:	880e943a 	slli	r7,r17,16
 8015c78:	9006d43a 	srli	r3,r18,16
 8015c7c:	91bfffcc 	andi	r6,r18,65535
 8015c80:	3dacb03a 	or	r22,r7,r22
 8015c84:	b02ed43a 	srli	r23,r22,16
 8015c88:	b5bfffcc 	andi	r22,r22,65535
 8015c8c:	300b883a 	mov	r5,r6
 8015c90:	b009883a 	mov	r4,r22
 8015c94:	40a3c83a 	sub	r17,r8,r2
 8015c98:	d8c00115 	stw	r3,4(sp)
 8015c9c:	d9800215 	stw	r6,8(sp)
 8015ca0:	8007f540 	call	8007f54 <__mulsi3>
 8015ca4:	d9800217 	ldw	r6,8(sp)
 8015ca8:	b809883a 	mov	r4,r23
 8015cac:	1039883a 	mov	fp,r2
 8015cb0:	300b883a 	mov	r5,r6
 8015cb4:	8007f540 	call	8007f54 <__mulsi3>
 8015cb8:	d8c00117 	ldw	r3,4(sp)
 8015cbc:	b809883a 	mov	r4,r23
 8015cc0:	d8800215 	stw	r2,8(sp)
 8015cc4:	180b883a 	mov	r5,r3
 8015cc8:	8007f540 	call	8007f54 <__mulsi3>
 8015ccc:	d8c00117 	ldw	r3,4(sp)
 8015cd0:	b009883a 	mov	r4,r22
 8015cd4:	102f883a 	mov	r23,r2
 8015cd8:	180b883a 	mov	r5,r3
 8015cdc:	8007f540 	call	8007f54 <__mulsi3>
 8015ce0:	d9800217 	ldw	r6,8(sp)
 8015ce4:	e006d43a 	srli	r3,fp,16
 8015ce8:	1185883a 	add	r2,r2,r6
 8015cec:	1885883a 	add	r2,r3,r2
 8015cf0:	1180022e 	bgeu	r2,r6,8015cfc <__umoddi3+0x454>
 8015cf4:	00c00074 	movhi	r3,1
 8015cf8:	b8ef883a 	add	r23,r23,r3
 8015cfc:	1006d43a 	srli	r3,r2,16
 8015d00:	1004943a 	slli	r2,r2,16
 8015d04:	e73fffcc 	andi	fp,fp,65535
 8015d08:	1dc7883a 	add	r3,r3,r23
 8015d0c:	1739883a 	add	fp,r2,fp
 8015d10:	88c03a36 	bltu	r17,r3,8015dfc <__umoddi3+0x554>
 8015d14:	88c05126 	beq	r17,r3,8015e5c <__umoddi3+0x5b4>
 8015d18:	88c9c83a 	sub	r4,r17,r3
 8015d1c:	e00f883a 	mov	r7,fp
 8015d20:	81cfc83a 	sub	r7,r16,r7
 8015d24:	81c7803a 	cmpltu	r3,r16,r7
 8015d28:	20c7c83a 	sub	r3,r4,r3
 8015d2c:	1cc4983a 	sll	r2,r3,r19
 8015d30:	3d0ed83a 	srl	r7,r7,r20
 8015d34:	1d06d83a 	srl	r3,r3,r20
 8015d38:	11c4b03a 	or	r2,r2,r7
 8015d3c:	003f7c06 	br	8015b30 <__alt_data_end+0xfc015b30>
 8015d40:	9ca6983a 	sll	r19,r19,r18
 8015d44:	88f8d83a 	srl	fp,r17,r3
 8015d48:	80c4d83a 	srl	r2,r16,r3
 8015d4c:	982cd43a 	srli	r22,r19,16
 8015d50:	8ca2983a 	sll	r17,r17,r18
 8015d54:	e009883a 	mov	r4,fp
 8015d58:	b00b883a 	mov	r5,r22
 8015d5c:	146ab03a 	or	r21,r2,r17
 8015d60:	8007efc0 	call	8007efc <__umodsi3>
 8015d64:	b00b883a 	mov	r5,r22
 8015d68:	e009883a 	mov	r4,fp
 8015d6c:	1029883a 	mov	r20,r2
 8015d70:	9dffffcc 	andi	r23,r19,65535
 8015d74:	8007e980 	call	8007e98 <__udivsi3>
 8015d78:	b809883a 	mov	r4,r23
 8015d7c:	100b883a 	mov	r5,r2
 8015d80:	8007f540 	call	8007f54 <__mulsi3>
 8015d84:	a008943a 	slli	r4,r20,16
 8015d88:	a806d43a 	srli	r3,r21,16
 8015d8c:	84a8983a 	sll	r20,r16,r18
 8015d90:	1906b03a 	or	r3,r3,r4
 8015d94:	1880042e 	bgeu	r3,r2,8015da8 <__umoddi3+0x500>
 8015d98:	1cc7883a 	add	r3,r3,r19
 8015d9c:	1cc00236 	bltu	r3,r19,8015da8 <__umoddi3+0x500>
 8015da0:	1880012e 	bgeu	r3,r2,8015da8 <__umoddi3+0x500>
 8015da4:	1cc7883a 	add	r3,r3,r19
 8015da8:	18a3c83a 	sub	r17,r3,r2
 8015dac:	b00b883a 	mov	r5,r22
 8015db0:	8809883a 	mov	r4,r17
 8015db4:	8007efc0 	call	8007efc <__umodsi3>
 8015db8:	b00b883a 	mov	r5,r22
 8015dbc:	8809883a 	mov	r4,r17
 8015dc0:	1021883a 	mov	r16,r2
 8015dc4:	8007e980 	call	8007e98 <__udivsi3>
 8015dc8:	100b883a 	mov	r5,r2
 8015dcc:	b809883a 	mov	r4,r23
 8015dd0:	8020943a 	slli	r16,r16,16
 8015dd4:	8007f540 	call	8007f54 <__mulsi3>
 8015dd8:	a8ffffcc 	andi	r3,r21,65535
 8015ddc:	1c06b03a 	or	r3,r3,r16
 8015de0:	1880042e 	bgeu	r3,r2,8015df4 <__umoddi3+0x54c>
 8015de4:	1cc7883a 	add	r3,r3,r19
 8015de8:	1cc00236 	bltu	r3,r19,8015df4 <__umoddi3+0x54c>
 8015dec:	1880012e 	bgeu	r3,r2,8015df4 <__umoddi3+0x54c>
 8015df0:	1cc7883a 	add	r3,r3,r19
 8015df4:	18a3c83a 	sub	r17,r3,r2
 8015df8:	003f2906 	br	8015aa0 <__alt_data_end+0xfc015aa0>
 8015dfc:	e48fc83a 	sub	r7,fp,r18
 8015e00:	1d49c83a 	sub	r4,r3,r21
 8015e04:	e1f9803a 	cmpltu	fp,fp,r7
 8015e08:	2739c83a 	sub	fp,r4,fp
 8015e0c:	8f09c83a 	sub	r4,r17,fp
 8015e10:	003fc306 	br	8015d20 <__alt_data_end+0xfc015d20>
 8015e14:	01000604 	movi	r4,24
 8015e18:	003ef906 	br	8015a00 <__alt_data_end+0xfc015a00>
 8015e1c:	00800604 	movi	r2,24
 8015e20:	003f1306 	br	8015a70 <__alt_data_end+0xfc015a70>
 8015e24:	01000604 	movi	r4,24
 8015e28:	003eb606 	br	8015904 <__alt_data_end+0xfc015904>
 8015e2c:	40bf902e 	bgeu	r8,r2,8015c70 <__alt_data_end+0xfc015c70>
 8015e30:	b5bfff84 	addi	r22,r22,-2
 8015e34:	4551883a 	add	r8,r8,r21
 8015e38:	003f8e06 	br	8015c74 <__alt_data_end+0xfc015c74>
 8015e3c:	18bf762e 	bgeu	r3,r2,8015c18 <__alt_data_end+0xfc015c18>
 8015e40:	8c7fff84 	addi	r17,r17,-2
 8015e44:	1d47883a 	add	r3,r3,r21
 8015e48:	003f7406 	br	8015c1c <__alt_data_end+0xfc015c1c>
 8015e4c:	1cc7883a 	add	r3,r3,r19
 8015e50:	003ecd06 	br	8015988 <__alt_data_end+0xfc015988>
 8015e54:	8005883a 	mov	r2,r16
 8015e58:	003ef806 	br	8015a3c <__alt_data_end+0xfc015a3c>
 8015e5c:	873fe736 	bltu	r16,fp,8015dfc <__alt_data_end+0xfc015dfc>
 8015e60:	e00f883a 	mov	r7,fp
 8015e64:	0009883a 	mov	r4,zero
 8015e68:	003fad06 	br	8015d20 <__alt_data_end+0xfc015d20>

08015e6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015e6c:	defffe04 	addi	sp,sp,-8
 8015e70:	dfc00115 	stw	ra,4(sp)
 8015e74:	df000015 	stw	fp,0(sp)
 8015e78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015e7c:	d0a01317 	ldw	r2,-32692(gp)
 8015e80:	10000326 	beq	r2,zero,8015e90 <alt_get_errno+0x24>
 8015e84:	d0a01317 	ldw	r2,-32692(gp)
 8015e88:	103ee83a 	callr	r2
 8015e8c:	00000106 	br	8015e94 <alt_get_errno+0x28>
 8015e90:	d0a6f404 	addi	r2,gp,-25648
}
 8015e94:	e037883a 	mov	sp,fp
 8015e98:	dfc00117 	ldw	ra,4(sp)
 8015e9c:	df000017 	ldw	fp,0(sp)
 8015ea0:	dec00204 	addi	sp,sp,8
 8015ea4:	f800283a 	ret

08015ea8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8015ea8:	defffb04 	addi	sp,sp,-20
 8015eac:	dfc00415 	stw	ra,16(sp)
 8015eb0:	df000315 	stw	fp,12(sp)
 8015eb4:	df000304 	addi	fp,sp,12
 8015eb8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8015ebc:	e0bfff17 	ldw	r2,-4(fp)
 8015ec0:	10000816 	blt	r2,zero,8015ee4 <close+0x3c>
 8015ec4:	01400304 	movi	r5,12
 8015ec8:	e13fff17 	ldw	r4,-4(fp)
 8015ecc:	8007f540 	call	8007f54 <__mulsi3>
 8015ed0:	1007883a 	mov	r3,r2
 8015ed4:	00820d74 	movhi	r2,2101
 8015ed8:	10a40204 	addi	r2,r2,-28664
 8015edc:	1885883a 	add	r2,r3,r2
 8015ee0:	00000106 	br	8015ee8 <close+0x40>
 8015ee4:	0005883a 	mov	r2,zero
 8015ee8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8015eec:	e0bffd17 	ldw	r2,-12(fp)
 8015ef0:	10001926 	beq	r2,zero,8015f58 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8015ef4:	e0bffd17 	ldw	r2,-12(fp)
 8015ef8:	10800017 	ldw	r2,0(r2)
 8015efc:	10800417 	ldw	r2,16(r2)
 8015f00:	10000626 	beq	r2,zero,8015f1c <close+0x74>
 8015f04:	e0bffd17 	ldw	r2,-12(fp)
 8015f08:	10800017 	ldw	r2,0(r2)
 8015f0c:	10800417 	ldw	r2,16(r2)
 8015f10:	e13ffd17 	ldw	r4,-12(fp)
 8015f14:	103ee83a 	callr	r2
 8015f18:	00000106 	br	8015f20 <close+0x78>
 8015f1c:	0005883a 	mov	r2,zero
 8015f20:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8015f24:	e13fff17 	ldw	r4,-4(fp)
 8015f28:	80165900 	call	8016590 <alt_release_fd>
    if (rval < 0)
 8015f2c:	e0bffe17 	ldw	r2,-8(fp)
 8015f30:	1000070e 	bge	r2,zero,8015f50 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8015f34:	8015e6c0 	call	8015e6c <alt_get_errno>
 8015f38:	1007883a 	mov	r3,r2
 8015f3c:	e0bffe17 	ldw	r2,-8(fp)
 8015f40:	0085c83a 	sub	r2,zero,r2
 8015f44:	18800015 	stw	r2,0(r3)
      return -1;
 8015f48:	00bfffc4 	movi	r2,-1
 8015f4c:	00000706 	br	8015f6c <close+0xc4>
    }
    return 0;
 8015f50:	0005883a 	mov	r2,zero
 8015f54:	00000506 	br	8015f6c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015f58:	8015e6c0 	call	8015e6c <alt_get_errno>
 8015f5c:	1007883a 	mov	r3,r2
 8015f60:	00801444 	movi	r2,81
 8015f64:	18800015 	stw	r2,0(r3)
    return -1;
 8015f68:	00bfffc4 	movi	r2,-1
  }
}
 8015f6c:	e037883a 	mov	sp,fp
 8015f70:	dfc00117 	ldw	ra,4(sp)
 8015f74:	df000017 	ldw	fp,0(sp)
 8015f78:	dec00204 	addi	sp,sp,8
 8015f7c:	f800283a 	ret

08015f80 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015f80:	defffc04 	addi	sp,sp,-16
 8015f84:	df000315 	stw	fp,12(sp)
 8015f88:	df000304 	addi	fp,sp,12
 8015f8c:	e13ffd15 	stw	r4,-12(fp)
 8015f90:	e17ffe15 	stw	r5,-8(fp)
 8015f94:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015f98:	e0bfff17 	ldw	r2,-4(fp)
}
 8015f9c:	e037883a 	mov	sp,fp
 8015fa0:	df000017 	ldw	fp,0(sp)
 8015fa4:	dec00104 	addi	sp,sp,4
 8015fa8:	f800283a 	ret

08015fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015fac:	defffe04 	addi	sp,sp,-8
 8015fb0:	dfc00115 	stw	ra,4(sp)
 8015fb4:	df000015 	stw	fp,0(sp)
 8015fb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015fbc:	d0a01317 	ldw	r2,-32692(gp)
 8015fc0:	10000326 	beq	r2,zero,8015fd0 <alt_get_errno+0x24>
 8015fc4:	d0a01317 	ldw	r2,-32692(gp)
 8015fc8:	103ee83a 	callr	r2
 8015fcc:	00000106 	br	8015fd4 <alt_get_errno+0x28>
 8015fd0:	d0a6f404 	addi	r2,gp,-25648
}
 8015fd4:	e037883a 	mov	sp,fp
 8015fd8:	dfc00117 	ldw	ra,4(sp)
 8015fdc:	df000017 	ldw	fp,0(sp)
 8015fe0:	dec00204 	addi	sp,sp,8
 8015fe4:	f800283a 	ret

08015fe8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8015fe8:	defffb04 	addi	sp,sp,-20
 8015fec:	dfc00415 	stw	ra,16(sp)
 8015ff0:	df000315 	stw	fp,12(sp)
 8015ff4:	df000304 	addi	fp,sp,12
 8015ff8:	e13ffe15 	stw	r4,-8(fp)
 8015ffc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8016000:	e0bffe17 	ldw	r2,-8(fp)
 8016004:	10000816 	blt	r2,zero,8016028 <fstat+0x40>
 8016008:	01400304 	movi	r5,12
 801600c:	e13ffe17 	ldw	r4,-8(fp)
 8016010:	8007f540 	call	8007f54 <__mulsi3>
 8016014:	1007883a 	mov	r3,r2
 8016018:	00820d74 	movhi	r2,2101
 801601c:	10a40204 	addi	r2,r2,-28664
 8016020:	1885883a 	add	r2,r3,r2
 8016024:	00000106 	br	801602c <fstat+0x44>
 8016028:	0005883a 	mov	r2,zero
 801602c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8016030:	e0bffd17 	ldw	r2,-12(fp)
 8016034:	10001026 	beq	r2,zero,8016078 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8016038:	e0bffd17 	ldw	r2,-12(fp)
 801603c:	10800017 	ldw	r2,0(r2)
 8016040:	10800817 	ldw	r2,32(r2)
 8016044:	10000726 	beq	r2,zero,8016064 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8016048:	e0bffd17 	ldw	r2,-12(fp)
 801604c:	10800017 	ldw	r2,0(r2)
 8016050:	10800817 	ldw	r2,32(r2)
 8016054:	e17fff17 	ldw	r5,-4(fp)
 8016058:	e13ffd17 	ldw	r4,-12(fp)
 801605c:	103ee83a 	callr	r2
 8016060:	00000a06 	br	801608c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8016064:	e0bfff17 	ldw	r2,-4(fp)
 8016068:	00c80004 	movi	r3,8192
 801606c:	10c00115 	stw	r3,4(r2)
      return 0;
 8016070:	0005883a 	mov	r2,zero
 8016074:	00000506 	br	801608c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8016078:	8015fac0 	call	8015fac <alt_get_errno>
 801607c:	1007883a 	mov	r3,r2
 8016080:	00801444 	movi	r2,81
 8016084:	18800015 	stw	r2,0(r3)
    return -1;
 8016088:	00bfffc4 	movi	r2,-1
  }
}
 801608c:	e037883a 	mov	sp,fp
 8016090:	dfc00117 	ldw	ra,4(sp)
 8016094:	df000017 	ldw	fp,0(sp)
 8016098:	dec00204 	addi	sp,sp,8
 801609c:	f800283a 	ret

080160a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80160a0:	defffe04 	addi	sp,sp,-8
 80160a4:	dfc00115 	stw	ra,4(sp)
 80160a8:	df000015 	stw	fp,0(sp)
 80160ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80160b0:	d0a01317 	ldw	r2,-32692(gp)
 80160b4:	10000326 	beq	r2,zero,80160c4 <alt_get_errno+0x24>
 80160b8:	d0a01317 	ldw	r2,-32692(gp)
 80160bc:	103ee83a 	callr	r2
 80160c0:	00000106 	br	80160c8 <alt_get_errno+0x28>
 80160c4:	d0a6f404 	addi	r2,gp,-25648
}
 80160c8:	e037883a 	mov	sp,fp
 80160cc:	dfc00117 	ldw	ra,4(sp)
 80160d0:	df000017 	ldw	fp,0(sp)
 80160d4:	dec00204 	addi	sp,sp,8
 80160d8:	f800283a 	ret

080160dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80160dc:	deffed04 	addi	sp,sp,-76
 80160e0:	dfc01215 	stw	ra,72(sp)
 80160e4:	df001115 	stw	fp,68(sp)
 80160e8:	df001104 	addi	fp,sp,68
 80160ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80160f0:	e0bfff17 	ldw	r2,-4(fp)
 80160f4:	10000816 	blt	r2,zero,8016118 <isatty+0x3c>
 80160f8:	01400304 	movi	r5,12
 80160fc:	e13fff17 	ldw	r4,-4(fp)
 8016100:	8007f540 	call	8007f54 <__mulsi3>
 8016104:	1007883a 	mov	r3,r2
 8016108:	00820d74 	movhi	r2,2101
 801610c:	10a40204 	addi	r2,r2,-28664
 8016110:	1885883a 	add	r2,r3,r2
 8016114:	00000106 	br	801611c <isatty+0x40>
 8016118:	0005883a 	mov	r2,zero
 801611c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8016120:	e0bfef17 	ldw	r2,-68(fp)
 8016124:	10000e26 	beq	r2,zero,8016160 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8016128:	e0bfef17 	ldw	r2,-68(fp)
 801612c:	10800017 	ldw	r2,0(r2)
 8016130:	10800817 	ldw	r2,32(r2)
 8016134:	1000021e 	bne	r2,zero,8016140 <isatty+0x64>
    {
      return 1;
 8016138:	00800044 	movi	r2,1
 801613c:	00000d06 	br	8016174 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8016140:	e0bff004 	addi	r2,fp,-64
 8016144:	100b883a 	mov	r5,r2
 8016148:	e13fff17 	ldw	r4,-4(fp)
 801614c:	8015fe80 	call	8015fe8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8016150:	e0bff117 	ldw	r2,-60(fp)
 8016154:	10880020 	cmpeqi	r2,r2,8192
 8016158:	10803fcc 	andi	r2,r2,255
 801615c:	00000506 	br	8016174 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8016160:	80160a00 	call	80160a0 <alt_get_errno>
 8016164:	1007883a 	mov	r3,r2
 8016168:	00801444 	movi	r2,81
 801616c:	18800015 	stw	r2,0(r3)
    return 0;
 8016170:	0005883a 	mov	r2,zero
  }
}
 8016174:	e037883a 	mov	sp,fp
 8016178:	dfc00117 	ldw	ra,4(sp)
 801617c:	df000017 	ldw	fp,0(sp)
 8016180:	dec00204 	addi	sp,sp,8
 8016184:	f800283a 	ret

08016188 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8016188:	defffc04 	addi	sp,sp,-16
 801618c:	df000315 	stw	fp,12(sp)
 8016190:	df000304 	addi	fp,sp,12
 8016194:	e13ffd15 	stw	r4,-12(fp)
 8016198:	e17ffe15 	stw	r5,-8(fp)
 801619c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 80161a0:	e0fffe17 	ldw	r3,-8(fp)
 80161a4:	e0bffd17 	ldw	r2,-12(fp)
 80161a8:	18800c26 	beq	r3,r2,80161dc <alt_load_section+0x54>
  {
    while( to != end )
 80161ac:	00000806 	br	80161d0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80161b0:	e0bffe17 	ldw	r2,-8(fp)
 80161b4:	10c00104 	addi	r3,r2,4
 80161b8:	e0fffe15 	stw	r3,-8(fp)
 80161bc:	e0fffd17 	ldw	r3,-12(fp)
 80161c0:	19000104 	addi	r4,r3,4
 80161c4:	e13ffd15 	stw	r4,-12(fp)
 80161c8:	18c00017 	ldw	r3,0(r3)
 80161cc:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80161d0:	e0fffe17 	ldw	r3,-8(fp)
 80161d4:	e0bfff17 	ldw	r2,-4(fp)
 80161d8:	18bff51e 	bne	r3,r2,80161b0 <__alt_data_end+0xfc0161b0>
    {
      *to++ = *from++;
    }
  }
}
 80161dc:	0001883a 	nop
 80161e0:	e037883a 	mov	sp,fp
 80161e4:	df000017 	ldw	fp,0(sp)
 80161e8:	dec00104 	addi	sp,sp,4
 80161ec:	f800283a 	ret

080161f0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80161f0:	defffe04 	addi	sp,sp,-8
 80161f4:	dfc00115 	stw	ra,4(sp)
 80161f8:	df000015 	stw	fp,0(sp)
 80161fc:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8016200:	01820d74 	movhi	r6,2101
 8016204:	31a89104 	addi	r6,r6,-23996
 8016208:	01420d74 	movhi	r5,2101
 801620c:	2961c304 	addi	r5,r5,-30964
 8016210:	01020d74 	movhi	r4,2101
 8016214:	21289104 	addi	r4,r4,-23996
 8016218:	80161880 	call	8016188 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 801621c:	01800034 	movhi	r6,0
 8016220:	31808f04 	addi	r6,r6,572
 8016224:	01400034 	movhi	r5,0
 8016228:	29400804 	addi	r5,r5,32
 801622c:	01000034 	movhi	r4,0
 8016230:	21000804 	addi	r4,r4,32
 8016234:	80161880 	call	8016188 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8016238:	01820d74 	movhi	r6,2101
 801623c:	31a1c304 	addi	r6,r6,-30964
 8016240:	014200b4 	movhi	r5,2050
 8016244:	29626504 	addi	r5,r5,-30316
 8016248:	010200b4 	movhi	r4,2050
 801624c:	21226504 	addi	r4,r4,-30316
 8016250:	80161880 	call	8016188 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8016254:	8017a800 	call	8017a80 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8016258:	8017c400 	call	8017c40 <alt_icache_flush_all>
}
 801625c:	0001883a 	nop
 8016260:	e037883a 	mov	sp,fp
 8016264:	dfc00117 	ldw	ra,4(sp)
 8016268:	df000017 	ldw	fp,0(sp)
 801626c:	dec00204 	addi	sp,sp,8
 8016270:	f800283a 	ret

08016274 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016274:	defffe04 	addi	sp,sp,-8
 8016278:	dfc00115 	stw	ra,4(sp)
 801627c:	df000015 	stw	fp,0(sp)
 8016280:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016284:	d0a01317 	ldw	r2,-32692(gp)
 8016288:	10000326 	beq	r2,zero,8016298 <alt_get_errno+0x24>
 801628c:	d0a01317 	ldw	r2,-32692(gp)
 8016290:	103ee83a 	callr	r2
 8016294:	00000106 	br	801629c <alt_get_errno+0x28>
 8016298:	d0a6f404 	addi	r2,gp,-25648
}
 801629c:	e037883a 	mov	sp,fp
 80162a0:	dfc00117 	ldw	ra,4(sp)
 80162a4:	df000017 	ldw	fp,0(sp)
 80162a8:	dec00204 	addi	sp,sp,8
 80162ac:	f800283a 	ret

080162b0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80162b0:	defff904 	addi	sp,sp,-28
 80162b4:	dfc00615 	stw	ra,24(sp)
 80162b8:	df000515 	stw	fp,20(sp)
 80162bc:	df000504 	addi	fp,sp,20
 80162c0:	e13ffd15 	stw	r4,-12(fp)
 80162c4:	e17ffe15 	stw	r5,-8(fp)
 80162c8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80162cc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80162d0:	e0bffd17 	ldw	r2,-12(fp)
 80162d4:	10000816 	blt	r2,zero,80162f8 <lseek+0x48>
 80162d8:	01400304 	movi	r5,12
 80162dc:	e13ffd17 	ldw	r4,-12(fp)
 80162e0:	8007f540 	call	8007f54 <__mulsi3>
 80162e4:	1007883a 	mov	r3,r2
 80162e8:	00820d74 	movhi	r2,2101
 80162ec:	10a40204 	addi	r2,r2,-28664
 80162f0:	1885883a 	add	r2,r3,r2
 80162f4:	00000106 	br	80162fc <lseek+0x4c>
 80162f8:	0005883a 	mov	r2,zero
 80162fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8016300:	e0bffc17 	ldw	r2,-16(fp)
 8016304:	10001026 	beq	r2,zero,8016348 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8016308:	e0bffc17 	ldw	r2,-16(fp)
 801630c:	10800017 	ldw	r2,0(r2)
 8016310:	10800717 	ldw	r2,28(r2)
 8016314:	10000926 	beq	r2,zero,801633c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8016318:	e0bffc17 	ldw	r2,-16(fp)
 801631c:	10800017 	ldw	r2,0(r2)
 8016320:	10800717 	ldw	r2,28(r2)
 8016324:	e1bfff17 	ldw	r6,-4(fp)
 8016328:	e17ffe17 	ldw	r5,-8(fp)
 801632c:	e13ffc17 	ldw	r4,-16(fp)
 8016330:	103ee83a 	callr	r2
 8016334:	e0bffb15 	stw	r2,-20(fp)
 8016338:	00000506 	br	8016350 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801633c:	00bfde84 	movi	r2,-134
 8016340:	e0bffb15 	stw	r2,-20(fp)
 8016344:	00000206 	br	8016350 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8016348:	00bfebc4 	movi	r2,-81
 801634c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8016350:	e0bffb17 	ldw	r2,-20(fp)
 8016354:	1000070e 	bge	r2,zero,8016374 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8016358:	80162740 	call	8016274 <alt_get_errno>
 801635c:	1007883a 	mov	r3,r2
 8016360:	e0bffb17 	ldw	r2,-20(fp)
 8016364:	0085c83a 	sub	r2,zero,r2
 8016368:	18800015 	stw	r2,0(r3)
    rc = -1;
 801636c:	00bfffc4 	movi	r2,-1
 8016370:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8016374:	e0bffb17 	ldw	r2,-20(fp)
}
 8016378:	e037883a 	mov	sp,fp
 801637c:	dfc00117 	ldw	ra,4(sp)
 8016380:	df000017 	ldw	fp,0(sp)
 8016384:	dec00204 	addi	sp,sp,8
 8016388:	f800283a 	ret

0801638c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801638c:	defffd04 	addi	sp,sp,-12
 8016390:	dfc00215 	stw	ra,8(sp)
 8016394:	df000115 	stw	fp,4(sp)
 8016398:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801639c:	0009883a 	mov	r4,zero
 80163a0:	8016a080 	call	8016a08 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80163a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80163a8:	8016a400 	call	8016a40 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80163ac:	01820d74 	movhi	r6,2101
 80163b0:	31a1b904 	addi	r6,r6,-31004
 80163b4:	01420d74 	movhi	r5,2101
 80163b8:	2961b904 	addi	r5,r5,-31004
 80163bc:	01020d74 	movhi	r4,2101
 80163c0:	2121b904 	addi	r4,r4,-31004
 80163c4:	8017fe40 	call	8017fe4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80163c8:	8017b800 	call	8017b80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80163cc:	01020074 	movhi	r4,2049
 80163d0:	211ef804 	addi	r4,r4,31712
 80163d4:	80186000 	call	8018600 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80163d8:	d0a6f517 	ldw	r2,-25644(gp)
 80163dc:	d0e6f617 	ldw	r3,-25640(gp)
 80163e0:	d126f717 	ldw	r4,-25636(gp)
 80163e4:	200d883a 	mov	r6,r4
 80163e8:	180b883a 	mov	r5,r3
 80163ec:	1009883a 	mov	r4,r2
 80163f0:	8002d980 	call	8002d98 <main>
 80163f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80163f8:	01000044 	movi	r4,1
 80163fc:	8015ea80 	call	8015ea8 <close>
  exit (result);
 8016400:	e13fff17 	ldw	r4,-4(fp)
 8016404:	80186140 	call	8018614 <exit>

08016408 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8016408:	defffe04 	addi	sp,sp,-8
 801640c:	df000115 	stw	fp,4(sp)
 8016410:	df000104 	addi	fp,sp,4
 8016414:	e13fff15 	stw	r4,-4(fp)
}
 8016418:	0001883a 	nop
 801641c:	e037883a 	mov	sp,fp
 8016420:	df000017 	ldw	fp,0(sp)
 8016424:	dec00104 	addi	sp,sp,4
 8016428:	f800283a 	ret

0801642c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 801642c:	defffe04 	addi	sp,sp,-8
 8016430:	df000115 	stw	fp,4(sp)
 8016434:	df000104 	addi	fp,sp,4
 8016438:	e13fff15 	stw	r4,-4(fp)
}
 801643c:	0001883a 	nop
 8016440:	e037883a 	mov	sp,fp
 8016444:	df000017 	ldw	fp,0(sp)
 8016448:	dec00104 	addi	sp,sp,4
 801644c:	f800283a 	ret

08016450 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016450:	defffe04 	addi	sp,sp,-8
 8016454:	dfc00115 	stw	ra,4(sp)
 8016458:	df000015 	stw	fp,0(sp)
 801645c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016460:	d0a01317 	ldw	r2,-32692(gp)
 8016464:	10000326 	beq	r2,zero,8016474 <alt_get_errno+0x24>
 8016468:	d0a01317 	ldw	r2,-32692(gp)
 801646c:	103ee83a 	callr	r2
 8016470:	00000106 	br	8016478 <alt_get_errno+0x28>
 8016474:	d0a6f404 	addi	r2,gp,-25648
}
 8016478:	e037883a 	mov	sp,fp
 801647c:	dfc00117 	ldw	ra,4(sp)
 8016480:	df000017 	ldw	fp,0(sp)
 8016484:	dec00204 	addi	sp,sp,8
 8016488:	f800283a 	ret

0801648c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 801648c:	defff904 	addi	sp,sp,-28
 8016490:	dfc00615 	stw	ra,24(sp)
 8016494:	df000515 	stw	fp,20(sp)
 8016498:	df000504 	addi	fp,sp,20
 801649c:	e13ffd15 	stw	r4,-12(fp)
 80164a0:	e17ffe15 	stw	r5,-8(fp)
 80164a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80164a8:	e0bffd17 	ldw	r2,-12(fp)
 80164ac:	10000816 	blt	r2,zero,80164d0 <read+0x44>
 80164b0:	01400304 	movi	r5,12
 80164b4:	e13ffd17 	ldw	r4,-12(fp)
 80164b8:	8007f540 	call	8007f54 <__mulsi3>
 80164bc:	1007883a 	mov	r3,r2
 80164c0:	00820d74 	movhi	r2,2101
 80164c4:	10a40204 	addi	r2,r2,-28664
 80164c8:	1885883a 	add	r2,r3,r2
 80164cc:	00000106 	br	80164d4 <read+0x48>
 80164d0:	0005883a 	mov	r2,zero
 80164d4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80164d8:	e0bffb17 	ldw	r2,-20(fp)
 80164dc:	10002226 	beq	r2,zero,8016568 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80164e0:	e0bffb17 	ldw	r2,-20(fp)
 80164e4:	10800217 	ldw	r2,8(r2)
 80164e8:	108000cc 	andi	r2,r2,3
 80164ec:	10800060 	cmpeqi	r2,r2,1
 80164f0:	1000181e 	bne	r2,zero,8016554 <read+0xc8>
        (fd->dev->read))
 80164f4:	e0bffb17 	ldw	r2,-20(fp)
 80164f8:	10800017 	ldw	r2,0(r2)
 80164fc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8016500:	10001426 	beq	r2,zero,8016554 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8016504:	e0bffb17 	ldw	r2,-20(fp)
 8016508:	10800017 	ldw	r2,0(r2)
 801650c:	10800517 	ldw	r2,20(r2)
 8016510:	e0ffff17 	ldw	r3,-4(fp)
 8016514:	180d883a 	mov	r6,r3
 8016518:	e17ffe17 	ldw	r5,-8(fp)
 801651c:	e13ffb17 	ldw	r4,-20(fp)
 8016520:	103ee83a 	callr	r2
 8016524:	e0bffc15 	stw	r2,-16(fp)
 8016528:	e0bffc17 	ldw	r2,-16(fp)
 801652c:	1000070e 	bge	r2,zero,801654c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8016530:	80164500 	call	8016450 <alt_get_errno>
 8016534:	1007883a 	mov	r3,r2
 8016538:	e0bffc17 	ldw	r2,-16(fp)
 801653c:	0085c83a 	sub	r2,zero,r2
 8016540:	18800015 	stw	r2,0(r3)
          return -1;
 8016544:	00bfffc4 	movi	r2,-1
 8016548:	00000c06 	br	801657c <read+0xf0>
        }
        return rval;
 801654c:	e0bffc17 	ldw	r2,-16(fp)
 8016550:	00000a06 	br	801657c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8016554:	80164500 	call	8016450 <alt_get_errno>
 8016558:	1007883a 	mov	r3,r2
 801655c:	00800344 	movi	r2,13
 8016560:	18800015 	stw	r2,0(r3)
 8016564:	00000406 	br	8016578 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8016568:	80164500 	call	8016450 <alt_get_errno>
 801656c:	1007883a 	mov	r3,r2
 8016570:	00801444 	movi	r2,81
 8016574:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8016578:	00bfffc4 	movi	r2,-1
}
 801657c:	e037883a 	mov	sp,fp
 8016580:	dfc00117 	ldw	ra,4(sp)
 8016584:	df000017 	ldw	fp,0(sp)
 8016588:	dec00204 	addi	sp,sp,8
 801658c:	f800283a 	ret

08016590 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8016590:	defffc04 	addi	sp,sp,-16
 8016594:	dfc00315 	stw	ra,12(sp)
 8016598:	df000215 	stw	fp,8(sp)
 801659c:	dc000115 	stw	r16,4(sp)
 80165a0:	df000204 	addi	fp,sp,8
 80165a4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80165a8:	e0bffe17 	ldw	r2,-8(fp)
 80165ac:	108000d0 	cmplti	r2,r2,3
 80165b0:	1000111e 	bne	r2,zero,80165f8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80165b4:	04020d74 	movhi	r16,2101
 80165b8:	84240204 	addi	r16,r16,-28664
 80165bc:	e0bffe17 	ldw	r2,-8(fp)
 80165c0:	01400304 	movi	r5,12
 80165c4:	1009883a 	mov	r4,r2
 80165c8:	8007f540 	call	8007f54 <__mulsi3>
 80165cc:	8085883a 	add	r2,r16,r2
 80165d0:	10800204 	addi	r2,r2,8
 80165d4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80165d8:	04020d74 	movhi	r16,2101
 80165dc:	84240204 	addi	r16,r16,-28664
 80165e0:	e0bffe17 	ldw	r2,-8(fp)
 80165e4:	01400304 	movi	r5,12
 80165e8:	1009883a 	mov	r4,r2
 80165ec:	8007f540 	call	8007f54 <__mulsi3>
 80165f0:	8085883a 	add	r2,r16,r2
 80165f4:	10000015 	stw	zero,0(r2)
  }
}
 80165f8:	0001883a 	nop
 80165fc:	e6ffff04 	addi	sp,fp,-4
 8016600:	dfc00217 	ldw	ra,8(sp)
 8016604:	df000117 	ldw	fp,4(sp)
 8016608:	dc000017 	ldw	r16,0(sp)
 801660c:	dec00304 	addi	sp,sp,12
 8016610:	f800283a 	ret

08016614 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8016614:	defff904 	addi	sp,sp,-28
 8016618:	df000615 	stw	fp,24(sp)
 801661c:	df000604 	addi	fp,sp,24
 8016620:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016624:	0005303a 	rdctl	r2,status
 8016628:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801662c:	e0fffe17 	ldw	r3,-8(fp)
 8016630:	00bfff84 	movi	r2,-2
 8016634:	1884703a 	and	r2,r3,r2
 8016638:	1001703a 	wrctl	status,r2
  
  return context;
 801663c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8016640:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8016644:	d0a01417 	ldw	r2,-32688(gp)
 8016648:	10c000c4 	addi	r3,r2,3
 801664c:	00bfff04 	movi	r2,-4
 8016650:	1884703a 	and	r2,r3,r2
 8016654:	d0a01415 	stw	r2,-32688(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8016658:	d0e01417 	ldw	r3,-32688(gp)
 801665c:	e0bfff17 	ldw	r2,-4(fp)
 8016660:	1887883a 	add	r3,r3,r2
 8016664:	00830034 	movhi	r2,3072
 8016668:	10800004 	addi	r2,r2,0
 801666c:	10c0062e 	bgeu	r2,r3,8016688 <sbrk+0x74>
 8016670:	e0bffb17 	ldw	r2,-20(fp)
 8016674:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016678:	e0bffa17 	ldw	r2,-24(fp)
 801667c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8016680:	00bfffc4 	movi	r2,-1
 8016684:	00000b06 	br	80166b4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8016688:	d0a01417 	ldw	r2,-32688(gp)
 801668c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8016690:	d0e01417 	ldw	r3,-32688(gp)
 8016694:	e0bfff17 	ldw	r2,-4(fp)
 8016698:	1885883a 	add	r2,r3,r2
 801669c:	d0a01415 	stw	r2,-32688(gp)
 80166a0:	e0bffb17 	ldw	r2,-20(fp)
 80166a4:	e0bffc15 	stw	r2,-16(fp)
 80166a8:	e0bffc17 	ldw	r2,-16(fp)
 80166ac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80166b0:	e0bffd17 	ldw	r2,-12(fp)
} 
 80166b4:	e037883a 	mov	sp,fp
 80166b8:	df000017 	ldw	fp,0(sp)
 80166bc:	dec00104 	addi	sp,sp,4
 80166c0:	f800283a 	ret

080166c4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80166c4:	defffa04 	addi	sp,sp,-24
 80166c8:	df000515 	stw	fp,20(sp)
 80166cc:	df000504 	addi	fp,sp,20
 80166d0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80166d4:	0005303a 	rdctl	r2,status
 80166d8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80166dc:	e0fffc17 	ldw	r3,-16(fp)
 80166e0:	00bfff84 	movi	r2,-2
 80166e4:	1884703a 	and	r2,r3,r2
 80166e8:	1001703a 	wrctl	status,r2
  
  return context;
 80166ec:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80166f0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80166f4:	e0bfff17 	ldw	r2,-4(fp)
 80166f8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80166fc:	e0bffd17 	ldw	r2,-12(fp)
 8016700:	10800017 	ldw	r2,0(r2)
 8016704:	e0fffd17 	ldw	r3,-12(fp)
 8016708:	18c00117 	ldw	r3,4(r3)
 801670c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8016710:	e0bffd17 	ldw	r2,-12(fp)
 8016714:	10800117 	ldw	r2,4(r2)
 8016718:	e0fffd17 	ldw	r3,-12(fp)
 801671c:	18c00017 	ldw	r3,0(r3)
 8016720:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8016724:	e0bffd17 	ldw	r2,-12(fp)
 8016728:	e0fffd17 	ldw	r3,-12(fp)
 801672c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8016730:	e0bffd17 	ldw	r2,-12(fp)
 8016734:	e0fffd17 	ldw	r3,-12(fp)
 8016738:	10c00015 	stw	r3,0(r2)
 801673c:	e0bffb17 	ldw	r2,-20(fp)
 8016740:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016744:	e0bffe17 	ldw	r2,-8(fp)
 8016748:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801674c:	0001883a 	nop
 8016750:	e037883a 	mov	sp,fp
 8016754:	df000017 	ldw	fp,0(sp)
 8016758:	dec00104 	addi	sp,sp,4
 801675c:	f800283a 	ret

08016760 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8016760:	defffb04 	addi	sp,sp,-20
 8016764:	dfc00415 	stw	ra,16(sp)
 8016768:	df000315 	stw	fp,12(sp)
 801676c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8016770:	d0a01517 	ldw	r2,-32684(gp)
 8016774:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8016778:	d0a6f917 	ldw	r2,-25628(gp)
 801677c:	10800044 	addi	r2,r2,1
 8016780:	d0a6f915 	stw	r2,-25628(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016784:	00002e06 	br	8016840 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8016788:	e0bffd17 	ldw	r2,-12(fp)
 801678c:	10800017 	ldw	r2,0(r2)
 8016790:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8016794:	e0bffd17 	ldw	r2,-12(fp)
 8016798:	10800403 	ldbu	r2,16(r2)
 801679c:	10803fcc 	andi	r2,r2,255
 80167a0:	10000426 	beq	r2,zero,80167b4 <alt_tick+0x54>
 80167a4:	d0a6f917 	ldw	r2,-25628(gp)
 80167a8:	1000021e 	bne	r2,zero,80167b4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80167ac:	e0bffd17 	ldw	r2,-12(fp)
 80167b0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80167b4:	e0bffd17 	ldw	r2,-12(fp)
 80167b8:	10800217 	ldw	r2,8(r2)
 80167bc:	d0e6f917 	ldw	r3,-25628(gp)
 80167c0:	18801d36 	bltu	r3,r2,8016838 <alt_tick+0xd8>
 80167c4:	e0bffd17 	ldw	r2,-12(fp)
 80167c8:	10800403 	ldbu	r2,16(r2)
 80167cc:	10803fcc 	andi	r2,r2,255
 80167d0:	1000191e 	bne	r2,zero,8016838 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80167d4:	e0bffd17 	ldw	r2,-12(fp)
 80167d8:	10800317 	ldw	r2,12(r2)
 80167dc:	e0fffd17 	ldw	r3,-12(fp)
 80167e0:	18c00517 	ldw	r3,20(r3)
 80167e4:	1809883a 	mov	r4,r3
 80167e8:	103ee83a 	callr	r2
 80167ec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80167f0:	e0bfff17 	ldw	r2,-4(fp)
 80167f4:	1000031e 	bne	r2,zero,8016804 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80167f8:	e13ffd17 	ldw	r4,-12(fp)
 80167fc:	80166c40 	call	80166c4 <alt_alarm_stop>
 8016800:	00000d06 	br	8016838 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8016804:	e0bffd17 	ldw	r2,-12(fp)
 8016808:	10c00217 	ldw	r3,8(r2)
 801680c:	e0bfff17 	ldw	r2,-4(fp)
 8016810:	1887883a 	add	r3,r3,r2
 8016814:	e0bffd17 	ldw	r2,-12(fp)
 8016818:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801681c:	e0bffd17 	ldw	r2,-12(fp)
 8016820:	10c00217 	ldw	r3,8(r2)
 8016824:	d0a6f917 	ldw	r2,-25628(gp)
 8016828:	1880032e 	bgeu	r3,r2,8016838 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801682c:	e0bffd17 	ldw	r2,-12(fp)
 8016830:	00c00044 	movi	r3,1
 8016834:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8016838:	e0bffe17 	ldw	r2,-8(fp)
 801683c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8016840:	e0fffd17 	ldw	r3,-12(fp)
 8016844:	d0a01504 	addi	r2,gp,-32684
 8016848:	18bfcf1e 	bne	r3,r2,8016788 <__alt_data_end+0xfc016788>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801684c:	0001883a 	nop
}
 8016850:	0001883a 	nop
 8016854:	e037883a 	mov	sp,fp
 8016858:	dfc00117 	ldw	ra,4(sp)
 801685c:	df000017 	ldw	fp,0(sp)
 8016860:	dec00204 	addi	sp,sp,8
 8016864:	f800283a 	ret

08016868 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8016868:	defffd04 	addi	sp,sp,-12
 801686c:	dfc00215 	stw	ra,8(sp)
 8016870:	df000115 	stw	fp,4(sp)
 8016874:	df000104 	addi	fp,sp,4
 8016878:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 801687c:	e13fff17 	ldw	r4,-4(fp)
 8016880:	80179280 	call	8017928 <alt_busy_sleep>
}
 8016884:	e037883a 	mov	sp,fp
 8016888:	dfc00117 	ldw	ra,4(sp)
 801688c:	df000017 	ldw	fp,0(sp)
 8016890:	dec00204 	addi	sp,sp,8
 8016894:	f800283a 	ret

08016898 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016898:	defffe04 	addi	sp,sp,-8
 801689c:	dfc00115 	stw	ra,4(sp)
 80168a0:	df000015 	stw	fp,0(sp)
 80168a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80168a8:	d0a01317 	ldw	r2,-32692(gp)
 80168ac:	10000326 	beq	r2,zero,80168bc <alt_get_errno+0x24>
 80168b0:	d0a01317 	ldw	r2,-32692(gp)
 80168b4:	103ee83a 	callr	r2
 80168b8:	00000106 	br	80168c0 <alt_get_errno+0x28>
 80168bc:	d0a6f404 	addi	r2,gp,-25648
}
 80168c0:	e037883a 	mov	sp,fp
 80168c4:	dfc00117 	ldw	ra,4(sp)
 80168c8:	df000017 	ldw	fp,0(sp)
 80168cc:	dec00204 	addi	sp,sp,8
 80168d0:	f800283a 	ret

080168d4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80168d4:	defff904 	addi	sp,sp,-28
 80168d8:	dfc00615 	stw	ra,24(sp)
 80168dc:	df000515 	stw	fp,20(sp)
 80168e0:	df000504 	addi	fp,sp,20
 80168e4:	e13ffd15 	stw	r4,-12(fp)
 80168e8:	e17ffe15 	stw	r5,-8(fp)
 80168ec:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80168f0:	e0bffd17 	ldw	r2,-12(fp)
 80168f4:	10000816 	blt	r2,zero,8016918 <write+0x44>
 80168f8:	01400304 	movi	r5,12
 80168fc:	e13ffd17 	ldw	r4,-12(fp)
 8016900:	8007f540 	call	8007f54 <__mulsi3>
 8016904:	1007883a 	mov	r3,r2
 8016908:	00820d74 	movhi	r2,2101
 801690c:	10a40204 	addi	r2,r2,-28664
 8016910:	1885883a 	add	r2,r3,r2
 8016914:	00000106 	br	801691c <write+0x48>
 8016918:	0005883a 	mov	r2,zero
 801691c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8016920:	e0bffb17 	ldw	r2,-20(fp)
 8016924:	10002126 	beq	r2,zero,80169ac <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8016928:	e0bffb17 	ldw	r2,-20(fp)
 801692c:	10800217 	ldw	r2,8(r2)
 8016930:	108000cc 	andi	r2,r2,3
 8016934:	10001826 	beq	r2,zero,8016998 <write+0xc4>
 8016938:	e0bffb17 	ldw	r2,-20(fp)
 801693c:	10800017 	ldw	r2,0(r2)
 8016940:	10800617 	ldw	r2,24(r2)
 8016944:	10001426 	beq	r2,zero,8016998 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8016948:	e0bffb17 	ldw	r2,-20(fp)
 801694c:	10800017 	ldw	r2,0(r2)
 8016950:	10800617 	ldw	r2,24(r2)
 8016954:	e0ffff17 	ldw	r3,-4(fp)
 8016958:	180d883a 	mov	r6,r3
 801695c:	e17ffe17 	ldw	r5,-8(fp)
 8016960:	e13ffb17 	ldw	r4,-20(fp)
 8016964:	103ee83a 	callr	r2
 8016968:	e0bffc15 	stw	r2,-16(fp)
 801696c:	e0bffc17 	ldw	r2,-16(fp)
 8016970:	1000070e 	bge	r2,zero,8016990 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8016974:	80168980 	call	8016898 <alt_get_errno>
 8016978:	1007883a 	mov	r3,r2
 801697c:	e0bffc17 	ldw	r2,-16(fp)
 8016980:	0085c83a 	sub	r2,zero,r2
 8016984:	18800015 	stw	r2,0(r3)
        return -1;
 8016988:	00bfffc4 	movi	r2,-1
 801698c:	00000c06 	br	80169c0 <write+0xec>
      }
      return rval;
 8016990:	e0bffc17 	ldw	r2,-16(fp)
 8016994:	00000a06 	br	80169c0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8016998:	80168980 	call	8016898 <alt_get_errno>
 801699c:	1007883a 	mov	r3,r2
 80169a0:	00800344 	movi	r2,13
 80169a4:	18800015 	stw	r2,0(r3)
 80169a8:	00000406 	br	80169bc <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80169ac:	80168980 	call	8016898 <alt_get_errno>
 80169b0:	1007883a 	mov	r3,r2
 80169b4:	00801444 	movi	r2,81
 80169b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80169bc:	00bfffc4 	movi	r2,-1
}
 80169c0:	e037883a 	mov	sp,fp
 80169c4:	dfc00117 	ldw	ra,4(sp)
 80169c8:	df000017 	ldw	fp,0(sp)
 80169cc:	dec00204 	addi	sp,sp,8
 80169d0:	f800283a 	ret

080169d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80169d4:	defffd04 	addi	sp,sp,-12
 80169d8:	dfc00215 	stw	ra,8(sp)
 80169dc:	df000115 	stw	fp,4(sp)
 80169e0:	df000104 	addi	fp,sp,4
 80169e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80169e8:	d1601004 	addi	r5,gp,-32704
 80169ec:	e13fff17 	ldw	r4,-4(fp)
 80169f0:	8017adc0 	call	8017adc <alt_dev_llist_insert>
}
 80169f4:	e037883a 	mov	sp,fp
 80169f8:	dfc00117 	ldw	ra,4(sp)
 80169fc:	df000017 	ldw	fp,0(sp)
 8016a00:	dec00204 	addi	sp,sp,8
 8016a04:	f800283a 	ret

08016a08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8016a08:	defffd04 	addi	sp,sp,-12
 8016a0c:	dfc00215 	stw	ra,8(sp)
 8016a10:	df000115 	stw	fp,4(sp)
 8016a14:	df000104 	addi	fp,sp,4
 8016a18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8016a1c:	80182e40 	call	80182e4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8016a20:	00800044 	movi	r2,1
 8016a24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8016a28:	0001883a 	nop
 8016a2c:	e037883a 	mov	sp,fp
 8016a30:	dfc00117 	ldw	ra,4(sp)
 8016a34:	df000017 	ldw	fp,0(sp)
 8016a38:	dec00204 	addi	sp,sp,8
 8016a3c:	f800283a 	ret

08016a40 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8016a40:	defffe04 	addi	sp,sp,-8
 8016a44:	dfc00115 	stw	ra,4(sp)
 8016a48:	df000015 	stw	fp,0(sp)
 8016a4c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8016a50:	01c0fa04 	movi	r7,1000
 8016a54:	01800084 	movi	r6,2
 8016a58:	000b883a 	mov	r5,zero
 8016a5c:	01082004 	movi	r4,8320
 8016a60:	80177800 	call	8017780 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8016a64:	01800044 	movi	r6,1
 8016a68:	000b883a 	mov	r5,zero
 8016a6c:	01020d74 	movhi	r4,2101
 8016a70:	21246c04 	addi	r4,r4,-28240
 8016a74:	8016c080 	call	8016c08 <altera_avalon_jtag_uart_init>
 8016a78:	01020d74 	movhi	r4,2101
 8016a7c:	21246204 	addi	r4,r4,-28280
 8016a80:	80169d40 	call	80169d4 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8016a84:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8016a88:	0001883a 	nop
}
 8016a8c:	0001883a 	nop
 8016a90:	e037883a 	mov	sp,fp
 8016a94:	dfc00117 	ldw	ra,4(sp)
 8016a98:	df000017 	ldw	fp,0(sp)
 8016a9c:	dec00204 	addi	sp,sp,8
 8016aa0:	f800283a 	ret

08016aa4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8016aa4:	defffa04 	addi	sp,sp,-24
 8016aa8:	dfc00515 	stw	ra,20(sp)
 8016aac:	df000415 	stw	fp,16(sp)
 8016ab0:	df000404 	addi	fp,sp,16
 8016ab4:	e13ffd15 	stw	r4,-12(fp)
 8016ab8:	e17ffe15 	stw	r5,-8(fp)
 8016abc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016ac0:	e0bffd17 	ldw	r2,-12(fp)
 8016ac4:	10800017 	ldw	r2,0(r2)
 8016ac8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8016acc:	e0bffc17 	ldw	r2,-16(fp)
 8016ad0:	10c00a04 	addi	r3,r2,40
 8016ad4:	e0bffd17 	ldw	r2,-12(fp)
 8016ad8:	10800217 	ldw	r2,8(r2)
 8016adc:	100f883a 	mov	r7,r2
 8016ae0:	e1bfff17 	ldw	r6,-4(fp)
 8016ae4:	e17ffe17 	ldw	r5,-8(fp)
 8016ae8:	1809883a 	mov	r4,r3
 8016aec:	80170cc0 	call	80170cc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8016af0:	e037883a 	mov	sp,fp
 8016af4:	dfc00117 	ldw	ra,4(sp)
 8016af8:	df000017 	ldw	fp,0(sp)
 8016afc:	dec00204 	addi	sp,sp,8
 8016b00:	f800283a 	ret

08016b04 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8016b04:	defffa04 	addi	sp,sp,-24
 8016b08:	dfc00515 	stw	ra,20(sp)
 8016b0c:	df000415 	stw	fp,16(sp)
 8016b10:	df000404 	addi	fp,sp,16
 8016b14:	e13ffd15 	stw	r4,-12(fp)
 8016b18:	e17ffe15 	stw	r5,-8(fp)
 8016b1c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016b20:	e0bffd17 	ldw	r2,-12(fp)
 8016b24:	10800017 	ldw	r2,0(r2)
 8016b28:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8016b2c:	e0bffc17 	ldw	r2,-16(fp)
 8016b30:	10c00a04 	addi	r3,r2,40
 8016b34:	e0bffd17 	ldw	r2,-12(fp)
 8016b38:	10800217 	ldw	r2,8(r2)
 8016b3c:	100f883a 	mov	r7,r2
 8016b40:	e1bfff17 	ldw	r6,-4(fp)
 8016b44:	e17ffe17 	ldw	r5,-8(fp)
 8016b48:	1809883a 	mov	r4,r3
 8016b4c:	80172e80 	call	80172e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8016b50:	e037883a 	mov	sp,fp
 8016b54:	dfc00117 	ldw	ra,4(sp)
 8016b58:	df000017 	ldw	fp,0(sp)
 8016b5c:	dec00204 	addi	sp,sp,8
 8016b60:	f800283a 	ret

08016b64 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8016b64:	defffc04 	addi	sp,sp,-16
 8016b68:	dfc00315 	stw	ra,12(sp)
 8016b6c:	df000215 	stw	fp,8(sp)
 8016b70:	df000204 	addi	fp,sp,8
 8016b74:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016b78:	e0bfff17 	ldw	r2,-4(fp)
 8016b7c:	10800017 	ldw	r2,0(r2)
 8016b80:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8016b84:	e0bffe17 	ldw	r2,-8(fp)
 8016b88:	10c00a04 	addi	r3,r2,40
 8016b8c:	e0bfff17 	ldw	r2,-4(fp)
 8016b90:	10800217 	ldw	r2,8(r2)
 8016b94:	100b883a 	mov	r5,r2
 8016b98:	1809883a 	mov	r4,r3
 8016b9c:	8016f740 	call	8016f74 <altera_avalon_jtag_uart_close>
}
 8016ba0:	e037883a 	mov	sp,fp
 8016ba4:	dfc00117 	ldw	ra,4(sp)
 8016ba8:	df000017 	ldw	fp,0(sp)
 8016bac:	dec00204 	addi	sp,sp,8
 8016bb0:	f800283a 	ret

08016bb4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8016bb4:	defffa04 	addi	sp,sp,-24
 8016bb8:	dfc00515 	stw	ra,20(sp)
 8016bbc:	df000415 	stw	fp,16(sp)
 8016bc0:	df000404 	addi	fp,sp,16
 8016bc4:	e13ffd15 	stw	r4,-12(fp)
 8016bc8:	e17ffe15 	stw	r5,-8(fp)
 8016bcc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8016bd0:	e0bffd17 	ldw	r2,-12(fp)
 8016bd4:	10800017 	ldw	r2,0(r2)
 8016bd8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8016bdc:	e0bffc17 	ldw	r2,-16(fp)
 8016be0:	10800a04 	addi	r2,r2,40
 8016be4:	e1bfff17 	ldw	r6,-4(fp)
 8016be8:	e17ffe17 	ldw	r5,-8(fp)
 8016bec:	1009883a 	mov	r4,r2
 8016bf0:	8016fdc0 	call	8016fdc <altera_avalon_jtag_uart_ioctl>
}
 8016bf4:	e037883a 	mov	sp,fp
 8016bf8:	dfc00117 	ldw	ra,4(sp)
 8016bfc:	df000017 	ldw	fp,0(sp)
 8016c00:	dec00204 	addi	sp,sp,8
 8016c04:	f800283a 	ret

08016c08 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8016c08:	defffa04 	addi	sp,sp,-24
 8016c0c:	dfc00515 	stw	ra,20(sp)
 8016c10:	df000415 	stw	fp,16(sp)
 8016c14:	df000404 	addi	fp,sp,16
 8016c18:	e13ffd15 	stw	r4,-12(fp)
 8016c1c:	e17ffe15 	stw	r5,-8(fp)
 8016c20:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016c24:	e0bffd17 	ldw	r2,-12(fp)
 8016c28:	00c00044 	movi	r3,1
 8016c2c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016c30:	e0bffd17 	ldw	r2,-12(fp)
 8016c34:	10800017 	ldw	r2,0(r2)
 8016c38:	10800104 	addi	r2,r2,4
 8016c3c:	1007883a 	mov	r3,r2
 8016c40:	e0bffd17 	ldw	r2,-12(fp)
 8016c44:	10800817 	ldw	r2,32(r2)
 8016c48:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8016c4c:	e0bffe17 	ldw	r2,-8(fp)
 8016c50:	e0ffff17 	ldw	r3,-4(fp)
 8016c54:	d8000015 	stw	zero,0(sp)
 8016c58:	e1fffd17 	ldw	r7,-12(fp)
 8016c5c:	01820074 	movhi	r6,2049
 8016c60:	319b3204 	addi	r6,r6,27848
 8016c64:	180b883a 	mov	r5,r3
 8016c68:	1009883a 	mov	r4,r2
 8016c6c:	8017c600 	call	8017c60 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8016c70:	e0bffd17 	ldw	r2,-12(fp)
 8016c74:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8016c78:	e0bffd17 	ldw	r2,-12(fp)
 8016c7c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016c80:	d0e6f817 	ldw	r3,-25632(gp)
 8016c84:	e1fffd17 	ldw	r7,-12(fp)
 8016c88:	01820074 	movhi	r6,2049
 8016c8c:	319bb504 	addi	r6,r6,28372
 8016c90:	180b883a 	mov	r5,r3
 8016c94:	1009883a 	mov	r4,r2
 8016c98:	80177fc0 	call	80177fc <alt_alarm_start>
 8016c9c:	1000040e 	bge	r2,zero,8016cb0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8016ca0:	e0fffd17 	ldw	r3,-12(fp)
 8016ca4:	00a00034 	movhi	r2,32768
 8016ca8:	10bfffc4 	addi	r2,r2,-1
 8016cac:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8016cb0:	0001883a 	nop
 8016cb4:	e037883a 	mov	sp,fp
 8016cb8:	dfc00117 	ldw	ra,4(sp)
 8016cbc:	df000017 	ldw	fp,0(sp)
 8016cc0:	dec00204 	addi	sp,sp,8
 8016cc4:	f800283a 	ret

08016cc8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016cc8:	defff804 	addi	sp,sp,-32
 8016ccc:	df000715 	stw	fp,28(sp)
 8016cd0:	df000704 	addi	fp,sp,28
 8016cd4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8016cd8:	e0bfff17 	ldw	r2,-4(fp)
 8016cdc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8016ce0:	e0bffb17 	ldw	r2,-20(fp)
 8016ce4:	10800017 	ldw	r2,0(r2)
 8016ce8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016cec:	e0bffc17 	ldw	r2,-16(fp)
 8016cf0:	10800104 	addi	r2,r2,4
 8016cf4:	10800037 	ldwio	r2,0(r2)
 8016cf8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8016cfc:	e0bffd17 	ldw	r2,-12(fp)
 8016d00:	1080c00c 	andi	r2,r2,768
 8016d04:	10006d26 	beq	r2,zero,8016ebc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016d08:	e0bffd17 	ldw	r2,-12(fp)
 8016d0c:	1080400c 	andi	r2,r2,256
 8016d10:	10003526 	beq	r2,zero,8016de8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8016d14:	00800074 	movhi	r2,1
 8016d18:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016d1c:	e0bffb17 	ldw	r2,-20(fp)
 8016d20:	10800a17 	ldw	r2,40(r2)
 8016d24:	10800044 	addi	r2,r2,1
 8016d28:	1081ffcc 	andi	r2,r2,2047
 8016d2c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8016d30:	e0bffb17 	ldw	r2,-20(fp)
 8016d34:	10c00b17 	ldw	r3,44(r2)
 8016d38:	e0bffe17 	ldw	r2,-8(fp)
 8016d3c:	18801526 	beq	r3,r2,8016d94 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016d40:	e0bffc17 	ldw	r2,-16(fp)
 8016d44:	10800037 	ldwio	r2,0(r2)
 8016d48:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016d4c:	e0bff917 	ldw	r2,-28(fp)
 8016d50:	10a0000c 	andi	r2,r2,32768
 8016d54:	10001126 	beq	r2,zero,8016d9c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016d58:	e0bffb17 	ldw	r2,-20(fp)
 8016d5c:	10800a17 	ldw	r2,40(r2)
 8016d60:	e0fff917 	ldw	r3,-28(fp)
 8016d64:	1809883a 	mov	r4,r3
 8016d68:	e0fffb17 	ldw	r3,-20(fp)
 8016d6c:	1885883a 	add	r2,r3,r2
 8016d70:	10800e04 	addi	r2,r2,56
 8016d74:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016d78:	e0bffb17 	ldw	r2,-20(fp)
 8016d7c:	10800a17 	ldw	r2,40(r2)
 8016d80:	10800044 	addi	r2,r2,1
 8016d84:	10c1ffcc 	andi	r3,r2,2047
 8016d88:	e0bffb17 	ldw	r2,-20(fp)
 8016d8c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8016d90:	003fe206 	br	8016d1c <__alt_data_end+0xfc016d1c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8016d94:	0001883a 	nop
 8016d98:	00000106 	br	8016da0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8016d9c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016da0:	e0bff917 	ldw	r2,-28(fp)
 8016da4:	10bfffec 	andhi	r2,r2,65535
 8016da8:	10000f26 	beq	r2,zero,8016de8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016dac:	e0bffb17 	ldw	r2,-20(fp)
 8016db0:	10c00817 	ldw	r3,32(r2)
 8016db4:	00bfff84 	movi	r2,-2
 8016db8:	1886703a 	and	r3,r3,r2
 8016dbc:	e0bffb17 	ldw	r2,-20(fp)
 8016dc0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016dc4:	e0bffc17 	ldw	r2,-16(fp)
 8016dc8:	10800104 	addi	r2,r2,4
 8016dcc:	1007883a 	mov	r3,r2
 8016dd0:	e0bffb17 	ldw	r2,-20(fp)
 8016dd4:	10800817 	ldw	r2,32(r2)
 8016dd8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016ddc:	e0bffc17 	ldw	r2,-16(fp)
 8016de0:	10800104 	addi	r2,r2,4
 8016de4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8016de8:	e0bffd17 	ldw	r2,-12(fp)
 8016dec:	1080800c 	andi	r2,r2,512
 8016df0:	103fbe26 	beq	r2,zero,8016cec <__alt_data_end+0xfc016cec>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8016df4:	e0bffd17 	ldw	r2,-12(fp)
 8016df8:	1004d43a 	srli	r2,r2,16
 8016dfc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016e00:	00001406 	br	8016e54 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8016e04:	e0bffc17 	ldw	r2,-16(fp)
 8016e08:	e0fffb17 	ldw	r3,-20(fp)
 8016e0c:	18c00d17 	ldw	r3,52(r3)
 8016e10:	e13ffb17 	ldw	r4,-20(fp)
 8016e14:	20c7883a 	add	r3,r4,r3
 8016e18:	18c20e04 	addi	r3,r3,2104
 8016e1c:	18c00003 	ldbu	r3,0(r3)
 8016e20:	18c03fcc 	andi	r3,r3,255
 8016e24:	18c0201c 	xori	r3,r3,128
 8016e28:	18ffe004 	addi	r3,r3,-128
 8016e2c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016e30:	e0bffb17 	ldw	r2,-20(fp)
 8016e34:	10800d17 	ldw	r2,52(r2)
 8016e38:	10800044 	addi	r2,r2,1
 8016e3c:	10c1ffcc 	andi	r3,r2,2047
 8016e40:	e0bffb17 	ldw	r2,-20(fp)
 8016e44:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016e48:	e0bffa17 	ldw	r2,-24(fp)
 8016e4c:	10bfffc4 	addi	r2,r2,-1
 8016e50:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016e54:	e0bffa17 	ldw	r2,-24(fp)
 8016e58:	10000526 	beq	r2,zero,8016e70 <altera_avalon_jtag_uart_irq+0x1a8>
 8016e5c:	e0bffb17 	ldw	r2,-20(fp)
 8016e60:	10c00d17 	ldw	r3,52(r2)
 8016e64:	e0bffb17 	ldw	r2,-20(fp)
 8016e68:	10800c17 	ldw	r2,48(r2)
 8016e6c:	18bfe51e 	bne	r3,r2,8016e04 <__alt_data_end+0xfc016e04>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8016e70:	e0bffa17 	ldw	r2,-24(fp)
 8016e74:	103f9d26 	beq	r2,zero,8016cec <__alt_data_end+0xfc016cec>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016e78:	e0bffb17 	ldw	r2,-20(fp)
 8016e7c:	10c00817 	ldw	r3,32(r2)
 8016e80:	00bfff44 	movi	r2,-3
 8016e84:	1886703a 	and	r3,r3,r2
 8016e88:	e0bffb17 	ldw	r2,-20(fp)
 8016e8c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016e90:	e0bffb17 	ldw	r2,-20(fp)
 8016e94:	10800017 	ldw	r2,0(r2)
 8016e98:	10800104 	addi	r2,r2,4
 8016e9c:	1007883a 	mov	r3,r2
 8016ea0:	e0bffb17 	ldw	r2,-20(fp)
 8016ea4:	10800817 	ldw	r2,32(r2)
 8016ea8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016eac:	e0bffc17 	ldw	r2,-16(fp)
 8016eb0:	10800104 	addi	r2,r2,4
 8016eb4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016eb8:	003f8c06 	br	8016cec <__alt_data_end+0xfc016cec>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8016ebc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8016ec0:	0001883a 	nop
 8016ec4:	e037883a 	mov	sp,fp
 8016ec8:	df000017 	ldw	fp,0(sp)
 8016ecc:	dec00104 	addi	sp,sp,4
 8016ed0:	f800283a 	ret

08016ed4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8016ed4:	defff804 	addi	sp,sp,-32
 8016ed8:	df000715 	stw	fp,28(sp)
 8016edc:	df000704 	addi	fp,sp,28
 8016ee0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8016ee4:	e0bffb17 	ldw	r2,-20(fp)
 8016ee8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8016eec:	e0bff917 	ldw	r2,-28(fp)
 8016ef0:	10800017 	ldw	r2,0(r2)
 8016ef4:	10800104 	addi	r2,r2,4
 8016ef8:	10800037 	ldwio	r2,0(r2)
 8016efc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8016f00:	e0bffa17 	ldw	r2,-24(fp)
 8016f04:	1081000c 	andi	r2,r2,1024
 8016f08:	10000b26 	beq	r2,zero,8016f38 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8016f0c:	e0bff917 	ldw	r2,-28(fp)
 8016f10:	10800017 	ldw	r2,0(r2)
 8016f14:	10800104 	addi	r2,r2,4
 8016f18:	1007883a 	mov	r3,r2
 8016f1c:	e0bff917 	ldw	r2,-28(fp)
 8016f20:	10800817 	ldw	r2,32(r2)
 8016f24:	10810014 	ori	r2,r2,1024
 8016f28:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016f2c:	e0bff917 	ldw	r2,-28(fp)
 8016f30:	10000915 	stw	zero,36(r2)
 8016f34:	00000a06 	br	8016f60 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016f38:	e0bff917 	ldw	r2,-28(fp)
 8016f3c:	10c00917 	ldw	r3,36(r2)
 8016f40:	00a00034 	movhi	r2,32768
 8016f44:	10bfff04 	addi	r2,r2,-4
 8016f48:	10c00536 	bltu	r2,r3,8016f60 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8016f4c:	e0bff917 	ldw	r2,-28(fp)
 8016f50:	10800917 	ldw	r2,36(r2)
 8016f54:	10c00044 	addi	r3,r2,1
 8016f58:	e0bff917 	ldw	r2,-28(fp)
 8016f5c:	10c00915 	stw	r3,36(r2)
 8016f60:	d0a6f817 	ldw	r2,-25632(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8016f64:	e037883a 	mov	sp,fp
 8016f68:	df000017 	ldw	fp,0(sp)
 8016f6c:	dec00104 	addi	sp,sp,4
 8016f70:	f800283a 	ret

08016f74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8016f74:	defffd04 	addi	sp,sp,-12
 8016f78:	df000215 	stw	fp,8(sp)
 8016f7c:	df000204 	addi	fp,sp,8
 8016f80:	e13ffe15 	stw	r4,-8(fp)
 8016f84:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016f88:	00000506 	br	8016fa0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8016f8c:	e0bfff17 	ldw	r2,-4(fp)
 8016f90:	1090000c 	andi	r2,r2,16384
 8016f94:	10000226 	beq	r2,zero,8016fa0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016f98:	00bffd44 	movi	r2,-11
 8016f9c:	00000b06 	br	8016fcc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016fa0:	e0bffe17 	ldw	r2,-8(fp)
 8016fa4:	10c00d17 	ldw	r3,52(r2)
 8016fa8:	e0bffe17 	ldw	r2,-8(fp)
 8016fac:	10800c17 	ldw	r2,48(r2)
 8016fb0:	18800526 	beq	r3,r2,8016fc8 <altera_avalon_jtag_uart_close+0x54>
 8016fb4:	e0bffe17 	ldw	r2,-8(fp)
 8016fb8:	10c00917 	ldw	r3,36(r2)
 8016fbc:	e0bffe17 	ldw	r2,-8(fp)
 8016fc0:	10800117 	ldw	r2,4(r2)
 8016fc4:	18bff136 	bltu	r3,r2,8016f8c <__alt_data_end+0xfc016f8c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016fc8:	0005883a 	mov	r2,zero
}
 8016fcc:	e037883a 	mov	sp,fp
 8016fd0:	df000017 	ldw	fp,0(sp)
 8016fd4:	dec00104 	addi	sp,sp,4
 8016fd8:	f800283a 	ret

08016fdc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8016fdc:	defffa04 	addi	sp,sp,-24
 8016fe0:	df000515 	stw	fp,20(sp)
 8016fe4:	df000504 	addi	fp,sp,20
 8016fe8:	e13ffd15 	stw	r4,-12(fp)
 8016fec:	e17ffe15 	stw	r5,-8(fp)
 8016ff0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8016ff4:	00bff9c4 	movi	r2,-25
 8016ff8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8016ffc:	e0bffe17 	ldw	r2,-8(fp)
 8017000:	10da8060 	cmpeqi	r3,r2,27137
 8017004:	1800031e 	bne	r3,zero,8017014 <altera_avalon_jtag_uart_ioctl+0x38>
 8017008:	109a80a0 	cmpeqi	r2,r2,27138
 801700c:	1000181e 	bne	r2,zero,8017070 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8017010:	00002906 	br	80170b8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8017014:	e0bffd17 	ldw	r2,-12(fp)
 8017018:	10c00117 	ldw	r3,4(r2)
 801701c:	00a00034 	movhi	r2,32768
 8017020:	10bfffc4 	addi	r2,r2,-1
 8017024:	18802126 	beq	r3,r2,80170ac <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8017028:	e0bfff17 	ldw	r2,-4(fp)
 801702c:	10800017 	ldw	r2,0(r2)
 8017030:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8017034:	e0bffc17 	ldw	r2,-16(fp)
 8017038:	10800090 	cmplti	r2,r2,2
 801703c:	1000061e 	bne	r2,zero,8017058 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017040:	e0fffc17 	ldw	r3,-16(fp)
 8017044:	00a00034 	movhi	r2,32768
 8017048:	10bfffc4 	addi	r2,r2,-1
 801704c:	18800226 	beq	r3,r2,8017058 <altera_avalon_jtag_uart_ioctl+0x7c>
 8017050:	e0bffc17 	ldw	r2,-16(fp)
 8017054:	00000206 	br	8017060 <altera_avalon_jtag_uart_ioctl+0x84>
 8017058:	00a00034 	movhi	r2,32768
 801705c:	10bfff84 	addi	r2,r2,-2
 8017060:	e0fffd17 	ldw	r3,-12(fp)
 8017064:	18800115 	stw	r2,4(r3)
      rc = 0;
 8017068:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801706c:	00000f06 	br	80170ac <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8017070:	e0bffd17 	ldw	r2,-12(fp)
 8017074:	10c00117 	ldw	r3,4(r2)
 8017078:	00a00034 	movhi	r2,32768
 801707c:	10bfffc4 	addi	r2,r2,-1
 8017080:	18800c26 	beq	r3,r2,80170b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8017084:	e0bffd17 	ldw	r2,-12(fp)
 8017088:	10c00917 	ldw	r3,36(r2)
 801708c:	e0bffd17 	ldw	r2,-12(fp)
 8017090:	10800117 	ldw	r2,4(r2)
 8017094:	1885803a 	cmpltu	r2,r3,r2
 8017098:	10c03fcc 	andi	r3,r2,255
 801709c:	e0bfff17 	ldw	r2,-4(fp)
 80170a0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80170a4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80170a8:	00000206 	br	80170b4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80170ac:	0001883a 	nop
 80170b0:	00000106 	br	80170b8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80170b4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80170b8:	e0bffb17 	ldw	r2,-20(fp)
}
 80170bc:	e037883a 	mov	sp,fp
 80170c0:	df000017 	ldw	fp,0(sp)
 80170c4:	dec00104 	addi	sp,sp,4
 80170c8:	f800283a 	ret

080170cc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80170cc:	defff304 	addi	sp,sp,-52
 80170d0:	dfc00c15 	stw	ra,48(sp)
 80170d4:	df000b15 	stw	fp,44(sp)
 80170d8:	df000b04 	addi	fp,sp,44
 80170dc:	e13ffc15 	stw	r4,-16(fp)
 80170e0:	e17ffd15 	stw	r5,-12(fp)
 80170e4:	e1bffe15 	stw	r6,-8(fp)
 80170e8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80170ec:	e0bffd17 	ldw	r2,-12(fp)
 80170f0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80170f4:	00004706 	br	8017214 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80170f8:	e0bffc17 	ldw	r2,-16(fp)
 80170fc:	10800a17 	ldw	r2,40(r2)
 8017100:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8017104:	e0bffc17 	ldw	r2,-16(fp)
 8017108:	10800b17 	ldw	r2,44(r2)
 801710c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8017110:	e0fff717 	ldw	r3,-36(fp)
 8017114:	e0bff817 	ldw	r2,-32(fp)
 8017118:	18800536 	bltu	r3,r2,8017130 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801711c:	e0fff717 	ldw	r3,-36(fp)
 8017120:	e0bff817 	ldw	r2,-32(fp)
 8017124:	1885c83a 	sub	r2,r3,r2
 8017128:	e0bff615 	stw	r2,-40(fp)
 801712c:	00000406 	br	8017140 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8017130:	00c20004 	movi	r3,2048
 8017134:	e0bff817 	ldw	r2,-32(fp)
 8017138:	1885c83a 	sub	r2,r3,r2
 801713c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8017140:	e0bff617 	ldw	r2,-40(fp)
 8017144:	10001e26 	beq	r2,zero,80171c0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8017148:	e0fffe17 	ldw	r3,-8(fp)
 801714c:	e0bff617 	ldw	r2,-40(fp)
 8017150:	1880022e 	bgeu	r3,r2,801715c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8017154:	e0bffe17 	ldw	r2,-8(fp)
 8017158:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801715c:	e0bffc17 	ldw	r2,-16(fp)
 8017160:	10c00e04 	addi	r3,r2,56
 8017164:	e0bff817 	ldw	r2,-32(fp)
 8017168:	1885883a 	add	r2,r3,r2
 801716c:	e1bff617 	ldw	r6,-40(fp)
 8017170:	100b883a 	mov	r5,r2
 8017174:	e13ff517 	ldw	r4,-44(fp)
 8017178:	8011d380 	call	8011d38 <memcpy>
      ptr   += n;
 801717c:	e0fff517 	ldw	r3,-44(fp)
 8017180:	e0bff617 	ldw	r2,-40(fp)
 8017184:	1885883a 	add	r2,r3,r2
 8017188:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801718c:	e0fffe17 	ldw	r3,-8(fp)
 8017190:	e0bff617 	ldw	r2,-40(fp)
 8017194:	1885c83a 	sub	r2,r3,r2
 8017198:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801719c:	e0fff817 	ldw	r3,-32(fp)
 80171a0:	e0bff617 	ldw	r2,-40(fp)
 80171a4:	1885883a 	add	r2,r3,r2
 80171a8:	10c1ffcc 	andi	r3,r2,2047
 80171ac:	e0bffc17 	ldw	r2,-16(fp)
 80171b0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80171b4:	e0bffe17 	ldw	r2,-8(fp)
 80171b8:	00bfcf16 	blt	zero,r2,80170f8 <__alt_data_end+0xfc0170f8>
 80171bc:	00000106 	br	80171c4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80171c0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80171c4:	e0fff517 	ldw	r3,-44(fp)
 80171c8:	e0bffd17 	ldw	r2,-12(fp)
 80171cc:	1880141e 	bne	r3,r2,8017220 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80171d0:	e0bfff17 	ldw	r2,-4(fp)
 80171d4:	1090000c 	andi	r2,r2,16384
 80171d8:	1000131e 	bne	r2,zero,8017228 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80171dc:	0001883a 	nop
 80171e0:	e0bffc17 	ldw	r2,-16(fp)
 80171e4:	10c00a17 	ldw	r3,40(r2)
 80171e8:	e0bff717 	ldw	r2,-36(fp)
 80171ec:	1880051e 	bne	r3,r2,8017204 <altera_avalon_jtag_uart_read+0x138>
 80171f0:	e0bffc17 	ldw	r2,-16(fp)
 80171f4:	10c00917 	ldw	r3,36(r2)
 80171f8:	e0bffc17 	ldw	r2,-16(fp)
 80171fc:	10800117 	ldw	r2,4(r2)
 8017200:	18bff736 	bltu	r3,r2,80171e0 <__alt_data_end+0xfc0171e0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8017204:	e0bffc17 	ldw	r2,-16(fp)
 8017208:	10c00a17 	ldw	r3,40(r2)
 801720c:	e0bff717 	ldw	r2,-36(fp)
 8017210:	18800726 	beq	r3,r2,8017230 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8017214:	e0bffe17 	ldw	r2,-8(fp)
 8017218:	00bfb716 	blt	zero,r2,80170f8 <__alt_data_end+0xfc0170f8>
 801721c:	00000506 	br	8017234 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8017220:	0001883a 	nop
 8017224:	00000306 	br	8017234 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8017228:	0001883a 	nop
 801722c:	00000106 	br	8017234 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8017230:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8017234:	e0fff517 	ldw	r3,-44(fp)
 8017238:	e0bffd17 	ldw	r2,-12(fp)
 801723c:	18801826 	beq	r3,r2,80172a0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017240:	0005303a 	rdctl	r2,status
 8017244:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017248:	e0fffb17 	ldw	r3,-20(fp)
 801724c:	00bfff84 	movi	r2,-2
 8017250:	1884703a 	and	r2,r3,r2
 8017254:	1001703a 	wrctl	status,r2
  
  return context;
 8017258:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801725c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8017260:	e0bffc17 	ldw	r2,-16(fp)
 8017264:	10800817 	ldw	r2,32(r2)
 8017268:	10c00054 	ori	r3,r2,1
 801726c:	e0bffc17 	ldw	r2,-16(fp)
 8017270:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017274:	e0bffc17 	ldw	r2,-16(fp)
 8017278:	10800017 	ldw	r2,0(r2)
 801727c:	10800104 	addi	r2,r2,4
 8017280:	1007883a 	mov	r3,r2
 8017284:	e0bffc17 	ldw	r2,-16(fp)
 8017288:	10800817 	ldw	r2,32(r2)
 801728c:	18800035 	stwio	r2,0(r3)
 8017290:	e0bffa17 	ldw	r2,-24(fp)
 8017294:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017298:	e0bff917 	ldw	r2,-28(fp)
 801729c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80172a0:	e0fff517 	ldw	r3,-44(fp)
 80172a4:	e0bffd17 	ldw	r2,-12(fp)
 80172a8:	18800426 	beq	r3,r2,80172bc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80172ac:	e0fff517 	ldw	r3,-44(fp)
 80172b0:	e0bffd17 	ldw	r2,-12(fp)
 80172b4:	1885c83a 	sub	r2,r3,r2
 80172b8:	00000606 	br	80172d4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80172bc:	e0bfff17 	ldw	r2,-4(fp)
 80172c0:	1090000c 	andi	r2,r2,16384
 80172c4:	10000226 	beq	r2,zero,80172d0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80172c8:	00bffd44 	movi	r2,-11
 80172cc:	00000106 	br	80172d4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80172d0:	00bffec4 	movi	r2,-5
}
 80172d4:	e037883a 	mov	sp,fp
 80172d8:	dfc00117 	ldw	ra,4(sp)
 80172dc:	df000017 	ldw	fp,0(sp)
 80172e0:	dec00204 	addi	sp,sp,8
 80172e4:	f800283a 	ret

080172e8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80172e8:	defff304 	addi	sp,sp,-52
 80172ec:	dfc00c15 	stw	ra,48(sp)
 80172f0:	df000b15 	stw	fp,44(sp)
 80172f4:	df000b04 	addi	fp,sp,44
 80172f8:	e13ffc15 	stw	r4,-16(fp)
 80172fc:	e17ffd15 	stw	r5,-12(fp)
 8017300:	e1bffe15 	stw	r6,-8(fp)
 8017304:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8017308:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801730c:	e0bffd17 	ldw	r2,-12(fp)
 8017310:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8017314:	00003706 	br	80173f4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8017318:	e0bffc17 	ldw	r2,-16(fp)
 801731c:	10800c17 	ldw	r2,48(r2)
 8017320:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 8017324:	e0bffc17 	ldw	r2,-16(fp)
 8017328:	10800d17 	ldw	r2,52(r2)
 801732c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8017330:	e0fff917 	ldw	r3,-28(fp)
 8017334:	e0bff517 	ldw	r2,-44(fp)
 8017338:	1880062e 	bgeu	r3,r2,8017354 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801733c:	e0fff517 	ldw	r3,-44(fp)
 8017340:	e0bff917 	ldw	r2,-28(fp)
 8017344:	1885c83a 	sub	r2,r3,r2
 8017348:	10bfffc4 	addi	r2,r2,-1
 801734c:	e0bff615 	stw	r2,-40(fp)
 8017350:	00000b06 	br	8017380 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8017354:	e0bff517 	ldw	r2,-44(fp)
 8017358:	10000526 	beq	r2,zero,8017370 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801735c:	00c20004 	movi	r3,2048
 8017360:	e0bff917 	ldw	r2,-28(fp)
 8017364:	1885c83a 	sub	r2,r3,r2
 8017368:	e0bff615 	stw	r2,-40(fp)
 801736c:	00000406 	br	8017380 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8017370:	00c1ffc4 	movi	r3,2047
 8017374:	e0bff917 	ldw	r2,-28(fp)
 8017378:	1885c83a 	sub	r2,r3,r2
 801737c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8017380:	e0bff617 	ldw	r2,-40(fp)
 8017384:	10001e26 	beq	r2,zero,8017400 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8017388:	e0fffe17 	ldw	r3,-8(fp)
 801738c:	e0bff617 	ldw	r2,-40(fp)
 8017390:	1880022e 	bgeu	r3,r2,801739c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8017394:	e0bffe17 	ldw	r2,-8(fp)
 8017398:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801739c:	e0bffc17 	ldw	r2,-16(fp)
 80173a0:	10c20e04 	addi	r3,r2,2104
 80173a4:	e0bff917 	ldw	r2,-28(fp)
 80173a8:	1885883a 	add	r2,r3,r2
 80173ac:	e1bff617 	ldw	r6,-40(fp)
 80173b0:	e17ffd17 	ldw	r5,-12(fp)
 80173b4:	1009883a 	mov	r4,r2
 80173b8:	8011d380 	call	8011d38 <memcpy>
      ptr   += n;
 80173bc:	e0fffd17 	ldw	r3,-12(fp)
 80173c0:	e0bff617 	ldw	r2,-40(fp)
 80173c4:	1885883a 	add	r2,r3,r2
 80173c8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80173cc:	e0fffe17 	ldw	r3,-8(fp)
 80173d0:	e0bff617 	ldw	r2,-40(fp)
 80173d4:	1885c83a 	sub	r2,r3,r2
 80173d8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80173dc:	e0fff917 	ldw	r3,-28(fp)
 80173e0:	e0bff617 	ldw	r2,-40(fp)
 80173e4:	1885883a 	add	r2,r3,r2
 80173e8:	10c1ffcc 	andi	r3,r2,2047
 80173ec:	e0bffc17 	ldw	r2,-16(fp)
 80173f0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80173f4:	e0bffe17 	ldw	r2,-8(fp)
 80173f8:	00bfc716 	blt	zero,r2,8017318 <__alt_data_end+0xfc017318>
 80173fc:	00000106 	br	8017404 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 8017400:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017404:	0005303a 	rdctl	r2,status
 8017408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801740c:	e0fffb17 	ldw	r3,-20(fp)
 8017410:	00bfff84 	movi	r2,-2
 8017414:	1884703a 	and	r2,r3,r2
 8017418:	1001703a 	wrctl	status,r2
  
  return context;
 801741c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8017420:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8017424:	e0bffc17 	ldw	r2,-16(fp)
 8017428:	10800817 	ldw	r2,32(r2)
 801742c:	10c00094 	ori	r3,r2,2
 8017430:	e0bffc17 	ldw	r2,-16(fp)
 8017434:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8017438:	e0bffc17 	ldw	r2,-16(fp)
 801743c:	10800017 	ldw	r2,0(r2)
 8017440:	10800104 	addi	r2,r2,4
 8017444:	1007883a 	mov	r3,r2
 8017448:	e0bffc17 	ldw	r2,-16(fp)
 801744c:	10800817 	ldw	r2,32(r2)
 8017450:	18800035 	stwio	r2,0(r3)
 8017454:	e0bffa17 	ldw	r2,-24(fp)
 8017458:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801745c:	e0bff817 	ldw	r2,-32(fp)
 8017460:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8017464:	e0bffe17 	ldw	r2,-8(fp)
 8017468:	0080100e 	bge	zero,r2,80174ac <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 801746c:	e0bfff17 	ldw	r2,-4(fp)
 8017470:	1090000c 	andi	r2,r2,16384
 8017474:	1000101e 	bne	r2,zero,80174b8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8017478:	0001883a 	nop
 801747c:	e0bffc17 	ldw	r2,-16(fp)
 8017480:	10c00d17 	ldw	r3,52(r2)
 8017484:	e0bff517 	ldw	r2,-44(fp)
 8017488:	1880051e 	bne	r3,r2,80174a0 <altera_avalon_jtag_uart_write+0x1b8>
 801748c:	e0bffc17 	ldw	r2,-16(fp)
 8017490:	10c00917 	ldw	r3,36(r2)
 8017494:	e0bffc17 	ldw	r2,-16(fp)
 8017498:	10800117 	ldw	r2,4(r2)
 801749c:	18bff736 	bltu	r3,r2,801747c <__alt_data_end+0xfc01747c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 80174a0:	e0bffc17 	ldw	r2,-16(fp)
 80174a4:	10800917 	ldw	r2,36(r2)
 80174a8:	1000051e 	bne	r2,zero,80174c0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80174ac:	e0bffe17 	ldw	r2,-8(fp)
 80174b0:	00bfd016 	blt	zero,r2,80173f4 <__alt_data_end+0xfc0173f4>
 80174b4:	00000306 	br	80174c4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80174b8:	0001883a 	nop
 80174bc:	00000106 	br	80174c4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80174c0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80174c4:	e0fffd17 	ldw	r3,-12(fp)
 80174c8:	e0bff717 	ldw	r2,-36(fp)
 80174cc:	18800426 	beq	r3,r2,80174e0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80174d0:	e0fffd17 	ldw	r3,-12(fp)
 80174d4:	e0bff717 	ldw	r2,-36(fp)
 80174d8:	1885c83a 	sub	r2,r3,r2
 80174dc:	00000606 	br	80174f8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80174e0:	e0bfff17 	ldw	r2,-4(fp)
 80174e4:	1090000c 	andi	r2,r2,16384
 80174e8:	10000226 	beq	r2,zero,80174f4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80174ec:	00bffd44 	movi	r2,-11
 80174f0:	00000106 	br	80174f8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80174f4:	00bffec4 	movi	r2,-5
}
 80174f8:	e037883a 	mov	sp,fp
 80174fc:	dfc00117 	ldw	ra,4(sp)
 8017500:	df000017 	ldw	fp,0(sp)
 8017504:	dec00204 	addi	sp,sp,8
 8017508:	f800283a 	ret

0801750c <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 801750c:	defff404 	addi	sp,sp,-48
 8017510:	df000b15 	stw	fp,44(sp)
 8017514:	df000b04 	addi	fp,sp,44
 8017518:	e13ffc15 	stw	r4,-16(fp)
 801751c:	e17ffd15 	stw	r5,-12(fp)
 8017520:	e1bffe15 	stw	r6,-8(fp)
 8017524:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8017528:	e0ffff17 	ldw	r3,-4(fp)
 801752c:	e0bffe17 	ldw	r2,-8(fp)
 8017530:	1885883a 	add	r2,r3,r2
 8017534:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8017538:	e0c00217 	ldw	r3,8(fp)
 801753c:	e0800117 	ldw	r2,4(fp)
 8017540:	1885883a 	add	r2,r3,r2
 8017544:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8017548:	e0800117 	ldw	r2,4(fp)
 801754c:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8017550:	e0bffe17 	ldw	r2,-8(fp)
 8017554:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8017558:	00800044 	movi	r2,1
 801755c:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8017560:	e0bffc17 	ldw	r2,-16(fp)
 8017564:	10800504 	addi	r2,r2,20
 8017568:	1009883a 	mov	r4,r2
 801756c:	00c00044 	movi	r3,1
 8017570:	e0bffd17 	ldw	r2,-12(fp)
 8017574:	1884983a 	sll	r2,r3,r2
 8017578:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 801757c:	e0800317 	ldw	r2,12(fp)
 8017580:	1080008c 	andi	r2,r2,2
 8017584:	1000051e 	bne	r2,zero,801759c <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8017588:	e0bffc17 	ldw	r2,-16(fp)
 801758c:	10800304 	addi	r2,r2,12
 8017590:	1007883a 	mov	r3,r2
 8017594:	00810004 	movi	r2,1024
 8017598:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 801759c:	e0bffc17 	ldw	r2,-16(fp)
 80175a0:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 80175a4:	e0bffc17 	ldw	r2,-16(fp)
 80175a8:	10800204 	addi	r2,r2,8
 80175ac:	10800037 	ldwio	r2,0(r2)
 80175b0:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80175b4:	e0bffa17 	ldw	r2,-24(fp)
 80175b8:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80175bc:	10000226 	beq	r2,zero,80175c8 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80175c0:	e0bff717 	ldw	r2,-36(fp)
 80175c4:	1000031e 	bne	r2,zero,80175d4 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80175c8:	e0bffa17 	ldw	r2,-24(fp)
 80175cc:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80175d0:	103ff426 	beq	r2,zero,80175a4 <__alt_data_end+0xfc0175a4>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 80175d4:	e0bffa17 	ldw	r2,-24(fp)
 80175d8:	1080100c 	andi	r2,r2,64
 80175dc:	10001e26 	beq	r2,zero,8017658 <alt_avalon_spi_command+0x14c>
 80175e0:	e0bff717 	ldw	r2,-36(fp)
 80175e4:	00801c0e 	bge	zero,r2,8017658 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 80175e8:	e0bff717 	ldw	r2,-36(fp)
 80175ec:	10bfffc4 	addi	r2,r2,-1
 80175f0:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 80175f4:	e0ffff17 	ldw	r3,-4(fp)
 80175f8:	e0bff817 	ldw	r2,-32(fp)
 80175fc:	18800a2e 	bgeu	r3,r2,8017628 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8017600:	e0bffc17 	ldw	r2,-16(fp)
 8017604:	10800104 	addi	r2,r2,4
 8017608:	1009883a 	mov	r4,r2
 801760c:	e0bfff17 	ldw	r2,-4(fp)
 8017610:	10c00044 	addi	r3,r2,1
 8017614:	e0ffff15 	stw	r3,-4(fp)
 8017618:	10800003 	ldbu	r2,0(r2)
 801761c:	10803fcc 	andi	r2,r2,255
 8017620:	20800035 	stwio	r2,0(r4)
 8017624:	00000c06 	br	8017658 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8017628:	e0bff517 	ldw	r2,-44(fp)
 801762c:	10000826 	beq	r2,zero,8017650 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8017630:	e0bff517 	ldw	r2,-44(fp)
 8017634:	10bfffc4 	addi	r2,r2,-1
 8017638:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 801763c:	e0bffc17 	ldw	r2,-16(fp)
 8017640:	10800104 	addi	r2,r2,4
 8017644:	0007883a 	mov	r3,zero
 8017648:	10c00035 	stwio	r3,0(r2)
 801764c:	00000206 	br	8017658 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8017650:	00bf0004 	movi	r2,-1024
 8017654:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8017658:	e0bffa17 	ldw	r2,-24(fp)
 801765c:	1080200c 	andi	r2,r2,128
 8017660:	103fd026 	beq	r2,zero,80175a4 <__alt_data_end+0xfc0175a4>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8017664:	e0bffc17 	ldw	r2,-16(fp)
 8017668:	10800037 	ldwio	r2,0(r2)
 801766c:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8017670:	e0bff617 	ldw	r2,-40(fp)
 8017674:	10000426 	beq	r2,zero,8017688 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8017678:	e0bff617 	ldw	r2,-40(fp)
 801767c:	10bfffc4 	addi	r2,r2,-1
 8017680:	e0bff615 	stw	r2,-40(fp)
 8017684:	00000506 	br	801769c <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8017688:	e0800217 	ldw	r2,8(fp)
 801768c:	10c00044 	addi	r3,r2,1
 8017690:	e0c00215 	stw	r3,8(fp)
 8017694:	e0fffb17 	ldw	r3,-20(fp)
 8017698:	10c00005 	stb	r3,0(r2)
      credits++;
 801769c:	e0bff717 	ldw	r2,-36(fp)
 80176a0:	10800044 	addi	r2,r2,1
 80176a4:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 80176a8:	e0bff617 	ldw	r2,-40(fp)
 80176ac:	103fbd1e 	bne	r2,zero,80175a4 <__alt_data_end+0xfc0175a4>
 80176b0:	e0c00217 	ldw	r3,8(fp)
 80176b4:	e0bff917 	ldw	r2,-28(fp)
 80176b8:	18bfba1e 	bne	r3,r2,80175a4 <__alt_data_end+0xfc0175a4>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 80176bc:	e0bffc17 	ldw	r2,-16(fp)
 80176c0:	10800204 	addi	r2,r2,8
 80176c4:	10800037 	ldwio	r2,0(r2)
 80176c8:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 80176cc:	e0bffa17 	ldw	r2,-24(fp)
 80176d0:	1080080c 	andi	r2,r2,32
 80176d4:	103ff926 	beq	r2,zero,80176bc <__alt_data_end+0xfc0176bc>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 80176d8:	e0800317 	ldw	r2,12(fp)
 80176dc:	1080004c 	andi	r2,r2,1
 80176e0:	1000041e 	bne	r2,zero,80176f4 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 80176e4:	e0bffc17 	ldw	r2,-16(fp)
 80176e8:	10800304 	addi	r2,r2,12
 80176ec:	0007883a 	mov	r3,zero
 80176f0:	10c00035 	stwio	r3,0(r2)

  return read_length;
 80176f4:	e0800117 	ldw	r2,4(fp)
}
 80176f8:	e037883a 	mov	sp,fp
 80176fc:	df000017 	ldw	fp,0(sp)
 8017700:	dec00104 	addi	sp,sp,4
 8017704:	f800283a 	ret

08017708 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8017708:	defffa04 	addi	sp,sp,-24
 801770c:	dfc00515 	stw	ra,20(sp)
 8017710:	df000415 	stw	fp,16(sp)
 8017714:	df000404 	addi	fp,sp,16
 8017718:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801771c:	0007883a 	mov	r3,zero
 8017720:	e0bfff17 	ldw	r2,-4(fp)
 8017724:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8017728:	e0bfff17 	ldw	r2,-4(fp)
 801772c:	10800104 	addi	r2,r2,4
 8017730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017734:	0005303a 	rdctl	r2,status
 8017738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801773c:	e0fffd17 	ldw	r3,-12(fp)
 8017740:	00bfff84 	movi	r2,-2
 8017744:	1884703a 	and	r2,r3,r2
 8017748:	1001703a 	wrctl	status,r2
  
  return context;
 801774c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8017750:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8017754:	80167600 	call	8016760 <alt_tick>
 8017758:	e0bffc17 	ldw	r2,-16(fp)
 801775c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017760:	e0bffe17 	ldw	r2,-8(fp)
 8017764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8017768:	0001883a 	nop
 801776c:	e037883a 	mov	sp,fp
 8017770:	dfc00117 	ldw	ra,4(sp)
 8017774:	df000017 	ldw	fp,0(sp)
 8017778:	dec00204 	addi	sp,sp,8
 801777c:	f800283a 	ret

08017780 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8017780:	defff804 	addi	sp,sp,-32
 8017784:	dfc00715 	stw	ra,28(sp)
 8017788:	df000615 	stw	fp,24(sp)
 801778c:	df000604 	addi	fp,sp,24
 8017790:	e13ffc15 	stw	r4,-16(fp)
 8017794:	e17ffd15 	stw	r5,-12(fp)
 8017798:	e1bffe15 	stw	r6,-8(fp)
 801779c:	e1ffff15 	stw	r7,-4(fp)
 80177a0:	e0bfff17 	ldw	r2,-4(fp)
 80177a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80177a8:	d0a6f817 	ldw	r2,-25632(gp)
 80177ac:	1000021e 	bne	r2,zero,80177b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80177b0:	e0bffb17 	ldw	r2,-20(fp)
 80177b4:	d0a6f815 	stw	r2,-25632(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80177b8:	e0bffc17 	ldw	r2,-16(fp)
 80177bc:	10800104 	addi	r2,r2,4
 80177c0:	00c001c4 	movi	r3,7
 80177c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80177c8:	d8000015 	stw	zero,0(sp)
 80177cc:	e1fffc17 	ldw	r7,-16(fp)
 80177d0:	01820074 	movhi	r6,2049
 80177d4:	319dc204 	addi	r6,r6,30472
 80177d8:	e17ffe17 	ldw	r5,-8(fp)
 80177dc:	e13ffd17 	ldw	r4,-12(fp)
 80177e0:	8017c600 	call	8017c60 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80177e4:	0001883a 	nop
 80177e8:	e037883a 	mov	sp,fp
 80177ec:	dfc00117 	ldw	ra,4(sp)
 80177f0:	df000017 	ldw	fp,0(sp)
 80177f4:	dec00204 	addi	sp,sp,8
 80177f8:	f800283a 	ret

080177fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80177fc:	defff504 	addi	sp,sp,-44
 8017800:	df000a15 	stw	fp,40(sp)
 8017804:	df000a04 	addi	fp,sp,40
 8017808:	e13ffc15 	stw	r4,-16(fp)
 801780c:	e17ffd15 	stw	r5,-12(fp)
 8017810:	e1bffe15 	stw	r6,-8(fp)
 8017814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8017818:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801781c:	d0a6f817 	ldw	r2,-25632(gp)
  
  if (alt_ticks_per_second ())
 8017820:	10003c26 	beq	r2,zero,8017914 <alt_alarm_start+0x118>
  {
    if (alarm)
 8017824:	e0bffc17 	ldw	r2,-16(fp)
 8017828:	10003826 	beq	r2,zero,801790c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 801782c:	e0bffc17 	ldw	r2,-16(fp)
 8017830:	e0fffe17 	ldw	r3,-8(fp)
 8017834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8017838:	e0bffc17 	ldw	r2,-16(fp)
 801783c:	e0ffff17 	ldw	r3,-4(fp)
 8017840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017844:	0005303a 	rdctl	r2,status
 8017848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801784c:	e0fff917 	ldw	r3,-28(fp)
 8017850:	00bfff84 	movi	r2,-2
 8017854:	1884703a 	and	r2,r3,r2
 8017858:	1001703a 	wrctl	status,r2
  
  return context;
 801785c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8017860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8017864:	d0a6f917 	ldw	r2,-25628(gp)
      
      current_nticks = alt_nticks();
 8017868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801786c:	e0fffd17 	ldw	r3,-12(fp)
 8017870:	e0bff617 	ldw	r2,-40(fp)
 8017874:	1885883a 	add	r2,r3,r2
 8017878:	10c00044 	addi	r3,r2,1
 801787c:	e0bffc17 	ldw	r2,-16(fp)
 8017880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8017884:	e0bffc17 	ldw	r2,-16(fp)
 8017888:	10c00217 	ldw	r3,8(r2)
 801788c:	e0bff617 	ldw	r2,-40(fp)
 8017890:	1880042e 	bgeu	r3,r2,80178a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8017894:	e0bffc17 	ldw	r2,-16(fp)
 8017898:	00c00044 	movi	r3,1
 801789c:	10c00405 	stb	r3,16(r2)
 80178a0:	00000206 	br	80178ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80178a4:	e0bffc17 	ldw	r2,-16(fp)
 80178a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80178ac:	e0bffc17 	ldw	r2,-16(fp)
 80178b0:	d0e01504 	addi	r3,gp,-32684
 80178b4:	e0fffa15 	stw	r3,-24(fp)
 80178b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80178bc:	e0bffb17 	ldw	r2,-20(fp)
 80178c0:	e0fffa17 	ldw	r3,-24(fp)
 80178c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80178c8:	e0bffa17 	ldw	r2,-24(fp)
 80178cc:	10c00017 	ldw	r3,0(r2)
 80178d0:	e0bffb17 	ldw	r2,-20(fp)
 80178d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80178d8:	e0bffa17 	ldw	r2,-24(fp)
 80178dc:	10800017 	ldw	r2,0(r2)
 80178e0:	e0fffb17 	ldw	r3,-20(fp)
 80178e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80178e8:	e0bffa17 	ldw	r2,-24(fp)
 80178ec:	e0fffb17 	ldw	r3,-20(fp)
 80178f0:	10c00015 	stw	r3,0(r2)
 80178f4:	e0bff817 	ldw	r2,-32(fp)
 80178f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80178fc:	e0bff717 	ldw	r2,-36(fp)
 8017900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8017904:	0005883a 	mov	r2,zero
 8017908:	00000306 	br	8017918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 801790c:	00bffa84 	movi	r2,-22
 8017910:	00000106 	br	8017918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8017914:	00bfde84 	movi	r2,-134
  }
}
 8017918:	e037883a 	mov	sp,fp
 801791c:	df000017 	ldw	fp,0(sp)
 8017920:	dec00104 	addi	sp,sp,4
 8017924:	f800283a 	ret

08017928 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8017928:	defffa04 	addi	sp,sp,-24
 801792c:	dfc00515 	stw	ra,20(sp)
 8017930:	df000415 	stw	fp,16(sp)
 8017934:	df000404 	addi	fp,sp,16
 8017938:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 801793c:	00800244 	movi	r2,9
 8017940:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8017944:	014003f4 	movhi	r5,15
 8017948:	29509004 	addi	r5,r5,16960
 801794c:	e13ffd17 	ldw	r4,-12(fp)
 8017950:	8007f540 	call	8007f54 <__mulsi3>
 8017954:	100b883a 	mov	r5,r2
 8017958:	0100bef4 	movhi	r4,763
 801795c:	213c2004 	addi	r4,r4,-3968
 8017960:	8007e980 	call	8007e98 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8017964:	100b883a 	mov	r5,r2
 8017968:	01200034 	movhi	r4,32768
 801796c:	213fffc4 	addi	r4,r4,-1
 8017970:	8007e980 	call	8007e98 <__udivsi3>
 8017974:	100b883a 	mov	r5,r2
 8017978:	e13fff17 	ldw	r4,-4(fp)
 801797c:	8007e980 	call	8007e98 <__udivsi3>
 8017980:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8017984:	e0bffe17 	ldw	r2,-8(fp)
 8017988:	10002a26 	beq	r2,zero,8017a34 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 801798c:	e03ffc15 	stw	zero,-16(fp)
 8017990:	00001706 	br	80179f0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8017994:	00a00034 	movhi	r2,32768
 8017998:	10bfffc4 	addi	r2,r2,-1
 801799c:	10bfffc4 	addi	r2,r2,-1
 80179a0:	103ffe1e 	bne	r2,zero,801799c <__alt_data_end+0xfc01799c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 80179a4:	014003f4 	movhi	r5,15
 80179a8:	29509004 	addi	r5,r5,16960
 80179ac:	e13ffd17 	ldw	r4,-12(fp)
 80179b0:	8007f540 	call	8007f54 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 80179b4:	100b883a 	mov	r5,r2
 80179b8:	0100bef4 	movhi	r4,763
 80179bc:	213c2004 	addi	r4,r4,-3968
 80179c0:	8007e980 	call	8007e98 <__udivsi3>
 80179c4:	100b883a 	mov	r5,r2
 80179c8:	01200034 	movhi	r4,32768
 80179cc:	213fffc4 	addi	r4,r4,-1
 80179d0:	8007e980 	call	8007e98 <__udivsi3>
 80179d4:	1007883a 	mov	r3,r2
 80179d8:	e0bfff17 	ldw	r2,-4(fp)
 80179dc:	10c5c83a 	sub	r2,r2,r3
 80179e0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 80179e4:	e0bffc17 	ldw	r2,-16(fp)
 80179e8:	10800044 	addi	r2,r2,1
 80179ec:	e0bffc15 	stw	r2,-16(fp)
 80179f0:	e0fffc17 	ldw	r3,-16(fp)
 80179f4:	e0bffe17 	ldw	r2,-8(fp)
 80179f8:	18bfe616 	blt	r3,r2,8017994 <__alt_data_end+0xfc017994>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80179fc:	014003f4 	movhi	r5,15
 8017a00:	29509004 	addi	r5,r5,16960
 8017a04:	e13ffd17 	ldw	r4,-12(fp)
 8017a08:	8007f540 	call	8007f54 <__mulsi3>
 8017a0c:	100b883a 	mov	r5,r2
 8017a10:	0100bef4 	movhi	r4,763
 8017a14:	213c2004 	addi	r4,r4,-3968
 8017a18:	8007e980 	call	8007e98 <__udivsi3>
 8017a1c:	e17fff17 	ldw	r5,-4(fp)
 8017a20:	1009883a 	mov	r4,r2
 8017a24:	8007f540 	call	8007f54 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017a28:	10bfffc4 	addi	r2,r2,-1
 8017a2c:	103ffe1e 	bne	r2,zero,8017a28 <__alt_data_end+0xfc017a28>
 8017a30:	00000d06 	br	8017a68 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8017a34:	014003f4 	movhi	r5,15
 8017a38:	29509004 	addi	r5,r5,16960
 8017a3c:	e13ffd17 	ldw	r4,-12(fp)
 8017a40:	8007f540 	call	8007f54 <__mulsi3>
 8017a44:	100b883a 	mov	r5,r2
 8017a48:	0100bef4 	movhi	r4,763
 8017a4c:	213c2004 	addi	r4,r4,-3968
 8017a50:	8007e980 	call	8007e98 <__udivsi3>
 8017a54:	e17fff17 	ldw	r5,-4(fp)
 8017a58:	1009883a 	mov	r4,r2
 8017a5c:	8007f540 	call	8007f54 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8017a60:	10bfffc4 	addi	r2,r2,-1
 8017a64:	00bffe16 	blt	zero,r2,8017a60 <__alt_data_end+0xfc017a60>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8017a68:	0005883a 	mov	r2,zero
}
 8017a6c:	e037883a 	mov	sp,fp
 8017a70:	dfc00117 	ldw	ra,4(sp)
 8017a74:	df000017 	ldw	fp,0(sp)
 8017a78:	dec00204 	addi	sp,sp,8
 8017a7c:	f800283a 	ret

08017a80 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8017a80:	deffff04 	addi	sp,sp,-4
 8017a84:	df000015 	stw	fp,0(sp)
 8017a88:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8017a8c:	0001883a 	nop
 8017a90:	e037883a 	mov	sp,fp
 8017a94:	df000017 	ldw	fp,0(sp)
 8017a98:	dec00104 	addi	sp,sp,4
 8017a9c:	f800283a 	ret

08017aa0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017aa0:	defffe04 	addi	sp,sp,-8
 8017aa4:	dfc00115 	stw	ra,4(sp)
 8017aa8:	df000015 	stw	fp,0(sp)
 8017aac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017ab0:	d0a01317 	ldw	r2,-32692(gp)
 8017ab4:	10000326 	beq	r2,zero,8017ac4 <alt_get_errno+0x24>
 8017ab8:	d0a01317 	ldw	r2,-32692(gp)
 8017abc:	103ee83a 	callr	r2
 8017ac0:	00000106 	br	8017ac8 <alt_get_errno+0x28>
 8017ac4:	d0a6f404 	addi	r2,gp,-25648
}
 8017ac8:	e037883a 	mov	sp,fp
 8017acc:	dfc00117 	ldw	ra,4(sp)
 8017ad0:	df000017 	ldw	fp,0(sp)
 8017ad4:	dec00204 	addi	sp,sp,8
 8017ad8:	f800283a 	ret

08017adc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8017adc:	defffa04 	addi	sp,sp,-24
 8017ae0:	dfc00515 	stw	ra,20(sp)
 8017ae4:	df000415 	stw	fp,16(sp)
 8017ae8:	df000404 	addi	fp,sp,16
 8017aec:	e13ffe15 	stw	r4,-8(fp)
 8017af0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8017af4:	e0bffe17 	ldw	r2,-8(fp)
 8017af8:	10000326 	beq	r2,zero,8017b08 <alt_dev_llist_insert+0x2c>
 8017afc:	e0bffe17 	ldw	r2,-8(fp)
 8017b00:	10800217 	ldw	r2,8(r2)
 8017b04:	1000061e 	bne	r2,zero,8017b20 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8017b08:	8017aa00 	call	8017aa0 <alt_get_errno>
 8017b0c:	1007883a 	mov	r3,r2
 8017b10:	00800584 	movi	r2,22
 8017b14:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8017b18:	00bffa84 	movi	r2,-22
 8017b1c:	00001306 	br	8017b6c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8017b20:	e0bffe17 	ldw	r2,-8(fp)
 8017b24:	e0ffff17 	ldw	r3,-4(fp)
 8017b28:	e0fffc15 	stw	r3,-16(fp)
 8017b2c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8017b30:	e0bffd17 	ldw	r2,-12(fp)
 8017b34:	e0fffc17 	ldw	r3,-16(fp)
 8017b38:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8017b3c:	e0bffc17 	ldw	r2,-16(fp)
 8017b40:	10c00017 	ldw	r3,0(r2)
 8017b44:	e0bffd17 	ldw	r2,-12(fp)
 8017b48:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8017b4c:	e0bffc17 	ldw	r2,-16(fp)
 8017b50:	10800017 	ldw	r2,0(r2)
 8017b54:	e0fffd17 	ldw	r3,-12(fp)
 8017b58:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8017b5c:	e0bffc17 	ldw	r2,-16(fp)
 8017b60:	e0fffd17 	ldw	r3,-12(fp)
 8017b64:	10c00015 	stw	r3,0(r2)

  return 0;  
 8017b68:	0005883a 	mov	r2,zero
}
 8017b6c:	e037883a 	mov	sp,fp
 8017b70:	dfc00117 	ldw	ra,4(sp)
 8017b74:	df000017 	ldw	fp,0(sp)
 8017b78:	dec00204 	addi	sp,sp,8
 8017b7c:	f800283a 	ret

08017b80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8017b80:	defffd04 	addi	sp,sp,-12
 8017b84:	dfc00215 	stw	ra,8(sp)
 8017b88:	df000115 	stw	fp,4(sp)
 8017b8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017b90:	008200b4 	movhi	r2,2050
 8017b94:	10a26404 	addi	r2,r2,-30320
 8017b98:	e0bfff15 	stw	r2,-4(fp)
 8017b9c:	00000606 	br	8017bb8 <_do_ctors+0x38>
        (*ctor) (); 
 8017ba0:	e0bfff17 	ldw	r2,-4(fp)
 8017ba4:	10800017 	ldw	r2,0(r2)
 8017ba8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8017bac:	e0bfff17 	ldw	r2,-4(fp)
 8017bb0:	10bfff04 	addi	r2,r2,-4
 8017bb4:	e0bfff15 	stw	r2,-4(fp)
 8017bb8:	e0ffff17 	ldw	r3,-4(fp)
 8017bbc:	008200b4 	movhi	r2,2050
 8017bc0:	10a26504 	addi	r2,r2,-30316
 8017bc4:	18bff62e 	bgeu	r3,r2,8017ba0 <__alt_data_end+0xfc017ba0>
        (*ctor) (); 
}
 8017bc8:	0001883a 	nop
 8017bcc:	e037883a 	mov	sp,fp
 8017bd0:	dfc00117 	ldw	ra,4(sp)
 8017bd4:	df000017 	ldw	fp,0(sp)
 8017bd8:	dec00204 	addi	sp,sp,8
 8017bdc:	f800283a 	ret

08017be0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8017be0:	defffd04 	addi	sp,sp,-12
 8017be4:	dfc00215 	stw	ra,8(sp)
 8017be8:	df000115 	stw	fp,4(sp)
 8017bec:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017bf0:	008200b4 	movhi	r2,2050
 8017bf4:	10a26404 	addi	r2,r2,-30320
 8017bf8:	e0bfff15 	stw	r2,-4(fp)
 8017bfc:	00000606 	br	8017c18 <_do_dtors+0x38>
        (*dtor) (); 
 8017c00:	e0bfff17 	ldw	r2,-4(fp)
 8017c04:	10800017 	ldw	r2,0(r2)
 8017c08:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017c0c:	e0bfff17 	ldw	r2,-4(fp)
 8017c10:	10bfff04 	addi	r2,r2,-4
 8017c14:	e0bfff15 	stw	r2,-4(fp)
 8017c18:	e0ffff17 	ldw	r3,-4(fp)
 8017c1c:	008200b4 	movhi	r2,2050
 8017c20:	10a26504 	addi	r2,r2,-30316
 8017c24:	18bff62e 	bgeu	r3,r2,8017c00 <__alt_data_end+0xfc017c00>
        (*dtor) (); 
}
 8017c28:	0001883a 	nop
 8017c2c:	e037883a 	mov	sp,fp
 8017c30:	dfc00117 	ldw	ra,4(sp)
 8017c34:	df000017 	ldw	fp,0(sp)
 8017c38:	dec00204 	addi	sp,sp,8
 8017c3c:	f800283a 	ret

08017c40 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8017c40:	deffff04 	addi	sp,sp,-4
 8017c44:	df000015 	stw	fp,0(sp)
 8017c48:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8017c4c:	0001883a 	nop
 8017c50:	e037883a 	mov	sp,fp
 8017c54:	df000017 	ldw	fp,0(sp)
 8017c58:	dec00104 	addi	sp,sp,4
 8017c5c:	f800283a 	ret

08017c60 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017c60:	defff904 	addi	sp,sp,-28
 8017c64:	dfc00615 	stw	ra,24(sp)
 8017c68:	df000515 	stw	fp,20(sp)
 8017c6c:	df000504 	addi	fp,sp,20
 8017c70:	e13ffc15 	stw	r4,-16(fp)
 8017c74:	e17ffd15 	stw	r5,-12(fp)
 8017c78:	e1bffe15 	stw	r6,-8(fp)
 8017c7c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8017c80:	e0800217 	ldw	r2,8(fp)
 8017c84:	d8800015 	stw	r2,0(sp)
 8017c88:	e1ffff17 	ldw	r7,-4(fp)
 8017c8c:	e1bffe17 	ldw	r6,-8(fp)
 8017c90:	e17ffd17 	ldw	r5,-12(fp)
 8017c94:	e13ffc17 	ldw	r4,-16(fp)
 8017c98:	8017e100 	call	8017e10 <alt_iic_isr_register>
}  
 8017c9c:	e037883a 	mov	sp,fp
 8017ca0:	dfc00117 	ldw	ra,4(sp)
 8017ca4:	df000017 	ldw	fp,0(sp)
 8017ca8:	dec00204 	addi	sp,sp,8
 8017cac:	f800283a 	ret

08017cb0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8017cb0:	defff904 	addi	sp,sp,-28
 8017cb4:	df000615 	stw	fp,24(sp)
 8017cb8:	df000604 	addi	fp,sp,24
 8017cbc:	e13ffe15 	stw	r4,-8(fp)
 8017cc0:	e17fff15 	stw	r5,-4(fp)
 8017cc4:	e0bfff17 	ldw	r2,-4(fp)
 8017cc8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017ccc:	0005303a 	rdctl	r2,status
 8017cd0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017cd4:	e0fffb17 	ldw	r3,-20(fp)
 8017cd8:	00bfff84 	movi	r2,-2
 8017cdc:	1884703a 	and	r2,r3,r2
 8017ce0:	1001703a 	wrctl	status,r2
  
  return context;
 8017ce4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017ce8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8017cec:	00c00044 	movi	r3,1
 8017cf0:	e0bffa17 	ldw	r2,-24(fp)
 8017cf4:	1884983a 	sll	r2,r3,r2
 8017cf8:	1007883a 	mov	r3,r2
 8017cfc:	d0a6fa17 	ldw	r2,-25624(gp)
 8017d00:	1884b03a 	or	r2,r3,r2
 8017d04:	d0a6fa15 	stw	r2,-25624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017d08:	d0a6fa17 	ldw	r2,-25624(gp)
 8017d0c:	100170fa 	wrctl	ienable,r2
 8017d10:	e0bffc17 	ldw	r2,-16(fp)
 8017d14:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017d18:	e0bffd17 	ldw	r2,-12(fp)
 8017d1c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017d20:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8017d24:	0001883a 	nop
}
 8017d28:	e037883a 	mov	sp,fp
 8017d2c:	df000017 	ldw	fp,0(sp)
 8017d30:	dec00104 	addi	sp,sp,4
 8017d34:	f800283a 	ret

08017d38 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017d38:	defff904 	addi	sp,sp,-28
 8017d3c:	df000615 	stw	fp,24(sp)
 8017d40:	df000604 	addi	fp,sp,24
 8017d44:	e13ffe15 	stw	r4,-8(fp)
 8017d48:	e17fff15 	stw	r5,-4(fp)
 8017d4c:	e0bfff17 	ldw	r2,-4(fp)
 8017d50:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017d54:	0005303a 	rdctl	r2,status
 8017d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017d5c:	e0fffb17 	ldw	r3,-20(fp)
 8017d60:	00bfff84 	movi	r2,-2
 8017d64:	1884703a 	and	r2,r3,r2
 8017d68:	1001703a 	wrctl	status,r2
  
  return context;
 8017d6c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017d70:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8017d74:	00c00044 	movi	r3,1
 8017d78:	e0bffa17 	ldw	r2,-24(fp)
 8017d7c:	1884983a 	sll	r2,r3,r2
 8017d80:	0084303a 	nor	r2,zero,r2
 8017d84:	1007883a 	mov	r3,r2
 8017d88:	d0a6fa17 	ldw	r2,-25624(gp)
 8017d8c:	1884703a 	and	r2,r3,r2
 8017d90:	d0a6fa15 	stw	r2,-25624(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017d94:	d0a6fa17 	ldw	r2,-25624(gp)
 8017d98:	100170fa 	wrctl	ienable,r2
 8017d9c:	e0bffc17 	ldw	r2,-16(fp)
 8017da0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017da4:	e0bffd17 	ldw	r2,-12(fp)
 8017da8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017dac:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8017db0:	0001883a 	nop
}
 8017db4:	e037883a 	mov	sp,fp
 8017db8:	df000017 	ldw	fp,0(sp)
 8017dbc:	dec00104 	addi	sp,sp,4
 8017dc0:	f800283a 	ret

08017dc4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8017dc4:	defffc04 	addi	sp,sp,-16
 8017dc8:	df000315 	stw	fp,12(sp)
 8017dcc:	df000304 	addi	fp,sp,12
 8017dd0:	e13ffe15 	stw	r4,-8(fp)
 8017dd4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8017dd8:	000530fa 	rdctl	r2,ienable
 8017ddc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8017de0:	00c00044 	movi	r3,1
 8017de4:	e0bfff17 	ldw	r2,-4(fp)
 8017de8:	1884983a 	sll	r2,r3,r2
 8017dec:	1007883a 	mov	r3,r2
 8017df0:	e0bffd17 	ldw	r2,-12(fp)
 8017df4:	1884703a 	and	r2,r3,r2
 8017df8:	1004c03a 	cmpne	r2,r2,zero
 8017dfc:	10803fcc 	andi	r2,r2,255
}
 8017e00:	e037883a 	mov	sp,fp
 8017e04:	df000017 	ldw	fp,0(sp)
 8017e08:	dec00104 	addi	sp,sp,4
 8017e0c:	f800283a 	ret

08017e10 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017e10:	defff504 	addi	sp,sp,-44
 8017e14:	dfc00a15 	stw	ra,40(sp)
 8017e18:	df000915 	stw	fp,36(sp)
 8017e1c:	df000904 	addi	fp,sp,36
 8017e20:	e13ffc15 	stw	r4,-16(fp)
 8017e24:	e17ffd15 	stw	r5,-12(fp)
 8017e28:	e1bffe15 	stw	r6,-8(fp)
 8017e2c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8017e30:	00bffa84 	movi	r2,-22
 8017e34:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017e38:	e0bffd17 	ldw	r2,-12(fp)
 8017e3c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8017e40:	e0bff817 	ldw	r2,-32(fp)
 8017e44:	10800808 	cmpgei	r2,r2,32
 8017e48:	1000271e 	bne	r2,zero,8017ee8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017e4c:	0005303a 	rdctl	r2,status
 8017e50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017e54:	e0fffb17 	ldw	r3,-20(fp)
 8017e58:	00bfff84 	movi	r2,-2
 8017e5c:	1884703a 	and	r2,r3,r2
 8017e60:	1001703a 	wrctl	status,r2
  
  return context;
 8017e64:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017e68:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8017e6c:	008211f4 	movhi	r2,2119
 8017e70:	109fdc04 	addi	r2,r2,32624
 8017e74:	e0fff817 	ldw	r3,-32(fp)
 8017e78:	180690fa 	slli	r3,r3,3
 8017e7c:	10c5883a 	add	r2,r2,r3
 8017e80:	e0fffe17 	ldw	r3,-8(fp)
 8017e84:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017e88:	008211f4 	movhi	r2,2119
 8017e8c:	109fdc04 	addi	r2,r2,32624
 8017e90:	e0fff817 	ldw	r3,-32(fp)
 8017e94:	180690fa 	slli	r3,r3,3
 8017e98:	10c5883a 	add	r2,r2,r3
 8017e9c:	10800104 	addi	r2,r2,4
 8017ea0:	e0ffff17 	ldw	r3,-4(fp)
 8017ea4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8017ea8:	e0bffe17 	ldw	r2,-8(fp)
 8017eac:	10000526 	beq	r2,zero,8017ec4 <alt_iic_isr_register+0xb4>
 8017eb0:	e0bff817 	ldw	r2,-32(fp)
 8017eb4:	100b883a 	mov	r5,r2
 8017eb8:	e13ffc17 	ldw	r4,-16(fp)
 8017ebc:	8017cb00 	call	8017cb0 <alt_ic_irq_enable>
 8017ec0:	00000406 	br	8017ed4 <alt_iic_isr_register+0xc4>
 8017ec4:	e0bff817 	ldw	r2,-32(fp)
 8017ec8:	100b883a 	mov	r5,r2
 8017ecc:	e13ffc17 	ldw	r4,-16(fp)
 8017ed0:	8017d380 	call	8017d38 <alt_ic_irq_disable>
 8017ed4:	e0bff715 	stw	r2,-36(fp)
 8017ed8:	e0bffa17 	ldw	r2,-24(fp)
 8017edc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017ee0:	e0bff917 	ldw	r2,-28(fp)
 8017ee4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8017ee8:	e0bff717 	ldw	r2,-36(fp)
}
 8017eec:	e037883a 	mov	sp,fp
 8017ef0:	dfc00117 	ldw	ra,4(sp)
 8017ef4:	df000017 	ldw	fp,0(sp)
 8017ef8:	dec00204 	addi	sp,sp,8
 8017efc:	f800283a 	ret

08017f00 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8017f00:	defff804 	addi	sp,sp,-32
 8017f04:	dfc00715 	stw	ra,28(sp)
 8017f08:	df000615 	stw	fp,24(sp)
 8017f0c:	dc000515 	stw	r16,20(sp)
 8017f10:	df000604 	addi	fp,sp,24
 8017f14:	e13ffb15 	stw	r4,-20(fp)
 8017f18:	e17ffc15 	stw	r5,-16(fp)
 8017f1c:	e1bffd15 	stw	r6,-12(fp)
 8017f20:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 8017f24:	e1bffe17 	ldw	r6,-8(fp)
 8017f28:	e17ffd17 	ldw	r5,-12(fp)
 8017f2c:	e13ffc17 	ldw	r4,-16(fp)
 8017f30:	80181880 	call	8018188 <open>
 8017f34:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8017f38:	e0bffa17 	ldw	r2,-24(fp)
 8017f3c:	10002216 	blt	r2,zero,8017fc8 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8017f40:	04020d74 	movhi	r16,2101
 8017f44:	84240204 	addi	r16,r16,-28664
 8017f48:	e0bffa17 	ldw	r2,-24(fp)
 8017f4c:	01400304 	movi	r5,12
 8017f50:	1009883a 	mov	r4,r2
 8017f54:	8007f540 	call	8007f54 <__mulsi3>
 8017f58:	8085883a 	add	r2,r16,r2
 8017f5c:	10c00017 	ldw	r3,0(r2)
 8017f60:	e0bffb17 	ldw	r2,-20(fp)
 8017f64:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8017f68:	04020d74 	movhi	r16,2101
 8017f6c:	84240204 	addi	r16,r16,-28664
 8017f70:	e0bffa17 	ldw	r2,-24(fp)
 8017f74:	01400304 	movi	r5,12
 8017f78:	1009883a 	mov	r4,r2
 8017f7c:	8007f540 	call	8007f54 <__mulsi3>
 8017f80:	8085883a 	add	r2,r16,r2
 8017f84:	10800104 	addi	r2,r2,4
 8017f88:	10c00017 	ldw	r3,0(r2)
 8017f8c:	e0bffb17 	ldw	r2,-20(fp)
 8017f90:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8017f94:	04020d74 	movhi	r16,2101
 8017f98:	84240204 	addi	r16,r16,-28664
 8017f9c:	e0bffa17 	ldw	r2,-24(fp)
 8017fa0:	01400304 	movi	r5,12
 8017fa4:	1009883a 	mov	r4,r2
 8017fa8:	8007f540 	call	8007f54 <__mulsi3>
 8017fac:	8085883a 	add	r2,r16,r2
 8017fb0:	10800204 	addi	r2,r2,8
 8017fb4:	10c00017 	ldw	r3,0(r2)
 8017fb8:	e0bffb17 	ldw	r2,-20(fp)
 8017fbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8017fc0:	e13ffa17 	ldw	r4,-24(fp)
 8017fc4:	80165900 	call	8016590 <alt_release_fd>
  }
} 
 8017fc8:	0001883a 	nop
 8017fcc:	e6ffff04 	addi	sp,fp,-4
 8017fd0:	dfc00217 	ldw	ra,8(sp)
 8017fd4:	df000117 	ldw	fp,4(sp)
 8017fd8:	dc000017 	ldw	r16,0(sp)
 8017fdc:	dec00304 	addi	sp,sp,12
 8017fe0:	f800283a 	ret

08017fe4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8017fe4:	defffb04 	addi	sp,sp,-20
 8017fe8:	dfc00415 	stw	ra,16(sp)
 8017fec:	df000315 	stw	fp,12(sp)
 8017ff0:	df000304 	addi	fp,sp,12
 8017ff4:	e13ffd15 	stw	r4,-12(fp)
 8017ff8:	e17ffe15 	stw	r5,-8(fp)
 8017ffc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8018000:	01c07fc4 	movi	r7,511
 8018004:	01800044 	movi	r6,1
 8018008:	e17ffd17 	ldw	r5,-12(fp)
 801800c:	01020d74 	movhi	r4,2101
 8018010:	21240504 	addi	r4,r4,-28652
 8018014:	8017f000 	call	8017f00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8018018:	01c07fc4 	movi	r7,511
 801801c:	000d883a 	mov	r6,zero
 8018020:	e17ffe17 	ldw	r5,-8(fp)
 8018024:	01020d74 	movhi	r4,2101
 8018028:	21240204 	addi	r4,r4,-28664
 801802c:	8017f000 	call	8017f00 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8018030:	01c07fc4 	movi	r7,511
 8018034:	01800044 	movi	r6,1
 8018038:	e17fff17 	ldw	r5,-4(fp)
 801803c:	01020d74 	movhi	r4,2101
 8018040:	21240804 	addi	r4,r4,-28640
 8018044:	8017f000 	call	8017f00 <alt_open_fd>
}  
 8018048:	0001883a 	nop
 801804c:	e037883a 	mov	sp,fp
 8018050:	dfc00117 	ldw	ra,4(sp)
 8018054:	df000017 	ldw	fp,0(sp)
 8018058:	dec00204 	addi	sp,sp,8
 801805c:	f800283a 	ret

08018060 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018060:	defffe04 	addi	sp,sp,-8
 8018064:	dfc00115 	stw	ra,4(sp)
 8018068:	df000015 	stw	fp,0(sp)
 801806c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018070:	d0a01317 	ldw	r2,-32692(gp)
 8018074:	10000326 	beq	r2,zero,8018084 <alt_get_errno+0x24>
 8018078:	d0a01317 	ldw	r2,-32692(gp)
 801807c:	103ee83a 	callr	r2
 8018080:	00000106 	br	8018088 <alt_get_errno+0x28>
 8018084:	d0a6f404 	addi	r2,gp,-25648
}
 8018088:	e037883a 	mov	sp,fp
 801808c:	dfc00117 	ldw	ra,4(sp)
 8018090:	df000017 	ldw	fp,0(sp)
 8018094:	dec00204 	addi	sp,sp,8
 8018098:	f800283a 	ret

0801809c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801809c:	defffb04 	addi	sp,sp,-20
 80180a0:	dfc00415 	stw	ra,16(sp)
 80180a4:	df000315 	stw	fp,12(sp)
 80180a8:	dc000215 	stw	r16,8(sp)
 80180ac:	df000304 	addi	fp,sp,12
 80180b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80180b4:	e0bffe17 	ldw	r2,-8(fp)
 80180b8:	10800217 	ldw	r2,8(r2)
 80180bc:	10d00034 	orhi	r3,r2,16384
 80180c0:	e0bffe17 	ldw	r2,-8(fp)
 80180c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80180c8:	e03ffd15 	stw	zero,-12(fp)
 80180cc:	00002306 	br	801815c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80180d0:	04020d74 	movhi	r16,2101
 80180d4:	84240204 	addi	r16,r16,-28664
 80180d8:	e0bffd17 	ldw	r2,-12(fp)
 80180dc:	01400304 	movi	r5,12
 80180e0:	1009883a 	mov	r4,r2
 80180e4:	8007f540 	call	8007f54 <__mulsi3>
 80180e8:	8085883a 	add	r2,r16,r2
 80180ec:	10c00017 	ldw	r3,0(r2)
 80180f0:	e0bffe17 	ldw	r2,-8(fp)
 80180f4:	10800017 	ldw	r2,0(r2)
 80180f8:	1880151e 	bne	r3,r2,8018150 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80180fc:	04020d74 	movhi	r16,2101
 8018100:	84240204 	addi	r16,r16,-28664
 8018104:	e0bffd17 	ldw	r2,-12(fp)
 8018108:	01400304 	movi	r5,12
 801810c:	1009883a 	mov	r4,r2
 8018110:	8007f540 	call	8007f54 <__mulsi3>
 8018114:	8085883a 	add	r2,r16,r2
 8018118:	10800204 	addi	r2,r2,8
 801811c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8018120:	10000b0e 	bge	r2,zero,8018150 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8018124:	01400304 	movi	r5,12
 8018128:	e13ffd17 	ldw	r4,-12(fp)
 801812c:	8007f540 	call	8007f54 <__mulsi3>
 8018130:	1007883a 	mov	r3,r2
 8018134:	00820d74 	movhi	r2,2101
 8018138:	10a40204 	addi	r2,r2,-28664
 801813c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8018140:	e0bffe17 	ldw	r2,-8(fp)
 8018144:	18800226 	beq	r3,r2,8018150 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8018148:	00bffcc4 	movi	r2,-13
 801814c:	00000806 	br	8018170 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8018150:	e0bffd17 	ldw	r2,-12(fp)
 8018154:	10800044 	addi	r2,r2,1
 8018158:	e0bffd15 	stw	r2,-12(fp)
 801815c:	d0a01217 	ldw	r2,-32696(gp)
 8018160:	1007883a 	mov	r3,r2
 8018164:	e0bffd17 	ldw	r2,-12(fp)
 8018168:	18bfd92e 	bgeu	r3,r2,80180d0 <__alt_data_end+0xfc0180d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801816c:	0005883a 	mov	r2,zero
}
 8018170:	e6ffff04 	addi	sp,fp,-4
 8018174:	dfc00217 	ldw	ra,8(sp)
 8018178:	df000117 	ldw	fp,4(sp)
 801817c:	dc000017 	ldw	r16,0(sp)
 8018180:	dec00304 	addi	sp,sp,12
 8018184:	f800283a 	ret

08018188 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8018188:	defff604 	addi	sp,sp,-40
 801818c:	dfc00915 	stw	ra,36(sp)
 8018190:	df000815 	stw	fp,32(sp)
 8018194:	df000804 	addi	fp,sp,32
 8018198:	e13ffd15 	stw	r4,-12(fp)
 801819c:	e17ffe15 	stw	r5,-8(fp)
 80181a0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80181a4:	00bfffc4 	movi	r2,-1
 80181a8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80181ac:	00bffb44 	movi	r2,-19
 80181b0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80181b4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80181b8:	d1601004 	addi	r5,gp,-32704
 80181bc:	e13ffd17 	ldw	r4,-12(fp)
 80181c0:	80183080 	call	8018308 <alt_find_dev>
 80181c4:	e0bff815 	stw	r2,-32(fp)
 80181c8:	e0bff817 	ldw	r2,-32(fp)
 80181cc:	1000051e 	bne	r2,zero,80181e4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80181d0:	e13ffd17 	ldw	r4,-12(fp)
 80181d4:	80183980 	call	8018398 <alt_find_file>
 80181d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80181dc:	00800044 	movi	r2,1
 80181e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80181e4:	e0bff817 	ldw	r2,-32(fp)
 80181e8:	10002b26 	beq	r2,zero,8018298 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80181ec:	e13ff817 	ldw	r4,-32(fp)
 80181f0:	80184a00 	call	80184a0 <alt_get_fd>
 80181f4:	e0bff915 	stw	r2,-28(fp)
 80181f8:	e0bff917 	ldw	r2,-28(fp)
 80181fc:	1000030e 	bge	r2,zero,801820c <open+0x84>
    {
      status = index;
 8018200:	e0bff917 	ldw	r2,-28(fp)
 8018204:	e0bffa15 	stw	r2,-24(fp)
 8018208:	00002506 	br	80182a0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 801820c:	01400304 	movi	r5,12
 8018210:	e13ff917 	ldw	r4,-28(fp)
 8018214:	8007f540 	call	8007f54 <__mulsi3>
 8018218:	1007883a 	mov	r3,r2
 801821c:	00820d74 	movhi	r2,2101
 8018220:	10a40204 	addi	r2,r2,-28664
 8018224:	1885883a 	add	r2,r3,r2
 8018228:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801822c:	e0fffe17 	ldw	r3,-8(fp)
 8018230:	00900034 	movhi	r2,16384
 8018234:	10bfffc4 	addi	r2,r2,-1
 8018238:	1886703a 	and	r3,r3,r2
 801823c:	e0bffc17 	ldw	r2,-16(fp)
 8018240:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8018244:	e0bffb17 	ldw	r2,-20(fp)
 8018248:	1000051e 	bne	r2,zero,8018260 <open+0xd8>
 801824c:	e13ffc17 	ldw	r4,-16(fp)
 8018250:	801809c0 	call	801809c <alt_file_locked>
 8018254:	e0bffa15 	stw	r2,-24(fp)
 8018258:	e0bffa17 	ldw	r2,-24(fp)
 801825c:	10001016 	blt	r2,zero,80182a0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8018260:	e0bff817 	ldw	r2,-32(fp)
 8018264:	10800317 	ldw	r2,12(r2)
 8018268:	10000826 	beq	r2,zero,801828c <open+0x104>
 801826c:	e0bff817 	ldw	r2,-32(fp)
 8018270:	10800317 	ldw	r2,12(r2)
 8018274:	e1ffff17 	ldw	r7,-4(fp)
 8018278:	e1bffe17 	ldw	r6,-8(fp)
 801827c:	e17ffd17 	ldw	r5,-12(fp)
 8018280:	e13ffc17 	ldw	r4,-16(fp)
 8018284:	103ee83a 	callr	r2
 8018288:	00000106 	br	8018290 <open+0x108>
 801828c:	0005883a 	mov	r2,zero
 8018290:	e0bffa15 	stw	r2,-24(fp)
 8018294:	00000206 	br	80182a0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8018298:	00bffb44 	movi	r2,-19
 801829c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80182a0:	e0bffa17 	ldw	r2,-24(fp)
 80182a4:	1000090e 	bge	r2,zero,80182cc <open+0x144>
  {
    alt_release_fd (index);  
 80182a8:	e13ff917 	ldw	r4,-28(fp)
 80182ac:	80165900 	call	8016590 <alt_release_fd>
    ALT_ERRNO = -status;
 80182b0:	80180600 	call	8018060 <alt_get_errno>
 80182b4:	1007883a 	mov	r3,r2
 80182b8:	e0bffa17 	ldw	r2,-24(fp)
 80182bc:	0085c83a 	sub	r2,zero,r2
 80182c0:	18800015 	stw	r2,0(r3)
    return -1;
 80182c4:	00bfffc4 	movi	r2,-1
 80182c8:	00000106 	br	80182d0 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80182cc:	e0bff917 	ldw	r2,-28(fp)
}
 80182d0:	e037883a 	mov	sp,fp
 80182d4:	dfc00117 	ldw	ra,4(sp)
 80182d8:	df000017 	ldw	fp,0(sp)
 80182dc:	dec00204 	addi	sp,sp,8
 80182e0:	f800283a 	ret

080182e4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80182e4:	deffff04 	addi	sp,sp,-4
 80182e8:	df000015 	stw	fp,0(sp)
 80182ec:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80182f0:	000170fa 	wrctl	ienable,zero
}
 80182f4:	0001883a 	nop
 80182f8:	e037883a 	mov	sp,fp
 80182fc:	df000017 	ldw	fp,0(sp)
 8018300:	dec00104 	addi	sp,sp,4
 8018304:	f800283a 	ret

08018308 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8018308:	defffa04 	addi	sp,sp,-24
 801830c:	dfc00515 	stw	ra,20(sp)
 8018310:	df000415 	stw	fp,16(sp)
 8018314:	df000404 	addi	fp,sp,16
 8018318:	e13ffe15 	stw	r4,-8(fp)
 801831c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8018320:	e0bfff17 	ldw	r2,-4(fp)
 8018324:	10800017 	ldw	r2,0(r2)
 8018328:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801832c:	e13ffe17 	ldw	r4,-8(fp)
 8018330:	800c2840 	call	800c284 <strlen>
 8018334:	10800044 	addi	r2,r2,1
 8018338:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801833c:	00000d06 	br	8018374 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8018340:	e0bffc17 	ldw	r2,-16(fp)
 8018344:	10800217 	ldw	r2,8(r2)
 8018348:	e0fffd17 	ldw	r3,-12(fp)
 801834c:	180d883a 	mov	r6,r3
 8018350:	e17ffe17 	ldw	r5,-8(fp)
 8018354:	1009883a 	mov	r4,r2
 8018358:	801864c0 	call	801864c <memcmp>
 801835c:	1000021e 	bne	r2,zero,8018368 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8018360:	e0bffc17 	ldw	r2,-16(fp)
 8018364:	00000706 	br	8018384 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8018368:	e0bffc17 	ldw	r2,-16(fp)
 801836c:	10800017 	ldw	r2,0(r2)
 8018370:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8018374:	e0fffc17 	ldw	r3,-16(fp)
 8018378:	e0bfff17 	ldw	r2,-4(fp)
 801837c:	18bff01e 	bne	r3,r2,8018340 <__alt_data_end+0xfc018340>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8018380:	0005883a 	mov	r2,zero
}
 8018384:	e037883a 	mov	sp,fp
 8018388:	dfc00117 	ldw	ra,4(sp)
 801838c:	df000017 	ldw	fp,0(sp)
 8018390:	dec00204 	addi	sp,sp,8
 8018394:	f800283a 	ret

08018398 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8018398:	defffb04 	addi	sp,sp,-20
 801839c:	dfc00415 	stw	ra,16(sp)
 80183a0:	df000315 	stw	fp,12(sp)
 80183a4:	df000304 	addi	fp,sp,12
 80183a8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80183ac:	d0a00e17 	ldw	r2,-32712(gp)
 80183b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80183b4:	00003106 	br	801847c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80183b8:	e0bffd17 	ldw	r2,-12(fp)
 80183bc:	10800217 	ldw	r2,8(r2)
 80183c0:	1009883a 	mov	r4,r2
 80183c4:	800c2840 	call	800c284 <strlen>
 80183c8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80183cc:	e0bffd17 	ldw	r2,-12(fp)
 80183d0:	10c00217 	ldw	r3,8(r2)
 80183d4:	e0bffe17 	ldw	r2,-8(fp)
 80183d8:	10bfffc4 	addi	r2,r2,-1
 80183dc:	1885883a 	add	r2,r3,r2
 80183e0:	10800003 	ldbu	r2,0(r2)
 80183e4:	10803fcc 	andi	r2,r2,255
 80183e8:	1080201c 	xori	r2,r2,128
 80183ec:	10bfe004 	addi	r2,r2,-128
 80183f0:	10800bd8 	cmpnei	r2,r2,47
 80183f4:	1000031e 	bne	r2,zero,8018404 <alt_find_file+0x6c>
    {
      len -= 1;
 80183f8:	e0bffe17 	ldw	r2,-8(fp)
 80183fc:	10bfffc4 	addi	r2,r2,-1
 8018400:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8018404:	e0bffe17 	ldw	r2,-8(fp)
 8018408:	e0ffff17 	ldw	r3,-4(fp)
 801840c:	1885883a 	add	r2,r3,r2
 8018410:	10800003 	ldbu	r2,0(r2)
 8018414:	10803fcc 	andi	r2,r2,255
 8018418:	1080201c 	xori	r2,r2,128
 801841c:	10bfe004 	addi	r2,r2,-128
 8018420:	10800be0 	cmpeqi	r2,r2,47
 8018424:	1000081e 	bne	r2,zero,8018448 <alt_find_file+0xb0>
 8018428:	e0bffe17 	ldw	r2,-8(fp)
 801842c:	e0ffff17 	ldw	r3,-4(fp)
 8018430:	1885883a 	add	r2,r3,r2
 8018434:	10800003 	ldbu	r2,0(r2)
 8018438:	10803fcc 	andi	r2,r2,255
 801843c:	1080201c 	xori	r2,r2,128
 8018440:	10bfe004 	addi	r2,r2,-128
 8018444:	10000a1e 	bne	r2,zero,8018470 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8018448:	e0bffd17 	ldw	r2,-12(fp)
 801844c:	10800217 	ldw	r2,8(r2)
 8018450:	e0fffe17 	ldw	r3,-8(fp)
 8018454:	180d883a 	mov	r6,r3
 8018458:	e17fff17 	ldw	r5,-4(fp)
 801845c:	1009883a 	mov	r4,r2
 8018460:	801864c0 	call	801864c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8018464:	1000021e 	bne	r2,zero,8018470 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8018468:	e0bffd17 	ldw	r2,-12(fp)
 801846c:	00000706 	br	801848c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8018470:	e0bffd17 	ldw	r2,-12(fp)
 8018474:	10800017 	ldw	r2,0(r2)
 8018478:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801847c:	e0fffd17 	ldw	r3,-12(fp)
 8018480:	d0a00e04 	addi	r2,gp,-32712
 8018484:	18bfcc1e 	bne	r3,r2,80183b8 <__alt_data_end+0xfc0183b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8018488:	0005883a 	mov	r2,zero
}
 801848c:	e037883a 	mov	sp,fp
 8018490:	dfc00117 	ldw	ra,4(sp)
 8018494:	df000017 	ldw	fp,0(sp)
 8018498:	dec00204 	addi	sp,sp,8
 801849c:	f800283a 	ret

080184a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80184a0:	defffa04 	addi	sp,sp,-24
 80184a4:	dfc00515 	stw	ra,20(sp)
 80184a8:	df000415 	stw	fp,16(sp)
 80184ac:	dc000315 	stw	r16,12(sp)
 80184b0:	df000404 	addi	fp,sp,16
 80184b4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80184b8:	00bffa04 	movi	r2,-24
 80184bc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80184c0:	e03ffc15 	stw	zero,-16(fp)
 80184c4:	00001d06 	br	801853c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80184c8:	04020d74 	movhi	r16,2101
 80184cc:	84240204 	addi	r16,r16,-28664
 80184d0:	e0bffc17 	ldw	r2,-16(fp)
 80184d4:	01400304 	movi	r5,12
 80184d8:	1009883a 	mov	r4,r2
 80184dc:	8007f540 	call	8007f54 <__mulsi3>
 80184e0:	8085883a 	add	r2,r16,r2
 80184e4:	10800017 	ldw	r2,0(r2)
 80184e8:	1000111e 	bne	r2,zero,8018530 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80184ec:	04020d74 	movhi	r16,2101
 80184f0:	84240204 	addi	r16,r16,-28664
 80184f4:	e0bffc17 	ldw	r2,-16(fp)
 80184f8:	01400304 	movi	r5,12
 80184fc:	1009883a 	mov	r4,r2
 8018500:	8007f540 	call	8007f54 <__mulsi3>
 8018504:	8085883a 	add	r2,r16,r2
 8018508:	e0fffe17 	ldw	r3,-8(fp)
 801850c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8018510:	d0e01217 	ldw	r3,-32696(gp)
 8018514:	e0bffc17 	ldw	r2,-16(fp)
 8018518:	1880020e 	bge	r3,r2,8018524 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 801851c:	e0bffc17 	ldw	r2,-16(fp)
 8018520:	d0a01215 	stw	r2,-32696(gp)
      }
      rc = i;
 8018524:	e0bffc17 	ldw	r2,-16(fp)
 8018528:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 801852c:	00000606 	br	8018548 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8018530:	e0bffc17 	ldw	r2,-16(fp)
 8018534:	10800044 	addi	r2,r2,1
 8018538:	e0bffc15 	stw	r2,-16(fp)
 801853c:	e0bffc17 	ldw	r2,-16(fp)
 8018540:	10800810 	cmplti	r2,r2,32
 8018544:	103fe01e 	bne	r2,zero,80184c8 <__alt_data_end+0xfc0184c8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8018548:	e0bffd17 	ldw	r2,-12(fp)
}
 801854c:	e6ffff04 	addi	sp,fp,-4
 8018550:	dfc00217 	ldw	ra,8(sp)
 8018554:	df000117 	ldw	fp,4(sp)
 8018558:	dc000017 	ldw	r16,0(sp)
 801855c:	dec00304 	addi	sp,sp,12
 8018560:	f800283a 	ret

08018564 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8018564:	defffe04 	addi	sp,sp,-8
 8018568:	df000115 	stw	fp,4(sp)
 801856c:	df000104 	addi	fp,sp,4
 8018570:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8018574:	e0bfff17 	ldw	r2,-4(fp)
 8018578:	10bffe84 	addi	r2,r2,-6
 801857c:	10c00428 	cmpgeui	r3,r2,16
 8018580:	18001a1e 	bne	r3,zero,80185ec <alt_exception_cause_generated_bad_addr+0x88>
 8018584:	100690ba 	slli	r3,r2,2
 8018588:	008200b4 	movhi	r2,2050
 801858c:	10a16704 	addi	r2,r2,-31332
 8018590:	1885883a 	add	r2,r3,r2
 8018594:	10800017 	ldw	r2,0(r2)
 8018598:	1000683a 	jmp	r2
 801859c:	080185dc 	xori	zero,at,1559
 80185a0:	080185dc 	xori	zero,at,1559
 80185a4:	080185ec 	andhi	zero,at,1559
 80185a8:	080185ec 	andhi	zero,at,1559
 80185ac:	080185ec 	andhi	zero,at,1559
 80185b0:	080185dc 	xori	zero,at,1559
 80185b4:	080185e4 	muli	zero,at,1559
 80185b8:	080185ec 	andhi	zero,at,1559
 80185bc:	080185dc 	xori	zero,at,1559
 80185c0:	080185dc 	xori	zero,at,1559
 80185c4:	080185ec 	andhi	zero,at,1559
 80185c8:	080185dc 	xori	zero,at,1559
 80185cc:	080185e4 	muli	zero,at,1559
 80185d0:	080185ec 	andhi	zero,at,1559
 80185d4:	080185ec 	andhi	zero,at,1559
 80185d8:	080185dc 	xori	zero,at,1559
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80185dc:	00800044 	movi	r2,1
 80185e0:	00000306 	br	80185f0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80185e4:	0005883a 	mov	r2,zero
 80185e8:	00000106 	br	80185f0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80185ec:	0005883a 	mov	r2,zero
  }
}
 80185f0:	e037883a 	mov	sp,fp
 80185f4:	df000017 	ldw	fp,0(sp)
 80185f8:	dec00104 	addi	sp,sp,4
 80185fc:	f800283a 	ret

08018600 <atexit>:
 8018600:	200b883a 	mov	r5,r4
 8018604:	000f883a 	mov	r7,zero
 8018608:	000d883a 	mov	r6,zero
 801860c:	0009883a 	mov	r4,zero
 8018610:	80186c81 	jmpi	80186c8 <__register_exitproc>

08018614 <exit>:
 8018614:	defffe04 	addi	sp,sp,-8
 8018618:	000b883a 	mov	r5,zero
 801861c:	dc000015 	stw	r16,0(sp)
 8018620:	dfc00115 	stw	ra,4(sp)
 8018624:	2021883a 	mov	r16,r4
 8018628:	80187e00 	call	80187e0 <__call_exitprocs>
 801862c:	00820d74 	movhi	r2,2101
 8018630:	10a88204 	addi	r2,r2,-24056
 8018634:	11000017 	ldw	r4,0(r2)
 8018638:	20800f17 	ldw	r2,60(r4)
 801863c:	10000126 	beq	r2,zero,8018644 <exit+0x30>
 8018640:	103ee83a 	callr	r2
 8018644:	8009883a 	mov	r4,r16
 8018648:	80189600 	call	8018960 <_exit>

0801864c <memcmp>:
 801864c:	01c000c4 	movi	r7,3
 8018650:	3980192e 	bgeu	r7,r6,80186b8 <memcmp+0x6c>
 8018654:	2144b03a 	or	r2,r4,r5
 8018658:	11c4703a 	and	r2,r2,r7
 801865c:	10000f26 	beq	r2,zero,801869c <memcmp+0x50>
 8018660:	20800003 	ldbu	r2,0(r4)
 8018664:	28c00003 	ldbu	r3,0(r5)
 8018668:	10c0151e 	bne	r2,r3,80186c0 <memcmp+0x74>
 801866c:	31bfff84 	addi	r6,r6,-2
 8018670:	01ffffc4 	movi	r7,-1
 8018674:	00000406 	br	8018688 <memcmp+0x3c>
 8018678:	20800003 	ldbu	r2,0(r4)
 801867c:	28c00003 	ldbu	r3,0(r5)
 8018680:	31bfffc4 	addi	r6,r6,-1
 8018684:	10c00e1e 	bne	r2,r3,80186c0 <memcmp+0x74>
 8018688:	21000044 	addi	r4,r4,1
 801868c:	29400044 	addi	r5,r5,1
 8018690:	31fff91e 	bne	r6,r7,8018678 <__alt_data_end+0xfc018678>
 8018694:	0005883a 	mov	r2,zero
 8018698:	f800283a 	ret
 801869c:	20c00017 	ldw	r3,0(r4)
 80186a0:	28800017 	ldw	r2,0(r5)
 80186a4:	18bfee1e 	bne	r3,r2,8018660 <__alt_data_end+0xfc018660>
 80186a8:	31bfff04 	addi	r6,r6,-4
 80186ac:	21000104 	addi	r4,r4,4
 80186b0:	29400104 	addi	r5,r5,4
 80186b4:	39bff936 	bltu	r7,r6,801869c <__alt_data_end+0xfc01869c>
 80186b8:	303fe91e 	bne	r6,zero,8018660 <__alt_data_end+0xfc018660>
 80186bc:	003ff506 	br	8018694 <__alt_data_end+0xfc018694>
 80186c0:	10c5c83a 	sub	r2,r2,r3
 80186c4:	f800283a 	ret

080186c8 <__register_exitproc>:
 80186c8:	defffa04 	addi	sp,sp,-24
 80186cc:	dc000315 	stw	r16,12(sp)
 80186d0:	04020d74 	movhi	r16,2101
 80186d4:	84288204 	addi	r16,r16,-24056
 80186d8:	80c00017 	ldw	r3,0(r16)
 80186dc:	dc400415 	stw	r17,16(sp)
 80186e0:	dfc00515 	stw	ra,20(sp)
 80186e4:	18805217 	ldw	r2,328(r3)
 80186e8:	2023883a 	mov	r17,r4
 80186ec:	10003726 	beq	r2,zero,80187cc <__register_exitproc+0x104>
 80186f0:	10c00117 	ldw	r3,4(r2)
 80186f4:	010007c4 	movi	r4,31
 80186f8:	20c00e16 	blt	r4,r3,8018734 <__register_exitproc+0x6c>
 80186fc:	1a000044 	addi	r8,r3,1
 8018700:	8800221e 	bne	r17,zero,801878c <__register_exitproc+0xc4>
 8018704:	18c00084 	addi	r3,r3,2
 8018708:	18c7883a 	add	r3,r3,r3
 801870c:	18c7883a 	add	r3,r3,r3
 8018710:	12000115 	stw	r8,4(r2)
 8018714:	10c7883a 	add	r3,r2,r3
 8018718:	19400015 	stw	r5,0(r3)
 801871c:	0005883a 	mov	r2,zero
 8018720:	dfc00517 	ldw	ra,20(sp)
 8018724:	dc400417 	ldw	r17,16(sp)
 8018728:	dc000317 	ldw	r16,12(sp)
 801872c:	dec00604 	addi	sp,sp,24
 8018730:	f800283a 	ret
 8018734:	00800034 	movhi	r2,0
 8018738:	10800004 	addi	r2,r2,0
 801873c:	10002626 	beq	r2,zero,80187d8 <__register_exitproc+0x110>
 8018740:	01006404 	movi	r4,400
 8018744:	d9400015 	stw	r5,0(sp)
 8018748:	d9800115 	stw	r6,4(sp)
 801874c:	d9c00215 	stw	r7,8(sp)
 8018750:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8018754:	d9400017 	ldw	r5,0(sp)
 8018758:	d9800117 	ldw	r6,4(sp)
 801875c:	d9c00217 	ldw	r7,8(sp)
 8018760:	10001d26 	beq	r2,zero,80187d8 <__register_exitproc+0x110>
 8018764:	81000017 	ldw	r4,0(r16)
 8018768:	10000115 	stw	zero,4(r2)
 801876c:	02000044 	movi	r8,1
 8018770:	22405217 	ldw	r9,328(r4)
 8018774:	0007883a 	mov	r3,zero
 8018778:	12400015 	stw	r9,0(r2)
 801877c:	20805215 	stw	r2,328(r4)
 8018780:	10006215 	stw	zero,392(r2)
 8018784:	10006315 	stw	zero,396(r2)
 8018788:	883fde26 	beq	r17,zero,8018704 <__alt_data_end+0xfc018704>
 801878c:	18c9883a 	add	r4,r3,r3
 8018790:	2109883a 	add	r4,r4,r4
 8018794:	1109883a 	add	r4,r2,r4
 8018798:	21802215 	stw	r6,136(r4)
 801879c:	01800044 	movi	r6,1
 80187a0:	12406217 	ldw	r9,392(r2)
 80187a4:	30cc983a 	sll	r6,r6,r3
 80187a8:	4992b03a 	or	r9,r9,r6
 80187ac:	12406215 	stw	r9,392(r2)
 80187b0:	21c04215 	stw	r7,264(r4)
 80187b4:	01000084 	movi	r4,2
 80187b8:	893fd21e 	bne	r17,r4,8018704 <__alt_data_end+0xfc018704>
 80187bc:	11006317 	ldw	r4,396(r2)
 80187c0:	218cb03a 	or	r6,r4,r6
 80187c4:	11806315 	stw	r6,396(r2)
 80187c8:	003fce06 	br	8018704 <__alt_data_end+0xfc018704>
 80187cc:	18805304 	addi	r2,r3,332
 80187d0:	18805215 	stw	r2,328(r3)
 80187d4:	003fc606 	br	80186f0 <__alt_data_end+0xfc0186f0>
 80187d8:	00bfffc4 	movi	r2,-1
 80187dc:	003fd006 	br	8018720 <__alt_data_end+0xfc018720>

080187e0 <__call_exitprocs>:
 80187e0:	defff504 	addi	sp,sp,-44
 80187e4:	df000915 	stw	fp,36(sp)
 80187e8:	dd400615 	stw	r21,24(sp)
 80187ec:	dc800315 	stw	r18,12(sp)
 80187f0:	dfc00a15 	stw	ra,40(sp)
 80187f4:	ddc00815 	stw	r23,32(sp)
 80187f8:	dd800715 	stw	r22,28(sp)
 80187fc:	dd000515 	stw	r20,20(sp)
 8018800:	dcc00415 	stw	r19,16(sp)
 8018804:	dc400215 	stw	r17,8(sp)
 8018808:	dc000115 	stw	r16,4(sp)
 801880c:	d9000015 	stw	r4,0(sp)
 8018810:	2839883a 	mov	fp,r5
 8018814:	04800044 	movi	r18,1
 8018818:	057fffc4 	movi	r21,-1
 801881c:	00820d74 	movhi	r2,2101
 8018820:	10a88204 	addi	r2,r2,-24056
 8018824:	12000017 	ldw	r8,0(r2)
 8018828:	45005217 	ldw	r20,328(r8)
 801882c:	44c05204 	addi	r19,r8,328
 8018830:	a0001c26 	beq	r20,zero,80188a4 <__call_exitprocs+0xc4>
 8018834:	a0800117 	ldw	r2,4(r20)
 8018838:	15ffffc4 	addi	r23,r2,-1
 801883c:	b8000d16 	blt	r23,zero,8018874 <__call_exitprocs+0x94>
 8018840:	14000044 	addi	r16,r2,1
 8018844:	8421883a 	add	r16,r16,r16
 8018848:	8421883a 	add	r16,r16,r16
 801884c:	84402004 	addi	r17,r16,128
 8018850:	a463883a 	add	r17,r20,r17
 8018854:	a421883a 	add	r16,r20,r16
 8018858:	e0001e26 	beq	fp,zero,80188d4 <__call_exitprocs+0xf4>
 801885c:	80804017 	ldw	r2,256(r16)
 8018860:	e0801c26 	beq	fp,r2,80188d4 <__call_exitprocs+0xf4>
 8018864:	bdffffc4 	addi	r23,r23,-1
 8018868:	843fff04 	addi	r16,r16,-4
 801886c:	8c7fff04 	addi	r17,r17,-4
 8018870:	bd7ff91e 	bne	r23,r21,8018858 <__alt_data_end+0xfc018858>
 8018874:	00800034 	movhi	r2,0
 8018878:	10800004 	addi	r2,r2,0
 801887c:	10000926 	beq	r2,zero,80188a4 <__call_exitprocs+0xc4>
 8018880:	a0800117 	ldw	r2,4(r20)
 8018884:	1000301e 	bne	r2,zero,8018948 <__call_exitprocs+0x168>
 8018888:	a0800017 	ldw	r2,0(r20)
 801888c:	10003226 	beq	r2,zero,8018958 <__call_exitprocs+0x178>
 8018890:	a009883a 	mov	r4,r20
 8018894:	98800015 	stw	r2,0(r19)
 8018898:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 801889c:	9d000017 	ldw	r20,0(r19)
 80188a0:	a03fe41e 	bne	r20,zero,8018834 <__alt_data_end+0xfc018834>
 80188a4:	dfc00a17 	ldw	ra,40(sp)
 80188a8:	df000917 	ldw	fp,36(sp)
 80188ac:	ddc00817 	ldw	r23,32(sp)
 80188b0:	dd800717 	ldw	r22,28(sp)
 80188b4:	dd400617 	ldw	r21,24(sp)
 80188b8:	dd000517 	ldw	r20,20(sp)
 80188bc:	dcc00417 	ldw	r19,16(sp)
 80188c0:	dc800317 	ldw	r18,12(sp)
 80188c4:	dc400217 	ldw	r17,8(sp)
 80188c8:	dc000117 	ldw	r16,4(sp)
 80188cc:	dec00b04 	addi	sp,sp,44
 80188d0:	f800283a 	ret
 80188d4:	a0800117 	ldw	r2,4(r20)
 80188d8:	80c00017 	ldw	r3,0(r16)
 80188dc:	10bfffc4 	addi	r2,r2,-1
 80188e0:	15c01426 	beq	r2,r23,8018934 <__call_exitprocs+0x154>
 80188e4:	80000015 	stw	zero,0(r16)
 80188e8:	183fde26 	beq	r3,zero,8018864 <__alt_data_end+0xfc018864>
 80188ec:	95c8983a 	sll	r4,r18,r23
 80188f0:	a0806217 	ldw	r2,392(r20)
 80188f4:	a5800117 	ldw	r22,4(r20)
 80188f8:	2084703a 	and	r2,r4,r2
 80188fc:	10000b26 	beq	r2,zero,801892c <__call_exitprocs+0x14c>
 8018900:	a0806317 	ldw	r2,396(r20)
 8018904:	2088703a 	and	r4,r4,r2
 8018908:	20000c1e 	bne	r4,zero,801893c <__call_exitprocs+0x15c>
 801890c:	89400017 	ldw	r5,0(r17)
 8018910:	d9000017 	ldw	r4,0(sp)
 8018914:	183ee83a 	callr	r3
 8018918:	a0800117 	ldw	r2,4(r20)
 801891c:	15bfbf1e 	bne	r2,r22,801881c <__alt_data_end+0xfc01881c>
 8018920:	98800017 	ldw	r2,0(r19)
 8018924:	153fcf26 	beq	r2,r20,8018864 <__alt_data_end+0xfc018864>
 8018928:	003fbc06 	br	801881c <__alt_data_end+0xfc01881c>
 801892c:	183ee83a 	callr	r3
 8018930:	003ff906 	br	8018918 <__alt_data_end+0xfc018918>
 8018934:	a5c00115 	stw	r23,4(r20)
 8018938:	003feb06 	br	80188e8 <__alt_data_end+0xfc0188e8>
 801893c:	89000017 	ldw	r4,0(r17)
 8018940:	183ee83a 	callr	r3
 8018944:	003ff406 	br	8018918 <__alt_data_end+0xfc018918>
 8018948:	a0800017 	ldw	r2,0(r20)
 801894c:	a027883a 	mov	r19,r20
 8018950:	1029883a 	mov	r20,r2
 8018954:	003fb606 	br	8018830 <__alt_data_end+0xfc018830>
 8018958:	0005883a 	mov	r2,zero
 801895c:	003ffb06 	br	801894c <__alt_data_end+0xfc01894c>

08018960 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8018960:	defffd04 	addi	sp,sp,-12
 8018964:	df000215 	stw	fp,8(sp)
 8018968:	df000204 	addi	fp,sp,8
 801896c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8018970:	0001883a 	nop
 8018974:	e0bfff17 	ldw	r2,-4(fp)
 8018978:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801897c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8018980:	10000226 	beq	r2,zero,801898c <_exit+0x2c>
    ALT_SIM_FAIL();
 8018984:	002af070 	cmpltui	zero,zero,43969
 8018988:	00000106 	br	8018990 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801898c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8018990:	003fff06 	br	8018990 <__alt_data_end+0xfc018990>


ws2.elf:     file format elf32-littlenios2
ws2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00177448 memsz 0x00177448 flags r-x
    LOAD off    0x00179448 vaddr 0x08177448 paddr 0x08178f60 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x0017ba78 vaddr 0x0817aa78 paddr 0x0817aa78 align 2**12
         filesz 0x00000000 memsz 0x0012c160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe88  08000000  08000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       001675c0  0800fe88  0800fe88  00011e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  08177448  08178f60  00179448  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0012c20a  0817aa78  0817aa78  0017ba78  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000230  00000230  0017af60  2**0
                  CONTENTS
  7 .sdram        00000000  082a6bd8  082a6bd8  0017af60  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0017af60  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  0017af88  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002396f  00000000  00000000  0017be80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009162  00000000  00000000  0019f7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b783  00000000  00000000  001a8951  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000212c  00000000  00000000  001b40d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b03  00000000  00000000  001b6200  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001786c  00000000  00000000  001b9d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  001d1570  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d0  00000000  00000000  001d15b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  001d625a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  001d625d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  001d6269  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  001d626a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  001d626b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  001d626f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  001d6273  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  001d6277  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  001d6282  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  001d628d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  001d6298  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  001d629b  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a8a  00000000  00000000  001d62ce  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072966  00000000  00000000  001dad58  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
0800fe88 l    d  .rodata	00000000 .rodata
08177448 l    d  .rwdata	00000000 .rwdata
0817aa78 l    d  .bss	00000000 .bss
00000230 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
082a6bd8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ws2_bsp//obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
08178ef4 l     O .rwdata	00000004 background_width
08178ef8 l     O .rwdata	00000004 background_height
0800fe88 l     O .rodata	000e1000 background_bitmap
08178efc l     O .rwdata	00000004 playerplanet_width
08178f00 l     O .rwdata	00000004 playerplanet_height
080f0e88 l     O .rodata	0002bf20 playerplanet_bitmap
08178f04 l     O .rwdata	00000004 enemyplanet_width
08178f08 l     O .rwdata	00000004 enemyplanet_height
0811cda8 l     O .rodata	0002bf20 enemyplanet_bitmap
08178f0c l     O .rwdata	00000004 redplanet_width
08178f10 l     O .rwdata	00000004 redplanet_height
08148cc8 l     O .rodata	0002bf20 redplanet_bitmap
08178f14 l     O .rwdata	00000004 enemy_ship_width
08178f18 l     O .rwdata	00000004 enemy_ship_height
08174be8 l     O .rodata	0000251c enemy_ship_bitmap
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0817718e l     O .rodata	00000010 zeroes.4404
08002b14 l     F .text	000000bc __sbprintf
0817719e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002d24 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800487c l     F .text	00000008 __fp_unlock
08004890 l     F .text	0000019c __sinit.part.1
08004a2c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08177448 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0817788c l     O .rwdata	00000020 lc_ctype_charset
0817786c l     O .rwdata	00000020 lc_message_charset
081778ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
081771d0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007f00 l     F .text	000000fc __sprint_r.part.0
081772f4 l     O .rodata	00000010 zeroes.4349
0800953c l     F .text	000000bc __sbprintf
08177304 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d55c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d670 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d69c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d790 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d878 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800db40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08178f50 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800dde4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800df20 l     F .text	00000034 alt_dev_reg
08177e94 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800e214 l     F .text	0000020c altera_avalon_jtag_uart_irq
0800e420 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800ea58 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800edf0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800f250 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f3b0 l     F .text	0000003c alt_get_errno
0800f3ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0817aaac g     O .bss	00000004 alt_instruction_exception_handler
08007544 g     F .text	00000074 _mprec_log10
08007630 g     F .text	0000008c __any_on
08009af0 g     F .text	00000054 _isatty_r
081771dc g     O .rodata	00000028 __mprec_tinytens
0800da7c g     F .text	0000007c alt_main
080006b0 g     F .text	000000c0 _puts_r
082a6ad8 g     O .bss	00000100 alt_irq
08009b44 g     F .text	00000060 _lseek_r
08178f60 g       *ABS*	00000000 __flash_rwdata_start
0800bf34 g     F .text	00000088 .hidden __eqdf2
082a6bd8 g       *ABS*	00000000 __alt_heap_start
08000674 g     F .text	0000003c printf
08009d5c g     F .text	0000009c _wcrtomb_r
08007dc0 g     F .text	0000005c __sseek
08004bdc g     F .text	00000010 __sinit
08009c04 g     F .text	00000140 __swbuf_r
080056b0 g     F .text	0000007c _setlocale_r
08004a34 g     F .text	00000078 __sfmoreglue
0800db1c g     F .text	00000024 __malloc_unlock
08006380 g     F .text	0000015c memmove
08004bc4 g     F .text	00000018 _cleanup
08006604 g     F .text	000000a8 _Balloc
0800bfbc g     F .text	000000dc .hidden __gtdf2
0800f7d8 g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
08009a94 g     F .text	0000005c _fstat_r
0817aa90 g     O .bss	00000004 errno
08007d3c g     F .text	00000008 __seofread
0817aa98 g     O .bss	00000004 alt_argv
08180ef4 g       *ABS*	00000000 _gp
0800ddb4 g     F .text	00000030 usleep
08177d14 g     O .rwdata	00000180 alt_fd_list
0800f7fc g     F .text	00000090 alt_find_dev
08006238 g     F .text	00000148 memcpy
08004884 g     F .text	0000000c _cleanup_r
0800d374 g     F .text	000000dc .hidden __floatsidf
0800f334 g     F .text	0000007c alt_io_redirect
0800c098 g     F .text	000000f4 .hidden __ltdf2
0800fe88 g       *ABS*	00000000 __DTOR_END__
08000770 g     F .text	00000014 puts
0800fa58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08007c20 g     F .text	00000074 __fpclassifyd
080074a0 g     F .text	000000a4 __ratio
08009520 g     F .text	0000001c __vfiprintf_internal
0800e618 g     F .text	0000021c altera_avalon_jtag_uart_read
08000644 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800abfc g     F .text	00000064 .hidden __udivsi3
0800d7cc g     F .text	000000ac isatty
0817722c g     O .rodata	000000c8 __mprec_tens
0800572c g     F .text	0000000c __locale_charset
0817aa8c g     O .bss	00000004 __malloc_top_pad
08178f28 g     O .rwdata	00000004 __mb_cur_max
0800575c g     F .text	0000000c _localeconv_r
08006a38 g     F .text	0000003c __i2b
08005060 g     F .text	000004c8 __sfvwrite_r
08007c94 g     F .text	00000054 _sbrk_r
08009ba4 g     F .text	00000060 _read_r
08178f48 g     O .rwdata	00000004 alt_max_fd
08009788 g     F .text	000000f0 _fclose_r
0800484c g     F .text	00000030 fflush
0817aa88 g     O .bss	00000004 __malloc_max_sbrked_mem
0800acb8 g     F .text	000008ac .hidden __adddf3
08007248 g     F .text	0000010c __b2d
0800a540 g     F .text	000005c4 .hidden __umoddi3
0800d9a0 g     F .text	000000dc lseek
08178f20 g     O .rwdata	00000004 _global_impure_ptr
080076bc g     F .text	00000564 _realloc_r
082a6bd8 g       *ABS*	00000000 __bss_end
0800f160 g     F .text	000000f0 alt_iic_isr_register
0800f6d0 g     F .text	00000108 alt_tick
08009f44 g     F .text	000005fc .hidden __udivdi3
080099f0 g     F .text	00000024 _fputwc_r
08177204 g     O .rodata	00000028 __mprec_bigtens
0800681c g     F .text	00000104 __s2b
0800d450 g     F .text	000000a8 .hidden __floatunsidf
08006f88 g     F .text	00000060 __mcmp
08004bfc g     F .text	00000018 __fp_lock_all
0800f114 g     F .text	0000004c alt_ic_irq_enabled
0800f634 g     F .text	0000009c alt_alarm_stop
0817aaa0 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
08177cec g     O .rwdata	00000028 alt_dev_null
0800edd0 g     F .text	00000020 alt_dcache_flush_all
08006920 g     F .text	00000068 __hi0bits
0800d2f4 g     F .text	00000080 .hidden __fixdfsi
08178f60 g       *ABS*	00000000 __ram_rwdata_end
08178f40 g     O .rwdata	00000008 alt_dev_list
0800de20 g     F .text	00000100 write
08177448 g       *ABS*	00000000 __ram_rodata_end
0800d6d8 g     F .text	000000b8 fstat
0800c098 g     F .text	000000f4 .hidden __ledf2
08006d00 g     F .text	00000140 __pow5mult
08008014 g     F .text	0000150c ___vfiprintf_internal_r
0817aa80 g     O .bss	00000004 __nlocale_changed
0800ac60 g     F .text	00000058 .hidden __umodsi3
082a6bd8 g       *ABS*	00000000 end
0800e154 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0817aad8 g     O .bss	0012c000 vga_mem
0800fe88 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800ead0 g     F .text	0000007c alt_avalon_timer_sc_init
0800d4f8 g     F .text	00000064 .hidden __clzsi2
0800e834 g     F .text	00000224 altera_avalon_jtag_uart_write
08004bec g     F .text	00000004 __sfp_lock_acquire
08006154 g     F .text	000000e4 memchr
0800081c g     F .text	000022dc ___vfprintf_internal_r
08004d50 g     F .text	00000310 _free_r
08005738 g     F .text	00000010 __locale_mb_cur_max
0800fcd4 g     F .text	00000180 __call_exitprocs
0817aa7c g     O .bss	00000004 __mlocale_changed
08178f2c g     O .rwdata	00000004 __malloc_sbrk_base
08000000 g     F .text	0000003c _start
0817aaa4 g     O .bss	00000004 _alt_tick_rate
08006e40 g     F .text	00000148 __lshift
0817aaa8 g     O .bss	00000004 _alt_nticks
0800db7c g     F .text	00000104 read
0800df8c g     F .text	00000064 alt_sys_init
0800fbbc g     F .text	00000118 __register_exitproc
08006a74 g     F .text	0000028c __multiply
0800e4c0 g     F .text	00000068 altera_avalon_jtag_uart_close
0800061c g     F .text	00000028 .hidden __mulsi3
08177448 g       *ABS*	00000000 __ram_rwdata_start
0800fe88 g       *ABS*	00000000 __ram_rodata_start
0817aab0 g     O .bss	00000028 __malloc_current_mallinfo
08007354 g     F .text	0000014c __d2b
0800dff0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f994 g     F .text	000000c4 alt_get_fd
0800ec78 g     F .text	00000158 alt_busy_sleep
08009658 g     F .text	00000054 _close_r
0800fb40 g     F .text	0000007c memcmp
0800e0b0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
082a6bd8 g       *ABS*	00000000 __alt_stack_base
0800e100 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002bd0 g     F .text	00000154 __swsetup_r
0800b564 g     F .text	000009d0 .hidden __divdf3
08004aac g     F .text	00000118 __sfp
080075b8 g     F .text	00000078 __copybits
081778e4 g     O .rwdata	00000408 __malloc_av_
08004bf8 g     F .text	00000004 __sinit_lock_release
0800c18c g     F .text	0000086c .hidden __muldf3
08007ce8 g     F .text	00000054 __sread
0800f88c g     F .text	00000108 alt_find_file
0800ee2c g     F .text	000000a4 alt_dev_llist_insert
0800daf8 g     F .text	00000024 __malloc_lock
0800dd04 g     F .text	000000b0 sbrk
080047f0 g     F .text	0000005c _fflush_r
080096ac g     F .text	000000dc _calloc_r
0817aa78 g       *ABS*	00000000 __bss_start
080064dc g     F .text	00000128 memset
080000c0 g     F .text	0000055c main
0817aa9c g     O .bss	00000004 alt_envp
0817aa84 g     O .bss	00000004 __malloc_max_total_mem
0800e050 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009d44 g     F .text	00000018 __swbuf
08007e1c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08009878 g     F .text	00000014 fclose
08002f4c g     F .text	00001688 _dtoa_r
08005948 g     F .text	0000080c _malloc_r
08009eb8 g     F .text	00000030 __ascii_wctomb
08178f4c g     O .rwdata	00000004 alt_errno
08005528 g     F .text	000000c4 _fwalk
0800ab04 g     F .text	00000084 .hidden __divsi3
08004c2c g     F .text	00000124 _malloc_trim_r
0800fe88 g       *ABS*	00000000 __CTOR_END__
08007e24 g     F .text	000000dc strcmp
0800fe88 g       *ABS*	00000000 __flash_rodata_start
0800fe88 g       *ABS*	00000000 __DTOR_LIST__
0800bf34 g     F .text	00000088 .hidden __nedf2
0800df54 g     F .text	00000038 alt_irq_init
0800dc80 g     F .text	00000084 alt_release_fd
08177314 g     O .rodata	00000100 .hidden __clz_tab
0817aa78 g     O .bss	00000004 _PathLocale
0800faf4 g     F .text	00000014 atexit
080095f8 g     F .text	00000060 _write_r
08005768 g     F .text	00000018 setlocale
08178f24 g     O .rwdata	00000004 _impure_ptr
0817aa94 g     O .bss	00000004 alt_argc
080045d4 g     F .text	0000021c __sflush_r
0800ef30 g     F .text	00000060 _do_dtors
08005754 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
080071e4 g     F .text	00000064 __ulp
08004c14 g     F .text	00000018 __fp_unlock_all
08178f38 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
08005780 g     F .text	0000000c localeconv
0800efb0 g     F .text	00000050 alt_ic_isr_register
08178f60 g       *ABS*	00000000 _edata
082a6bd8 g       *ABS*	00000000 _end
0800988c g     F .text	00000164 __fputwc
00000230 g       *ABS*	00000000 __ram_exceptions_end
0800e528 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0800f088 g     F .text	0000008c alt_ic_irq_disable
08007d44 g     F .text	0000007c __swrite
08178f30 g     O .rwdata	00000004 __malloc_trim_threshold
08005748 g     F .text	0000000c __locale_msgcharset
0800fb08 g     F .text	00000038 exit
080055ec g     F .text	000000c4 _fwalk_reent
08006fe8 g     F .text	000001fc __mdiff
0800ab88 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
08004bf0 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800fe54 g     F .text	00000034 _exit
0800eb4c g     F .text	0000012c alt_alarm_start
0800578c g     F .text	000001bc __smakebuf_r
08000784 g     F .text	00000098 strlen
0800f4d8 g     F .text	0000015c open
0800bfbc g     F .text	000000dc .hidden __gedf2
08178f34 g     O .rwdata	00000004 __wctomb
0800003c g     F .text	00000084 setPixel
08007ffc g     F .text	00000018 __sprint_r
0800ef90 g     F .text	00000020 alt_icache_flush_all
08178f54 g     O .rwdata	00000004 alt_priority_mask
0800f000 g     F .text	00000088 alt_ic_irq_enable
08002af8 g     F .text	0000001c __vfprintf_internal
08009ee8 g     F .text	0000005c _wctomb_r
0800c9f8 g     F .text	000008fc .hidden __subdf3
08006988 g     F .text	000000b0 __lo0bits
08178f58 g     O .rwdata	00000008 alt_alarm_list
0800eed0 g     F .text	00000060 _do_ctors
08178f1c g     O .rwdata	00000004 vga_regs
08009df8 g     F .text	000000c0 wcrtomb
0800d598 g     F .text	000000d8 close
0800d8e0 g     F .text	00000084 alt_load
08009a14 g     F .text	00000080 fputwc
08004bf4 g     F .text	00000004 __sinit_lock_acquire
080066d4 g     F .text	00000148 __multadd
080066ac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   4:	08400014 	ori	at,at,0
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00820ab4 	movhi	r2,2090
 140:	109ab604 	addi	r2,r2,27352
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00820ab4 	movhi	r2,2090
 158:	109ab604 	addi	r2,r2,27352
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xf400012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xf4000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a6ee17 	ldw	r2,-25672(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a6ee17 	ldw	r2,-25672(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	06820634 	movhi	gp,2072
    ori gp, gp, %lo(_gp)
 800000c:	d683bd14 	ori	gp,gp,3828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	008205f4 	movhi	r2,2071
    ori r2, r2, %lo(__bss_start)
 8000014:	10aa9e14 	ori	r2,r2,43640

    movhi r3, %hi(__bss_end)
 8000018:	00c20ab4 	movhi	r3,2090
    ori r3, r3, %lo(__bss_end)
 800001c:	18daf614 	ori	r3,r3,27608

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <__alt_data_end+0xfc000024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	800d8e00 	call	800d8e0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	800da7c0 	call	800da7c <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <__alt_data_end+0xfc000038>

0800003c <setPixel>:
} vga_regs_t;

vga_memory_t    vga_mem;
vga_regs_t*     vga_regs = (vga_regs_t*) 0x00002158;

void setPixel(uint16_t* frame, uint32_t x, uint32_t y, uint16_t color) {
 800003c:	defffa04 	addi	sp,sp,-24
 8000040:	dfc00515 	stw	ra,20(sp)
 8000044:	df000415 	stw	fp,16(sp)
 8000048:	df000404 	addi	fp,sp,16
 800004c:	e13ffc15 	stw	r4,-16(fp)
 8000050:	e17ffd15 	stw	r5,-12(fp)
 8000054:	e1bffe15 	stw	r6,-8(fp)
 8000058:	3805883a 	mov	r2,r7
 800005c:	e0bfff0d 	sth	r2,-4(fp)
    if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT)
 8000060:	e0bffd17 	ldw	r2,-12(fp)
 8000064:	1080a028 	cmpgeui	r2,r2,640
 8000068:	10000f1e 	bne	r2,zero,80000a8 <setPixel+0x6c>
 800006c:	e0bffe17 	ldw	r2,-8(fp)
 8000070:	10807828 	cmpgeui	r2,r2,480
 8000074:	10000c1e 	bne	r2,zero,80000a8 <setPixel+0x6c>
        frame[y * SCREEN_WIDTH + x] = color;
 8000078:	0140a004 	movi	r5,640
 800007c:	e13ffe17 	ldw	r4,-8(fp)
 8000080:	800061c0 	call	800061c <__mulsi3>
 8000084:	1007883a 	mov	r3,r2
 8000088:	e0bffd17 	ldw	r2,-12(fp)
 800008c:	1885883a 	add	r2,r3,r2
 8000090:	1085883a 	add	r2,r2,r2
 8000094:	1007883a 	mov	r3,r2
 8000098:	e0bffc17 	ldw	r2,-16(fp)
 800009c:	10c5883a 	add	r2,r2,r3
 80000a0:	e0ffff0b 	ldhu	r3,-4(fp)
 80000a4:	10c0000d 	sth	r3,0(r2)
}
 80000a8:	0001883a 	nop
 80000ac:	e037883a 	mov	sp,fp
 80000b0:	dfc00117 	ldw	ra,4(sp)
 80000b4:	df000017 	ldw	fp,0(sp)
 80000b8:	dec00204 	addi	sp,sp,8
 80000bc:	f800283a 	ret

080000c0 <main>:

int main() {
 80000c0:	defff004 	addi	sp,sp,-64
 80000c4:	dfc00f15 	stw	ra,60(sp)
 80000c8:	df000e15 	stw	fp,56(sp)
 80000cc:	dc400d15 	stw	r17,52(sp)
 80000d0:	dc000c15 	stw	r16,48(sp)
 80000d4:	df000e04 	addi	fp,sp,56
    printf("Hello from Nios II!\n");
 80000d8:	010205f4 	movhi	r4,2071
 80000dc:	211c4104 	addi	r4,r4,28932
 80000e0:	80007700 	call	8000770 <puts>

    printf("Initializing VGA control registers...");
 80000e4:	010205f4 	movhi	r4,2071
 80000e8:	211c4604 	addi	r4,r4,28952
 80000ec:	80006740 	call	8000674 <printf>
    vga_regs->address   = &vga_mem;
 80000f0:	d0e00a17 	ldw	r3,-32728(gp)
 80000f4:	00820634 	movhi	r2,2072
 80000f8:	10aab604 	addi	r2,r2,-21800
 80000fc:	18800015 	stw	r2,0(r3)
    vga_regs->frame     = 0;
 8000100:	d0a00a17 	ldw	r2,-32728(gp)
 8000104:	10000115 	stw	zero,4(r2)
    printf("Done\n");
 8000108:	010205f4 	movhi	r4,2071
 800010c:	211c5004 	addi	r4,r4,28992
 8000110:	80007700 	call	8000770 <puts>

    for (int y = 0; y < SCREEN_HEIGHT; y++) {
 8000114:	e03ff215 	stw	zero,-56(fp)
 8000118:	00003506 	br	80001f0 <main+0x130>
        for (int x = 0; x < SCREEN_WIDTH; x++) {
 800011c:	e03ff315 	stw	zero,-52(fp)
 8000120:	00002d06 	br	80001d8 <main+0x118>
            setPixel(vga_mem.frame0, x, y, background_bitmap[y * background_width + x]);
 8000124:	e43ff317 	ldw	r16,-52(fp)
 8000128:	e47ff217 	ldw	r17,-56(fp)
 800012c:	0080f004 	movi	r2,960
 8000130:	e17ff217 	ldw	r5,-56(fp)
 8000134:	1009883a 	mov	r4,r2
 8000138:	800061c0 	call	800061c <__mulsi3>
 800013c:	1007883a 	mov	r3,r2
 8000140:	e0bff317 	ldw	r2,-52(fp)
 8000144:	1887883a 	add	r3,r3,r2
 8000148:	00820074 	movhi	r2,2049
 800014c:	10bfa204 	addi	r2,r2,-376
 8000150:	18c7883a 	add	r3,r3,r3
 8000154:	10c5883a 	add	r2,r2,r3
 8000158:	1080000b 	ldhu	r2,0(r2)
 800015c:	10bfffcc 	andi	r2,r2,65535
 8000160:	100f883a 	mov	r7,r2
 8000164:	880d883a 	mov	r6,r17
 8000168:	800b883a 	mov	r5,r16
 800016c:	01020634 	movhi	r4,2072
 8000170:	212ab604 	addi	r4,r4,-21800
 8000174:	800003c0 	call	800003c <setPixel>
            setPixel(vga_mem.frame1, x, y, background_bitmap[y * background_width + x]);
 8000178:	e43ff317 	ldw	r16,-52(fp)
 800017c:	e47ff217 	ldw	r17,-56(fp)
 8000180:	0080f004 	movi	r2,960
 8000184:	e17ff217 	ldw	r5,-56(fp)
 8000188:	1009883a 	mov	r4,r2
 800018c:	800061c0 	call	800061c <__mulsi3>
 8000190:	1007883a 	mov	r3,r2
 8000194:	e0bff317 	ldw	r2,-52(fp)
 8000198:	1887883a 	add	r3,r3,r2
 800019c:	00820074 	movhi	r2,2049
 80001a0:	10bfa204 	addi	r2,r2,-376
 80001a4:	18c7883a 	add	r3,r3,r3
 80001a8:	10c5883a 	add	r2,r2,r3
 80001ac:	1080000b 	ldhu	r2,0(r2)
 80001b0:	10bfffcc 	andi	r2,r2,65535
 80001b4:	100f883a 	mov	r7,r2
 80001b8:	880d883a 	mov	r6,r17
 80001bc:	800b883a 	mov	r5,r16
 80001c0:	01020874 	movhi	r4,2081
 80001c4:	2102b604 	addi	r4,r4,2776
 80001c8:	800003c0 	call	800003c <setPixel>
    vga_regs->address   = &vga_mem;
    vga_regs->frame     = 0;
    printf("Done\n");

    for (int y = 0; y < SCREEN_HEIGHT; y++) {
        for (int x = 0; x < SCREEN_WIDTH; x++) {
 80001cc:	e0bff317 	ldw	r2,-52(fp)
 80001d0:	10800044 	addi	r2,r2,1
 80001d4:	e0bff315 	stw	r2,-52(fp)
 80001d8:	e0bff317 	ldw	r2,-52(fp)
 80001dc:	1080a010 	cmplti	r2,r2,640
 80001e0:	103fd01e 	bne	r2,zero,8000124 <__alt_data_end+0xfc000124>
    printf("Initializing VGA control registers...");
    vga_regs->address   = &vga_mem;
    vga_regs->frame     = 0;
    printf("Done\n");

    for (int y = 0; y < SCREEN_HEIGHT; y++) {
 80001e4:	e0bff217 	ldw	r2,-56(fp)
 80001e8:	10800044 	addi	r2,r2,1
 80001ec:	e0bff215 	stw	r2,-56(fp)
 80001f0:	e0bff217 	ldw	r2,-56(fp)
 80001f4:	10807810 	cmplti	r2,r2,480
 80001f8:	103fc81e 	bne	r2,zero,800011c <__alt_data_end+0xfc00011c>
            setPixel(vga_mem.frame0, x, y, background_bitmap[y * background_width + x]);
            setPixel(vga_mem.frame1, x, y, background_bitmap[y * background_width + x]);
        }
    }

    for (int y = 0; y < playerplanet_height; y++) {
 80001fc:	e03ff415 	stw	zero,-48(fp)
 8000200:	00003306 	br	80002d0 <main+0x210>
        for (int x = 0; x < playerplanet_width; x++) {
 8000204:	e03ff515 	stw	zero,-44(fp)
 8000208:	00002b06 	br	80002b8 <main+0x1f8>
            uint16_t color = playerplanet_bitmap[y * playerplanet_width + x];
 800020c:	00804b04 	movi	r2,300
 8000210:	e17ff417 	ldw	r5,-48(fp)
 8000214:	1009883a 	mov	r4,r2
 8000218:	800061c0 	call	800061c <__mulsi3>
 800021c:	1007883a 	mov	r3,r2
 8000220:	e0bff517 	ldw	r2,-44(fp)
 8000224:	1887883a 	add	r3,r3,r2
 8000228:	008203f4 	movhi	r2,2063
 800022c:	1083a204 	addi	r2,r2,3720
 8000230:	18c7883a 	add	r3,r3,r3
 8000234:	10c5883a 	add	r2,r2,r3
 8000238:	1080000b 	ldhu	r2,0(r2)
 800023c:	e0bffc0d 	sth	r2,-16(fp)
            if (color & 0x1000)
 8000240:	e0bffc0b 	ldhu	r2,-16(fp)
 8000244:	1084000c 	andi	r2,r2,4096
 8000248:	10001826 	beq	r2,zero,80002ac <main+0x1ec>
                setPixel(vga_mem.frame0, x - playerplanet_width / 2, y - playerplanet_height / 2 + SCREEN_HEIGHT / 2, color);
 800024c:	00804b04 	movi	r2,300
 8000250:	1006d7fa 	srli	r3,r2,31
 8000254:	1885883a 	add	r2,r3,r2
 8000258:	1005d07a 	srai	r2,r2,1
 800025c:	1007883a 	mov	r3,r2
 8000260:	e0bff517 	ldw	r2,-44(fp)
 8000264:	10c5c83a 	sub	r2,r2,r3
 8000268:	1009883a 	mov	r4,r2
 800026c:	00804b04 	movi	r2,300
 8000270:	1006d7fa 	srli	r3,r2,31
 8000274:	1885883a 	add	r2,r3,r2
 8000278:	1005d07a 	srai	r2,r2,1
 800027c:	1007883a 	mov	r3,r2
 8000280:	e0bff417 	ldw	r2,-48(fp)
 8000284:	10c5c83a 	sub	r2,r2,r3
 8000288:	10803c04 	addi	r2,r2,240
 800028c:	1007883a 	mov	r3,r2
 8000290:	e0bffc0b 	ldhu	r2,-16(fp)
 8000294:	100f883a 	mov	r7,r2
 8000298:	180d883a 	mov	r6,r3
 800029c:	200b883a 	mov	r5,r4
 80002a0:	01020634 	movhi	r4,2072
 80002a4:	212ab604 	addi	r4,r4,-21800
 80002a8:	800003c0 	call	800003c <setPixel>
            setPixel(vga_mem.frame1, x, y, background_bitmap[y * background_width + x]);
        }
    }

    for (int y = 0; y < playerplanet_height; y++) {
        for (int x = 0; x < playerplanet_width; x++) {
 80002ac:	e0bff517 	ldw	r2,-44(fp)
 80002b0:	10800044 	addi	r2,r2,1
 80002b4:	e0bff515 	stw	r2,-44(fp)
 80002b8:	00804b04 	movi	r2,300
 80002bc:	e0fff517 	ldw	r3,-44(fp)
 80002c0:	18bfd216 	blt	r3,r2,800020c <__alt_data_end+0xfc00020c>
            setPixel(vga_mem.frame0, x, y, background_bitmap[y * background_width + x]);
            setPixel(vga_mem.frame1, x, y, background_bitmap[y * background_width + x]);
        }
    }

    for (int y = 0; y < playerplanet_height; y++) {
 80002c4:	e0bff417 	ldw	r2,-48(fp)
 80002c8:	10800044 	addi	r2,r2,1
 80002cc:	e0bff415 	stw	r2,-48(fp)
 80002d0:	00804b04 	movi	r2,300
 80002d4:	e0fff417 	ldw	r3,-48(fp)
 80002d8:	18bfca16 	blt	r3,r2,8000204 <__alt_data_end+0xfc000204>
            if (color & 0x1000)
                setPixel(vga_mem.frame0, x - playerplanet_width / 2, y - playerplanet_height / 2 + SCREEN_HEIGHT / 2, color);
        }
    }

    for (int y = 0; y < enemyplanet_height; y++) {
 80002dc:	e03ff615 	stw	zero,-40(fp)
 80002e0:	00004d06 	br	8000418 <main+0x358>
        for (int x = 0; x < enemyplanet_width; x++) {
 80002e4:	e03ff715 	stw	zero,-36(fp)
 80002e8:	00004506 	br	8000400 <main+0x340>
            uint16_t color = enemyplanet_bitmap[y * enemyplanet_width + x];
 80002ec:	00804b04 	movi	r2,300
 80002f0:	e17ff617 	ldw	r5,-40(fp)
 80002f4:	1009883a 	mov	r4,r2
 80002f8:	800061c0 	call	800061c <__mulsi3>
 80002fc:	1007883a 	mov	r3,r2
 8000300:	e0bff717 	ldw	r2,-36(fp)
 8000304:	1887883a 	add	r3,r3,r2
 8000308:	008204b4 	movhi	r2,2066
 800030c:	10b36a04 	addi	r2,r2,-12888
 8000310:	18c7883a 	add	r3,r3,r3
 8000314:	10c5883a 	add	r2,r2,r3
 8000318:	1080000b 	ldhu	r2,0(r2)
 800031c:	e0bffc8d 	sth	r2,-14(fp)
            if (color & 0x1000) {
 8000320:	e0bffc8b 	ldhu	r2,-14(fp)
 8000324:	1084000c 	andi	r2,r2,4096
 8000328:	10003226 	beq	r2,zero,80003f4 <main+0x334>
                setPixel(vga_mem.frame0, x - enemyplanet_width / 2 + SCREEN_WIDTH, y - enemyplanet_height / 2 + SCREEN_HEIGHT / 2, color);
 800032c:	00804b04 	movi	r2,300
 8000330:	1006d7fa 	srli	r3,r2,31
 8000334:	1885883a 	add	r2,r3,r2
 8000338:	1005d07a 	srai	r2,r2,1
 800033c:	1007883a 	mov	r3,r2
 8000340:	e0bff717 	ldw	r2,-36(fp)
 8000344:	10c5c83a 	sub	r2,r2,r3
 8000348:	1080a004 	addi	r2,r2,640
 800034c:	1009883a 	mov	r4,r2
 8000350:	00804b04 	movi	r2,300
 8000354:	1006d7fa 	srli	r3,r2,31
 8000358:	1885883a 	add	r2,r3,r2
 800035c:	1005d07a 	srai	r2,r2,1
 8000360:	1007883a 	mov	r3,r2
 8000364:	e0bff617 	ldw	r2,-40(fp)
 8000368:	10c5c83a 	sub	r2,r2,r3
 800036c:	10803c04 	addi	r2,r2,240
 8000370:	1007883a 	mov	r3,r2
 8000374:	e0bffc8b 	ldhu	r2,-14(fp)
 8000378:	100f883a 	mov	r7,r2
 800037c:	180d883a 	mov	r6,r3
 8000380:	200b883a 	mov	r5,r4
 8000384:	01020634 	movhi	r4,2072
 8000388:	212ab604 	addi	r4,r4,-21800
 800038c:	800003c0 	call	800003c <setPixel>
                setPixel(vga_mem.frame1, x - enemyplanet_width / 2 + SCREEN_WIDTH / 2, y - enemyplanet_height / 2 + SCREEN_HEIGHT / 2, color);
 8000390:	00804b04 	movi	r2,300
 8000394:	1006d7fa 	srli	r3,r2,31
 8000398:	1885883a 	add	r2,r3,r2
 800039c:	1005d07a 	srai	r2,r2,1
 80003a0:	1007883a 	mov	r3,r2
 80003a4:	e0bff717 	ldw	r2,-36(fp)
 80003a8:	10c5c83a 	sub	r2,r2,r3
 80003ac:	10805004 	addi	r2,r2,320
 80003b0:	1009883a 	mov	r4,r2
 80003b4:	00804b04 	movi	r2,300
 80003b8:	1006d7fa 	srli	r3,r2,31
 80003bc:	1885883a 	add	r2,r3,r2
 80003c0:	1005d07a 	srai	r2,r2,1
 80003c4:	1007883a 	mov	r3,r2
 80003c8:	e0bff617 	ldw	r2,-40(fp)
 80003cc:	10c5c83a 	sub	r2,r2,r3
 80003d0:	10803c04 	addi	r2,r2,240
 80003d4:	1007883a 	mov	r3,r2
 80003d8:	e0bffc8b 	ldhu	r2,-14(fp)
 80003dc:	100f883a 	mov	r7,r2
 80003e0:	180d883a 	mov	r6,r3
 80003e4:	200b883a 	mov	r5,r4
 80003e8:	01020874 	movhi	r4,2081
 80003ec:	2102b604 	addi	r4,r4,2776
 80003f0:	800003c0 	call	800003c <setPixel>
                setPixel(vga_mem.frame0, x - playerplanet_width / 2, y - playerplanet_height / 2 + SCREEN_HEIGHT / 2, color);
        }
    }

    for (int y = 0; y < enemyplanet_height; y++) {
        for (int x = 0; x < enemyplanet_width; x++) {
 80003f4:	e0bff717 	ldw	r2,-36(fp)
 80003f8:	10800044 	addi	r2,r2,1
 80003fc:	e0bff715 	stw	r2,-36(fp)
 8000400:	00804b04 	movi	r2,300
 8000404:	e0fff717 	ldw	r3,-36(fp)
 8000408:	18bfb816 	blt	r3,r2,80002ec <__alt_data_end+0xfc0002ec>
            if (color & 0x1000)
                setPixel(vga_mem.frame0, x - playerplanet_width / 2, y - playerplanet_height / 2 + SCREEN_HEIGHT / 2, color);
        }
    }

    for (int y = 0; y < enemyplanet_height; y++) {
 800040c:	e0bff617 	ldw	r2,-40(fp)
 8000410:	10800044 	addi	r2,r2,1
 8000414:	e0bff615 	stw	r2,-40(fp)
 8000418:	00804b04 	movi	r2,300
 800041c:	e0fff617 	ldw	r3,-40(fp)
 8000420:	18bfb016 	blt	r3,r2,80002e4 <__alt_data_end+0xfc0002e4>
                setPixel(vga_mem.frame1, x - enemyplanet_width / 2 + SCREEN_WIDTH / 2, y - enemyplanet_height / 2 + SCREEN_HEIGHT / 2, color);
            }
        }
    }

    for (int y = 0; y < redplanet_height; y++) {
 8000424:	e03ff815 	stw	zero,-32(fp)
 8000428:	00003406 	br	80004fc <main+0x43c>
        for (int x = 0; x < redplanet_width; x++) {
 800042c:	e03ff915 	stw	zero,-28(fp)
 8000430:	00002c06 	br	80004e4 <main+0x424>
            uint16_t color = redplanet_bitmap[y * redplanet_width + x];
 8000434:	00804b04 	movi	r2,300
 8000438:	e17ff817 	ldw	r5,-32(fp)
 800043c:	1009883a 	mov	r4,r2
 8000440:	800061c0 	call	800061c <__mulsi3>
 8000444:	1007883a 	mov	r3,r2
 8000448:	e0bff917 	ldw	r2,-28(fp)
 800044c:	1887883a 	add	r3,r3,r2
 8000450:	00820574 	movhi	r2,2069
 8000454:	10a33204 	addi	r2,r2,-29496
 8000458:	18c7883a 	add	r3,r3,r3
 800045c:	10c5883a 	add	r2,r2,r3
 8000460:	1080000b 	ldhu	r2,0(r2)
 8000464:	e0bffd0d 	sth	r2,-12(fp)
            if (color & 0x1000)
 8000468:	e0bffd0b 	ldhu	r2,-12(fp)
 800046c:	1084000c 	andi	r2,r2,4096
 8000470:	10001926 	beq	r2,zero,80004d8 <main+0x418>
                setPixel(vga_mem.frame0, x - redplanet_width / 2 + SCREEN_WIDTH / 2, y - redplanet_height / 2 + SCREEN_HEIGHT, color);
 8000474:	00804b04 	movi	r2,300
 8000478:	1006d7fa 	srli	r3,r2,31
 800047c:	1885883a 	add	r2,r3,r2
 8000480:	1005d07a 	srai	r2,r2,1
 8000484:	1007883a 	mov	r3,r2
 8000488:	e0bff917 	ldw	r2,-28(fp)
 800048c:	10c5c83a 	sub	r2,r2,r3
 8000490:	10805004 	addi	r2,r2,320
 8000494:	1009883a 	mov	r4,r2
 8000498:	00804b04 	movi	r2,300
 800049c:	1006d7fa 	srli	r3,r2,31
 80004a0:	1885883a 	add	r2,r3,r2
 80004a4:	1005d07a 	srai	r2,r2,1
 80004a8:	1007883a 	mov	r3,r2
 80004ac:	e0bff817 	ldw	r2,-32(fp)
 80004b0:	10c5c83a 	sub	r2,r2,r3
 80004b4:	10807804 	addi	r2,r2,480
 80004b8:	1007883a 	mov	r3,r2
 80004bc:	e0bffd0b 	ldhu	r2,-12(fp)
 80004c0:	100f883a 	mov	r7,r2
 80004c4:	180d883a 	mov	r6,r3
 80004c8:	200b883a 	mov	r5,r4
 80004cc:	01020634 	movhi	r4,2072
 80004d0:	212ab604 	addi	r4,r4,-21800
 80004d4:	800003c0 	call	800003c <setPixel>
            }
        }
    }

    for (int y = 0; y < redplanet_height; y++) {
        for (int x = 0; x < redplanet_width; x++) {
 80004d8:	e0bff917 	ldw	r2,-28(fp)
 80004dc:	10800044 	addi	r2,r2,1
 80004e0:	e0bff915 	stw	r2,-28(fp)
 80004e4:	00804b04 	movi	r2,300
 80004e8:	e0fff917 	ldw	r3,-28(fp)
 80004ec:	18bfd116 	blt	r3,r2,8000434 <__alt_data_end+0xfc000434>
                setPixel(vga_mem.frame1, x - enemyplanet_width / 2 + SCREEN_WIDTH / 2, y - enemyplanet_height / 2 + SCREEN_HEIGHT / 2, color);
            }
        }
    }

    for (int y = 0; y < redplanet_height; y++) {
 80004f0:	e0bff817 	ldw	r2,-32(fp)
 80004f4:	10800044 	addi	r2,r2,1
 80004f8:	e0bff815 	stw	r2,-32(fp)
 80004fc:	00804b04 	movi	r2,300
 8000500:	e0fff817 	ldw	r3,-32(fp)
 8000504:	18bfc916 	blt	r3,r2,800042c <__alt_data_end+0xfc00042c>
            if (color & 0x1000)
                setPixel(vga_mem.frame0, x - redplanet_width / 2 + SCREEN_WIDTH / 2, y - redplanet_height / 2 + SCREEN_HEIGHT, color);
        }
    }

    for (int y = 0; y < enemy_ship_height; y++) {
 8000508:	e03ffa15 	stw	zero,-24(fp)
 800050c:	00003406 	br	80005e0 <main+0x520>
        for (int x = 0; x < enemy_ship_width; x++) {
 8000510:	e03ffb15 	stw	zero,-20(fp)
 8000514:	00002c06 	br	80005c8 <main+0x508>
            uint16_t color = enemy_ship_bitmap[y * enemy_ship_width + x];
 8000518:	008017c4 	movi	r2,95
 800051c:	e17ffa17 	ldw	r5,-24(fp)
 8000520:	1009883a 	mov	r4,r2
 8000524:	800061c0 	call	800061c <__mulsi3>
 8000528:	1007883a 	mov	r3,r2
 800052c:	e0bffb17 	ldw	r2,-20(fp)
 8000530:	1887883a 	add	r3,r3,r2
 8000534:	008205f4 	movhi	r2,2071
 8000538:	1092fa04 	addi	r2,r2,19432
 800053c:	18c7883a 	add	r3,r3,r3
 8000540:	10c5883a 	add	r2,r2,r3
 8000544:	1080000b 	ldhu	r2,0(r2)
 8000548:	e0bffd8d 	sth	r2,-10(fp)
            if (color & 0x1000)
 800054c:	e0bffd8b 	ldhu	r2,-10(fp)
 8000550:	1084000c 	andi	r2,r2,4096
 8000554:	10001926 	beq	r2,zero,80005bc <main+0x4fc>
                setPixel(vga_mem.frame0, x - enemy_ship_width / 2 + SCREEN_WIDTH / 2, y - enemy_ship_height / 2 + SCREEN_HEIGHT / 2, color);
 8000558:	008017c4 	movi	r2,95
 800055c:	1006d7fa 	srli	r3,r2,31
 8000560:	1885883a 	add	r2,r3,r2
 8000564:	1005d07a 	srai	r2,r2,1
 8000568:	1007883a 	mov	r3,r2
 800056c:	e0bffb17 	ldw	r2,-20(fp)
 8000570:	10c5c83a 	sub	r2,r2,r3
 8000574:	10805004 	addi	r2,r2,320
 8000578:	1009883a 	mov	r4,r2
 800057c:	00800c84 	movi	r2,50
 8000580:	1006d7fa 	srli	r3,r2,31
 8000584:	1885883a 	add	r2,r3,r2
 8000588:	1005d07a 	srai	r2,r2,1
 800058c:	1007883a 	mov	r3,r2
 8000590:	e0bffa17 	ldw	r2,-24(fp)
 8000594:	10c5c83a 	sub	r2,r2,r3
 8000598:	10803c04 	addi	r2,r2,240
 800059c:	1007883a 	mov	r3,r2
 80005a0:	e0bffd8b 	ldhu	r2,-10(fp)
 80005a4:	100f883a 	mov	r7,r2
 80005a8:	180d883a 	mov	r6,r3
 80005ac:	200b883a 	mov	r5,r4
 80005b0:	01020634 	movhi	r4,2072
 80005b4:	212ab604 	addi	r4,r4,-21800
 80005b8:	800003c0 	call	800003c <setPixel>
                setPixel(vga_mem.frame0, x - redplanet_width / 2 + SCREEN_WIDTH / 2, y - redplanet_height / 2 + SCREEN_HEIGHT, color);
        }
    }

    for (int y = 0; y < enemy_ship_height; y++) {
        for (int x = 0; x < enemy_ship_width; x++) {
 80005bc:	e0bffb17 	ldw	r2,-20(fp)
 80005c0:	10800044 	addi	r2,r2,1
 80005c4:	e0bffb15 	stw	r2,-20(fp)
 80005c8:	008017c4 	movi	r2,95
 80005cc:	e0fffb17 	ldw	r3,-20(fp)
 80005d0:	18bfd116 	blt	r3,r2,8000518 <__alt_data_end+0xfc000518>
            if (color & 0x1000)
                setPixel(vga_mem.frame0, x - redplanet_width / 2 + SCREEN_WIDTH / 2, y - redplanet_height / 2 + SCREEN_HEIGHT, color);
        }
    }

    for (int y = 0; y < enemy_ship_height; y++) {
 80005d4:	e0bffa17 	ldw	r2,-24(fp)
 80005d8:	10800044 	addi	r2,r2,1
 80005dc:	e0bffa15 	stw	r2,-24(fp)
 80005e0:	00800c84 	movi	r2,50
 80005e4:	e0fffa17 	ldw	r3,-24(fp)
 80005e8:	18bfc916 	blt	r3,r2,8000510 <__alt_data_end+0xfc000510>
                setPixel(vga_mem.frame0, x - enemy_ship_width / 2 + SCREEN_WIDTH / 2, y - enemy_ship_height / 2 + SCREEN_HEIGHT / 2, color);
        }
    }

    while (1) {
        vga_regs->frame = 0;
 80005ec:	d0a00a17 	ldw	r2,-32728(gp)
 80005f0:	10000115 	stw	zero,4(r2)
        usleep(100000);
 80005f4:	010000b4 	movhi	r4,2
 80005f8:	2121a804 	addi	r4,r4,-31072
 80005fc:	800ddb40 	call	800ddb4 <usleep>
        vga_regs->frame = 1;
 8000600:	d0a00a17 	ldw	r2,-32728(gp)
 8000604:	00c00044 	movi	r3,1
 8000608:	10c00115 	stw	r3,4(r2)
        usleep(100000);
 800060c:	010000b4 	movhi	r4,2
 8000610:	2121a804 	addi	r4,r4,-31072
 8000614:	800ddb40 	call	800ddb4 <usleep>
    }
 8000618:	003ff406 	br	80005ec <__alt_data_end+0xfc0005ec>

0800061c <__mulsi3>:
 800061c:	0005883a 	mov	r2,zero
 8000620:	20000726 	beq	r4,zero,8000640 <__mulsi3+0x24>
 8000624:	20c0004c 	andi	r3,r4,1
 8000628:	2008d07a 	srli	r4,r4,1
 800062c:	18000126 	beq	r3,zero,8000634 <__mulsi3+0x18>
 8000630:	1145883a 	add	r2,r2,r5
 8000634:	294b883a 	add	r5,r5,r5
 8000638:	203ffa1e 	bne	r4,zero,8000624 <__alt_data_end+0xfc000624>
 800063c:	f800283a 	ret
 8000640:	f800283a 	ret

08000644 <_printf_r>:
 8000644:	defffd04 	addi	sp,sp,-12
 8000648:	2805883a 	mov	r2,r5
 800064c:	dfc00015 	stw	ra,0(sp)
 8000650:	d9800115 	stw	r6,4(sp)
 8000654:	d9c00215 	stw	r7,8(sp)
 8000658:	21400217 	ldw	r5,8(r4)
 800065c:	d9c00104 	addi	r7,sp,4
 8000660:	100d883a 	mov	r6,r2
 8000664:	800081c0 	call	800081c <___vfprintf_internal_r>
 8000668:	dfc00017 	ldw	ra,0(sp)
 800066c:	dec00304 	addi	sp,sp,12
 8000670:	f800283a 	ret

08000674 <printf>:
 8000674:	defffc04 	addi	sp,sp,-16
 8000678:	dfc00015 	stw	ra,0(sp)
 800067c:	d9400115 	stw	r5,4(sp)
 8000680:	d9800215 	stw	r6,8(sp)
 8000684:	d9c00315 	stw	r7,12(sp)
 8000688:	00820634 	movhi	r2,2072
 800068c:	10a3c904 	addi	r2,r2,-28892
 8000690:	10800017 	ldw	r2,0(r2)
 8000694:	200b883a 	mov	r5,r4
 8000698:	d9800104 	addi	r6,sp,4
 800069c:	11000217 	ldw	r4,8(r2)
 80006a0:	8002af80 	call	8002af8 <__vfprintf_internal>
 80006a4:	dfc00017 	ldw	ra,0(sp)
 80006a8:	dec00404 	addi	sp,sp,16
 80006ac:	f800283a 	ret

080006b0 <_puts_r>:
 80006b0:	defff604 	addi	sp,sp,-40
 80006b4:	dc000715 	stw	r16,28(sp)
 80006b8:	2021883a 	mov	r16,r4
 80006bc:	2809883a 	mov	r4,r5
 80006c0:	dc400815 	stw	r17,32(sp)
 80006c4:	dfc00915 	stw	ra,36(sp)
 80006c8:	2823883a 	mov	r17,r5
 80006cc:	80007840 	call	8000784 <strlen>
 80006d0:	10c00044 	addi	r3,r2,1
 80006d4:	d8800115 	stw	r2,4(sp)
 80006d8:	008205f4 	movhi	r2,2071
 80006dc:	109c5204 	addi	r2,r2,29000
 80006e0:	d8800215 	stw	r2,8(sp)
 80006e4:	00800044 	movi	r2,1
 80006e8:	d8800315 	stw	r2,12(sp)
 80006ec:	00800084 	movi	r2,2
 80006f0:	dc400015 	stw	r17,0(sp)
 80006f4:	d8c00615 	stw	r3,24(sp)
 80006f8:	dec00415 	stw	sp,16(sp)
 80006fc:	d8800515 	stw	r2,20(sp)
 8000700:	80000226 	beq	r16,zero,800070c <_puts_r+0x5c>
 8000704:	80800e17 	ldw	r2,56(r16)
 8000708:	10001426 	beq	r2,zero,800075c <_puts_r+0xac>
 800070c:	81400217 	ldw	r5,8(r16)
 8000710:	2880030b 	ldhu	r2,12(r5)
 8000714:	10c8000c 	andi	r3,r2,8192
 8000718:	1800061e 	bne	r3,zero,8000734 <_puts_r+0x84>
 800071c:	29001917 	ldw	r4,100(r5)
 8000720:	00f7ffc4 	movi	r3,-8193
 8000724:	10880014 	ori	r2,r2,8192
 8000728:	20c6703a 	and	r3,r4,r3
 800072c:	2880030d 	sth	r2,12(r5)
 8000730:	28c01915 	stw	r3,100(r5)
 8000734:	d9800404 	addi	r6,sp,16
 8000738:	8009883a 	mov	r4,r16
 800073c:	80050600 	call	8005060 <__sfvwrite_r>
 8000740:	1000091e 	bne	r2,zero,8000768 <_puts_r+0xb8>
 8000744:	00800284 	movi	r2,10
 8000748:	dfc00917 	ldw	ra,36(sp)
 800074c:	dc400817 	ldw	r17,32(sp)
 8000750:	dc000717 	ldw	r16,28(sp)
 8000754:	dec00a04 	addi	sp,sp,40
 8000758:	f800283a 	ret
 800075c:	8009883a 	mov	r4,r16
 8000760:	8004bdc0 	call	8004bdc <__sinit>
 8000764:	003fe906 	br	800070c <__alt_data_end+0xfc00070c>
 8000768:	00bfffc4 	movi	r2,-1
 800076c:	003ff606 	br	8000748 <__alt_data_end+0xfc000748>

08000770 <puts>:
 8000770:	00820634 	movhi	r2,2072
 8000774:	10a3c904 	addi	r2,r2,-28892
 8000778:	200b883a 	mov	r5,r4
 800077c:	11000017 	ldw	r4,0(r2)
 8000780:	80006b01 	jmpi	80006b0 <_puts_r>

08000784 <strlen>:
 8000784:	208000cc 	andi	r2,r4,3
 8000788:	10002026 	beq	r2,zero,800080c <strlen+0x88>
 800078c:	20800007 	ldb	r2,0(r4)
 8000790:	10002026 	beq	r2,zero,8000814 <strlen+0x90>
 8000794:	2005883a 	mov	r2,r4
 8000798:	00000206 	br	80007a4 <strlen+0x20>
 800079c:	10c00007 	ldb	r3,0(r2)
 80007a0:	18001826 	beq	r3,zero,8000804 <strlen+0x80>
 80007a4:	10800044 	addi	r2,r2,1
 80007a8:	10c000cc 	andi	r3,r2,3
 80007ac:	183ffb1e 	bne	r3,zero,800079c <__alt_data_end+0xfc00079c>
 80007b0:	10c00017 	ldw	r3,0(r2)
 80007b4:	01ffbff4 	movhi	r7,65279
 80007b8:	39ffbfc4 	addi	r7,r7,-257
 80007bc:	00ca303a 	nor	r5,zero,r3
 80007c0:	01a02074 	movhi	r6,32897
 80007c4:	19c7883a 	add	r3,r3,r7
 80007c8:	31a02004 	addi	r6,r6,-32640
 80007cc:	1946703a 	and	r3,r3,r5
 80007d0:	1986703a 	and	r3,r3,r6
 80007d4:	1800091e 	bne	r3,zero,80007fc <strlen+0x78>
 80007d8:	10800104 	addi	r2,r2,4
 80007dc:	10c00017 	ldw	r3,0(r2)
 80007e0:	19cb883a 	add	r5,r3,r7
 80007e4:	00c6303a 	nor	r3,zero,r3
 80007e8:	28c6703a 	and	r3,r5,r3
 80007ec:	1986703a 	and	r3,r3,r6
 80007f0:	183ff926 	beq	r3,zero,80007d8 <__alt_data_end+0xfc0007d8>
 80007f4:	00000106 	br	80007fc <strlen+0x78>
 80007f8:	10800044 	addi	r2,r2,1
 80007fc:	10c00007 	ldb	r3,0(r2)
 8000800:	183ffd1e 	bne	r3,zero,80007f8 <__alt_data_end+0xfc0007f8>
 8000804:	1105c83a 	sub	r2,r2,r4
 8000808:	f800283a 	ret
 800080c:	2005883a 	mov	r2,r4
 8000810:	003fe706 	br	80007b0 <__alt_data_end+0xfc0007b0>
 8000814:	0005883a 	mov	r2,zero
 8000818:	f800283a 	ret

0800081c <___vfprintf_internal_r>:
 800081c:	deffb804 	addi	sp,sp,-288
 8000820:	dfc04715 	stw	ra,284(sp)
 8000824:	ddc04515 	stw	r23,276(sp)
 8000828:	dd404315 	stw	r21,268(sp)
 800082c:	d9002d15 	stw	r4,180(sp)
 8000830:	282f883a 	mov	r23,r5
 8000834:	302b883a 	mov	r21,r6
 8000838:	d9c02e15 	stw	r7,184(sp)
 800083c:	df004615 	stw	fp,280(sp)
 8000840:	dd804415 	stw	r22,272(sp)
 8000844:	dd004215 	stw	r20,264(sp)
 8000848:	dcc04115 	stw	r19,260(sp)
 800084c:	dc804015 	stw	r18,256(sp)
 8000850:	dc403f15 	stw	r17,252(sp)
 8000854:	dc003e15 	stw	r16,248(sp)
 8000858:	800575c0 	call	800575c <_localeconv_r>
 800085c:	10800017 	ldw	r2,0(r2)
 8000860:	1009883a 	mov	r4,r2
 8000864:	d8803415 	stw	r2,208(sp)
 8000868:	80007840 	call	8000784 <strlen>
 800086c:	d8803715 	stw	r2,220(sp)
 8000870:	d8802d17 	ldw	r2,180(sp)
 8000874:	10000226 	beq	r2,zero,8000880 <___vfprintf_internal_r+0x64>
 8000878:	10800e17 	ldw	r2,56(r2)
 800087c:	1000fb26 	beq	r2,zero,8000c6c <___vfprintf_internal_r+0x450>
 8000880:	b880030b 	ldhu	r2,12(r23)
 8000884:	10c8000c 	andi	r3,r2,8192
 8000888:	1800061e 	bne	r3,zero,80008a4 <___vfprintf_internal_r+0x88>
 800088c:	b9001917 	ldw	r4,100(r23)
 8000890:	00f7ffc4 	movi	r3,-8193
 8000894:	10880014 	ori	r2,r2,8192
 8000898:	20c6703a 	and	r3,r4,r3
 800089c:	b880030d 	sth	r2,12(r23)
 80008a0:	b8c01915 	stw	r3,100(r23)
 80008a4:	10c0020c 	andi	r3,r2,8
 80008a8:	1800c326 	beq	r3,zero,8000bb8 <___vfprintf_internal_r+0x39c>
 80008ac:	b8c00417 	ldw	r3,16(r23)
 80008b0:	1800c126 	beq	r3,zero,8000bb8 <___vfprintf_internal_r+0x39c>
 80008b4:	1080068c 	andi	r2,r2,26
 80008b8:	00c00284 	movi	r3,10
 80008bc:	10c0c626 	beq	r2,r3,8000bd8 <___vfprintf_internal_r+0x3bc>
 80008c0:	d8c00404 	addi	r3,sp,16
 80008c4:	050205f4 	movhi	r20,2071
 80008c8:	d9001e04 	addi	r4,sp,120
 80008cc:	a51c6384 	addi	r20,r20,29070
 80008d0:	d8c01e15 	stw	r3,120(sp)
 80008d4:	d8002015 	stw	zero,128(sp)
 80008d8:	d8001f15 	stw	zero,124(sp)
 80008dc:	d8003315 	stw	zero,204(sp)
 80008e0:	d8003615 	stw	zero,216(sp)
 80008e4:	d8003815 	stw	zero,224(sp)
 80008e8:	1811883a 	mov	r8,r3
 80008ec:	d8003915 	stw	zero,228(sp)
 80008f0:	d8003a15 	stw	zero,232(sp)
 80008f4:	d8002f15 	stw	zero,188(sp)
 80008f8:	d9002815 	stw	r4,160(sp)
 80008fc:	a8800007 	ldb	r2,0(r21)
 8000900:	10028b26 	beq	r2,zero,8001330 <___vfprintf_internal_r+0xb14>
 8000904:	00c00944 	movi	r3,37
 8000908:	a823883a 	mov	r17,r21
 800090c:	10c0021e 	bne	r2,r3,8000918 <___vfprintf_internal_r+0xfc>
 8000910:	00001406 	br	8000964 <___vfprintf_internal_r+0x148>
 8000914:	10c00326 	beq	r2,r3,8000924 <___vfprintf_internal_r+0x108>
 8000918:	8c400044 	addi	r17,r17,1
 800091c:	88800007 	ldb	r2,0(r17)
 8000920:	103ffc1e 	bne	r2,zero,8000914 <__alt_data_end+0xfc000914>
 8000924:	8d61c83a 	sub	r16,r17,r21
 8000928:	80000e26 	beq	r16,zero,8000964 <___vfprintf_internal_r+0x148>
 800092c:	d8c02017 	ldw	r3,128(sp)
 8000930:	d8801f17 	ldw	r2,124(sp)
 8000934:	45400015 	stw	r21,0(r8)
 8000938:	1c07883a 	add	r3,r3,r16
 800093c:	10800044 	addi	r2,r2,1
 8000940:	d8c02015 	stw	r3,128(sp)
 8000944:	44000115 	stw	r16,4(r8)
 8000948:	d8801f15 	stw	r2,124(sp)
 800094c:	00c001c4 	movi	r3,7
 8000950:	1880a916 	blt	r3,r2,8000bf8 <___vfprintf_internal_r+0x3dc>
 8000954:	42000204 	addi	r8,r8,8
 8000958:	d9402f17 	ldw	r5,188(sp)
 800095c:	2c0b883a 	add	r5,r5,r16
 8000960:	d9402f15 	stw	r5,188(sp)
 8000964:	88800007 	ldb	r2,0(r17)
 8000968:	1000aa26 	beq	r2,zero,8000c14 <___vfprintf_internal_r+0x3f8>
 800096c:	8d400044 	addi	r21,r17,1
 8000970:	8c400047 	ldb	r17,1(r17)
 8000974:	0021883a 	mov	r16,zero
 8000978:	00bfffc4 	movi	r2,-1
 800097c:	0025883a 	mov	r18,zero
 8000980:	dc002905 	stb	r16,164(sp)
 8000984:	d8002785 	stb	zero,158(sp)
 8000988:	d8002b05 	stb	zero,172(sp)
 800098c:	d8802a15 	stw	r2,168(sp)
 8000990:	d8003115 	stw	zero,196(sp)
 8000994:	04c01604 	movi	r19,88
 8000998:	05800244 	movi	r22,9
 800099c:	9021883a 	mov	r16,r18
 80009a0:	4039883a 	mov	fp,r8
 80009a4:	ad400044 	addi	r21,r21,1
 80009a8:	88bff804 	addi	r2,r17,-32
 80009ac:	98833236 	bltu	r19,r2,8001678 <___vfprintf_internal_r+0xe5c>
 80009b0:	100490ba 	slli	r2,r2,2
 80009b4:	00c20034 	movhi	r3,2048
 80009b8:	18c27204 	addi	r3,r3,2504
 80009bc:	10c5883a 	add	r2,r2,r3
 80009c0:	10800017 	ldw	r2,0(r2)
 80009c4:	1000683a 	jmp	r2
 80009c8:	08001570 	cmpltui	zero,at,85
 80009cc:	08001678 	rdprs	zero,at,89
 80009d0:	08001678 	rdprs	zero,at,89
 80009d4:	08001590 	cmplti	zero,at,86
 80009d8:	08001678 	rdprs	zero,at,89
 80009dc:	08001678 	rdprs	zero,at,89
 80009e0:	08001678 	rdprs	zero,at,89
 80009e4:	08001678 	rdprs	zero,at,89
 80009e8:	08001678 	rdprs	zero,at,89
 80009ec:	08001678 	rdprs	zero,at,89
 80009f0:	08000c78 	rdprs	zero,at,49
 80009f4:	08001480 	call	800148 <__ram_exceptions_end+0x7fff18>
 80009f8:	08001678 	rdprs	zero,at,89
 80009fc:	08000b3c 	xorhi	zero,at,44
 8000a00:	08000c9c 	xori	zero,at,50
 8000a04:	08001678 	rdprs	zero,at,89
 8000a08:	08000cec 	andhi	zero,at,51
 8000a0c:	08000cf8 	rdprs	zero,at,51
 8000a10:	08000cf8 	rdprs	zero,at,51
 8000a14:	08000cf8 	rdprs	zero,at,51
 8000a18:	08000cf8 	rdprs	zero,at,51
 8000a1c:	08000cf8 	rdprs	zero,at,51
 8000a20:	08000cf8 	rdprs	zero,at,51
 8000a24:	08000cf8 	rdprs	zero,at,51
 8000a28:	08000cf8 	rdprs	zero,at,51
 8000a2c:	08000cf8 	rdprs	zero,at,51
 8000a30:	08001678 	rdprs	zero,at,89
 8000a34:	08001678 	rdprs	zero,at,89
 8000a38:	08001678 	rdprs	zero,at,89
 8000a3c:	08001678 	rdprs	zero,at,89
 8000a40:	08001678 	rdprs	zero,at,89
 8000a44:	08001678 	rdprs	zero,at,89
 8000a48:	08001678 	rdprs	zero,at,89
 8000a4c:	08001678 	rdprs	zero,at,89
 8000a50:	08001678 	rdprs	zero,at,89
 8000a54:	08001678 	rdprs	zero,at,89
 8000a58:	08000d34 	orhi	zero,at,52
 8000a5c:	08000dfc 	xorhi	zero,at,55
 8000a60:	08001678 	rdprs	zero,at,89
 8000a64:	08000dfc 	xorhi	zero,at,55
 8000a68:	08001678 	rdprs	zero,at,89
 8000a6c:	08001678 	rdprs	zero,at,89
 8000a70:	08001678 	rdprs	zero,at,89
 8000a74:	08001678 	rdprs	zero,at,89
 8000a78:	08000ea8 	cmpgeui	zero,at,58
 8000a7c:	08001678 	rdprs	zero,at,89
 8000a80:	08001678 	rdprs	zero,at,89
 8000a84:	08000eb4 	orhi	zero,at,58
 8000a88:	08001678 	rdprs	zero,at,89
 8000a8c:	08001678 	rdprs	zero,at,89
 8000a90:	08001678 	rdprs	zero,at,89
 8000a94:	08001678 	rdprs	zero,at,89
 8000a98:	08001678 	rdprs	zero,at,89
 8000a9c:	08001338 	rdprs	zero,at,76
 8000aa0:	08001678 	rdprs	zero,at,89
 8000aa4:	08001678 	rdprs	zero,at,89
 8000aa8:	080013a4 	muli	zero,at,78
 8000aac:	08001678 	rdprs	zero,at,89
 8000ab0:	08001678 	rdprs	zero,at,89
 8000ab4:	08001678 	rdprs	zero,at,89
 8000ab8:	08001678 	rdprs	zero,at,89
 8000abc:	08001678 	rdprs	zero,at,89
 8000ac0:	08001678 	rdprs	zero,at,89
 8000ac4:	08001678 	rdprs	zero,at,89
 8000ac8:	08001678 	rdprs	zero,at,89
 8000acc:	08001678 	rdprs	zero,at,89
 8000ad0:	08001678 	rdprs	zero,at,89
 8000ad4:	0800161c 	xori	zero,at,88
 8000ad8:	0800159c 	xori	zero,at,86
 8000adc:	08000dfc 	xorhi	zero,at,55
 8000ae0:	08000dfc 	xorhi	zero,at,55
 8000ae4:	08000dfc 	xorhi	zero,at,55
 8000ae8:	080015bc 	xorhi	zero,at,86
 8000aec:	0800159c 	xori	zero,at,86
 8000af0:	08001678 	rdprs	zero,at,89
 8000af4:	08001678 	rdprs	zero,at,89
 8000af8:	080015c8 	cmpgei	zero,at,87
 8000afc:	08001678 	rdprs	zero,at,89
 8000b00:	080015dc 	xori	zero,at,87
 8000b04:	08001460 	cmpeqi	zero,at,81
 8000b08:	08000b48 	cmpgei	zero,at,45
 8000b0c:	08001498 	cmpnei	zero,at,82
 8000b10:	08001678 	rdprs	zero,at,89
 8000b14:	080014a4 	muli	zero,at,82
 8000b18:	08001678 	rdprs	zero,at,89
 8000b1c:	08001508 	cmpgei	zero,at,84
 8000b20:	08001678 	rdprs	zero,at,89
 8000b24:	08001678 	rdprs	zero,at,89
 8000b28:	08001528 	cmpgeui	zero,at,84
 8000b2c:	d8c03117 	ldw	r3,196(sp)
 8000b30:	d8802e15 	stw	r2,184(sp)
 8000b34:	00c7c83a 	sub	r3,zero,r3
 8000b38:	d8c03115 	stw	r3,196(sp)
 8000b3c:	84000114 	ori	r16,r16,4
 8000b40:	ac400007 	ldb	r17,0(r21)
 8000b44:	003f9706 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8000b48:	00800c04 	movi	r2,48
 8000b4c:	d8802705 	stb	r2,156(sp)
 8000b50:	00801e04 	movi	r2,120
 8000b54:	d8802745 	stb	r2,157(sp)
 8000b58:	d9002a17 	ldw	r4,168(sp)
 8000b5c:	d8802e17 	ldw	r2,184(sp)
 8000b60:	d8002785 	stb	zero,158(sp)
 8000b64:	e011883a 	mov	r8,fp
 8000b68:	10c00104 	addi	r3,r2,4
 8000b6c:	14c00017 	ldw	r19,0(r2)
 8000b70:	002d883a 	mov	r22,zero
 8000b74:	80800094 	ori	r2,r16,2
 8000b78:	2002ca16 	blt	r4,zero,80016a4 <___vfprintf_internal_r+0xe88>
 8000b7c:	00bfdfc4 	movi	r2,-129
 8000b80:	80a4703a 	and	r18,r16,r2
 8000b84:	d8c02e15 	stw	r3,184(sp)
 8000b88:	94800094 	ori	r18,r18,2
 8000b8c:	9802b41e 	bne	r19,zero,8001660 <___vfprintf_internal_r+0xe44>
 8000b90:	014205f4 	movhi	r5,2071
 8000b94:	295c5c04 	addi	r5,r5,29040
 8000b98:	d9403915 	stw	r5,228(sp)
 8000b9c:	04401e04 	movi	r17,120
 8000ba0:	d8802a17 	ldw	r2,168(sp)
 8000ba4:	0039883a 	mov	fp,zero
 8000ba8:	1001fa26 	beq	r2,zero,8001394 <___vfprintf_internal_r+0xb78>
 8000bac:	0027883a 	mov	r19,zero
 8000bb0:	002d883a 	mov	r22,zero
 8000bb4:	00021906 	br	800141c <___vfprintf_internal_r+0xc00>
 8000bb8:	d9002d17 	ldw	r4,180(sp)
 8000bbc:	b80b883a 	mov	r5,r23
 8000bc0:	8002bd00 	call	8002bd0 <__swsetup_r>
 8000bc4:	1005dc1e 	bne	r2,zero,8002338 <___vfprintf_internal_r+0x1b1c>
 8000bc8:	b880030b 	ldhu	r2,12(r23)
 8000bcc:	00c00284 	movi	r3,10
 8000bd0:	1080068c 	andi	r2,r2,26
 8000bd4:	10ff3a1e 	bne	r2,r3,80008c0 <__alt_data_end+0xfc0008c0>
 8000bd8:	b880038f 	ldh	r2,14(r23)
 8000bdc:	103f3816 	blt	r2,zero,80008c0 <__alt_data_end+0xfc0008c0>
 8000be0:	d9c02e17 	ldw	r7,184(sp)
 8000be4:	d9002d17 	ldw	r4,180(sp)
 8000be8:	a80d883a 	mov	r6,r21
 8000bec:	b80b883a 	mov	r5,r23
 8000bf0:	8002b140 	call	8002b14 <__sbprintf>
 8000bf4:	00001106 	br	8000c3c <___vfprintf_internal_r+0x420>
 8000bf8:	d9002d17 	ldw	r4,180(sp)
 8000bfc:	d9801e04 	addi	r6,sp,120
 8000c00:	b80b883a 	mov	r5,r23
 8000c04:	8007ffc0 	call	8007ffc <__sprint_r>
 8000c08:	1000081e 	bne	r2,zero,8000c2c <___vfprintf_internal_r+0x410>
 8000c0c:	da000404 	addi	r8,sp,16
 8000c10:	003f5106 	br	8000958 <__alt_data_end+0xfc000958>
 8000c14:	d8802017 	ldw	r2,128(sp)
 8000c18:	10000426 	beq	r2,zero,8000c2c <___vfprintf_internal_r+0x410>
 8000c1c:	d9002d17 	ldw	r4,180(sp)
 8000c20:	d9801e04 	addi	r6,sp,120
 8000c24:	b80b883a 	mov	r5,r23
 8000c28:	8007ffc0 	call	8007ffc <__sprint_r>
 8000c2c:	b880030b 	ldhu	r2,12(r23)
 8000c30:	1080100c 	andi	r2,r2,64
 8000c34:	1005c01e 	bne	r2,zero,8002338 <___vfprintf_internal_r+0x1b1c>
 8000c38:	d8802f17 	ldw	r2,188(sp)
 8000c3c:	dfc04717 	ldw	ra,284(sp)
 8000c40:	df004617 	ldw	fp,280(sp)
 8000c44:	ddc04517 	ldw	r23,276(sp)
 8000c48:	dd804417 	ldw	r22,272(sp)
 8000c4c:	dd404317 	ldw	r21,268(sp)
 8000c50:	dd004217 	ldw	r20,264(sp)
 8000c54:	dcc04117 	ldw	r19,260(sp)
 8000c58:	dc804017 	ldw	r18,256(sp)
 8000c5c:	dc403f17 	ldw	r17,252(sp)
 8000c60:	dc003e17 	ldw	r16,248(sp)
 8000c64:	dec04804 	addi	sp,sp,288
 8000c68:	f800283a 	ret
 8000c6c:	d9002d17 	ldw	r4,180(sp)
 8000c70:	8004bdc0 	call	8004bdc <__sinit>
 8000c74:	003f0206 	br	8000880 <__alt_data_end+0xfc000880>
 8000c78:	d9002e17 	ldw	r4,184(sp)
 8000c7c:	d9402e17 	ldw	r5,184(sp)
 8000c80:	21000017 	ldw	r4,0(r4)
 8000c84:	28800104 	addi	r2,r5,4
 8000c88:	d9003115 	stw	r4,196(sp)
 8000c8c:	203fa716 	blt	r4,zero,8000b2c <__alt_data_end+0xfc000b2c>
 8000c90:	d8802e15 	stw	r2,184(sp)
 8000c94:	ac400007 	ldb	r17,0(r21)
 8000c98:	003f4206 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8000c9c:	ac400007 	ldb	r17,0(r21)
 8000ca0:	01000a84 	movi	r4,42
 8000ca4:	a8c00044 	addi	r3,r21,1
 8000ca8:	89075826 	beq	r17,r4,8002a0c <___vfprintf_internal_r+0x21f0>
 8000cac:	8cbff404 	addi	r18,r17,-48
 8000cb0:	b486ae36 	bltu	r22,r18,800276c <___vfprintf_internal_r+0x1f50>
 8000cb4:	0009883a 	mov	r4,zero
 8000cb8:	1823883a 	mov	r17,r3
 8000cbc:	01400284 	movi	r5,10
 8000cc0:	800061c0 	call	800061c <__mulsi3>
 8000cc4:	88c00007 	ldb	r3,0(r17)
 8000cc8:	1489883a 	add	r4,r2,r18
 8000ccc:	8d400044 	addi	r21,r17,1
 8000cd0:	1cbff404 	addi	r18,r3,-48
 8000cd4:	a823883a 	mov	r17,r21
 8000cd8:	b4bff82e 	bgeu	r22,r18,8000cbc <__alt_data_end+0xfc000cbc>
 8000cdc:	1823883a 	mov	r17,r3
 8000ce0:	2005f616 	blt	r4,zero,80024bc <___vfprintf_internal_r+0x1ca0>
 8000ce4:	d9002a15 	stw	r4,168(sp)
 8000ce8:	003f2f06 	br	80009a8 <__alt_data_end+0xfc0009a8>
 8000cec:	84002014 	ori	r16,r16,128
 8000cf0:	ac400007 	ldb	r17,0(r21)
 8000cf4:	003f2b06 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8000cf8:	8cbff404 	addi	r18,r17,-48
 8000cfc:	d8003115 	stw	zero,196(sp)
 8000d00:	0009883a 	mov	r4,zero
 8000d04:	a823883a 	mov	r17,r21
 8000d08:	01400284 	movi	r5,10
 8000d0c:	800061c0 	call	800061c <__mulsi3>
 8000d10:	88c00007 	ldb	r3,0(r17)
 8000d14:	9089883a 	add	r4,r18,r2
 8000d18:	ad400044 	addi	r21,r21,1
 8000d1c:	1cbff404 	addi	r18,r3,-48
 8000d20:	a823883a 	mov	r17,r21
 8000d24:	b4bff82e 	bgeu	r22,r18,8000d08 <__alt_data_end+0xfc000d08>
 8000d28:	1823883a 	mov	r17,r3
 8000d2c:	d9003115 	stw	r4,196(sp)
 8000d30:	003f1d06 	br	80009a8 <__alt_data_end+0xfc0009a8>
 8000d34:	8025883a 	mov	r18,r16
 8000d38:	dc002903 	ldbu	r16,164(sp)
 8000d3c:	e011883a 	mov	r8,fp
 8000d40:	84003fcc 	andi	r16,r16,255
 8000d44:	8007531e 	bne	r16,zero,8002a94 <___vfprintf_internal_r+0x2278>
 8000d48:	94800414 	ori	r18,r18,16
 8000d4c:	9080080c 	andi	r2,r18,32
 8000d50:	1003a326 	beq	r2,zero,8001be0 <___vfprintf_internal_r+0x13c4>
 8000d54:	d9002e17 	ldw	r4,184(sp)
 8000d58:	20800117 	ldw	r2,4(r4)
 8000d5c:	24c00017 	ldw	r19,0(r4)
 8000d60:	21000204 	addi	r4,r4,8
 8000d64:	d9002e15 	stw	r4,184(sp)
 8000d68:	102d883a 	mov	r22,r2
 8000d6c:	10047316 	blt	r2,zero,8001f3c <___vfprintf_internal_r+0x1720>
 8000d70:	d9002a17 	ldw	r4,168(sp)
 8000d74:	df002783 	ldbu	fp,158(sp)
 8000d78:	2003e416 	blt	r4,zero,8001d0c <___vfprintf_internal_r+0x14f0>
 8000d7c:	00ffdfc4 	movi	r3,-129
 8000d80:	9d84b03a 	or	r2,r19,r22
 8000d84:	90e4703a 	and	r18,r18,r3
 8000d88:	10018026 	beq	r2,zero,800138c <___vfprintf_internal_r+0xb70>
 8000d8c:	b003ab26 	beq	r22,zero,8001c3c <___vfprintf_internal_r+0x1420>
 8000d90:	dc402915 	stw	r17,164(sp)
 8000d94:	dc001e04 	addi	r16,sp,120
 8000d98:	b023883a 	mov	r17,r22
 8000d9c:	402d883a 	mov	r22,r8
 8000da0:	9809883a 	mov	r4,r19
 8000da4:	880b883a 	mov	r5,r17
 8000da8:	01800284 	movi	r6,10
 8000dac:	000f883a 	mov	r7,zero
 8000db0:	800a5400 	call	800a540 <__umoddi3>
 8000db4:	10800c04 	addi	r2,r2,48
 8000db8:	843fffc4 	addi	r16,r16,-1
 8000dbc:	9809883a 	mov	r4,r19
 8000dc0:	880b883a 	mov	r5,r17
 8000dc4:	80800005 	stb	r2,0(r16)
 8000dc8:	01800284 	movi	r6,10
 8000dcc:	000f883a 	mov	r7,zero
 8000dd0:	8009f440 	call	8009f44 <__udivdi3>
 8000dd4:	1027883a 	mov	r19,r2
 8000dd8:	10c4b03a 	or	r2,r2,r3
 8000ddc:	1823883a 	mov	r17,r3
 8000de0:	103fef1e 	bne	r2,zero,8000da0 <__alt_data_end+0xfc000da0>
 8000de4:	d8c02817 	ldw	r3,160(sp)
 8000de8:	dc402917 	ldw	r17,164(sp)
 8000dec:	b011883a 	mov	r8,r22
 8000df0:	1c07c83a 	sub	r3,r3,r16
 8000df4:	d8c02b15 	stw	r3,172(sp)
 8000df8:	00005f06 	br	8000f78 <___vfprintf_internal_r+0x75c>
 8000dfc:	8025883a 	mov	r18,r16
 8000e00:	dc002903 	ldbu	r16,164(sp)
 8000e04:	e011883a 	mov	r8,fp
 8000e08:	84003fcc 	andi	r16,r16,255
 8000e0c:	80071e1e 	bne	r16,zero,8002a88 <___vfprintf_internal_r+0x226c>
 8000e10:	9080020c 	andi	r2,r18,8
 8000e14:	1004af26 	beq	r2,zero,80020d4 <___vfprintf_internal_r+0x18b8>
 8000e18:	d9002e17 	ldw	r4,184(sp)
 8000e1c:	d9402e17 	ldw	r5,184(sp)
 8000e20:	d8802e17 	ldw	r2,184(sp)
 8000e24:	21000017 	ldw	r4,0(r4)
 8000e28:	29400117 	ldw	r5,4(r5)
 8000e2c:	10800204 	addi	r2,r2,8
 8000e30:	d9003615 	stw	r4,216(sp)
 8000e34:	d9403815 	stw	r5,224(sp)
 8000e38:	d8802e15 	stw	r2,184(sp)
 8000e3c:	d9003617 	ldw	r4,216(sp)
 8000e40:	d9403817 	ldw	r5,224(sp)
 8000e44:	da003d15 	stw	r8,244(sp)
 8000e48:	04000044 	movi	r16,1
 8000e4c:	8007c200 	call	8007c20 <__fpclassifyd>
 8000e50:	da003d17 	ldw	r8,244(sp)
 8000e54:	1404441e 	bne	r2,r16,8001f68 <___vfprintf_internal_r+0x174c>
 8000e58:	d9003617 	ldw	r4,216(sp)
 8000e5c:	d9403817 	ldw	r5,224(sp)
 8000e60:	000d883a 	mov	r6,zero
 8000e64:	000f883a 	mov	r7,zero
 8000e68:	800c0980 	call	800c098 <__ledf2>
 8000e6c:	da003d17 	ldw	r8,244(sp)
 8000e70:	1005e316 	blt	r2,zero,8002600 <___vfprintf_internal_r+0x1de4>
 8000e74:	df002783 	ldbu	fp,158(sp)
 8000e78:	008011c4 	movi	r2,71
 8000e7c:	1445580e 	bge	r2,r17,80023e0 <___vfprintf_internal_r+0x1bc4>
 8000e80:	040205f4 	movhi	r16,2071
 8000e84:	841c5404 	addi	r16,r16,29008
 8000e88:	00c000c4 	movi	r3,3
 8000e8c:	00bfdfc4 	movi	r2,-129
 8000e90:	d8c02915 	stw	r3,164(sp)
 8000e94:	90a4703a 	and	r18,r18,r2
 8000e98:	d8c02b15 	stw	r3,172(sp)
 8000e9c:	d8002a15 	stw	zero,168(sp)
 8000ea0:	d8003215 	stw	zero,200(sp)
 8000ea4:	00003a06 	br	8000f90 <___vfprintf_internal_r+0x774>
 8000ea8:	84000214 	ori	r16,r16,8
 8000eac:	ac400007 	ldb	r17,0(r21)
 8000eb0:	003ebc06 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8000eb4:	8025883a 	mov	r18,r16
 8000eb8:	dc002903 	ldbu	r16,164(sp)
 8000ebc:	e011883a 	mov	r8,fp
 8000ec0:	84003fcc 	andi	r16,r16,255
 8000ec4:	8007001e 	bne	r16,zero,8002ac8 <___vfprintf_internal_r+0x22ac>
 8000ec8:	94800414 	ori	r18,r18,16
 8000ecc:	9080080c 	andi	r2,r18,32
 8000ed0:	1002fa26 	beq	r2,zero,8001abc <___vfprintf_internal_r+0x12a0>
 8000ed4:	d9002e17 	ldw	r4,184(sp)
 8000ed8:	d9402a17 	ldw	r5,168(sp)
 8000edc:	d8002785 	stb	zero,158(sp)
 8000ee0:	20800204 	addi	r2,r4,8
 8000ee4:	24c00017 	ldw	r19,0(r4)
 8000ee8:	25800117 	ldw	r22,4(r4)
 8000eec:	2804b116 	blt	r5,zero,80021b4 <___vfprintf_internal_r+0x1998>
 8000ef0:	013fdfc4 	movi	r4,-129
 8000ef4:	9d86b03a 	or	r3,r19,r22
 8000ef8:	d8802e15 	stw	r2,184(sp)
 8000efc:	9124703a 	and	r18,r18,r4
 8000f00:	1802fb1e 	bne	r3,zero,8001af0 <___vfprintf_internal_r+0x12d4>
 8000f04:	d8c02a17 	ldw	r3,168(sp)
 8000f08:	0039883a 	mov	fp,zero
 8000f0c:	1805e526 	beq	r3,zero,80026a4 <___vfprintf_internal_r+0x1e88>
 8000f10:	0027883a 	mov	r19,zero
 8000f14:	002d883a 	mov	r22,zero
 8000f18:	dc001e04 	addi	r16,sp,120
 8000f1c:	9806d0fa 	srli	r3,r19,3
 8000f20:	b008977a 	slli	r4,r22,29
 8000f24:	b02cd0fa 	srli	r22,r22,3
 8000f28:	9cc001cc 	andi	r19,r19,7
 8000f2c:	98800c04 	addi	r2,r19,48
 8000f30:	843fffc4 	addi	r16,r16,-1
 8000f34:	20e6b03a 	or	r19,r4,r3
 8000f38:	80800005 	stb	r2,0(r16)
 8000f3c:	9d86b03a 	or	r3,r19,r22
 8000f40:	183ff61e 	bne	r3,zero,8000f1c <__alt_data_end+0xfc000f1c>
 8000f44:	90c0004c 	andi	r3,r18,1
 8000f48:	18014126 	beq	r3,zero,8001450 <___vfprintf_internal_r+0xc34>
 8000f4c:	10803fcc 	andi	r2,r2,255
 8000f50:	1080201c 	xori	r2,r2,128
 8000f54:	10bfe004 	addi	r2,r2,-128
 8000f58:	00c00c04 	movi	r3,48
 8000f5c:	10c13c26 	beq	r2,r3,8001450 <___vfprintf_internal_r+0xc34>
 8000f60:	80ffffc5 	stb	r3,-1(r16)
 8000f64:	d8c02817 	ldw	r3,160(sp)
 8000f68:	80bfffc4 	addi	r2,r16,-1
 8000f6c:	1021883a 	mov	r16,r2
 8000f70:	1887c83a 	sub	r3,r3,r2
 8000f74:	d8c02b15 	stw	r3,172(sp)
 8000f78:	d8802b17 	ldw	r2,172(sp)
 8000f7c:	d9002a17 	ldw	r4,168(sp)
 8000f80:	1100010e 	bge	r2,r4,8000f88 <___vfprintf_internal_r+0x76c>
 8000f84:	2005883a 	mov	r2,r4
 8000f88:	d8802915 	stw	r2,164(sp)
 8000f8c:	d8003215 	stw	zero,200(sp)
 8000f90:	e7003fcc 	andi	fp,fp,255
 8000f94:	e700201c 	xori	fp,fp,128
 8000f98:	e73fe004 	addi	fp,fp,-128
 8000f9c:	e0000326 	beq	fp,zero,8000fac <___vfprintf_internal_r+0x790>
 8000fa0:	d8c02917 	ldw	r3,164(sp)
 8000fa4:	18c00044 	addi	r3,r3,1
 8000fa8:	d8c02915 	stw	r3,164(sp)
 8000fac:	90c0008c 	andi	r3,r18,2
 8000fb0:	d8c02c15 	stw	r3,176(sp)
 8000fb4:	18000326 	beq	r3,zero,8000fc4 <___vfprintf_internal_r+0x7a8>
 8000fb8:	d8c02917 	ldw	r3,164(sp)
 8000fbc:	18c00084 	addi	r3,r3,2
 8000fc0:	d8c02915 	stw	r3,164(sp)
 8000fc4:	90c0210c 	andi	r3,r18,132
 8000fc8:	d8c03015 	stw	r3,192(sp)
 8000fcc:	1801c51e 	bne	r3,zero,80016e4 <___vfprintf_internal_r+0xec8>
 8000fd0:	d9003117 	ldw	r4,196(sp)
 8000fd4:	d8c02917 	ldw	r3,164(sp)
 8000fd8:	20e7c83a 	sub	r19,r4,r3
 8000fdc:	04c1c10e 	bge	zero,r19,80016e4 <___vfprintf_internal_r+0xec8>
 8000fe0:	02400404 	movi	r9,16
 8000fe4:	d8c02017 	ldw	r3,128(sp)
 8000fe8:	d8801f17 	ldw	r2,124(sp)
 8000fec:	4cc52f0e 	bge	r9,r19,80024ac <___vfprintf_internal_r+0x1c90>
 8000ff0:	014205f4 	movhi	r5,2071
 8000ff4:	295c6784 	addi	r5,r5,29086
 8000ff8:	dc403b15 	stw	r17,236(sp)
 8000ffc:	d9403515 	stw	r5,212(sp)
 8001000:	9823883a 	mov	r17,r19
 8001004:	482d883a 	mov	r22,r9
 8001008:	9027883a 	mov	r19,r18
 800100c:	070001c4 	movi	fp,7
 8001010:	8025883a 	mov	r18,r16
 8001014:	dc002d17 	ldw	r16,180(sp)
 8001018:	00000306 	br	8001028 <___vfprintf_internal_r+0x80c>
 800101c:	8c7ffc04 	addi	r17,r17,-16
 8001020:	42000204 	addi	r8,r8,8
 8001024:	b440130e 	bge	r22,r17,8001074 <___vfprintf_internal_r+0x858>
 8001028:	010205f4 	movhi	r4,2071
 800102c:	18c00404 	addi	r3,r3,16
 8001030:	10800044 	addi	r2,r2,1
 8001034:	211c6784 	addi	r4,r4,29086
 8001038:	41000015 	stw	r4,0(r8)
 800103c:	45800115 	stw	r22,4(r8)
 8001040:	d8c02015 	stw	r3,128(sp)
 8001044:	d8801f15 	stw	r2,124(sp)
 8001048:	e0bff40e 	bge	fp,r2,800101c <__alt_data_end+0xfc00101c>
 800104c:	d9801e04 	addi	r6,sp,120
 8001050:	b80b883a 	mov	r5,r23
 8001054:	8009883a 	mov	r4,r16
 8001058:	8007ffc0 	call	8007ffc <__sprint_r>
 800105c:	103ef31e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001060:	8c7ffc04 	addi	r17,r17,-16
 8001064:	d8c02017 	ldw	r3,128(sp)
 8001068:	d8801f17 	ldw	r2,124(sp)
 800106c:	da000404 	addi	r8,sp,16
 8001070:	b47fed16 	blt	r22,r17,8001028 <__alt_data_end+0xfc001028>
 8001074:	9021883a 	mov	r16,r18
 8001078:	9825883a 	mov	r18,r19
 800107c:	8827883a 	mov	r19,r17
 8001080:	dc403b17 	ldw	r17,236(sp)
 8001084:	d9403517 	ldw	r5,212(sp)
 8001088:	98c7883a 	add	r3,r19,r3
 800108c:	10800044 	addi	r2,r2,1
 8001090:	41400015 	stw	r5,0(r8)
 8001094:	44c00115 	stw	r19,4(r8)
 8001098:	d8c02015 	stw	r3,128(sp)
 800109c:	d8801f15 	stw	r2,124(sp)
 80010a0:	010001c4 	movi	r4,7
 80010a4:	2082c516 	blt	r4,r2,8001bbc <___vfprintf_internal_r+0x13a0>
 80010a8:	df002787 	ldb	fp,158(sp)
 80010ac:	42000204 	addi	r8,r8,8
 80010b0:	e0000c26 	beq	fp,zero,80010e4 <___vfprintf_internal_r+0x8c8>
 80010b4:	d8801f17 	ldw	r2,124(sp)
 80010b8:	d9002784 	addi	r4,sp,158
 80010bc:	18c00044 	addi	r3,r3,1
 80010c0:	10800044 	addi	r2,r2,1
 80010c4:	41000015 	stw	r4,0(r8)
 80010c8:	01000044 	movi	r4,1
 80010cc:	41000115 	stw	r4,4(r8)
 80010d0:	d8c02015 	stw	r3,128(sp)
 80010d4:	d8801f15 	stw	r2,124(sp)
 80010d8:	010001c4 	movi	r4,7
 80010dc:	20825e16 	blt	r4,r2,8001a58 <___vfprintf_internal_r+0x123c>
 80010e0:	42000204 	addi	r8,r8,8
 80010e4:	d8802c17 	ldw	r2,176(sp)
 80010e8:	10000c26 	beq	r2,zero,800111c <___vfprintf_internal_r+0x900>
 80010ec:	d8801f17 	ldw	r2,124(sp)
 80010f0:	d9002704 	addi	r4,sp,156
 80010f4:	18c00084 	addi	r3,r3,2
 80010f8:	10800044 	addi	r2,r2,1
 80010fc:	41000015 	stw	r4,0(r8)
 8001100:	01000084 	movi	r4,2
 8001104:	41000115 	stw	r4,4(r8)
 8001108:	d8c02015 	stw	r3,128(sp)
 800110c:	d8801f15 	stw	r2,124(sp)
 8001110:	010001c4 	movi	r4,7
 8001114:	20825816 	blt	r4,r2,8001a78 <___vfprintf_internal_r+0x125c>
 8001118:	42000204 	addi	r8,r8,8
 800111c:	d9003017 	ldw	r4,192(sp)
 8001120:	00802004 	movi	r2,128
 8001124:	2081bb26 	beq	r4,r2,8001814 <___vfprintf_internal_r+0xff8>
 8001128:	d9402a17 	ldw	r5,168(sp)
 800112c:	d8802b17 	ldw	r2,172(sp)
 8001130:	28adc83a 	sub	r22,r5,r2
 8001134:	0580310e 	bge	zero,r22,80011fc <___vfprintf_internal_r+0x9e0>
 8001138:	07000404 	movi	fp,16
 800113c:	d8801f17 	ldw	r2,124(sp)
 8001140:	e584360e 	bge	fp,r22,800221c <___vfprintf_internal_r+0x1a00>
 8001144:	014205f4 	movhi	r5,2071
 8001148:	295c6384 	addi	r5,r5,29070
 800114c:	dc402a15 	stw	r17,168(sp)
 8001150:	d9402c15 	stw	r5,176(sp)
 8001154:	b023883a 	mov	r17,r22
 8001158:	04c001c4 	movi	r19,7
 800115c:	a82d883a 	mov	r22,r21
 8001160:	902b883a 	mov	r21,r18
 8001164:	8025883a 	mov	r18,r16
 8001168:	dc002d17 	ldw	r16,180(sp)
 800116c:	00000306 	br	800117c <___vfprintf_internal_r+0x960>
 8001170:	8c7ffc04 	addi	r17,r17,-16
 8001174:	42000204 	addi	r8,r8,8
 8001178:	e440110e 	bge	fp,r17,80011c0 <___vfprintf_internal_r+0x9a4>
 800117c:	18c00404 	addi	r3,r3,16
 8001180:	10800044 	addi	r2,r2,1
 8001184:	45000015 	stw	r20,0(r8)
 8001188:	47000115 	stw	fp,4(r8)
 800118c:	d8c02015 	stw	r3,128(sp)
 8001190:	d8801f15 	stw	r2,124(sp)
 8001194:	98bff60e 	bge	r19,r2,8001170 <__alt_data_end+0xfc001170>
 8001198:	d9801e04 	addi	r6,sp,120
 800119c:	b80b883a 	mov	r5,r23
 80011a0:	8009883a 	mov	r4,r16
 80011a4:	8007ffc0 	call	8007ffc <__sprint_r>
 80011a8:	103ea01e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 80011ac:	8c7ffc04 	addi	r17,r17,-16
 80011b0:	d8c02017 	ldw	r3,128(sp)
 80011b4:	d8801f17 	ldw	r2,124(sp)
 80011b8:	da000404 	addi	r8,sp,16
 80011bc:	e47fef16 	blt	fp,r17,800117c <__alt_data_end+0xfc00117c>
 80011c0:	9021883a 	mov	r16,r18
 80011c4:	a825883a 	mov	r18,r21
 80011c8:	b02b883a 	mov	r21,r22
 80011cc:	882d883a 	mov	r22,r17
 80011d0:	dc402a17 	ldw	r17,168(sp)
 80011d4:	d9002c17 	ldw	r4,176(sp)
 80011d8:	1d87883a 	add	r3,r3,r22
 80011dc:	10800044 	addi	r2,r2,1
 80011e0:	41000015 	stw	r4,0(r8)
 80011e4:	45800115 	stw	r22,4(r8)
 80011e8:	d8c02015 	stw	r3,128(sp)
 80011ec:	d8801f15 	stw	r2,124(sp)
 80011f0:	010001c4 	movi	r4,7
 80011f4:	20821016 	blt	r4,r2,8001a38 <___vfprintf_internal_r+0x121c>
 80011f8:	42000204 	addi	r8,r8,8
 80011fc:	9080400c 	andi	r2,r18,256
 8001200:	10013a1e 	bne	r2,zero,80016ec <___vfprintf_internal_r+0xed0>
 8001204:	d9402b17 	ldw	r5,172(sp)
 8001208:	d8801f17 	ldw	r2,124(sp)
 800120c:	44000015 	stw	r16,0(r8)
 8001210:	1947883a 	add	r3,r3,r5
 8001214:	10800044 	addi	r2,r2,1
 8001218:	41400115 	stw	r5,4(r8)
 800121c:	d8c02015 	stw	r3,128(sp)
 8001220:	d8801f15 	stw	r2,124(sp)
 8001224:	010001c4 	movi	r4,7
 8001228:	2081f516 	blt	r4,r2,8001a00 <___vfprintf_internal_r+0x11e4>
 800122c:	42000204 	addi	r8,r8,8
 8001230:	9480010c 	andi	r18,r18,4
 8001234:	90003226 	beq	r18,zero,8001300 <___vfprintf_internal_r+0xae4>
 8001238:	d9403117 	ldw	r5,196(sp)
 800123c:	d8802917 	ldw	r2,164(sp)
 8001240:	28a1c83a 	sub	r16,r5,r2
 8001244:	04002e0e 	bge	zero,r16,8001300 <___vfprintf_internal_r+0xae4>
 8001248:	04400404 	movi	r17,16
 800124c:	d8801f17 	ldw	r2,124(sp)
 8001250:	8c04c40e 	bge	r17,r16,8002564 <___vfprintf_internal_r+0x1d48>
 8001254:	014205f4 	movhi	r5,2071
 8001258:	295c6784 	addi	r5,r5,29086
 800125c:	d9403515 	stw	r5,212(sp)
 8001260:	048001c4 	movi	r18,7
 8001264:	dcc02d17 	ldw	r19,180(sp)
 8001268:	00000306 	br	8001278 <___vfprintf_internal_r+0xa5c>
 800126c:	843ffc04 	addi	r16,r16,-16
 8001270:	42000204 	addi	r8,r8,8
 8001274:	8c00130e 	bge	r17,r16,80012c4 <___vfprintf_internal_r+0xaa8>
 8001278:	010205f4 	movhi	r4,2071
 800127c:	18c00404 	addi	r3,r3,16
 8001280:	10800044 	addi	r2,r2,1
 8001284:	211c6784 	addi	r4,r4,29086
 8001288:	41000015 	stw	r4,0(r8)
 800128c:	44400115 	stw	r17,4(r8)
 8001290:	d8c02015 	stw	r3,128(sp)
 8001294:	d8801f15 	stw	r2,124(sp)
 8001298:	90bff40e 	bge	r18,r2,800126c <__alt_data_end+0xfc00126c>
 800129c:	d9801e04 	addi	r6,sp,120
 80012a0:	b80b883a 	mov	r5,r23
 80012a4:	9809883a 	mov	r4,r19
 80012a8:	8007ffc0 	call	8007ffc <__sprint_r>
 80012ac:	103e5f1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 80012b0:	843ffc04 	addi	r16,r16,-16
 80012b4:	d8c02017 	ldw	r3,128(sp)
 80012b8:	d8801f17 	ldw	r2,124(sp)
 80012bc:	da000404 	addi	r8,sp,16
 80012c0:	8c3fed16 	blt	r17,r16,8001278 <__alt_data_end+0xfc001278>
 80012c4:	d9403517 	ldw	r5,212(sp)
 80012c8:	1c07883a 	add	r3,r3,r16
 80012cc:	10800044 	addi	r2,r2,1
 80012d0:	41400015 	stw	r5,0(r8)
 80012d4:	44000115 	stw	r16,4(r8)
 80012d8:	d8c02015 	stw	r3,128(sp)
 80012dc:	d8801f15 	stw	r2,124(sp)
 80012e0:	010001c4 	movi	r4,7
 80012e4:	2080060e 	bge	r4,r2,8001300 <___vfprintf_internal_r+0xae4>
 80012e8:	d9002d17 	ldw	r4,180(sp)
 80012ec:	d9801e04 	addi	r6,sp,120
 80012f0:	b80b883a 	mov	r5,r23
 80012f4:	8007ffc0 	call	8007ffc <__sprint_r>
 80012f8:	103e4c1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 80012fc:	d8c02017 	ldw	r3,128(sp)
 8001300:	d8803117 	ldw	r2,196(sp)
 8001304:	d9002917 	ldw	r4,164(sp)
 8001308:	1100010e 	bge	r2,r4,8001310 <___vfprintf_internal_r+0xaf4>
 800130c:	2005883a 	mov	r2,r4
 8001310:	d9402f17 	ldw	r5,188(sp)
 8001314:	288b883a 	add	r5,r5,r2
 8001318:	d9402f15 	stw	r5,188(sp)
 800131c:	1801c01e 	bne	r3,zero,8001a20 <___vfprintf_internal_r+0x1204>
 8001320:	a8800007 	ldb	r2,0(r21)
 8001324:	d8001f15 	stw	zero,124(sp)
 8001328:	da000404 	addi	r8,sp,16
 800132c:	103d751e 	bne	r2,zero,8000904 <__alt_data_end+0xfc000904>
 8001330:	a823883a 	mov	r17,r21
 8001334:	003d8b06 	br	8000964 <__alt_data_end+0xfc000964>
 8001338:	8025883a 	mov	r18,r16
 800133c:	dc002903 	ldbu	r16,164(sp)
 8001340:	e011883a 	mov	r8,fp
 8001344:	84003fcc 	andi	r16,r16,255
 8001348:	8005e51e 	bne	r16,zero,8002ae0 <___vfprintf_internal_r+0x22c4>
 800134c:	94800414 	ori	r18,r18,16
 8001350:	9080080c 	andi	r2,r18,32
 8001354:	10022b26 	beq	r2,zero,8001c04 <___vfprintf_internal_r+0x13e8>
 8001358:	d9002e17 	ldw	r4,184(sp)
 800135c:	d9402a17 	ldw	r5,168(sp)
 8001360:	d8002785 	stb	zero,158(sp)
 8001364:	20c00204 	addi	r3,r4,8
 8001368:	24c00017 	ldw	r19,0(r4)
 800136c:	25800117 	ldw	r22,4(r4)
 8001370:	28042e16 	blt	r5,zero,800242c <___vfprintf_internal_r+0x1c10>
 8001374:	013fdfc4 	movi	r4,-129
 8001378:	9d84b03a 	or	r2,r19,r22
 800137c:	d8c02e15 	stw	r3,184(sp)
 8001380:	9124703a 	and	r18,r18,r4
 8001384:	0039883a 	mov	fp,zero
 8001388:	103e801e 	bne	r2,zero,8000d8c <__alt_data_end+0xfc000d8c>
 800138c:	d9002a17 	ldw	r4,168(sp)
 8001390:	2002e01e 	bne	r4,zero,8001f14 <___vfprintf_internal_r+0x16f8>
 8001394:	d8002a15 	stw	zero,168(sp)
 8001398:	d8002b15 	stw	zero,172(sp)
 800139c:	dc001e04 	addi	r16,sp,120
 80013a0:	003ef506 	br	8000f78 <__alt_data_end+0xfc000f78>
 80013a4:	8025883a 	mov	r18,r16
 80013a8:	dc002903 	ldbu	r16,164(sp)
 80013ac:	e011883a 	mov	r8,fp
 80013b0:	84003fcc 	andi	r16,r16,255
 80013b4:	8005ba1e 	bne	r16,zero,8002aa0 <___vfprintf_internal_r+0x2284>
 80013b8:	010205f4 	movhi	r4,2071
 80013bc:	211c5704 	addi	r4,r4,29020
 80013c0:	d9003915 	stw	r4,228(sp)
 80013c4:	9080080c 	andi	r2,r18,32
 80013c8:	10006126 	beq	r2,zero,8001550 <___vfprintf_internal_r+0xd34>
 80013cc:	d9402e17 	ldw	r5,184(sp)
 80013d0:	2cc00017 	ldw	r19,0(r5)
 80013d4:	2d800117 	ldw	r22,4(r5)
 80013d8:	29400204 	addi	r5,r5,8
 80013dc:	d9402e15 	stw	r5,184(sp)
 80013e0:	9080004c 	andi	r2,r18,1
 80013e4:	1001ac26 	beq	r2,zero,8001a98 <___vfprintf_internal_r+0x127c>
 80013e8:	9d84b03a 	or	r2,r19,r22
 80013ec:	10038526 	beq	r2,zero,8002204 <___vfprintf_internal_r+0x19e8>
 80013f0:	d8c02a17 	ldw	r3,168(sp)
 80013f4:	00800c04 	movi	r2,48
 80013f8:	d8802705 	stb	r2,156(sp)
 80013fc:	dc402745 	stb	r17,157(sp)
 8001400:	d8002785 	stb	zero,158(sp)
 8001404:	90800094 	ori	r2,r18,2
 8001408:	18047916 	blt	r3,zero,80025f0 <___vfprintf_internal_r+0x1dd4>
 800140c:	00bfdfc4 	movi	r2,-129
 8001410:	90a4703a 	and	r18,r18,r2
 8001414:	94800094 	ori	r18,r18,2
 8001418:	0039883a 	mov	fp,zero
 800141c:	d9003917 	ldw	r4,228(sp)
 8001420:	dc001e04 	addi	r16,sp,120
 8001424:	988003cc 	andi	r2,r19,15
 8001428:	b006973a 	slli	r3,r22,28
 800142c:	2085883a 	add	r2,r4,r2
 8001430:	9826d13a 	srli	r19,r19,4
 8001434:	10800003 	ldbu	r2,0(r2)
 8001438:	b02cd13a 	srli	r22,r22,4
 800143c:	843fffc4 	addi	r16,r16,-1
 8001440:	1ce6b03a 	or	r19,r3,r19
 8001444:	80800005 	stb	r2,0(r16)
 8001448:	9d84b03a 	or	r2,r19,r22
 800144c:	103ff51e 	bne	r2,zero,8001424 <__alt_data_end+0xfc001424>
 8001450:	d8c02817 	ldw	r3,160(sp)
 8001454:	1c07c83a 	sub	r3,r3,r16
 8001458:	d8c02b15 	stw	r3,172(sp)
 800145c:	003ec606 	br	8000f78 <__alt_data_end+0xfc000f78>
 8001460:	8025883a 	mov	r18,r16
 8001464:	dc002903 	ldbu	r16,164(sp)
 8001468:	e011883a 	mov	r8,fp
 800146c:	84003fcc 	andi	r16,r16,255
 8001470:	803e9626 	beq	r16,zero,8000ecc <__alt_data_end+0xfc000ecc>
 8001474:	d8c02b03 	ldbu	r3,172(sp)
 8001478:	d8c02785 	stb	r3,158(sp)
 800147c:	003e9306 	br	8000ecc <__alt_data_end+0xfc000ecc>
 8001480:	00c00044 	movi	r3,1
 8001484:	d8c02905 	stb	r3,164(sp)
 8001488:	00c00ac4 	movi	r3,43
 800148c:	d8c02b05 	stb	r3,172(sp)
 8001490:	ac400007 	ldb	r17,0(r21)
 8001494:	003d4306 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8001498:	84000814 	ori	r16,r16,32
 800149c:	ac400007 	ldb	r17,0(r21)
 80014a0:	003d4006 	br	80009a4 <__alt_data_end+0xfc0009a4>
 80014a4:	d8802e17 	ldw	r2,184(sp)
 80014a8:	8025883a 	mov	r18,r16
 80014ac:	d8002785 	stb	zero,158(sp)
 80014b0:	14000017 	ldw	r16,0(r2)
 80014b4:	e011883a 	mov	r8,fp
 80014b8:	14c00104 	addi	r19,r2,4
 80014bc:	80042d26 	beq	r16,zero,8002574 <___vfprintf_internal_r+0x1d58>
 80014c0:	d8c02a17 	ldw	r3,168(sp)
 80014c4:	1803e416 	blt	r3,zero,8002458 <___vfprintf_internal_r+0x1c3c>
 80014c8:	180d883a 	mov	r6,r3
 80014cc:	000b883a 	mov	r5,zero
 80014d0:	8009883a 	mov	r4,r16
 80014d4:	df003d15 	stw	fp,244(sp)
 80014d8:	80061540 	call	8006154 <memchr>
 80014dc:	da003d17 	ldw	r8,244(sp)
 80014e0:	10046826 	beq	r2,zero,8002684 <___vfprintf_internal_r+0x1e68>
 80014e4:	1405c83a 	sub	r2,r2,r16
 80014e8:	d8802b15 	stw	r2,172(sp)
 80014ec:	1003e016 	blt	r2,zero,8002470 <___vfprintf_internal_r+0x1c54>
 80014f0:	df002783 	ldbu	fp,158(sp)
 80014f4:	d8802915 	stw	r2,164(sp)
 80014f8:	dcc02e15 	stw	r19,184(sp)
 80014fc:	d8002a15 	stw	zero,168(sp)
 8001500:	d8003215 	stw	zero,200(sp)
 8001504:	003ea206 	br	8000f90 <__alt_data_end+0xfc000f90>
 8001508:	8025883a 	mov	r18,r16
 800150c:	dc002903 	ldbu	r16,164(sp)
 8001510:	e011883a 	mov	r8,fp
 8001514:	84003fcc 	andi	r16,r16,255
 8001518:	803f8d26 	beq	r16,zero,8001350 <__alt_data_end+0xfc001350>
 800151c:	d8c02b03 	ldbu	r3,172(sp)
 8001520:	d8c02785 	stb	r3,158(sp)
 8001524:	003f8a06 	br	8001350 <__alt_data_end+0xfc001350>
 8001528:	8025883a 	mov	r18,r16
 800152c:	dc002903 	ldbu	r16,164(sp)
 8001530:	e011883a 	mov	r8,fp
 8001534:	84003fcc 	andi	r16,r16,255
 8001538:	8005661e 	bne	r16,zero,8002ad4 <___vfprintf_internal_r+0x22b8>
 800153c:	010205f4 	movhi	r4,2071
 8001540:	211c5c04 	addi	r4,r4,29040
 8001544:	d9003915 	stw	r4,228(sp)
 8001548:	9080080c 	andi	r2,r18,32
 800154c:	103f9f1e 	bne	r2,zero,80013cc <__alt_data_end+0xfc0013cc>
 8001550:	9080040c 	andi	r2,r18,16
 8001554:	1002eb26 	beq	r2,zero,8002104 <___vfprintf_internal_r+0x18e8>
 8001558:	d8802e17 	ldw	r2,184(sp)
 800155c:	002d883a 	mov	r22,zero
 8001560:	14c00017 	ldw	r19,0(r2)
 8001564:	10800104 	addi	r2,r2,4
 8001568:	d8802e15 	stw	r2,184(sp)
 800156c:	003f9c06 	br	80013e0 <__alt_data_end+0xfc0013e0>
 8001570:	d8802b07 	ldb	r2,172(sp)
 8001574:	1002e11e 	bne	r2,zero,80020fc <___vfprintf_internal_r+0x18e0>
 8001578:	00c00044 	movi	r3,1
 800157c:	d8c02905 	stb	r3,164(sp)
 8001580:	00c00804 	movi	r3,32
 8001584:	d8c02b05 	stb	r3,172(sp)
 8001588:	ac400007 	ldb	r17,0(r21)
 800158c:	003d0506 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8001590:	84000054 	ori	r16,r16,1
 8001594:	ac400007 	ldb	r17,0(r21)
 8001598:	003d0206 	br	80009a4 <__alt_data_end+0xfc0009a4>
 800159c:	8025883a 	mov	r18,r16
 80015a0:	dc002903 	ldbu	r16,164(sp)
 80015a4:	e011883a 	mov	r8,fp
 80015a8:	84003fcc 	andi	r16,r16,255
 80015ac:	803de726 	beq	r16,zero,8000d4c <__alt_data_end+0xfc000d4c>
 80015b0:	d8c02b03 	ldbu	r3,172(sp)
 80015b4:	d8c02785 	stb	r3,158(sp)
 80015b8:	003de406 	br	8000d4c <__alt_data_end+0xfc000d4c>
 80015bc:	84001014 	ori	r16,r16,64
 80015c0:	ac400007 	ldb	r17,0(r21)
 80015c4:	003cf706 	br	80009a4 <__alt_data_end+0xfc0009a4>
 80015c8:	ac400007 	ldb	r17,0(r21)
 80015cc:	00801b04 	movi	r2,108
 80015d0:	88838f26 	beq	r17,r2,8002410 <___vfprintf_internal_r+0x1bf4>
 80015d4:	84000414 	ori	r16,r16,16
 80015d8:	003cf206 	br	80009a4 <__alt_data_end+0xfc0009a4>
 80015dc:	8025883a 	mov	r18,r16
 80015e0:	dc002903 	ldbu	r16,164(sp)
 80015e4:	e011883a 	mov	r8,fp
 80015e8:	84003fcc 	andi	r16,r16,255
 80015ec:	80053f1e 	bne	r16,zero,8002aec <___vfprintf_internal_r+0x22d0>
 80015f0:	9080080c 	andi	r2,r18,32
 80015f4:	1002d226 	beq	r2,zero,8002140 <___vfprintf_internal_r+0x1924>
 80015f8:	d9002e17 	ldw	r4,184(sp)
 80015fc:	d9402f17 	ldw	r5,188(sp)
 8001600:	20800017 	ldw	r2,0(r4)
 8001604:	2807d7fa 	srai	r3,r5,31
 8001608:	21000104 	addi	r4,r4,4
 800160c:	d9002e15 	stw	r4,184(sp)
 8001610:	11400015 	stw	r5,0(r2)
 8001614:	10c00115 	stw	r3,4(r2)
 8001618:	003cb806 	br	80008fc <__alt_data_end+0xfc0008fc>
 800161c:	d8c02e17 	ldw	r3,184(sp)
 8001620:	d9002e17 	ldw	r4,184(sp)
 8001624:	8025883a 	mov	r18,r16
 8001628:	18800017 	ldw	r2,0(r3)
 800162c:	21000104 	addi	r4,r4,4
 8001630:	00c00044 	movi	r3,1
 8001634:	e011883a 	mov	r8,fp
 8001638:	d8c02915 	stw	r3,164(sp)
 800163c:	d8002785 	stb	zero,158(sp)
 8001640:	d8801405 	stb	r2,80(sp)
 8001644:	d9002e15 	stw	r4,184(sp)
 8001648:	d8c02b15 	stw	r3,172(sp)
 800164c:	d8002a15 	stw	zero,168(sp)
 8001650:	d8003215 	stw	zero,200(sp)
 8001654:	dc001404 	addi	r16,sp,80
 8001658:	0039883a 	mov	fp,zero
 800165c:	003e5306 	br	8000fac <__alt_data_end+0xfc000fac>
 8001660:	010205f4 	movhi	r4,2071
 8001664:	211c5c04 	addi	r4,r4,29040
 8001668:	0039883a 	mov	fp,zero
 800166c:	d9003915 	stw	r4,228(sp)
 8001670:	04401e04 	movi	r17,120
 8001674:	003f6906 	br	800141c <__alt_data_end+0xfc00141c>
 8001678:	8025883a 	mov	r18,r16
 800167c:	dc002903 	ldbu	r16,164(sp)
 8001680:	e011883a 	mov	r8,fp
 8001684:	84003fcc 	andi	r16,r16,255
 8001688:	8005081e 	bne	r16,zero,8002aac <___vfprintf_internal_r+0x2290>
 800168c:	883d6126 	beq	r17,zero,8000c14 <__alt_data_end+0xfc000c14>
 8001690:	00c00044 	movi	r3,1
 8001694:	d8c02915 	stw	r3,164(sp)
 8001698:	dc401405 	stb	r17,80(sp)
 800169c:	d8002785 	stb	zero,158(sp)
 80016a0:	003fe906 	br	8001648 <__alt_data_end+0xfc001648>
 80016a4:	014205f4 	movhi	r5,2071
 80016a8:	295c5c04 	addi	r5,r5,29040
 80016ac:	d9403915 	stw	r5,228(sp)
 80016b0:	d8c02e15 	stw	r3,184(sp)
 80016b4:	1025883a 	mov	r18,r2
 80016b8:	04401e04 	movi	r17,120
 80016bc:	9d84b03a 	or	r2,r19,r22
 80016c0:	1000fc1e 	bne	r2,zero,8001ab4 <___vfprintf_internal_r+0x1298>
 80016c4:	0039883a 	mov	fp,zero
 80016c8:	00800084 	movi	r2,2
 80016cc:	10803fcc 	andi	r2,r2,255
 80016d0:	00c00044 	movi	r3,1
 80016d4:	10c20f26 	beq	r2,r3,8001f14 <___vfprintf_internal_r+0x16f8>
 80016d8:	00c00084 	movi	r3,2
 80016dc:	10fd3326 	beq	r2,r3,8000bac <__alt_data_end+0xfc000bac>
 80016e0:	003e0b06 	br	8000f10 <__alt_data_end+0xfc000f10>
 80016e4:	d8c02017 	ldw	r3,128(sp)
 80016e8:	003e7106 	br	80010b0 <__alt_data_end+0xfc0010b0>
 80016ec:	00801944 	movi	r2,101
 80016f0:	14407e0e 	bge	r2,r17,80018ec <___vfprintf_internal_r+0x10d0>
 80016f4:	d9003617 	ldw	r4,216(sp)
 80016f8:	d9403817 	ldw	r5,224(sp)
 80016fc:	000d883a 	mov	r6,zero
 8001700:	000f883a 	mov	r7,zero
 8001704:	d8c03c15 	stw	r3,240(sp)
 8001708:	da003d15 	stw	r8,244(sp)
 800170c:	800bf340 	call	800bf34 <__eqdf2>
 8001710:	d8c03c17 	ldw	r3,240(sp)
 8001714:	da003d17 	ldw	r8,244(sp)
 8001718:	1000f71e 	bne	r2,zero,8001af8 <___vfprintf_internal_r+0x12dc>
 800171c:	d8801f17 	ldw	r2,124(sp)
 8001720:	010205f4 	movhi	r4,2071
 8001724:	211c6304 	addi	r4,r4,29068
 8001728:	18c00044 	addi	r3,r3,1
 800172c:	10800044 	addi	r2,r2,1
 8001730:	41000015 	stw	r4,0(r8)
 8001734:	01000044 	movi	r4,1
 8001738:	41000115 	stw	r4,4(r8)
 800173c:	d8c02015 	stw	r3,128(sp)
 8001740:	d8801f15 	stw	r2,124(sp)
 8001744:	010001c4 	movi	r4,7
 8001748:	2082b816 	blt	r4,r2,800222c <___vfprintf_internal_r+0x1a10>
 800174c:	42000204 	addi	r8,r8,8
 8001750:	d8802617 	ldw	r2,152(sp)
 8001754:	d9403317 	ldw	r5,204(sp)
 8001758:	11400216 	blt	r2,r5,8001764 <___vfprintf_internal_r+0xf48>
 800175c:	9080004c 	andi	r2,r18,1
 8001760:	103eb326 	beq	r2,zero,8001230 <__alt_data_end+0xfc001230>
 8001764:	d8803717 	ldw	r2,220(sp)
 8001768:	d9003417 	ldw	r4,208(sp)
 800176c:	d9403717 	ldw	r5,220(sp)
 8001770:	1887883a 	add	r3,r3,r2
 8001774:	d8801f17 	ldw	r2,124(sp)
 8001778:	41000015 	stw	r4,0(r8)
 800177c:	41400115 	stw	r5,4(r8)
 8001780:	10800044 	addi	r2,r2,1
 8001784:	d8c02015 	stw	r3,128(sp)
 8001788:	d8801f15 	stw	r2,124(sp)
 800178c:	010001c4 	movi	r4,7
 8001790:	20832916 	blt	r4,r2,8002438 <___vfprintf_internal_r+0x1c1c>
 8001794:	42000204 	addi	r8,r8,8
 8001798:	d8803317 	ldw	r2,204(sp)
 800179c:	143fffc4 	addi	r16,r2,-1
 80017a0:	043ea30e 	bge	zero,r16,8001230 <__alt_data_end+0xfc001230>
 80017a4:	04400404 	movi	r17,16
 80017a8:	d8801f17 	ldw	r2,124(sp)
 80017ac:	8c00880e 	bge	r17,r16,80019d0 <___vfprintf_internal_r+0x11b4>
 80017b0:	014205f4 	movhi	r5,2071
 80017b4:	295c6384 	addi	r5,r5,29070
 80017b8:	d9402c15 	stw	r5,176(sp)
 80017bc:	058001c4 	movi	r22,7
 80017c0:	dcc02d17 	ldw	r19,180(sp)
 80017c4:	00000306 	br	80017d4 <___vfprintf_internal_r+0xfb8>
 80017c8:	42000204 	addi	r8,r8,8
 80017cc:	843ffc04 	addi	r16,r16,-16
 80017d0:	8c00820e 	bge	r17,r16,80019dc <___vfprintf_internal_r+0x11c0>
 80017d4:	18c00404 	addi	r3,r3,16
 80017d8:	10800044 	addi	r2,r2,1
 80017dc:	45000015 	stw	r20,0(r8)
 80017e0:	44400115 	stw	r17,4(r8)
 80017e4:	d8c02015 	stw	r3,128(sp)
 80017e8:	d8801f15 	stw	r2,124(sp)
 80017ec:	b0bff60e 	bge	r22,r2,80017c8 <__alt_data_end+0xfc0017c8>
 80017f0:	d9801e04 	addi	r6,sp,120
 80017f4:	b80b883a 	mov	r5,r23
 80017f8:	9809883a 	mov	r4,r19
 80017fc:	8007ffc0 	call	8007ffc <__sprint_r>
 8001800:	103d0a1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001804:	d8c02017 	ldw	r3,128(sp)
 8001808:	d8801f17 	ldw	r2,124(sp)
 800180c:	da000404 	addi	r8,sp,16
 8001810:	003fee06 	br	80017cc <__alt_data_end+0xfc0017cc>
 8001814:	d9403117 	ldw	r5,196(sp)
 8001818:	d8802917 	ldw	r2,164(sp)
 800181c:	28adc83a 	sub	r22,r5,r2
 8001820:	05be410e 	bge	zero,r22,8001128 <__alt_data_end+0xfc001128>
 8001824:	07000404 	movi	fp,16
 8001828:	d8801f17 	ldw	r2,124(sp)
 800182c:	e5838f0e 	bge	fp,r22,800266c <___vfprintf_internal_r+0x1e50>
 8001830:	014205f4 	movhi	r5,2071
 8001834:	295c6384 	addi	r5,r5,29070
 8001838:	dc403015 	stw	r17,192(sp)
 800183c:	d9402c15 	stw	r5,176(sp)
 8001840:	b023883a 	mov	r17,r22
 8001844:	04c001c4 	movi	r19,7
 8001848:	a82d883a 	mov	r22,r21
 800184c:	902b883a 	mov	r21,r18
 8001850:	8025883a 	mov	r18,r16
 8001854:	dc002d17 	ldw	r16,180(sp)
 8001858:	00000306 	br	8001868 <___vfprintf_internal_r+0x104c>
 800185c:	8c7ffc04 	addi	r17,r17,-16
 8001860:	42000204 	addi	r8,r8,8
 8001864:	e440110e 	bge	fp,r17,80018ac <___vfprintf_internal_r+0x1090>
 8001868:	18c00404 	addi	r3,r3,16
 800186c:	10800044 	addi	r2,r2,1
 8001870:	45000015 	stw	r20,0(r8)
 8001874:	47000115 	stw	fp,4(r8)
 8001878:	d8c02015 	stw	r3,128(sp)
 800187c:	d8801f15 	stw	r2,124(sp)
 8001880:	98bff60e 	bge	r19,r2,800185c <__alt_data_end+0xfc00185c>
 8001884:	d9801e04 	addi	r6,sp,120
 8001888:	b80b883a 	mov	r5,r23
 800188c:	8009883a 	mov	r4,r16
 8001890:	8007ffc0 	call	8007ffc <__sprint_r>
 8001894:	103ce51e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001898:	8c7ffc04 	addi	r17,r17,-16
 800189c:	d8c02017 	ldw	r3,128(sp)
 80018a0:	d8801f17 	ldw	r2,124(sp)
 80018a4:	da000404 	addi	r8,sp,16
 80018a8:	e47fef16 	blt	fp,r17,8001868 <__alt_data_end+0xfc001868>
 80018ac:	9021883a 	mov	r16,r18
 80018b0:	a825883a 	mov	r18,r21
 80018b4:	b02b883a 	mov	r21,r22
 80018b8:	882d883a 	mov	r22,r17
 80018bc:	dc403017 	ldw	r17,192(sp)
 80018c0:	d9002c17 	ldw	r4,176(sp)
 80018c4:	1d87883a 	add	r3,r3,r22
 80018c8:	10800044 	addi	r2,r2,1
 80018cc:	41000015 	stw	r4,0(r8)
 80018d0:	45800115 	stw	r22,4(r8)
 80018d4:	d8c02015 	stw	r3,128(sp)
 80018d8:	d8801f15 	stw	r2,124(sp)
 80018dc:	010001c4 	movi	r4,7
 80018e0:	20818e16 	blt	r4,r2,8001f1c <___vfprintf_internal_r+0x1700>
 80018e4:	42000204 	addi	r8,r8,8
 80018e8:	003e0f06 	br	8001128 <__alt_data_end+0xfc001128>
 80018ec:	d9403317 	ldw	r5,204(sp)
 80018f0:	00800044 	movi	r2,1
 80018f4:	18c00044 	addi	r3,r3,1
 80018f8:	1141530e 	bge	r2,r5,8001e48 <___vfprintf_internal_r+0x162c>
 80018fc:	dc401f17 	ldw	r17,124(sp)
 8001900:	00800044 	movi	r2,1
 8001904:	40800115 	stw	r2,4(r8)
 8001908:	8c400044 	addi	r17,r17,1
 800190c:	44000015 	stw	r16,0(r8)
 8001910:	d8c02015 	stw	r3,128(sp)
 8001914:	dc401f15 	stw	r17,124(sp)
 8001918:	008001c4 	movi	r2,7
 800191c:	14416b16 	blt	r2,r17,8001ecc <___vfprintf_internal_r+0x16b0>
 8001920:	42000204 	addi	r8,r8,8
 8001924:	d8803717 	ldw	r2,220(sp)
 8001928:	d9003417 	ldw	r4,208(sp)
 800192c:	8c400044 	addi	r17,r17,1
 8001930:	10c7883a 	add	r3,r2,r3
 8001934:	40800115 	stw	r2,4(r8)
 8001938:	41000015 	stw	r4,0(r8)
 800193c:	d8c02015 	stw	r3,128(sp)
 8001940:	dc401f15 	stw	r17,124(sp)
 8001944:	008001c4 	movi	r2,7
 8001948:	14416916 	blt	r2,r17,8001ef0 <___vfprintf_internal_r+0x16d4>
 800194c:	45800204 	addi	r22,r8,8
 8001950:	d9003617 	ldw	r4,216(sp)
 8001954:	d9403817 	ldw	r5,224(sp)
 8001958:	000d883a 	mov	r6,zero
 800195c:	000f883a 	mov	r7,zero
 8001960:	d8c03c15 	stw	r3,240(sp)
 8001964:	800bf340 	call	800bf34 <__eqdf2>
 8001968:	d8c03c17 	ldw	r3,240(sp)
 800196c:	1000bc26 	beq	r2,zero,8001c60 <___vfprintf_internal_r+0x1444>
 8001970:	d9403317 	ldw	r5,204(sp)
 8001974:	84000044 	addi	r16,r16,1
 8001978:	8c400044 	addi	r17,r17,1
 800197c:	28bfffc4 	addi	r2,r5,-1
 8001980:	1887883a 	add	r3,r3,r2
 8001984:	b0800115 	stw	r2,4(r22)
 8001988:	b4000015 	stw	r16,0(r22)
 800198c:	d8c02015 	stw	r3,128(sp)
 8001990:	dc401f15 	stw	r17,124(sp)
 8001994:	008001c4 	movi	r2,7
 8001998:	14414316 	blt	r2,r17,8001ea8 <___vfprintf_internal_r+0x168c>
 800199c:	b5800204 	addi	r22,r22,8
 80019a0:	d9003a17 	ldw	r4,232(sp)
 80019a4:	df0022c4 	addi	fp,sp,139
 80019a8:	8c400044 	addi	r17,r17,1
 80019ac:	20c7883a 	add	r3,r4,r3
 80019b0:	b7000015 	stw	fp,0(r22)
 80019b4:	b1000115 	stw	r4,4(r22)
 80019b8:	d8c02015 	stw	r3,128(sp)
 80019bc:	dc401f15 	stw	r17,124(sp)
 80019c0:	008001c4 	movi	r2,7
 80019c4:	14400e16 	blt	r2,r17,8001a00 <___vfprintf_internal_r+0x11e4>
 80019c8:	b2000204 	addi	r8,r22,8
 80019cc:	003e1806 	br	8001230 <__alt_data_end+0xfc001230>
 80019d0:	010205f4 	movhi	r4,2071
 80019d4:	211c6384 	addi	r4,r4,29070
 80019d8:	d9002c15 	stw	r4,176(sp)
 80019dc:	d9002c17 	ldw	r4,176(sp)
 80019e0:	1c07883a 	add	r3,r3,r16
 80019e4:	44000115 	stw	r16,4(r8)
 80019e8:	41000015 	stw	r4,0(r8)
 80019ec:	10800044 	addi	r2,r2,1
 80019f0:	d8c02015 	stw	r3,128(sp)
 80019f4:	d8801f15 	stw	r2,124(sp)
 80019f8:	010001c4 	movi	r4,7
 80019fc:	20be0b0e 	bge	r4,r2,800122c <__alt_data_end+0xfc00122c>
 8001a00:	d9002d17 	ldw	r4,180(sp)
 8001a04:	d9801e04 	addi	r6,sp,120
 8001a08:	b80b883a 	mov	r5,r23
 8001a0c:	8007ffc0 	call	8007ffc <__sprint_r>
 8001a10:	103c861e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001a14:	d8c02017 	ldw	r3,128(sp)
 8001a18:	da000404 	addi	r8,sp,16
 8001a1c:	003e0406 	br	8001230 <__alt_data_end+0xfc001230>
 8001a20:	d9002d17 	ldw	r4,180(sp)
 8001a24:	d9801e04 	addi	r6,sp,120
 8001a28:	b80b883a 	mov	r5,r23
 8001a2c:	8007ffc0 	call	8007ffc <__sprint_r>
 8001a30:	103e3b26 	beq	r2,zero,8001320 <__alt_data_end+0xfc001320>
 8001a34:	003c7d06 	br	8000c2c <__alt_data_end+0xfc000c2c>
 8001a38:	d9002d17 	ldw	r4,180(sp)
 8001a3c:	d9801e04 	addi	r6,sp,120
 8001a40:	b80b883a 	mov	r5,r23
 8001a44:	8007ffc0 	call	8007ffc <__sprint_r>
 8001a48:	103c781e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001a4c:	d8c02017 	ldw	r3,128(sp)
 8001a50:	da000404 	addi	r8,sp,16
 8001a54:	003de906 	br	80011fc <__alt_data_end+0xfc0011fc>
 8001a58:	d9002d17 	ldw	r4,180(sp)
 8001a5c:	d9801e04 	addi	r6,sp,120
 8001a60:	b80b883a 	mov	r5,r23
 8001a64:	8007ffc0 	call	8007ffc <__sprint_r>
 8001a68:	103c701e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001a6c:	d8c02017 	ldw	r3,128(sp)
 8001a70:	da000404 	addi	r8,sp,16
 8001a74:	003d9b06 	br	80010e4 <__alt_data_end+0xfc0010e4>
 8001a78:	d9002d17 	ldw	r4,180(sp)
 8001a7c:	d9801e04 	addi	r6,sp,120
 8001a80:	b80b883a 	mov	r5,r23
 8001a84:	8007ffc0 	call	8007ffc <__sprint_r>
 8001a88:	103c681e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001a8c:	d8c02017 	ldw	r3,128(sp)
 8001a90:	da000404 	addi	r8,sp,16
 8001a94:	003da106 	br	800111c <__alt_data_end+0xfc00111c>
 8001a98:	d9402a17 	ldw	r5,168(sp)
 8001a9c:	d8002785 	stb	zero,158(sp)
 8001aa0:	283f0616 	blt	r5,zero,80016bc <__alt_data_end+0xfc0016bc>
 8001aa4:	00ffdfc4 	movi	r3,-129
 8001aa8:	9d84b03a 	or	r2,r19,r22
 8001aac:	90e4703a 	and	r18,r18,r3
 8001ab0:	103c3b26 	beq	r2,zero,8000ba0 <__alt_data_end+0xfc000ba0>
 8001ab4:	0039883a 	mov	fp,zero
 8001ab8:	003e5806 	br	800141c <__alt_data_end+0xfc00141c>
 8001abc:	9080040c 	andi	r2,r18,16
 8001ac0:	1001b326 	beq	r2,zero,8002190 <___vfprintf_internal_r+0x1974>
 8001ac4:	d8c02e17 	ldw	r3,184(sp)
 8001ac8:	d9002a17 	ldw	r4,168(sp)
 8001acc:	d8002785 	stb	zero,158(sp)
 8001ad0:	18800104 	addi	r2,r3,4
 8001ad4:	1cc00017 	ldw	r19,0(r3)
 8001ad8:	002d883a 	mov	r22,zero
 8001adc:	2001b516 	blt	r4,zero,80021b4 <___vfprintf_internal_r+0x1998>
 8001ae0:	00ffdfc4 	movi	r3,-129
 8001ae4:	d8802e15 	stw	r2,184(sp)
 8001ae8:	90e4703a 	and	r18,r18,r3
 8001aec:	983d0526 	beq	r19,zero,8000f04 <__alt_data_end+0xfc000f04>
 8001af0:	0039883a 	mov	fp,zero
 8001af4:	003d0806 	br	8000f18 <__alt_data_end+0xfc000f18>
 8001af8:	dc402617 	ldw	r17,152(sp)
 8001afc:	0441d30e 	bge	zero,r17,800224c <___vfprintf_internal_r+0x1a30>
 8001b00:	dc403217 	ldw	r17,200(sp)
 8001b04:	d8803317 	ldw	r2,204(sp)
 8001b08:	1440010e 	bge	r2,r17,8001b10 <___vfprintf_internal_r+0x12f4>
 8001b0c:	1023883a 	mov	r17,r2
 8001b10:	04400a0e 	bge	zero,r17,8001b3c <___vfprintf_internal_r+0x1320>
 8001b14:	d8801f17 	ldw	r2,124(sp)
 8001b18:	1c47883a 	add	r3,r3,r17
 8001b1c:	44000015 	stw	r16,0(r8)
 8001b20:	10800044 	addi	r2,r2,1
 8001b24:	44400115 	stw	r17,4(r8)
 8001b28:	d8c02015 	stw	r3,128(sp)
 8001b2c:	d8801f15 	stw	r2,124(sp)
 8001b30:	010001c4 	movi	r4,7
 8001b34:	20826516 	blt	r4,r2,80024cc <___vfprintf_internal_r+0x1cb0>
 8001b38:	42000204 	addi	r8,r8,8
 8001b3c:	88026116 	blt	r17,zero,80024c4 <___vfprintf_internal_r+0x1ca8>
 8001b40:	d9003217 	ldw	r4,200(sp)
 8001b44:	2463c83a 	sub	r17,r4,r17
 8001b48:	04407b0e 	bge	zero,r17,8001d38 <___vfprintf_internal_r+0x151c>
 8001b4c:	05800404 	movi	r22,16
 8001b50:	d8801f17 	ldw	r2,124(sp)
 8001b54:	b4419d0e 	bge	r22,r17,80021cc <___vfprintf_internal_r+0x19b0>
 8001b58:	010205f4 	movhi	r4,2071
 8001b5c:	211c6384 	addi	r4,r4,29070
 8001b60:	d9002c15 	stw	r4,176(sp)
 8001b64:	070001c4 	movi	fp,7
 8001b68:	dcc02d17 	ldw	r19,180(sp)
 8001b6c:	00000306 	br	8001b7c <___vfprintf_internal_r+0x1360>
 8001b70:	42000204 	addi	r8,r8,8
 8001b74:	8c7ffc04 	addi	r17,r17,-16
 8001b78:	b441970e 	bge	r22,r17,80021d8 <___vfprintf_internal_r+0x19bc>
 8001b7c:	18c00404 	addi	r3,r3,16
 8001b80:	10800044 	addi	r2,r2,1
 8001b84:	45000015 	stw	r20,0(r8)
 8001b88:	45800115 	stw	r22,4(r8)
 8001b8c:	d8c02015 	stw	r3,128(sp)
 8001b90:	d8801f15 	stw	r2,124(sp)
 8001b94:	e0bff60e 	bge	fp,r2,8001b70 <__alt_data_end+0xfc001b70>
 8001b98:	d9801e04 	addi	r6,sp,120
 8001b9c:	b80b883a 	mov	r5,r23
 8001ba0:	9809883a 	mov	r4,r19
 8001ba4:	8007ffc0 	call	8007ffc <__sprint_r>
 8001ba8:	103c201e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001bac:	d8c02017 	ldw	r3,128(sp)
 8001bb0:	d8801f17 	ldw	r2,124(sp)
 8001bb4:	da000404 	addi	r8,sp,16
 8001bb8:	003fee06 	br	8001b74 <__alt_data_end+0xfc001b74>
 8001bbc:	d9002d17 	ldw	r4,180(sp)
 8001bc0:	d9801e04 	addi	r6,sp,120
 8001bc4:	b80b883a 	mov	r5,r23
 8001bc8:	8007ffc0 	call	8007ffc <__sprint_r>
 8001bcc:	103c171e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001bd0:	d8c02017 	ldw	r3,128(sp)
 8001bd4:	df002787 	ldb	fp,158(sp)
 8001bd8:	da000404 	addi	r8,sp,16
 8001bdc:	003d3406 	br	80010b0 <__alt_data_end+0xfc0010b0>
 8001be0:	9080040c 	andi	r2,r18,16
 8001be4:	10016126 	beq	r2,zero,800216c <___vfprintf_internal_r+0x1950>
 8001be8:	d9402e17 	ldw	r5,184(sp)
 8001bec:	2cc00017 	ldw	r19,0(r5)
 8001bf0:	29400104 	addi	r5,r5,4
 8001bf4:	d9402e15 	stw	r5,184(sp)
 8001bf8:	982dd7fa 	srai	r22,r19,31
 8001bfc:	b005883a 	mov	r2,r22
 8001c00:	003c5a06 	br	8000d6c <__alt_data_end+0xfc000d6c>
 8001c04:	9080040c 	andi	r2,r18,16
 8001c08:	10003526 	beq	r2,zero,8001ce0 <___vfprintf_internal_r+0x14c4>
 8001c0c:	d8c02e17 	ldw	r3,184(sp)
 8001c10:	d9002a17 	ldw	r4,168(sp)
 8001c14:	d8002785 	stb	zero,158(sp)
 8001c18:	18800104 	addi	r2,r3,4
 8001c1c:	1cc00017 	ldw	r19,0(r3)
 8001c20:	002d883a 	mov	r22,zero
 8001c24:	20003716 	blt	r4,zero,8001d04 <___vfprintf_internal_r+0x14e8>
 8001c28:	00ffdfc4 	movi	r3,-129
 8001c2c:	d8802e15 	stw	r2,184(sp)
 8001c30:	90e4703a 	and	r18,r18,r3
 8001c34:	0039883a 	mov	fp,zero
 8001c38:	983dd426 	beq	r19,zero,800138c <__alt_data_end+0xfc00138c>
 8001c3c:	00800244 	movi	r2,9
 8001c40:	14fc5336 	bltu	r2,r19,8000d90 <__alt_data_end+0xfc000d90>
 8001c44:	d8c02817 	ldw	r3,160(sp)
 8001c48:	dc001dc4 	addi	r16,sp,119
 8001c4c:	9cc00c04 	addi	r19,r19,48
 8001c50:	1c07c83a 	sub	r3,r3,r16
 8001c54:	dcc01dc5 	stb	r19,119(sp)
 8001c58:	d8c02b15 	stw	r3,172(sp)
 8001c5c:	003cc606 	br	8000f78 <__alt_data_end+0xfc000f78>
 8001c60:	d8803317 	ldw	r2,204(sp)
 8001c64:	143fffc4 	addi	r16,r2,-1
 8001c68:	043f4d0e 	bge	zero,r16,80019a0 <__alt_data_end+0xfc0019a0>
 8001c6c:	07000404 	movi	fp,16
 8001c70:	e400810e 	bge	fp,r16,8001e78 <___vfprintf_internal_r+0x165c>
 8001c74:	014205f4 	movhi	r5,2071
 8001c78:	295c6384 	addi	r5,r5,29070
 8001c7c:	d9402c15 	stw	r5,176(sp)
 8001c80:	01c001c4 	movi	r7,7
 8001c84:	dcc02d17 	ldw	r19,180(sp)
 8001c88:	00000306 	br	8001c98 <___vfprintf_internal_r+0x147c>
 8001c8c:	b5800204 	addi	r22,r22,8
 8001c90:	843ffc04 	addi	r16,r16,-16
 8001c94:	e4007b0e 	bge	fp,r16,8001e84 <___vfprintf_internal_r+0x1668>
 8001c98:	18c00404 	addi	r3,r3,16
 8001c9c:	8c400044 	addi	r17,r17,1
 8001ca0:	b5000015 	stw	r20,0(r22)
 8001ca4:	b7000115 	stw	fp,4(r22)
 8001ca8:	d8c02015 	stw	r3,128(sp)
 8001cac:	dc401f15 	stw	r17,124(sp)
 8001cb0:	3c7ff60e 	bge	r7,r17,8001c8c <__alt_data_end+0xfc001c8c>
 8001cb4:	d9801e04 	addi	r6,sp,120
 8001cb8:	b80b883a 	mov	r5,r23
 8001cbc:	9809883a 	mov	r4,r19
 8001cc0:	d9c03c15 	stw	r7,240(sp)
 8001cc4:	8007ffc0 	call	8007ffc <__sprint_r>
 8001cc8:	d9c03c17 	ldw	r7,240(sp)
 8001ccc:	103bd71e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001cd0:	d8c02017 	ldw	r3,128(sp)
 8001cd4:	dc401f17 	ldw	r17,124(sp)
 8001cd8:	dd800404 	addi	r22,sp,16
 8001cdc:	003fec06 	br	8001c90 <__alt_data_end+0xfc001c90>
 8001ce0:	9080100c 	andi	r2,r18,64
 8001ce4:	d8002785 	stb	zero,158(sp)
 8001ce8:	10010e26 	beq	r2,zero,8002124 <___vfprintf_internal_r+0x1908>
 8001cec:	d9402e17 	ldw	r5,184(sp)
 8001cf0:	d8c02a17 	ldw	r3,168(sp)
 8001cf4:	002d883a 	mov	r22,zero
 8001cf8:	28800104 	addi	r2,r5,4
 8001cfc:	2cc0000b 	ldhu	r19,0(r5)
 8001d00:	183fc90e 	bge	r3,zero,8001c28 <__alt_data_end+0xfc001c28>
 8001d04:	d8802e15 	stw	r2,184(sp)
 8001d08:	0039883a 	mov	fp,zero
 8001d0c:	9d84b03a 	or	r2,r19,r22
 8001d10:	103c1e1e 	bne	r2,zero,8000d8c <__alt_data_end+0xfc000d8c>
 8001d14:	00800044 	movi	r2,1
 8001d18:	003e6c06 	br	80016cc <__alt_data_end+0xfc0016cc>
 8001d1c:	d9002d17 	ldw	r4,180(sp)
 8001d20:	d9801e04 	addi	r6,sp,120
 8001d24:	b80b883a 	mov	r5,r23
 8001d28:	8007ffc0 	call	8007ffc <__sprint_r>
 8001d2c:	103bbf1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001d30:	d8c02017 	ldw	r3,128(sp)
 8001d34:	da000404 	addi	r8,sp,16
 8001d38:	d9003217 	ldw	r4,200(sp)
 8001d3c:	d8802617 	ldw	r2,152(sp)
 8001d40:	d9403317 	ldw	r5,204(sp)
 8001d44:	8123883a 	add	r17,r16,r4
 8001d48:	11400216 	blt	r2,r5,8001d54 <___vfprintf_internal_r+0x1538>
 8001d4c:	9100004c 	andi	r4,r18,1
 8001d50:	20000d26 	beq	r4,zero,8001d88 <___vfprintf_internal_r+0x156c>
 8001d54:	d9003717 	ldw	r4,220(sp)
 8001d58:	d9403417 	ldw	r5,208(sp)
 8001d5c:	1907883a 	add	r3,r3,r4
 8001d60:	d9001f17 	ldw	r4,124(sp)
 8001d64:	41400015 	stw	r5,0(r8)
 8001d68:	d9403717 	ldw	r5,220(sp)
 8001d6c:	21000044 	addi	r4,r4,1
 8001d70:	d8c02015 	stw	r3,128(sp)
 8001d74:	41400115 	stw	r5,4(r8)
 8001d78:	d9001f15 	stw	r4,124(sp)
 8001d7c:	014001c4 	movi	r5,7
 8001d80:	2901e816 	blt	r5,r4,8002524 <___vfprintf_internal_r+0x1d08>
 8001d84:	42000204 	addi	r8,r8,8
 8001d88:	d9003317 	ldw	r4,204(sp)
 8001d8c:	8121883a 	add	r16,r16,r4
 8001d90:	2085c83a 	sub	r2,r4,r2
 8001d94:	8461c83a 	sub	r16,r16,r17
 8001d98:	1400010e 	bge	r2,r16,8001da0 <___vfprintf_internal_r+0x1584>
 8001d9c:	1021883a 	mov	r16,r2
 8001da0:	04000a0e 	bge	zero,r16,8001dcc <___vfprintf_internal_r+0x15b0>
 8001da4:	d9001f17 	ldw	r4,124(sp)
 8001da8:	1c07883a 	add	r3,r3,r16
 8001dac:	44400015 	stw	r17,0(r8)
 8001db0:	21000044 	addi	r4,r4,1
 8001db4:	44000115 	stw	r16,4(r8)
 8001db8:	d8c02015 	stw	r3,128(sp)
 8001dbc:	d9001f15 	stw	r4,124(sp)
 8001dc0:	014001c4 	movi	r5,7
 8001dc4:	2901fb16 	blt	r5,r4,80025b4 <___vfprintf_internal_r+0x1d98>
 8001dc8:	42000204 	addi	r8,r8,8
 8001dcc:	8001f716 	blt	r16,zero,80025ac <___vfprintf_internal_r+0x1d90>
 8001dd0:	1421c83a 	sub	r16,r2,r16
 8001dd4:	043d160e 	bge	zero,r16,8001230 <__alt_data_end+0xfc001230>
 8001dd8:	04400404 	movi	r17,16
 8001ddc:	d8801f17 	ldw	r2,124(sp)
 8001de0:	8c3efb0e 	bge	r17,r16,80019d0 <__alt_data_end+0xfc0019d0>
 8001de4:	014205f4 	movhi	r5,2071
 8001de8:	295c6384 	addi	r5,r5,29070
 8001dec:	d9402c15 	stw	r5,176(sp)
 8001df0:	058001c4 	movi	r22,7
 8001df4:	dcc02d17 	ldw	r19,180(sp)
 8001df8:	00000306 	br	8001e08 <___vfprintf_internal_r+0x15ec>
 8001dfc:	42000204 	addi	r8,r8,8
 8001e00:	843ffc04 	addi	r16,r16,-16
 8001e04:	8c3ef50e 	bge	r17,r16,80019dc <__alt_data_end+0xfc0019dc>
 8001e08:	18c00404 	addi	r3,r3,16
 8001e0c:	10800044 	addi	r2,r2,1
 8001e10:	45000015 	stw	r20,0(r8)
 8001e14:	44400115 	stw	r17,4(r8)
 8001e18:	d8c02015 	stw	r3,128(sp)
 8001e1c:	d8801f15 	stw	r2,124(sp)
 8001e20:	b0bff60e 	bge	r22,r2,8001dfc <__alt_data_end+0xfc001dfc>
 8001e24:	d9801e04 	addi	r6,sp,120
 8001e28:	b80b883a 	mov	r5,r23
 8001e2c:	9809883a 	mov	r4,r19
 8001e30:	8007ffc0 	call	8007ffc <__sprint_r>
 8001e34:	103b7d1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001e38:	d8c02017 	ldw	r3,128(sp)
 8001e3c:	d8801f17 	ldw	r2,124(sp)
 8001e40:	da000404 	addi	r8,sp,16
 8001e44:	003fee06 	br	8001e00 <__alt_data_end+0xfc001e00>
 8001e48:	9088703a 	and	r4,r18,r2
 8001e4c:	203eab1e 	bne	r4,zero,80018fc <__alt_data_end+0xfc0018fc>
 8001e50:	dc401f17 	ldw	r17,124(sp)
 8001e54:	40800115 	stw	r2,4(r8)
 8001e58:	44000015 	stw	r16,0(r8)
 8001e5c:	8c400044 	addi	r17,r17,1
 8001e60:	d8c02015 	stw	r3,128(sp)
 8001e64:	dc401f15 	stw	r17,124(sp)
 8001e68:	008001c4 	movi	r2,7
 8001e6c:	14400e16 	blt	r2,r17,8001ea8 <___vfprintf_internal_r+0x168c>
 8001e70:	45800204 	addi	r22,r8,8
 8001e74:	003eca06 	br	80019a0 <__alt_data_end+0xfc0019a0>
 8001e78:	010205f4 	movhi	r4,2071
 8001e7c:	211c6384 	addi	r4,r4,29070
 8001e80:	d9002c15 	stw	r4,176(sp)
 8001e84:	d8802c17 	ldw	r2,176(sp)
 8001e88:	1c07883a 	add	r3,r3,r16
 8001e8c:	8c400044 	addi	r17,r17,1
 8001e90:	b0800015 	stw	r2,0(r22)
 8001e94:	b4000115 	stw	r16,4(r22)
 8001e98:	d8c02015 	stw	r3,128(sp)
 8001e9c:	dc401f15 	stw	r17,124(sp)
 8001ea0:	008001c4 	movi	r2,7
 8001ea4:	147ebd0e 	bge	r2,r17,800199c <__alt_data_end+0xfc00199c>
 8001ea8:	d9002d17 	ldw	r4,180(sp)
 8001eac:	d9801e04 	addi	r6,sp,120
 8001eb0:	b80b883a 	mov	r5,r23
 8001eb4:	8007ffc0 	call	8007ffc <__sprint_r>
 8001eb8:	103b5c1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001ebc:	d8c02017 	ldw	r3,128(sp)
 8001ec0:	dc401f17 	ldw	r17,124(sp)
 8001ec4:	dd800404 	addi	r22,sp,16
 8001ec8:	003eb506 	br	80019a0 <__alt_data_end+0xfc0019a0>
 8001ecc:	d9002d17 	ldw	r4,180(sp)
 8001ed0:	d9801e04 	addi	r6,sp,120
 8001ed4:	b80b883a 	mov	r5,r23
 8001ed8:	8007ffc0 	call	8007ffc <__sprint_r>
 8001edc:	103b531e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001ee0:	d8c02017 	ldw	r3,128(sp)
 8001ee4:	dc401f17 	ldw	r17,124(sp)
 8001ee8:	da000404 	addi	r8,sp,16
 8001eec:	003e8d06 	br	8001924 <__alt_data_end+0xfc001924>
 8001ef0:	d9002d17 	ldw	r4,180(sp)
 8001ef4:	d9801e04 	addi	r6,sp,120
 8001ef8:	b80b883a 	mov	r5,r23
 8001efc:	8007ffc0 	call	8007ffc <__sprint_r>
 8001f00:	103b4a1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001f04:	d8c02017 	ldw	r3,128(sp)
 8001f08:	dc401f17 	ldw	r17,124(sp)
 8001f0c:	dd800404 	addi	r22,sp,16
 8001f10:	003e8f06 	br	8001950 <__alt_data_end+0xfc001950>
 8001f14:	0027883a 	mov	r19,zero
 8001f18:	003f4a06 	br	8001c44 <__alt_data_end+0xfc001c44>
 8001f1c:	d9002d17 	ldw	r4,180(sp)
 8001f20:	d9801e04 	addi	r6,sp,120
 8001f24:	b80b883a 	mov	r5,r23
 8001f28:	8007ffc0 	call	8007ffc <__sprint_r>
 8001f2c:	103b3f1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8001f30:	d8c02017 	ldw	r3,128(sp)
 8001f34:	da000404 	addi	r8,sp,16
 8001f38:	003c7b06 	br	8001128 <__alt_data_end+0xfc001128>
 8001f3c:	d9402a17 	ldw	r5,168(sp)
 8001f40:	04e7c83a 	sub	r19,zero,r19
 8001f44:	07000b44 	movi	fp,45
 8001f48:	9804c03a 	cmpne	r2,r19,zero
 8001f4c:	05adc83a 	sub	r22,zero,r22
 8001f50:	df002785 	stb	fp,158(sp)
 8001f54:	b0adc83a 	sub	r22,r22,r2
 8001f58:	28017b16 	blt	r5,zero,8002548 <___vfprintf_internal_r+0x1d2c>
 8001f5c:	00bfdfc4 	movi	r2,-129
 8001f60:	90a4703a 	and	r18,r18,r2
 8001f64:	003b8906 	br	8000d8c <__alt_data_end+0xfc000d8c>
 8001f68:	d9003617 	ldw	r4,216(sp)
 8001f6c:	d9403817 	ldw	r5,224(sp)
 8001f70:	da003d15 	stw	r8,244(sp)
 8001f74:	8007c200 	call	8007c20 <__fpclassifyd>
 8001f78:	da003d17 	ldw	r8,244(sp)
 8001f7c:	1000f026 	beq	r2,zero,8002340 <___vfprintf_internal_r+0x1b24>
 8001f80:	d9002a17 	ldw	r4,168(sp)
 8001f84:	05bff7c4 	movi	r22,-33
 8001f88:	00bfffc4 	movi	r2,-1
 8001f8c:	8dac703a 	and	r22,r17,r22
 8001f90:	20820026 	beq	r4,r2,8002794 <___vfprintf_internal_r+0x1f78>
 8001f94:	008011c4 	movi	r2,71
 8001f98:	b081f726 	beq	r22,r2,8002778 <___vfprintf_internal_r+0x1f5c>
 8001f9c:	d9003817 	ldw	r4,224(sp)
 8001fa0:	90c04014 	ori	r3,r18,256
 8001fa4:	d8c02c15 	stw	r3,176(sp)
 8001fa8:	20021516 	blt	r4,zero,8002800 <___vfprintf_internal_r+0x1fe4>
 8001fac:	dcc03817 	ldw	r19,224(sp)
 8001fb0:	d8002905 	stb	zero,164(sp)
 8001fb4:	00801984 	movi	r2,102
 8001fb8:	8881f926 	beq	r17,r2,80027a0 <___vfprintf_internal_r+0x1f84>
 8001fbc:	00801184 	movi	r2,70
 8001fc0:	88821c26 	beq	r17,r2,8002834 <___vfprintf_internal_r+0x2018>
 8001fc4:	00801144 	movi	r2,69
 8001fc8:	b081ef26 	beq	r22,r2,8002788 <___vfprintf_internal_r+0x1f6c>
 8001fcc:	d8c02a17 	ldw	r3,168(sp)
 8001fd0:	d8802104 	addi	r2,sp,132
 8001fd4:	d8800315 	stw	r2,12(sp)
 8001fd8:	d9403617 	ldw	r5,216(sp)
 8001fdc:	d8802504 	addi	r2,sp,148
 8001fe0:	d9002d17 	ldw	r4,180(sp)
 8001fe4:	d8800215 	stw	r2,8(sp)
 8001fe8:	d8802604 	addi	r2,sp,152
 8001fec:	d8c00015 	stw	r3,0(sp)
 8001ff0:	d8800115 	stw	r2,4(sp)
 8001ff4:	01c00084 	movi	r7,2
 8001ff8:	980d883a 	mov	r6,r19
 8001ffc:	d8c03c15 	stw	r3,240(sp)
 8002000:	da003d15 	stw	r8,244(sp)
 8002004:	8002f4c0 	call	8002f4c <_dtoa_r>
 8002008:	1021883a 	mov	r16,r2
 800200c:	008019c4 	movi	r2,103
 8002010:	d8c03c17 	ldw	r3,240(sp)
 8002014:	da003d17 	ldw	r8,244(sp)
 8002018:	88817126 	beq	r17,r2,80025e0 <___vfprintf_internal_r+0x1dc4>
 800201c:	008011c4 	movi	r2,71
 8002020:	88829126 	beq	r17,r2,8002a68 <___vfprintf_internal_r+0x224c>
 8002024:	80f9883a 	add	fp,r16,r3
 8002028:	d9003617 	ldw	r4,216(sp)
 800202c:	000d883a 	mov	r6,zero
 8002030:	000f883a 	mov	r7,zero
 8002034:	980b883a 	mov	r5,r19
 8002038:	da003d15 	stw	r8,244(sp)
 800203c:	800bf340 	call	800bf34 <__eqdf2>
 8002040:	da003d17 	ldw	r8,244(sp)
 8002044:	10018d26 	beq	r2,zero,800267c <___vfprintf_internal_r+0x1e60>
 8002048:	d8802117 	ldw	r2,132(sp)
 800204c:	1700062e 	bgeu	r2,fp,8002068 <___vfprintf_internal_r+0x184c>
 8002050:	01000c04 	movi	r4,48
 8002054:	10c00044 	addi	r3,r2,1
 8002058:	d8c02115 	stw	r3,132(sp)
 800205c:	11000005 	stb	r4,0(r2)
 8002060:	d8802117 	ldw	r2,132(sp)
 8002064:	173ffb36 	bltu	r2,fp,8002054 <__alt_data_end+0xfc002054>
 8002068:	1405c83a 	sub	r2,r2,r16
 800206c:	d8803315 	stw	r2,204(sp)
 8002070:	008011c4 	movi	r2,71
 8002074:	b0817626 	beq	r22,r2,8002650 <___vfprintf_internal_r+0x1e34>
 8002078:	00801944 	movi	r2,101
 800207c:	1442800e 	bge	r2,r17,8002a80 <___vfprintf_internal_r+0x2264>
 8002080:	d8c02617 	ldw	r3,152(sp)
 8002084:	00801984 	movi	r2,102
 8002088:	d8c03215 	stw	r3,200(sp)
 800208c:	8881fe26 	beq	r17,r2,8002888 <___vfprintf_internal_r+0x206c>
 8002090:	d8c03217 	ldw	r3,200(sp)
 8002094:	d9003317 	ldw	r4,204(sp)
 8002098:	1901dd16 	blt	r3,r4,8002810 <___vfprintf_internal_r+0x1ff4>
 800209c:	9480004c 	andi	r18,r18,1
 80020a0:	90022b1e 	bne	r18,zero,8002950 <___vfprintf_internal_r+0x2134>
 80020a4:	1805883a 	mov	r2,r3
 80020a8:	18028316 	blt	r3,zero,8002ab8 <___vfprintf_internal_r+0x229c>
 80020ac:	d8c03217 	ldw	r3,200(sp)
 80020b0:	044019c4 	movi	r17,103
 80020b4:	d8c02b15 	stw	r3,172(sp)
 80020b8:	df002907 	ldb	fp,164(sp)
 80020bc:	e001531e 	bne	fp,zero,800260c <___vfprintf_internal_r+0x1df0>
 80020c0:	df002783 	ldbu	fp,158(sp)
 80020c4:	d8802915 	stw	r2,164(sp)
 80020c8:	dc802c17 	ldw	r18,176(sp)
 80020cc:	d8002a15 	stw	zero,168(sp)
 80020d0:	003baf06 	br	8000f90 <__alt_data_end+0xfc000f90>
 80020d4:	d8c02e17 	ldw	r3,184(sp)
 80020d8:	d9002e17 	ldw	r4,184(sp)
 80020dc:	d9402e17 	ldw	r5,184(sp)
 80020e0:	18c00017 	ldw	r3,0(r3)
 80020e4:	21000117 	ldw	r4,4(r4)
 80020e8:	29400204 	addi	r5,r5,8
 80020ec:	d8c03615 	stw	r3,216(sp)
 80020f0:	d9003815 	stw	r4,224(sp)
 80020f4:	d9402e15 	stw	r5,184(sp)
 80020f8:	003b5006 	br	8000e3c <__alt_data_end+0xfc000e3c>
 80020fc:	ac400007 	ldb	r17,0(r21)
 8002100:	003a2806 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8002104:	9080100c 	andi	r2,r18,64
 8002108:	1000a826 	beq	r2,zero,80023ac <___vfprintf_internal_r+0x1b90>
 800210c:	d8c02e17 	ldw	r3,184(sp)
 8002110:	002d883a 	mov	r22,zero
 8002114:	1cc0000b 	ldhu	r19,0(r3)
 8002118:	18c00104 	addi	r3,r3,4
 800211c:	d8c02e15 	stw	r3,184(sp)
 8002120:	003caf06 	br	80013e0 <__alt_data_end+0xfc0013e0>
 8002124:	d9002e17 	ldw	r4,184(sp)
 8002128:	d9402a17 	ldw	r5,168(sp)
 800212c:	002d883a 	mov	r22,zero
 8002130:	20800104 	addi	r2,r4,4
 8002134:	24c00017 	ldw	r19,0(r4)
 8002138:	283ebb0e 	bge	r5,zero,8001c28 <__alt_data_end+0xfc001c28>
 800213c:	003ef106 	br	8001d04 <__alt_data_end+0xfc001d04>
 8002140:	9080040c 	andi	r2,r18,16
 8002144:	1000921e 	bne	r2,zero,8002390 <___vfprintf_internal_r+0x1b74>
 8002148:	9480100c 	andi	r18,r18,64
 800214c:	90013926 	beq	r18,zero,8002634 <___vfprintf_internal_r+0x1e18>
 8002150:	d9402e17 	ldw	r5,184(sp)
 8002154:	d8c02f17 	ldw	r3,188(sp)
 8002158:	28800017 	ldw	r2,0(r5)
 800215c:	29400104 	addi	r5,r5,4
 8002160:	d9402e15 	stw	r5,184(sp)
 8002164:	10c0000d 	sth	r3,0(r2)
 8002168:	0039e406 	br	80008fc <__alt_data_end+0xfc0008fc>
 800216c:	9080100c 	andi	r2,r18,64
 8002170:	10008026 	beq	r2,zero,8002374 <___vfprintf_internal_r+0x1b58>
 8002174:	d8802e17 	ldw	r2,184(sp)
 8002178:	14c0000f 	ldh	r19,0(r2)
 800217c:	10800104 	addi	r2,r2,4
 8002180:	d8802e15 	stw	r2,184(sp)
 8002184:	982dd7fa 	srai	r22,r19,31
 8002188:	b005883a 	mov	r2,r22
 800218c:	003af706 	br	8000d6c <__alt_data_end+0xfc000d6c>
 8002190:	9080100c 	andi	r2,r18,64
 8002194:	d8002785 	stb	zero,158(sp)
 8002198:	10008a1e 	bne	r2,zero,80023c4 <___vfprintf_internal_r+0x1ba8>
 800219c:	d9002e17 	ldw	r4,184(sp)
 80021a0:	d9402a17 	ldw	r5,168(sp)
 80021a4:	002d883a 	mov	r22,zero
 80021a8:	20800104 	addi	r2,r4,4
 80021ac:	24c00017 	ldw	r19,0(r4)
 80021b0:	283e4b0e 	bge	r5,zero,8001ae0 <__alt_data_end+0xfc001ae0>
 80021b4:	9d86b03a 	or	r3,r19,r22
 80021b8:	d8802e15 	stw	r2,184(sp)
 80021bc:	183e4c1e 	bne	r3,zero,8001af0 <__alt_data_end+0xfc001af0>
 80021c0:	0039883a 	mov	fp,zero
 80021c4:	0005883a 	mov	r2,zero
 80021c8:	003d4006 	br	80016cc <__alt_data_end+0xfc0016cc>
 80021cc:	014205f4 	movhi	r5,2071
 80021d0:	295c6384 	addi	r5,r5,29070
 80021d4:	d9402c15 	stw	r5,176(sp)
 80021d8:	d9402c17 	ldw	r5,176(sp)
 80021dc:	1c47883a 	add	r3,r3,r17
 80021e0:	10800044 	addi	r2,r2,1
 80021e4:	41400015 	stw	r5,0(r8)
 80021e8:	44400115 	stw	r17,4(r8)
 80021ec:	d8c02015 	stw	r3,128(sp)
 80021f0:	d8801f15 	stw	r2,124(sp)
 80021f4:	010001c4 	movi	r4,7
 80021f8:	20bec816 	blt	r4,r2,8001d1c <__alt_data_end+0xfc001d1c>
 80021fc:	42000204 	addi	r8,r8,8
 8002200:	003ecd06 	br	8001d38 <__alt_data_end+0xfc001d38>
 8002204:	d9002a17 	ldw	r4,168(sp)
 8002208:	d8002785 	stb	zero,158(sp)
 800220c:	203d2d16 	blt	r4,zero,80016c4 <__alt_data_end+0xfc0016c4>
 8002210:	00bfdfc4 	movi	r2,-129
 8002214:	90a4703a 	and	r18,r18,r2
 8002218:	003a6106 	br	8000ba0 <__alt_data_end+0xfc000ba0>
 800221c:	010205f4 	movhi	r4,2071
 8002220:	211c6384 	addi	r4,r4,29070
 8002224:	d9002c15 	stw	r4,176(sp)
 8002228:	003bea06 	br	80011d4 <__alt_data_end+0xfc0011d4>
 800222c:	d9002d17 	ldw	r4,180(sp)
 8002230:	d9801e04 	addi	r6,sp,120
 8002234:	b80b883a 	mov	r5,r23
 8002238:	8007ffc0 	call	8007ffc <__sprint_r>
 800223c:	103a7b1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8002240:	d8c02017 	ldw	r3,128(sp)
 8002244:	da000404 	addi	r8,sp,16
 8002248:	003d4106 	br	8001750 <__alt_data_end+0xfc001750>
 800224c:	d8801f17 	ldw	r2,124(sp)
 8002250:	014205f4 	movhi	r5,2071
 8002254:	01000044 	movi	r4,1
 8002258:	18c00044 	addi	r3,r3,1
 800225c:	10800044 	addi	r2,r2,1
 8002260:	295c6304 	addi	r5,r5,29068
 8002264:	41000115 	stw	r4,4(r8)
 8002268:	41400015 	stw	r5,0(r8)
 800226c:	d8c02015 	stw	r3,128(sp)
 8002270:	d8801f15 	stw	r2,124(sp)
 8002274:	010001c4 	movi	r4,7
 8002278:	20805c16 	blt	r4,r2,80023ec <___vfprintf_internal_r+0x1bd0>
 800227c:	42000204 	addi	r8,r8,8
 8002280:	8800041e 	bne	r17,zero,8002294 <___vfprintf_internal_r+0x1a78>
 8002284:	d8803317 	ldw	r2,204(sp)
 8002288:	1000021e 	bne	r2,zero,8002294 <___vfprintf_internal_r+0x1a78>
 800228c:	9080004c 	andi	r2,r18,1
 8002290:	103be726 	beq	r2,zero,8001230 <__alt_data_end+0xfc001230>
 8002294:	d9003717 	ldw	r4,220(sp)
 8002298:	d8801f17 	ldw	r2,124(sp)
 800229c:	d9403417 	ldw	r5,208(sp)
 80022a0:	20c7883a 	add	r3,r4,r3
 80022a4:	10800044 	addi	r2,r2,1
 80022a8:	41000115 	stw	r4,4(r8)
 80022ac:	41400015 	stw	r5,0(r8)
 80022b0:	d8c02015 	stw	r3,128(sp)
 80022b4:	d8801f15 	stw	r2,124(sp)
 80022b8:	010001c4 	movi	r4,7
 80022bc:	20812116 	blt	r4,r2,8002744 <___vfprintf_internal_r+0x1f28>
 80022c0:	42000204 	addi	r8,r8,8
 80022c4:	0463c83a 	sub	r17,zero,r17
 80022c8:	0440730e 	bge	zero,r17,8002498 <___vfprintf_internal_r+0x1c7c>
 80022cc:	05800404 	movi	r22,16
 80022d0:	b440860e 	bge	r22,r17,80024ec <___vfprintf_internal_r+0x1cd0>
 80022d4:	014205f4 	movhi	r5,2071
 80022d8:	295c6384 	addi	r5,r5,29070
 80022dc:	d9402c15 	stw	r5,176(sp)
 80022e0:	070001c4 	movi	fp,7
 80022e4:	dcc02d17 	ldw	r19,180(sp)
 80022e8:	00000306 	br	80022f8 <___vfprintf_internal_r+0x1adc>
 80022ec:	42000204 	addi	r8,r8,8
 80022f0:	8c7ffc04 	addi	r17,r17,-16
 80022f4:	b440800e 	bge	r22,r17,80024f8 <___vfprintf_internal_r+0x1cdc>
 80022f8:	18c00404 	addi	r3,r3,16
 80022fc:	10800044 	addi	r2,r2,1
 8002300:	45000015 	stw	r20,0(r8)
 8002304:	45800115 	stw	r22,4(r8)
 8002308:	d8c02015 	stw	r3,128(sp)
 800230c:	d8801f15 	stw	r2,124(sp)
 8002310:	e0bff60e 	bge	fp,r2,80022ec <__alt_data_end+0xfc0022ec>
 8002314:	d9801e04 	addi	r6,sp,120
 8002318:	b80b883a 	mov	r5,r23
 800231c:	9809883a 	mov	r4,r19
 8002320:	8007ffc0 	call	8007ffc <__sprint_r>
 8002324:	103a411e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8002328:	d8c02017 	ldw	r3,128(sp)
 800232c:	d8801f17 	ldw	r2,124(sp)
 8002330:	da000404 	addi	r8,sp,16
 8002334:	003fee06 	br	80022f0 <__alt_data_end+0xfc0022f0>
 8002338:	00bfffc4 	movi	r2,-1
 800233c:	003a3f06 	br	8000c3c <__alt_data_end+0xfc000c3c>
 8002340:	008011c4 	movi	r2,71
 8002344:	1440b816 	blt	r2,r17,8002628 <___vfprintf_internal_r+0x1e0c>
 8002348:	040205f4 	movhi	r16,2071
 800234c:	841c5504 	addi	r16,r16,29012
 8002350:	00c000c4 	movi	r3,3
 8002354:	00bfdfc4 	movi	r2,-129
 8002358:	d8c02915 	stw	r3,164(sp)
 800235c:	90a4703a 	and	r18,r18,r2
 8002360:	df002783 	ldbu	fp,158(sp)
 8002364:	d8c02b15 	stw	r3,172(sp)
 8002368:	d8002a15 	stw	zero,168(sp)
 800236c:	d8003215 	stw	zero,200(sp)
 8002370:	003b0706 	br	8000f90 <__alt_data_end+0xfc000f90>
 8002374:	d8c02e17 	ldw	r3,184(sp)
 8002378:	1cc00017 	ldw	r19,0(r3)
 800237c:	18c00104 	addi	r3,r3,4
 8002380:	d8c02e15 	stw	r3,184(sp)
 8002384:	982dd7fa 	srai	r22,r19,31
 8002388:	b005883a 	mov	r2,r22
 800238c:	003a7706 	br	8000d6c <__alt_data_end+0xfc000d6c>
 8002390:	d8c02e17 	ldw	r3,184(sp)
 8002394:	d9002f17 	ldw	r4,188(sp)
 8002398:	18800017 	ldw	r2,0(r3)
 800239c:	18c00104 	addi	r3,r3,4
 80023a0:	d8c02e15 	stw	r3,184(sp)
 80023a4:	11000015 	stw	r4,0(r2)
 80023a8:	00395406 	br	80008fc <__alt_data_end+0xfc0008fc>
 80023ac:	d9002e17 	ldw	r4,184(sp)
 80023b0:	002d883a 	mov	r22,zero
 80023b4:	24c00017 	ldw	r19,0(r4)
 80023b8:	21000104 	addi	r4,r4,4
 80023bc:	d9002e15 	stw	r4,184(sp)
 80023c0:	003c0706 	br	80013e0 <__alt_data_end+0xfc0013e0>
 80023c4:	d9402e17 	ldw	r5,184(sp)
 80023c8:	d8c02a17 	ldw	r3,168(sp)
 80023cc:	002d883a 	mov	r22,zero
 80023d0:	28800104 	addi	r2,r5,4
 80023d4:	2cc0000b 	ldhu	r19,0(r5)
 80023d8:	183dc10e 	bge	r3,zero,8001ae0 <__alt_data_end+0xfc001ae0>
 80023dc:	003f7506 	br	80021b4 <__alt_data_end+0xfc0021b4>
 80023e0:	040205f4 	movhi	r16,2071
 80023e4:	841c5304 	addi	r16,r16,29004
 80023e8:	003aa706 	br	8000e88 <__alt_data_end+0xfc000e88>
 80023ec:	d9002d17 	ldw	r4,180(sp)
 80023f0:	d9801e04 	addi	r6,sp,120
 80023f4:	b80b883a 	mov	r5,r23
 80023f8:	8007ffc0 	call	8007ffc <__sprint_r>
 80023fc:	103a0b1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8002400:	dc402617 	ldw	r17,152(sp)
 8002404:	d8c02017 	ldw	r3,128(sp)
 8002408:	da000404 	addi	r8,sp,16
 800240c:	003f9c06 	br	8002280 <__alt_data_end+0xfc002280>
 8002410:	ac400043 	ldbu	r17,1(r21)
 8002414:	84000814 	ori	r16,r16,32
 8002418:	ad400044 	addi	r21,r21,1
 800241c:	8c403fcc 	andi	r17,r17,255
 8002420:	8c40201c 	xori	r17,r17,128
 8002424:	8c7fe004 	addi	r17,r17,-128
 8002428:	00395e06 	br	80009a4 <__alt_data_end+0xfc0009a4>
 800242c:	d8c02e15 	stw	r3,184(sp)
 8002430:	0039883a 	mov	fp,zero
 8002434:	003e3506 	br	8001d0c <__alt_data_end+0xfc001d0c>
 8002438:	d9002d17 	ldw	r4,180(sp)
 800243c:	d9801e04 	addi	r6,sp,120
 8002440:	b80b883a 	mov	r5,r23
 8002444:	8007ffc0 	call	8007ffc <__sprint_r>
 8002448:	1039f81e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 800244c:	d8c02017 	ldw	r3,128(sp)
 8002450:	da000404 	addi	r8,sp,16
 8002454:	003cd006 	br	8001798 <__alt_data_end+0xfc001798>
 8002458:	8009883a 	mov	r4,r16
 800245c:	df003d15 	stw	fp,244(sp)
 8002460:	80007840 	call	8000784 <strlen>
 8002464:	d8802b15 	stw	r2,172(sp)
 8002468:	da003d17 	ldw	r8,244(sp)
 800246c:	103c200e 	bge	r2,zero,80014f0 <__alt_data_end+0xfc0014f0>
 8002470:	0005883a 	mov	r2,zero
 8002474:	003c1e06 	br	80014f0 <__alt_data_end+0xfc0014f0>
 8002478:	d9002d17 	ldw	r4,180(sp)
 800247c:	d9801e04 	addi	r6,sp,120
 8002480:	b80b883a 	mov	r5,r23
 8002484:	8007ffc0 	call	8007ffc <__sprint_r>
 8002488:	1039e81e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 800248c:	d8c02017 	ldw	r3,128(sp)
 8002490:	d8801f17 	ldw	r2,124(sp)
 8002494:	da000404 	addi	r8,sp,16
 8002498:	d9403317 	ldw	r5,204(sp)
 800249c:	10800044 	addi	r2,r2,1
 80024a0:	44000015 	stw	r16,0(r8)
 80024a4:	28c7883a 	add	r3,r5,r3
 80024a8:	003b5b06 	br	8001218 <__alt_data_end+0xfc001218>
 80024ac:	010205f4 	movhi	r4,2071
 80024b0:	211c6784 	addi	r4,r4,29086
 80024b4:	d9003515 	stw	r4,212(sp)
 80024b8:	003af206 	br	8001084 <__alt_data_end+0xfc001084>
 80024bc:	013fffc4 	movi	r4,-1
 80024c0:	003a0806 	br	8000ce4 <__alt_data_end+0xfc000ce4>
 80024c4:	0023883a 	mov	r17,zero
 80024c8:	003d9d06 	br	8001b40 <__alt_data_end+0xfc001b40>
 80024cc:	d9002d17 	ldw	r4,180(sp)
 80024d0:	d9801e04 	addi	r6,sp,120
 80024d4:	b80b883a 	mov	r5,r23
 80024d8:	8007ffc0 	call	8007ffc <__sprint_r>
 80024dc:	1039d31e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 80024e0:	d8c02017 	ldw	r3,128(sp)
 80024e4:	da000404 	addi	r8,sp,16
 80024e8:	003d9406 	br	8001b3c <__alt_data_end+0xfc001b3c>
 80024ec:	010205f4 	movhi	r4,2071
 80024f0:	211c6384 	addi	r4,r4,29070
 80024f4:	d9002c15 	stw	r4,176(sp)
 80024f8:	d9002c17 	ldw	r4,176(sp)
 80024fc:	1c47883a 	add	r3,r3,r17
 8002500:	10800044 	addi	r2,r2,1
 8002504:	41000015 	stw	r4,0(r8)
 8002508:	44400115 	stw	r17,4(r8)
 800250c:	d8c02015 	stw	r3,128(sp)
 8002510:	d8801f15 	stw	r2,124(sp)
 8002514:	010001c4 	movi	r4,7
 8002518:	20bfd716 	blt	r4,r2,8002478 <__alt_data_end+0xfc002478>
 800251c:	42000204 	addi	r8,r8,8
 8002520:	003fdd06 	br	8002498 <__alt_data_end+0xfc002498>
 8002524:	d9002d17 	ldw	r4,180(sp)
 8002528:	d9801e04 	addi	r6,sp,120
 800252c:	b80b883a 	mov	r5,r23
 8002530:	8007ffc0 	call	8007ffc <__sprint_r>
 8002534:	1039bd1e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8002538:	d8802617 	ldw	r2,152(sp)
 800253c:	d8c02017 	ldw	r3,128(sp)
 8002540:	da000404 	addi	r8,sp,16
 8002544:	003e1006 	br	8001d88 <__alt_data_end+0xfc001d88>
 8002548:	00800044 	movi	r2,1
 800254c:	10803fcc 	andi	r2,r2,255
 8002550:	00c00044 	movi	r3,1
 8002554:	10fa0d26 	beq	r2,r3,8000d8c <__alt_data_end+0xfc000d8c>
 8002558:	00c00084 	movi	r3,2
 800255c:	10fbaf26 	beq	r2,r3,800141c <__alt_data_end+0xfc00141c>
 8002560:	003a6d06 	br	8000f18 <__alt_data_end+0xfc000f18>
 8002564:	010205f4 	movhi	r4,2071
 8002568:	211c6784 	addi	r4,r4,29086
 800256c:	d9003515 	stw	r4,212(sp)
 8002570:	003b5406 	br	80012c4 <__alt_data_end+0xfc0012c4>
 8002574:	d8802a17 	ldw	r2,168(sp)
 8002578:	00c00184 	movi	r3,6
 800257c:	1880012e 	bgeu	r3,r2,8002584 <___vfprintf_internal_r+0x1d68>
 8002580:	1805883a 	mov	r2,r3
 8002584:	d8802b15 	stw	r2,172(sp)
 8002588:	1000ef16 	blt	r2,zero,8002948 <___vfprintf_internal_r+0x212c>
 800258c:	040205f4 	movhi	r16,2071
 8002590:	d8802915 	stw	r2,164(sp)
 8002594:	dcc02e15 	stw	r19,184(sp)
 8002598:	d8002a15 	stw	zero,168(sp)
 800259c:	d8003215 	stw	zero,200(sp)
 80025a0:	841c6104 	addi	r16,r16,29060
 80025a4:	0039883a 	mov	fp,zero
 80025a8:	003a8006 	br	8000fac <__alt_data_end+0xfc000fac>
 80025ac:	0021883a 	mov	r16,zero
 80025b0:	003e0706 	br	8001dd0 <__alt_data_end+0xfc001dd0>
 80025b4:	d9002d17 	ldw	r4,180(sp)
 80025b8:	d9801e04 	addi	r6,sp,120
 80025bc:	b80b883a 	mov	r5,r23
 80025c0:	8007ffc0 	call	8007ffc <__sprint_r>
 80025c4:	1039991e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 80025c8:	d8802617 	ldw	r2,152(sp)
 80025cc:	d9403317 	ldw	r5,204(sp)
 80025d0:	d8c02017 	ldw	r3,128(sp)
 80025d4:	da000404 	addi	r8,sp,16
 80025d8:	2885c83a 	sub	r2,r5,r2
 80025dc:	003dfb06 	br	8001dcc <__alt_data_end+0xfc001dcc>
 80025e0:	9080004c 	andi	r2,r18,1
 80025e4:	103e8f1e 	bne	r2,zero,8002024 <__alt_data_end+0xfc002024>
 80025e8:	d8802117 	ldw	r2,132(sp)
 80025ec:	003e9e06 	br	8002068 <__alt_data_end+0xfc002068>
 80025f0:	1025883a 	mov	r18,r2
 80025f4:	0039883a 	mov	fp,zero
 80025f8:	00800084 	movi	r2,2
 80025fc:	003fd306 	br	800254c <__alt_data_end+0xfc00254c>
 8002600:	07000b44 	movi	fp,45
 8002604:	df002785 	stb	fp,158(sp)
 8002608:	003a1b06 	br	8000e78 <__alt_data_end+0xfc000e78>
 800260c:	00c00b44 	movi	r3,45
 8002610:	d8c02785 	stb	r3,158(sp)
 8002614:	d8802915 	stw	r2,164(sp)
 8002618:	dc802c17 	ldw	r18,176(sp)
 800261c:	d8002a15 	stw	zero,168(sp)
 8002620:	07000b44 	movi	fp,45
 8002624:	003a5e06 	br	8000fa0 <__alt_data_end+0xfc000fa0>
 8002628:	040205f4 	movhi	r16,2071
 800262c:	841c5604 	addi	r16,r16,29016
 8002630:	003f4706 	br	8002350 <__alt_data_end+0xfc002350>
 8002634:	d9002e17 	ldw	r4,184(sp)
 8002638:	d9402f17 	ldw	r5,188(sp)
 800263c:	20800017 	ldw	r2,0(r4)
 8002640:	21000104 	addi	r4,r4,4
 8002644:	d9002e15 	stw	r4,184(sp)
 8002648:	11400015 	stw	r5,0(r2)
 800264c:	0038ab06 	br	80008fc <__alt_data_end+0xfc0008fc>
 8002650:	dd802617 	ldw	r22,152(sp)
 8002654:	00bfff44 	movi	r2,-3
 8002658:	b0801c16 	blt	r22,r2,80026cc <___vfprintf_internal_r+0x1eb0>
 800265c:	d9402a17 	ldw	r5,168(sp)
 8002660:	2d801a16 	blt	r5,r22,80026cc <___vfprintf_internal_r+0x1eb0>
 8002664:	dd803215 	stw	r22,200(sp)
 8002668:	003e8906 	br	8002090 <__alt_data_end+0xfc002090>
 800266c:	010205f4 	movhi	r4,2071
 8002670:	211c6384 	addi	r4,r4,29070
 8002674:	d9002c15 	stw	r4,176(sp)
 8002678:	003c9106 	br	80018c0 <__alt_data_end+0xfc0018c0>
 800267c:	e005883a 	mov	r2,fp
 8002680:	003e7906 	br	8002068 <__alt_data_end+0xfc002068>
 8002684:	d9002a17 	ldw	r4,168(sp)
 8002688:	df002783 	ldbu	fp,158(sp)
 800268c:	dcc02e15 	stw	r19,184(sp)
 8002690:	d9002915 	stw	r4,164(sp)
 8002694:	d9002b15 	stw	r4,172(sp)
 8002698:	d8002a15 	stw	zero,168(sp)
 800269c:	d8003215 	stw	zero,200(sp)
 80026a0:	003a3b06 	br	8000f90 <__alt_data_end+0xfc000f90>
 80026a4:	9080004c 	andi	r2,r18,1
 80026a8:	0039883a 	mov	fp,zero
 80026ac:	10000426 	beq	r2,zero,80026c0 <___vfprintf_internal_r+0x1ea4>
 80026b0:	00800c04 	movi	r2,48
 80026b4:	dc001dc4 	addi	r16,sp,119
 80026b8:	d8801dc5 	stb	r2,119(sp)
 80026bc:	003b6406 	br	8001450 <__alt_data_end+0xfc001450>
 80026c0:	d8002b15 	stw	zero,172(sp)
 80026c4:	dc001e04 	addi	r16,sp,120
 80026c8:	003a2b06 	br	8000f78 <__alt_data_end+0xfc000f78>
 80026cc:	8c7fff84 	addi	r17,r17,-2
 80026d0:	b5bfffc4 	addi	r22,r22,-1
 80026d4:	dd802615 	stw	r22,152(sp)
 80026d8:	dc4022c5 	stb	r17,139(sp)
 80026dc:	b000bf16 	blt	r22,zero,80029dc <___vfprintf_internal_r+0x21c0>
 80026e0:	00800ac4 	movi	r2,43
 80026e4:	d8802305 	stb	r2,140(sp)
 80026e8:	00800244 	movi	r2,9
 80026ec:	15807016 	blt	r2,r22,80028b0 <___vfprintf_internal_r+0x2094>
 80026f0:	00800c04 	movi	r2,48
 80026f4:	b5800c04 	addi	r22,r22,48
 80026f8:	d8802345 	stb	r2,141(sp)
 80026fc:	dd802385 	stb	r22,142(sp)
 8002700:	d88023c4 	addi	r2,sp,143
 8002704:	df0022c4 	addi	fp,sp,139
 8002708:	d8c03317 	ldw	r3,204(sp)
 800270c:	1739c83a 	sub	fp,r2,fp
 8002710:	d9003317 	ldw	r4,204(sp)
 8002714:	e0c7883a 	add	r3,fp,r3
 8002718:	df003a15 	stw	fp,232(sp)
 800271c:	d8c02b15 	stw	r3,172(sp)
 8002720:	00800044 	movi	r2,1
 8002724:	1100b30e 	bge	r2,r4,80029f4 <___vfprintf_internal_r+0x21d8>
 8002728:	d8c02b17 	ldw	r3,172(sp)
 800272c:	18c00044 	addi	r3,r3,1
 8002730:	d8c02b15 	stw	r3,172(sp)
 8002734:	1805883a 	mov	r2,r3
 8002738:	1800ac16 	blt	r3,zero,80029ec <___vfprintf_internal_r+0x21d0>
 800273c:	d8003215 	stw	zero,200(sp)
 8002740:	003e5d06 	br	80020b8 <__alt_data_end+0xfc0020b8>
 8002744:	d9002d17 	ldw	r4,180(sp)
 8002748:	d9801e04 	addi	r6,sp,120
 800274c:	b80b883a 	mov	r5,r23
 8002750:	8007ffc0 	call	8007ffc <__sprint_r>
 8002754:	1039351e 	bne	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>
 8002758:	dc402617 	ldw	r17,152(sp)
 800275c:	d8c02017 	ldw	r3,128(sp)
 8002760:	d8801f17 	ldw	r2,124(sp)
 8002764:	da000404 	addi	r8,sp,16
 8002768:	003ed606 	br	80022c4 <__alt_data_end+0xfc0022c4>
 800276c:	182b883a 	mov	r21,r3
 8002770:	d8002a15 	stw	zero,168(sp)
 8002774:	00388c06 	br	80009a8 <__alt_data_end+0xfc0009a8>
 8002778:	d8802a17 	ldw	r2,168(sp)
 800277c:	103e071e 	bne	r2,zero,8001f9c <__alt_data_end+0xfc001f9c>
 8002780:	dc002a15 	stw	r16,168(sp)
 8002784:	003e0506 	br	8001f9c <__alt_data_end+0xfc001f9c>
 8002788:	d9002a17 	ldw	r4,168(sp)
 800278c:	20c00044 	addi	r3,r4,1
 8002790:	003e0f06 	br	8001fd0 <__alt_data_end+0xfc001fd0>
 8002794:	01400184 	movi	r5,6
 8002798:	d9402a15 	stw	r5,168(sp)
 800279c:	003dff06 	br	8001f9c <__alt_data_end+0xfc001f9c>
 80027a0:	d8802104 	addi	r2,sp,132
 80027a4:	d8800315 	stw	r2,12(sp)
 80027a8:	d8802504 	addi	r2,sp,148
 80027ac:	d8800215 	stw	r2,8(sp)
 80027b0:	d8802604 	addi	r2,sp,152
 80027b4:	d8800115 	stw	r2,4(sp)
 80027b8:	d8802a17 	ldw	r2,168(sp)
 80027bc:	d9403617 	ldw	r5,216(sp)
 80027c0:	d9002d17 	ldw	r4,180(sp)
 80027c4:	d8800015 	stw	r2,0(sp)
 80027c8:	01c000c4 	movi	r7,3
 80027cc:	980d883a 	mov	r6,r19
 80027d0:	da003d15 	stw	r8,244(sp)
 80027d4:	8002f4c0 	call	8002f4c <_dtoa_r>
 80027d8:	d8c02a17 	ldw	r3,168(sp)
 80027dc:	da003d17 	ldw	r8,244(sp)
 80027e0:	1021883a 	mov	r16,r2
 80027e4:	10f9883a 	add	fp,r2,r3
 80027e8:	81000007 	ldb	r4,0(r16)
 80027ec:	00800c04 	movi	r2,48
 80027f0:	20805e26 	beq	r4,r2,800296c <___vfprintf_internal_r+0x2150>
 80027f4:	d8c02617 	ldw	r3,152(sp)
 80027f8:	e0f9883a 	add	fp,fp,r3
 80027fc:	003e0a06 	br	8002028 <__alt_data_end+0xfc002028>
 8002800:	00c00b44 	movi	r3,45
 8002804:	24e0003c 	xorhi	r19,r4,32768
 8002808:	d8c02905 	stb	r3,164(sp)
 800280c:	003de906 	br	8001fb4 <__alt_data_end+0xfc001fb4>
 8002810:	d8c03217 	ldw	r3,200(sp)
 8002814:	00c07a0e 	bge	zero,r3,8002a00 <___vfprintf_internal_r+0x21e4>
 8002818:	00800044 	movi	r2,1
 800281c:	d9003317 	ldw	r4,204(sp)
 8002820:	1105883a 	add	r2,r2,r4
 8002824:	d8802b15 	stw	r2,172(sp)
 8002828:	10004e16 	blt	r2,zero,8002964 <___vfprintf_internal_r+0x2148>
 800282c:	044019c4 	movi	r17,103
 8002830:	003e2106 	br	80020b8 <__alt_data_end+0xfc0020b8>
 8002834:	d9002a17 	ldw	r4,168(sp)
 8002838:	d8802104 	addi	r2,sp,132
 800283c:	d8800315 	stw	r2,12(sp)
 8002840:	d9000015 	stw	r4,0(sp)
 8002844:	d8802504 	addi	r2,sp,148
 8002848:	d9403617 	ldw	r5,216(sp)
 800284c:	d9002d17 	ldw	r4,180(sp)
 8002850:	d8800215 	stw	r2,8(sp)
 8002854:	d8802604 	addi	r2,sp,152
 8002858:	d8800115 	stw	r2,4(sp)
 800285c:	01c000c4 	movi	r7,3
 8002860:	980d883a 	mov	r6,r19
 8002864:	da003d15 	stw	r8,244(sp)
 8002868:	8002f4c0 	call	8002f4c <_dtoa_r>
 800286c:	d8c02a17 	ldw	r3,168(sp)
 8002870:	da003d17 	ldw	r8,244(sp)
 8002874:	1021883a 	mov	r16,r2
 8002878:	00801184 	movi	r2,70
 800287c:	80f9883a 	add	fp,r16,r3
 8002880:	88bfd926 	beq	r17,r2,80027e8 <__alt_data_end+0xfc0027e8>
 8002884:	003de806 	br	8002028 <__alt_data_end+0xfc002028>
 8002888:	d9002a17 	ldw	r4,168(sp)
 800288c:	00c04d0e 	bge	zero,r3,80029c4 <___vfprintf_internal_r+0x21a8>
 8002890:	2000441e 	bne	r4,zero,80029a4 <___vfprintf_internal_r+0x2188>
 8002894:	9480004c 	andi	r18,r18,1
 8002898:	9000421e 	bne	r18,zero,80029a4 <___vfprintf_internal_r+0x2188>
 800289c:	1805883a 	mov	r2,r3
 80028a0:	18006f16 	blt	r3,zero,8002a60 <___vfprintf_internal_r+0x2244>
 80028a4:	d8c03217 	ldw	r3,200(sp)
 80028a8:	d8c02b15 	stw	r3,172(sp)
 80028ac:	003e0206 	br	80020b8 <__alt_data_end+0xfc0020b8>
 80028b0:	df0022c4 	addi	fp,sp,139
 80028b4:	dc002a15 	stw	r16,168(sp)
 80028b8:	4027883a 	mov	r19,r8
 80028bc:	e021883a 	mov	r16,fp
 80028c0:	b009883a 	mov	r4,r22
 80028c4:	01400284 	movi	r5,10
 80028c8:	800ab880 	call	800ab88 <__modsi3>
 80028cc:	10800c04 	addi	r2,r2,48
 80028d0:	843fffc4 	addi	r16,r16,-1
 80028d4:	b009883a 	mov	r4,r22
 80028d8:	01400284 	movi	r5,10
 80028dc:	80800005 	stb	r2,0(r16)
 80028e0:	800ab040 	call	800ab04 <__divsi3>
 80028e4:	102d883a 	mov	r22,r2
 80028e8:	00800244 	movi	r2,9
 80028ec:	15bff416 	blt	r2,r22,80028c0 <__alt_data_end+0xfc0028c0>
 80028f0:	9811883a 	mov	r8,r19
 80028f4:	b0800c04 	addi	r2,r22,48
 80028f8:	8027883a 	mov	r19,r16
 80028fc:	997fffc4 	addi	r5,r19,-1
 8002900:	98bfffc5 	stb	r2,-1(r19)
 8002904:	dc002a17 	ldw	r16,168(sp)
 8002908:	2f006d2e 	bgeu	r5,fp,8002ac0 <___vfprintf_internal_r+0x22a4>
 800290c:	d9c02384 	addi	r7,sp,142
 8002910:	3ccfc83a 	sub	r7,r7,r19
 8002914:	d9002344 	addi	r4,sp,141
 8002918:	e1cf883a 	add	r7,fp,r7
 800291c:	00000106 	br	8002924 <___vfprintf_internal_r+0x2108>
 8002920:	28800003 	ldbu	r2,0(r5)
 8002924:	20800005 	stb	r2,0(r4)
 8002928:	21000044 	addi	r4,r4,1
 800292c:	29400044 	addi	r5,r5,1
 8002930:	393ffb1e 	bne	r7,r4,8002920 <__alt_data_end+0xfc002920>
 8002934:	d8802304 	addi	r2,sp,140
 8002938:	14c5c83a 	sub	r2,r2,r19
 800293c:	d8c02344 	addi	r3,sp,141
 8002940:	1885883a 	add	r2,r3,r2
 8002944:	003f7006 	br	8002708 <__alt_data_end+0xfc002708>
 8002948:	0005883a 	mov	r2,zero
 800294c:	003f0f06 	br	800258c <__alt_data_end+0xfc00258c>
 8002950:	d8c03217 	ldw	r3,200(sp)
 8002954:	18c00044 	addi	r3,r3,1
 8002958:	d8c02b15 	stw	r3,172(sp)
 800295c:	1805883a 	mov	r2,r3
 8002960:	183fb20e 	bge	r3,zero,800282c <__alt_data_end+0xfc00282c>
 8002964:	0005883a 	mov	r2,zero
 8002968:	003fb006 	br	800282c <__alt_data_end+0xfc00282c>
 800296c:	d9003617 	ldw	r4,216(sp)
 8002970:	000d883a 	mov	r6,zero
 8002974:	000f883a 	mov	r7,zero
 8002978:	980b883a 	mov	r5,r19
 800297c:	d8c03c15 	stw	r3,240(sp)
 8002980:	da003d15 	stw	r8,244(sp)
 8002984:	800bf340 	call	800bf34 <__eqdf2>
 8002988:	d8c03c17 	ldw	r3,240(sp)
 800298c:	da003d17 	ldw	r8,244(sp)
 8002990:	103f9826 	beq	r2,zero,80027f4 <__alt_data_end+0xfc0027f4>
 8002994:	00800044 	movi	r2,1
 8002998:	10c7c83a 	sub	r3,r2,r3
 800299c:	d8c02615 	stw	r3,152(sp)
 80029a0:	003f9506 	br	80027f8 <__alt_data_end+0xfc0027f8>
 80029a4:	d9002a17 	ldw	r4,168(sp)
 80029a8:	d8c03217 	ldw	r3,200(sp)
 80029ac:	20800044 	addi	r2,r4,1
 80029b0:	1885883a 	add	r2,r3,r2
 80029b4:	d8802b15 	stw	r2,172(sp)
 80029b8:	103dbf0e 	bge	r2,zero,80020b8 <__alt_data_end+0xfc0020b8>
 80029bc:	0005883a 	mov	r2,zero
 80029c0:	003dbd06 	br	80020b8 <__alt_data_end+0xfc0020b8>
 80029c4:	2000201e 	bne	r4,zero,8002a48 <___vfprintf_internal_r+0x222c>
 80029c8:	9480004c 	andi	r18,r18,1
 80029cc:	90001e1e 	bne	r18,zero,8002a48 <___vfprintf_internal_r+0x222c>
 80029d0:	00800044 	movi	r2,1
 80029d4:	d8802b15 	stw	r2,172(sp)
 80029d8:	003db706 	br	80020b8 <__alt_data_end+0xfc0020b8>
 80029dc:	00800b44 	movi	r2,45
 80029e0:	05adc83a 	sub	r22,zero,r22
 80029e4:	d8802305 	stb	r2,140(sp)
 80029e8:	003f3f06 	br	80026e8 <__alt_data_end+0xfc0026e8>
 80029ec:	0005883a 	mov	r2,zero
 80029f0:	003f5206 	br	800273c <__alt_data_end+0xfc00273c>
 80029f4:	90a4703a 	and	r18,r18,r2
 80029f8:	903f4e26 	beq	r18,zero,8002734 <__alt_data_end+0xfc002734>
 80029fc:	003f4a06 	br	8002728 <__alt_data_end+0xfc002728>
 8002a00:	00800084 	movi	r2,2
 8002a04:	10c5c83a 	sub	r2,r2,r3
 8002a08:	003f8406 	br	800281c <__alt_data_end+0xfc00281c>
 8002a0c:	d9402e17 	ldw	r5,184(sp)
 8002a10:	d9002e17 	ldw	r4,184(sp)
 8002a14:	ac400043 	ldbu	r17,1(r21)
 8002a18:	29400017 	ldw	r5,0(r5)
 8002a1c:	20800104 	addi	r2,r4,4
 8002a20:	d8802e15 	stw	r2,184(sp)
 8002a24:	d9402a15 	stw	r5,168(sp)
 8002a28:	182b883a 	mov	r21,r3
 8002a2c:	283e7b0e 	bge	r5,zero,800241c <__alt_data_end+0xfc00241c>
 8002a30:	8c403fcc 	andi	r17,r17,255
 8002a34:	017fffc4 	movi	r5,-1
 8002a38:	8c40201c 	xori	r17,r17,128
 8002a3c:	d9402a15 	stw	r5,168(sp)
 8002a40:	8c7fe004 	addi	r17,r17,-128
 8002a44:	0037d706 	br	80009a4 <__alt_data_end+0xfc0009a4>
 8002a48:	d8c02a17 	ldw	r3,168(sp)
 8002a4c:	18c00084 	addi	r3,r3,2
 8002a50:	d8c02b15 	stw	r3,172(sp)
 8002a54:	1805883a 	mov	r2,r3
 8002a58:	183d970e 	bge	r3,zero,80020b8 <__alt_data_end+0xfc0020b8>
 8002a5c:	003fd706 	br	80029bc <__alt_data_end+0xfc0029bc>
 8002a60:	0005883a 	mov	r2,zero
 8002a64:	003f8f06 	br	80028a4 <__alt_data_end+0xfc0028a4>
 8002a68:	9080004c 	andi	r2,r18,1
 8002a6c:	103f821e 	bne	r2,zero,8002878 <__alt_data_end+0xfc002878>
 8002a70:	d8802117 	ldw	r2,132(sp)
 8002a74:	1405c83a 	sub	r2,r2,r16
 8002a78:	d8803315 	stw	r2,204(sp)
 8002a7c:	b47ef426 	beq	r22,r17,8002650 <__alt_data_end+0xfc002650>
 8002a80:	dd802617 	ldw	r22,152(sp)
 8002a84:	003f1206 	br	80026d0 <__alt_data_end+0xfc0026d0>
 8002a88:	d8c02b03 	ldbu	r3,172(sp)
 8002a8c:	d8c02785 	stb	r3,158(sp)
 8002a90:	0038df06 	br	8000e10 <__alt_data_end+0xfc000e10>
 8002a94:	d8c02b03 	ldbu	r3,172(sp)
 8002a98:	d8c02785 	stb	r3,158(sp)
 8002a9c:	0038aa06 	br	8000d48 <__alt_data_end+0xfc000d48>
 8002aa0:	d8c02b03 	ldbu	r3,172(sp)
 8002aa4:	d8c02785 	stb	r3,158(sp)
 8002aa8:	003a4306 	br	80013b8 <__alt_data_end+0xfc0013b8>
 8002aac:	d8c02b03 	ldbu	r3,172(sp)
 8002ab0:	d8c02785 	stb	r3,158(sp)
 8002ab4:	003af506 	br	800168c <__alt_data_end+0xfc00168c>
 8002ab8:	0005883a 	mov	r2,zero
 8002abc:	003d7b06 	br	80020ac <__alt_data_end+0xfc0020ac>
 8002ac0:	d8802344 	addi	r2,sp,141
 8002ac4:	003f1006 	br	8002708 <__alt_data_end+0xfc002708>
 8002ac8:	d8c02b03 	ldbu	r3,172(sp)
 8002acc:	d8c02785 	stb	r3,158(sp)
 8002ad0:	0038fd06 	br	8000ec8 <__alt_data_end+0xfc000ec8>
 8002ad4:	d8c02b03 	ldbu	r3,172(sp)
 8002ad8:	d8c02785 	stb	r3,158(sp)
 8002adc:	003a9706 	br	800153c <__alt_data_end+0xfc00153c>
 8002ae0:	d8c02b03 	ldbu	r3,172(sp)
 8002ae4:	d8c02785 	stb	r3,158(sp)
 8002ae8:	003a1806 	br	800134c <__alt_data_end+0xfc00134c>
 8002aec:	d8c02b03 	ldbu	r3,172(sp)
 8002af0:	d8c02785 	stb	r3,158(sp)
 8002af4:	003abe06 	br	80015f0 <__alt_data_end+0xfc0015f0>

08002af8 <__vfprintf_internal>:
 8002af8:	00820634 	movhi	r2,2072
 8002afc:	10a3c904 	addi	r2,r2,-28892
 8002b00:	300f883a 	mov	r7,r6
 8002b04:	280d883a 	mov	r6,r5
 8002b08:	200b883a 	mov	r5,r4
 8002b0c:	11000017 	ldw	r4,0(r2)
 8002b10:	800081c1 	jmpi	800081c <___vfprintf_internal_r>

08002b14 <__sbprintf>:
 8002b14:	2880030b 	ldhu	r2,12(r5)
 8002b18:	2ac01917 	ldw	r11,100(r5)
 8002b1c:	2a80038b 	ldhu	r10,14(r5)
 8002b20:	2a400717 	ldw	r9,28(r5)
 8002b24:	2a000917 	ldw	r8,36(r5)
 8002b28:	defee204 	addi	sp,sp,-1144
 8002b2c:	00c10004 	movi	r3,1024
 8002b30:	dc011a15 	stw	r16,1128(sp)
 8002b34:	10bfff4c 	andi	r2,r2,65533
 8002b38:	2821883a 	mov	r16,r5
 8002b3c:	d8cb883a 	add	r5,sp,r3
 8002b40:	dc811c15 	stw	r18,1136(sp)
 8002b44:	dc411b15 	stw	r17,1132(sp)
 8002b48:	dfc11d15 	stw	ra,1140(sp)
 8002b4c:	2025883a 	mov	r18,r4
 8002b50:	d881030d 	sth	r2,1036(sp)
 8002b54:	dac11915 	stw	r11,1124(sp)
 8002b58:	da81038d 	sth	r10,1038(sp)
 8002b5c:	da410715 	stw	r9,1052(sp)
 8002b60:	da010915 	stw	r8,1060(sp)
 8002b64:	dec10015 	stw	sp,1024(sp)
 8002b68:	dec10415 	stw	sp,1040(sp)
 8002b6c:	d8c10215 	stw	r3,1032(sp)
 8002b70:	d8c10515 	stw	r3,1044(sp)
 8002b74:	d8010615 	stw	zero,1048(sp)
 8002b78:	800081c0 	call	800081c <___vfprintf_internal_r>
 8002b7c:	1023883a 	mov	r17,r2
 8002b80:	10000416 	blt	r2,zero,8002b94 <__sbprintf+0x80>
 8002b84:	d9410004 	addi	r5,sp,1024
 8002b88:	9009883a 	mov	r4,r18
 8002b8c:	80047f00 	call	80047f0 <_fflush_r>
 8002b90:	10000d1e 	bne	r2,zero,8002bc8 <__sbprintf+0xb4>
 8002b94:	d881030b 	ldhu	r2,1036(sp)
 8002b98:	1080100c 	andi	r2,r2,64
 8002b9c:	10000326 	beq	r2,zero,8002bac <__sbprintf+0x98>
 8002ba0:	8080030b 	ldhu	r2,12(r16)
 8002ba4:	10801014 	ori	r2,r2,64
 8002ba8:	8080030d 	sth	r2,12(r16)
 8002bac:	8805883a 	mov	r2,r17
 8002bb0:	dfc11d17 	ldw	ra,1140(sp)
 8002bb4:	dc811c17 	ldw	r18,1136(sp)
 8002bb8:	dc411b17 	ldw	r17,1132(sp)
 8002bbc:	dc011a17 	ldw	r16,1128(sp)
 8002bc0:	dec11e04 	addi	sp,sp,1144
 8002bc4:	f800283a 	ret
 8002bc8:	047fffc4 	movi	r17,-1
 8002bcc:	003ff106 	br	8002b94 <__alt_data_end+0xfc002b94>

08002bd0 <__swsetup_r>:
 8002bd0:	00820634 	movhi	r2,2072
 8002bd4:	defffd04 	addi	sp,sp,-12
 8002bd8:	10a3c904 	addi	r2,r2,-28892
 8002bdc:	dc400115 	stw	r17,4(sp)
 8002be0:	2023883a 	mov	r17,r4
 8002be4:	11000017 	ldw	r4,0(r2)
 8002be8:	dc000015 	stw	r16,0(sp)
 8002bec:	dfc00215 	stw	ra,8(sp)
 8002bf0:	2821883a 	mov	r16,r5
 8002bf4:	20000226 	beq	r4,zero,8002c00 <__swsetup_r+0x30>
 8002bf8:	20800e17 	ldw	r2,56(r4)
 8002bfc:	10003126 	beq	r2,zero,8002cc4 <__swsetup_r+0xf4>
 8002c00:	8080030b 	ldhu	r2,12(r16)
 8002c04:	10c0020c 	andi	r3,r2,8
 8002c08:	1009883a 	mov	r4,r2
 8002c0c:	18000f26 	beq	r3,zero,8002c4c <__swsetup_r+0x7c>
 8002c10:	80c00417 	ldw	r3,16(r16)
 8002c14:	18001526 	beq	r3,zero,8002c6c <__swsetup_r+0x9c>
 8002c18:	1100004c 	andi	r4,r2,1
 8002c1c:	20001c1e 	bne	r4,zero,8002c90 <__swsetup_r+0xc0>
 8002c20:	1080008c 	andi	r2,r2,2
 8002c24:	1000291e 	bne	r2,zero,8002ccc <__swsetup_r+0xfc>
 8002c28:	80800517 	ldw	r2,20(r16)
 8002c2c:	80800215 	stw	r2,8(r16)
 8002c30:	18001c26 	beq	r3,zero,8002ca4 <__swsetup_r+0xd4>
 8002c34:	0005883a 	mov	r2,zero
 8002c38:	dfc00217 	ldw	ra,8(sp)
 8002c3c:	dc400117 	ldw	r17,4(sp)
 8002c40:	dc000017 	ldw	r16,0(sp)
 8002c44:	dec00304 	addi	sp,sp,12
 8002c48:	f800283a 	ret
 8002c4c:	2080040c 	andi	r2,r4,16
 8002c50:	10002e26 	beq	r2,zero,8002d0c <__swsetup_r+0x13c>
 8002c54:	2080010c 	andi	r2,r4,4
 8002c58:	10001e1e 	bne	r2,zero,8002cd4 <__swsetup_r+0x104>
 8002c5c:	80c00417 	ldw	r3,16(r16)
 8002c60:	20800214 	ori	r2,r4,8
 8002c64:	8080030d 	sth	r2,12(r16)
 8002c68:	183feb1e 	bne	r3,zero,8002c18 <__alt_data_end+0xfc002c18>
 8002c6c:	1100a00c 	andi	r4,r2,640
 8002c70:	01408004 	movi	r5,512
 8002c74:	217fe826 	beq	r4,r5,8002c18 <__alt_data_end+0xfc002c18>
 8002c78:	800b883a 	mov	r5,r16
 8002c7c:	8809883a 	mov	r4,r17
 8002c80:	800578c0 	call	800578c <__smakebuf_r>
 8002c84:	8080030b 	ldhu	r2,12(r16)
 8002c88:	80c00417 	ldw	r3,16(r16)
 8002c8c:	003fe206 	br	8002c18 <__alt_data_end+0xfc002c18>
 8002c90:	80800517 	ldw	r2,20(r16)
 8002c94:	80000215 	stw	zero,8(r16)
 8002c98:	0085c83a 	sub	r2,zero,r2
 8002c9c:	80800615 	stw	r2,24(r16)
 8002ca0:	183fe41e 	bne	r3,zero,8002c34 <__alt_data_end+0xfc002c34>
 8002ca4:	80c0030b 	ldhu	r3,12(r16)
 8002ca8:	0005883a 	mov	r2,zero
 8002cac:	1900200c 	andi	r4,r3,128
 8002cb0:	203fe126 	beq	r4,zero,8002c38 <__alt_data_end+0xfc002c38>
 8002cb4:	18c01014 	ori	r3,r3,64
 8002cb8:	80c0030d 	sth	r3,12(r16)
 8002cbc:	00bfffc4 	movi	r2,-1
 8002cc0:	003fdd06 	br	8002c38 <__alt_data_end+0xfc002c38>
 8002cc4:	8004bdc0 	call	8004bdc <__sinit>
 8002cc8:	003fcd06 	br	8002c00 <__alt_data_end+0xfc002c00>
 8002ccc:	0005883a 	mov	r2,zero
 8002cd0:	003fd606 	br	8002c2c <__alt_data_end+0xfc002c2c>
 8002cd4:	81400c17 	ldw	r5,48(r16)
 8002cd8:	28000626 	beq	r5,zero,8002cf4 <__swsetup_r+0x124>
 8002cdc:	80801004 	addi	r2,r16,64
 8002ce0:	28800326 	beq	r5,r2,8002cf0 <__swsetup_r+0x120>
 8002ce4:	8809883a 	mov	r4,r17
 8002ce8:	8004d500 	call	8004d50 <_free_r>
 8002cec:	8100030b 	ldhu	r4,12(r16)
 8002cf0:	80000c15 	stw	zero,48(r16)
 8002cf4:	80c00417 	ldw	r3,16(r16)
 8002cf8:	00bff6c4 	movi	r2,-37
 8002cfc:	1108703a 	and	r4,r2,r4
 8002d00:	80000115 	stw	zero,4(r16)
 8002d04:	80c00015 	stw	r3,0(r16)
 8002d08:	003fd506 	br	8002c60 <__alt_data_end+0xfc002c60>
 8002d0c:	00800244 	movi	r2,9
 8002d10:	88800015 	stw	r2,0(r17)
 8002d14:	20801014 	ori	r2,r4,64
 8002d18:	8080030d 	sth	r2,12(r16)
 8002d1c:	00bfffc4 	movi	r2,-1
 8002d20:	003fc506 	br	8002c38 <__alt_data_end+0xfc002c38>

08002d24 <quorem>:
 8002d24:	defff204 	addi	sp,sp,-56
 8002d28:	ddc00b15 	stw	r23,44(sp)
 8002d2c:	20800417 	ldw	r2,16(r4)
 8002d30:	2dc00417 	ldw	r23,16(r5)
 8002d34:	dfc00d15 	stw	ra,52(sp)
 8002d38:	df000c15 	stw	fp,48(sp)
 8002d3c:	dd800a15 	stw	r22,40(sp)
 8002d40:	dd400915 	stw	r21,36(sp)
 8002d44:	dd000815 	stw	r20,32(sp)
 8002d48:	dcc00715 	stw	r19,28(sp)
 8002d4c:	dc800615 	stw	r18,24(sp)
 8002d50:	dc400515 	stw	r17,20(sp)
 8002d54:	dc000415 	stw	r16,16(sp)
 8002d58:	15c07a16 	blt	r2,r23,8002f44 <quorem+0x220>
 8002d5c:	bdffffc4 	addi	r23,r23,-1
 8002d60:	bde9883a 	add	r20,r23,r23
 8002d64:	28c00504 	addi	r3,r5,20
 8002d68:	a529883a 	add	r20,r20,r20
 8002d6c:	1d39883a 	add	fp,r3,r20
 8002d70:	24c00504 	addi	r19,r4,20
 8002d74:	d9400215 	stw	r5,8(sp)
 8002d78:	9d29883a 	add	r20,r19,r20
 8002d7c:	e1400017 	ldw	r5,0(fp)
 8002d80:	d9000015 	stw	r4,0(sp)
 8002d84:	a1000017 	ldw	r4,0(r20)
 8002d88:	29400044 	addi	r5,r5,1
 8002d8c:	d8c00115 	stw	r3,4(sp)
 8002d90:	dd000315 	stw	r20,12(sp)
 8002d94:	800abfc0 	call	800abfc <__udivsi3>
 8002d98:	1025883a 	mov	r18,r2
 8002d9c:	10003026 	beq	r2,zero,8002e60 <quorem+0x13c>
 8002da0:	dc400117 	ldw	r17,4(sp)
 8002da4:	9829883a 	mov	r20,r19
 8002da8:	002d883a 	mov	r22,zero
 8002dac:	0021883a 	mov	r16,zero
 8002db0:	8d400017 	ldw	r21,0(r17)
 8002db4:	900b883a 	mov	r5,r18
 8002db8:	8c400104 	addi	r17,r17,4
 8002dbc:	a93fffcc 	andi	r4,r21,65535
 8002dc0:	800061c0 	call	800061c <__mulsi3>
 8002dc4:	a808d43a 	srli	r4,r21,16
 8002dc8:	900b883a 	mov	r5,r18
 8002dcc:	15ad883a 	add	r22,r2,r22
 8002dd0:	800061c0 	call	800061c <__mulsi3>
 8002dd4:	a1000017 	ldw	r4,0(r20)
 8002dd8:	b00cd43a 	srli	r6,r22,16
 8002ddc:	b0ffffcc 	andi	r3,r22,65535
 8002de0:	217fffcc 	andi	r5,r4,65535
 8002de4:	2c21883a 	add	r16,r5,r16
 8002de8:	80c7c83a 	sub	r3,r16,r3
 8002dec:	2008d43a 	srli	r4,r4,16
 8002df0:	1185883a 	add	r2,r2,r6
 8002df4:	1821d43a 	srai	r16,r3,16
 8002df8:	117fffcc 	andi	r5,r2,65535
 8002dfc:	2149c83a 	sub	r4,r4,r5
 8002e00:	2421883a 	add	r16,r4,r16
 8002e04:	8008943a 	slli	r4,r16,16
 8002e08:	18ffffcc 	andi	r3,r3,65535
 8002e0c:	102cd43a 	srli	r22,r2,16
 8002e10:	20c8b03a 	or	r4,r4,r3
 8002e14:	a1000015 	stw	r4,0(r20)
 8002e18:	8021d43a 	srai	r16,r16,16
 8002e1c:	a5000104 	addi	r20,r20,4
 8002e20:	e47fe32e 	bgeu	fp,r17,8002db0 <__alt_data_end+0xfc002db0>
 8002e24:	d8c00317 	ldw	r3,12(sp)
 8002e28:	18800017 	ldw	r2,0(r3)
 8002e2c:	10000c1e 	bne	r2,zero,8002e60 <quorem+0x13c>
 8002e30:	18bfff04 	addi	r2,r3,-4
 8002e34:	9880082e 	bgeu	r19,r2,8002e58 <quorem+0x134>
 8002e38:	18ffff17 	ldw	r3,-4(r3)
 8002e3c:	18000326 	beq	r3,zero,8002e4c <quorem+0x128>
 8002e40:	00000506 	br	8002e58 <quorem+0x134>
 8002e44:	10c00017 	ldw	r3,0(r2)
 8002e48:	1800031e 	bne	r3,zero,8002e58 <quorem+0x134>
 8002e4c:	10bfff04 	addi	r2,r2,-4
 8002e50:	bdffffc4 	addi	r23,r23,-1
 8002e54:	98bffb36 	bltu	r19,r2,8002e44 <__alt_data_end+0xfc002e44>
 8002e58:	d8c00017 	ldw	r3,0(sp)
 8002e5c:	1dc00415 	stw	r23,16(r3)
 8002e60:	d9400217 	ldw	r5,8(sp)
 8002e64:	d9000017 	ldw	r4,0(sp)
 8002e68:	8006f880 	call	8006f88 <__mcmp>
 8002e6c:	10002816 	blt	r2,zero,8002f10 <quorem+0x1ec>
 8002e70:	dc400117 	ldw	r17,4(sp)
 8002e74:	94800044 	addi	r18,r18,1
 8002e78:	980d883a 	mov	r6,r19
 8002e7c:	0007883a 	mov	r3,zero
 8002e80:	31000017 	ldw	r4,0(r6)
 8002e84:	89400017 	ldw	r5,0(r17)
 8002e88:	31800104 	addi	r6,r6,4
 8002e8c:	20bfffcc 	andi	r2,r4,65535
 8002e90:	10c7883a 	add	r3,r2,r3
 8002e94:	28bfffcc 	andi	r2,r5,65535
 8002e98:	1885c83a 	sub	r2,r3,r2
 8002e9c:	280ad43a 	srli	r5,r5,16
 8002ea0:	2008d43a 	srli	r4,r4,16
 8002ea4:	1007d43a 	srai	r3,r2,16
 8002ea8:	10bfffcc 	andi	r2,r2,65535
 8002eac:	2149c83a 	sub	r4,r4,r5
 8002eb0:	20c9883a 	add	r4,r4,r3
 8002eb4:	200a943a 	slli	r5,r4,16
 8002eb8:	8c400104 	addi	r17,r17,4
 8002ebc:	2007d43a 	srai	r3,r4,16
 8002ec0:	2884b03a 	or	r2,r5,r2
 8002ec4:	30bfff15 	stw	r2,-4(r6)
 8002ec8:	e47fed2e 	bgeu	fp,r17,8002e80 <__alt_data_end+0xfc002e80>
 8002ecc:	bdc5883a 	add	r2,r23,r23
 8002ed0:	1085883a 	add	r2,r2,r2
 8002ed4:	9887883a 	add	r3,r19,r2
 8002ed8:	18800017 	ldw	r2,0(r3)
 8002edc:	10000c1e 	bne	r2,zero,8002f10 <quorem+0x1ec>
 8002ee0:	18bfff04 	addi	r2,r3,-4
 8002ee4:	9880082e 	bgeu	r19,r2,8002f08 <quorem+0x1e4>
 8002ee8:	18ffff17 	ldw	r3,-4(r3)
 8002eec:	18000326 	beq	r3,zero,8002efc <quorem+0x1d8>
 8002ef0:	00000506 	br	8002f08 <quorem+0x1e4>
 8002ef4:	10c00017 	ldw	r3,0(r2)
 8002ef8:	1800031e 	bne	r3,zero,8002f08 <quorem+0x1e4>
 8002efc:	10bfff04 	addi	r2,r2,-4
 8002f00:	bdffffc4 	addi	r23,r23,-1
 8002f04:	98bffb36 	bltu	r19,r2,8002ef4 <__alt_data_end+0xfc002ef4>
 8002f08:	d8c00017 	ldw	r3,0(sp)
 8002f0c:	1dc00415 	stw	r23,16(r3)
 8002f10:	9005883a 	mov	r2,r18
 8002f14:	dfc00d17 	ldw	ra,52(sp)
 8002f18:	df000c17 	ldw	fp,48(sp)
 8002f1c:	ddc00b17 	ldw	r23,44(sp)
 8002f20:	dd800a17 	ldw	r22,40(sp)
 8002f24:	dd400917 	ldw	r21,36(sp)
 8002f28:	dd000817 	ldw	r20,32(sp)
 8002f2c:	dcc00717 	ldw	r19,28(sp)
 8002f30:	dc800617 	ldw	r18,24(sp)
 8002f34:	dc400517 	ldw	r17,20(sp)
 8002f38:	dc000417 	ldw	r16,16(sp)
 8002f3c:	dec00e04 	addi	sp,sp,56
 8002f40:	f800283a 	ret
 8002f44:	0005883a 	mov	r2,zero
 8002f48:	003ff206 	br	8002f14 <__alt_data_end+0xfc002f14>

08002f4c <_dtoa_r>:
 8002f4c:	20801017 	ldw	r2,64(r4)
 8002f50:	deffde04 	addi	sp,sp,-136
 8002f54:	df002015 	stw	fp,128(sp)
 8002f58:	dcc01b15 	stw	r19,108(sp)
 8002f5c:	dc801a15 	stw	r18,104(sp)
 8002f60:	dc401915 	stw	r17,100(sp)
 8002f64:	dc001815 	stw	r16,96(sp)
 8002f68:	dfc02115 	stw	ra,132(sp)
 8002f6c:	ddc01f15 	stw	r23,124(sp)
 8002f70:	dd801e15 	stw	r22,120(sp)
 8002f74:	dd401d15 	stw	r21,116(sp)
 8002f78:	dd001c15 	stw	r20,112(sp)
 8002f7c:	d9c00315 	stw	r7,12(sp)
 8002f80:	2039883a 	mov	fp,r4
 8002f84:	3023883a 	mov	r17,r6
 8002f88:	2825883a 	mov	r18,r5
 8002f8c:	dc002417 	ldw	r16,144(sp)
 8002f90:	3027883a 	mov	r19,r6
 8002f94:	10000826 	beq	r2,zero,8002fb8 <_dtoa_r+0x6c>
 8002f98:	21801117 	ldw	r6,68(r4)
 8002f9c:	00c00044 	movi	r3,1
 8002fa0:	100b883a 	mov	r5,r2
 8002fa4:	1986983a 	sll	r3,r3,r6
 8002fa8:	11800115 	stw	r6,4(r2)
 8002fac:	10c00215 	stw	r3,8(r2)
 8002fb0:	80066ac0 	call	80066ac <_Bfree>
 8002fb4:	e0001015 	stw	zero,64(fp)
 8002fb8:	88002e16 	blt	r17,zero,8003074 <_dtoa_r+0x128>
 8002fbc:	80000015 	stw	zero,0(r16)
 8002fc0:	889ffc2c 	andhi	r2,r17,32752
 8002fc4:	00dffc34 	movhi	r3,32752
 8002fc8:	10c01c26 	beq	r2,r3,800303c <_dtoa_r+0xf0>
 8002fcc:	000d883a 	mov	r6,zero
 8002fd0:	000f883a 	mov	r7,zero
 8002fd4:	9009883a 	mov	r4,r18
 8002fd8:	980b883a 	mov	r5,r19
 8002fdc:	800bf340 	call	800bf34 <__eqdf2>
 8002fe0:	10002b1e 	bne	r2,zero,8003090 <_dtoa_r+0x144>
 8002fe4:	d9c02317 	ldw	r7,140(sp)
 8002fe8:	00800044 	movi	r2,1
 8002fec:	38800015 	stw	r2,0(r7)
 8002ff0:	d8802517 	ldw	r2,148(sp)
 8002ff4:	10019e26 	beq	r2,zero,8003670 <_dtoa_r+0x724>
 8002ff8:	d8c02517 	ldw	r3,148(sp)
 8002ffc:	008205f4 	movhi	r2,2071
 8003000:	109c6344 	addi	r2,r2,29069
 8003004:	18800015 	stw	r2,0(r3)
 8003008:	10bfffc4 	addi	r2,r2,-1
 800300c:	dfc02117 	ldw	ra,132(sp)
 8003010:	df002017 	ldw	fp,128(sp)
 8003014:	ddc01f17 	ldw	r23,124(sp)
 8003018:	dd801e17 	ldw	r22,120(sp)
 800301c:	dd401d17 	ldw	r21,116(sp)
 8003020:	dd001c17 	ldw	r20,112(sp)
 8003024:	dcc01b17 	ldw	r19,108(sp)
 8003028:	dc801a17 	ldw	r18,104(sp)
 800302c:	dc401917 	ldw	r17,100(sp)
 8003030:	dc001817 	ldw	r16,96(sp)
 8003034:	dec02204 	addi	sp,sp,136
 8003038:	f800283a 	ret
 800303c:	d8c02317 	ldw	r3,140(sp)
 8003040:	0089c3c4 	movi	r2,9999
 8003044:	18800015 	stw	r2,0(r3)
 8003048:	90017726 	beq	r18,zero,8003628 <_dtoa_r+0x6dc>
 800304c:	008205f4 	movhi	r2,2071
 8003050:	109c6f04 	addi	r2,r2,29116
 8003054:	d9002517 	ldw	r4,148(sp)
 8003058:	203fec26 	beq	r4,zero,800300c <__alt_data_end+0xfc00300c>
 800305c:	10c000c7 	ldb	r3,3(r2)
 8003060:	1801781e 	bne	r3,zero,8003644 <_dtoa_r+0x6f8>
 8003064:	10c000c4 	addi	r3,r2,3
 8003068:	d9802517 	ldw	r6,148(sp)
 800306c:	30c00015 	stw	r3,0(r6)
 8003070:	003fe606 	br	800300c <__alt_data_end+0xfc00300c>
 8003074:	04e00034 	movhi	r19,32768
 8003078:	9cffffc4 	addi	r19,r19,-1
 800307c:	00800044 	movi	r2,1
 8003080:	8ce6703a 	and	r19,r17,r19
 8003084:	80800015 	stw	r2,0(r16)
 8003088:	9823883a 	mov	r17,r19
 800308c:	003fcc06 	br	8002fc0 <__alt_data_end+0xfc002fc0>
 8003090:	d8800204 	addi	r2,sp,8
 8003094:	d8800015 	stw	r2,0(sp)
 8003098:	d9c00104 	addi	r7,sp,4
 800309c:	900b883a 	mov	r5,r18
 80030a0:	980d883a 	mov	r6,r19
 80030a4:	e009883a 	mov	r4,fp
 80030a8:	8820d53a 	srli	r16,r17,20
 80030ac:	80073540 	call	8007354 <__d2b>
 80030b0:	d8800915 	stw	r2,36(sp)
 80030b4:	8001651e 	bne	r16,zero,800364c <_dtoa_r+0x700>
 80030b8:	dd800217 	ldw	r22,8(sp)
 80030bc:	dc000117 	ldw	r16,4(sp)
 80030c0:	00800804 	movi	r2,32
 80030c4:	b421883a 	add	r16,r22,r16
 80030c8:	80c10c84 	addi	r3,r16,1074
 80030cc:	10c2d10e 	bge	r2,r3,8003c14 <_dtoa_r+0xcc8>
 80030d0:	00801004 	movi	r2,64
 80030d4:	81010484 	addi	r4,r16,1042
 80030d8:	10c7c83a 	sub	r3,r2,r3
 80030dc:	9108d83a 	srl	r4,r18,r4
 80030e0:	88e2983a 	sll	r17,r17,r3
 80030e4:	2448b03a 	or	r4,r4,r17
 80030e8:	800d4500 	call	800d450 <__floatunsidf>
 80030ec:	017f8434 	movhi	r5,65040
 80030f0:	01800044 	movi	r6,1
 80030f4:	1009883a 	mov	r4,r2
 80030f8:	194b883a 	add	r5,r3,r5
 80030fc:	843fffc4 	addi	r16,r16,-1
 8003100:	d9801115 	stw	r6,68(sp)
 8003104:	000d883a 	mov	r6,zero
 8003108:	01cffe34 	movhi	r7,16376
 800310c:	800c9f80 	call	800c9f8 <__subdf3>
 8003110:	0198dbf4 	movhi	r6,25455
 8003114:	01cff4f4 	movhi	r7,16339
 8003118:	3190d844 	addi	r6,r6,17249
 800311c:	39e1e9c4 	addi	r7,r7,-30809
 8003120:	1009883a 	mov	r4,r2
 8003124:	180b883a 	mov	r5,r3
 8003128:	800c18c0 	call	800c18c <__muldf3>
 800312c:	01a2d874 	movhi	r6,35681
 8003130:	01cff1f4 	movhi	r7,16327
 8003134:	31b22cc4 	addi	r6,r6,-14157
 8003138:	39e28a04 	addi	r7,r7,-30168
 800313c:	180b883a 	mov	r5,r3
 8003140:	1009883a 	mov	r4,r2
 8003144:	800acb80 	call	800acb8 <__adddf3>
 8003148:	8009883a 	mov	r4,r16
 800314c:	1029883a 	mov	r20,r2
 8003150:	1823883a 	mov	r17,r3
 8003154:	800d3740 	call	800d374 <__floatsidf>
 8003158:	019427f4 	movhi	r6,20639
 800315c:	01cff4f4 	movhi	r7,16339
 8003160:	319e7ec4 	addi	r6,r6,31227
 8003164:	39d104c4 	addi	r7,r7,17427
 8003168:	1009883a 	mov	r4,r2
 800316c:	180b883a 	mov	r5,r3
 8003170:	800c18c0 	call	800c18c <__muldf3>
 8003174:	100d883a 	mov	r6,r2
 8003178:	180f883a 	mov	r7,r3
 800317c:	a009883a 	mov	r4,r20
 8003180:	880b883a 	mov	r5,r17
 8003184:	800acb80 	call	800acb8 <__adddf3>
 8003188:	1009883a 	mov	r4,r2
 800318c:	180b883a 	mov	r5,r3
 8003190:	1029883a 	mov	r20,r2
 8003194:	1823883a 	mov	r17,r3
 8003198:	800d2f40 	call	800d2f4 <__fixdfsi>
 800319c:	000d883a 	mov	r6,zero
 80031a0:	000f883a 	mov	r7,zero
 80031a4:	a009883a 	mov	r4,r20
 80031a8:	880b883a 	mov	r5,r17
 80031ac:	d8800515 	stw	r2,20(sp)
 80031b0:	800c0980 	call	800c098 <__ledf2>
 80031b4:	10028716 	blt	r2,zero,8003bd4 <_dtoa_r+0xc88>
 80031b8:	d8c00517 	ldw	r3,20(sp)
 80031bc:	00800584 	movi	r2,22
 80031c0:	10c27536 	bltu	r2,r3,8003b98 <_dtoa_r+0xc4c>
 80031c4:	180490fa 	slli	r2,r3,3
 80031c8:	00c205f4 	movhi	r3,2071
 80031cc:	18dc8b04 	addi	r3,r3,29228
 80031d0:	1885883a 	add	r2,r3,r2
 80031d4:	11000017 	ldw	r4,0(r2)
 80031d8:	11400117 	ldw	r5,4(r2)
 80031dc:	900d883a 	mov	r6,r18
 80031e0:	980f883a 	mov	r7,r19
 80031e4:	800bfbc0 	call	800bfbc <__gedf2>
 80031e8:	00828d0e 	bge	zero,r2,8003c20 <_dtoa_r+0xcd4>
 80031ec:	d9000517 	ldw	r4,20(sp)
 80031f0:	d8000e15 	stw	zero,56(sp)
 80031f4:	213fffc4 	addi	r4,r4,-1
 80031f8:	d9000515 	stw	r4,20(sp)
 80031fc:	b42dc83a 	sub	r22,r22,r16
 8003200:	b5bfffc4 	addi	r22,r22,-1
 8003204:	b0026f16 	blt	r22,zero,8003bc4 <_dtoa_r+0xc78>
 8003208:	d8000815 	stw	zero,32(sp)
 800320c:	d9c00517 	ldw	r7,20(sp)
 8003210:	38026416 	blt	r7,zero,8003ba4 <_dtoa_r+0xc58>
 8003214:	b1ed883a 	add	r22,r22,r7
 8003218:	d9c00d15 	stw	r7,52(sp)
 800321c:	d8000a15 	stw	zero,40(sp)
 8003220:	d9800317 	ldw	r6,12(sp)
 8003224:	00800244 	movi	r2,9
 8003228:	11811436 	bltu	r2,r6,800367c <_dtoa_r+0x730>
 800322c:	00800144 	movi	r2,5
 8003230:	1184e10e 	bge	r2,r6,80045b8 <_dtoa_r+0x166c>
 8003234:	31bfff04 	addi	r6,r6,-4
 8003238:	d9800315 	stw	r6,12(sp)
 800323c:	0023883a 	mov	r17,zero
 8003240:	d9800317 	ldw	r6,12(sp)
 8003244:	008000c4 	movi	r2,3
 8003248:	30836726 	beq	r6,r2,8003fe8 <_dtoa_r+0x109c>
 800324c:	1183410e 	bge	r2,r6,8003f54 <_dtoa_r+0x1008>
 8003250:	d9c00317 	ldw	r7,12(sp)
 8003254:	00800104 	movi	r2,4
 8003258:	38827c26 	beq	r7,r2,8003c4c <_dtoa_r+0xd00>
 800325c:	00800144 	movi	r2,5
 8003260:	3884c41e 	bne	r7,r2,8004574 <_dtoa_r+0x1628>
 8003264:	00800044 	movi	r2,1
 8003268:	d8800b15 	stw	r2,44(sp)
 800326c:	d8c00517 	ldw	r3,20(sp)
 8003270:	d9002217 	ldw	r4,136(sp)
 8003274:	1907883a 	add	r3,r3,r4
 8003278:	19800044 	addi	r6,r3,1
 800327c:	d8c00c15 	stw	r3,48(sp)
 8003280:	d9800615 	stw	r6,24(sp)
 8003284:	0183a40e 	bge	zero,r6,8004118 <_dtoa_r+0x11cc>
 8003288:	d9800617 	ldw	r6,24(sp)
 800328c:	3021883a 	mov	r16,r6
 8003290:	e0001115 	stw	zero,68(fp)
 8003294:	008005c4 	movi	r2,23
 8003298:	1184c92e 	bgeu	r2,r6,80045c0 <_dtoa_r+0x1674>
 800329c:	00c00044 	movi	r3,1
 80032a0:	00800104 	movi	r2,4
 80032a4:	1085883a 	add	r2,r2,r2
 80032a8:	11000504 	addi	r4,r2,20
 80032ac:	180b883a 	mov	r5,r3
 80032b0:	18c00044 	addi	r3,r3,1
 80032b4:	313ffb2e 	bgeu	r6,r4,80032a4 <__alt_data_end+0xfc0032a4>
 80032b8:	e1401115 	stw	r5,68(fp)
 80032bc:	e009883a 	mov	r4,fp
 80032c0:	80066040 	call	8006604 <_Balloc>
 80032c4:	d8800715 	stw	r2,28(sp)
 80032c8:	e0801015 	stw	r2,64(fp)
 80032cc:	00800384 	movi	r2,14
 80032d0:	1400f736 	bltu	r2,r16,80036b0 <_dtoa_r+0x764>
 80032d4:	8800f626 	beq	r17,zero,80036b0 <_dtoa_r+0x764>
 80032d8:	d9c00517 	ldw	r7,20(sp)
 80032dc:	01c39a0e 	bge	zero,r7,8004148 <_dtoa_r+0x11fc>
 80032e0:	388003cc 	andi	r2,r7,15
 80032e4:	100490fa 	slli	r2,r2,3
 80032e8:	382bd13a 	srai	r21,r7,4
 80032ec:	00c205f4 	movhi	r3,2071
 80032f0:	18dc8b04 	addi	r3,r3,29228
 80032f4:	1885883a 	add	r2,r3,r2
 80032f8:	a8c0040c 	andi	r3,r21,16
 80032fc:	12400017 	ldw	r9,0(r2)
 8003300:	12000117 	ldw	r8,4(r2)
 8003304:	18037926 	beq	r3,zero,80040ec <_dtoa_r+0x11a0>
 8003308:	008205f4 	movhi	r2,2071
 800330c:	109c8104 	addi	r2,r2,29188
 8003310:	11800817 	ldw	r6,32(r2)
 8003314:	11c00917 	ldw	r7,36(r2)
 8003318:	9009883a 	mov	r4,r18
 800331c:	980b883a 	mov	r5,r19
 8003320:	da001715 	stw	r8,92(sp)
 8003324:	da401615 	stw	r9,88(sp)
 8003328:	800b5640 	call	800b564 <__divdf3>
 800332c:	da001717 	ldw	r8,92(sp)
 8003330:	da401617 	ldw	r9,88(sp)
 8003334:	ad4003cc 	andi	r21,r21,15
 8003338:	040000c4 	movi	r16,3
 800333c:	1023883a 	mov	r17,r2
 8003340:	1829883a 	mov	r20,r3
 8003344:	a8001126 	beq	r21,zero,800338c <_dtoa_r+0x440>
 8003348:	05c205f4 	movhi	r23,2071
 800334c:	bddc8104 	addi	r23,r23,29188
 8003350:	4805883a 	mov	r2,r9
 8003354:	4007883a 	mov	r3,r8
 8003358:	a980004c 	andi	r6,r21,1
 800335c:	1009883a 	mov	r4,r2
 8003360:	a82bd07a 	srai	r21,r21,1
 8003364:	180b883a 	mov	r5,r3
 8003368:	30000426 	beq	r6,zero,800337c <_dtoa_r+0x430>
 800336c:	b9800017 	ldw	r6,0(r23)
 8003370:	b9c00117 	ldw	r7,4(r23)
 8003374:	84000044 	addi	r16,r16,1
 8003378:	800c18c0 	call	800c18c <__muldf3>
 800337c:	bdc00204 	addi	r23,r23,8
 8003380:	a83ff51e 	bne	r21,zero,8003358 <__alt_data_end+0xfc003358>
 8003384:	1013883a 	mov	r9,r2
 8003388:	1811883a 	mov	r8,r3
 800338c:	480d883a 	mov	r6,r9
 8003390:	400f883a 	mov	r7,r8
 8003394:	8809883a 	mov	r4,r17
 8003398:	a00b883a 	mov	r5,r20
 800339c:	800b5640 	call	800b564 <__divdf3>
 80033a0:	d8800f15 	stw	r2,60(sp)
 80033a4:	d8c01015 	stw	r3,64(sp)
 80033a8:	d8c00e17 	ldw	r3,56(sp)
 80033ac:	18000626 	beq	r3,zero,80033c8 <_dtoa_r+0x47c>
 80033b0:	d9000f17 	ldw	r4,60(sp)
 80033b4:	d9401017 	ldw	r5,64(sp)
 80033b8:	000d883a 	mov	r6,zero
 80033bc:	01cffc34 	movhi	r7,16368
 80033c0:	800c0980 	call	800c098 <__ledf2>
 80033c4:	10040b16 	blt	r2,zero,80043f4 <_dtoa_r+0x14a8>
 80033c8:	8009883a 	mov	r4,r16
 80033cc:	800d3740 	call	800d374 <__floatsidf>
 80033d0:	d9800f17 	ldw	r6,60(sp)
 80033d4:	d9c01017 	ldw	r7,64(sp)
 80033d8:	1009883a 	mov	r4,r2
 80033dc:	180b883a 	mov	r5,r3
 80033e0:	800c18c0 	call	800c18c <__muldf3>
 80033e4:	000d883a 	mov	r6,zero
 80033e8:	01d00734 	movhi	r7,16412
 80033ec:	1009883a 	mov	r4,r2
 80033f0:	180b883a 	mov	r5,r3
 80033f4:	800acb80 	call	800acb8 <__adddf3>
 80033f8:	1021883a 	mov	r16,r2
 80033fc:	d8800617 	ldw	r2,24(sp)
 8003400:	047f3034 	movhi	r17,64704
 8003404:	1c63883a 	add	r17,r3,r17
 8003408:	10031826 	beq	r2,zero,800406c <_dtoa_r+0x1120>
 800340c:	d8c00517 	ldw	r3,20(sp)
 8003410:	db000617 	ldw	r12,24(sp)
 8003414:	d8c01315 	stw	r3,76(sp)
 8003418:	d9000b17 	ldw	r4,44(sp)
 800341c:	20038f26 	beq	r4,zero,800425c <_dtoa_r+0x1310>
 8003420:	60bfffc4 	addi	r2,r12,-1
 8003424:	100490fa 	slli	r2,r2,3
 8003428:	00c205f4 	movhi	r3,2071
 800342c:	18dc8b04 	addi	r3,r3,29228
 8003430:	1885883a 	add	r2,r3,r2
 8003434:	11800017 	ldw	r6,0(r2)
 8003438:	11c00117 	ldw	r7,4(r2)
 800343c:	d8800717 	ldw	r2,28(sp)
 8003440:	0009883a 	mov	r4,zero
 8003444:	014ff834 	movhi	r5,16352
 8003448:	db001615 	stw	r12,88(sp)
 800344c:	15c00044 	addi	r23,r2,1
 8003450:	800b5640 	call	800b564 <__divdf3>
 8003454:	800d883a 	mov	r6,r16
 8003458:	880f883a 	mov	r7,r17
 800345c:	1009883a 	mov	r4,r2
 8003460:	180b883a 	mov	r5,r3
 8003464:	800c9f80 	call	800c9f8 <__subdf3>
 8003468:	d9401017 	ldw	r5,64(sp)
 800346c:	d9000f17 	ldw	r4,60(sp)
 8003470:	102b883a 	mov	r21,r2
 8003474:	d8c01215 	stw	r3,72(sp)
 8003478:	800d2f40 	call	800d2f4 <__fixdfsi>
 800347c:	1009883a 	mov	r4,r2
 8003480:	1029883a 	mov	r20,r2
 8003484:	800d3740 	call	800d374 <__floatsidf>
 8003488:	d9000f17 	ldw	r4,60(sp)
 800348c:	d9401017 	ldw	r5,64(sp)
 8003490:	100d883a 	mov	r6,r2
 8003494:	180f883a 	mov	r7,r3
 8003498:	800c9f80 	call	800c9f8 <__subdf3>
 800349c:	1823883a 	mov	r17,r3
 80034a0:	d8c00717 	ldw	r3,28(sp)
 80034a4:	d9401217 	ldw	r5,72(sp)
 80034a8:	a2000c04 	addi	r8,r20,48
 80034ac:	1021883a 	mov	r16,r2
 80034b0:	1a000005 	stb	r8,0(r3)
 80034b4:	800d883a 	mov	r6,r16
 80034b8:	880f883a 	mov	r7,r17
 80034bc:	a809883a 	mov	r4,r21
 80034c0:	4029883a 	mov	r20,r8
 80034c4:	800bfbc0 	call	800bfbc <__gedf2>
 80034c8:	00841d16 	blt	zero,r2,8004540 <_dtoa_r+0x15f4>
 80034cc:	800d883a 	mov	r6,r16
 80034d0:	880f883a 	mov	r7,r17
 80034d4:	0009883a 	mov	r4,zero
 80034d8:	014ffc34 	movhi	r5,16368
 80034dc:	800c9f80 	call	800c9f8 <__subdf3>
 80034e0:	d9401217 	ldw	r5,72(sp)
 80034e4:	100d883a 	mov	r6,r2
 80034e8:	180f883a 	mov	r7,r3
 80034ec:	a809883a 	mov	r4,r21
 80034f0:	800bfbc0 	call	800bfbc <__gedf2>
 80034f4:	db001617 	ldw	r12,88(sp)
 80034f8:	00840e16 	blt	zero,r2,8004534 <_dtoa_r+0x15e8>
 80034fc:	00800044 	movi	r2,1
 8003500:	13006b0e 	bge	r2,r12,80036b0 <_dtoa_r+0x764>
 8003504:	d9000717 	ldw	r4,28(sp)
 8003508:	dd800f15 	stw	r22,60(sp)
 800350c:	dcc01015 	stw	r19,64(sp)
 8003510:	2319883a 	add	r12,r4,r12
 8003514:	dcc01217 	ldw	r19,72(sp)
 8003518:	602d883a 	mov	r22,r12
 800351c:	dc801215 	stw	r18,72(sp)
 8003520:	b825883a 	mov	r18,r23
 8003524:	00000906 	br	800354c <_dtoa_r+0x600>
 8003528:	800c9f80 	call	800c9f8 <__subdf3>
 800352c:	a80d883a 	mov	r6,r21
 8003530:	980f883a 	mov	r7,r19
 8003534:	1009883a 	mov	r4,r2
 8003538:	180b883a 	mov	r5,r3
 800353c:	800c0980 	call	800c098 <__ledf2>
 8003540:	1003e816 	blt	r2,zero,80044e4 <_dtoa_r+0x1598>
 8003544:	b825883a 	mov	r18,r23
 8003548:	bd83e926 	beq	r23,r22,80044f0 <_dtoa_r+0x15a4>
 800354c:	a809883a 	mov	r4,r21
 8003550:	980b883a 	mov	r5,r19
 8003554:	000d883a 	mov	r6,zero
 8003558:	01d00934 	movhi	r7,16420
 800355c:	800c18c0 	call	800c18c <__muldf3>
 8003560:	000d883a 	mov	r6,zero
 8003564:	01d00934 	movhi	r7,16420
 8003568:	8009883a 	mov	r4,r16
 800356c:	880b883a 	mov	r5,r17
 8003570:	102b883a 	mov	r21,r2
 8003574:	1827883a 	mov	r19,r3
 8003578:	800c18c0 	call	800c18c <__muldf3>
 800357c:	180b883a 	mov	r5,r3
 8003580:	1009883a 	mov	r4,r2
 8003584:	1821883a 	mov	r16,r3
 8003588:	1023883a 	mov	r17,r2
 800358c:	800d2f40 	call	800d2f4 <__fixdfsi>
 8003590:	1009883a 	mov	r4,r2
 8003594:	1029883a 	mov	r20,r2
 8003598:	800d3740 	call	800d374 <__floatsidf>
 800359c:	8809883a 	mov	r4,r17
 80035a0:	800b883a 	mov	r5,r16
 80035a4:	100d883a 	mov	r6,r2
 80035a8:	180f883a 	mov	r7,r3
 80035ac:	800c9f80 	call	800c9f8 <__subdf3>
 80035b0:	a5000c04 	addi	r20,r20,48
 80035b4:	a80d883a 	mov	r6,r21
 80035b8:	980f883a 	mov	r7,r19
 80035bc:	1009883a 	mov	r4,r2
 80035c0:	180b883a 	mov	r5,r3
 80035c4:	95000005 	stb	r20,0(r18)
 80035c8:	1021883a 	mov	r16,r2
 80035cc:	1823883a 	mov	r17,r3
 80035d0:	800c0980 	call	800c098 <__ledf2>
 80035d4:	bdc00044 	addi	r23,r23,1
 80035d8:	800d883a 	mov	r6,r16
 80035dc:	880f883a 	mov	r7,r17
 80035e0:	0009883a 	mov	r4,zero
 80035e4:	014ffc34 	movhi	r5,16368
 80035e8:	103fcf0e 	bge	r2,zero,8003528 <__alt_data_end+0xfc003528>
 80035ec:	d8c01317 	ldw	r3,76(sp)
 80035f0:	d8c00515 	stw	r3,20(sp)
 80035f4:	d9400917 	ldw	r5,36(sp)
 80035f8:	e009883a 	mov	r4,fp
 80035fc:	80066ac0 	call	80066ac <_Bfree>
 8003600:	d9000517 	ldw	r4,20(sp)
 8003604:	d9802317 	ldw	r6,140(sp)
 8003608:	d9c02517 	ldw	r7,148(sp)
 800360c:	b8000005 	stb	zero,0(r23)
 8003610:	20800044 	addi	r2,r4,1
 8003614:	30800015 	stw	r2,0(r6)
 8003618:	3802aa26 	beq	r7,zero,80040c4 <_dtoa_r+0x1178>
 800361c:	3dc00015 	stw	r23,0(r7)
 8003620:	d8800717 	ldw	r2,28(sp)
 8003624:	003e7906 	br	800300c <__alt_data_end+0xfc00300c>
 8003628:	00800434 	movhi	r2,16
 800362c:	10bfffc4 	addi	r2,r2,-1
 8003630:	88a2703a 	and	r17,r17,r2
 8003634:	883e851e 	bne	r17,zero,800304c <__alt_data_end+0xfc00304c>
 8003638:	008205f4 	movhi	r2,2071
 800363c:	109c6c04 	addi	r2,r2,29104
 8003640:	003e8406 	br	8003054 <__alt_data_end+0xfc003054>
 8003644:	10c00204 	addi	r3,r2,8
 8003648:	003e8706 	br	8003068 <__alt_data_end+0xfc003068>
 800364c:	01400434 	movhi	r5,16
 8003650:	297fffc4 	addi	r5,r5,-1
 8003654:	994a703a 	and	r5,r19,r5
 8003658:	9009883a 	mov	r4,r18
 800365c:	843f0044 	addi	r16,r16,-1023
 8003660:	294ffc34 	orhi	r5,r5,16368
 8003664:	dd800217 	ldw	r22,8(sp)
 8003668:	d8001115 	stw	zero,68(sp)
 800366c:	003ea506 	br	8003104 <__alt_data_end+0xfc003104>
 8003670:	008205f4 	movhi	r2,2071
 8003674:	109c6304 	addi	r2,r2,29068
 8003678:	003e6406 	br	800300c <__alt_data_end+0xfc00300c>
 800367c:	e0001115 	stw	zero,68(fp)
 8003680:	000b883a 	mov	r5,zero
 8003684:	e009883a 	mov	r4,fp
 8003688:	80066040 	call	8006604 <_Balloc>
 800368c:	01bfffc4 	movi	r6,-1
 8003690:	01c00044 	movi	r7,1
 8003694:	d8800715 	stw	r2,28(sp)
 8003698:	d9800c15 	stw	r6,48(sp)
 800369c:	e0801015 	stw	r2,64(fp)
 80036a0:	d8000315 	stw	zero,12(sp)
 80036a4:	d9c00b15 	stw	r7,44(sp)
 80036a8:	d9800615 	stw	r6,24(sp)
 80036ac:	d8002215 	stw	zero,136(sp)
 80036b0:	d8800117 	ldw	r2,4(sp)
 80036b4:	10008916 	blt	r2,zero,80038dc <_dtoa_r+0x990>
 80036b8:	d9000517 	ldw	r4,20(sp)
 80036bc:	00c00384 	movi	r3,14
 80036c0:	19008616 	blt	r3,r4,80038dc <_dtoa_r+0x990>
 80036c4:	200490fa 	slli	r2,r4,3
 80036c8:	00c205f4 	movhi	r3,2071
 80036cc:	d9802217 	ldw	r6,136(sp)
 80036d0:	18dc8b04 	addi	r3,r3,29228
 80036d4:	1885883a 	add	r2,r3,r2
 80036d8:	14000017 	ldw	r16,0(r2)
 80036dc:	14400117 	ldw	r17,4(r2)
 80036e0:	30016316 	blt	r6,zero,8003c70 <_dtoa_r+0xd24>
 80036e4:	800d883a 	mov	r6,r16
 80036e8:	880f883a 	mov	r7,r17
 80036ec:	9009883a 	mov	r4,r18
 80036f0:	980b883a 	mov	r5,r19
 80036f4:	800b5640 	call	800b564 <__divdf3>
 80036f8:	180b883a 	mov	r5,r3
 80036fc:	1009883a 	mov	r4,r2
 8003700:	800d2f40 	call	800d2f4 <__fixdfsi>
 8003704:	1009883a 	mov	r4,r2
 8003708:	102b883a 	mov	r21,r2
 800370c:	800d3740 	call	800d374 <__floatsidf>
 8003710:	800d883a 	mov	r6,r16
 8003714:	880f883a 	mov	r7,r17
 8003718:	1009883a 	mov	r4,r2
 800371c:	180b883a 	mov	r5,r3
 8003720:	800c18c0 	call	800c18c <__muldf3>
 8003724:	100d883a 	mov	r6,r2
 8003728:	180f883a 	mov	r7,r3
 800372c:	9009883a 	mov	r4,r18
 8003730:	980b883a 	mov	r5,r19
 8003734:	800c9f80 	call	800c9f8 <__subdf3>
 8003738:	d9c00717 	ldw	r7,28(sp)
 800373c:	1009883a 	mov	r4,r2
 8003740:	a8800c04 	addi	r2,r21,48
 8003744:	38800005 	stb	r2,0(r7)
 8003748:	3dc00044 	addi	r23,r7,1
 800374c:	d9c00617 	ldw	r7,24(sp)
 8003750:	01800044 	movi	r6,1
 8003754:	180b883a 	mov	r5,r3
 8003758:	2005883a 	mov	r2,r4
 800375c:	39803826 	beq	r7,r6,8003840 <_dtoa_r+0x8f4>
 8003760:	000d883a 	mov	r6,zero
 8003764:	01d00934 	movhi	r7,16420
 8003768:	800c18c0 	call	800c18c <__muldf3>
 800376c:	000d883a 	mov	r6,zero
 8003770:	000f883a 	mov	r7,zero
 8003774:	1009883a 	mov	r4,r2
 8003778:	180b883a 	mov	r5,r3
 800377c:	1025883a 	mov	r18,r2
 8003780:	1827883a 	mov	r19,r3
 8003784:	800bf340 	call	800bf34 <__eqdf2>
 8003788:	103f9a26 	beq	r2,zero,80035f4 <__alt_data_end+0xfc0035f4>
 800378c:	d9c00617 	ldw	r7,24(sp)
 8003790:	d8c00717 	ldw	r3,28(sp)
 8003794:	b829883a 	mov	r20,r23
 8003798:	38bfffc4 	addi	r2,r7,-1
 800379c:	18ad883a 	add	r22,r3,r2
 80037a0:	00000a06 	br	80037cc <_dtoa_r+0x880>
 80037a4:	800c18c0 	call	800c18c <__muldf3>
 80037a8:	000d883a 	mov	r6,zero
 80037ac:	000f883a 	mov	r7,zero
 80037b0:	1009883a 	mov	r4,r2
 80037b4:	180b883a 	mov	r5,r3
 80037b8:	1025883a 	mov	r18,r2
 80037bc:	1827883a 	mov	r19,r3
 80037c0:	b829883a 	mov	r20,r23
 80037c4:	800bf340 	call	800bf34 <__eqdf2>
 80037c8:	103f8a26 	beq	r2,zero,80035f4 <__alt_data_end+0xfc0035f4>
 80037cc:	800d883a 	mov	r6,r16
 80037d0:	880f883a 	mov	r7,r17
 80037d4:	9009883a 	mov	r4,r18
 80037d8:	980b883a 	mov	r5,r19
 80037dc:	800b5640 	call	800b564 <__divdf3>
 80037e0:	180b883a 	mov	r5,r3
 80037e4:	1009883a 	mov	r4,r2
 80037e8:	800d2f40 	call	800d2f4 <__fixdfsi>
 80037ec:	1009883a 	mov	r4,r2
 80037f0:	102b883a 	mov	r21,r2
 80037f4:	800d3740 	call	800d374 <__floatsidf>
 80037f8:	800d883a 	mov	r6,r16
 80037fc:	880f883a 	mov	r7,r17
 8003800:	1009883a 	mov	r4,r2
 8003804:	180b883a 	mov	r5,r3
 8003808:	800c18c0 	call	800c18c <__muldf3>
 800380c:	100d883a 	mov	r6,r2
 8003810:	180f883a 	mov	r7,r3
 8003814:	9009883a 	mov	r4,r18
 8003818:	980b883a 	mov	r5,r19
 800381c:	800c9f80 	call	800c9f8 <__subdf3>
 8003820:	aa000c04 	addi	r8,r21,48
 8003824:	a2000005 	stb	r8,0(r20)
 8003828:	000d883a 	mov	r6,zero
 800382c:	01d00934 	movhi	r7,16420
 8003830:	1009883a 	mov	r4,r2
 8003834:	180b883a 	mov	r5,r3
 8003838:	a5c00044 	addi	r23,r20,1
 800383c:	b53fd91e 	bne	r22,r20,80037a4 <__alt_data_end+0xfc0037a4>
 8003840:	100d883a 	mov	r6,r2
 8003844:	180f883a 	mov	r7,r3
 8003848:	1009883a 	mov	r4,r2
 800384c:	180b883a 	mov	r5,r3
 8003850:	800acb80 	call	800acb8 <__adddf3>
 8003854:	100d883a 	mov	r6,r2
 8003858:	180f883a 	mov	r7,r3
 800385c:	8009883a 	mov	r4,r16
 8003860:	880b883a 	mov	r5,r17
 8003864:	1027883a 	mov	r19,r2
 8003868:	1825883a 	mov	r18,r3
 800386c:	800c0980 	call	800c098 <__ledf2>
 8003870:	10000816 	blt	r2,zero,8003894 <_dtoa_r+0x948>
 8003874:	980d883a 	mov	r6,r19
 8003878:	900f883a 	mov	r7,r18
 800387c:	8009883a 	mov	r4,r16
 8003880:	880b883a 	mov	r5,r17
 8003884:	800bf340 	call	800bf34 <__eqdf2>
 8003888:	103f5a1e 	bne	r2,zero,80035f4 <__alt_data_end+0xfc0035f4>
 800388c:	ad40004c 	andi	r21,r21,1
 8003890:	a83f5826 	beq	r21,zero,80035f4 <__alt_data_end+0xfc0035f4>
 8003894:	bd3fffc3 	ldbu	r20,-1(r23)
 8003898:	b8bfffc4 	addi	r2,r23,-1
 800389c:	1007883a 	mov	r3,r2
 80038a0:	01400e44 	movi	r5,57
 80038a4:	d9800717 	ldw	r6,28(sp)
 80038a8:	00000506 	br	80038c0 <_dtoa_r+0x974>
 80038ac:	18ffffc4 	addi	r3,r3,-1
 80038b0:	11824726 	beq	r2,r6,80041d0 <_dtoa_r+0x1284>
 80038b4:	1d000003 	ldbu	r20,0(r3)
 80038b8:	102f883a 	mov	r23,r2
 80038bc:	10bfffc4 	addi	r2,r2,-1
 80038c0:	a1003fcc 	andi	r4,r20,255
 80038c4:	2100201c 	xori	r4,r4,128
 80038c8:	213fe004 	addi	r4,r4,-128
 80038cc:	217ff726 	beq	r4,r5,80038ac <__alt_data_end+0xfc0038ac>
 80038d0:	a2000044 	addi	r8,r20,1
 80038d4:	12000005 	stb	r8,0(r2)
 80038d8:	003f4606 	br	80035f4 <__alt_data_end+0xfc0035f4>
 80038dc:	d9000b17 	ldw	r4,44(sp)
 80038e0:	2000c826 	beq	r4,zero,8003c04 <_dtoa_r+0xcb8>
 80038e4:	d9800317 	ldw	r6,12(sp)
 80038e8:	00c00044 	movi	r3,1
 80038ec:	1980f90e 	bge	r3,r6,8003cd4 <_dtoa_r+0xd88>
 80038f0:	d8800617 	ldw	r2,24(sp)
 80038f4:	d8c00a17 	ldw	r3,40(sp)
 80038f8:	157fffc4 	addi	r21,r2,-1
 80038fc:	1d41f316 	blt	r3,r21,80040cc <_dtoa_r+0x1180>
 8003900:	1d6bc83a 	sub	r21,r3,r21
 8003904:	d9c00617 	ldw	r7,24(sp)
 8003908:	3802aa16 	blt	r7,zero,80043b4 <_dtoa_r+0x1468>
 800390c:	dd000817 	ldw	r20,32(sp)
 8003910:	d8800617 	ldw	r2,24(sp)
 8003914:	d8c00817 	ldw	r3,32(sp)
 8003918:	01400044 	movi	r5,1
 800391c:	e009883a 	mov	r4,fp
 8003920:	1887883a 	add	r3,r3,r2
 8003924:	d8c00815 	stw	r3,32(sp)
 8003928:	b0ad883a 	add	r22,r22,r2
 800392c:	8006a380 	call	8006a38 <__i2b>
 8003930:	1023883a 	mov	r17,r2
 8003934:	a0000826 	beq	r20,zero,8003958 <_dtoa_r+0xa0c>
 8003938:	0580070e 	bge	zero,r22,8003958 <_dtoa_r+0xa0c>
 800393c:	a005883a 	mov	r2,r20
 8003940:	b500b916 	blt	r22,r20,8003c28 <_dtoa_r+0xcdc>
 8003944:	d9000817 	ldw	r4,32(sp)
 8003948:	a0a9c83a 	sub	r20,r20,r2
 800394c:	b0adc83a 	sub	r22,r22,r2
 8003950:	2089c83a 	sub	r4,r4,r2
 8003954:	d9000815 	stw	r4,32(sp)
 8003958:	d9800a17 	ldw	r6,40(sp)
 800395c:	0181810e 	bge	zero,r6,8003f64 <_dtoa_r+0x1018>
 8003960:	d9c00b17 	ldw	r7,44(sp)
 8003964:	3800b326 	beq	r7,zero,8003c34 <_dtoa_r+0xce8>
 8003968:	a800b226 	beq	r21,zero,8003c34 <_dtoa_r+0xce8>
 800396c:	880b883a 	mov	r5,r17
 8003970:	a80d883a 	mov	r6,r21
 8003974:	e009883a 	mov	r4,fp
 8003978:	8006d000 	call	8006d00 <__pow5mult>
 800397c:	d9800917 	ldw	r6,36(sp)
 8003980:	100b883a 	mov	r5,r2
 8003984:	e009883a 	mov	r4,fp
 8003988:	1023883a 	mov	r17,r2
 800398c:	8006a740 	call	8006a74 <__multiply>
 8003990:	1021883a 	mov	r16,r2
 8003994:	d8800a17 	ldw	r2,40(sp)
 8003998:	d9400917 	ldw	r5,36(sp)
 800399c:	e009883a 	mov	r4,fp
 80039a0:	1545c83a 	sub	r2,r2,r21
 80039a4:	d8800a15 	stw	r2,40(sp)
 80039a8:	80066ac0 	call	80066ac <_Bfree>
 80039ac:	d8c00a17 	ldw	r3,40(sp)
 80039b0:	18009f1e 	bne	r3,zero,8003c30 <_dtoa_r+0xce4>
 80039b4:	05c00044 	movi	r23,1
 80039b8:	e009883a 	mov	r4,fp
 80039bc:	b80b883a 	mov	r5,r23
 80039c0:	8006a380 	call	8006a38 <__i2b>
 80039c4:	d9000d17 	ldw	r4,52(sp)
 80039c8:	102b883a 	mov	r21,r2
 80039cc:	2000ce26 	beq	r4,zero,8003d08 <_dtoa_r+0xdbc>
 80039d0:	200d883a 	mov	r6,r4
 80039d4:	100b883a 	mov	r5,r2
 80039d8:	e009883a 	mov	r4,fp
 80039dc:	8006d000 	call	8006d00 <__pow5mult>
 80039e0:	d9800317 	ldw	r6,12(sp)
 80039e4:	102b883a 	mov	r21,r2
 80039e8:	b981810e 	bge	r23,r6,8003ff0 <_dtoa_r+0x10a4>
 80039ec:	0027883a 	mov	r19,zero
 80039f0:	a8800417 	ldw	r2,16(r21)
 80039f4:	05c00804 	movi	r23,32
 80039f8:	10800104 	addi	r2,r2,4
 80039fc:	1085883a 	add	r2,r2,r2
 8003a00:	1085883a 	add	r2,r2,r2
 8003a04:	a885883a 	add	r2,r21,r2
 8003a08:	11000017 	ldw	r4,0(r2)
 8003a0c:	80069200 	call	8006920 <__hi0bits>
 8003a10:	b885c83a 	sub	r2,r23,r2
 8003a14:	1585883a 	add	r2,r2,r22
 8003a18:	108007cc 	andi	r2,r2,31
 8003a1c:	1000b326 	beq	r2,zero,8003cec <_dtoa_r+0xda0>
 8003a20:	00c00804 	movi	r3,32
 8003a24:	1887c83a 	sub	r3,r3,r2
 8003a28:	01000104 	movi	r4,4
 8003a2c:	20c2cd0e 	bge	r4,r3,8004564 <_dtoa_r+0x1618>
 8003a30:	00c00704 	movi	r3,28
 8003a34:	1885c83a 	sub	r2,r3,r2
 8003a38:	d8c00817 	ldw	r3,32(sp)
 8003a3c:	a0a9883a 	add	r20,r20,r2
 8003a40:	b0ad883a 	add	r22,r22,r2
 8003a44:	1887883a 	add	r3,r3,r2
 8003a48:	d8c00815 	stw	r3,32(sp)
 8003a4c:	d9800817 	ldw	r6,32(sp)
 8003a50:	0180040e 	bge	zero,r6,8003a64 <_dtoa_r+0xb18>
 8003a54:	800b883a 	mov	r5,r16
 8003a58:	e009883a 	mov	r4,fp
 8003a5c:	8006e400 	call	8006e40 <__lshift>
 8003a60:	1021883a 	mov	r16,r2
 8003a64:	0580050e 	bge	zero,r22,8003a7c <_dtoa_r+0xb30>
 8003a68:	a80b883a 	mov	r5,r21
 8003a6c:	b00d883a 	mov	r6,r22
 8003a70:	e009883a 	mov	r4,fp
 8003a74:	8006e400 	call	8006e40 <__lshift>
 8003a78:	102b883a 	mov	r21,r2
 8003a7c:	d9c00e17 	ldw	r7,56(sp)
 8003a80:	3801211e 	bne	r7,zero,8003f08 <_dtoa_r+0xfbc>
 8003a84:	d9800617 	ldw	r6,24(sp)
 8003a88:	0181380e 	bge	zero,r6,8003f6c <_dtoa_r+0x1020>
 8003a8c:	d8c00b17 	ldw	r3,44(sp)
 8003a90:	1800ab1e 	bne	r3,zero,8003d40 <_dtoa_r+0xdf4>
 8003a94:	dc800717 	ldw	r18,28(sp)
 8003a98:	dcc00617 	ldw	r19,24(sp)
 8003a9c:	9029883a 	mov	r20,r18
 8003aa0:	00000206 	br	8003aac <_dtoa_r+0xb60>
 8003aa4:	80066d40 	call	80066d4 <__multadd>
 8003aa8:	1021883a 	mov	r16,r2
 8003aac:	a80b883a 	mov	r5,r21
 8003ab0:	8009883a 	mov	r4,r16
 8003ab4:	8002d240 	call	8002d24 <quorem>
 8003ab8:	10800c04 	addi	r2,r2,48
 8003abc:	90800005 	stb	r2,0(r18)
 8003ac0:	94800044 	addi	r18,r18,1
 8003ac4:	9507c83a 	sub	r3,r18,r20
 8003ac8:	000f883a 	mov	r7,zero
 8003acc:	01800284 	movi	r6,10
 8003ad0:	800b883a 	mov	r5,r16
 8003ad4:	e009883a 	mov	r4,fp
 8003ad8:	1cfff216 	blt	r3,r19,8003aa4 <__alt_data_end+0xfc003aa4>
 8003adc:	1011883a 	mov	r8,r2
 8003ae0:	d8800617 	ldw	r2,24(sp)
 8003ae4:	0082370e 	bge	zero,r2,80043c4 <_dtoa_r+0x1478>
 8003ae8:	d9000717 	ldw	r4,28(sp)
 8003aec:	0025883a 	mov	r18,zero
 8003af0:	20af883a 	add	r23,r4,r2
 8003af4:	01800044 	movi	r6,1
 8003af8:	800b883a 	mov	r5,r16
 8003afc:	e009883a 	mov	r4,fp
 8003b00:	da001715 	stw	r8,92(sp)
 8003b04:	8006e400 	call	8006e40 <__lshift>
 8003b08:	a80b883a 	mov	r5,r21
 8003b0c:	1009883a 	mov	r4,r2
 8003b10:	d8800915 	stw	r2,36(sp)
 8003b14:	8006f880 	call	8006f88 <__mcmp>
 8003b18:	da001717 	ldw	r8,92(sp)
 8003b1c:	0081800e 	bge	zero,r2,8004120 <_dtoa_r+0x11d4>
 8003b20:	b93fffc3 	ldbu	r4,-1(r23)
 8003b24:	b8bfffc4 	addi	r2,r23,-1
 8003b28:	1007883a 	mov	r3,r2
 8003b2c:	01800e44 	movi	r6,57
 8003b30:	d9c00717 	ldw	r7,28(sp)
 8003b34:	00000506 	br	8003b4c <_dtoa_r+0xc00>
 8003b38:	18ffffc4 	addi	r3,r3,-1
 8003b3c:	11c12326 	beq	r2,r7,8003fcc <_dtoa_r+0x1080>
 8003b40:	19000003 	ldbu	r4,0(r3)
 8003b44:	102f883a 	mov	r23,r2
 8003b48:	10bfffc4 	addi	r2,r2,-1
 8003b4c:	21403fcc 	andi	r5,r4,255
 8003b50:	2940201c 	xori	r5,r5,128
 8003b54:	297fe004 	addi	r5,r5,-128
 8003b58:	29bff726 	beq	r5,r6,8003b38 <__alt_data_end+0xfc003b38>
 8003b5c:	21000044 	addi	r4,r4,1
 8003b60:	11000005 	stb	r4,0(r2)
 8003b64:	a80b883a 	mov	r5,r21
 8003b68:	e009883a 	mov	r4,fp
 8003b6c:	80066ac0 	call	80066ac <_Bfree>
 8003b70:	883ea026 	beq	r17,zero,80035f4 <__alt_data_end+0xfc0035f4>
 8003b74:	90000426 	beq	r18,zero,8003b88 <_dtoa_r+0xc3c>
 8003b78:	94400326 	beq	r18,r17,8003b88 <_dtoa_r+0xc3c>
 8003b7c:	900b883a 	mov	r5,r18
 8003b80:	e009883a 	mov	r4,fp
 8003b84:	80066ac0 	call	80066ac <_Bfree>
 8003b88:	880b883a 	mov	r5,r17
 8003b8c:	e009883a 	mov	r4,fp
 8003b90:	80066ac0 	call	80066ac <_Bfree>
 8003b94:	003e9706 	br	80035f4 <__alt_data_end+0xfc0035f4>
 8003b98:	01800044 	movi	r6,1
 8003b9c:	d9800e15 	stw	r6,56(sp)
 8003ba0:	003d9606 	br	80031fc <__alt_data_end+0xfc0031fc>
 8003ba4:	d8800817 	ldw	r2,32(sp)
 8003ba8:	d8c00517 	ldw	r3,20(sp)
 8003bac:	d8000d15 	stw	zero,52(sp)
 8003bb0:	10c5c83a 	sub	r2,r2,r3
 8003bb4:	00c9c83a 	sub	r4,zero,r3
 8003bb8:	d8800815 	stw	r2,32(sp)
 8003bbc:	d9000a15 	stw	r4,40(sp)
 8003bc0:	003d9706 	br	8003220 <__alt_data_end+0xfc003220>
 8003bc4:	05adc83a 	sub	r22,zero,r22
 8003bc8:	dd800815 	stw	r22,32(sp)
 8003bcc:	002d883a 	mov	r22,zero
 8003bd0:	003d8e06 	br	800320c <__alt_data_end+0xfc00320c>
 8003bd4:	d9000517 	ldw	r4,20(sp)
 8003bd8:	800d3740 	call	800d374 <__floatsidf>
 8003bdc:	100d883a 	mov	r6,r2
 8003be0:	180f883a 	mov	r7,r3
 8003be4:	a009883a 	mov	r4,r20
 8003be8:	880b883a 	mov	r5,r17
 8003bec:	800bf340 	call	800bf34 <__eqdf2>
 8003bf0:	103d7126 	beq	r2,zero,80031b8 <__alt_data_end+0xfc0031b8>
 8003bf4:	d9c00517 	ldw	r7,20(sp)
 8003bf8:	39ffffc4 	addi	r7,r7,-1
 8003bfc:	d9c00515 	stw	r7,20(sp)
 8003c00:	003d6d06 	br	80031b8 <__alt_data_end+0xfc0031b8>
 8003c04:	dd400a17 	ldw	r21,40(sp)
 8003c08:	dd000817 	ldw	r20,32(sp)
 8003c0c:	0023883a 	mov	r17,zero
 8003c10:	003f4806 	br	8003934 <__alt_data_end+0xfc003934>
 8003c14:	10e3c83a 	sub	r17,r2,r3
 8003c18:	9448983a 	sll	r4,r18,r17
 8003c1c:	003d3206 	br	80030e8 <__alt_data_end+0xfc0030e8>
 8003c20:	d8000e15 	stw	zero,56(sp)
 8003c24:	003d7506 	br	80031fc <__alt_data_end+0xfc0031fc>
 8003c28:	b005883a 	mov	r2,r22
 8003c2c:	003f4506 	br	8003944 <__alt_data_end+0xfc003944>
 8003c30:	dc000915 	stw	r16,36(sp)
 8003c34:	d9800a17 	ldw	r6,40(sp)
 8003c38:	d9400917 	ldw	r5,36(sp)
 8003c3c:	e009883a 	mov	r4,fp
 8003c40:	8006d000 	call	8006d00 <__pow5mult>
 8003c44:	1021883a 	mov	r16,r2
 8003c48:	003f5a06 	br	80039b4 <__alt_data_end+0xfc0039b4>
 8003c4c:	01c00044 	movi	r7,1
 8003c50:	d9c00b15 	stw	r7,44(sp)
 8003c54:	d8802217 	ldw	r2,136(sp)
 8003c58:	0081280e 	bge	zero,r2,80040fc <_dtoa_r+0x11b0>
 8003c5c:	100d883a 	mov	r6,r2
 8003c60:	1021883a 	mov	r16,r2
 8003c64:	d8800c15 	stw	r2,48(sp)
 8003c68:	d8800615 	stw	r2,24(sp)
 8003c6c:	003d8806 	br	8003290 <__alt_data_end+0xfc003290>
 8003c70:	d8800617 	ldw	r2,24(sp)
 8003c74:	00be9b16 	blt	zero,r2,80036e4 <__alt_data_end+0xfc0036e4>
 8003c78:	10010f1e 	bne	r2,zero,80040b8 <_dtoa_r+0x116c>
 8003c7c:	880b883a 	mov	r5,r17
 8003c80:	000d883a 	mov	r6,zero
 8003c84:	01d00534 	movhi	r7,16404
 8003c88:	8009883a 	mov	r4,r16
 8003c8c:	800c18c0 	call	800c18c <__muldf3>
 8003c90:	900d883a 	mov	r6,r18
 8003c94:	980f883a 	mov	r7,r19
 8003c98:	1009883a 	mov	r4,r2
 8003c9c:	180b883a 	mov	r5,r3
 8003ca0:	800bfbc0 	call	800bfbc <__gedf2>
 8003ca4:	002b883a 	mov	r21,zero
 8003ca8:	0023883a 	mov	r17,zero
 8003cac:	1000bf16 	blt	r2,zero,8003fac <_dtoa_r+0x1060>
 8003cb0:	d9802217 	ldw	r6,136(sp)
 8003cb4:	ddc00717 	ldw	r23,28(sp)
 8003cb8:	018c303a 	nor	r6,zero,r6
 8003cbc:	d9800515 	stw	r6,20(sp)
 8003cc0:	a80b883a 	mov	r5,r21
 8003cc4:	e009883a 	mov	r4,fp
 8003cc8:	80066ac0 	call	80066ac <_Bfree>
 8003ccc:	883e4926 	beq	r17,zero,80035f4 <__alt_data_end+0xfc0035f4>
 8003cd0:	003fad06 	br	8003b88 <__alt_data_end+0xfc003b88>
 8003cd4:	d9c01117 	ldw	r7,68(sp)
 8003cd8:	3801bc26 	beq	r7,zero,80043cc <_dtoa_r+0x1480>
 8003cdc:	10810cc4 	addi	r2,r2,1075
 8003ce0:	dd400a17 	ldw	r21,40(sp)
 8003ce4:	dd000817 	ldw	r20,32(sp)
 8003ce8:	003f0a06 	br	8003914 <__alt_data_end+0xfc003914>
 8003cec:	00800704 	movi	r2,28
 8003cf0:	d9000817 	ldw	r4,32(sp)
 8003cf4:	a0a9883a 	add	r20,r20,r2
 8003cf8:	b0ad883a 	add	r22,r22,r2
 8003cfc:	2089883a 	add	r4,r4,r2
 8003d00:	d9000815 	stw	r4,32(sp)
 8003d04:	003f5106 	br	8003a4c <__alt_data_end+0xfc003a4c>
 8003d08:	d8c00317 	ldw	r3,12(sp)
 8003d0c:	b8c1fc0e 	bge	r23,r3,8004500 <_dtoa_r+0x15b4>
 8003d10:	0027883a 	mov	r19,zero
 8003d14:	b805883a 	mov	r2,r23
 8003d18:	003f3e06 	br	8003a14 <__alt_data_end+0xfc003a14>
 8003d1c:	880b883a 	mov	r5,r17
 8003d20:	e009883a 	mov	r4,fp
 8003d24:	000f883a 	mov	r7,zero
 8003d28:	01800284 	movi	r6,10
 8003d2c:	80066d40 	call	80066d4 <__multadd>
 8003d30:	d9000c17 	ldw	r4,48(sp)
 8003d34:	1023883a 	mov	r17,r2
 8003d38:	0102040e 	bge	zero,r4,800454c <_dtoa_r+0x1600>
 8003d3c:	d9000615 	stw	r4,24(sp)
 8003d40:	0500050e 	bge	zero,r20,8003d58 <_dtoa_r+0xe0c>
 8003d44:	880b883a 	mov	r5,r17
 8003d48:	a00d883a 	mov	r6,r20
 8003d4c:	e009883a 	mov	r4,fp
 8003d50:	8006e400 	call	8006e40 <__lshift>
 8003d54:	1023883a 	mov	r17,r2
 8003d58:	9801241e 	bne	r19,zero,80041ec <_dtoa_r+0x12a0>
 8003d5c:	8829883a 	mov	r20,r17
 8003d60:	d9000617 	ldw	r4,24(sp)
 8003d64:	dcc00717 	ldw	r19,28(sp)
 8003d68:	9480004c 	andi	r18,r18,1
 8003d6c:	20bfffc4 	addi	r2,r4,-1
 8003d70:	9885883a 	add	r2,r19,r2
 8003d74:	d8800415 	stw	r2,16(sp)
 8003d78:	dc800615 	stw	r18,24(sp)
 8003d7c:	a80b883a 	mov	r5,r21
 8003d80:	8009883a 	mov	r4,r16
 8003d84:	8002d240 	call	8002d24 <quorem>
 8003d88:	880b883a 	mov	r5,r17
 8003d8c:	8009883a 	mov	r4,r16
 8003d90:	102f883a 	mov	r23,r2
 8003d94:	8006f880 	call	8006f88 <__mcmp>
 8003d98:	a80b883a 	mov	r5,r21
 8003d9c:	a00d883a 	mov	r6,r20
 8003da0:	e009883a 	mov	r4,fp
 8003da4:	102d883a 	mov	r22,r2
 8003da8:	8006fe80 	call	8006fe8 <__mdiff>
 8003dac:	1007883a 	mov	r3,r2
 8003db0:	10800317 	ldw	r2,12(r2)
 8003db4:	bc800c04 	addi	r18,r23,48
 8003db8:	180b883a 	mov	r5,r3
 8003dbc:	10004e1e 	bne	r2,zero,8003ef8 <_dtoa_r+0xfac>
 8003dc0:	8009883a 	mov	r4,r16
 8003dc4:	d8c01615 	stw	r3,88(sp)
 8003dc8:	8006f880 	call	8006f88 <__mcmp>
 8003dcc:	d8c01617 	ldw	r3,88(sp)
 8003dd0:	e009883a 	mov	r4,fp
 8003dd4:	d8801615 	stw	r2,88(sp)
 8003dd8:	180b883a 	mov	r5,r3
 8003ddc:	80066ac0 	call	80066ac <_Bfree>
 8003de0:	d8801617 	ldw	r2,88(sp)
 8003de4:	1000041e 	bne	r2,zero,8003df8 <_dtoa_r+0xeac>
 8003de8:	d9800317 	ldw	r6,12(sp)
 8003dec:	3000021e 	bne	r6,zero,8003df8 <_dtoa_r+0xeac>
 8003df0:	d8c00617 	ldw	r3,24(sp)
 8003df4:	18003726 	beq	r3,zero,8003ed4 <_dtoa_r+0xf88>
 8003df8:	b0002016 	blt	r22,zero,8003e7c <_dtoa_r+0xf30>
 8003dfc:	b000041e 	bne	r22,zero,8003e10 <_dtoa_r+0xec4>
 8003e00:	d9000317 	ldw	r4,12(sp)
 8003e04:	2000021e 	bne	r4,zero,8003e10 <_dtoa_r+0xec4>
 8003e08:	d8c00617 	ldw	r3,24(sp)
 8003e0c:	18001b26 	beq	r3,zero,8003e7c <_dtoa_r+0xf30>
 8003e10:	00810716 	blt	zero,r2,8004230 <_dtoa_r+0x12e4>
 8003e14:	d8c00417 	ldw	r3,16(sp)
 8003e18:	9d800044 	addi	r22,r19,1
 8003e1c:	9c800005 	stb	r18,0(r19)
 8003e20:	b02f883a 	mov	r23,r22
 8003e24:	98c10626 	beq	r19,r3,8004240 <_dtoa_r+0x12f4>
 8003e28:	800b883a 	mov	r5,r16
 8003e2c:	000f883a 	mov	r7,zero
 8003e30:	01800284 	movi	r6,10
 8003e34:	e009883a 	mov	r4,fp
 8003e38:	80066d40 	call	80066d4 <__multadd>
 8003e3c:	1021883a 	mov	r16,r2
 8003e40:	000f883a 	mov	r7,zero
 8003e44:	01800284 	movi	r6,10
 8003e48:	880b883a 	mov	r5,r17
 8003e4c:	e009883a 	mov	r4,fp
 8003e50:	8d002526 	beq	r17,r20,8003ee8 <_dtoa_r+0xf9c>
 8003e54:	80066d40 	call	80066d4 <__multadd>
 8003e58:	a00b883a 	mov	r5,r20
 8003e5c:	000f883a 	mov	r7,zero
 8003e60:	01800284 	movi	r6,10
 8003e64:	e009883a 	mov	r4,fp
 8003e68:	1023883a 	mov	r17,r2
 8003e6c:	80066d40 	call	80066d4 <__multadd>
 8003e70:	1029883a 	mov	r20,r2
 8003e74:	b027883a 	mov	r19,r22
 8003e78:	003fc006 	br	8003d7c <__alt_data_end+0xfc003d7c>
 8003e7c:	9011883a 	mov	r8,r18
 8003e80:	00800e0e 	bge	zero,r2,8003ebc <_dtoa_r+0xf70>
 8003e84:	800b883a 	mov	r5,r16
 8003e88:	01800044 	movi	r6,1
 8003e8c:	e009883a 	mov	r4,fp
 8003e90:	da001715 	stw	r8,92(sp)
 8003e94:	8006e400 	call	8006e40 <__lshift>
 8003e98:	a80b883a 	mov	r5,r21
 8003e9c:	1009883a 	mov	r4,r2
 8003ea0:	1021883a 	mov	r16,r2
 8003ea4:	8006f880 	call	8006f88 <__mcmp>
 8003ea8:	da001717 	ldw	r8,92(sp)
 8003eac:	0081960e 	bge	zero,r2,8004508 <_dtoa_r+0x15bc>
 8003eb0:	00800e44 	movi	r2,57
 8003eb4:	40817026 	beq	r8,r2,8004478 <_dtoa_r+0x152c>
 8003eb8:	ba000c44 	addi	r8,r23,49
 8003ebc:	8825883a 	mov	r18,r17
 8003ec0:	9dc00044 	addi	r23,r19,1
 8003ec4:	9a000005 	stb	r8,0(r19)
 8003ec8:	a023883a 	mov	r17,r20
 8003ecc:	dc000915 	stw	r16,36(sp)
 8003ed0:	003f2406 	br	8003b64 <__alt_data_end+0xfc003b64>
 8003ed4:	00800e44 	movi	r2,57
 8003ed8:	9011883a 	mov	r8,r18
 8003edc:	90816626 	beq	r18,r2,8004478 <_dtoa_r+0x152c>
 8003ee0:	05bff516 	blt	zero,r22,8003eb8 <__alt_data_end+0xfc003eb8>
 8003ee4:	003ff506 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8003ee8:	80066d40 	call	80066d4 <__multadd>
 8003eec:	1023883a 	mov	r17,r2
 8003ef0:	1029883a 	mov	r20,r2
 8003ef4:	003fdf06 	br	8003e74 <__alt_data_end+0xfc003e74>
 8003ef8:	e009883a 	mov	r4,fp
 8003efc:	80066ac0 	call	80066ac <_Bfree>
 8003f00:	00800044 	movi	r2,1
 8003f04:	003fbc06 	br	8003df8 <__alt_data_end+0xfc003df8>
 8003f08:	a80b883a 	mov	r5,r21
 8003f0c:	8009883a 	mov	r4,r16
 8003f10:	8006f880 	call	8006f88 <__mcmp>
 8003f14:	103edb0e 	bge	r2,zero,8003a84 <__alt_data_end+0xfc003a84>
 8003f18:	800b883a 	mov	r5,r16
 8003f1c:	000f883a 	mov	r7,zero
 8003f20:	01800284 	movi	r6,10
 8003f24:	e009883a 	mov	r4,fp
 8003f28:	80066d40 	call	80066d4 <__multadd>
 8003f2c:	1021883a 	mov	r16,r2
 8003f30:	d8800517 	ldw	r2,20(sp)
 8003f34:	d8c00b17 	ldw	r3,44(sp)
 8003f38:	10bfffc4 	addi	r2,r2,-1
 8003f3c:	d8800515 	stw	r2,20(sp)
 8003f40:	183f761e 	bne	r3,zero,8003d1c <__alt_data_end+0xfc003d1c>
 8003f44:	d9000c17 	ldw	r4,48(sp)
 8003f48:	0101730e 	bge	zero,r4,8004518 <_dtoa_r+0x15cc>
 8003f4c:	d9000615 	stw	r4,24(sp)
 8003f50:	003ed006 	br	8003a94 <__alt_data_end+0xfc003a94>
 8003f54:	00800084 	movi	r2,2
 8003f58:	3081861e 	bne	r6,r2,8004574 <_dtoa_r+0x1628>
 8003f5c:	d8000b15 	stw	zero,44(sp)
 8003f60:	003f3c06 	br	8003c54 <__alt_data_end+0xfc003c54>
 8003f64:	dc000917 	ldw	r16,36(sp)
 8003f68:	003e9206 	br	80039b4 <__alt_data_end+0xfc0039b4>
 8003f6c:	d9c00317 	ldw	r7,12(sp)
 8003f70:	00800084 	movi	r2,2
 8003f74:	11fec50e 	bge	r2,r7,8003a8c <__alt_data_end+0xfc003a8c>
 8003f78:	d9000617 	ldw	r4,24(sp)
 8003f7c:	20013c1e 	bne	r4,zero,8004470 <_dtoa_r+0x1524>
 8003f80:	a80b883a 	mov	r5,r21
 8003f84:	000f883a 	mov	r7,zero
 8003f88:	01800144 	movi	r6,5
 8003f8c:	e009883a 	mov	r4,fp
 8003f90:	80066d40 	call	80066d4 <__multadd>
 8003f94:	100b883a 	mov	r5,r2
 8003f98:	8009883a 	mov	r4,r16
 8003f9c:	102b883a 	mov	r21,r2
 8003fa0:	8006f880 	call	8006f88 <__mcmp>
 8003fa4:	dc000915 	stw	r16,36(sp)
 8003fa8:	00bf410e 	bge	zero,r2,8003cb0 <__alt_data_end+0xfc003cb0>
 8003fac:	d9c00717 	ldw	r7,28(sp)
 8003fb0:	00800c44 	movi	r2,49
 8003fb4:	38800005 	stb	r2,0(r7)
 8003fb8:	d8800517 	ldw	r2,20(sp)
 8003fbc:	3dc00044 	addi	r23,r7,1
 8003fc0:	10800044 	addi	r2,r2,1
 8003fc4:	d8800515 	stw	r2,20(sp)
 8003fc8:	003f3d06 	br	8003cc0 <__alt_data_end+0xfc003cc0>
 8003fcc:	d9800517 	ldw	r6,20(sp)
 8003fd0:	d9c00717 	ldw	r7,28(sp)
 8003fd4:	00800c44 	movi	r2,49
 8003fd8:	31800044 	addi	r6,r6,1
 8003fdc:	d9800515 	stw	r6,20(sp)
 8003fe0:	38800005 	stb	r2,0(r7)
 8003fe4:	003edf06 	br	8003b64 <__alt_data_end+0xfc003b64>
 8003fe8:	d8000b15 	stw	zero,44(sp)
 8003fec:	003c9f06 	br	800326c <__alt_data_end+0xfc00326c>
 8003ff0:	903e7e1e 	bne	r18,zero,80039ec <__alt_data_end+0xfc0039ec>
 8003ff4:	00800434 	movhi	r2,16
 8003ff8:	10bfffc4 	addi	r2,r2,-1
 8003ffc:	9884703a 	and	r2,r19,r2
 8004000:	1000ea1e 	bne	r2,zero,80043ac <_dtoa_r+0x1460>
 8004004:	9cdffc2c 	andhi	r19,r19,32752
 8004008:	9800e826 	beq	r19,zero,80043ac <_dtoa_r+0x1460>
 800400c:	d9c00817 	ldw	r7,32(sp)
 8004010:	b5800044 	addi	r22,r22,1
 8004014:	04c00044 	movi	r19,1
 8004018:	39c00044 	addi	r7,r7,1
 800401c:	d9c00815 	stw	r7,32(sp)
 8004020:	d8800d17 	ldw	r2,52(sp)
 8004024:	103e721e 	bne	r2,zero,80039f0 <__alt_data_end+0xfc0039f0>
 8004028:	00800044 	movi	r2,1
 800402c:	003e7906 	br	8003a14 <__alt_data_end+0xfc003a14>
 8004030:	8009883a 	mov	r4,r16
 8004034:	800d3740 	call	800d374 <__floatsidf>
 8004038:	d9800f17 	ldw	r6,60(sp)
 800403c:	d9c01017 	ldw	r7,64(sp)
 8004040:	1009883a 	mov	r4,r2
 8004044:	180b883a 	mov	r5,r3
 8004048:	800c18c0 	call	800c18c <__muldf3>
 800404c:	000d883a 	mov	r6,zero
 8004050:	01d00734 	movhi	r7,16412
 8004054:	1009883a 	mov	r4,r2
 8004058:	180b883a 	mov	r5,r3
 800405c:	800acb80 	call	800acb8 <__adddf3>
 8004060:	047f3034 	movhi	r17,64704
 8004064:	1021883a 	mov	r16,r2
 8004068:	1c63883a 	add	r17,r3,r17
 800406c:	d9000f17 	ldw	r4,60(sp)
 8004070:	d9401017 	ldw	r5,64(sp)
 8004074:	000d883a 	mov	r6,zero
 8004078:	01d00534 	movhi	r7,16404
 800407c:	800c9f80 	call	800c9f8 <__subdf3>
 8004080:	800d883a 	mov	r6,r16
 8004084:	880f883a 	mov	r7,r17
 8004088:	1009883a 	mov	r4,r2
 800408c:	180b883a 	mov	r5,r3
 8004090:	102b883a 	mov	r21,r2
 8004094:	1829883a 	mov	r20,r3
 8004098:	800bfbc0 	call	800bfbc <__gedf2>
 800409c:	00806c16 	blt	zero,r2,8004250 <_dtoa_r+0x1304>
 80040a0:	89e0003c 	xorhi	r7,r17,32768
 80040a4:	800d883a 	mov	r6,r16
 80040a8:	a809883a 	mov	r4,r21
 80040ac:	a00b883a 	mov	r5,r20
 80040b0:	800c0980 	call	800c098 <__ledf2>
 80040b4:	103d7e0e 	bge	r2,zero,80036b0 <__alt_data_end+0xfc0036b0>
 80040b8:	002b883a 	mov	r21,zero
 80040bc:	0023883a 	mov	r17,zero
 80040c0:	003efb06 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 80040c4:	d8800717 	ldw	r2,28(sp)
 80040c8:	003bd006 	br	800300c <__alt_data_end+0xfc00300c>
 80040cc:	d9000a17 	ldw	r4,40(sp)
 80040d0:	d9800d17 	ldw	r6,52(sp)
 80040d4:	dd400a15 	stw	r21,40(sp)
 80040d8:	a905c83a 	sub	r2,r21,r4
 80040dc:	308d883a 	add	r6,r6,r2
 80040e0:	d9800d15 	stw	r6,52(sp)
 80040e4:	002b883a 	mov	r21,zero
 80040e8:	003e0606 	br	8003904 <__alt_data_end+0xfc003904>
 80040ec:	9023883a 	mov	r17,r18
 80040f0:	9829883a 	mov	r20,r19
 80040f4:	04000084 	movi	r16,2
 80040f8:	003c9206 	br	8003344 <__alt_data_end+0xfc003344>
 80040fc:	04000044 	movi	r16,1
 8004100:	dc000c15 	stw	r16,48(sp)
 8004104:	dc000615 	stw	r16,24(sp)
 8004108:	dc002215 	stw	r16,136(sp)
 800410c:	e0001115 	stw	zero,68(fp)
 8004110:	000b883a 	mov	r5,zero
 8004114:	003c6906 	br	80032bc <__alt_data_end+0xfc0032bc>
 8004118:	3021883a 	mov	r16,r6
 800411c:	003ffb06 	br	800410c <__alt_data_end+0xfc00410c>
 8004120:	1000021e 	bne	r2,zero,800412c <_dtoa_r+0x11e0>
 8004124:	4200004c 	andi	r8,r8,1
 8004128:	403e7d1e 	bne	r8,zero,8003b20 <__alt_data_end+0xfc003b20>
 800412c:	01000c04 	movi	r4,48
 8004130:	00000106 	br	8004138 <_dtoa_r+0x11ec>
 8004134:	102f883a 	mov	r23,r2
 8004138:	b8bfffc4 	addi	r2,r23,-1
 800413c:	10c00007 	ldb	r3,0(r2)
 8004140:	193ffc26 	beq	r3,r4,8004134 <__alt_data_end+0xfc004134>
 8004144:	003e8706 	br	8003b64 <__alt_data_end+0xfc003b64>
 8004148:	d8800517 	ldw	r2,20(sp)
 800414c:	00a3c83a 	sub	r17,zero,r2
 8004150:	8800a426 	beq	r17,zero,80043e4 <_dtoa_r+0x1498>
 8004154:	888003cc 	andi	r2,r17,15
 8004158:	100490fa 	slli	r2,r2,3
 800415c:	00c205f4 	movhi	r3,2071
 8004160:	18dc8b04 	addi	r3,r3,29228
 8004164:	1885883a 	add	r2,r3,r2
 8004168:	11800017 	ldw	r6,0(r2)
 800416c:	11c00117 	ldw	r7,4(r2)
 8004170:	9009883a 	mov	r4,r18
 8004174:	980b883a 	mov	r5,r19
 8004178:	8823d13a 	srai	r17,r17,4
 800417c:	800c18c0 	call	800c18c <__muldf3>
 8004180:	d8800f15 	stw	r2,60(sp)
 8004184:	d8c01015 	stw	r3,64(sp)
 8004188:	8800e826 	beq	r17,zero,800452c <_dtoa_r+0x15e0>
 800418c:	050205f4 	movhi	r20,2071
 8004190:	a51c8104 	addi	r20,r20,29188
 8004194:	04000084 	movi	r16,2
 8004198:	8980004c 	andi	r6,r17,1
 800419c:	1009883a 	mov	r4,r2
 80041a0:	8823d07a 	srai	r17,r17,1
 80041a4:	180b883a 	mov	r5,r3
 80041a8:	30000426 	beq	r6,zero,80041bc <_dtoa_r+0x1270>
 80041ac:	a1800017 	ldw	r6,0(r20)
 80041b0:	a1c00117 	ldw	r7,4(r20)
 80041b4:	84000044 	addi	r16,r16,1
 80041b8:	800c18c0 	call	800c18c <__muldf3>
 80041bc:	a5000204 	addi	r20,r20,8
 80041c0:	883ff51e 	bne	r17,zero,8004198 <__alt_data_end+0xfc004198>
 80041c4:	d8800f15 	stw	r2,60(sp)
 80041c8:	d8c01015 	stw	r3,64(sp)
 80041cc:	003c7606 	br	80033a8 <__alt_data_end+0xfc0033a8>
 80041d0:	00c00c04 	movi	r3,48
 80041d4:	10c00005 	stb	r3,0(r2)
 80041d8:	d8c00517 	ldw	r3,20(sp)
 80041dc:	bd3fffc3 	ldbu	r20,-1(r23)
 80041e0:	18c00044 	addi	r3,r3,1
 80041e4:	d8c00515 	stw	r3,20(sp)
 80041e8:	003db906 	br	80038d0 <__alt_data_end+0xfc0038d0>
 80041ec:	89400117 	ldw	r5,4(r17)
 80041f0:	e009883a 	mov	r4,fp
 80041f4:	80066040 	call	8006604 <_Balloc>
 80041f8:	89800417 	ldw	r6,16(r17)
 80041fc:	89400304 	addi	r5,r17,12
 8004200:	11000304 	addi	r4,r2,12
 8004204:	31800084 	addi	r6,r6,2
 8004208:	318d883a 	add	r6,r6,r6
 800420c:	318d883a 	add	r6,r6,r6
 8004210:	1027883a 	mov	r19,r2
 8004214:	80062380 	call	8006238 <memcpy>
 8004218:	01800044 	movi	r6,1
 800421c:	980b883a 	mov	r5,r19
 8004220:	e009883a 	mov	r4,fp
 8004224:	8006e400 	call	8006e40 <__lshift>
 8004228:	1029883a 	mov	r20,r2
 800422c:	003ecc06 	br	8003d60 <__alt_data_end+0xfc003d60>
 8004230:	00800e44 	movi	r2,57
 8004234:	90809026 	beq	r18,r2,8004478 <_dtoa_r+0x152c>
 8004238:	92000044 	addi	r8,r18,1
 800423c:	003f1f06 	br	8003ebc <__alt_data_end+0xfc003ebc>
 8004240:	9011883a 	mov	r8,r18
 8004244:	8825883a 	mov	r18,r17
 8004248:	a023883a 	mov	r17,r20
 800424c:	003e2906 	br	8003af4 <__alt_data_end+0xfc003af4>
 8004250:	002b883a 	mov	r21,zero
 8004254:	0023883a 	mov	r17,zero
 8004258:	003f5406 	br	8003fac <__alt_data_end+0xfc003fac>
 800425c:	61bfffc4 	addi	r6,r12,-1
 8004260:	300490fa 	slli	r2,r6,3
 8004264:	00c205f4 	movhi	r3,2071
 8004268:	18dc8b04 	addi	r3,r3,29228
 800426c:	1885883a 	add	r2,r3,r2
 8004270:	11000017 	ldw	r4,0(r2)
 8004274:	11400117 	ldw	r5,4(r2)
 8004278:	d8800717 	ldw	r2,28(sp)
 800427c:	880f883a 	mov	r7,r17
 8004280:	d9801215 	stw	r6,72(sp)
 8004284:	800d883a 	mov	r6,r16
 8004288:	db001615 	stw	r12,88(sp)
 800428c:	15c00044 	addi	r23,r2,1
 8004290:	800c18c0 	call	800c18c <__muldf3>
 8004294:	d9401017 	ldw	r5,64(sp)
 8004298:	d9000f17 	ldw	r4,60(sp)
 800429c:	d8c01515 	stw	r3,84(sp)
 80042a0:	d8801415 	stw	r2,80(sp)
 80042a4:	800d2f40 	call	800d2f4 <__fixdfsi>
 80042a8:	1009883a 	mov	r4,r2
 80042ac:	1021883a 	mov	r16,r2
 80042b0:	800d3740 	call	800d374 <__floatsidf>
 80042b4:	d9000f17 	ldw	r4,60(sp)
 80042b8:	d9401017 	ldw	r5,64(sp)
 80042bc:	100d883a 	mov	r6,r2
 80042c0:	180f883a 	mov	r7,r3
 80042c4:	800c9f80 	call	800c9f8 <__subdf3>
 80042c8:	1829883a 	mov	r20,r3
 80042cc:	d8c00717 	ldw	r3,28(sp)
 80042d0:	84000c04 	addi	r16,r16,48
 80042d4:	1023883a 	mov	r17,r2
 80042d8:	1c000005 	stb	r16,0(r3)
 80042dc:	db001617 	ldw	r12,88(sp)
 80042e0:	00800044 	movi	r2,1
 80042e4:	60802226 	beq	r12,r2,8004370 <_dtoa_r+0x1424>
 80042e8:	d9c00717 	ldw	r7,28(sp)
 80042ec:	8805883a 	mov	r2,r17
 80042f0:	b82b883a 	mov	r21,r23
 80042f4:	3b19883a 	add	r12,r7,r12
 80042f8:	6023883a 	mov	r17,r12
 80042fc:	a007883a 	mov	r3,r20
 8004300:	dc800f15 	stw	r18,60(sp)
 8004304:	000d883a 	mov	r6,zero
 8004308:	01d00934 	movhi	r7,16420
 800430c:	1009883a 	mov	r4,r2
 8004310:	180b883a 	mov	r5,r3
 8004314:	800c18c0 	call	800c18c <__muldf3>
 8004318:	180b883a 	mov	r5,r3
 800431c:	1009883a 	mov	r4,r2
 8004320:	1829883a 	mov	r20,r3
 8004324:	1025883a 	mov	r18,r2
 8004328:	800d2f40 	call	800d2f4 <__fixdfsi>
 800432c:	1009883a 	mov	r4,r2
 8004330:	1021883a 	mov	r16,r2
 8004334:	800d3740 	call	800d374 <__floatsidf>
 8004338:	100d883a 	mov	r6,r2
 800433c:	180f883a 	mov	r7,r3
 8004340:	9009883a 	mov	r4,r18
 8004344:	a00b883a 	mov	r5,r20
 8004348:	84000c04 	addi	r16,r16,48
 800434c:	800c9f80 	call	800c9f8 <__subdf3>
 8004350:	ad400044 	addi	r21,r21,1
 8004354:	ac3fffc5 	stb	r16,-1(r21)
 8004358:	ac7fea1e 	bne	r21,r17,8004304 <__alt_data_end+0xfc004304>
 800435c:	1023883a 	mov	r17,r2
 8004360:	d8801217 	ldw	r2,72(sp)
 8004364:	dc800f17 	ldw	r18,60(sp)
 8004368:	1829883a 	mov	r20,r3
 800436c:	b8af883a 	add	r23,r23,r2
 8004370:	d9001417 	ldw	r4,80(sp)
 8004374:	d9401517 	ldw	r5,84(sp)
 8004378:	000d883a 	mov	r6,zero
 800437c:	01cff834 	movhi	r7,16352
 8004380:	800acb80 	call	800acb8 <__adddf3>
 8004384:	880d883a 	mov	r6,r17
 8004388:	a00f883a 	mov	r7,r20
 800438c:	1009883a 	mov	r4,r2
 8004390:	180b883a 	mov	r5,r3
 8004394:	800c0980 	call	800c098 <__ledf2>
 8004398:	10003e0e 	bge	r2,zero,8004494 <_dtoa_r+0x1548>
 800439c:	d9001317 	ldw	r4,76(sp)
 80043a0:	bd3fffc3 	ldbu	r20,-1(r23)
 80043a4:	d9000515 	stw	r4,20(sp)
 80043a8:	003d3b06 	br	8003898 <__alt_data_end+0xfc003898>
 80043ac:	0027883a 	mov	r19,zero
 80043b0:	003f1b06 	br	8004020 <__alt_data_end+0xfc004020>
 80043b4:	d8800817 	ldw	r2,32(sp)
 80043b8:	11e9c83a 	sub	r20,r2,r7
 80043bc:	0005883a 	mov	r2,zero
 80043c0:	003d5406 	br	8003914 <__alt_data_end+0xfc003914>
 80043c4:	00800044 	movi	r2,1
 80043c8:	003dc706 	br	8003ae8 <__alt_data_end+0xfc003ae8>
 80043cc:	d8c00217 	ldw	r3,8(sp)
 80043d0:	00800d84 	movi	r2,54
 80043d4:	dd400a17 	ldw	r21,40(sp)
 80043d8:	10c5c83a 	sub	r2,r2,r3
 80043dc:	dd000817 	ldw	r20,32(sp)
 80043e0:	003d4c06 	br	8003914 <__alt_data_end+0xfc003914>
 80043e4:	dc800f15 	stw	r18,60(sp)
 80043e8:	dcc01015 	stw	r19,64(sp)
 80043ec:	04000084 	movi	r16,2
 80043f0:	003bed06 	br	80033a8 <__alt_data_end+0xfc0033a8>
 80043f4:	d9000617 	ldw	r4,24(sp)
 80043f8:	203f0d26 	beq	r4,zero,8004030 <__alt_data_end+0xfc004030>
 80043fc:	d9800c17 	ldw	r6,48(sp)
 8004400:	01bcab0e 	bge	zero,r6,80036b0 <__alt_data_end+0xfc0036b0>
 8004404:	d9401017 	ldw	r5,64(sp)
 8004408:	d9000f17 	ldw	r4,60(sp)
 800440c:	000d883a 	mov	r6,zero
 8004410:	01d00934 	movhi	r7,16420
 8004414:	800c18c0 	call	800c18c <__muldf3>
 8004418:	81000044 	addi	r4,r16,1
 800441c:	d8800f15 	stw	r2,60(sp)
 8004420:	d8c01015 	stw	r3,64(sp)
 8004424:	800d3740 	call	800d374 <__floatsidf>
 8004428:	d9800f17 	ldw	r6,60(sp)
 800442c:	d9c01017 	ldw	r7,64(sp)
 8004430:	1009883a 	mov	r4,r2
 8004434:	180b883a 	mov	r5,r3
 8004438:	800c18c0 	call	800c18c <__muldf3>
 800443c:	01d00734 	movhi	r7,16412
 8004440:	000d883a 	mov	r6,zero
 8004444:	1009883a 	mov	r4,r2
 8004448:	180b883a 	mov	r5,r3
 800444c:	800acb80 	call	800acb8 <__adddf3>
 8004450:	d9c00517 	ldw	r7,20(sp)
 8004454:	047f3034 	movhi	r17,64704
 8004458:	1021883a 	mov	r16,r2
 800445c:	39ffffc4 	addi	r7,r7,-1
 8004460:	d9c01315 	stw	r7,76(sp)
 8004464:	1c63883a 	add	r17,r3,r17
 8004468:	db000c17 	ldw	r12,48(sp)
 800446c:	003bea06 	br	8003418 <__alt_data_end+0xfc003418>
 8004470:	dc000915 	stw	r16,36(sp)
 8004474:	003e0e06 	br	8003cb0 <__alt_data_end+0xfc003cb0>
 8004478:	01000e44 	movi	r4,57
 800447c:	8825883a 	mov	r18,r17
 8004480:	9dc00044 	addi	r23,r19,1
 8004484:	99000005 	stb	r4,0(r19)
 8004488:	a023883a 	mov	r17,r20
 800448c:	dc000915 	stw	r16,36(sp)
 8004490:	003da406 	br	8003b24 <__alt_data_end+0xfc003b24>
 8004494:	d9801417 	ldw	r6,80(sp)
 8004498:	d9c01517 	ldw	r7,84(sp)
 800449c:	0009883a 	mov	r4,zero
 80044a0:	014ff834 	movhi	r5,16352
 80044a4:	800c9f80 	call	800c9f8 <__subdf3>
 80044a8:	880d883a 	mov	r6,r17
 80044ac:	a00f883a 	mov	r7,r20
 80044b0:	1009883a 	mov	r4,r2
 80044b4:	180b883a 	mov	r5,r3
 80044b8:	800bfbc0 	call	800bfbc <__gedf2>
 80044bc:	00bc7c0e 	bge	zero,r2,80036b0 <__alt_data_end+0xfc0036b0>
 80044c0:	01000c04 	movi	r4,48
 80044c4:	00000106 	br	80044cc <_dtoa_r+0x1580>
 80044c8:	102f883a 	mov	r23,r2
 80044cc:	b8bfffc4 	addi	r2,r23,-1
 80044d0:	10c00007 	ldb	r3,0(r2)
 80044d4:	193ffc26 	beq	r3,r4,80044c8 <__alt_data_end+0xfc0044c8>
 80044d8:	d9801317 	ldw	r6,76(sp)
 80044dc:	d9800515 	stw	r6,20(sp)
 80044e0:	003c4406 	br	80035f4 <__alt_data_end+0xfc0035f4>
 80044e4:	d9801317 	ldw	r6,76(sp)
 80044e8:	d9800515 	stw	r6,20(sp)
 80044ec:	003cea06 	br	8003898 <__alt_data_end+0xfc003898>
 80044f0:	dd800f17 	ldw	r22,60(sp)
 80044f4:	dcc01017 	ldw	r19,64(sp)
 80044f8:	dc801217 	ldw	r18,72(sp)
 80044fc:	003c6c06 	br	80036b0 <__alt_data_end+0xfc0036b0>
 8004500:	903e031e 	bne	r18,zero,8003d10 <__alt_data_end+0xfc003d10>
 8004504:	003ebb06 	br	8003ff4 <__alt_data_end+0xfc003ff4>
 8004508:	103e6c1e 	bne	r2,zero,8003ebc <__alt_data_end+0xfc003ebc>
 800450c:	4080004c 	andi	r2,r8,1
 8004510:	103e6a26 	beq	r2,zero,8003ebc <__alt_data_end+0xfc003ebc>
 8004514:	003e6606 	br	8003eb0 <__alt_data_end+0xfc003eb0>
 8004518:	d8c00317 	ldw	r3,12(sp)
 800451c:	00800084 	movi	r2,2
 8004520:	10c02916 	blt	r2,r3,80045c8 <_dtoa_r+0x167c>
 8004524:	d9000c17 	ldw	r4,48(sp)
 8004528:	003e8806 	br	8003f4c <__alt_data_end+0xfc003f4c>
 800452c:	04000084 	movi	r16,2
 8004530:	003b9d06 	br	80033a8 <__alt_data_end+0xfc0033a8>
 8004534:	d9001317 	ldw	r4,76(sp)
 8004538:	d9000515 	stw	r4,20(sp)
 800453c:	003cd606 	br	8003898 <__alt_data_end+0xfc003898>
 8004540:	d8801317 	ldw	r2,76(sp)
 8004544:	d8800515 	stw	r2,20(sp)
 8004548:	003c2a06 	br	80035f4 <__alt_data_end+0xfc0035f4>
 800454c:	d9800317 	ldw	r6,12(sp)
 8004550:	00800084 	movi	r2,2
 8004554:	11801516 	blt	r2,r6,80045ac <_dtoa_r+0x1660>
 8004558:	d9c00c17 	ldw	r7,48(sp)
 800455c:	d9c00615 	stw	r7,24(sp)
 8004560:	003df706 	br	8003d40 <__alt_data_end+0xfc003d40>
 8004564:	193d3926 	beq	r3,r4,8003a4c <__alt_data_end+0xfc003a4c>
 8004568:	00c00f04 	movi	r3,60
 800456c:	1885c83a 	sub	r2,r3,r2
 8004570:	003ddf06 	br	8003cf0 <__alt_data_end+0xfc003cf0>
 8004574:	e009883a 	mov	r4,fp
 8004578:	e0001115 	stw	zero,68(fp)
 800457c:	000b883a 	mov	r5,zero
 8004580:	80066040 	call	8006604 <_Balloc>
 8004584:	d8800715 	stw	r2,28(sp)
 8004588:	d8c00717 	ldw	r3,28(sp)
 800458c:	00bfffc4 	movi	r2,-1
 8004590:	01000044 	movi	r4,1
 8004594:	d8800c15 	stw	r2,48(sp)
 8004598:	e0c01015 	stw	r3,64(fp)
 800459c:	d9000b15 	stw	r4,44(sp)
 80045a0:	d8800615 	stw	r2,24(sp)
 80045a4:	d8002215 	stw	zero,136(sp)
 80045a8:	003c4106 	br	80036b0 <__alt_data_end+0xfc0036b0>
 80045ac:	d8c00c17 	ldw	r3,48(sp)
 80045b0:	d8c00615 	stw	r3,24(sp)
 80045b4:	003e7006 	br	8003f78 <__alt_data_end+0xfc003f78>
 80045b8:	04400044 	movi	r17,1
 80045bc:	003b2006 	br	8003240 <__alt_data_end+0xfc003240>
 80045c0:	000b883a 	mov	r5,zero
 80045c4:	003b3d06 	br	80032bc <__alt_data_end+0xfc0032bc>
 80045c8:	d8800c17 	ldw	r2,48(sp)
 80045cc:	d8800615 	stw	r2,24(sp)
 80045d0:	003e6906 	br	8003f78 <__alt_data_end+0xfc003f78>

080045d4 <__sflush_r>:
 80045d4:	2880030b 	ldhu	r2,12(r5)
 80045d8:	defffb04 	addi	sp,sp,-20
 80045dc:	dcc00315 	stw	r19,12(sp)
 80045e0:	dc400115 	stw	r17,4(sp)
 80045e4:	dfc00415 	stw	ra,16(sp)
 80045e8:	dc800215 	stw	r18,8(sp)
 80045ec:	dc000015 	stw	r16,0(sp)
 80045f0:	10c0020c 	andi	r3,r2,8
 80045f4:	2823883a 	mov	r17,r5
 80045f8:	2027883a 	mov	r19,r4
 80045fc:	1800311e 	bne	r3,zero,80046c4 <__sflush_r+0xf0>
 8004600:	28c00117 	ldw	r3,4(r5)
 8004604:	10820014 	ori	r2,r2,2048
 8004608:	2880030d 	sth	r2,12(r5)
 800460c:	00c04b0e 	bge	zero,r3,800473c <__sflush_r+0x168>
 8004610:	8a000a17 	ldw	r8,40(r17)
 8004614:	40002326 	beq	r8,zero,80046a4 <__sflush_r+0xd0>
 8004618:	9c000017 	ldw	r16,0(r19)
 800461c:	10c4000c 	andi	r3,r2,4096
 8004620:	98000015 	stw	zero,0(r19)
 8004624:	18004826 	beq	r3,zero,8004748 <__sflush_r+0x174>
 8004628:	89801417 	ldw	r6,80(r17)
 800462c:	10c0010c 	andi	r3,r2,4
 8004630:	18000626 	beq	r3,zero,800464c <__sflush_r+0x78>
 8004634:	88c00117 	ldw	r3,4(r17)
 8004638:	88800c17 	ldw	r2,48(r17)
 800463c:	30cdc83a 	sub	r6,r6,r3
 8004640:	10000226 	beq	r2,zero,800464c <__sflush_r+0x78>
 8004644:	88800f17 	ldw	r2,60(r17)
 8004648:	308dc83a 	sub	r6,r6,r2
 800464c:	89400717 	ldw	r5,28(r17)
 8004650:	000f883a 	mov	r7,zero
 8004654:	9809883a 	mov	r4,r19
 8004658:	403ee83a 	callr	r8
 800465c:	00ffffc4 	movi	r3,-1
 8004660:	10c04426 	beq	r2,r3,8004774 <__sflush_r+0x1a0>
 8004664:	88c0030b 	ldhu	r3,12(r17)
 8004668:	89000417 	ldw	r4,16(r17)
 800466c:	88000115 	stw	zero,4(r17)
 8004670:	197dffcc 	andi	r5,r3,63487
 8004674:	8940030d 	sth	r5,12(r17)
 8004678:	89000015 	stw	r4,0(r17)
 800467c:	18c4000c 	andi	r3,r3,4096
 8004680:	18002c1e 	bne	r3,zero,8004734 <__sflush_r+0x160>
 8004684:	89400c17 	ldw	r5,48(r17)
 8004688:	9c000015 	stw	r16,0(r19)
 800468c:	28000526 	beq	r5,zero,80046a4 <__sflush_r+0xd0>
 8004690:	88801004 	addi	r2,r17,64
 8004694:	28800226 	beq	r5,r2,80046a0 <__sflush_r+0xcc>
 8004698:	9809883a 	mov	r4,r19
 800469c:	8004d500 	call	8004d50 <_free_r>
 80046a0:	88000c15 	stw	zero,48(r17)
 80046a4:	0005883a 	mov	r2,zero
 80046a8:	dfc00417 	ldw	ra,16(sp)
 80046ac:	dcc00317 	ldw	r19,12(sp)
 80046b0:	dc800217 	ldw	r18,8(sp)
 80046b4:	dc400117 	ldw	r17,4(sp)
 80046b8:	dc000017 	ldw	r16,0(sp)
 80046bc:	dec00504 	addi	sp,sp,20
 80046c0:	f800283a 	ret
 80046c4:	2c800417 	ldw	r18,16(r5)
 80046c8:	903ff626 	beq	r18,zero,80046a4 <__alt_data_end+0xfc0046a4>
 80046cc:	2c000017 	ldw	r16,0(r5)
 80046d0:	108000cc 	andi	r2,r2,3
 80046d4:	2c800015 	stw	r18,0(r5)
 80046d8:	84a1c83a 	sub	r16,r16,r18
 80046dc:	1000131e 	bne	r2,zero,800472c <__sflush_r+0x158>
 80046e0:	28800517 	ldw	r2,20(r5)
 80046e4:	88800215 	stw	r2,8(r17)
 80046e8:	04000316 	blt	zero,r16,80046f8 <__sflush_r+0x124>
 80046ec:	003fed06 	br	80046a4 <__alt_data_end+0xfc0046a4>
 80046f0:	90a5883a 	add	r18,r18,r2
 80046f4:	043feb0e 	bge	zero,r16,80046a4 <__alt_data_end+0xfc0046a4>
 80046f8:	88800917 	ldw	r2,36(r17)
 80046fc:	89400717 	ldw	r5,28(r17)
 8004700:	800f883a 	mov	r7,r16
 8004704:	900d883a 	mov	r6,r18
 8004708:	9809883a 	mov	r4,r19
 800470c:	103ee83a 	callr	r2
 8004710:	80a1c83a 	sub	r16,r16,r2
 8004714:	00bff616 	blt	zero,r2,80046f0 <__alt_data_end+0xfc0046f0>
 8004718:	88c0030b 	ldhu	r3,12(r17)
 800471c:	00bfffc4 	movi	r2,-1
 8004720:	18c01014 	ori	r3,r3,64
 8004724:	88c0030d 	sth	r3,12(r17)
 8004728:	003fdf06 	br	80046a8 <__alt_data_end+0xfc0046a8>
 800472c:	0005883a 	mov	r2,zero
 8004730:	003fec06 	br	80046e4 <__alt_data_end+0xfc0046e4>
 8004734:	88801415 	stw	r2,80(r17)
 8004738:	003fd206 	br	8004684 <__alt_data_end+0xfc004684>
 800473c:	28c00f17 	ldw	r3,60(r5)
 8004740:	00ffb316 	blt	zero,r3,8004610 <__alt_data_end+0xfc004610>
 8004744:	003fd706 	br	80046a4 <__alt_data_end+0xfc0046a4>
 8004748:	89400717 	ldw	r5,28(r17)
 800474c:	000d883a 	mov	r6,zero
 8004750:	01c00044 	movi	r7,1
 8004754:	9809883a 	mov	r4,r19
 8004758:	403ee83a 	callr	r8
 800475c:	100d883a 	mov	r6,r2
 8004760:	00bfffc4 	movi	r2,-1
 8004764:	30801426 	beq	r6,r2,80047b8 <__sflush_r+0x1e4>
 8004768:	8880030b 	ldhu	r2,12(r17)
 800476c:	8a000a17 	ldw	r8,40(r17)
 8004770:	003fae06 	br	800462c <__alt_data_end+0xfc00462c>
 8004774:	98c00017 	ldw	r3,0(r19)
 8004778:	183fba26 	beq	r3,zero,8004664 <__alt_data_end+0xfc004664>
 800477c:	01000744 	movi	r4,29
 8004780:	19000626 	beq	r3,r4,800479c <__sflush_r+0x1c8>
 8004784:	01000584 	movi	r4,22
 8004788:	19000426 	beq	r3,r4,800479c <__sflush_r+0x1c8>
 800478c:	88c0030b 	ldhu	r3,12(r17)
 8004790:	18c01014 	ori	r3,r3,64
 8004794:	88c0030d 	sth	r3,12(r17)
 8004798:	003fc306 	br	80046a8 <__alt_data_end+0xfc0046a8>
 800479c:	8880030b 	ldhu	r2,12(r17)
 80047a0:	88c00417 	ldw	r3,16(r17)
 80047a4:	88000115 	stw	zero,4(r17)
 80047a8:	10bdffcc 	andi	r2,r2,63487
 80047ac:	8880030d 	sth	r2,12(r17)
 80047b0:	88c00015 	stw	r3,0(r17)
 80047b4:	003fb306 	br	8004684 <__alt_data_end+0xfc004684>
 80047b8:	98800017 	ldw	r2,0(r19)
 80047bc:	103fea26 	beq	r2,zero,8004768 <__alt_data_end+0xfc004768>
 80047c0:	00c00744 	movi	r3,29
 80047c4:	10c00226 	beq	r2,r3,80047d0 <__sflush_r+0x1fc>
 80047c8:	00c00584 	movi	r3,22
 80047cc:	10c0031e 	bne	r2,r3,80047dc <__sflush_r+0x208>
 80047d0:	9c000015 	stw	r16,0(r19)
 80047d4:	0005883a 	mov	r2,zero
 80047d8:	003fb306 	br	80046a8 <__alt_data_end+0xfc0046a8>
 80047dc:	88c0030b 	ldhu	r3,12(r17)
 80047e0:	3005883a 	mov	r2,r6
 80047e4:	18c01014 	ori	r3,r3,64
 80047e8:	88c0030d 	sth	r3,12(r17)
 80047ec:	003fae06 	br	80046a8 <__alt_data_end+0xfc0046a8>

080047f0 <_fflush_r>:
 80047f0:	defffd04 	addi	sp,sp,-12
 80047f4:	dc000115 	stw	r16,4(sp)
 80047f8:	dfc00215 	stw	ra,8(sp)
 80047fc:	2021883a 	mov	r16,r4
 8004800:	20000226 	beq	r4,zero,800480c <_fflush_r+0x1c>
 8004804:	20800e17 	ldw	r2,56(r4)
 8004808:	10000c26 	beq	r2,zero,800483c <_fflush_r+0x4c>
 800480c:	2880030f 	ldh	r2,12(r5)
 8004810:	1000051e 	bne	r2,zero,8004828 <_fflush_r+0x38>
 8004814:	0005883a 	mov	r2,zero
 8004818:	dfc00217 	ldw	ra,8(sp)
 800481c:	dc000117 	ldw	r16,4(sp)
 8004820:	dec00304 	addi	sp,sp,12
 8004824:	f800283a 	ret
 8004828:	8009883a 	mov	r4,r16
 800482c:	dfc00217 	ldw	ra,8(sp)
 8004830:	dc000117 	ldw	r16,4(sp)
 8004834:	dec00304 	addi	sp,sp,12
 8004838:	80045d41 	jmpi	80045d4 <__sflush_r>
 800483c:	d9400015 	stw	r5,0(sp)
 8004840:	8004bdc0 	call	8004bdc <__sinit>
 8004844:	d9400017 	ldw	r5,0(sp)
 8004848:	003ff006 	br	800480c <__alt_data_end+0xfc00480c>

0800484c <fflush>:
 800484c:	20000526 	beq	r4,zero,8004864 <fflush+0x18>
 8004850:	00820634 	movhi	r2,2072
 8004854:	10a3c904 	addi	r2,r2,-28892
 8004858:	200b883a 	mov	r5,r4
 800485c:	11000017 	ldw	r4,0(r2)
 8004860:	80047f01 	jmpi	80047f0 <_fflush_r>
 8004864:	00820634 	movhi	r2,2072
 8004868:	10a3c804 	addi	r2,r2,-28896
 800486c:	11000017 	ldw	r4,0(r2)
 8004870:	01420034 	movhi	r5,2048
 8004874:	2951fc04 	addi	r5,r5,18416
 8004878:	80055ec1 	jmpi	80055ec <_fwalk_reent>

0800487c <__fp_unlock>:
 800487c:	0005883a 	mov	r2,zero
 8004880:	f800283a 	ret

08004884 <_cleanup_r>:
 8004884:	01420074 	movhi	r5,2049
 8004888:	2965e204 	addi	r5,r5,-26744
 800488c:	80055ec1 	jmpi	80055ec <_fwalk_reent>

08004890 <__sinit.part.1>:
 8004890:	defff704 	addi	sp,sp,-36
 8004894:	00c20034 	movhi	r3,2048
 8004898:	dfc00815 	stw	ra,32(sp)
 800489c:	ddc00715 	stw	r23,28(sp)
 80048a0:	dd800615 	stw	r22,24(sp)
 80048a4:	dd400515 	stw	r21,20(sp)
 80048a8:	dd000415 	stw	r20,16(sp)
 80048ac:	dcc00315 	stw	r19,12(sp)
 80048b0:	dc800215 	stw	r18,8(sp)
 80048b4:	dc400115 	stw	r17,4(sp)
 80048b8:	dc000015 	stw	r16,0(sp)
 80048bc:	18d22104 	addi	r3,r3,18564
 80048c0:	24000117 	ldw	r16,4(r4)
 80048c4:	20c00f15 	stw	r3,60(r4)
 80048c8:	2080bb04 	addi	r2,r4,748
 80048cc:	00c000c4 	movi	r3,3
 80048d0:	20c0b915 	stw	r3,740(r4)
 80048d4:	2080ba15 	stw	r2,744(r4)
 80048d8:	2000b815 	stw	zero,736(r4)
 80048dc:	05c00204 	movi	r23,8
 80048e0:	00800104 	movi	r2,4
 80048e4:	2025883a 	mov	r18,r4
 80048e8:	b80d883a 	mov	r6,r23
 80048ec:	81001704 	addi	r4,r16,92
 80048f0:	000b883a 	mov	r5,zero
 80048f4:	80000015 	stw	zero,0(r16)
 80048f8:	80000115 	stw	zero,4(r16)
 80048fc:	80000215 	stw	zero,8(r16)
 8004900:	8080030d 	sth	r2,12(r16)
 8004904:	80001915 	stw	zero,100(r16)
 8004908:	8000038d 	sth	zero,14(r16)
 800490c:	80000415 	stw	zero,16(r16)
 8004910:	80000515 	stw	zero,20(r16)
 8004914:	80000615 	stw	zero,24(r16)
 8004918:	80064dc0 	call	80064dc <memset>
 800491c:	05820034 	movhi	r22,2048
 8004920:	94400217 	ldw	r17,8(r18)
 8004924:	05420034 	movhi	r21,2048
 8004928:	05020034 	movhi	r20,2048
 800492c:	04c20034 	movhi	r19,2048
 8004930:	b59f3a04 	addi	r22,r22,31976
 8004934:	ad5f5104 	addi	r21,r21,32068
 8004938:	a51f7004 	addi	r20,r20,32192
 800493c:	9cdf8704 	addi	r19,r19,32284
 8004940:	85800815 	stw	r22,32(r16)
 8004944:	85400915 	stw	r21,36(r16)
 8004948:	85000a15 	stw	r20,40(r16)
 800494c:	84c00b15 	stw	r19,44(r16)
 8004950:	84000715 	stw	r16,28(r16)
 8004954:	00800284 	movi	r2,10
 8004958:	8880030d 	sth	r2,12(r17)
 800495c:	00800044 	movi	r2,1
 8004960:	b80d883a 	mov	r6,r23
 8004964:	89001704 	addi	r4,r17,92
 8004968:	000b883a 	mov	r5,zero
 800496c:	88000015 	stw	zero,0(r17)
 8004970:	88000115 	stw	zero,4(r17)
 8004974:	88000215 	stw	zero,8(r17)
 8004978:	88001915 	stw	zero,100(r17)
 800497c:	8880038d 	sth	r2,14(r17)
 8004980:	88000415 	stw	zero,16(r17)
 8004984:	88000515 	stw	zero,20(r17)
 8004988:	88000615 	stw	zero,24(r17)
 800498c:	80064dc0 	call	80064dc <memset>
 8004990:	94000317 	ldw	r16,12(r18)
 8004994:	00800484 	movi	r2,18
 8004998:	8c400715 	stw	r17,28(r17)
 800499c:	8d800815 	stw	r22,32(r17)
 80049a0:	8d400915 	stw	r21,36(r17)
 80049a4:	8d000a15 	stw	r20,40(r17)
 80049a8:	8cc00b15 	stw	r19,44(r17)
 80049ac:	8080030d 	sth	r2,12(r16)
 80049b0:	00800084 	movi	r2,2
 80049b4:	80000015 	stw	zero,0(r16)
 80049b8:	80000115 	stw	zero,4(r16)
 80049bc:	80000215 	stw	zero,8(r16)
 80049c0:	80001915 	stw	zero,100(r16)
 80049c4:	8080038d 	sth	r2,14(r16)
 80049c8:	80000415 	stw	zero,16(r16)
 80049cc:	80000515 	stw	zero,20(r16)
 80049d0:	80000615 	stw	zero,24(r16)
 80049d4:	b80d883a 	mov	r6,r23
 80049d8:	000b883a 	mov	r5,zero
 80049dc:	81001704 	addi	r4,r16,92
 80049e0:	80064dc0 	call	80064dc <memset>
 80049e4:	00800044 	movi	r2,1
 80049e8:	84000715 	stw	r16,28(r16)
 80049ec:	85800815 	stw	r22,32(r16)
 80049f0:	85400915 	stw	r21,36(r16)
 80049f4:	85000a15 	stw	r20,40(r16)
 80049f8:	84c00b15 	stw	r19,44(r16)
 80049fc:	90800e15 	stw	r2,56(r18)
 8004a00:	dfc00817 	ldw	ra,32(sp)
 8004a04:	ddc00717 	ldw	r23,28(sp)
 8004a08:	dd800617 	ldw	r22,24(sp)
 8004a0c:	dd400517 	ldw	r21,20(sp)
 8004a10:	dd000417 	ldw	r20,16(sp)
 8004a14:	dcc00317 	ldw	r19,12(sp)
 8004a18:	dc800217 	ldw	r18,8(sp)
 8004a1c:	dc400117 	ldw	r17,4(sp)
 8004a20:	dc000017 	ldw	r16,0(sp)
 8004a24:	dec00904 	addi	sp,sp,36
 8004a28:	f800283a 	ret

08004a2c <__fp_lock>:
 8004a2c:	0005883a 	mov	r2,zero
 8004a30:	f800283a 	ret

08004a34 <__sfmoreglue>:
 8004a34:	defffc04 	addi	sp,sp,-16
 8004a38:	dc800215 	stw	r18,8(sp)
 8004a3c:	2825883a 	mov	r18,r5
 8004a40:	dc000015 	stw	r16,0(sp)
 8004a44:	01401a04 	movi	r5,104
 8004a48:	2021883a 	mov	r16,r4
 8004a4c:	913fffc4 	addi	r4,r18,-1
 8004a50:	dfc00315 	stw	ra,12(sp)
 8004a54:	dc400115 	stw	r17,4(sp)
 8004a58:	800061c0 	call	800061c <__mulsi3>
 8004a5c:	8009883a 	mov	r4,r16
 8004a60:	11401d04 	addi	r5,r2,116
 8004a64:	1023883a 	mov	r17,r2
 8004a68:	80059480 	call	8005948 <_malloc_r>
 8004a6c:	1021883a 	mov	r16,r2
 8004a70:	10000726 	beq	r2,zero,8004a90 <__sfmoreglue+0x5c>
 8004a74:	11000304 	addi	r4,r2,12
 8004a78:	10000015 	stw	zero,0(r2)
 8004a7c:	14800115 	stw	r18,4(r2)
 8004a80:	11000215 	stw	r4,8(r2)
 8004a84:	89801a04 	addi	r6,r17,104
 8004a88:	000b883a 	mov	r5,zero
 8004a8c:	80064dc0 	call	80064dc <memset>
 8004a90:	8005883a 	mov	r2,r16
 8004a94:	dfc00317 	ldw	ra,12(sp)
 8004a98:	dc800217 	ldw	r18,8(sp)
 8004a9c:	dc400117 	ldw	r17,4(sp)
 8004aa0:	dc000017 	ldw	r16,0(sp)
 8004aa4:	dec00404 	addi	sp,sp,16
 8004aa8:	f800283a 	ret

08004aac <__sfp>:
 8004aac:	defffb04 	addi	sp,sp,-20
 8004ab0:	dc000015 	stw	r16,0(sp)
 8004ab4:	04020634 	movhi	r16,2072
 8004ab8:	8423c804 	addi	r16,r16,-28896
 8004abc:	dcc00315 	stw	r19,12(sp)
 8004ac0:	2027883a 	mov	r19,r4
 8004ac4:	81000017 	ldw	r4,0(r16)
 8004ac8:	dfc00415 	stw	ra,16(sp)
 8004acc:	dc800215 	stw	r18,8(sp)
 8004ad0:	20800e17 	ldw	r2,56(r4)
 8004ad4:	dc400115 	stw	r17,4(sp)
 8004ad8:	1000021e 	bne	r2,zero,8004ae4 <__sfp+0x38>
 8004adc:	80048900 	call	8004890 <__sinit.part.1>
 8004ae0:	81000017 	ldw	r4,0(r16)
 8004ae4:	2480b804 	addi	r18,r4,736
 8004ae8:	047fffc4 	movi	r17,-1
 8004aec:	91000117 	ldw	r4,4(r18)
 8004af0:	94000217 	ldw	r16,8(r18)
 8004af4:	213fffc4 	addi	r4,r4,-1
 8004af8:	20000a16 	blt	r4,zero,8004b24 <__sfp+0x78>
 8004afc:	8080030f 	ldh	r2,12(r16)
 8004b00:	10000c26 	beq	r2,zero,8004b34 <__sfp+0x88>
 8004b04:	80c01d04 	addi	r3,r16,116
 8004b08:	00000206 	br	8004b14 <__sfp+0x68>
 8004b0c:	18bfe60f 	ldh	r2,-104(r3)
 8004b10:	10000826 	beq	r2,zero,8004b34 <__sfp+0x88>
 8004b14:	213fffc4 	addi	r4,r4,-1
 8004b18:	1c3ffd04 	addi	r16,r3,-12
 8004b1c:	18c01a04 	addi	r3,r3,104
 8004b20:	247ffa1e 	bne	r4,r17,8004b0c <__alt_data_end+0xfc004b0c>
 8004b24:	90800017 	ldw	r2,0(r18)
 8004b28:	10001d26 	beq	r2,zero,8004ba0 <__sfp+0xf4>
 8004b2c:	1025883a 	mov	r18,r2
 8004b30:	003fee06 	br	8004aec <__alt_data_end+0xfc004aec>
 8004b34:	00bfffc4 	movi	r2,-1
 8004b38:	8080038d 	sth	r2,14(r16)
 8004b3c:	00800044 	movi	r2,1
 8004b40:	8080030d 	sth	r2,12(r16)
 8004b44:	80001915 	stw	zero,100(r16)
 8004b48:	80000015 	stw	zero,0(r16)
 8004b4c:	80000215 	stw	zero,8(r16)
 8004b50:	80000115 	stw	zero,4(r16)
 8004b54:	80000415 	stw	zero,16(r16)
 8004b58:	80000515 	stw	zero,20(r16)
 8004b5c:	80000615 	stw	zero,24(r16)
 8004b60:	01800204 	movi	r6,8
 8004b64:	000b883a 	mov	r5,zero
 8004b68:	81001704 	addi	r4,r16,92
 8004b6c:	80064dc0 	call	80064dc <memset>
 8004b70:	8005883a 	mov	r2,r16
 8004b74:	80000c15 	stw	zero,48(r16)
 8004b78:	80000d15 	stw	zero,52(r16)
 8004b7c:	80001115 	stw	zero,68(r16)
 8004b80:	80001215 	stw	zero,72(r16)
 8004b84:	dfc00417 	ldw	ra,16(sp)
 8004b88:	dcc00317 	ldw	r19,12(sp)
 8004b8c:	dc800217 	ldw	r18,8(sp)
 8004b90:	dc400117 	ldw	r17,4(sp)
 8004b94:	dc000017 	ldw	r16,0(sp)
 8004b98:	dec00504 	addi	sp,sp,20
 8004b9c:	f800283a 	ret
 8004ba0:	01400104 	movi	r5,4
 8004ba4:	9809883a 	mov	r4,r19
 8004ba8:	8004a340 	call	8004a34 <__sfmoreglue>
 8004bac:	90800015 	stw	r2,0(r18)
 8004bb0:	103fde1e 	bne	r2,zero,8004b2c <__alt_data_end+0xfc004b2c>
 8004bb4:	00800304 	movi	r2,12
 8004bb8:	98800015 	stw	r2,0(r19)
 8004bbc:	0005883a 	mov	r2,zero
 8004bc0:	003ff006 	br	8004b84 <__alt_data_end+0xfc004b84>

08004bc4 <_cleanup>:
 8004bc4:	00820634 	movhi	r2,2072
 8004bc8:	10a3c804 	addi	r2,r2,-28896
 8004bcc:	11000017 	ldw	r4,0(r2)
 8004bd0:	01420074 	movhi	r5,2049
 8004bd4:	2965e204 	addi	r5,r5,-26744
 8004bd8:	80055ec1 	jmpi	80055ec <_fwalk_reent>

08004bdc <__sinit>:
 8004bdc:	20800e17 	ldw	r2,56(r4)
 8004be0:	10000126 	beq	r2,zero,8004be8 <__sinit+0xc>
 8004be4:	f800283a 	ret
 8004be8:	80048901 	jmpi	8004890 <__sinit.part.1>

08004bec <__sfp_lock_acquire>:
 8004bec:	f800283a 	ret

08004bf0 <__sfp_lock_release>:
 8004bf0:	f800283a 	ret

08004bf4 <__sinit_lock_acquire>:
 8004bf4:	f800283a 	ret

08004bf8 <__sinit_lock_release>:
 8004bf8:	f800283a 	ret

08004bfc <__fp_lock_all>:
 8004bfc:	00820634 	movhi	r2,2072
 8004c00:	10a3c904 	addi	r2,r2,-28892
 8004c04:	11000017 	ldw	r4,0(r2)
 8004c08:	01420034 	movhi	r5,2048
 8004c0c:	29528b04 	addi	r5,r5,18988
 8004c10:	80055281 	jmpi	8005528 <_fwalk>

08004c14 <__fp_unlock_all>:
 8004c14:	00820634 	movhi	r2,2072
 8004c18:	10a3c904 	addi	r2,r2,-28892
 8004c1c:	11000017 	ldw	r4,0(r2)
 8004c20:	01420034 	movhi	r5,2048
 8004c24:	29521f04 	addi	r5,r5,18556
 8004c28:	80055281 	jmpi	8005528 <_fwalk>

08004c2c <_malloc_trim_r>:
 8004c2c:	defffb04 	addi	sp,sp,-20
 8004c30:	dcc00315 	stw	r19,12(sp)
 8004c34:	04c205f4 	movhi	r19,2071
 8004c38:	dc800215 	stw	r18,8(sp)
 8004c3c:	dc400115 	stw	r17,4(sp)
 8004c40:	dc000015 	stw	r16,0(sp)
 8004c44:	dfc00415 	stw	ra,16(sp)
 8004c48:	2821883a 	mov	r16,r5
 8004c4c:	9cde3904 	addi	r19,r19,30948
 8004c50:	2025883a 	mov	r18,r4
 8004c54:	800daf80 	call	800daf8 <__malloc_lock>
 8004c58:	98800217 	ldw	r2,8(r19)
 8004c5c:	14400117 	ldw	r17,4(r2)
 8004c60:	00bfff04 	movi	r2,-4
 8004c64:	88a2703a 	and	r17,r17,r2
 8004c68:	8c21c83a 	sub	r16,r17,r16
 8004c6c:	8403fbc4 	addi	r16,r16,4079
 8004c70:	8020d33a 	srli	r16,r16,12
 8004c74:	0083ffc4 	movi	r2,4095
 8004c78:	843fffc4 	addi	r16,r16,-1
 8004c7c:	8020933a 	slli	r16,r16,12
 8004c80:	1400060e 	bge	r2,r16,8004c9c <_malloc_trim_r+0x70>
 8004c84:	000b883a 	mov	r5,zero
 8004c88:	9009883a 	mov	r4,r18
 8004c8c:	8007c940 	call	8007c94 <_sbrk_r>
 8004c90:	98c00217 	ldw	r3,8(r19)
 8004c94:	1c47883a 	add	r3,r3,r17
 8004c98:	10c00a26 	beq	r2,r3,8004cc4 <_malloc_trim_r+0x98>
 8004c9c:	9009883a 	mov	r4,r18
 8004ca0:	800db1c0 	call	800db1c <__malloc_unlock>
 8004ca4:	0005883a 	mov	r2,zero
 8004ca8:	dfc00417 	ldw	ra,16(sp)
 8004cac:	dcc00317 	ldw	r19,12(sp)
 8004cb0:	dc800217 	ldw	r18,8(sp)
 8004cb4:	dc400117 	ldw	r17,4(sp)
 8004cb8:	dc000017 	ldw	r16,0(sp)
 8004cbc:	dec00504 	addi	sp,sp,20
 8004cc0:	f800283a 	ret
 8004cc4:	040bc83a 	sub	r5,zero,r16
 8004cc8:	9009883a 	mov	r4,r18
 8004ccc:	8007c940 	call	8007c94 <_sbrk_r>
 8004cd0:	00ffffc4 	movi	r3,-1
 8004cd4:	10c00d26 	beq	r2,r3,8004d0c <_malloc_trim_r+0xe0>
 8004cd8:	00c20634 	movhi	r3,2072
 8004cdc:	18eaac04 	addi	r3,r3,-21840
 8004ce0:	18800017 	ldw	r2,0(r3)
 8004ce4:	99000217 	ldw	r4,8(r19)
 8004ce8:	8c23c83a 	sub	r17,r17,r16
 8004cec:	8c400054 	ori	r17,r17,1
 8004cf0:	1421c83a 	sub	r16,r2,r16
 8004cf4:	24400115 	stw	r17,4(r4)
 8004cf8:	9009883a 	mov	r4,r18
 8004cfc:	1c000015 	stw	r16,0(r3)
 8004d00:	800db1c0 	call	800db1c <__malloc_unlock>
 8004d04:	00800044 	movi	r2,1
 8004d08:	003fe706 	br	8004ca8 <__alt_data_end+0xfc004ca8>
 8004d0c:	000b883a 	mov	r5,zero
 8004d10:	9009883a 	mov	r4,r18
 8004d14:	8007c940 	call	8007c94 <_sbrk_r>
 8004d18:	99000217 	ldw	r4,8(r19)
 8004d1c:	014003c4 	movi	r5,15
 8004d20:	1107c83a 	sub	r3,r2,r4
 8004d24:	28ffdd0e 	bge	r5,r3,8004c9c <__alt_data_end+0xfc004c9c>
 8004d28:	01420634 	movhi	r5,2072
 8004d2c:	2963cb04 	addi	r5,r5,-28884
 8004d30:	29400017 	ldw	r5,0(r5)
 8004d34:	18c00054 	ori	r3,r3,1
 8004d38:	20c00115 	stw	r3,4(r4)
 8004d3c:	00c20634 	movhi	r3,2072
 8004d40:	1145c83a 	sub	r2,r2,r5
 8004d44:	18eaac04 	addi	r3,r3,-21840
 8004d48:	18800015 	stw	r2,0(r3)
 8004d4c:	003fd306 	br	8004c9c <__alt_data_end+0xfc004c9c>

08004d50 <_free_r>:
 8004d50:	28004126 	beq	r5,zero,8004e58 <_free_r+0x108>
 8004d54:	defffd04 	addi	sp,sp,-12
 8004d58:	dc400115 	stw	r17,4(sp)
 8004d5c:	dc000015 	stw	r16,0(sp)
 8004d60:	2023883a 	mov	r17,r4
 8004d64:	2821883a 	mov	r16,r5
 8004d68:	dfc00215 	stw	ra,8(sp)
 8004d6c:	800daf80 	call	800daf8 <__malloc_lock>
 8004d70:	81ffff17 	ldw	r7,-4(r16)
 8004d74:	00bfff84 	movi	r2,-2
 8004d78:	010205f4 	movhi	r4,2071
 8004d7c:	81bffe04 	addi	r6,r16,-8
 8004d80:	3884703a 	and	r2,r7,r2
 8004d84:	211e3904 	addi	r4,r4,30948
 8004d88:	308b883a 	add	r5,r6,r2
 8004d8c:	2a400117 	ldw	r9,4(r5)
 8004d90:	22000217 	ldw	r8,8(r4)
 8004d94:	00ffff04 	movi	r3,-4
 8004d98:	48c6703a 	and	r3,r9,r3
 8004d9c:	2a005726 	beq	r5,r8,8004efc <_free_r+0x1ac>
 8004da0:	28c00115 	stw	r3,4(r5)
 8004da4:	39c0004c 	andi	r7,r7,1
 8004da8:	3800091e 	bne	r7,zero,8004dd0 <_free_r+0x80>
 8004dac:	823ffe17 	ldw	r8,-8(r16)
 8004db0:	22400204 	addi	r9,r4,8
 8004db4:	320dc83a 	sub	r6,r6,r8
 8004db8:	31c00217 	ldw	r7,8(r6)
 8004dbc:	1205883a 	add	r2,r2,r8
 8004dc0:	3a406526 	beq	r7,r9,8004f58 <_free_r+0x208>
 8004dc4:	32000317 	ldw	r8,12(r6)
 8004dc8:	3a000315 	stw	r8,12(r7)
 8004dcc:	41c00215 	stw	r7,8(r8)
 8004dd0:	28cf883a 	add	r7,r5,r3
 8004dd4:	39c00117 	ldw	r7,4(r7)
 8004dd8:	39c0004c 	andi	r7,r7,1
 8004ddc:	38003a26 	beq	r7,zero,8004ec8 <_free_r+0x178>
 8004de0:	10c00054 	ori	r3,r2,1
 8004de4:	30c00115 	stw	r3,4(r6)
 8004de8:	3087883a 	add	r3,r6,r2
 8004dec:	18800015 	stw	r2,0(r3)
 8004df0:	00c07fc4 	movi	r3,511
 8004df4:	18801936 	bltu	r3,r2,8004e5c <_free_r+0x10c>
 8004df8:	1004d0fa 	srli	r2,r2,3
 8004dfc:	01c00044 	movi	r7,1
 8004e00:	21400117 	ldw	r5,4(r4)
 8004e04:	10c00044 	addi	r3,r2,1
 8004e08:	18c7883a 	add	r3,r3,r3
 8004e0c:	1005d0ba 	srai	r2,r2,2
 8004e10:	18c7883a 	add	r3,r3,r3
 8004e14:	18c7883a 	add	r3,r3,r3
 8004e18:	1907883a 	add	r3,r3,r4
 8004e1c:	3884983a 	sll	r2,r7,r2
 8004e20:	19c00017 	ldw	r7,0(r3)
 8004e24:	1a3ffe04 	addi	r8,r3,-8
 8004e28:	1144b03a 	or	r2,r2,r5
 8004e2c:	32000315 	stw	r8,12(r6)
 8004e30:	31c00215 	stw	r7,8(r6)
 8004e34:	20800115 	stw	r2,4(r4)
 8004e38:	19800015 	stw	r6,0(r3)
 8004e3c:	39800315 	stw	r6,12(r7)
 8004e40:	8809883a 	mov	r4,r17
 8004e44:	dfc00217 	ldw	ra,8(sp)
 8004e48:	dc400117 	ldw	r17,4(sp)
 8004e4c:	dc000017 	ldw	r16,0(sp)
 8004e50:	dec00304 	addi	sp,sp,12
 8004e54:	800db1c1 	jmpi	800db1c <__malloc_unlock>
 8004e58:	f800283a 	ret
 8004e5c:	100ad27a 	srli	r5,r2,9
 8004e60:	00c00104 	movi	r3,4
 8004e64:	19404a36 	bltu	r3,r5,8004f90 <_free_r+0x240>
 8004e68:	100ad1ba 	srli	r5,r2,6
 8004e6c:	28c00e44 	addi	r3,r5,57
 8004e70:	18c7883a 	add	r3,r3,r3
 8004e74:	29400e04 	addi	r5,r5,56
 8004e78:	18c7883a 	add	r3,r3,r3
 8004e7c:	18c7883a 	add	r3,r3,r3
 8004e80:	1909883a 	add	r4,r3,r4
 8004e84:	20c00017 	ldw	r3,0(r4)
 8004e88:	01c205f4 	movhi	r7,2071
 8004e8c:	213ffe04 	addi	r4,r4,-8
 8004e90:	39de3904 	addi	r7,r7,30948
 8004e94:	20c04426 	beq	r4,r3,8004fa8 <_free_r+0x258>
 8004e98:	01ffff04 	movi	r7,-4
 8004e9c:	19400117 	ldw	r5,4(r3)
 8004ea0:	29ca703a 	and	r5,r5,r7
 8004ea4:	1140022e 	bgeu	r2,r5,8004eb0 <_free_r+0x160>
 8004ea8:	18c00217 	ldw	r3,8(r3)
 8004eac:	20fffb1e 	bne	r4,r3,8004e9c <__alt_data_end+0xfc004e9c>
 8004eb0:	19000317 	ldw	r4,12(r3)
 8004eb4:	31000315 	stw	r4,12(r6)
 8004eb8:	30c00215 	stw	r3,8(r6)
 8004ebc:	21800215 	stw	r6,8(r4)
 8004ec0:	19800315 	stw	r6,12(r3)
 8004ec4:	003fde06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8004ec8:	29c00217 	ldw	r7,8(r5)
 8004ecc:	10c5883a 	add	r2,r2,r3
 8004ed0:	00c205f4 	movhi	r3,2071
 8004ed4:	18de3b04 	addi	r3,r3,30956
 8004ed8:	38c03b26 	beq	r7,r3,8004fc8 <_free_r+0x278>
 8004edc:	2a000317 	ldw	r8,12(r5)
 8004ee0:	11400054 	ori	r5,r2,1
 8004ee4:	3087883a 	add	r3,r6,r2
 8004ee8:	3a000315 	stw	r8,12(r7)
 8004eec:	41c00215 	stw	r7,8(r8)
 8004ef0:	31400115 	stw	r5,4(r6)
 8004ef4:	18800015 	stw	r2,0(r3)
 8004ef8:	003fbd06 	br	8004df0 <__alt_data_end+0xfc004df0>
 8004efc:	39c0004c 	andi	r7,r7,1
 8004f00:	10c5883a 	add	r2,r2,r3
 8004f04:	3800071e 	bne	r7,zero,8004f24 <_free_r+0x1d4>
 8004f08:	81fffe17 	ldw	r7,-8(r16)
 8004f0c:	31cdc83a 	sub	r6,r6,r7
 8004f10:	30c00317 	ldw	r3,12(r6)
 8004f14:	31400217 	ldw	r5,8(r6)
 8004f18:	11c5883a 	add	r2,r2,r7
 8004f1c:	28c00315 	stw	r3,12(r5)
 8004f20:	19400215 	stw	r5,8(r3)
 8004f24:	10c00054 	ori	r3,r2,1
 8004f28:	30c00115 	stw	r3,4(r6)
 8004f2c:	00c20634 	movhi	r3,2072
 8004f30:	18e3cc04 	addi	r3,r3,-28880
 8004f34:	18c00017 	ldw	r3,0(r3)
 8004f38:	21800215 	stw	r6,8(r4)
 8004f3c:	10ffc036 	bltu	r2,r3,8004e40 <__alt_data_end+0xfc004e40>
 8004f40:	00820634 	movhi	r2,2072
 8004f44:	10aaa304 	addi	r2,r2,-21876
 8004f48:	11400017 	ldw	r5,0(r2)
 8004f4c:	8809883a 	mov	r4,r17
 8004f50:	8004c2c0 	call	8004c2c <_malloc_trim_r>
 8004f54:	003fba06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8004f58:	28c9883a 	add	r4,r5,r3
 8004f5c:	21000117 	ldw	r4,4(r4)
 8004f60:	2100004c 	andi	r4,r4,1
 8004f64:	2000391e 	bne	r4,zero,800504c <_free_r+0x2fc>
 8004f68:	29c00217 	ldw	r7,8(r5)
 8004f6c:	29000317 	ldw	r4,12(r5)
 8004f70:	1885883a 	add	r2,r3,r2
 8004f74:	10c00054 	ori	r3,r2,1
 8004f78:	39000315 	stw	r4,12(r7)
 8004f7c:	21c00215 	stw	r7,8(r4)
 8004f80:	30c00115 	stw	r3,4(r6)
 8004f84:	308d883a 	add	r6,r6,r2
 8004f88:	30800015 	stw	r2,0(r6)
 8004f8c:	003fac06 	br	8004e40 <__alt_data_end+0xfc004e40>
 8004f90:	00c00504 	movi	r3,20
 8004f94:	19401536 	bltu	r3,r5,8004fec <_free_r+0x29c>
 8004f98:	28c01704 	addi	r3,r5,92
 8004f9c:	18c7883a 	add	r3,r3,r3
 8004fa0:	294016c4 	addi	r5,r5,91
 8004fa4:	003fb406 	br	8004e78 <__alt_data_end+0xfc004e78>
 8004fa8:	280bd0ba 	srai	r5,r5,2
 8004fac:	00c00044 	movi	r3,1
 8004fb0:	38800117 	ldw	r2,4(r7)
 8004fb4:	194a983a 	sll	r5,r3,r5
 8004fb8:	2007883a 	mov	r3,r4
 8004fbc:	2884b03a 	or	r2,r5,r2
 8004fc0:	38800115 	stw	r2,4(r7)
 8004fc4:	003fbb06 	br	8004eb4 <__alt_data_end+0xfc004eb4>
 8004fc8:	21800515 	stw	r6,20(r4)
 8004fcc:	21800415 	stw	r6,16(r4)
 8004fd0:	10c00054 	ori	r3,r2,1
 8004fd4:	31c00315 	stw	r7,12(r6)
 8004fd8:	31c00215 	stw	r7,8(r6)
 8004fdc:	30c00115 	stw	r3,4(r6)
 8004fe0:	308d883a 	add	r6,r6,r2
 8004fe4:	30800015 	stw	r2,0(r6)
 8004fe8:	003f9506 	br	8004e40 <__alt_data_end+0xfc004e40>
 8004fec:	00c01504 	movi	r3,84
 8004ff0:	19400536 	bltu	r3,r5,8005008 <_free_r+0x2b8>
 8004ff4:	100ad33a 	srli	r5,r2,12
 8004ff8:	28c01bc4 	addi	r3,r5,111
 8004ffc:	18c7883a 	add	r3,r3,r3
 8005000:	29401b84 	addi	r5,r5,110
 8005004:	003f9c06 	br	8004e78 <__alt_data_end+0xfc004e78>
 8005008:	00c05504 	movi	r3,340
 800500c:	19400536 	bltu	r3,r5,8005024 <_free_r+0x2d4>
 8005010:	100ad3fa 	srli	r5,r2,15
 8005014:	28c01e04 	addi	r3,r5,120
 8005018:	18c7883a 	add	r3,r3,r3
 800501c:	29401dc4 	addi	r5,r5,119
 8005020:	003f9506 	br	8004e78 <__alt_data_end+0xfc004e78>
 8005024:	00c15504 	movi	r3,1364
 8005028:	19400536 	bltu	r3,r5,8005040 <_free_r+0x2f0>
 800502c:	100ad4ba 	srli	r5,r2,18
 8005030:	28c01f44 	addi	r3,r5,125
 8005034:	18c7883a 	add	r3,r3,r3
 8005038:	29401f04 	addi	r5,r5,124
 800503c:	003f8e06 	br	8004e78 <__alt_data_end+0xfc004e78>
 8005040:	00c03f84 	movi	r3,254
 8005044:	01401f84 	movi	r5,126
 8005048:	003f8b06 	br	8004e78 <__alt_data_end+0xfc004e78>
 800504c:	10c00054 	ori	r3,r2,1
 8005050:	30c00115 	stw	r3,4(r6)
 8005054:	308d883a 	add	r6,r6,r2
 8005058:	30800015 	stw	r2,0(r6)
 800505c:	003f7806 	br	8004e40 <__alt_data_end+0xfc004e40>

08005060 <__sfvwrite_r>:
 8005060:	30800217 	ldw	r2,8(r6)
 8005064:	10006726 	beq	r2,zero,8005204 <__sfvwrite_r+0x1a4>
 8005068:	28c0030b 	ldhu	r3,12(r5)
 800506c:	defff404 	addi	sp,sp,-48
 8005070:	dd400715 	stw	r21,28(sp)
 8005074:	dd000615 	stw	r20,24(sp)
 8005078:	dc000215 	stw	r16,8(sp)
 800507c:	dfc00b15 	stw	ra,44(sp)
 8005080:	df000a15 	stw	fp,40(sp)
 8005084:	ddc00915 	stw	r23,36(sp)
 8005088:	dd800815 	stw	r22,32(sp)
 800508c:	dcc00515 	stw	r19,20(sp)
 8005090:	dc800415 	stw	r18,16(sp)
 8005094:	dc400315 	stw	r17,12(sp)
 8005098:	1880020c 	andi	r2,r3,8
 800509c:	2821883a 	mov	r16,r5
 80050a0:	202b883a 	mov	r21,r4
 80050a4:	3029883a 	mov	r20,r6
 80050a8:	10002726 	beq	r2,zero,8005148 <__sfvwrite_r+0xe8>
 80050ac:	28800417 	ldw	r2,16(r5)
 80050b0:	10002526 	beq	r2,zero,8005148 <__sfvwrite_r+0xe8>
 80050b4:	1880008c 	andi	r2,r3,2
 80050b8:	a4400017 	ldw	r17,0(r20)
 80050bc:	10002a26 	beq	r2,zero,8005168 <__sfvwrite_r+0x108>
 80050c0:	05a00034 	movhi	r22,32768
 80050c4:	0027883a 	mov	r19,zero
 80050c8:	0025883a 	mov	r18,zero
 80050cc:	b5bf0004 	addi	r22,r22,-1024
 80050d0:	980d883a 	mov	r6,r19
 80050d4:	a809883a 	mov	r4,r21
 80050d8:	90004626 	beq	r18,zero,80051f4 <__sfvwrite_r+0x194>
 80050dc:	900f883a 	mov	r7,r18
 80050e0:	b480022e 	bgeu	r22,r18,80050ec <__sfvwrite_r+0x8c>
 80050e4:	01e00034 	movhi	r7,32768
 80050e8:	39ff0004 	addi	r7,r7,-1024
 80050ec:	80800917 	ldw	r2,36(r16)
 80050f0:	81400717 	ldw	r5,28(r16)
 80050f4:	103ee83a 	callr	r2
 80050f8:	00805a0e 	bge	zero,r2,8005264 <__sfvwrite_r+0x204>
 80050fc:	a0c00217 	ldw	r3,8(r20)
 8005100:	98a7883a 	add	r19,r19,r2
 8005104:	90a5c83a 	sub	r18,r18,r2
 8005108:	1885c83a 	sub	r2,r3,r2
 800510c:	a0800215 	stw	r2,8(r20)
 8005110:	103fef1e 	bne	r2,zero,80050d0 <__alt_data_end+0xfc0050d0>
 8005114:	0005883a 	mov	r2,zero
 8005118:	dfc00b17 	ldw	ra,44(sp)
 800511c:	df000a17 	ldw	fp,40(sp)
 8005120:	ddc00917 	ldw	r23,36(sp)
 8005124:	dd800817 	ldw	r22,32(sp)
 8005128:	dd400717 	ldw	r21,28(sp)
 800512c:	dd000617 	ldw	r20,24(sp)
 8005130:	dcc00517 	ldw	r19,20(sp)
 8005134:	dc800417 	ldw	r18,16(sp)
 8005138:	dc400317 	ldw	r17,12(sp)
 800513c:	dc000217 	ldw	r16,8(sp)
 8005140:	dec00c04 	addi	sp,sp,48
 8005144:	f800283a 	ret
 8005148:	800b883a 	mov	r5,r16
 800514c:	a809883a 	mov	r4,r21
 8005150:	8002bd00 	call	8002bd0 <__swsetup_r>
 8005154:	1000ee1e 	bne	r2,zero,8005510 <__sfvwrite_r+0x4b0>
 8005158:	80c0030b 	ldhu	r3,12(r16)
 800515c:	a4400017 	ldw	r17,0(r20)
 8005160:	1880008c 	andi	r2,r3,2
 8005164:	103fd61e 	bne	r2,zero,80050c0 <__alt_data_end+0xfc0050c0>
 8005168:	1880004c 	andi	r2,r3,1
 800516c:	1000421e 	bne	r2,zero,8005278 <__sfvwrite_r+0x218>
 8005170:	0039883a 	mov	fp,zero
 8005174:	0025883a 	mov	r18,zero
 8005178:	90001a26 	beq	r18,zero,80051e4 <__sfvwrite_r+0x184>
 800517c:	1880800c 	andi	r2,r3,512
 8005180:	84c00217 	ldw	r19,8(r16)
 8005184:	10002126 	beq	r2,zero,800520c <__sfvwrite_r+0x1ac>
 8005188:	982f883a 	mov	r23,r19
 800518c:	94c09636 	bltu	r18,r19,80053e8 <__sfvwrite_r+0x388>
 8005190:	1881200c 	andi	r2,r3,1152
 8005194:	1000a11e 	bne	r2,zero,800541c <__sfvwrite_r+0x3bc>
 8005198:	81000017 	ldw	r4,0(r16)
 800519c:	b80d883a 	mov	r6,r23
 80051a0:	e00b883a 	mov	r5,fp
 80051a4:	80063800 	call	8006380 <memmove>
 80051a8:	80c00217 	ldw	r3,8(r16)
 80051ac:	81000017 	ldw	r4,0(r16)
 80051b0:	9005883a 	mov	r2,r18
 80051b4:	1ce7c83a 	sub	r19,r3,r19
 80051b8:	25cf883a 	add	r7,r4,r23
 80051bc:	84c00215 	stw	r19,8(r16)
 80051c0:	81c00015 	stw	r7,0(r16)
 80051c4:	a0c00217 	ldw	r3,8(r20)
 80051c8:	e0b9883a 	add	fp,fp,r2
 80051cc:	90a5c83a 	sub	r18,r18,r2
 80051d0:	18a7c83a 	sub	r19,r3,r2
 80051d4:	a4c00215 	stw	r19,8(r20)
 80051d8:	983fce26 	beq	r19,zero,8005114 <__alt_data_end+0xfc005114>
 80051dc:	80c0030b 	ldhu	r3,12(r16)
 80051e0:	903fe61e 	bne	r18,zero,800517c <__alt_data_end+0xfc00517c>
 80051e4:	8f000017 	ldw	fp,0(r17)
 80051e8:	8c800117 	ldw	r18,4(r17)
 80051ec:	8c400204 	addi	r17,r17,8
 80051f0:	003fe106 	br	8005178 <__alt_data_end+0xfc005178>
 80051f4:	8cc00017 	ldw	r19,0(r17)
 80051f8:	8c800117 	ldw	r18,4(r17)
 80051fc:	8c400204 	addi	r17,r17,8
 8005200:	003fb306 	br	80050d0 <__alt_data_end+0xfc0050d0>
 8005204:	0005883a 	mov	r2,zero
 8005208:	f800283a 	ret
 800520c:	81000017 	ldw	r4,0(r16)
 8005210:	80800417 	ldw	r2,16(r16)
 8005214:	11005a36 	bltu	r2,r4,8005380 <__sfvwrite_r+0x320>
 8005218:	85c00517 	ldw	r23,20(r16)
 800521c:	95c05836 	bltu	r18,r23,8005380 <__sfvwrite_r+0x320>
 8005220:	00a00034 	movhi	r2,32768
 8005224:	10bfffc4 	addi	r2,r2,-1
 8005228:	9009883a 	mov	r4,r18
 800522c:	1480012e 	bgeu	r2,r18,8005234 <__sfvwrite_r+0x1d4>
 8005230:	1009883a 	mov	r4,r2
 8005234:	b80b883a 	mov	r5,r23
 8005238:	800ab040 	call	800ab04 <__divsi3>
 800523c:	b80b883a 	mov	r5,r23
 8005240:	1009883a 	mov	r4,r2
 8005244:	800061c0 	call	800061c <__mulsi3>
 8005248:	81400717 	ldw	r5,28(r16)
 800524c:	80c00917 	ldw	r3,36(r16)
 8005250:	100f883a 	mov	r7,r2
 8005254:	e00d883a 	mov	r6,fp
 8005258:	a809883a 	mov	r4,r21
 800525c:	183ee83a 	callr	r3
 8005260:	00bfd816 	blt	zero,r2,80051c4 <__alt_data_end+0xfc0051c4>
 8005264:	8080030b 	ldhu	r2,12(r16)
 8005268:	10801014 	ori	r2,r2,64
 800526c:	8080030d 	sth	r2,12(r16)
 8005270:	00bfffc4 	movi	r2,-1
 8005274:	003fa806 	br	8005118 <__alt_data_end+0xfc005118>
 8005278:	0027883a 	mov	r19,zero
 800527c:	0011883a 	mov	r8,zero
 8005280:	0039883a 	mov	fp,zero
 8005284:	0025883a 	mov	r18,zero
 8005288:	90001f26 	beq	r18,zero,8005308 <__sfvwrite_r+0x2a8>
 800528c:	40005a26 	beq	r8,zero,80053f8 <__sfvwrite_r+0x398>
 8005290:	982d883a 	mov	r22,r19
 8005294:	94c0012e 	bgeu	r18,r19,800529c <__sfvwrite_r+0x23c>
 8005298:	902d883a 	mov	r22,r18
 800529c:	81000017 	ldw	r4,0(r16)
 80052a0:	80800417 	ldw	r2,16(r16)
 80052a4:	b02f883a 	mov	r23,r22
 80052a8:	81c00517 	ldw	r7,20(r16)
 80052ac:	1100032e 	bgeu	r2,r4,80052bc <__sfvwrite_r+0x25c>
 80052b0:	80c00217 	ldw	r3,8(r16)
 80052b4:	38c7883a 	add	r3,r7,r3
 80052b8:	1d801816 	blt	r3,r22,800531c <__sfvwrite_r+0x2bc>
 80052bc:	b1c03e16 	blt	r22,r7,80053b8 <__sfvwrite_r+0x358>
 80052c0:	80800917 	ldw	r2,36(r16)
 80052c4:	81400717 	ldw	r5,28(r16)
 80052c8:	e00d883a 	mov	r6,fp
 80052cc:	da000115 	stw	r8,4(sp)
 80052d0:	a809883a 	mov	r4,r21
 80052d4:	103ee83a 	callr	r2
 80052d8:	102f883a 	mov	r23,r2
 80052dc:	da000117 	ldw	r8,4(sp)
 80052e0:	00bfe00e 	bge	zero,r2,8005264 <__alt_data_end+0xfc005264>
 80052e4:	9de7c83a 	sub	r19,r19,r23
 80052e8:	98001f26 	beq	r19,zero,8005368 <__sfvwrite_r+0x308>
 80052ec:	a0800217 	ldw	r2,8(r20)
 80052f0:	e5f9883a 	add	fp,fp,r23
 80052f4:	95e5c83a 	sub	r18,r18,r23
 80052f8:	15efc83a 	sub	r23,r2,r23
 80052fc:	a5c00215 	stw	r23,8(r20)
 8005300:	b83f8426 	beq	r23,zero,8005114 <__alt_data_end+0xfc005114>
 8005304:	903fe11e 	bne	r18,zero,800528c <__alt_data_end+0xfc00528c>
 8005308:	8f000017 	ldw	fp,0(r17)
 800530c:	8c800117 	ldw	r18,4(r17)
 8005310:	0011883a 	mov	r8,zero
 8005314:	8c400204 	addi	r17,r17,8
 8005318:	003fdb06 	br	8005288 <__alt_data_end+0xfc005288>
 800531c:	180d883a 	mov	r6,r3
 8005320:	e00b883a 	mov	r5,fp
 8005324:	da000115 	stw	r8,4(sp)
 8005328:	d8c00015 	stw	r3,0(sp)
 800532c:	80063800 	call	8006380 <memmove>
 8005330:	d8c00017 	ldw	r3,0(sp)
 8005334:	80800017 	ldw	r2,0(r16)
 8005338:	800b883a 	mov	r5,r16
 800533c:	a809883a 	mov	r4,r21
 8005340:	10c5883a 	add	r2,r2,r3
 8005344:	80800015 	stw	r2,0(r16)
 8005348:	d8c00015 	stw	r3,0(sp)
 800534c:	80047f00 	call	80047f0 <_fflush_r>
 8005350:	d8c00017 	ldw	r3,0(sp)
 8005354:	da000117 	ldw	r8,4(sp)
 8005358:	103fc21e 	bne	r2,zero,8005264 <__alt_data_end+0xfc005264>
 800535c:	182f883a 	mov	r23,r3
 8005360:	9de7c83a 	sub	r19,r19,r23
 8005364:	983fe11e 	bne	r19,zero,80052ec <__alt_data_end+0xfc0052ec>
 8005368:	800b883a 	mov	r5,r16
 800536c:	a809883a 	mov	r4,r21
 8005370:	80047f00 	call	80047f0 <_fflush_r>
 8005374:	103fbb1e 	bne	r2,zero,8005264 <__alt_data_end+0xfc005264>
 8005378:	0011883a 	mov	r8,zero
 800537c:	003fdb06 	br	80052ec <__alt_data_end+0xfc0052ec>
 8005380:	94c0012e 	bgeu	r18,r19,8005388 <__sfvwrite_r+0x328>
 8005384:	9027883a 	mov	r19,r18
 8005388:	980d883a 	mov	r6,r19
 800538c:	e00b883a 	mov	r5,fp
 8005390:	80063800 	call	8006380 <memmove>
 8005394:	80800217 	ldw	r2,8(r16)
 8005398:	80c00017 	ldw	r3,0(r16)
 800539c:	14c5c83a 	sub	r2,r2,r19
 80053a0:	1cc7883a 	add	r3,r3,r19
 80053a4:	80800215 	stw	r2,8(r16)
 80053a8:	80c00015 	stw	r3,0(r16)
 80053ac:	10004326 	beq	r2,zero,80054bc <__sfvwrite_r+0x45c>
 80053b0:	9805883a 	mov	r2,r19
 80053b4:	003f8306 	br	80051c4 <__alt_data_end+0xfc0051c4>
 80053b8:	b00d883a 	mov	r6,r22
 80053bc:	e00b883a 	mov	r5,fp
 80053c0:	da000115 	stw	r8,4(sp)
 80053c4:	80063800 	call	8006380 <memmove>
 80053c8:	80800217 	ldw	r2,8(r16)
 80053cc:	80c00017 	ldw	r3,0(r16)
 80053d0:	da000117 	ldw	r8,4(sp)
 80053d4:	1585c83a 	sub	r2,r2,r22
 80053d8:	1dad883a 	add	r22,r3,r22
 80053dc:	80800215 	stw	r2,8(r16)
 80053e0:	85800015 	stw	r22,0(r16)
 80053e4:	003fbf06 	br	80052e4 <__alt_data_end+0xfc0052e4>
 80053e8:	81000017 	ldw	r4,0(r16)
 80053ec:	9027883a 	mov	r19,r18
 80053f0:	902f883a 	mov	r23,r18
 80053f4:	003f6906 	br	800519c <__alt_data_end+0xfc00519c>
 80053f8:	900d883a 	mov	r6,r18
 80053fc:	01400284 	movi	r5,10
 8005400:	e009883a 	mov	r4,fp
 8005404:	80061540 	call	8006154 <memchr>
 8005408:	10003e26 	beq	r2,zero,8005504 <__sfvwrite_r+0x4a4>
 800540c:	10800044 	addi	r2,r2,1
 8005410:	1727c83a 	sub	r19,r2,fp
 8005414:	02000044 	movi	r8,1
 8005418:	003f9d06 	br	8005290 <__alt_data_end+0xfc005290>
 800541c:	80800517 	ldw	r2,20(r16)
 8005420:	81400417 	ldw	r5,16(r16)
 8005424:	81c00017 	ldw	r7,0(r16)
 8005428:	10a7883a 	add	r19,r2,r2
 800542c:	9885883a 	add	r2,r19,r2
 8005430:	1026d7fa 	srli	r19,r2,31
 8005434:	396dc83a 	sub	r22,r7,r5
 8005438:	b1000044 	addi	r4,r22,1
 800543c:	9885883a 	add	r2,r19,r2
 8005440:	1027d07a 	srai	r19,r2,1
 8005444:	2485883a 	add	r2,r4,r18
 8005448:	980d883a 	mov	r6,r19
 800544c:	9880022e 	bgeu	r19,r2,8005458 <__sfvwrite_r+0x3f8>
 8005450:	1027883a 	mov	r19,r2
 8005454:	100d883a 	mov	r6,r2
 8005458:	18c1000c 	andi	r3,r3,1024
 800545c:	18001c26 	beq	r3,zero,80054d0 <__sfvwrite_r+0x470>
 8005460:	300b883a 	mov	r5,r6
 8005464:	a809883a 	mov	r4,r21
 8005468:	80059480 	call	8005948 <_malloc_r>
 800546c:	102f883a 	mov	r23,r2
 8005470:	10002926 	beq	r2,zero,8005518 <__sfvwrite_r+0x4b8>
 8005474:	81400417 	ldw	r5,16(r16)
 8005478:	b00d883a 	mov	r6,r22
 800547c:	1009883a 	mov	r4,r2
 8005480:	80062380 	call	8006238 <memcpy>
 8005484:	8080030b 	ldhu	r2,12(r16)
 8005488:	00fedfc4 	movi	r3,-1153
 800548c:	10c4703a 	and	r2,r2,r3
 8005490:	10802014 	ori	r2,r2,128
 8005494:	8080030d 	sth	r2,12(r16)
 8005498:	bd89883a 	add	r4,r23,r22
 800549c:	9d8fc83a 	sub	r7,r19,r22
 80054a0:	85c00415 	stw	r23,16(r16)
 80054a4:	84c00515 	stw	r19,20(r16)
 80054a8:	81000015 	stw	r4,0(r16)
 80054ac:	9027883a 	mov	r19,r18
 80054b0:	81c00215 	stw	r7,8(r16)
 80054b4:	902f883a 	mov	r23,r18
 80054b8:	003f3806 	br	800519c <__alt_data_end+0xfc00519c>
 80054bc:	800b883a 	mov	r5,r16
 80054c0:	a809883a 	mov	r4,r21
 80054c4:	80047f00 	call	80047f0 <_fflush_r>
 80054c8:	103fb926 	beq	r2,zero,80053b0 <__alt_data_end+0xfc0053b0>
 80054cc:	003f6506 	br	8005264 <__alt_data_end+0xfc005264>
 80054d0:	a809883a 	mov	r4,r21
 80054d4:	80076bc0 	call	80076bc <_realloc_r>
 80054d8:	102f883a 	mov	r23,r2
 80054dc:	103fee1e 	bne	r2,zero,8005498 <__alt_data_end+0xfc005498>
 80054e0:	81400417 	ldw	r5,16(r16)
 80054e4:	a809883a 	mov	r4,r21
 80054e8:	8004d500 	call	8004d50 <_free_r>
 80054ec:	8080030b 	ldhu	r2,12(r16)
 80054f0:	00ffdfc4 	movi	r3,-129
 80054f4:	1884703a 	and	r2,r3,r2
 80054f8:	00c00304 	movi	r3,12
 80054fc:	a8c00015 	stw	r3,0(r21)
 8005500:	003f5906 	br	8005268 <__alt_data_end+0xfc005268>
 8005504:	94c00044 	addi	r19,r18,1
 8005508:	02000044 	movi	r8,1
 800550c:	003f6006 	br	8005290 <__alt_data_end+0xfc005290>
 8005510:	00bfffc4 	movi	r2,-1
 8005514:	003f0006 	br	8005118 <__alt_data_end+0xfc005118>
 8005518:	00800304 	movi	r2,12
 800551c:	a8800015 	stw	r2,0(r21)
 8005520:	8080030b 	ldhu	r2,12(r16)
 8005524:	003f5006 	br	8005268 <__alt_data_end+0xfc005268>

08005528 <_fwalk>:
 8005528:	defff704 	addi	sp,sp,-36
 800552c:	dd000415 	stw	r20,16(sp)
 8005530:	dfc00815 	stw	ra,32(sp)
 8005534:	ddc00715 	stw	r23,28(sp)
 8005538:	dd800615 	stw	r22,24(sp)
 800553c:	dd400515 	stw	r21,20(sp)
 8005540:	dcc00315 	stw	r19,12(sp)
 8005544:	dc800215 	stw	r18,8(sp)
 8005548:	dc400115 	stw	r17,4(sp)
 800554c:	dc000015 	stw	r16,0(sp)
 8005550:	2500b804 	addi	r20,r4,736
 8005554:	a0002326 	beq	r20,zero,80055e4 <_fwalk+0xbc>
 8005558:	282b883a 	mov	r21,r5
 800555c:	002f883a 	mov	r23,zero
 8005560:	05800044 	movi	r22,1
 8005564:	04ffffc4 	movi	r19,-1
 8005568:	a4400117 	ldw	r17,4(r20)
 800556c:	a4800217 	ldw	r18,8(r20)
 8005570:	8c7fffc4 	addi	r17,r17,-1
 8005574:	88000d16 	blt	r17,zero,80055ac <_fwalk+0x84>
 8005578:	94000304 	addi	r16,r18,12
 800557c:	94800384 	addi	r18,r18,14
 8005580:	8080000b 	ldhu	r2,0(r16)
 8005584:	8c7fffc4 	addi	r17,r17,-1
 8005588:	813ffd04 	addi	r4,r16,-12
 800558c:	b080042e 	bgeu	r22,r2,80055a0 <_fwalk+0x78>
 8005590:	9080000f 	ldh	r2,0(r18)
 8005594:	14c00226 	beq	r2,r19,80055a0 <_fwalk+0x78>
 8005598:	a83ee83a 	callr	r21
 800559c:	b8aeb03a 	or	r23,r23,r2
 80055a0:	84001a04 	addi	r16,r16,104
 80055a4:	94801a04 	addi	r18,r18,104
 80055a8:	8cfff51e 	bne	r17,r19,8005580 <__alt_data_end+0xfc005580>
 80055ac:	a5000017 	ldw	r20,0(r20)
 80055b0:	a03fed1e 	bne	r20,zero,8005568 <__alt_data_end+0xfc005568>
 80055b4:	b805883a 	mov	r2,r23
 80055b8:	dfc00817 	ldw	ra,32(sp)
 80055bc:	ddc00717 	ldw	r23,28(sp)
 80055c0:	dd800617 	ldw	r22,24(sp)
 80055c4:	dd400517 	ldw	r21,20(sp)
 80055c8:	dd000417 	ldw	r20,16(sp)
 80055cc:	dcc00317 	ldw	r19,12(sp)
 80055d0:	dc800217 	ldw	r18,8(sp)
 80055d4:	dc400117 	ldw	r17,4(sp)
 80055d8:	dc000017 	ldw	r16,0(sp)
 80055dc:	dec00904 	addi	sp,sp,36
 80055e0:	f800283a 	ret
 80055e4:	002f883a 	mov	r23,zero
 80055e8:	003ff206 	br	80055b4 <__alt_data_end+0xfc0055b4>

080055ec <_fwalk_reent>:
 80055ec:	defff704 	addi	sp,sp,-36
 80055f0:	dd000415 	stw	r20,16(sp)
 80055f4:	dfc00815 	stw	ra,32(sp)
 80055f8:	ddc00715 	stw	r23,28(sp)
 80055fc:	dd800615 	stw	r22,24(sp)
 8005600:	dd400515 	stw	r21,20(sp)
 8005604:	dcc00315 	stw	r19,12(sp)
 8005608:	dc800215 	stw	r18,8(sp)
 800560c:	dc400115 	stw	r17,4(sp)
 8005610:	dc000015 	stw	r16,0(sp)
 8005614:	2500b804 	addi	r20,r4,736
 8005618:	a0002326 	beq	r20,zero,80056a8 <_fwalk_reent+0xbc>
 800561c:	282b883a 	mov	r21,r5
 8005620:	2027883a 	mov	r19,r4
 8005624:	002f883a 	mov	r23,zero
 8005628:	05800044 	movi	r22,1
 800562c:	04bfffc4 	movi	r18,-1
 8005630:	a4400117 	ldw	r17,4(r20)
 8005634:	a4000217 	ldw	r16,8(r20)
 8005638:	8c7fffc4 	addi	r17,r17,-1
 800563c:	88000c16 	blt	r17,zero,8005670 <_fwalk_reent+0x84>
 8005640:	84000304 	addi	r16,r16,12
 8005644:	8080000b 	ldhu	r2,0(r16)
 8005648:	8c7fffc4 	addi	r17,r17,-1
 800564c:	817ffd04 	addi	r5,r16,-12
 8005650:	b080052e 	bgeu	r22,r2,8005668 <_fwalk_reent+0x7c>
 8005654:	8080008f 	ldh	r2,2(r16)
 8005658:	9809883a 	mov	r4,r19
 800565c:	14800226 	beq	r2,r18,8005668 <_fwalk_reent+0x7c>
 8005660:	a83ee83a 	callr	r21
 8005664:	b8aeb03a 	or	r23,r23,r2
 8005668:	84001a04 	addi	r16,r16,104
 800566c:	8cbff51e 	bne	r17,r18,8005644 <__alt_data_end+0xfc005644>
 8005670:	a5000017 	ldw	r20,0(r20)
 8005674:	a03fee1e 	bne	r20,zero,8005630 <__alt_data_end+0xfc005630>
 8005678:	b805883a 	mov	r2,r23
 800567c:	dfc00817 	ldw	ra,32(sp)
 8005680:	ddc00717 	ldw	r23,28(sp)
 8005684:	dd800617 	ldw	r22,24(sp)
 8005688:	dd400517 	ldw	r21,20(sp)
 800568c:	dd000417 	ldw	r20,16(sp)
 8005690:	dcc00317 	ldw	r19,12(sp)
 8005694:	dc800217 	ldw	r18,8(sp)
 8005698:	dc400117 	ldw	r17,4(sp)
 800569c:	dc000017 	ldw	r16,0(sp)
 80056a0:	dec00904 	addi	sp,sp,36
 80056a4:	f800283a 	ret
 80056a8:	002f883a 	mov	r23,zero
 80056ac:	003ff206 	br	8005678 <__alt_data_end+0xfc005678>

080056b0 <_setlocale_r>:
 80056b0:	30001b26 	beq	r6,zero,8005720 <_setlocale_r+0x70>
 80056b4:	014205f4 	movhi	r5,2071
 80056b8:	defffe04 	addi	sp,sp,-8
 80056bc:	295c7104 	addi	r5,r5,29124
 80056c0:	3009883a 	mov	r4,r6
 80056c4:	dc000015 	stw	r16,0(sp)
 80056c8:	dfc00115 	stw	ra,4(sp)
 80056cc:	3021883a 	mov	r16,r6
 80056d0:	8007e240 	call	8007e24 <strcmp>
 80056d4:	1000061e 	bne	r2,zero,80056f0 <_setlocale_r+0x40>
 80056d8:	008205f4 	movhi	r2,2071
 80056dc:	109c7004 	addi	r2,r2,29120
 80056e0:	dfc00117 	ldw	ra,4(sp)
 80056e4:	dc000017 	ldw	r16,0(sp)
 80056e8:	dec00204 	addi	sp,sp,8
 80056ec:	f800283a 	ret
 80056f0:	014205f4 	movhi	r5,2071
 80056f4:	295c7004 	addi	r5,r5,29120
 80056f8:	8009883a 	mov	r4,r16
 80056fc:	8007e240 	call	8007e24 <strcmp>
 8005700:	103ff526 	beq	r2,zero,80056d8 <__alt_data_end+0xfc0056d8>
 8005704:	014205f4 	movhi	r5,2071
 8005708:	295c5b04 	addi	r5,r5,29036
 800570c:	8009883a 	mov	r4,r16
 8005710:	8007e240 	call	8007e24 <strcmp>
 8005714:	103ff026 	beq	r2,zero,80056d8 <__alt_data_end+0xfc0056d8>
 8005718:	0005883a 	mov	r2,zero
 800571c:	003ff006 	br	80056e0 <__alt_data_end+0xfc0056e0>
 8005720:	008205f4 	movhi	r2,2071
 8005724:	109c7004 	addi	r2,r2,29120
 8005728:	f800283a 	ret

0800572c <__locale_charset>:
 800572c:	008205f4 	movhi	r2,2071
 8005730:	109e2304 	addi	r2,r2,30860
 8005734:	f800283a 	ret

08005738 <__locale_mb_cur_max>:
 8005738:	00820634 	movhi	r2,2072
 800573c:	10a3ca04 	addi	r2,r2,-28888
 8005740:	10800017 	ldw	r2,0(r2)
 8005744:	f800283a 	ret

08005748 <__locale_msgcharset>:
 8005748:	008205f4 	movhi	r2,2071
 800574c:	109e1b04 	addi	r2,r2,30828
 8005750:	f800283a 	ret

08005754 <__locale_cjk_lang>:
 8005754:	0005883a 	mov	r2,zero
 8005758:	f800283a 	ret

0800575c <_localeconv_r>:
 800575c:	008205f4 	movhi	r2,2071
 8005760:	109e2b04 	addi	r2,r2,30892
 8005764:	f800283a 	ret

08005768 <setlocale>:
 8005768:	00820634 	movhi	r2,2072
 800576c:	10a3c904 	addi	r2,r2,-28892
 8005770:	280d883a 	mov	r6,r5
 8005774:	200b883a 	mov	r5,r4
 8005778:	11000017 	ldw	r4,0(r2)
 800577c:	80056b01 	jmpi	80056b0 <_setlocale_r>

08005780 <localeconv>:
 8005780:	008205f4 	movhi	r2,2071
 8005784:	109e2b04 	addi	r2,r2,30892
 8005788:	f800283a 	ret

0800578c <__smakebuf_r>:
 800578c:	2880030b 	ldhu	r2,12(r5)
 8005790:	10c0008c 	andi	r3,r2,2
 8005794:	1800411e 	bne	r3,zero,800589c <__smakebuf_r+0x110>
 8005798:	deffec04 	addi	sp,sp,-80
 800579c:	dc000f15 	stw	r16,60(sp)
 80057a0:	2821883a 	mov	r16,r5
 80057a4:	2940038f 	ldh	r5,14(r5)
 80057a8:	dc401015 	stw	r17,64(sp)
 80057ac:	dfc01315 	stw	ra,76(sp)
 80057b0:	dcc01215 	stw	r19,72(sp)
 80057b4:	dc801115 	stw	r18,68(sp)
 80057b8:	2023883a 	mov	r17,r4
 80057bc:	28001c16 	blt	r5,zero,8005830 <__smakebuf_r+0xa4>
 80057c0:	d80d883a 	mov	r6,sp
 80057c4:	8009a940 	call	8009a94 <_fstat_r>
 80057c8:	10001816 	blt	r2,zero,800582c <__smakebuf_r+0xa0>
 80057cc:	d8800117 	ldw	r2,4(sp)
 80057d0:	00e00014 	movui	r3,32768
 80057d4:	10bc000c 	andi	r2,r2,61440
 80057d8:	14c80020 	cmpeqi	r19,r2,8192
 80057dc:	10c03726 	beq	r2,r3,80058bc <__smakebuf_r+0x130>
 80057e0:	80c0030b 	ldhu	r3,12(r16)
 80057e4:	18c20014 	ori	r3,r3,2048
 80057e8:	80c0030d 	sth	r3,12(r16)
 80057ec:	00c80004 	movi	r3,8192
 80057f0:	10c0521e 	bne	r2,r3,800593c <__smakebuf_r+0x1b0>
 80057f4:	8140038f 	ldh	r5,14(r16)
 80057f8:	8809883a 	mov	r4,r17
 80057fc:	8009af00 	call	8009af0 <_isatty_r>
 8005800:	10004c26 	beq	r2,zero,8005934 <__smakebuf_r+0x1a8>
 8005804:	8080030b 	ldhu	r2,12(r16)
 8005808:	80c010c4 	addi	r3,r16,67
 800580c:	80c00015 	stw	r3,0(r16)
 8005810:	10800054 	ori	r2,r2,1
 8005814:	8080030d 	sth	r2,12(r16)
 8005818:	00800044 	movi	r2,1
 800581c:	80c00415 	stw	r3,16(r16)
 8005820:	80800515 	stw	r2,20(r16)
 8005824:	04810004 	movi	r18,1024
 8005828:	00000706 	br	8005848 <__smakebuf_r+0xbc>
 800582c:	8080030b 	ldhu	r2,12(r16)
 8005830:	10c0200c 	andi	r3,r2,128
 8005834:	18001f1e 	bne	r3,zero,80058b4 <__smakebuf_r+0x128>
 8005838:	04810004 	movi	r18,1024
 800583c:	10820014 	ori	r2,r2,2048
 8005840:	8080030d 	sth	r2,12(r16)
 8005844:	0027883a 	mov	r19,zero
 8005848:	900b883a 	mov	r5,r18
 800584c:	8809883a 	mov	r4,r17
 8005850:	80059480 	call	8005948 <_malloc_r>
 8005854:	10002c26 	beq	r2,zero,8005908 <__smakebuf_r+0x17c>
 8005858:	80c0030b 	ldhu	r3,12(r16)
 800585c:	01020034 	movhi	r4,2048
 8005860:	21122104 	addi	r4,r4,18564
 8005864:	89000f15 	stw	r4,60(r17)
 8005868:	18c02014 	ori	r3,r3,128
 800586c:	80c0030d 	sth	r3,12(r16)
 8005870:	80800015 	stw	r2,0(r16)
 8005874:	80800415 	stw	r2,16(r16)
 8005878:	84800515 	stw	r18,20(r16)
 800587c:	98001a1e 	bne	r19,zero,80058e8 <__smakebuf_r+0x15c>
 8005880:	dfc01317 	ldw	ra,76(sp)
 8005884:	dcc01217 	ldw	r19,72(sp)
 8005888:	dc801117 	ldw	r18,68(sp)
 800588c:	dc401017 	ldw	r17,64(sp)
 8005890:	dc000f17 	ldw	r16,60(sp)
 8005894:	dec01404 	addi	sp,sp,80
 8005898:	f800283a 	ret
 800589c:	288010c4 	addi	r2,r5,67
 80058a0:	28800015 	stw	r2,0(r5)
 80058a4:	28800415 	stw	r2,16(r5)
 80058a8:	00800044 	movi	r2,1
 80058ac:	28800515 	stw	r2,20(r5)
 80058b0:	f800283a 	ret
 80058b4:	04801004 	movi	r18,64
 80058b8:	003fe006 	br	800583c <__alt_data_end+0xfc00583c>
 80058bc:	81000a17 	ldw	r4,40(r16)
 80058c0:	00c20034 	movhi	r3,2048
 80058c4:	18df7004 	addi	r3,r3,32192
 80058c8:	20ffc51e 	bne	r4,r3,80057e0 <__alt_data_end+0xfc0057e0>
 80058cc:	8080030b 	ldhu	r2,12(r16)
 80058d0:	04810004 	movi	r18,1024
 80058d4:	84801315 	stw	r18,76(r16)
 80058d8:	1484b03a 	or	r2,r2,r18
 80058dc:	8080030d 	sth	r2,12(r16)
 80058e0:	0027883a 	mov	r19,zero
 80058e4:	003fd806 	br	8005848 <__alt_data_end+0xfc005848>
 80058e8:	8140038f 	ldh	r5,14(r16)
 80058ec:	8809883a 	mov	r4,r17
 80058f0:	8009af00 	call	8009af0 <_isatty_r>
 80058f4:	103fe226 	beq	r2,zero,8005880 <__alt_data_end+0xfc005880>
 80058f8:	8080030b 	ldhu	r2,12(r16)
 80058fc:	10800054 	ori	r2,r2,1
 8005900:	8080030d 	sth	r2,12(r16)
 8005904:	003fde06 	br	8005880 <__alt_data_end+0xfc005880>
 8005908:	8080030b 	ldhu	r2,12(r16)
 800590c:	10c0800c 	andi	r3,r2,512
 8005910:	183fdb1e 	bne	r3,zero,8005880 <__alt_data_end+0xfc005880>
 8005914:	10800094 	ori	r2,r2,2
 8005918:	80c010c4 	addi	r3,r16,67
 800591c:	8080030d 	sth	r2,12(r16)
 8005920:	00800044 	movi	r2,1
 8005924:	80c00015 	stw	r3,0(r16)
 8005928:	80c00415 	stw	r3,16(r16)
 800592c:	80800515 	stw	r2,20(r16)
 8005930:	003fd306 	br	8005880 <__alt_data_end+0xfc005880>
 8005934:	04810004 	movi	r18,1024
 8005938:	003fc306 	br	8005848 <__alt_data_end+0xfc005848>
 800593c:	0027883a 	mov	r19,zero
 8005940:	04810004 	movi	r18,1024
 8005944:	003fc006 	br	8005848 <__alt_data_end+0xfc005848>

08005948 <_malloc_r>:
 8005948:	defff504 	addi	sp,sp,-44
 800594c:	dc800315 	stw	r18,12(sp)
 8005950:	dfc00a15 	stw	ra,40(sp)
 8005954:	df000915 	stw	fp,36(sp)
 8005958:	ddc00815 	stw	r23,32(sp)
 800595c:	dd800715 	stw	r22,28(sp)
 8005960:	dd400615 	stw	r21,24(sp)
 8005964:	dd000515 	stw	r20,20(sp)
 8005968:	dcc00415 	stw	r19,16(sp)
 800596c:	dc400215 	stw	r17,8(sp)
 8005970:	dc000115 	stw	r16,4(sp)
 8005974:	288002c4 	addi	r2,r5,11
 8005978:	00c00584 	movi	r3,22
 800597c:	2025883a 	mov	r18,r4
 8005980:	18807f2e 	bgeu	r3,r2,8005b80 <_malloc_r+0x238>
 8005984:	047ffe04 	movi	r17,-8
 8005988:	1462703a 	and	r17,r2,r17
 800598c:	8800a316 	blt	r17,zero,8005c1c <_malloc_r+0x2d4>
 8005990:	8940a236 	bltu	r17,r5,8005c1c <_malloc_r+0x2d4>
 8005994:	800daf80 	call	800daf8 <__malloc_lock>
 8005998:	00807dc4 	movi	r2,503
 800599c:	1441e92e 	bgeu	r2,r17,8006144 <_malloc_r+0x7fc>
 80059a0:	8804d27a 	srli	r2,r17,9
 80059a4:	1000a126 	beq	r2,zero,8005c2c <_malloc_r+0x2e4>
 80059a8:	00c00104 	movi	r3,4
 80059ac:	18811e36 	bltu	r3,r2,8005e28 <_malloc_r+0x4e0>
 80059b0:	8804d1ba 	srli	r2,r17,6
 80059b4:	12000e44 	addi	r8,r2,57
 80059b8:	11c00e04 	addi	r7,r2,56
 80059bc:	4209883a 	add	r4,r8,r8
 80059c0:	04c205f4 	movhi	r19,2071
 80059c4:	2109883a 	add	r4,r4,r4
 80059c8:	9cde3904 	addi	r19,r19,30948
 80059cc:	2109883a 	add	r4,r4,r4
 80059d0:	9909883a 	add	r4,r19,r4
 80059d4:	24000117 	ldw	r16,4(r4)
 80059d8:	213ffe04 	addi	r4,r4,-8
 80059dc:	24009726 	beq	r4,r16,8005c3c <_malloc_r+0x2f4>
 80059e0:	80800117 	ldw	r2,4(r16)
 80059e4:	01bfff04 	movi	r6,-4
 80059e8:	014003c4 	movi	r5,15
 80059ec:	1184703a 	and	r2,r2,r6
 80059f0:	1447c83a 	sub	r3,r2,r17
 80059f4:	28c00716 	blt	r5,r3,8005a14 <_malloc_r+0xcc>
 80059f8:	1800920e 	bge	r3,zero,8005c44 <_malloc_r+0x2fc>
 80059fc:	84000317 	ldw	r16,12(r16)
 8005a00:	24008e26 	beq	r4,r16,8005c3c <_malloc_r+0x2f4>
 8005a04:	80800117 	ldw	r2,4(r16)
 8005a08:	1184703a 	and	r2,r2,r6
 8005a0c:	1447c83a 	sub	r3,r2,r17
 8005a10:	28fff90e 	bge	r5,r3,80059f8 <__alt_data_end+0xfc0059f8>
 8005a14:	3809883a 	mov	r4,r7
 8005a18:	018205f4 	movhi	r6,2071
 8005a1c:	9c000417 	ldw	r16,16(r19)
 8005a20:	319e3904 	addi	r6,r6,30948
 8005a24:	32000204 	addi	r8,r6,8
 8005a28:	82013426 	beq	r16,r8,8005efc <_malloc_r+0x5b4>
 8005a2c:	80c00117 	ldw	r3,4(r16)
 8005a30:	00bfff04 	movi	r2,-4
 8005a34:	188e703a 	and	r7,r3,r2
 8005a38:	3c45c83a 	sub	r2,r7,r17
 8005a3c:	00c003c4 	movi	r3,15
 8005a40:	18811f16 	blt	r3,r2,8005ec0 <_malloc_r+0x578>
 8005a44:	32000515 	stw	r8,20(r6)
 8005a48:	32000415 	stw	r8,16(r6)
 8005a4c:	10007f0e 	bge	r2,zero,8005c4c <_malloc_r+0x304>
 8005a50:	00807fc4 	movi	r2,511
 8005a54:	11c0fd36 	bltu	r2,r7,8005e4c <_malloc_r+0x504>
 8005a58:	3806d0fa 	srli	r3,r7,3
 8005a5c:	01c00044 	movi	r7,1
 8005a60:	30800117 	ldw	r2,4(r6)
 8005a64:	19400044 	addi	r5,r3,1
 8005a68:	294b883a 	add	r5,r5,r5
 8005a6c:	1807d0ba 	srai	r3,r3,2
 8005a70:	294b883a 	add	r5,r5,r5
 8005a74:	294b883a 	add	r5,r5,r5
 8005a78:	298b883a 	add	r5,r5,r6
 8005a7c:	38c6983a 	sll	r3,r7,r3
 8005a80:	29c00017 	ldw	r7,0(r5)
 8005a84:	2a7ffe04 	addi	r9,r5,-8
 8005a88:	1886b03a 	or	r3,r3,r2
 8005a8c:	82400315 	stw	r9,12(r16)
 8005a90:	81c00215 	stw	r7,8(r16)
 8005a94:	30c00115 	stw	r3,4(r6)
 8005a98:	2c000015 	stw	r16,0(r5)
 8005a9c:	3c000315 	stw	r16,12(r7)
 8005aa0:	2005d0ba 	srai	r2,r4,2
 8005aa4:	01400044 	movi	r5,1
 8005aa8:	288a983a 	sll	r5,r5,r2
 8005aac:	19406f36 	bltu	r3,r5,8005c6c <_malloc_r+0x324>
 8005ab0:	28c4703a 	and	r2,r5,r3
 8005ab4:	10000a1e 	bne	r2,zero,8005ae0 <_malloc_r+0x198>
 8005ab8:	00bfff04 	movi	r2,-4
 8005abc:	294b883a 	add	r5,r5,r5
 8005ac0:	2088703a 	and	r4,r4,r2
 8005ac4:	28c4703a 	and	r2,r5,r3
 8005ac8:	21000104 	addi	r4,r4,4
 8005acc:	1000041e 	bne	r2,zero,8005ae0 <_malloc_r+0x198>
 8005ad0:	294b883a 	add	r5,r5,r5
 8005ad4:	28c4703a 	and	r2,r5,r3
 8005ad8:	21000104 	addi	r4,r4,4
 8005adc:	103ffc26 	beq	r2,zero,8005ad0 <__alt_data_end+0xfc005ad0>
 8005ae0:	02bfff04 	movi	r10,-4
 8005ae4:	024003c4 	movi	r9,15
 8005ae8:	21800044 	addi	r6,r4,1
 8005aec:	318d883a 	add	r6,r6,r6
 8005af0:	318d883a 	add	r6,r6,r6
 8005af4:	318d883a 	add	r6,r6,r6
 8005af8:	998d883a 	add	r6,r19,r6
 8005afc:	333ffe04 	addi	r12,r6,-8
 8005b00:	2017883a 	mov	r11,r4
 8005b04:	31800104 	addi	r6,r6,4
 8005b08:	34000017 	ldw	r16,0(r6)
 8005b0c:	31fffd04 	addi	r7,r6,-12
 8005b10:	81c0041e 	bne	r16,r7,8005b24 <_malloc_r+0x1dc>
 8005b14:	0000fb06 	br	8005f04 <_malloc_r+0x5bc>
 8005b18:	1801030e 	bge	r3,zero,8005f28 <_malloc_r+0x5e0>
 8005b1c:	84000317 	ldw	r16,12(r16)
 8005b20:	81c0f826 	beq	r16,r7,8005f04 <_malloc_r+0x5bc>
 8005b24:	80800117 	ldw	r2,4(r16)
 8005b28:	1284703a 	and	r2,r2,r10
 8005b2c:	1447c83a 	sub	r3,r2,r17
 8005b30:	48fff90e 	bge	r9,r3,8005b18 <__alt_data_end+0xfc005b18>
 8005b34:	80800317 	ldw	r2,12(r16)
 8005b38:	81000217 	ldw	r4,8(r16)
 8005b3c:	89400054 	ori	r5,r17,1
 8005b40:	81400115 	stw	r5,4(r16)
 8005b44:	20800315 	stw	r2,12(r4)
 8005b48:	11000215 	stw	r4,8(r2)
 8005b4c:	8463883a 	add	r17,r16,r17
 8005b50:	9c400515 	stw	r17,20(r19)
 8005b54:	9c400415 	stw	r17,16(r19)
 8005b58:	18800054 	ori	r2,r3,1
 8005b5c:	88800115 	stw	r2,4(r17)
 8005b60:	8a000315 	stw	r8,12(r17)
 8005b64:	8a000215 	stw	r8,8(r17)
 8005b68:	88e3883a 	add	r17,r17,r3
 8005b6c:	88c00015 	stw	r3,0(r17)
 8005b70:	9009883a 	mov	r4,r18
 8005b74:	800db1c0 	call	800db1c <__malloc_unlock>
 8005b78:	80800204 	addi	r2,r16,8
 8005b7c:	00001b06 	br	8005bec <_malloc_r+0x2a4>
 8005b80:	04400404 	movi	r17,16
 8005b84:	89402536 	bltu	r17,r5,8005c1c <_malloc_r+0x2d4>
 8005b88:	800daf80 	call	800daf8 <__malloc_lock>
 8005b8c:	00800184 	movi	r2,6
 8005b90:	01000084 	movi	r4,2
 8005b94:	04c205f4 	movhi	r19,2071
 8005b98:	1085883a 	add	r2,r2,r2
 8005b9c:	9cde3904 	addi	r19,r19,30948
 8005ba0:	1085883a 	add	r2,r2,r2
 8005ba4:	9885883a 	add	r2,r19,r2
 8005ba8:	14000117 	ldw	r16,4(r2)
 8005bac:	10fffe04 	addi	r3,r2,-8
 8005bb0:	80c0d926 	beq	r16,r3,8005f18 <_malloc_r+0x5d0>
 8005bb4:	80c00117 	ldw	r3,4(r16)
 8005bb8:	81000317 	ldw	r4,12(r16)
 8005bbc:	00bfff04 	movi	r2,-4
 8005bc0:	1884703a 	and	r2,r3,r2
 8005bc4:	81400217 	ldw	r5,8(r16)
 8005bc8:	8085883a 	add	r2,r16,r2
 8005bcc:	10c00117 	ldw	r3,4(r2)
 8005bd0:	29000315 	stw	r4,12(r5)
 8005bd4:	21400215 	stw	r5,8(r4)
 8005bd8:	18c00054 	ori	r3,r3,1
 8005bdc:	10c00115 	stw	r3,4(r2)
 8005be0:	9009883a 	mov	r4,r18
 8005be4:	800db1c0 	call	800db1c <__malloc_unlock>
 8005be8:	80800204 	addi	r2,r16,8
 8005bec:	dfc00a17 	ldw	ra,40(sp)
 8005bf0:	df000917 	ldw	fp,36(sp)
 8005bf4:	ddc00817 	ldw	r23,32(sp)
 8005bf8:	dd800717 	ldw	r22,28(sp)
 8005bfc:	dd400617 	ldw	r21,24(sp)
 8005c00:	dd000517 	ldw	r20,20(sp)
 8005c04:	dcc00417 	ldw	r19,16(sp)
 8005c08:	dc800317 	ldw	r18,12(sp)
 8005c0c:	dc400217 	ldw	r17,8(sp)
 8005c10:	dc000117 	ldw	r16,4(sp)
 8005c14:	dec00b04 	addi	sp,sp,44
 8005c18:	f800283a 	ret
 8005c1c:	00800304 	movi	r2,12
 8005c20:	90800015 	stw	r2,0(r18)
 8005c24:	0005883a 	mov	r2,zero
 8005c28:	003ff006 	br	8005bec <__alt_data_end+0xfc005bec>
 8005c2c:	01002004 	movi	r4,128
 8005c30:	02001004 	movi	r8,64
 8005c34:	01c00fc4 	movi	r7,63
 8005c38:	003f6106 	br	80059c0 <__alt_data_end+0xfc0059c0>
 8005c3c:	4009883a 	mov	r4,r8
 8005c40:	003f7506 	br	8005a18 <__alt_data_end+0xfc005a18>
 8005c44:	81000317 	ldw	r4,12(r16)
 8005c48:	003fde06 	br	8005bc4 <__alt_data_end+0xfc005bc4>
 8005c4c:	81c5883a 	add	r2,r16,r7
 8005c50:	11400117 	ldw	r5,4(r2)
 8005c54:	9009883a 	mov	r4,r18
 8005c58:	29400054 	ori	r5,r5,1
 8005c5c:	11400115 	stw	r5,4(r2)
 8005c60:	800db1c0 	call	800db1c <__malloc_unlock>
 8005c64:	80800204 	addi	r2,r16,8
 8005c68:	003fe006 	br	8005bec <__alt_data_end+0xfc005bec>
 8005c6c:	9c000217 	ldw	r16,8(r19)
 8005c70:	00bfff04 	movi	r2,-4
 8005c74:	85800117 	ldw	r22,4(r16)
 8005c78:	b0ac703a 	and	r22,r22,r2
 8005c7c:	b4400336 	bltu	r22,r17,8005c8c <_malloc_r+0x344>
 8005c80:	b445c83a 	sub	r2,r22,r17
 8005c84:	00c003c4 	movi	r3,15
 8005c88:	18805d16 	blt	r3,r2,8005e00 <_malloc_r+0x4b8>
 8005c8c:	05c20634 	movhi	r23,2072
 8005c90:	00820634 	movhi	r2,2072
 8005c94:	10aaa304 	addi	r2,r2,-21876
 8005c98:	bde3cb04 	addi	r23,r23,-28884
 8005c9c:	15400017 	ldw	r21,0(r2)
 8005ca0:	b8c00017 	ldw	r3,0(r23)
 8005ca4:	00bfffc4 	movi	r2,-1
 8005ca8:	858d883a 	add	r6,r16,r22
 8005cac:	8d6b883a 	add	r21,r17,r21
 8005cb0:	1880ea26 	beq	r3,r2,800605c <_malloc_r+0x714>
 8005cb4:	ad4403c4 	addi	r21,r21,4111
 8005cb8:	00bc0004 	movi	r2,-4096
 8005cbc:	a8aa703a 	and	r21,r21,r2
 8005cc0:	a80b883a 	mov	r5,r21
 8005cc4:	9009883a 	mov	r4,r18
 8005cc8:	d9800015 	stw	r6,0(sp)
 8005ccc:	8007c940 	call	8007c94 <_sbrk_r>
 8005cd0:	1029883a 	mov	r20,r2
 8005cd4:	00bfffc4 	movi	r2,-1
 8005cd8:	d9800017 	ldw	r6,0(sp)
 8005cdc:	a080e826 	beq	r20,r2,8006080 <_malloc_r+0x738>
 8005ce0:	a180a636 	bltu	r20,r6,8005f7c <_malloc_r+0x634>
 8005ce4:	07020634 	movhi	fp,2072
 8005ce8:	e72aac04 	addi	fp,fp,-21840
 8005cec:	e0800017 	ldw	r2,0(fp)
 8005cf0:	a887883a 	add	r3,r21,r2
 8005cf4:	e0c00015 	stw	r3,0(fp)
 8005cf8:	3500e626 	beq	r6,r20,8006094 <_malloc_r+0x74c>
 8005cfc:	b9000017 	ldw	r4,0(r23)
 8005d00:	00bfffc4 	movi	r2,-1
 8005d04:	2080ee26 	beq	r4,r2,80060c0 <_malloc_r+0x778>
 8005d08:	a185c83a 	sub	r2,r20,r6
 8005d0c:	10c5883a 	add	r2,r2,r3
 8005d10:	e0800015 	stw	r2,0(fp)
 8005d14:	a0c001cc 	andi	r3,r20,7
 8005d18:	1800bc26 	beq	r3,zero,800600c <_malloc_r+0x6c4>
 8005d1c:	a0e9c83a 	sub	r20,r20,r3
 8005d20:	00840204 	movi	r2,4104
 8005d24:	a5000204 	addi	r20,r20,8
 8005d28:	10c7c83a 	sub	r3,r2,r3
 8005d2c:	a545883a 	add	r2,r20,r21
 8005d30:	1083ffcc 	andi	r2,r2,4095
 8005d34:	18abc83a 	sub	r21,r3,r2
 8005d38:	a80b883a 	mov	r5,r21
 8005d3c:	9009883a 	mov	r4,r18
 8005d40:	8007c940 	call	8007c94 <_sbrk_r>
 8005d44:	00ffffc4 	movi	r3,-1
 8005d48:	10c0e126 	beq	r2,r3,80060d0 <_malloc_r+0x788>
 8005d4c:	1505c83a 	sub	r2,r2,r20
 8005d50:	1545883a 	add	r2,r2,r21
 8005d54:	10800054 	ori	r2,r2,1
 8005d58:	e0c00017 	ldw	r3,0(fp)
 8005d5c:	9d000215 	stw	r20,8(r19)
 8005d60:	a0800115 	stw	r2,4(r20)
 8005d64:	a8c7883a 	add	r3,r21,r3
 8005d68:	e0c00015 	stw	r3,0(fp)
 8005d6c:	84c00e26 	beq	r16,r19,8005da8 <_malloc_r+0x460>
 8005d70:	018003c4 	movi	r6,15
 8005d74:	3580a72e 	bgeu	r6,r22,8006014 <_malloc_r+0x6cc>
 8005d78:	81400117 	ldw	r5,4(r16)
 8005d7c:	013ffe04 	movi	r4,-8
 8005d80:	b0bffd04 	addi	r2,r22,-12
 8005d84:	1104703a 	and	r2,r2,r4
 8005d88:	2900004c 	andi	r4,r5,1
 8005d8c:	2088b03a 	or	r4,r4,r2
 8005d90:	81000115 	stw	r4,4(r16)
 8005d94:	01400144 	movi	r5,5
 8005d98:	8089883a 	add	r4,r16,r2
 8005d9c:	21400115 	stw	r5,4(r4)
 8005da0:	21400215 	stw	r5,8(r4)
 8005da4:	3080cd36 	bltu	r6,r2,80060dc <_malloc_r+0x794>
 8005da8:	00820634 	movhi	r2,2072
 8005dac:	10aaa204 	addi	r2,r2,-21880
 8005db0:	11000017 	ldw	r4,0(r2)
 8005db4:	20c0012e 	bgeu	r4,r3,8005dbc <_malloc_r+0x474>
 8005db8:	10c00015 	stw	r3,0(r2)
 8005dbc:	00820634 	movhi	r2,2072
 8005dc0:	10aaa104 	addi	r2,r2,-21884
 8005dc4:	11000017 	ldw	r4,0(r2)
 8005dc8:	9c000217 	ldw	r16,8(r19)
 8005dcc:	20c0012e 	bgeu	r4,r3,8005dd4 <_malloc_r+0x48c>
 8005dd0:	10c00015 	stw	r3,0(r2)
 8005dd4:	80c00117 	ldw	r3,4(r16)
 8005dd8:	00bfff04 	movi	r2,-4
 8005ddc:	1886703a 	and	r3,r3,r2
 8005de0:	1c45c83a 	sub	r2,r3,r17
 8005de4:	1c400236 	bltu	r3,r17,8005df0 <_malloc_r+0x4a8>
 8005de8:	00c003c4 	movi	r3,15
 8005dec:	18800416 	blt	r3,r2,8005e00 <_malloc_r+0x4b8>
 8005df0:	9009883a 	mov	r4,r18
 8005df4:	800db1c0 	call	800db1c <__malloc_unlock>
 8005df8:	0005883a 	mov	r2,zero
 8005dfc:	003f7b06 	br	8005bec <__alt_data_end+0xfc005bec>
 8005e00:	88c00054 	ori	r3,r17,1
 8005e04:	80c00115 	stw	r3,4(r16)
 8005e08:	8463883a 	add	r17,r16,r17
 8005e0c:	10800054 	ori	r2,r2,1
 8005e10:	9c400215 	stw	r17,8(r19)
 8005e14:	88800115 	stw	r2,4(r17)
 8005e18:	9009883a 	mov	r4,r18
 8005e1c:	800db1c0 	call	800db1c <__malloc_unlock>
 8005e20:	80800204 	addi	r2,r16,8
 8005e24:	003f7106 	br	8005bec <__alt_data_end+0xfc005bec>
 8005e28:	00c00504 	movi	r3,20
 8005e2c:	18804a2e 	bgeu	r3,r2,8005f58 <_malloc_r+0x610>
 8005e30:	00c01504 	movi	r3,84
 8005e34:	18806e36 	bltu	r3,r2,8005ff0 <_malloc_r+0x6a8>
 8005e38:	8804d33a 	srli	r2,r17,12
 8005e3c:	12001bc4 	addi	r8,r2,111
 8005e40:	11c01b84 	addi	r7,r2,110
 8005e44:	4209883a 	add	r4,r8,r8
 8005e48:	003edd06 	br	80059c0 <__alt_data_end+0xfc0059c0>
 8005e4c:	3804d27a 	srli	r2,r7,9
 8005e50:	00c00104 	movi	r3,4
 8005e54:	1880442e 	bgeu	r3,r2,8005f68 <_malloc_r+0x620>
 8005e58:	00c00504 	movi	r3,20
 8005e5c:	18808136 	bltu	r3,r2,8006064 <_malloc_r+0x71c>
 8005e60:	11401704 	addi	r5,r2,92
 8005e64:	10c016c4 	addi	r3,r2,91
 8005e68:	294b883a 	add	r5,r5,r5
 8005e6c:	294b883a 	add	r5,r5,r5
 8005e70:	294b883a 	add	r5,r5,r5
 8005e74:	994b883a 	add	r5,r19,r5
 8005e78:	28800017 	ldw	r2,0(r5)
 8005e7c:	018205f4 	movhi	r6,2071
 8005e80:	297ffe04 	addi	r5,r5,-8
 8005e84:	319e3904 	addi	r6,r6,30948
 8005e88:	28806526 	beq	r5,r2,8006020 <_malloc_r+0x6d8>
 8005e8c:	01bfff04 	movi	r6,-4
 8005e90:	10c00117 	ldw	r3,4(r2)
 8005e94:	1986703a 	and	r3,r3,r6
 8005e98:	38c0022e 	bgeu	r7,r3,8005ea4 <_malloc_r+0x55c>
 8005e9c:	10800217 	ldw	r2,8(r2)
 8005ea0:	28bffb1e 	bne	r5,r2,8005e90 <__alt_data_end+0xfc005e90>
 8005ea4:	11400317 	ldw	r5,12(r2)
 8005ea8:	98c00117 	ldw	r3,4(r19)
 8005eac:	81400315 	stw	r5,12(r16)
 8005eb0:	80800215 	stw	r2,8(r16)
 8005eb4:	2c000215 	stw	r16,8(r5)
 8005eb8:	14000315 	stw	r16,12(r2)
 8005ebc:	003ef806 	br	8005aa0 <__alt_data_end+0xfc005aa0>
 8005ec0:	88c00054 	ori	r3,r17,1
 8005ec4:	80c00115 	stw	r3,4(r16)
 8005ec8:	8463883a 	add	r17,r16,r17
 8005ecc:	34400515 	stw	r17,20(r6)
 8005ed0:	34400415 	stw	r17,16(r6)
 8005ed4:	10c00054 	ori	r3,r2,1
 8005ed8:	8a000315 	stw	r8,12(r17)
 8005edc:	8a000215 	stw	r8,8(r17)
 8005ee0:	88c00115 	stw	r3,4(r17)
 8005ee4:	88a3883a 	add	r17,r17,r2
 8005ee8:	88800015 	stw	r2,0(r17)
 8005eec:	9009883a 	mov	r4,r18
 8005ef0:	800db1c0 	call	800db1c <__malloc_unlock>
 8005ef4:	80800204 	addi	r2,r16,8
 8005ef8:	003f3c06 	br	8005bec <__alt_data_end+0xfc005bec>
 8005efc:	30c00117 	ldw	r3,4(r6)
 8005f00:	003ee706 	br	8005aa0 <__alt_data_end+0xfc005aa0>
 8005f04:	5ac00044 	addi	r11,r11,1
 8005f08:	588000cc 	andi	r2,r11,3
 8005f0c:	31800204 	addi	r6,r6,8
 8005f10:	103efd1e 	bne	r2,zero,8005b08 <__alt_data_end+0xfc005b08>
 8005f14:	00002406 	br	8005fa8 <_malloc_r+0x660>
 8005f18:	14000317 	ldw	r16,12(r2)
 8005f1c:	143f251e 	bne	r2,r16,8005bb4 <__alt_data_end+0xfc005bb4>
 8005f20:	21000084 	addi	r4,r4,2
 8005f24:	003ebc06 	br	8005a18 <__alt_data_end+0xfc005a18>
 8005f28:	8085883a 	add	r2,r16,r2
 8005f2c:	10c00117 	ldw	r3,4(r2)
 8005f30:	81000317 	ldw	r4,12(r16)
 8005f34:	81400217 	ldw	r5,8(r16)
 8005f38:	18c00054 	ori	r3,r3,1
 8005f3c:	10c00115 	stw	r3,4(r2)
 8005f40:	29000315 	stw	r4,12(r5)
 8005f44:	21400215 	stw	r5,8(r4)
 8005f48:	9009883a 	mov	r4,r18
 8005f4c:	800db1c0 	call	800db1c <__malloc_unlock>
 8005f50:	80800204 	addi	r2,r16,8
 8005f54:	003f2506 	br	8005bec <__alt_data_end+0xfc005bec>
 8005f58:	12001704 	addi	r8,r2,92
 8005f5c:	11c016c4 	addi	r7,r2,91
 8005f60:	4209883a 	add	r4,r8,r8
 8005f64:	003e9606 	br	80059c0 <__alt_data_end+0xfc0059c0>
 8005f68:	3804d1ba 	srli	r2,r7,6
 8005f6c:	11400e44 	addi	r5,r2,57
 8005f70:	10c00e04 	addi	r3,r2,56
 8005f74:	294b883a 	add	r5,r5,r5
 8005f78:	003fbc06 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8005f7c:	84ff5926 	beq	r16,r19,8005ce4 <__alt_data_end+0xfc005ce4>
 8005f80:	008205f4 	movhi	r2,2071
 8005f84:	109e3904 	addi	r2,r2,30948
 8005f88:	14000217 	ldw	r16,8(r2)
 8005f8c:	00bfff04 	movi	r2,-4
 8005f90:	80c00117 	ldw	r3,4(r16)
 8005f94:	1886703a 	and	r3,r3,r2
 8005f98:	003f9106 	br	8005de0 <__alt_data_end+0xfc005de0>
 8005f9c:	60800217 	ldw	r2,8(r12)
 8005fa0:	213fffc4 	addi	r4,r4,-1
 8005fa4:	1300651e 	bne	r2,r12,800613c <_malloc_r+0x7f4>
 8005fa8:	208000cc 	andi	r2,r4,3
 8005fac:	633ffe04 	addi	r12,r12,-8
 8005fb0:	103ffa1e 	bne	r2,zero,8005f9c <__alt_data_end+0xfc005f9c>
 8005fb4:	98800117 	ldw	r2,4(r19)
 8005fb8:	0146303a 	nor	r3,zero,r5
 8005fbc:	1884703a 	and	r2,r3,r2
 8005fc0:	98800115 	stw	r2,4(r19)
 8005fc4:	294b883a 	add	r5,r5,r5
 8005fc8:	117f2836 	bltu	r2,r5,8005c6c <__alt_data_end+0xfc005c6c>
 8005fcc:	283f2726 	beq	r5,zero,8005c6c <__alt_data_end+0xfc005c6c>
 8005fd0:	2886703a 	and	r3,r5,r2
 8005fd4:	5809883a 	mov	r4,r11
 8005fd8:	183ec31e 	bne	r3,zero,8005ae8 <__alt_data_end+0xfc005ae8>
 8005fdc:	294b883a 	add	r5,r5,r5
 8005fe0:	2886703a 	and	r3,r5,r2
 8005fe4:	21000104 	addi	r4,r4,4
 8005fe8:	183ffc26 	beq	r3,zero,8005fdc <__alt_data_end+0xfc005fdc>
 8005fec:	003ebe06 	br	8005ae8 <__alt_data_end+0xfc005ae8>
 8005ff0:	00c05504 	movi	r3,340
 8005ff4:	18801236 	bltu	r3,r2,8006040 <_malloc_r+0x6f8>
 8005ff8:	8804d3fa 	srli	r2,r17,15
 8005ffc:	12001e04 	addi	r8,r2,120
 8006000:	11c01dc4 	addi	r7,r2,119
 8006004:	4209883a 	add	r4,r8,r8
 8006008:	003e6d06 	br	80059c0 <__alt_data_end+0xfc0059c0>
 800600c:	00c40004 	movi	r3,4096
 8006010:	003f4606 	br	8005d2c <__alt_data_end+0xfc005d2c>
 8006014:	00800044 	movi	r2,1
 8006018:	a0800115 	stw	r2,4(r20)
 800601c:	003f7406 	br	8005df0 <__alt_data_end+0xfc005df0>
 8006020:	1805d0ba 	srai	r2,r3,2
 8006024:	01c00044 	movi	r7,1
 8006028:	30c00117 	ldw	r3,4(r6)
 800602c:	388e983a 	sll	r7,r7,r2
 8006030:	2805883a 	mov	r2,r5
 8006034:	38c6b03a 	or	r3,r7,r3
 8006038:	30c00115 	stw	r3,4(r6)
 800603c:	003f9b06 	br	8005eac <__alt_data_end+0xfc005eac>
 8006040:	00c15504 	movi	r3,1364
 8006044:	18801a36 	bltu	r3,r2,80060b0 <_malloc_r+0x768>
 8006048:	8804d4ba 	srli	r2,r17,18
 800604c:	12001f44 	addi	r8,r2,125
 8006050:	11c01f04 	addi	r7,r2,124
 8006054:	4209883a 	add	r4,r8,r8
 8006058:	003e5906 	br	80059c0 <__alt_data_end+0xfc0059c0>
 800605c:	ad400404 	addi	r21,r21,16
 8006060:	003f1706 	br	8005cc0 <__alt_data_end+0xfc005cc0>
 8006064:	00c01504 	movi	r3,84
 8006068:	18802336 	bltu	r3,r2,80060f8 <_malloc_r+0x7b0>
 800606c:	3804d33a 	srli	r2,r7,12
 8006070:	11401bc4 	addi	r5,r2,111
 8006074:	10c01b84 	addi	r3,r2,110
 8006078:	294b883a 	add	r5,r5,r5
 800607c:	003f7b06 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8006080:	9c000217 	ldw	r16,8(r19)
 8006084:	00bfff04 	movi	r2,-4
 8006088:	80c00117 	ldw	r3,4(r16)
 800608c:	1886703a 	and	r3,r3,r2
 8006090:	003f5306 	br	8005de0 <__alt_data_end+0xfc005de0>
 8006094:	3083ffcc 	andi	r2,r6,4095
 8006098:	103f181e 	bne	r2,zero,8005cfc <__alt_data_end+0xfc005cfc>
 800609c:	99000217 	ldw	r4,8(r19)
 80060a0:	b545883a 	add	r2,r22,r21
 80060a4:	10800054 	ori	r2,r2,1
 80060a8:	20800115 	stw	r2,4(r4)
 80060ac:	003f3e06 	br	8005da8 <__alt_data_end+0xfc005da8>
 80060b0:	01003f84 	movi	r4,254
 80060b4:	02001fc4 	movi	r8,127
 80060b8:	01c01f84 	movi	r7,126
 80060bc:	003e4006 	br	80059c0 <__alt_data_end+0xfc0059c0>
 80060c0:	00820634 	movhi	r2,2072
 80060c4:	10a3cb04 	addi	r2,r2,-28884
 80060c8:	15000015 	stw	r20,0(r2)
 80060cc:	003f1106 	br	8005d14 <__alt_data_end+0xfc005d14>
 80060d0:	00800044 	movi	r2,1
 80060d4:	002b883a 	mov	r21,zero
 80060d8:	003f1f06 	br	8005d58 <__alt_data_end+0xfc005d58>
 80060dc:	81400204 	addi	r5,r16,8
 80060e0:	9009883a 	mov	r4,r18
 80060e4:	8004d500 	call	8004d50 <_free_r>
 80060e8:	00820634 	movhi	r2,2072
 80060ec:	10aaac04 	addi	r2,r2,-21840
 80060f0:	10c00017 	ldw	r3,0(r2)
 80060f4:	003f2c06 	br	8005da8 <__alt_data_end+0xfc005da8>
 80060f8:	00c05504 	movi	r3,340
 80060fc:	18800536 	bltu	r3,r2,8006114 <_malloc_r+0x7cc>
 8006100:	3804d3fa 	srli	r2,r7,15
 8006104:	11401e04 	addi	r5,r2,120
 8006108:	10c01dc4 	addi	r3,r2,119
 800610c:	294b883a 	add	r5,r5,r5
 8006110:	003f5606 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8006114:	00c15504 	movi	r3,1364
 8006118:	18800536 	bltu	r3,r2,8006130 <_malloc_r+0x7e8>
 800611c:	3804d4ba 	srli	r2,r7,18
 8006120:	11401f44 	addi	r5,r2,125
 8006124:	10c01f04 	addi	r3,r2,124
 8006128:	294b883a 	add	r5,r5,r5
 800612c:	003f4f06 	br	8005e6c <__alt_data_end+0xfc005e6c>
 8006130:	01403f84 	movi	r5,254
 8006134:	00c01f84 	movi	r3,126
 8006138:	003f4c06 	br	8005e6c <__alt_data_end+0xfc005e6c>
 800613c:	98800117 	ldw	r2,4(r19)
 8006140:	003fa006 	br	8005fc4 <__alt_data_end+0xfc005fc4>
 8006144:	8808d0fa 	srli	r4,r17,3
 8006148:	20800044 	addi	r2,r4,1
 800614c:	1085883a 	add	r2,r2,r2
 8006150:	003e9006 	br	8005b94 <__alt_data_end+0xfc005b94>

08006154 <memchr>:
 8006154:	208000cc 	andi	r2,r4,3
 8006158:	280f883a 	mov	r7,r5
 800615c:	10003426 	beq	r2,zero,8006230 <memchr+0xdc>
 8006160:	30bfffc4 	addi	r2,r6,-1
 8006164:	30001a26 	beq	r6,zero,80061d0 <memchr+0x7c>
 8006168:	20c00003 	ldbu	r3,0(r4)
 800616c:	29803fcc 	andi	r6,r5,255
 8006170:	30c0051e 	bne	r6,r3,8006188 <memchr+0x34>
 8006174:	00001806 	br	80061d8 <memchr+0x84>
 8006178:	10001526 	beq	r2,zero,80061d0 <memchr+0x7c>
 800617c:	20c00003 	ldbu	r3,0(r4)
 8006180:	10bfffc4 	addi	r2,r2,-1
 8006184:	30c01426 	beq	r6,r3,80061d8 <memchr+0x84>
 8006188:	21000044 	addi	r4,r4,1
 800618c:	20c000cc 	andi	r3,r4,3
 8006190:	183ff91e 	bne	r3,zero,8006178 <__alt_data_end+0xfc006178>
 8006194:	020000c4 	movi	r8,3
 8006198:	40801136 	bltu	r8,r2,80061e0 <memchr+0x8c>
 800619c:	10000c26 	beq	r2,zero,80061d0 <memchr+0x7c>
 80061a0:	20c00003 	ldbu	r3,0(r4)
 80061a4:	29403fcc 	andi	r5,r5,255
 80061a8:	28c00b26 	beq	r5,r3,80061d8 <memchr+0x84>
 80061ac:	20c00044 	addi	r3,r4,1
 80061b0:	39803fcc 	andi	r6,r7,255
 80061b4:	2089883a 	add	r4,r4,r2
 80061b8:	00000306 	br	80061c8 <memchr+0x74>
 80061bc:	18c00044 	addi	r3,r3,1
 80061c0:	197fffc3 	ldbu	r5,-1(r3)
 80061c4:	31400526 	beq	r6,r5,80061dc <memchr+0x88>
 80061c8:	1805883a 	mov	r2,r3
 80061cc:	20fffb1e 	bne	r4,r3,80061bc <__alt_data_end+0xfc0061bc>
 80061d0:	0005883a 	mov	r2,zero
 80061d4:	f800283a 	ret
 80061d8:	2005883a 	mov	r2,r4
 80061dc:	f800283a 	ret
 80061e0:	28c03fcc 	andi	r3,r5,255
 80061e4:	1812923a 	slli	r9,r3,8
 80061e8:	02ffbff4 	movhi	r11,65279
 80061ec:	02a02074 	movhi	r10,32897
 80061f0:	48d2b03a 	or	r9,r9,r3
 80061f4:	4806943a 	slli	r3,r9,16
 80061f8:	5affbfc4 	addi	r11,r11,-257
 80061fc:	52a02004 	addi	r10,r10,-32640
 8006200:	48d2b03a 	or	r9,r9,r3
 8006204:	20c00017 	ldw	r3,0(r4)
 8006208:	48c6f03a 	xor	r3,r9,r3
 800620c:	1acd883a 	add	r6,r3,r11
 8006210:	00c6303a 	nor	r3,zero,r3
 8006214:	30c6703a 	and	r3,r6,r3
 8006218:	1a86703a 	and	r3,r3,r10
 800621c:	183fe01e 	bne	r3,zero,80061a0 <__alt_data_end+0xfc0061a0>
 8006220:	10bfff04 	addi	r2,r2,-4
 8006224:	21000104 	addi	r4,r4,4
 8006228:	40bff636 	bltu	r8,r2,8006204 <__alt_data_end+0xfc006204>
 800622c:	003fdb06 	br	800619c <__alt_data_end+0xfc00619c>
 8006230:	3005883a 	mov	r2,r6
 8006234:	003fd706 	br	8006194 <__alt_data_end+0xfc006194>

08006238 <memcpy>:
 8006238:	defffd04 	addi	sp,sp,-12
 800623c:	dfc00215 	stw	ra,8(sp)
 8006240:	dc400115 	stw	r17,4(sp)
 8006244:	dc000015 	stw	r16,0(sp)
 8006248:	00c003c4 	movi	r3,15
 800624c:	2005883a 	mov	r2,r4
 8006250:	1980452e 	bgeu	r3,r6,8006368 <memcpy+0x130>
 8006254:	2906b03a 	or	r3,r5,r4
 8006258:	18c000cc 	andi	r3,r3,3
 800625c:	1800441e 	bne	r3,zero,8006370 <memcpy+0x138>
 8006260:	347ffc04 	addi	r17,r6,-16
 8006264:	8822d13a 	srli	r17,r17,4
 8006268:	28c00104 	addi	r3,r5,4
 800626c:	23400104 	addi	r13,r4,4
 8006270:	8820913a 	slli	r16,r17,4
 8006274:	2b000204 	addi	r12,r5,8
 8006278:	22c00204 	addi	r11,r4,8
 800627c:	84000504 	addi	r16,r16,20
 8006280:	2a800304 	addi	r10,r5,12
 8006284:	22400304 	addi	r9,r4,12
 8006288:	2c21883a 	add	r16,r5,r16
 800628c:	2811883a 	mov	r8,r5
 8006290:	200f883a 	mov	r7,r4
 8006294:	41000017 	ldw	r4,0(r8)
 8006298:	1fc00017 	ldw	ra,0(r3)
 800629c:	63c00017 	ldw	r15,0(r12)
 80062a0:	39000015 	stw	r4,0(r7)
 80062a4:	53800017 	ldw	r14,0(r10)
 80062a8:	6fc00015 	stw	ra,0(r13)
 80062ac:	5bc00015 	stw	r15,0(r11)
 80062b0:	4b800015 	stw	r14,0(r9)
 80062b4:	18c00404 	addi	r3,r3,16
 80062b8:	39c00404 	addi	r7,r7,16
 80062bc:	42000404 	addi	r8,r8,16
 80062c0:	6b400404 	addi	r13,r13,16
 80062c4:	63000404 	addi	r12,r12,16
 80062c8:	5ac00404 	addi	r11,r11,16
 80062cc:	52800404 	addi	r10,r10,16
 80062d0:	4a400404 	addi	r9,r9,16
 80062d4:	1c3fef1e 	bne	r3,r16,8006294 <__alt_data_end+0xfc006294>
 80062d8:	89c00044 	addi	r7,r17,1
 80062dc:	380e913a 	slli	r7,r7,4
 80062e0:	310003cc 	andi	r4,r6,15
 80062e4:	02c000c4 	movi	r11,3
 80062e8:	11c7883a 	add	r3,r2,r7
 80062ec:	29cb883a 	add	r5,r5,r7
 80062f0:	5900212e 	bgeu	r11,r4,8006378 <memcpy+0x140>
 80062f4:	1813883a 	mov	r9,r3
 80062f8:	2811883a 	mov	r8,r5
 80062fc:	200f883a 	mov	r7,r4
 8006300:	42800017 	ldw	r10,0(r8)
 8006304:	4a400104 	addi	r9,r9,4
 8006308:	39ffff04 	addi	r7,r7,-4
 800630c:	4abfff15 	stw	r10,-4(r9)
 8006310:	42000104 	addi	r8,r8,4
 8006314:	59fffa36 	bltu	r11,r7,8006300 <__alt_data_end+0xfc006300>
 8006318:	213fff04 	addi	r4,r4,-4
 800631c:	2008d0ba 	srli	r4,r4,2
 8006320:	318000cc 	andi	r6,r6,3
 8006324:	21000044 	addi	r4,r4,1
 8006328:	2109883a 	add	r4,r4,r4
 800632c:	2109883a 	add	r4,r4,r4
 8006330:	1907883a 	add	r3,r3,r4
 8006334:	290b883a 	add	r5,r5,r4
 8006338:	30000626 	beq	r6,zero,8006354 <memcpy+0x11c>
 800633c:	198d883a 	add	r6,r3,r6
 8006340:	29c00003 	ldbu	r7,0(r5)
 8006344:	18c00044 	addi	r3,r3,1
 8006348:	29400044 	addi	r5,r5,1
 800634c:	19ffffc5 	stb	r7,-1(r3)
 8006350:	19bffb1e 	bne	r3,r6,8006340 <__alt_data_end+0xfc006340>
 8006354:	dfc00217 	ldw	ra,8(sp)
 8006358:	dc400117 	ldw	r17,4(sp)
 800635c:	dc000017 	ldw	r16,0(sp)
 8006360:	dec00304 	addi	sp,sp,12
 8006364:	f800283a 	ret
 8006368:	2007883a 	mov	r3,r4
 800636c:	003ff206 	br	8006338 <__alt_data_end+0xfc006338>
 8006370:	2007883a 	mov	r3,r4
 8006374:	003ff106 	br	800633c <__alt_data_end+0xfc00633c>
 8006378:	200d883a 	mov	r6,r4
 800637c:	003fee06 	br	8006338 <__alt_data_end+0xfc006338>

08006380 <memmove>:
 8006380:	2005883a 	mov	r2,r4
 8006384:	29000b2e 	bgeu	r5,r4,80063b4 <memmove+0x34>
 8006388:	298f883a 	add	r7,r5,r6
 800638c:	21c0092e 	bgeu	r4,r7,80063b4 <memmove+0x34>
 8006390:	2187883a 	add	r3,r4,r6
 8006394:	198bc83a 	sub	r5,r3,r6
 8006398:	30004826 	beq	r6,zero,80064bc <memmove+0x13c>
 800639c:	39ffffc4 	addi	r7,r7,-1
 80063a0:	39000003 	ldbu	r4,0(r7)
 80063a4:	18ffffc4 	addi	r3,r3,-1
 80063a8:	19000005 	stb	r4,0(r3)
 80063ac:	28fffb1e 	bne	r5,r3,800639c <__alt_data_end+0xfc00639c>
 80063b0:	f800283a 	ret
 80063b4:	00c003c4 	movi	r3,15
 80063b8:	1980412e 	bgeu	r3,r6,80064c0 <memmove+0x140>
 80063bc:	2886b03a 	or	r3,r5,r2
 80063c0:	18c000cc 	andi	r3,r3,3
 80063c4:	1800401e 	bne	r3,zero,80064c8 <memmove+0x148>
 80063c8:	33fffc04 	addi	r15,r6,-16
 80063cc:	781ed13a 	srli	r15,r15,4
 80063d0:	28c00104 	addi	r3,r5,4
 80063d4:	13400104 	addi	r13,r2,4
 80063d8:	781c913a 	slli	r14,r15,4
 80063dc:	2b000204 	addi	r12,r5,8
 80063e0:	12c00204 	addi	r11,r2,8
 80063e4:	73800504 	addi	r14,r14,20
 80063e8:	2a800304 	addi	r10,r5,12
 80063ec:	12400304 	addi	r9,r2,12
 80063f0:	2b9d883a 	add	r14,r5,r14
 80063f4:	2811883a 	mov	r8,r5
 80063f8:	100f883a 	mov	r7,r2
 80063fc:	41000017 	ldw	r4,0(r8)
 8006400:	39c00404 	addi	r7,r7,16
 8006404:	18c00404 	addi	r3,r3,16
 8006408:	393ffc15 	stw	r4,-16(r7)
 800640c:	193ffc17 	ldw	r4,-16(r3)
 8006410:	6b400404 	addi	r13,r13,16
 8006414:	5ac00404 	addi	r11,r11,16
 8006418:	693ffc15 	stw	r4,-16(r13)
 800641c:	61000017 	ldw	r4,0(r12)
 8006420:	4a400404 	addi	r9,r9,16
 8006424:	42000404 	addi	r8,r8,16
 8006428:	593ffc15 	stw	r4,-16(r11)
 800642c:	51000017 	ldw	r4,0(r10)
 8006430:	63000404 	addi	r12,r12,16
 8006434:	52800404 	addi	r10,r10,16
 8006438:	493ffc15 	stw	r4,-16(r9)
 800643c:	1bbfef1e 	bne	r3,r14,80063fc <__alt_data_end+0xfc0063fc>
 8006440:	79000044 	addi	r4,r15,1
 8006444:	2008913a 	slli	r4,r4,4
 8006448:	328003cc 	andi	r10,r6,15
 800644c:	02c000c4 	movi	r11,3
 8006450:	1107883a 	add	r3,r2,r4
 8006454:	290b883a 	add	r5,r5,r4
 8006458:	5a801e2e 	bgeu	r11,r10,80064d4 <memmove+0x154>
 800645c:	1813883a 	mov	r9,r3
 8006460:	2811883a 	mov	r8,r5
 8006464:	500f883a 	mov	r7,r10
 8006468:	41000017 	ldw	r4,0(r8)
 800646c:	4a400104 	addi	r9,r9,4
 8006470:	39ffff04 	addi	r7,r7,-4
 8006474:	493fff15 	stw	r4,-4(r9)
 8006478:	42000104 	addi	r8,r8,4
 800647c:	59fffa36 	bltu	r11,r7,8006468 <__alt_data_end+0xfc006468>
 8006480:	513fff04 	addi	r4,r10,-4
 8006484:	2008d0ba 	srli	r4,r4,2
 8006488:	318000cc 	andi	r6,r6,3
 800648c:	21000044 	addi	r4,r4,1
 8006490:	2109883a 	add	r4,r4,r4
 8006494:	2109883a 	add	r4,r4,r4
 8006498:	1907883a 	add	r3,r3,r4
 800649c:	290b883a 	add	r5,r5,r4
 80064a0:	30000b26 	beq	r6,zero,80064d0 <memmove+0x150>
 80064a4:	198d883a 	add	r6,r3,r6
 80064a8:	29c00003 	ldbu	r7,0(r5)
 80064ac:	18c00044 	addi	r3,r3,1
 80064b0:	29400044 	addi	r5,r5,1
 80064b4:	19ffffc5 	stb	r7,-1(r3)
 80064b8:	19bffb1e 	bne	r3,r6,80064a8 <__alt_data_end+0xfc0064a8>
 80064bc:	f800283a 	ret
 80064c0:	1007883a 	mov	r3,r2
 80064c4:	003ff606 	br	80064a0 <__alt_data_end+0xfc0064a0>
 80064c8:	1007883a 	mov	r3,r2
 80064cc:	003ff506 	br	80064a4 <__alt_data_end+0xfc0064a4>
 80064d0:	f800283a 	ret
 80064d4:	500d883a 	mov	r6,r10
 80064d8:	003ff106 	br	80064a0 <__alt_data_end+0xfc0064a0>

080064dc <memset>:
 80064dc:	20c000cc 	andi	r3,r4,3
 80064e0:	2005883a 	mov	r2,r4
 80064e4:	18004426 	beq	r3,zero,80065f8 <memset+0x11c>
 80064e8:	31ffffc4 	addi	r7,r6,-1
 80064ec:	30004026 	beq	r6,zero,80065f0 <memset+0x114>
 80064f0:	2813883a 	mov	r9,r5
 80064f4:	200d883a 	mov	r6,r4
 80064f8:	2007883a 	mov	r3,r4
 80064fc:	00000406 	br	8006510 <memset+0x34>
 8006500:	3a3fffc4 	addi	r8,r7,-1
 8006504:	31800044 	addi	r6,r6,1
 8006508:	38003926 	beq	r7,zero,80065f0 <memset+0x114>
 800650c:	400f883a 	mov	r7,r8
 8006510:	18c00044 	addi	r3,r3,1
 8006514:	32400005 	stb	r9,0(r6)
 8006518:	1a0000cc 	andi	r8,r3,3
 800651c:	403ff81e 	bne	r8,zero,8006500 <__alt_data_end+0xfc006500>
 8006520:	010000c4 	movi	r4,3
 8006524:	21c02d2e 	bgeu	r4,r7,80065dc <memset+0x100>
 8006528:	29003fcc 	andi	r4,r5,255
 800652c:	200c923a 	slli	r6,r4,8
 8006530:	3108b03a 	or	r4,r6,r4
 8006534:	200c943a 	slli	r6,r4,16
 8006538:	218cb03a 	or	r6,r4,r6
 800653c:	010003c4 	movi	r4,15
 8006540:	21c0182e 	bgeu	r4,r7,80065a4 <memset+0xc8>
 8006544:	3b3ffc04 	addi	r12,r7,-16
 8006548:	6018d13a 	srli	r12,r12,4
 800654c:	1a000104 	addi	r8,r3,4
 8006550:	1ac00204 	addi	r11,r3,8
 8006554:	6008913a 	slli	r4,r12,4
 8006558:	1a800304 	addi	r10,r3,12
 800655c:	1813883a 	mov	r9,r3
 8006560:	21000504 	addi	r4,r4,20
 8006564:	1909883a 	add	r4,r3,r4
 8006568:	49800015 	stw	r6,0(r9)
 800656c:	41800015 	stw	r6,0(r8)
 8006570:	59800015 	stw	r6,0(r11)
 8006574:	51800015 	stw	r6,0(r10)
 8006578:	42000404 	addi	r8,r8,16
 800657c:	4a400404 	addi	r9,r9,16
 8006580:	5ac00404 	addi	r11,r11,16
 8006584:	52800404 	addi	r10,r10,16
 8006588:	413ff71e 	bne	r8,r4,8006568 <__alt_data_end+0xfc006568>
 800658c:	63000044 	addi	r12,r12,1
 8006590:	6018913a 	slli	r12,r12,4
 8006594:	39c003cc 	andi	r7,r7,15
 8006598:	010000c4 	movi	r4,3
 800659c:	1b07883a 	add	r3,r3,r12
 80065a0:	21c00e2e 	bgeu	r4,r7,80065dc <memset+0x100>
 80065a4:	1813883a 	mov	r9,r3
 80065a8:	3811883a 	mov	r8,r7
 80065ac:	010000c4 	movi	r4,3
 80065b0:	49800015 	stw	r6,0(r9)
 80065b4:	423fff04 	addi	r8,r8,-4
 80065b8:	4a400104 	addi	r9,r9,4
 80065bc:	223ffc36 	bltu	r4,r8,80065b0 <__alt_data_end+0xfc0065b0>
 80065c0:	393fff04 	addi	r4,r7,-4
 80065c4:	2008d0ba 	srli	r4,r4,2
 80065c8:	39c000cc 	andi	r7,r7,3
 80065cc:	21000044 	addi	r4,r4,1
 80065d0:	2109883a 	add	r4,r4,r4
 80065d4:	2109883a 	add	r4,r4,r4
 80065d8:	1907883a 	add	r3,r3,r4
 80065dc:	38000526 	beq	r7,zero,80065f4 <memset+0x118>
 80065e0:	19cf883a 	add	r7,r3,r7
 80065e4:	19400005 	stb	r5,0(r3)
 80065e8:	18c00044 	addi	r3,r3,1
 80065ec:	38fffd1e 	bne	r7,r3,80065e4 <__alt_data_end+0xfc0065e4>
 80065f0:	f800283a 	ret
 80065f4:	f800283a 	ret
 80065f8:	2007883a 	mov	r3,r4
 80065fc:	300f883a 	mov	r7,r6
 8006600:	003fc706 	br	8006520 <__alt_data_end+0xfc006520>

08006604 <_Balloc>:
 8006604:	20801317 	ldw	r2,76(r4)
 8006608:	defffc04 	addi	sp,sp,-16
 800660c:	dc400115 	stw	r17,4(sp)
 8006610:	dc000015 	stw	r16,0(sp)
 8006614:	dfc00315 	stw	ra,12(sp)
 8006618:	dc800215 	stw	r18,8(sp)
 800661c:	2023883a 	mov	r17,r4
 8006620:	2821883a 	mov	r16,r5
 8006624:	10000f26 	beq	r2,zero,8006664 <_Balloc+0x60>
 8006628:	8407883a 	add	r3,r16,r16
 800662c:	18c7883a 	add	r3,r3,r3
 8006630:	10c7883a 	add	r3,r2,r3
 8006634:	18800017 	ldw	r2,0(r3)
 8006638:	10001126 	beq	r2,zero,8006680 <_Balloc+0x7c>
 800663c:	11000017 	ldw	r4,0(r2)
 8006640:	19000015 	stw	r4,0(r3)
 8006644:	10000415 	stw	zero,16(r2)
 8006648:	10000315 	stw	zero,12(r2)
 800664c:	dfc00317 	ldw	ra,12(sp)
 8006650:	dc800217 	ldw	r18,8(sp)
 8006654:	dc400117 	ldw	r17,4(sp)
 8006658:	dc000017 	ldw	r16,0(sp)
 800665c:	dec00404 	addi	sp,sp,16
 8006660:	f800283a 	ret
 8006664:	01800844 	movi	r6,33
 8006668:	01400104 	movi	r5,4
 800666c:	80096ac0 	call	80096ac <_calloc_r>
 8006670:	88801315 	stw	r2,76(r17)
 8006674:	103fec1e 	bne	r2,zero,8006628 <__alt_data_end+0xfc006628>
 8006678:	0005883a 	mov	r2,zero
 800667c:	003ff306 	br	800664c <__alt_data_end+0xfc00664c>
 8006680:	01400044 	movi	r5,1
 8006684:	2c24983a 	sll	r18,r5,r16
 8006688:	8809883a 	mov	r4,r17
 800668c:	91800144 	addi	r6,r18,5
 8006690:	318d883a 	add	r6,r6,r6
 8006694:	318d883a 	add	r6,r6,r6
 8006698:	80096ac0 	call	80096ac <_calloc_r>
 800669c:	103ff626 	beq	r2,zero,8006678 <__alt_data_end+0xfc006678>
 80066a0:	14000115 	stw	r16,4(r2)
 80066a4:	14800215 	stw	r18,8(r2)
 80066a8:	003fe606 	br	8006644 <__alt_data_end+0xfc006644>

080066ac <_Bfree>:
 80066ac:	28000826 	beq	r5,zero,80066d0 <_Bfree+0x24>
 80066b0:	28c00117 	ldw	r3,4(r5)
 80066b4:	20801317 	ldw	r2,76(r4)
 80066b8:	18c7883a 	add	r3,r3,r3
 80066bc:	18c7883a 	add	r3,r3,r3
 80066c0:	10c5883a 	add	r2,r2,r3
 80066c4:	10c00017 	ldw	r3,0(r2)
 80066c8:	28c00015 	stw	r3,0(r5)
 80066cc:	11400015 	stw	r5,0(r2)
 80066d0:	f800283a 	ret

080066d4 <__multadd>:
 80066d4:	defff704 	addi	sp,sp,-36
 80066d8:	dc800215 	stw	r18,8(sp)
 80066dc:	2c800417 	ldw	r18,16(r5)
 80066e0:	dd800615 	stw	r22,24(sp)
 80066e4:	dd400515 	stw	r21,20(sp)
 80066e8:	dd000415 	stw	r20,16(sp)
 80066ec:	dcc00315 	stw	r19,12(sp)
 80066f0:	dc400115 	stw	r17,4(sp)
 80066f4:	dc000015 	stw	r16,0(sp)
 80066f8:	dfc00815 	stw	ra,32(sp)
 80066fc:	ddc00715 	stw	r23,28(sp)
 8006700:	2827883a 	mov	r19,r5
 8006704:	2029883a 	mov	r20,r4
 8006708:	3023883a 	mov	r17,r6
 800670c:	3821883a 	mov	r16,r7
 8006710:	2d400504 	addi	r21,r5,20
 8006714:	002d883a 	mov	r22,zero
 8006718:	adc00017 	ldw	r23,0(r21)
 800671c:	880b883a 	mov	r5,r17
 8006720:	ad400104 	addi	r21,r21,4
 8006724:	b93fffcc 	andi	r4,r23,65535
 8006728:	800061c0 	call	800061c <__mulsi3>
 800672c:	b808d43a 	srli	r4,r23,16
 8006730:	880b883a 	mov	r5,r17
 8006734:	1421883a 	add	r16,r2,r16
 8006738:	800061c0 	call	800061c <__mulsi3>
 800673c:	800ed43a 	srli	r7,r16,16
 8006740:	80ffffcc 	andi	r3,r16,65535
 8006744:	b5800044 	addi	r22,r22,1
 8006748:	11c5883a 	add	r2,r2,r7
 800674c:	100e943a 	slli	r7,r2,16
 8006750:	1020d43a 	srli	r16,r2,16
 8006754:	38c7883a 	add	r3,r7,r3
 8006758:	a8ffff15 	stw	r3,-4(r21)
 800675c:	b4bfee16 	blt	r22,r18,8006718 <__alt_data_end+0xfc006718>
 8006760:	80000926 	beq	r16,zero,8006788 <__multadd+0xb4>
 8006764:	98800217 	ldw	r2,8(r19)
 8006768:	9080130e 	bge	r18,r2,80067b8 <__multadd+0xe4>
 800676c:	90800144 	addi	r2,r18,5
 8006770:	1085883a 	add	r2,r2,r2
 8006774:	1085883a 	add	r2,r2,r2
 8006778:	9885883a 	add	r2,r19,r2
 800677c:	14000015 	stw	r16,0(r2)
 8006780:	94800044 	addi	r18,r18,1
 8006784:	9c800415 	stw	r18,16(r19)
 8006788:	9805883a 	mov	r2,r19
 800678c:	dfc00817 	ldw	ra,32(sp)
 8006790:	ddc00717 	ldw	r23,28(sp)
 8006794:	dd800617 	ldw	r22,24(sp)
 8006798:	dd400517 	ldw	r21,20(sp)
 800679c:	dd000417 	ldw	r20,16(sp)
 80067a0:	dcc00317 	ldw	r19,12(sp)
 80067a4:	dc800217 	ldw	r18,8(sp)
 80067a8:	dc400117 	ldw	r17,4(sp)
 80067ac:	dc000017 	ldw	r16,0(sp)
 80067b0:	dec00904 	addi	sp,sp,36
 80067b4:	f800283a 	ret
 80067b8:	99400117 	ldw	r5,4(r19)
 80067bc:	a009883a 	mov	r4,r20
 80067c0:	29400044 	addi	r5,r5,1
 80067c4:	80066040 	call	8006604 <_Balloc>
 80067c8:	99800417 	ldw	r6,16(r19)
 80067cc:	99400304 	addi	r5,r19,12
 80067d0:	11000304 	addi	r4,r2,12
 80067d4:	31800084 	addi	r6,r6,2
 80067d8:	318d883a 	add	r6,r6,r6
 80067dc:	318d883a 	add	r6,r6,r6
 80067e0:	1023883a 	mov	r17,r2
 80067e4:	80062380 	call	8006238 <memcpy>
 80067e8:	98000a26 	beq	r19,zero,8006814 <__multadd+0x140>
 80067ec:	98c00117 	ldw	r3,4(r19)
 80067f0:	a0801317 	ldw	r2,76(r20)
 80067f4:	18c7883a 	add	r3,r3,r3
 80067f8:	18c7883a 	add	r3,r3,r3
 80067fc:	10c5883a 	add	r2,r2,r3
 8006800:	10c00017 	ldw	r3,0(r2)
 8006804:	98c00015 	stw	r3,0(r19)
 8006808:	14c00015 	stw	r19,0(r2)
 800680c:	8827883a 	mov	r19,r17
 8006810:	003fd606 	br	800676c <__alt_data_end+0xfc00676c>
 8006814:	8827883a 	mov	r19,r17
 8006818:	003fd406 	br	800676c <__alt_data_end+0xfc00676c>

0800681c <__s2b>:
 800681c:	defff904 	addi	sp,sp,-28
 8006820:	dc400115 	stw	r17,4(sp)
 8006824:	dc000015 	stw	r16,0(sp)
 8006828:	2023883a 	mov	r17,r4
 800682c:	2821883a 	mov	r16,r5
 8006830:	39000204 	addi	r4,r7,8
 8006834:	01400244 	movi	r5,9
 8006838:	dcc00315 	stw	r19,12(sp)
 800683c:	dc800215 	stw	r18,8(sp)
 8006840:	dfc00615 	stw	ra,24(sp)
 8006844:	dd400515 	stw	r21,20(sp)
 8006848:	dd000415 	stw	r20,16(sp)
 800684c:	3825883a 	mov	r18,r7
 8006850:	3027883a 	mov	r19,r6
 8006854:	800ab040 	call	800ab04 <__divsi3>
 8006858:	00c00044 	movi	r3,1
 800685c:	000b883a 	mov	r5,zero
 8006860:	1880030e 	bge	r3,r2,8006870 <__s2b+0x54>
 8006864:	18c7883a 	add	r3,r3,r3
 8006868:	29400044 	addi	r5,r5,1
 800686c:	18bffd16 	blt	r3,r2,8006864 <__alt_data_end+0xfc006864>
 8006870:	8809883a 	mov	r4,r17
 8006874:	80066040 	call	8006604 <_Balloc>
 8006878:	d8c00717 	ldw	r3,28(sp)
 800687c:	10c00515 	stw	r3,20(r2)
 8006880:	00c00044 	movi	r3,1
 8006884:	10c00415 	stw	r3,16(r2)
 8006888:	00c00244 	movi	r3,9
 800688c:	1cc0210e 	bge	r3,r19,8006914 <__s2b+0xf8>
 8006890:	80eb883a 	add	r21,r16,r3
 8006894:	a829883a 	mov	r20,r21
 8006898:	84e1883a 	add	r16,r16,r19
 800689c:	a1c00007 	ldb	r7,0(r20)
 80068a0:	01800284 	movi	r6,10
 80068a4:	a5000044 	addi	r20,r20,1
 80068a8:	100b883a 	mov	r5,r2
 80068ac:	39fff404 	addi	r7,r7,-48
 80068b0:	8809883a 	mov	r4,r17
 80068b4:	80066d40 	call	80066d4 <__multadd>
 80068b8:	a43ff81e 	bne	r20,r16,800689c <__alt_data_end+0xfc00689c>
 80068bc:	ace1883a 	add	r16,r21,r19
 80068c0:	843ffe04 	addi	r16,r16,-8
 80068c4:	9c800a0e 	bge	r19,r18,80068f0 <__s2b+0xd4>
 80068c8:	94e5c83a 	sub	r18,r18,r19
 80068cc:	84a5883a 	add	r18,r16,r18
 80068d0:	81c00007 	ldb	r7,0(r16)
 80068d4:	01800284 	movi	r6,10
 80068d8:	84000044 	addi	r16,r16,1
 80068dc:	100b883a 	mov	r5,r2
 80068e0:	39fff404 	addi	r7,r7,-48
 80068e4:	8809883a 	mov	r4,r17
 80068e8:	80066d40 	call	80066d4 <__multadd>
 80068ec:	84bff81e 	bne	r16,r18,80068d0 <__alt_data_end+0xfc0068d0>
 80068f0:	dfc00617 	ldw	ra,24(sp)
 80068f4:	dd400517 	ldw	r21,20(sp)
 80068f8:	dd000417 	ldw	r20,16(sp)
 80068fc:	dcc00317 	ldw	r19,12(sp)
 8006900:	dc800217 	ldw	r18,8(sp)
 8006904:	dc400117 	ldw	r17,4(sp)
 8006908:	dc000017 	ldw	r16,0(sp)
 800690c:	dec00704 	addi	sp,sp,28
 8006910:	f800283a 	ret
 8006914:	84000284 	addi	r16,r16,10
 8006918:	1827883a 	mov	r19,r3
 800691c:	003fe906 	br	80068c4 <__alt_data_end+0xfc0068c4>

08006920 <__hi0bits>:
 8006920:	20bfffec 	andhi	r2,r4,65535
 8006924:	1000141e 	bne	r2,zero,8006978 <__hi0bits+0x58>
 8006928:	2008943a 	slli	r4,r4,16
 800692c:	00800404 	movi	r2,16
 8006930:	20ffc02c 	andhi	r3,r4,65280
 8006934:	1800021e 	bne	r3,zero,8006940 <__hi0bits+0x20>
 8006938:	2008923a 	slli	r4,r4,8
 800693c:	10800204 	addi	r2,r2,8
 8006940:	20fc002c 	andhi	r3,r4,61440
 8006944:	1800021e 	bne	r3,zero,8006950 <__hi0bits+0x30>
 8006948:	2008913a 	slli	r4,r4,4
 800694c:	10800104 	addi	r2,r2,4
 8006950:	20f0002c 	andhi	r3,r4,49152
 8006954:	1800031e 	bne	r3,zero,8006964 <__hi0bits+0x44>
 8006958:	2109883a 	add	r4,r4,r4
 800695c:	10800084 	addi	r2,r2,2
 8006960:	2109883a 	add	r4,r4,r4
 8006964:	20000316 	blt	r4,zero,8006974 <__hi0bits+0x54>
 8006968:	2110002c 	andhi	r4,r4,16384
 800696c:	2000041e 	bne	r4,zero,8006980 <__hi0bits+0x60>
 8006970:	00800804 	movi	r2,32
 8006974:	f800283a 	ret
 8006978:	0005883a 	mov	r2,zero
 800697c:	003fec06 	br	8006930 <__alt_data_end+0xfc006930>
 8006980:	10800044 	addi	r2,r2,1
 8006984:	f800283a 	ret

08006988 <__lo0bits>:
 8006988:	20c00017 	ldw	r3,0(r4)
 800698c:	188001cc 	andi	r2,r3,7
 8006990:	10000826 	beq	r2,zero,80069b4 <__lo0bits+0x2c>
 8006994:	1880004c 	andi	r2,r3,1
 8006998:	1000211e 	bne	r2,zero,8006a20 <__lo0bits+0x98>
 800699c:	1880008c 	andi	r2,r3,2
 80069a0:	1000211e 	bne	r2,zero,8006a28 <__lo0bits+0xa0>
 80069a4:	1806d0ba 	srli	r3,r3,2
 80069a8:	00800084 	movi	r2,2
 80069ac:	20c00015 	stw	r3,0(r4)
 80069b0:	f800283a 	ret
 80069b4:	18bfffcc 	andi	r2,r3,65535
 80069b8:	10001326 	beq	r2,zero,8006a08 <__lo0bits+0x80>
 80069bc:	0005883a 	mov	r2,zero
 80069c0:	19403fcc 	andi	r5,r3,255
 80069c4:	2800021e 	bne	r5,zero,80069d0 <__lo0bits+0x48>
 80069c8:	1806d23a 	srli	r3,r3,8
 80069cc:	10800204 	addi	r2,r2,8
 80069d0:	194003cc 	andi	r5,r3,15
 80069d4:	2800021e 	bne	r5,zero,80069e0 <__lo0bits+0x58>
 80069d8:	1806d13a 	srli	r3,r3,4
 80069dc:	10800104 	addi	r2,r2,4
 80069e0:	194000cc 	andi	r5,r3,3
 80069e4:	2800021e 	bne	r5,zero,80069f0 <__lo0bits+0x68>
 80069e8:	1806d0ba 	srli	r3,r3,2
 80069ec:	10800084 	addi	r2,r2,2
 80069f0:	1940004c 	andi	r5,r3,1
 80069f4:	2800081e 	bne	r5,zero,8006a18 <__lo0bits+0x90>
 80069f8:	1806d07a 	srli	r3,r3,1
 80069fc:	1800051e 	bne	r3,zero,8006a14 <__lo0bits+0x8c>
 8006a00:	00800804 	movi	r2,32
 8006a04:	f800283a 	ret
 8006a08:	1806d43a 	srli	r3,r3,16
 8006a0c:	00800404 	movi	r2,16
 8006a10:	003feb06 	br	80069c0 <__alt_data_end+0xfc0069c0>
 8006a14:	10800044 	addi	r2,r2,1
 8006a18:	20c00015 	stw	r3,0(r4)
 8006a1c:	f800283a 	ret
 8006a20:	0005883a 	mov	r2,zero
 8006a24:	f800283a 	ret
 8006a28:	1806d07a 	srli	r3,r3,1
 8006a2c:	00800044 	movi	r2,1
 8006a30:	20c00015 	stw	r3,0(r4)
 8006a34:	f800283a 	ret

08006a38 <__i2b>:
 8006a38:	defffd04 	addi	sp,sp,-12
 8006a3c:	dc000015 	stw	r16,0(sp)
 8006a40:	04000044 	movi	r16,1
 8006a44:	dc400115 	stw	r17,4(sp)
 8006a48:	2823883a 	mov	r17,r5
 8006a4c:	800b883a 	mov	r5,r16
 8006a50:	dfc00215 	stw	ra,8(sp)
 8006a54:	80066040 	call	8006604 <_Balloc>
 8006a58:	14400515 	stw	r17,20(r2)
 8006a5c:	14000415 	stw	r16,16(r2)
 8006a60:	dfc00217 	ldw	ra,8(sp)
 8006a64:	dc400117 	ldw	r17,4(sp)
 8006a68:	dc000017 	ldw	r16,0(sp)
 8006a6c:	dec00304 	addi	sp,sp,12
 8006a70:	f800283a 	ret

08006a74 <__multiply>:
 8006a74:	deffef04 	addi	sp,sp,-68
 8006a78:	dc400815 	stw	r17,32(sp)
 8006a7c:	dc000715 	stw	r16,28(sp)
 8006a80:	34400417 	ldw	r17,16(r6)
 8006a84:	2c000417 	ldw	r16,16(r5)
 8006a88:	dd800d15 	stw	r22,52(sp)
 8006a8c:	dc800915 	stw	r18,36(sp)
 8006a90:	dfc01015 	stw	ra,64(sp)
 8006a94:	df000f15 	stw	fp,60(sp)
 8006a98:	ddc00e15 	stw	r23,56(sp)
 8006a9c:	dd400c15 	stw	r21,48(sp)
 8006aa0:	dd000b15 	stw	r20,44(sp)
 8006aa4:	dcc00a15 	stw	r19,40(sp)
 8006aa8:	2825883a 	mov	r18,r5
 8006aac:	302d883a 	mov	r22,r6
 8006ab0:	8440050e 	bge	r16,r17,8006ac8 <__multiply+0x54>
 8006ab4:	8007883a 	mov	r3,r16
 8006ab8:	3025883a 	mov	r18,r6
 8006abc:	8821883a 	mov	r16,r17
 8006ac0:	282d883a 	mov	r22,r5
 8006ac4:	1823883a 	mov	r17,r3
 8006ac8:	90800217 	ldw	r2,8(r18)
 8006acc:	8447883a 	add	r3,r16,r17
 8006ad0:	d8c00215 	stw	r3,8(sp)
 8006ad4:	91400117 	ldw	r5,4(r18)
 8006ad8:	10c0010e 	bge	r2,r3,8006ae0 <__multiply+0x6c>
 8006adc:	29400044 	addi	r5,r5,1
 8006ae0:	80066040 	call	8006604 <_Balloc>
 8006ae4:	d8c00217 	ldw	r3,8(sp)
 8006ae8:	d8800615 	stw	r2,24(sp)
 8006aec:	18eb883a 	add	r21,r3,r3
 8006af0:	ad6b883a 	add	r21,r21,r21
 8006af4:	10c00504 	addi	r3,r2,20
 8006af8:	1d6b883a 	add	r21,r3,r21
 8006afc:	d8c00115 	stw	r3,4(sp)
 8006b00:	dd400315 	stw	r21,12(sp)
 8006b04:	1805883a 	mov	r2,r3
 8006b08:	1d40042e 	bgeu	r3,r21,8006b1c <__multiply+0xa8>
 8006b0c:	d8c00317 	ldw	r3,12(sp)
 8006b10:	10000015 	stw	zero,0(r2)
 8006b14:	10800104 	addi	r2,r2,4
 8006b18:	10fffc36 	bltu	r2,r3,8006b0c <__alt_data_end+0xfc006b0c>
 8006b1c:	8c63883a 	add	r17,r17,r17
 8006b20:	b5800504 	addi	r22,r22,20
 8006b24:	8c63883a 	add	r17,r17,r17
 8006b28:	94800504 	addi	r18,r18,20
 8006b2c:	8421883a 	add	r16,r16,r16
 8006b30:	b463883a 	add	r17,r22,r17
 8006b34:	8421883a 	add	r16,r16,r16
 8006b38:	dd800015 	stw	r22,0(sp)
 8006b3c:	dc800415 	stw	r18,16(sp)
 8006b40:	dc400515 	stw	r17,20(sp)
 8006b44:	9429883a 	add	r20,r18,r16
 8006b48:	b4404f2e 	bgeu	r22,r17,8006c88 <__multiply+0x214>
 8006b4c:	d8c00017 	ldw	r3,0(sp)
 8006b50:	1c800017 	ldw	r18,0(r3)
 8006b54:	947fffcc 	andi	r17,r18,65535
 8006b58:	88001e26 	beq	r17,zero,8006bd4 <__multiply+0x160>
 8006b5c:	dd800117 	ldw	r22,4(sp)
 8006b60:	dd400417 	ldw	r21,16(sp)
 8006b64:	0027883a 	mov	r19,zero
 8006b68:	ac800017 	ldw	r18,0(r21)
 8006b6c:	b4000017 	ldw	r16,0(r22)
 8006b70:	880b883a 	mov	r5,r17
 8006b74:	913fffcc 	andi	r4,r18,65535
 8006b78:	800061c0 	call	800061c <__mulsi3>
 8006b7c:	9008d43a 	srli	r4,r18,16
 8006b80:	84bfffcc 	andi	r18,r16,65535
 8006b84:	1485883a 	add	r2,r2,r18
 8006b88:	14e5883a 	add	r18,r2,r19
 8006b8c:	8020d43a 	srli	r16,r16,16
 8006b90:	9026d43a 	srli	r19,r18,16
 8006b94:	880b883a 	mov	r5,r17
 8006b98:	800061c0 	call	800061c <__mulsi3>
 8006b9c:	1405883a 	add	r2,r2,r16
 8006ba0:	14e1883a 	add	r16,r2,r19
 8006ba4:	90ffffcc 	andi	r3,r18,65535
 8006ba8:	8024943a 	slli	r18,r16,16
 8006bac:	ad400104 	addi	r21,r21,4
 8006bb0:	b005883a 	mov	r2,r22
 8006bb4:	90c6b03a 	or	r3,r18,r3
 8006bb8:	b0c00015 	stw	r3,0(r22)
 8006bbc:	8026d43a 	srli	r19,r16,16
 8006bc0:	b5800104 	addi	r22,r22,4
 8006bc4:	ad3fe836 	bltu	r21,r20,8006b68 <__alt_data_end+0xfc006b68>
 8006bc8:	d8c00017 	ldw	r3,0(sp)
 8006bcc:	14c00115 	stw	r19,4(r2)
 8006bd0:	1c800017 	ldw	r18,0(r3)
 8006bd4:	9024d43a 	srli	r18,r18,16
 8006bd8:	90002226 	beq	r18,zero,8006c64 <__multiply+0x1f0>
 8006bdc:	d8c00117 	ldw	r3,4(sp)
 8006be0:	dd800417 	ldw	r22,16(sp)
 8006be4:	002f883a 	mov	r23,zero
 8006be8:	1f000017 	ldw	fp,0(r3)
 8006bec:	1823883a 	mov	r17,r3
 8006bf0:	182b883a 	mov	r21,r3
 8006bf4:	e021883a 	mov	r16,fp
 8006bf8:	00000106 	br	8006c00 <__multiply+0x18c>
 8006bfc:	982b883a 	mov	r21,r19
 8006c00:	b100000b 	ldhu	r4,0(r22)
 8006c04:	8020d43a 	srli	r16,r16,16
 8006c08:	900b883a 	mov	r5,r18
 8006c0c:	800061c0 	call	800061c <__mulsi3>
 8006c10:	1405883a 	add	r2,r2,r16
 8006c14:	15ef883a 	add	r23,r2,r23
 8006c18:	b804943a 	slli	r2,r23,16
 8006c1c:	e0ffffcc 	andi	r3,fp,65535
 8006c20:	8c400104 	addi	r17,r17,4
 8006c24:	10c6b03a 	or	r3,r2,r3
 8006c28:	88ffff15 	stw	r3,-4(r17)
 8006c2c:	b5800104 	addi	r22,r22,4
 8006c30:	b13fff17 	ldw	r4,-4(r22)
 8006c34:	acc00104 	addi	r19,r21,4
 8006c38:	900b883a 	mov	r5,r18
 8006c3c:	2008d43a 	srli	r4,r4,16
 8006c40:	9c000017 	ldw	r16,0(r19)
 8006c44:	800061c0 	call	800061c <__mulsi3>
 8006c48:	b806d43a 	srli	r3,r23,16
 8006c4c:	813fffcc 	andi	r4,r16,65535
 8006c50:	1105883a 	add	r2,r2,r4
 8006c54:	10f9883a 	add	fp,r2,r3
 8006c58:	e02ed43a 	srli	r23,fp,16
 8006c5c:	b53fe736 	bltu	r22,r20,8006bfc <__alt_data_end+0xfc006bfc>
 8006c60:	af000115 	stw	fp,4(r21)
 8006c64:	d8c00017 	ldw	r3,0(sp)
 8006c68:	d9000517 	ldw	r4,20(sp)
 8006c6c:	18c00104 	addi	r3,r3,4
 8006c70:	d8c00015 	stw	r3,0(sp)
 8006c74:	d8c00117 	ldw	r3,4(sp)
 8006c78:	18c00104 	addi	r3,r3,4
 8006c7c:	d8c00115 	stw	r3,4(sp)
 8006c80:	d8c00017 	ldw	r3,0(sp)
 8006c84:	193fb136 	bltu	r3,r4,8006b4c <__alt_data_end+0xfc006b4c>
 8006c88:	d8c00217 	ldw	r3,8(sp)
 8006c8c:	00c00c0e 	bge	zero,r3,8006cc0 <__multiply+0x24c>
 8006c90:	d8c00317 	ldw	r3,12(sp)
 8006c94:	18bfff17 	ldw	r2,-4(r3)
 8006c98:	1d7fff04 	addi	r21,r3,-4
 8006c9c:	10000326 	beq	r2,zero,8006cac <__multiply+0x238>
 8006ca0:	00000706 	br	8006cc0 <__multiply+0x24c>
 8006ca4:	a8800017 	ldw	r2,0(r21)
 8006ca8:	1000051e 	bne	r2,zero,8006cc0 <__multiply+0x24c>
 8006cac:	d8c00217 	ldw	r3,8(sp)
 8006cb0:	ad7fff04 	addi	r21,r21,-4
 8006cb4:	18ffffc4 	addi	r3,r3,-1
 8006cb8:	d8c00215 	stw	r3,8(sp)
 8006cbc:	183ff91e 	bne	r3,zero,8006ca4 <__alt_data_end+0xfc006ca4>
 8006cc0:	d8c00617 	ldw	r3,24(sp)
 8006cc4:	d9000217 	ldw	r4,8(sp)
 8006cc8:	1805883a 	mov	r2,r3
 8006ccc:	19000415 	stw	r4,16(r3)
 8006cd0:	dfc01017 	ldw	ra,64(sp)
 8006cd4:	df000f17 	ldw	fp,60(sp)
 8006cd8:	ddc00e17 	ldw	r23,56(sp)
 8006cdc:	dd800d17 	ldw	r22,52(sp)
 8006ce0:	dd400c17 	ldw	r21,48(sp)
 8006ce4:	dd000b17 	ldw	r20,44(sp)
 8006ce8:	dcc00a17 	ldw	r19,40(sp)
 8006cec:	dc800917 	ldw	r18,36(sp)
 8006cf0:	dc400817 	ldw	r17,32(sp)
 8006cf4:	dc000717 	ldw	r16,28(sp)
 8006cf8:	dec01104 	addi	sp,sp,68
 8006cfc:	f800283a 	ret

08006d00 <__pow5mult>:
 8006d00:	defffa04 	addi	sp,sp,-24
 8006d04:	dcc00315 	stw	r19,12(sp)
 8006d08:	dc000015 	stw	r16,0(sp)
 8006d0c:	dfc00515 	stw	ra,20(sp)
 8006d10:	dd000415 	stw	r20,16(sp)
 8006d14:	dc800215 	stw	r18,8(sp)
 8006d18:	dc400115 	stw	r17,4(sp)
 8006d1c:	308000cc 	andi	r2,r6,3
 8006d20:	3021883a 	mov	r16,r6
 8006d24:	2027883a 	mov	r19,r4
 8006d28:	10002f1e 	bne	r2,zero,8006de8 <__pow5mult+0xe8>
 8006d2c:	2825883a 	mov	r18,r5
 8006d30:	8021d0ba 	srai	r16,r16,2
 8006d34:	80001a26 	beq	r16,zero,8006da0 <__pow5mult+0xa0>
 8006d38:	9c401217 	ldw	r17,72(r19)
 8006d3c:	8800061e 	bne	r17,zero,8006d58 <__pow5mult+0x58>
 8006d40:	00003406 	br	8006e14 <__pow5mult+0x114>
 8006d44:	8021d07a 	srai	r16,r16,1
 8006d48:	80001526 	beq	r16,zero,8006da0 <__pow5mult+0xa0>
 8006d4c:	88800017 	ldw	r2,0(r17)
 8006d50:	10001c26 	beq	r2,zero,8006dc4 <__pow5mult+0xc4>
 8006d54:	1023883a 	mov	r17,r2
 8006d58:	8080004c 	andi	r2,r16,1
 8006d5c:	103ff926 	beq	r2,zero,8006d44 <__alt_data_end+0xfc006d44>
 8006d60:	880d883a 	mov	r6,r17
 8006d64:	900b883a 	mov	r5,r18
 8006d68:	9809883a 	mov	r4,r19
 8006d6c:	8006a740 	call	8006a74 <__multiply>
 8006d70:	90001b26 	beq	r18,zero,8006de0 <__pow5mult+0xe0>
 8006d74:	91000117 	ldw	r4,4(r18)
 8006d78:	98c01317 	ldw	r3,76(r19)
 8006d7c:	8021d07a 	srai	r16,r16,1
 8006d80:	2109883a 	add	r4,r4,r4
 8006d84:	2109883a 	add	r4,r4,r4
 8006d88:	1907883a 	add	r3,r3,r4
 8006d8c:	19000017 	ldw	r4,0(r3)
 8006d90:	91000015 	stw	r4,0(r18)
 8006d94:	1c800015 	stw	r18,0(r3)
 8006d98:	1025883a 	mov	r18,r2
 8006d9c:	803feb1e 	bne	r16,zero,8006d4c <__alt_data_end+0xfc006d4c>
 8006da0:	9005883a 	mov	r2,r18
 8006da4:	dfc00517 	ldw	ra,20(sp)
 8006da8:	dd000417 	ldw	r20,16(sp)
 8006dac:	dcc00317 	ldw	r19,12(sp)
 8006db0:	dc800217 	ldw	r18,8(sp)
 8006db4:	dc400117 	ldw	r17,4(sp)
 8006db8:	dc000017 	ldw	r16,0(sp)
 8006dbc:	dec00604 	addi	sp,sp,24
 8006dc0:	f800283a 	ret
 8006dc4:	880d883a 	mov	r6,r17
 8006dc8:	880b883a 	mov	r5,r17
 8006dcc:	9809883a 	mov	r4,r19
 8006dd0:	8006a740 	call	8006a74 <__multiply>
 8006dd4:	88800015 	stw	r2,0(r17)
 8006dd8:	10000015 	stw	zero,0(r2)
 8006ddc:	003fdd06 	br	8006d54 <__alt_data_end+0xfc006d54>
 8006de0:	1025883a 	mov	r18,r2
 8006de4:	003fd706 	br	8006d44 <__alt_data_end+0xfc006d44>
 8006de8:	10bfffc4 	addi	r2,r2,-1
 8006dec:	1085883a 	add	r2,r2,r2
 8006df0:	00c205f4 	movhi	r3,2071
 8006df4:	18dc7404 	addi	r3,r3,29136
 8006df8:	1085883a 	add	r2,r2,r2
 8006dfc:	1885883a 	add	r2,r3,r2
 8006e00:	11800017 	ldw	r6,0(r2)
 8006e04:	000f883a 	mov	r7,zero
 8006e08:	80066d40 	call	80066d4 <__multadd>
 8006e0c:	1025883a 	mov	r18,r2
 8006e10:	003fc706 	br	8006d30 <__alt_data_end+0xfc006d30>
 8006e14:	05000044 	movi	r20,1
 8006e18:	a00b883a 	mov	r5,r20
 8006e1c:	9809883a 	mov	r4,r19
 8006e20:	80066040 	call	8006604 <_Balloc>
 8006e24:	1023883a 	mov	r17,r2
 8006e28:	00809c44 	movi	r2,625
 8006e2c:	88800515 	stw	r2,20(r17)
 8006e30:	8d000415 	stw	r20,16(r17)
 8006e34:	9c401215 	stw	r17,72(r19)
 8006e38:	88000015 	stw	zero,0(r17)
 8006e3c:	003fc606 	br	8006d58 <__alt_data_end+0xfc006d58>

08006e40 <__lshift>:
 8006e40:	defff904 	addi	sp,sp,-28
 8006e44:	dd400515 	stw	r21,20(sp)
 8006e48:	dcc00315 	stw	r19,12(sp)
 8006e4c:	302bd17a 	srai	r21,r6,5
 8006e50:	2cc00417 	ldw	r19,16(r5)
 8006e54:	28800217 	ldw	r2,8(r5)
 8006e58:	dd000415 	stw	r20,16(sp)
 8006e5c:	ace7883a 	add	r19,r21,r19
 8006e60:	dc800215 	stw	r18,8(sp)
 8006e64:	dc400115 	stw	r17,4(sp)
 8006e68:	dc000015 	stw	r16,0(sp)
 8006e6c:	dfc00615 	stw	ra,24(sp)
 8006e70:	9c000044 	addi	r16,r19,1
 8006e74:	2823883a 	mov	r17,r5
 8006e78:	3029883a 	mov	r20,r6
 8006e7c:	2025883a 	mov	r18,r4
 8006e80:	29400117 	ldw	r5,4(r5)
 8006e84:	1400030e 	bge	r2,r16,8006e94 <__lshift+0x54>
 8006e88:	1085883a 	add	r2,r2,r2
 8006e8c:	29400044 	addi	r5,r5,1
 8006e90:	143ffd16 	blt	r2,r16,8006e88 <__alt_data_end+0xfc006e88>
 8006e94:	9009883a 	mov	r4,r18
 8006e98:	80066040 	call	8006604 <_Balloc>
 8006e9c:	10c00504 	addi	r3,r2,20
 8006ea0:	0540070e 	bge	zero,r21,8006ec0 <__lshift+0x80>
 8006ea4:	ad6b883a 	add	r21,r21,r21
 8006ea8:	ad6b883a 	add	r21,r21,r21
 8006eac:	1809883a 	mov	r4,r3
 8006eb0:	1d47883a 	add	r3,r3,r21
 8006eb4:	20000015 	stw	zero,0(r4)
 8006eb8:	21000104 	addi	r4,r4,4
 8006ebc:	193ffd1e 	bne	r3,r4,8006eb4 <__alt_data_end+0xfc006eb4>
 8006ec0:	8a000417 	ldw	r8,16(r17)
 8006ec4:	89000504 	addi	r4,r17,20
 8006ec8:	a18007cc 	andi	r6,r20,31
 8006ecc:	4211883a 	add	r8,r8,r8
 8006ed0:	4211883a 	add	r8,r8,r8
 8006ed4:	2211883a 	add	r8,r4,r8
 8006ed8:	30002326 	beq	r6,zero,8006f68 <__lshift+0x128>
 8006edc:	02400804 	movi	r9,32
 8006ee0:	4993c83a 	sub	r9,r9,r6
 8006ee4:	000b883a 	mov	r5,zero
 8006ee8:	21c00017 	ldw	r7,0(r4)
 8006eec:	1815883a 	mov	r10,r3
 8006ef0:	18c00104 	addi	r3,r3,4
 8006ef4:	398e983a 	sll	r7,r7,r6
 8006ef8:	21000104 	addi	r4,r4,4
 8006efc:	394ab03a 	or	r5,r7,r5
 8006f00:	197fff15 	stw	r5,-4(r3)
 8006f04:	217fff17 	ldw	r5,-4(r4)
 8006f08:	2a4ad83a 	srl	r5,r5,r9
 8006f0c:	223ff636 	bltu	r4,r8,8006ee8 <__alt_data_end+0xfc006ee8>
 8006f10:	51400115 	stw	r5,4(r10)
 8006f14:	28001a1e 	bne	r5,zero,8006f80 <__lshift+0x140>
 8006f18:	843fffc4 	addi	r16,r16,-1
 8006f1c:	14000415 	stw	r16,16(r2)
 8006f20:	88000826 	beq	r17,zero,8006f44 <__lshift+0x104>
 8006f24:	89000117 	ldw	r4,4(r17)
 8006f28:	90c01317 	ldw	r3,76(r18)
 8006f2c:	2109883a 	add	r4,r4,r4
 8006f30:	2109883a 	add	r4,r4,r4
 8006f34:	1907883a 	add	r3,r3,r4
 8006f38:	19000017 	ldw	r4,0(r3)
 8006f3c:	89000015 	stw	r4,0(r17)
 8006f40:	1c400015 	stw	r17,0(r3)
 8006f44:	dfc00617 	ldw	ra,24(sp)
 8006f48:	dd400517 	ldw	r21,20(sp)
 8006f4c:	dd000417 	ldw	r20,16(sp)
 8006f50:	dcc00317 	ldw	r19,12(sp)
 8006f54:	dc800217 	ldw	r18,8(sp)
 8006f58:	dc400117 	ldw	r17,4(sp)
 8006f5c:	dc000017 	ldw	r16,0(sp)
 8006f60:	dec00704 	addi	sp,sp,28
 8006f64:	f800283a 	ret
 8006f68:	21400017 	ldw	r5,0(r4)
 8006f6c:	18c00104 	addi	r3,r3,4
 8006f70:	21000104 	addi	r4,r4,4
 8006f74:	197fff15 	stw	r5,-4(r3)
 8006f78:	223ffb36 	bltu	r4,r8,8006f68 <__alt_data_end+0xfc006f68>
 8006f7c:	003fe606 	br	8006f18 <__alt_data_end+0xfc006f18>
 8006f80:	9c000084 	addi	r16,r19,2
 8006f84:	003fe406 	br	8006f18 <__alt_data_end+0xfc006f18>

08006f88 <__mcmp>:
 8006f88:	20800417 	ldw	r2,16(r4)
 8006f8c:	28c00417 	ldw	r3,16(r5)
 8006f90:	10c5c83a 	sub	r2,r2,r3
 8006f94:	1000111e 	bne	r2,zero,8006fdc <__mcmp+0x54>
 8006f98:	18c7883a 	add	r3,r3,r3
 8006f9c:	18c7883a 	add	r3,r3,r3
 8006fa0:	21000504 	addi	r4,r4,20
 8006fa4:	29400504 	addi	r5,r5,20
 8006fa8:	20c5883a 	add	r2,r4,r3
 8006fac:	28cb883a 	add	r5,r5,r3
 8006fb0:	00000106 	br	8006fb8 <__mcmp+0x30>
 8006fb4:	20800a2e 	bgeu	r4,r2,8006fe0 <__mcmp+0x58>
 8006fb8:	10bfff04 	addi	r2,r2,-4
 8006fbc:	297fff04 	addi	r5,r5,-4
 8006fc0:	11800017 	ldw	r6,0(r2)
 8006fc4:	28c00017 	ldw	r3,0(r5)
 8006fc8:	30fffa26 	beq	r6,r3,8006fb4 <__alt_data_end+0xfc006fb4>
 8006fcc:	30c00236 	bltu	r6,r3,8006fd8 <__mcmp+0x50>
 8006fd0:	00800044 	movi	r2,1
 8006fd4:	f800283a 	ret
 8006fd8:	00bfffc4 	movi	r2,-1
 8006fdc:	f800283a 	ret
 8006fe0:	0005883a 	mov	r2,zero
 8006fe4:	f800283a 	ret

08006fe8 <__mdiff>:
 8006fe8:	28c00417 	ldw	r3,16(r5)
 8006fec:	30800417 	ldw	r2,16(r6)
 8006ff0:	defffa04 	addi	sp,sp,-24
 8006ff4:	dcc00315 	stw	r19,12(sp)
 8006ff8:	dc800215 	stw	r18,8(sp)
 8006ffc:	dfc00515 	stw	ra,20(sp)
 8007000:	dd000415 	stw	r20,16(sp)
 8007004:	dc400115 	stw	r17,4(sp)
 8007008:	dc000015 	stw	r16,0(sp)
 800700c:	1887c83a 	sub	r3,r3,r2
 8007010:	2825883a 	mov	r18,r5
 8007014:	3027883a 	mov	r19,r6
 8007018:	1800141e 	bne	r3,zero,800706c <__mdiff+0x84>
 800701c:	1085883a 	add	r2,r2,r2
 8007020:	1085883a 	add	r2,r2,r2
 8007024:	2a000504 	addi	r8,r5,20
 8007028:	34000504 	addi	r16,r6,20
 800702c:	4087883a 	add	r3,r8,r2
 8007030:	8085883a 	add	r2,r16,r2
 8007034:	00000106 	br	800703c <__mdiff+0x54>
 8007038:	40c0592e 	bgeu	r8,r3,80071a0 <__mdiff+0x1b8>
 800703c:	18ffff04 	addi	r3,r3,-4
 8007040:	10bfff04 	addi	r2,r2,-4
 8007044:	19c00017 	ldw	r7,0(r3)
 8007048:	11400017 	ldw	r5,0(r2)
 800704c:	397ffa26 	beq	r7,r5,8007038 <__alt_data_end+0xfc007038>
 8007050:	3940592e 	bgeu	r7,r5,80071b8 <__mdiff+0x1d0>
 8007054:	9005883a 	mov	r2,r18
 8007058:	4023883a 	mov	r17,r8
 800705c:	9825883a 	mov	r18,r19
 8007060:	05000044 	movi	r20,1
 8007064:	1027883a 	mov	r19,r2
 8007068:	00000406 	br	800707c <__mdiff+0x94>
 800706c:	18005616 	blt	r3,zero,80071c8 <__mdiff+0x1e0>
 8007070:	34400504 	addi	r17,r6,20
 8007074:	2c000504 	addi	r16,r5,20
 8007078:	0029883a 	mov	r20,zero
 800707c:	91400117 	ldw	r5,4(r18)
 8007080:	80066040 	call	8006604 <_Balloc>
 8007084:	92400417 	ldw	r9,16(r18)
 8007088:	9b000417 	ldw	r12,16(r19)
 800708c:	12c00504 	addi	r11,r2,20
 8007090:	4a51883a 	add	r8,r9,r9
 8007094:	6319883a 	add	r12,r12,r12
 8007098:	4211883a 	add	r8,r8,r8
 800709c:	6319883a 	add	r12,r12,r12
 80070a0:	15000315 	stw	r20,12(r2)
 80070a4:	8211883a 	add	r8,r16,r8
 80070a8:	8b19883a 	add	r12,r17,r12
 80070ac:	0007883a 	mov	r3,zero
 80070b0:	81400017 	ldw	r5,0(r16)
 80070b4:	89c00017 	ldw	r7,0(r17)
 80070b8:	59800104 	addi	r6,r11,4
 80070bc:	293fffcc 	andi	r4,r5,65535
 80070c0:	20c7883a 	add	r3,r4,r3
 80070c4:	393fffcc 	andi	r4,r7,65535
 80070c8:	1909c83a 	sub	r4,r3,r4
 80070cc:	280ad43a 	srli	r5,r5,16
 80070d0:	380ed43a 	srli	r7,r7,16
 80070d4:	2007d43a 	srai	r3,r4,16
 80070d8:	213fffcc 	andi	r4,r4,65535
 80070dc:	29cbc83a 	sub	r5,r5,r7
 80070e0:	28c7883a 	add	r3,r5,r3
 80070e4:	180a943a 	slli	r5,r3,16
 80070e8:	8c400104 	addi	r17,r17,4
 80070ec:	84000104 	addi	r16,r16,4
 80070f0:	2908b03a 	or	r4,r5,r4
 80070f4:	59000015 	stw	r4,0(r11)
 80070f8:	1807d43a 	srai	r3,r3,16
 80070fc:	3015883a 	mov	r10,r6
 8007100:	3017883a 	mov	r11,r6
 8007104:	8b3fea36 	bltu	r17,r12,80070b0 <__alt_data_end+0xfc0070b0>
 8007108:	8200162e 	bgeu	r16,r8,8007164 <__mdiff+0x17c>
 800710c:	8017883a 	mov	r11,r16
 8007110:	59400017 	ldw	r5,0(r11)
 8007114:	31800104 	addi	r6,r6,4
 8007118:	5ac00104 	addi	r11,r11,4
 800711c:	293fffcc 	andi	r4,r5,65535
 8007120:	20c7883a 	add	r3,r4,r3
 8007124:	280ed43a 	srli	r7,r5,16
 8007128:	180bd43a 	srai	r5,r3,16
 800712c:	193fffcc 	andi	r4,r3,65535
 8007130:	3947883a 	add	r3,r7,r5
 8007134:	180a943a 	slli	r5,r3,16
 8007138:	1807d43a 	srai	r3,r3,16
 800713c:	2908b03a 	or	r4,r5,r4
 8007140:	313fff15 	stw	r4,-4(r6)
 8007144:	5a3ff236 	bltu	r11,r8,8007110 <__alt_data_end+0xfc007110>
 8007148:	0406303a 	nor	r3,zero,r16
 800714c:	1a07883a 	add	r3,r3,r8
 8007150:	1806d0ba 	srli	r3,r3,2
 8007154:	18c00044 	addi	r3,r3,1
 8007158:	18c7883a 	add	r3,r3,r3
 800715c:	18c7883a 	add	r3,r3,r3
 8007160:	50d5883a 	add	r10,r10,r3
 8007164:	50ffff04 	addi	r3,r10,-4
 8007168:	2000041e 	bne	r4,zero,800717c <__mdiff+0x194>
 800716c:	18ffff04 	addi	r3,r3,-4
 8007170:	19000017 	ldw	r4,0(r3)
 8007174:	4a7fffc4 	addi	r9,r9,-1
 8007178:	203ffc26 	beq	r4,zero,800716c <__alt_data_end+0xfc00716c>
 800717c:	12400415 	stw	r9,16(r2)
 8007180:	dfc00517 	ldw	ra,20(sp)
 8007184:	dd000417 	ldw	r20,16(sp)
 8007188:	dcc00317 	ldw	r19,12(sp)
 800718c:	dc800217 	ldw	r18,8(sp)
 8007190:	dc400117 	ldw	r17,4(sp)
 8007194:	dc000017 	ldw	r16,0(sp)
 8007198:	dec00604 	addi	sp,sp,24
 800719c:	f800283a 	ret
 80071a0:	000b883a 	mov	r5,zero
 80071a4:	80066040 	call	8006604 <_Balloc>
 80071a8:	00c00044 	movi	r3,1
 80071ac:	10c00415 	stw	r3,16(r2)
 80071b0:	10000515 	stw	zero,20(r2)
 80071b4:	003ff206 	br	8007180 <__alt_data_end+0xfc007180>
 80071b8:	8023883a 	mov	r17,r16
 80071bc:	0029883a 	mov	r20,zero
 80071c0:	4021883a 	mov	r16,r8
 80071c4:	003fad06 	br	800707c <__alt_data_end+0xfc00707c>
 80071c8:	9005883a 	mov	r2,r18
 80071cc:	94400504 	addi	r17,r18,20
 80071d0:	9c000504 	addi	r16,r19,20
 80071d4:	9825883a 	mov	r18,r19
 80071d8:	05000044 	movi	r20,1
 80071dc:	1027883a 	mov	r19,r2
 80071e0:	003fa606 	br	800707c <__alt_data_end+0xfc00707c>

080071e4 <__ulp>:
 80071e4:	295ffc2c 	andhi	r5,r5,32752
 80071e8:	00bf3034 	movhi	r2,64704
 80071ec:	2887883a 	add	r3,r5,r2
 80071f0:	00c0020e 	bge	zero,r3,80071fc <__ulp+0x18>
 80071f4:	0005883a 	mov	r2,zero
 80071f8:	f800283a 	ret
 80071fc:	00c7c83a 	sub	r3,zero,r3
 8007200:	1807d53a 	srai	r3,r3,20
 8007204:	008004c4 	movi	r2,19
 8007208:	10c00b0e 	bge	r2,r3,8007238 <__ulp+0x54>
 800720c:	18bffb04 	addi	r2,r3,-20
 8007210:	01000784 	movi	r4,30
 8007214:	0007883a 	mov	r3,zero
 8007218:	20800516 	blt	r4,r2,8007230 <__ulp+0x4c>
 800721c:	010007c4 	movi	r4,31
 8007220:	2089c83a 	sub	r4,r4,r2
 8007224:	00800044 	movi	r2,1
 8007228:	1104983a 	sll	r2,r2,r4
 800722c:	f800283a 	ret
 8007230:	00800044 	movi	r2,1
 8007234:	f800283a 	ret
 8007238:	01400234 	movhi	r5,8
 800723c:	28c7d83a 	sra	r3,r5,r3
 8007240:	0005883a 	mov	r2,zero
 8007244:	f800283a 	ret

08007248 <__b2d>:
 8007248:	defffa04 	addi	sp,sp,-24
 800724c:	dc000015 	stw	r16,0(sp)
 8007250:	24000417 	ldw	r16,16(r4)
 8007254:	dc400115 	stw	r17,4(sp)
 8007258:	24400504 	addi	r17,r4,20
 800725c:	8421883a 	add	r16,r16,r16
 8007260:	8421883a 	add	r16,r16,r16
 8007264:	8c21883a 	add	r16,r17,r16
 8007268:	dc800215 	stw	r18,8(sp)
 800726c:	84bfff17 	ldw	r18,-4(r16)
 8007270:	dd000415 	stw	r20,16(sp)
 8007274:	dcc00315 	stw	r19,12(sp)
 8007278:	9009883a 	mov	r4,r18
 800727c:	2829883a 	mov	r20,r5
 8007280:	dfc00515 	stw	ra,20(sp)
 8007284:	80069200 	call	8006920 <__hi0bits>
 8007288:	00c00804 	movi	r3,32
 800728c:	1889c83a 	sub	r4,r3,r2
 8007290:	a1000015 	stw	r4,0(r20)
 8007294:	01000284 	movi	r4,10
 8007298:	84ffff04 	addi	r19,r16,-4
 800729c:	20801216 	blt	r4,r2,80072e8 <__b2d+0xa0>
 80072a0:	018002c4 	movi	r6,11
 80072a4:	308dc83a 	sub	r6,r6,r2
 80072a8:	9186d83a 	srl	r3,r18,r6
 80072ac:	18cffc34 	orhi	r3,r3,16368
 80072b0:	8cc0212e 	bgeu	r17,r19,8007338 <__b2d+0xf0>
 80072b4:	813ffe17 	ldw	r4,-8(r16)
 80072b8:	218cd83a 	srl	r6,r4,r6
 80072bc:	10800544 	addi	r2,r2,21
 80072c0:	9084983a 	sll	r2,r18,r2
 80072c4:	1184b03a 	or	r2,r2,r6
 80072c8:	dfc00517 	ldw	ra,20(sp)
 80072cc:	dd000417 	ldw	r20,16(sp)
 80072d0:	dcc00317 	ldw	r19,12(sp)
 80072d4:	dc800217 	ldw	r18,8(sp)
 80072d8:	dc400117 	ldw	r17,4(sp)
 80072dc:	dc000017 	ldw	r16,0(sp)
 80072e0:	dec00604 	addi	sp,sp,24
 80072e4:	f800283a 	ret
 80072e8:	8cc00f2e 	bgeu	r17,r19,8007328 <__b2d+0xe0>
 80072ec:	117ffd44 	addi	r5,r2,-11
 80072f0:	80bffe17 	ldw	r2,-8(r16)
 80072f4:	28000e26 	beq	r5,zero,8007330 <__b2d+0xe8>
 80072f8:	1949c83a 	sub	r4,r3,r5
 80072fc:	9164983a 	sll	r18,r18,r5
 8007300:	1106d83a 	srl	r3,r2,r4
 8007304:	81bffe04 	addi	r6,r16,-8
 8007308:	948ffc34 	orhi	r18,r18,16368
 800730c:	90c6b03a 	or	r3,r18,r3
 8007310:	89800e2e 	bgeu	r17,r6,800734c <__b2d+0x104>
 8007314:	81bffd17 	ldw	r6,-12(r16)
 8007318:	1144983a 	sll	r2,r2,r5
 800731c:	310ad83a 	srl	r5,r6,r4
 8007320:	2884b03a 	or	r2,r5,r2
 8007324:	003fe806 	br	80072c8 <__alt_data_end+0xfc0072c8>
 8007328:	10bffd44 	addi	r2,r2,-11
 800732c:	1000041e 	bne	r2,zero,8007340 <__b2d+0xf8>
 8007330:	90cffc34 	orhi	r3,r18,16368
 8007334:	003fe406 	br	80072c8 <__alt_data_end+0xfc0072c8>
 8007338:	000d883a 	mov	r6,zero
 800733c:	003fdf06 	br	80072bc <__alt_data_end+0xfc0072bc>
 8007340:	90a4983a 	sll	r18,r18,r2
 8007344:	0005883a 	mov	r2,zero
 8007348:	003ff906 	br	8007330 <__alt_data_end+0xfc007330>
 800734c:	1144983a 	sll	r2,r2,r5
 8007350:	003fdd06 	br	80072c8 <__alt_data_end+0xfc0072c8>

08007354 <__d2b>:
 8007354:	defff804 	addi	sp,sp,-32
 8007358:	dc000215 	stw	r16,8(sp)
 800735c:	3021883a 	mov	r16,r6
 8007360:	dc400315 	stw	r17,12(sp)
 8007364:	8022907a 	slli	r17,r16,1
 8007368:	dd000615 	stw	r20,24(sp)
 800736c:	2829883a 	mov	r20,r5
 8007370:	01400044 	movi	r5,1
 8007374:	dcc00515 	stw	r19,20(sp)
 8007378:	dc800415 	stw	r18,16(sp)
 800737c:	dfc00715 	stw	ra,28(sp)
 8007380:	3825883a 	mov	r18,r7
 8007384:	8822d57a 	srli	r17,r17,21
 8007388:	80066040 	call	8006604 <_Balloc>
 800738c:	1027883a 	mov	r19,r2
 8007390:	00800434 	movhi	r2,16
 8007394:	10bfffc4 	addi	r2,r2,-1
 8007398:	808c703a 	and	r6,r16,r2
 800739c:	88000126 	beq	r17,zero,80073a4 <__d2b+0x50>
 80073a0:	31800434 	orhi	r6,r6,16
 80073a4:	d9800015 	stw	r6,0(sp)
 80073a8:	a0002426 	beq	r20,zero,800743c <__d2b+0xe8>
 80073ac:	d9000104 	addi	r4,sp,4
 80073b0:	dd000115 	stw	r20,4(sp)
 80073b4:	80069880 	call	8006988 <__lo0bits>
 80073b8:	d8c00017 	ldw	r3,0(sp)
 80073bc:	10002f1e 	bne	r2,zero,800747c <__d2b+0x128>
 80073c0:	d9000117 	ldw	r4,4(sp)
 80073c4:	99000515 	stw	r4,20(r19)
 80073c8:	1821003a 	cmpeq	r16,r3,zero
 80073cc:	01000084 	movi	r4,2
 80073d0:	2421c83a 	sub	r16,r4,r16
 80073d4:	98c00615 	stw	r3,24(r19)
 80073d8:	9c000415 	stw	r16,16(r19)
 80073dc:	88001f1e 	bne	r17,zero,800745c <__d2b+0x108>
 80073e0:	10bef384 	addi	r2,r2,-1074
 80073e4:	90800015 	stw	r2,0(r18)
 80073e8:	00900034 	movhi	r2,16384
 80073ec:	10bfffc4 	addi	r2,r2,-1
 80073f0:	8085883a 	add	r2,r16,r2
 80073f4:	1085883a 	add	r2,r2,r2
 80073f8:	1085883a 	add	r2,r2,r2
 80073fc:	9885883a 	add	r2,r19,r2
 8007400:	11000517 	ldw	r4,20(r2)
 8007404:	8020917a 	slli	r16,r16,5
 8007408:	80069200 	call	8006920 <__hi0bits>
 800740c:	d8c00817 	ldw	r3,32(sp)
 8007410:	8085c83a 	sub	r2,r16,r2
 8007414:	18800015 	stw	r2,0(r3)
 8007418:	9805883a 	mov	r2,r19
 800741c:	dfc00717 	ldw	ra,28(sp)
 8007420:	dd000617 	ldw	r20,24(sp)
 8007424:	dcc00517 	ldw	r19,20(sp)
 8007428:	dc800417 	ldw	r18,16(sp)
 800742c:	dc400317 	ldw	r17,12(sp)
 8007430:	dc000217 	ldw	r16,8(sp)
 8007434:	dec00804 	addi	sp,sp,32
 8007438:	f800283a 	ret
 800743c:	d809883a 	mov	r4,sp
 8007440:	80069880 	call	8006988 <__lo0bits>
 8007444:	d8c00017 	ldw	r3,0(sp)
 8007448:	04000044 	movi	r16,1
 800744c:	9c000415 	stw	r16,16(r19)
 8007450:	98c00515 	stw	r3,20(r19)
 8007454:	10800804 	addi	r2,r2,32
 8007458:	883fe126 	beq	r17,zero,80073e0 <__alt_data_end+0xfc0073e0>
 800745c:	00c00d44 	movi	r3,53
 8007460:	8c7ef344 	addi	r17,r17,-1075
 8007464:	88a3883a 	add	r17,r17,r2
 8007468:	1885c83a 	sub	r2,r3,r2
 800746c:	d8c00817 	ldw	r3,32(sp)
 8007470:	94400015 	stw	r17,0(r18)
 8007474:	18800015 	stw	r2,0(r3)
 8007478:	003fe706 	br	8007418 <__alt_data_end+0xfc007418>
 800747c:	01000804 	movi	r4,32
 8007480:	2089c83a 	sub	r4,r4,r2
 8007484:	1908983a 	sll	r4,r3,r4
 8007488:	d9400117 	ldw	r5,4(sp)
 800748c:	1886d83a 	srl	r3,r3,r2
 8007490:	2148b03a 	or	r4,r4,r5
 8007494:	99000515 	stw	r4,20(r19)
 8007498:	d8c00015 	stw	r3,0(sp)
 800749c:	003fca06 	br	80073c8 <__alt_data_end+0xfc0073c8>

080074a0 <__ratio>:
 80074a0:	defff904 	addi	sp,sp,-28
 80074a4:	dc400315 	stw	r17,12(sp)
 80074a8:	2823883a 	mov	r17,r5
 80074ac:	d9400104 	addi	r5,sp,4
 80074b0:	dfc00615 	stw	ra,24(sp)
 80074b4:	dcc00515 	stw	r19,20(sp)
 80074b8:	dc800415 	stw	r18,16(sp)
 80074bc:	2027883a 	mov	r19,r4
 80074c0:	dc000215 	stw	r16,8(sp)
 80074c4:	80072480 	call	8007248 <__b2d>
 80074c8:	d80b883a 	mov	r5,sp
 80074cc:	8809883a 	mov	r4,r17
 80074d0:	1025883a 	mov	r18,r2
 80074d4:	1821883a 	mov	r16,r3
 80074d8:	80072480 	call	8007248 <__b2d>
 80074dc:	8a000417 	ldw	r8,16(r17)
 80074e0:	99000417 	ldw	r4,16(r19)
 80074e4:	d9400117 	ldw	r5,4(sp)
 80074e8:	2209c83a 	sub	r4,r4,r8
 80074ec:	2010917a 	slli	r8,r4,5
 80074f0:	d9000017 	ldw	r4,0(sp)
 80074f4:	2909c83a 	sub	r4,r5,r4
 80074f8:	4109883a 	add	r4,r8,r4
 80074fc:	01000e0e 	bge	zero,r4,8007538 <__ratio+0x98>
 8007500:	2008953a 	slli	r4,r4,20
 8007504:	2421883a 	add	r16,r4,r16
 8007508:	100d883a 	mov	r6,r2
 800750c:	180f883a 	mov	r7,r3
 8007510:	9009883a 	mov	r4,r18
 8007514:	800b883a 	mov	r5,r16
 8007518:	800b5640 	call	800b564 <__divdf3>
 800751c:	dfc00617 	ldw	ra,24(sp)
 8007520:	dcc00517 	ldw	r19,20(sp)
 8007524:	dc800417 	ldw	r18,16(sp)
 8007528:	dc400317 	ldw	r17,12(sp)
 800752c:	dc000217 	ldw	r16,8(sp)
 8007530:	dec00704 	addi	sp,sp,28
 8007534:	f800283a 	ret
 8007538:	2008953a 	slli	r4,r4,20
 800753c:	1907c83a 	sub	r3,r3,r4
 8007540:	003ff106 	br	8007508 <__alt_data_end+0xfc007508>

08007544 <_mprec_log10>:
 8007544:	defffe04 	addi	sp,sp,-8
 8007548:	dc000015 	stw	r16,0(sp)
 800754c:	dfc00115 	stw	ra,4(sp)
 8007550:	008005c4 	movi	r2,23
 8007554:	2021883a 	mov	r16,r4
 8007558:	11000d0e 	bge	r2,r4,8007590 <_mprec_log10+0x4c>
 800755c:	0005883a 	mov	r2,zero
 8007560:	00cffc34 	movhi	r3,16368
 8007564:	843fffc4 	addi	r16,r16,-1
 8007568:	000d883a 	mov	r6,zero
 800756c:	01d00934 	movhi	r7,16420
 8007570:	1009883a 	mov	r4,r2
 8007574:	180b883a 	mov	r5,r3
 8007578:	800c18c0 	call	800c18c <__muldf3>
 800757c:	803ff91e 	bne	r16,zero,8007564 <__alt_data_end+0xfc007564>
 8007580:	dfc00117 	ldw	ra,4(sp)
 8007584:	dc000017 	ldw	r16,0(sp)
 8007588:	dec00204 	addi	sp,sp,8
 800758c:	f800283a 	ret
 8007590:	202090fa 	slli	r16,r4,3
 8007594:	008205f4 	movhi	r2,2071
 8007598:	109c8b04 	addi	r2,r2,29228
 800759c:	1421883a 	add	r16,r2,r16
 80075a0:	80800017 	ldw	r2,0(r16)
 80075a4:	80c00117 	ldw	r3,4(r16)
 80075a8:	dfc00117 	ldw	ra,4(sp)
 80075ac:	dc000017 	ldw	r16,0(sp)
 80075b0:	dec00204 	addi	sp,sp,8
 80075b4:	f800283a 	ret

080075b8 <__copybits>:
 80075b8:	297fffc4 	addi	r5,r5,-1
 80075bc:	280fd17a 	srai	r7,r5,5
 80075c0:	30c00417 	ldw	r3,16(r6)
 80075c4:	30800504 	addi	r2,r6,20
 80075c8:	39c00044 	addi	r7,r7,1
 80075cc:	18c7883a 	add	r3,r3,r3
 80075d0:	39cf883a 	add	r7,r7,r7
 80075d4:	18c7883a 	add	r3,r3,r3
 80075d8:	39cf883a 	add	r7,r7,r7
 80075dc:	10c7883a 	add	r3,r2,r3
 80075e0:	21cf883a 	add	r7,r4,r7
 80075e4:	10c00d2e 	bgeu	r2,r3,800761c <__copybits+0x64>
 80075e8:	200b883a 	mov	r5,r4
 80075ec:	12000017 	ldw	r8,0(r2)
 80075f0:	29400104 	addi	r5,r5,4
 80075f4:	10800104 	addi	r2,r2,4
 80075f8:	2a3fff15 	stw	r8,-4(r5)
 80075fc:	10fffb36 	bltu	r2,r3,80075ec <__alt_data_end+0xfc0075ec>
 8007600:	1985c83a 	sub	r2,r3,r6
 8007604:	10bffac4 	addi	r2,r2,-21
 8007608:	1004d0ba 	srli	r2,r2,2
 800760c:	10800044 	addi	r2,r2,1
 8007610:	1085883a 	add	r2,r2,r2
 8007614:	1085883a 	add	r2,r2,r2
 8007618:	2089883a 	add	r4,r4,r2
 800761c:	21c0032e 	bgeu	r4,r7,800762c <__copybits+0x74>
 8007620:	20000015 	stw	zero,0(r4)
 8007624:	21000104 	addi	r4,r4,4
 8007628:	21fffd36 	bltu	r4,r7,8007620 <__alt_data_end+0xfc007620>
 800762c:	f800283a 	ret

08007630 <__any_on>:
 8007630:	20c00417 	ldw	r3,16(r4)
 8007634:	2805d17a 	srai	r2,r5,5
 8007638:	21000504 	addi	r4,r4,20
 800763c:	18800d0e 	bge	r3,r2,8007674 <__any_on+0x44>
 8007640:	18c7883a 	add	r3,r3,r3
 8007644:	18c7883a 	add	r3,r3,r3
 8007648:	20c7883a 	add	r3,r4,r3
 800764c:	20c0192e 	bgeu	r4,r3,80076b4 <__any_on+0x84>
 8007650:	18bfff17 	ldw	r2,-4(r3)
 8007654:	18ffff04 	addi	r3,r3,-4
 8007658:	1000041e 	bne	r2,zero,800766c <__any_on+0x3c>
 800765c:	20c0142e 	bgeu	r4,r3,80076b0 <__any_on+0x80>
 8007660:	18ffff04 	addi	r3,r3,-4
 8007664:	19400017 	ldw	r5,0(r3)
 8007668:	283ffc26 	beq	r5,zero,800765c <__alt_data_end+0xfc00765c>
 800766c:	00800044 	movi	r2,1
 8007670:	f800283a 	ret
 8007674:	10c00a0e 	bge	r2,r3,80076a0 <__any_on+0x70>
 8007678:	1085883a 	add	r2,r2,r2
 800767c:	1085883a 	add	r2,r2,r2
 8007680:	294007cc 	andi	r5,r5,31
 8007684:	2087883a 	add	r3,r4,r2
 8007688:	283ff026 	beq	r5,zero,800764c <__alt_data_end+0xfc00764c>
 800768c:	19800017 	ldw	r6,0(r3)
 8007690:	3144d83a 	srl	r2,r6,r5
 8007694:	114a983a 	sll	r5,r2,r5
 8007698:	317ff41e 	bne	r6,r5,800766c <__alt_data_end+0xfc00766c>
 800769c:	003feb06 	br	800764c <__alt_data_end+0xfc00764c>
 80076a0:	1085883a 	add	r2,r2,r2
 80076a4:	1085883a 	add	r2,r2,r2
 80076a8:	2087883a 	add	r3,r4,r2
 80076ac:	003fe706 	br	800764c <__alt_data_end+0xfc00764c>
 80076b0:	f800283a 	ret
 80076b4:	0005883a 	mov	r2,zero
 80076b8:	f800283a 	ret

080076bc <_realloc_r>:
 80076bc:	defff604 	addi	sp,sp,-40
 80076c0:	dc800215 	stw	r18,8(sp)
 80076c4:	dfc00915 	stw	ra,36(sp)
 80076c8:	df000815 	stw	fp,32(sp)
 80076cc:	ddc00715 	stw	r23,28(sp)
 80076d0:	dd800615 	stw	r22,24(sp)
 80076d4:	dd400515 	stw	r21,20(sp)
 80076d8:	dd000415 	stw	r20,16(sp)
 80076dc:	dcc00315 	stw	r19,12(sp)
 80076e0:	dc400115 	stw	r17,4(sp)
 80076e4:	dc000015 	stw	r16,0(sp)
 80076e8:	3025883a 	mov	r18,r6
 80076ec:	2800b726 	beq	r5,zero,80079cc <_realloc_r+0x310>
 80076f0:	282b883a 	mov	r21,r5
 80076f4:	2029883a 	mov	r20,r4
 80076f8:	800daf80 	call	800daf8 <__malloc_lock>
 80076fc:	a8bfff17 	ldw	r2,-4(r21)
 8007700:	043fff04 	movi	r16,-4
 8007704:	90c002c4 	addi	r3,r18,11
 8007708:	01000584 	movi	r4,22
 800770c:	acfffe04 	addi	r19,r21,-8
 8007710:	1420703a 	and	r16,r2,r16
 8007714:	20c0332e 	bgeu	r4,r3,80077e4 <_realloc_r+0x128>
 8007718:	047ffe04 	movi	r17,-8
 800771c:	1c62703a 	and	r17,r3,r17
 8007720:	8807883a 	mov	r3,r17
 8007724:	88005816 	blt	r17,zero,8007888 <_realloc_r+0x1cc>
 8007728:	8c805736 	bltu	r17,r18,8007888 <_realloc_r+0x1cc>
 800772c:	80c0300e 	bge	r16,r3,80077f0 <_realloc_r+0x134>
 8007730:	070205f4 	movhi	fp,2071
 8007734:	e71e3904 	addi	fp,fp,30948
 8007738:	e1c00217 	ldw	r7,8(fp)
 800773c:	9c09883a 	add	r4,r19,r16
 8007740:	22000117 	ldw	r8,4(r4)
 8007744:	21c06326 	beq	r4,r7,80078d4 <_realloc_r+0x218>
 8007748:	017fff84 	movi	r5,-2
 800774c:	414a703a 	and	r5,r8,r5
 8007750:	214b883a 	add	r5,r4,r5
 8007754:	29800117 	ldw	r6,4(r5)
 8007758:	3180004c 	andi	r6,r6,1
 800775c:	30003f26 	beq	r6,zero,800785c <_realloc_r+0x1a0>
 8007760:	1080004c 	andi	r2,r2,1
 8007764:	10008326 	beq	r2,zero,8007974 <_realloc_r+0x2b8>
 8007768:	900b883a 	mov	r5,r18
 800776c:	a009883a 	mov	r4,r20
 8007770:	80059480 	call	8005948 <_malloc_r>
 8007774:	1025883a 	mov	r18,r2
 8007778:	10011e26 	beq	r2,zero,8007bf4 <_realloc_r+0x538>
 800777c:	a93fff17 	ldw	r4,-4(r21)
 8007780:	10fffe04 	addi	r3,r2,-8
 8007784:	00bfff84 	movi	r2,-2
 8007788:	2084703a 	and	r2,r4,r2
 800778c:	9885883a 	add	r2,r19,r2
 8007790:	1880ee26 	beq	r3,r2,8007b4c <_realloc_r+0x490>
 8007794:	81bfff04 	addi	r6,r16,-4
 8007798:	00800904 	movi	r2,36
 800779c:	1180b836 	bltu	r2,r6,8007a80 <_realloc_r+0x3c4>
 80077a0:	00c004c4 	movi	r3,19
 80077a4:	19809636 	bltu	r3,r6,8007a00 <_realloc_r+0x344>
 80077a8:	9005883a 	mov	r2,r18
 80077ac:	a807883a 	mov	r3,r21
 80077b0:	19000017 	ldw	r4,0(r3)
 80077b4:	11000015 	stw	r4,0(r2)
 80077b8:	19000117 	ldw	r4,4(r3)
 80077bc:	11000115 	stw	r4,4(r2)
 80077c0:	18c00217 	ldw	r3,8(r3)
 80077c4:	10c00215 	stw	r3,8(r2)
 80077c8:	a80b883a 	mov	r5,r21
 80077cc:	a009883a 	mov	r4,r20
 80077d0:	8004d500 	call	8004d50 <_free_r>
 80077d4:	a009883a 	mov	r4,r20
 80077d8:	800db1c0 	call	800db1c <__malloc_unlock>
 80077dc:	9005883a 	mov	r2,r18
 80077e0:	00001206 	br	800782c <_realloc_r+0x170>
 80077e4:	00c00404 	movi	r3,16
 80077e8:	1823883a 	mov	r17,r3
 80077ec:	003fce06 	br	8007728 <__alt_data_end+0xfc007728>
 80077f0:	a825883a 	mov	r18,r21
 80077f4:	8445c83a 	sub	r2,r16,r17
 80077f8:	00c003c4 	movi	r3,15
 80077fc:	18802636 	bltu	r3,r2,8007898 <_realloc_r+0x1dc>
 8007800:	99800117 	ldw	r6,4(r19)
 8007804:	9c07883a 	add	r3,r19,r16
 8007808:	3180004c 	andi	r6,r6,1
 800780c:	3420b03a 	or	r16,r6,r16
 8007810:	9c000115 	stw	r16,4(r19)
 8007814:	18800117 	ldw	r2,4(r3)
 8007818:	10800054 	ori	r2,r2,1
 800781c:	18800115 	stw	r2,4(r3)
 8007820:	a009883a 	mov	r4,r20
 8007824:	800db1c0 	call	800db1c <__malloc_unlock>
 8007828:	9005883a 	mov	r2,r18
 800782c:	dfc00917 	ldw	ra,36(sp)
 8007830:	df000817 	ldw	fp,32(sp)
 8007834:	ddc00717 	ldw	r23,28(sp)
 8007838:	dd800617 	ldw	r22,24(sp)
 800783c:	dd400517 	ldw	r21,20(sp)
 8007840:	dd000417 	ldw	r20,16(sp)
 8007844:	dcc00317 	ldw	r19,12(sp)
 8007848:	dc800217 	ldw	r18,8(sp)
 800784c:	dc400117 	ldw	r17,4(sp)
 8007850:	dc000017 	ldw	r16,0(sp)
 8007854:	dec00a04 	addi	sp,sp,40
 8007858:	f800283a 	ret
 800785c:	017fff04 	movi	r5,-4
 8007860:	414a703a 	and	r5,r8,r5
 8007864:	814d883a 	add	r6,r16,r5
 8007868:	30c01f16 	blt	r6,r3,80078e8 <_realloc_r+0x22c>
 800786c:	20800317 	ldw	r2,12(r4)
 8007870:	20c00217 	ldw	r3,8(r4)
 8007874:	a825883a 	mov	r18,r21
 8007878:	3021883a 	mov	r16,r6
 800787c:	18800315 	stw	r2,12(r3)
 8007880:	10c00215 	stw	r3,8(r2)
 8007884:	003fdb06 	br	80077f4 <__alt_data_end+0xfc0077f4>
 8007888:	00800304 	movi	r2,12
 800788c:	a0800015 	stw	r2,0(r20)
 8007890:	0005883a 	mov	r2,zero
 8007894:	003fe506 	br	800782c <__alt_data_end+0xfc00782c>
 8007898:	98c00117 	ldw	r3,4(r19)
 800789c:	9c4b883a 	add	r5,r19,r17
 80078a0:	11000054 	ori	r4,r2,1
 80078a4:	18c0004c 	andi	r3,r3,1
 80078a8:	1c62b03a 	or	r17,r3,r17
 80078ac:	9c400115 	stw	r17,4(r19)
 80078b0:	29000115 	stw	r4,4(r5)
 80078b4:	2885883a 	add	r2,r5,r2
 80078b8:	10c00117 	ldw	r3,4(r2)
 80078bc:	29400204 	addi	r5,r5,8
 80078c0:	a009883a 	mov	r4,r20
 80078c4:	18c00054 	ori	r3,r3,1
 80078c8:	10c00115 	stw	r3,4(r2)
 80078cc:	8004d500 	call	8004d50 <_free_r>
 80078d0:	003fd306 	br	8007820 <__alt_data_end+0xfc007820>
 80078d4:	017fff04 	movi	r5,-4
 80078d8:	414a703a 	and	r5,r8,r5
 80078dc:	89800404 	addi	r6,r17,16
 80078e0:	8151883a 	add	r8,r16,r5
 80078e4:	4180590e 	bge	r8,r6,8007a4c <_realloc_r+0x390>
 80078e8:	1080004c 	andi	r2,r2,1
 80078ec:	103f9e1e 	bne	r2,zero,8007768 <__alt_data_end+0xfc007768>
 80078f0:	adbffe17 	ldw	r22,-8(r21)
 80078f4:	00bfff04 	movi	r2,-4
 80078f8:	9dadc83a 	sub	r22,r19,r22
 80078fc:	b1800117 	ldw	r6,4(r22)
 8007900:	3084703a 	and	r2,r6,r2
 8007904:	20002026 	beq	r4,zero,8007988 <_realloc_r+0x2cc>
 8007908:	80af883a 	add	r23,r16,r2
 800790c:	b96f883a 	add	r23,r23,r5
 8007910:	21c05f26 	beq	r4,r7,8007a90 <_realloc_r+0x3d4>
 8007914:	b8c01c16 	blt	r23,r3,8007988 <_realloc_r+0x2cc>
 8007918:	20800317 	ldw	r2,12(r4)
 800791c:	20c00217 	ldw	r3,8(r4)
 8007920:	81bfff04 	addi	r6,r16,-4
 8007924:	01000904 	movi	r4,36
 8007928:	18800315 	stw	r2,12(r3)
 800792c:	10c00215 	stw	r3,8(r2)
 8007930:	b0c00217 	ldw	r3,8(r22)
 8007934:	b0800317 	ldw	r2,12(r22)
 8007938:	b4800204 	addi	r18,r22,8
 800793c:	18800315 	stw	r2,12(r3)
 8007940:	10c00215 	stw	r3,8(r2)
 8007944:	21801b36 	bltu	r4,r6,80079b4 <_realloc_r+0x2f8>
 8007948:	008004c4 	movi	r2,19
 800794c:	1180352e 	bgeu	r2,r6,8007a24 <_realloc_r+0x368>
 8007950:	a8800017 	ldw	r2,0(r21)
 8007954:	b0800215 	stw	r2,8(r22)
 8007958:	a8800117 	ldw	r2,4(r21)
 800795c:	b0800315 	stw	r2,12(r22)
 8007960:	008006c4 	movi	r2,27
 8007964:	11807f36 	bltu	r2,r6,8007b64 <_realloc_r+0x4a8>
 8007968:	b0800404 	addi	r2,r22,16
 800796c:	ad400204 	addi	r21,r21,8
 8007970:	00002d06 	br	8007a28 <_realloc_r+0x36c>
 8007974:	adbffe17 	ldw	r22,-8(r21)
 8007978:	00bfff04 	movi	r2,-4
 800797c:	9dadc83a 	sub	r22,r19,r22
 8007980:	b1000117 	ldw	r4,4(r22)
 8007984:	2084703a 	and	r2,r4,r2
 8007988:	b03f7726 	beq	r22,zero,8007768 <__alt_data_end+0xfc007768>
 800798c:	80af883a 	add	r23,r16,r2
 8007990:	b8ff7516 	blt	r23,r3,8007768 <__alt_data_end+0xfc007768>
 8007994:	b0800317 	ldw	r2,12(r22)
 8007998:	b0c00217 	ldw	r3,8(r22)
 800799c:	81bfff04 	addi	r6,r16,-4
 80079a0:	01000904 	movi	r4,36
 80079a4:	18800315 	stw	r2,12(r3)
 80079a8:	10c00215 	stw	r3,8(r2)
 80079ac:	b4800204 	addi	r18,r22,8
 80079b0:	21bfe52e 	bgeu	r4,r6,8007948 <__alt_data_end+0xfc007948>
 80079b4:	a80b883a 	mov	r5,r21
 80079b8:	9009883a 	mov	r4,r18
 80079bc:	80063800 	call	8006380 <memmove>
 80079c0:	b821883a 	mov	r16,r23
 80079c4:	b027883a 	mov	r19,r22
 80079c8:	003f8a06 	br	80077f4 <__alt_data_end+0xfc0077f4>
 80079cc:	300b883a 	mov	r5,r6
 80079d0:	dfc00917 	ldw	ra,36(sp)
 80079d4:	df000817 	ldw	fp,32(sp)
 80079d8:	ddc00717 	ldw	r23,28(sp)
 80079dc:	dd800617 	ldw	r22,24(sp)
 80079e0:	dd400517 	ldw	r21,20(sp)
 80079e4:	dd000417 	ldw	r20,16(sp)
 80079e8:	dcc00317 	ldw	r19,12(sp)
 80079ec:	dc800217 	ldw	r18,8(sp)
 80079f0:	dc400117 	ldw	r17,4(sp)
 80079f4:	dc000017 	ldw	r16,0(sp)
 80079f8:	dec00a04 	addi	sp,sp,40
 80079fc:	80059481 	jmpi	8005948 <_malloc_r>
 8007a00:	a8c00017 	ldw	r3,0(r21)
 8007a04:	90c00015 	stw	r3,0(r18)
 8007a08:	a8c00117 	ldw	r3,4(r21)
 8007a0c:	90c00115 	stw	r3,4(r18)
 8007a10:	00c006c4 	movi	r3,27
 8007a14:	19804536 	bltu	r3,r6,8007b2c <_realloc_r+0x470>
 8007a18:	90800204 	addi	r2,r18,8
 8007a1c:	a8c00204 	addi	r3,r21,8
 8007a20:	003f6306 	br	80077b0 <__alt_data_end+0xfc0077b0>
 8007a24:	9005883a 	mov	r2,r18
 8007a28:	a8c00017 	ldw	r3,0(r21)
 8007a2c:	b821883a 	mov	r16,r23
 8007a30:	b027883a 	mov	r19,r22
 8007a34:	10c00015 	stw	r3,0(r2)
 8007a38:	a8c00117 	ldw	r3,4(r21)
 8007a3c:	10c00115 	stw	r3,4(r2)
 8007a40:	a8c00217 	ldw	r3,8(r21)
 8007a44:	10c00215 	stw	r3,8(r2)
 8007a48:	003f6a06 	br	80077f4 <__alt_data_end+0xfc0077f4>
 8007a4c:	9c67883a 	add	r19,r19,r17
 8007a50:	4445c83a 	sub	r2,r8,r17
 8007a54:	e4c00215 	stw	r19,8(fp)
 8007a58:	10800054 	ori	r2,r2,1
 8007a5c:	98800115 	stw	r2,4(r19)
 8007a60:	a8bfff17 	ldw	r2,-4(r21)
 8007a64:	a009883a 	mov	r4,r20
 8007a68:	1080004c 	andi	r2,r2,1
 8007a6c:	1462b03a 	or	r17,r2,r17
 8007a70:	ac7fff15 	stw	r17,-4(r21)
 8007a74:	800db1c0 	call	800db1c <__malloc_unlock>
 8007a78:	a805883a 	mov	r2,r21
 8007a7c:	003f6b06 	br	800782c <__alt_data_end+0xfc00782c>
 8007a80:	a80b883a 	mov	r5,r21
 8007a84:	9009883a 	mov	r4,r18
 8007a88:	80063800 	call	8006380 <memmove>
 8007a8c:	003f4e06 	br	80077c8 <__alt_data_end+0xfc0077c8>
 8007a90:	89000404 	addi	r4,r17,16
 8007a94:	b93fbc16 	blt	r23,r4,8007988 <__alt_data_end+0xfc007988>
 8007a98:	b0800317 	ldw	r2,12(r22)
 8007a9c:	b0c00217 	ldw	r3,8(r22)
 8007aa0:	81bfff04 	addi	r6,r16,-4
 8007aa4:	01000904 	movi	r4,36
 8007aa8:	18800315 	stw	r2,12(r3)
 8007aac:	10c00215 	stw	r3,8(r2)
 8007ab0:	b4800204 	addi	r18,r22,8
 8007ab4:	21804336 	bltu	r4,r6,8007bc4 <_realloc_r+0x508>
 8007ab8:	008004c4 	movi	r2,19
 8007abc:	11803f2e 	bgeu	r2,r6,8007bbc <_realloc_r+0x500>
 8007ac0:	a8800017 	ldw	r2,0(r21)
 8007ac4:	b0800215 	stw	r2,8(r22)
 8007ac8:	a8800117 	ldw	r2,4(r21)
 8007acc:	b0800315 	stw	r2,12(r22)
 8007ad0:	008006c4 	movi	r2,27
 8007ad4:	11803f36 	bltu	r2,r6,8007bd4 <_realloc_r+0x518>
 8007ad8:	b0800404 	addi	r2,r22,16
 8007adc:	ad400204 	addi	r21,r21,8
 8007ae0:	a8c00017 	ldw	r3,0(r21)
 8007ae4:	10c00015 	stw	r3,0(r2)
 8007ae8:	a8c00117 	ldw	r3,4(r21)
 8007aec:	10c00115 	stw	r3,4(r2)
 8007af0:	a8c00217 	ldw	r3,8(r21)
 8007af4:	10c00215 	stw	r3,8(r2)
 8007af8:	b447883a 	add	r3,r22,r17
 8007afc:	bc45c83a 	sub	r2,r23,r17
 8007b00:	e0c00215 	stw	r3,8(fp)
 8007b04:	10800054 	ori	r2,r2,1
 8007b08:	18800115 	stw	r2,4(r3)
 8007b0c:	b0800117 	ldw	r2,4(r22)
 8007b10:	a009883a 	mov	r4,r20
 8007b14:	1080004c 	andi	r2,r2,1
 8007b18:	1462b03a 	or	r17,r2,r17
 8007b1c:	b4400115 	stw	r17,4(r22)
 8007b20:	800db1c0 	call	800db1c <__malloc_unlock>
 8007b24:	9005883a 	mov	r2,r18
 8007b28:	003f4006 	br	800782c <__alt_data_end+0xfc00782c>
 8007b2c:	a8c00217 	ldw	r3,8(r21)
 8007b30:	90c00215 	stw	r3,8(r18)
 8007b34:	a8c00317 	ldw	r3,12(r21)
 8007b38:	90c00315 	stw	r3,12(r18)
 8007b3c:	30801126 	beq	r6,r2,8007b84 <_realloc_r+0x4c8>
 8007b40:	90800404 	addi	r2,r18,16
 8007b44:	a8c00404 	addi	r3,r21,16
 8007b48:	003f1906 	br	80077b0 <__alt_data_end+0xfc0077b0>
 8007b4c:	90ffff17 	ldw	r3,-4(r18)
 8007b50:	00bfff04 	movi	r2,-4
 8007b54:	a825883a 	mov	r18,r21
 8007b58:	1884703a 	and	r2,r3,r2
 8007b5c:	80a1883a 	add	r16,r16,r2
 8007b60:	003f2406 	br	80077f4 <__alt_data_end+0xfc0077f4>
 8007b64:	a8800217 	ldw	r2,8(r21)
 8007b68:	b0800415 	stw	r2,16(r22)
 8007b6c:	a8800317 	ldw	r2,12(r21)
 8007b70:	b0800515 	stw	r2,20(r22)
 8007b74:	31000a26 	beq	r6,r4,8007ba0 <_realloc_r+0x4e4>
 8007b78:	b0800604 	addi	r2,r22,24
 8007b7c:	ad400404 	addi	r21,r21,16
 8007b80:	003fa906 	br	8007a28 <__alt_data_end+0xfc007a28>
 8007b84:	a9000417 	ldw	r4,16(r21)
 8007b88:	90800604 	addi	r2,r18,24
 8007b8c:	a8c00604 	addi	r3,r21,24
 8007b90:	91000415 	stw	r4,16(r18)
 8007b94:	a9000517 	ldw	r4,20(r21)
 8007b98:	91000515 	stw	r4,20(r18)
 8007b9c:	003f0406 	br	80077b0 <__alt_data_end+0xfc0077b0>
 8007ba0:	a8c00417 	ldw	r3,16(r21)
 8007ba4:	ad400604 	addi	r21,r21,24
 8007ba8:	b0800804 	addi	r2,r22,32
 8007bac:	b0c00615 	stw	r3,24(r22)
 8007bb0:	a8ffff17 	ldw	r3,-4(r21)
 8007bb4:	b0c00715 	stw	r3,28(r22)
 8007bb8:	003f9b06 	br	8007a28 <__alt_data_end+0xfc007a28>
 8007bbc:	9005883a 	mov	r2,r18
 8007bc0:	003fc706 	br	8007ae0 <__alt_data_end+0xfc007ae0>
 8007bc4:	a80b883a 	mov	r5,r21
 8007bc8:	9009883a 	mov	r4,r18
 8007bcc:	80063800 	call	8006380 <memmove>
 8007bd0:	003fc906 	br	8007af8 <__alt_data_end+0xfc007af8>
 8007bd4:	a8800217 	ldw	r2,8(r21)
 8007bd8:	b0800415 	stw	r2,16(r22)
 8007bdc:	a8800317 	ldw	r2,12(r21)
 8007be0:	b0800515 	stw	r2,20(r22)
 8007be4:	31000726 	beq	r6,r4,8007c04 <_realloc_r+0x548>
 8007be8:	b0800604 	addi	r2,r22,24
 8007bec:	ad400404 	addi	r21,r21,16
 8007bf0:	003fbb06 	br	8007ae0 <__alt_data_end+0xfc007ae0>
 8007bf4:	a009883a 	mov	r4,r20
 8007bf8:	800db1c0 	call	800db1c <__malloc_unlock>
 8007bfc:	0005883a 	mov	r2,zero
 8007c00:	003f0a06 	br	800782c <__alt_data_end+0xfc00782c>
 8007c04:	a8c00417 	ldw	r3,16(r21)
 8007c08:	ad400604 	addi	r21,r21,24
 8007c0c:	b0800804 	addi	r2,r22,32
 8007c10:	b0c00615 	stw	r3,24(r22)
 8007c14:	a8ffff17 	ldw	r3,-4(r21)
 8007c18:	b0c00715 	stw	r3,28(r22)
 8007c1c:	003fb006 	br	8007ae0 <__alt_data_end+0xfc007ae0>

08007c20 <__fpclassifyd>:
 8007c20:	00a00034 	movhi	r2,32768
 8007c24:	10bfffc4 	addi	r2,r2,-1
 8007c28:	2884703a 	and	r2,r5,r2
 8007c2c:	10000726 	beq	r2,zero,8007c4c <__fpclassifyd+0x2c>
 8007c30:	00fffc34 	movhi	r3,65520
 8007c34:	019ff834 	movhi	r6,32736
 8007c38:	28c7883a 	add	r3,r5,r3
 8007c3c:	31bfffc4 	addi	r6,r6,-1
 8007c40:	30c00536 	bltu	r6,r3,8007c58 <__fpclassifyd+0x38>
 8007c44:	00800104 	movi	r2,4
 8007c48:	f800283a 	ret
 8007c4c:	2000021e 	bne	r4,zero,8007c58 <__fpclassifyd+0x38>
 8007c50:	00800084 	movi	r2,2
 8007c54:	f800283a 	ret
 8007c58:	00dffc34 	movhi	r3,32752
 8007c5c:	019ff834 	movhi	r6,32736
 8007c60:	28cb883a 	add	r5,r5,r3
 8007c64:	31bfffc4 	addi	r6,r6,-1
 8007c68:	317ff62e 	bgeu	r6,r5,8007c44 <__alt_data_end+0xfc007c44>
 8007c6c:	01400434 	movhi	r5,16
 8007c70:	297fffc4 	addi	r5,r5,-1
 8007c74:	28800236 	bltu	r5,r2,8007c80 <__fpclassifyd+0x60>
 8007c78:	008000c4 	movi	r2,3
 8007c7c:	f800283a 	ret
 8007c80:	10c00226 	beq	r2,r3,8007c8c <__fpclassifyd+0x6c>
 8007c84:	0005883a 	mov	r2,zero
 8007c88:	f800283a 	ret
 8007c8c:	2005003a 	cmpeq	r2,r4,zero
 8007c90:	f800283a 	ret

08007c94 <_sbrk_r>:
 8007c94:	defffd04 	addi	sp,sp,-12
 8007c98:	dc000015 	stw	r16,0(sp)
 8007c9c:	04020634 	movhi	r16,2072
 8007ca0:	dc400115 	stw	r17,4(sp)
 8007ca4:	842aa404 	addi	r16,r16,-21872
 8007ca8:	2023883a 	mov	r17,r4
 8007cac:	2809883a 	mov	r4,r5
 8007cb0:	dfc00215 	stw	ra,8(sp)
 8007cb4:	80000015 	stw	zero,0(r16)
 8007cb8:	800dd040 	call	800dd04 <sbrk>
 8007cbc:	00ffffc4 	movi	r3,-1
 8007cc0:	10c00526 	beq	r2,r3,8007cd8 <_sbrk_r+0x44>
 8007cc4:	dfc00217 	ldw	ra,8(sp)
 8007cc8:	dc400117 	ldw	r17,4(sp)
 8007ccc:	dc000017 	ldw	r16,0(sp)
 8007cd0:	dec00304 	addi	sp,sp,12
 8007cd4:	f800283a 	ret
 8007cd8:	80c00017 	ldw	r3,0(r16)
 8007cdc:	183ff926 	beq	r3,zero,8007cc4 <__alt_data_end+0xfc007cc4>
 8007ce0:	88c00015 	stw	r3,0(r17)
 8007ce4:	003ff706 	br	8007cc4 <__alt_data_end+0xfc007cc4>

08007ce8 <__sread>:
 8007ce8:	defffe04 	addi	sp,sp,-8
 8007cec:	dc000015 	stw	r16,0(sp)
 8007cf0:	2821883a 	mov	r16,r5
 8007cf4:	2940038f 	ldh	r5,14(r5)
 8007cf8:	dfc00115 	stw	ra,4(sp)
 8007cfc:	8009ba40 	call	8009ba4 <_read_r>
 8007d00:	10000716 	blt	r2,zero,8007d20 <__sread+0x38>
 8007d04:	80c01417 	ldw	r3,80(r16)
 8007d08:	1887883a 	add	r3,r3,r2
 8007d0c:	80c01415 	stw	r3,80(r16)
 8007d10:	dfc00117 	ldw	ra,4(sp)
 8007d14:	dc000017 	ldw	r16,0(sp)
 8007d18:	dec00204 	addi	sp,sp,8
 8007d1c:	f800283a 	ret
 8007d20:	80c0030b 	ldhu	r3,12(r16)
 8007d24:	18fbffcc 	andi	r3,r3,61439
 8007d28:	80c0030d 	sth	r3,12(r16)
 8007d2c:	dfc00117 	ldw	ra,4(sp)
 8007d30:	dc000017 	ldw	r16,0(sp)
 8007d34:	dec00204 	addi	sp,sp,8
 8007d38:	f800283a 	ret

08007d3c <__seofread>:
 8007d3c:	0005883a 	mov	r2,zero
 8007d40:	f800283a 	ret

08007d44 <__swrite>:
 8007d44:	2880030b 	ldhu	r2,12(r5)
 8007d48:	defffb04 	addi	sp,sp,-20
 8007d4c:	dcc00315 	stw	r19,12(sp)
 8007d50:	dc800215 	stw	r18,8(sp)
 8007d54:	dc400115 	stw	r17,4(sp)
 8007d58:	dc000015 	stw	r16,0(sp)
 8007d5c:	dfc00415 	stw	ra,16(sp)
 8007d60:	10c0400c 	andi	r3,r2,256
 8007d64:	2821883a 	mov	r16,r5
 8007d68:	2023883a 	mov	r17,r4
 8007d6c:	3025883a 	mov	r18,r6
 8007d70:	3827883a 	mov	r19,r7
 8007d74:	18000526 	beq	r3,zero,8007d8c <__swrite+0x48>
 8007d78:	2940038f 	ldh	r5,14(r5)
 8007d7c:	01c00084 	movi	r7,2
 8007d80:	000d883a 	mov	r6,zero
 8007d84:	8009b440 	call	8009b44 <_lseek_r>
 8007d88:	8080030b 	ldhu	r2,12(r16)
 8007d8c:	8140038f 	ldh	r5,14(r16)
 8007d90:	10bbffcc 	andi	r2,r2,61439
 8007d94:	980f883a 	mov	r7,r19
 8007d98:	900d883a 	mov	r6,r18
 8007d9c:	8809883a 	mov	r4,r17
 8007da0:	8080030d 	sth	r2,12(r16)
 8007da4:	dfc00417 	ldw	ra,16(sp)
 8007da8:	dcc00317 	ldw	r19,12(sp)
 8007dac:	dc800217 	ldw	r18,8(sp)
 8007db0:	dc400117 	ldw	r17,4(sp)
 8007db4:	dc000017 	ldw	r16,0(sp)
 8007db8:	dec00504 	addi	sp,sp,20
 8007dbc:	80095f81 	jmpi	80095f8 <_write_r>

08007dc0 <__sseek>:
 8007dc0:	defffe04 	addi	sp,sp,-8
 8007dc4:	dc000015 	stw	r16,0(sp)
 8007dc8:	2821883a 	mov	r16,r5
 8007dcc:	2940038f 	ldh	r5,14(r5)
 8007dd0:	dfc00115 	stw	ra,4(sp)
 8007dd4:	8009b440 	call	8009b44 <_lseek_r>
 8007dd8:	00ffffc4 	movi	r3,-1
 8007ddc:	10c00826 	beq	r2,r3,8007e00 <__sseek+0x40>
 8007de0:	80c0030b 	ldhu	r3,12(r16)
 8007de4:	80801415 	stw	r2,80(r16)
 8007de8:	18c40014 	ori	r3,r3,4096
 8007dec:	80c0030d 	sth	r3,12(r16)
 8007df0:	dfc00117 	ldw	ra,4(sp)
 8007df4:	dc000017 	ldw	r16,0(sp)
 8007df8:	dec00204 	addi	sp,sp,8
 8007dfc:	f800283a 	ret
 8007e00:	80c0030b 	ldhu	r3,12(r16)
 8007e04:	18fbffcc 	andi	r3,r3,61439
 8007e08:	80c0030d 	sth	r3,12(r16)
 8007e0c:	dfc00117 	ldw	ra,4(sp)
 8007e10:	dc000017 	ldw	r16,0(sp)
 8007e14:	dec00204 	addi	sp,sp,8
 8007e18:	f800283a 	ret

08007e1c <__sclose>:
 8007e1c:	2940038f 	ldh	r5,14(r5)
 8007e20:	80096581 	jmpi	8009658 <_close_r>

08007e24 <strcmp>:
 8007e24:	2144b03a 	or	r2,r4,r5
 8007e28:	108000cc 	andi	r2,r2,3
 8007e2c:	1000171e 	bne	r2,zero,8007e8c <strcmp+0x68>
 8007e30:	20800017 	ldw	r2,0(r4)
 8007e34:	28c00017 	ldw	r3,0(r5)
 8007e38:	10c0141e 	bne	r2,r3,8007e8c <strcmp+0x68>
 8007e3c:	027fbff4 	movhi	r9,65279
 8007e40:	4a7fbfc4 	addi	r9,r9,-257
 8007e44:	0086303a 	nor	r3,zero,r2
 8007e48:	02202074 	movhi	r8,32897
 8007e4c:	1245883a 	add	r2,r2,r9
 8007e50:	42202004 	addi	r8,r8,-32640
 8007e54:	10c4703a 	and	r2,r2,r3
 8007e58:	1204703a 	and	r2,r2,r8
 8007e5c:	10000226 	beq	r2,zero,8007e68 <strcmp+0x44>
 8007e60:	00002306 	br	8007ef0 <strcmp+0xcc>
 8007e64:	1000221e 	bne	r2,zero,8007ef0 <strcmp+0xcc>
 8007e68:	21000104 	addi	r4,r4,4
 8007e6c:	20c00017 	ldw	r3,0(r4)
 8007e70:	29400104 	addi	r5,r5,4
 8007e74:	29800017 	ldw	r6,0(r5)
 8007e78:	1a4f883a 	add	r7,r3,r9
 8007e7c:	00c4303a 	nor	r2,zero,r3
 8007e80:	3884703a 	and	r2,r7,r2
 8007e84:	1204703a 	and	r2,r2,r8
 8007e88:	19bff626 	beq	r3,r6,8007e64 <__alt_data_end+0xfc007e64>
 8007e8c:	20800003 	ldbu	r2,0(r4)
 8007e90:	10c03fcc 	andi	r3,r2,255
 8007e94:	18c0201c 	xori	r3,r3,128
 8007e98:	18ffe004 	addi	r3,r3,-128
 8007e9c:	18000c26 	beq	r3,zero,8007ed0 <strcmp+0xac>
 8007ea0:	29800007 	ldb	r6,0(r5)
 8007ea4:	19800326 	beq	r3,r6,8007eb4 <strcmp+0x90>
 8007ea8:	00001306 	br	8007ef8 <strcmp+0xd4>
 8007eac:	29800007 	ldb	r6,0(r5)
 8007eb0:	11800b1e 	bne	r2,r6,8007ee0 <strcmp+0xbc>
 8007eb4:	21000044 	addi	r4,r4,1
 8007eb8:	20c00003 	ldbu	r3,0(r4)
 8007ebc:	29400044 	addi	r5,r5,1
 8007ec0:	18803fcc 	andi	r2,r3,255
 8007ec4:	1080201c 	xori	r2,r2,128
 8007ec8:	10bfe004 	addi	r2,r2,-128
 8007ecc:	103ff71e 	bne	r2,zero,8007eac <__alt_data_end+0xfc007eac>
 8007ed0:	0007883a 	mov	r3,zero
 8007ed4:	28800003 	ldbu	r2,0(r5)
 8007ed8:	1885c83a 	sub	r2,r3,r2
 8007edc:	f800283a 	ret
 8007ee0:	28800003 	ldbu	r2,0(r5)
 8007ee4:	18c03fcc 	andi	r3,r3,255
 8007ee8:	1885c83a 	sub	r2,r3,r2
 8007eec:	f800283a 	ret
 8007ef0:	0005883a 	mov	r2,zero
 8007ef4:	f800283a 	ret
 8007ef8:	10c03fcc 	andi	r3,r2,255
 8007efc:	003ff506 	br	8007ed4 <__alt_data_end+0xfc007ed4>

08007f00 <__sprint_r.part.0>:
 8007f00:	28801917 	ldw	r2,100(r5)
 8007f04:	defff604 	addi	sp,sp,-40
 8007f08:	dd400515 	stw	r21,20(sp)
 8007f0c:	dfc00915 	stw	ra,36(sp)
 8007f10:	df000815 	stw	fp,32(sp)
 8007f14:	ddc00715 	stw	r23,28(sp)
 8007f18:	dd800615 	stw	r22,24(sp)
 8007f1c:	dd000415 	stw	r20,16(sp)
 8007f20:	dcc00315 	stw	r19,12(sp)
 8007f24:	dc800215 	stw	r18,8(sp)
 8007f28:	dc400115 	stw	r17,4(sp)
 8007f2c:	dc000015 	stw	r16,0(sp)
 8007f30:	1088000c 	andi	r2,r2,8192
 8007f34:	302b883a 	mov	r21,r6
 8007f38:	10002e26 	beq	r2,zero,8007ff4 <__sprint_r.part.0+0xf4>
 8007f3c:	30800217 	ldw	r2,8(r6)
 8007f40:	35800017 	ldw	r22,0(r6)
 8007f44:	10002926 	beq	r2,zero,8007fec <__sprint_r.part.0+0xec>
 8007f48:	2827883a 	mov	r19,r5
 8007f4c:	2029883a 	mov	r20,r4
 8007f50:	b5c00104 	addi	r23,r22,4
 8007f54:	04bfffc4 	movi	r18,-1
 8007f58:	bc400017 	ldw	r17,0(r23)
 8007f5c:	b4000017 	ldw	r16,0(r22)
 8007f60:	0039883a 	mov	fp,zero
 8007f64:	8822d0ba 	srli	r17,r17,2
 8007f68:	8800031e 	bne	r17,zero,8007f78 <__sprint_r.part.0+0x78>
 8007f6c:	00001806 	br	8007fd0 <__sprint_r.part.0+0xd0>
 8007f70:	84000104 	addi	r16,r16,4
 8007f74:	8f001526 	beq	r17,fp,8007fcc <__sprint_r.part.0+0xcc>
 8007f78:	81400017 	ldw	r5,0(r16)
 8007f7c:	980d883a 	mov	r6,r19
 8007f80:	a009883a 	mov	r4,r20
 8007f84:	80099f00 	call	80099f0 <_fputwc_r>
 8007f88:	e7000044 	addi	fp,fp,1
 8007f8c:	14bff81e 	bne	r2,r18,8007f70 <__alt_data_end+0xfc007f70>
 8007f90:	9005883a 	mov	r2,r18
 8007f94:	a8000215 	stw	zero,8(r21)
 8007f98:	a8000115 	stw	zero,4(r21)
 8007f9c:	dfc00917 	ldw	ra,36(sp)
 8007fa0:	df000817 	ldw	fp,32(sp)
 8007fa4:	ddc00717 	ldw	r23,28(sp)
 8007fa8:	dd800617 	ldw	r22,24(sp)
 8007fac:	dd400517 	ldw	r21,20(sp)
 8007fb0:	dd000417 	ldw	r20,16(sp)
 8007fb4:	dcc00317 	ldw	r19,12(sp)
 8007fb8:	dc800217 	ldw	r18,8(sp)
 8007fbc:	dc400117 	ldw	r17,4(sp)
 8007fc0:	dc000017 	ldw	r16,0(sp)
 8007fc4:	dec00a04 	addi	sp,sp,40
 8007fc8:	f800283a 	ret
 8007fcc:	a8800217 	ldw	r2,8(r21)
 8007fd0:	8c63883a 	add	r17,r17,r17
 8007fd4:	8c63883a 	add	r17,r17,r17
 8007fd8:	1445c83a 	sub	r2,r2,r17
 8007fdc:	a8800215 	stw	r2,8(r21)
 8007fe0:	b5800204 	addi	r22,r22,8
 8007fe4:	bdc00204 	addi	r23,r23,8
 8007fe8:	103fdb1e 	bne	r2,zero,8007f58 <__alt_data_end+0xfc007f58>
 8007fec:	0005883a 	mov	r2,zero
 8007ff0:	003fe806 	br	8007f94 <__alt_data_end+0xfc007f94>
 8007ff4:	80050600 	call	8005060 <__sfvwrite_r>
 8007ff8:	003fe606 	br	8007f94 <__alt_data_end+0xfc007f94>

08007ffc <__sprint_r>:
 8007ffc:	30c00217 	ldw	r3,8(r6)
 8008000:	18000126 	beq	r3,zero,8008008 <__sprint_r+0xc>
 8008004:	8007f001 	jmpi	8007f00 <__sprint_r.part.0>
 8008008:	30000115 	stw	zero,4(r6)
 800800c:	0005883a 	mov	r2,zero
 8008010:	f800283a 	ret

08008014 <___vfiprintf_internal_r>:
 8008014:	deffca04 	addi	sp,sp,-216
 8008018:	dd403115 	stw	r21,196(sp)
 800801c:	dfc03515 	stw	ra,212(sp)
 8008020:	df003415 	stw	fp,208(sp)
 8008024:	ddc03315 	stw	r23,204(sp)
 8008028:	dd803215 	stw	r22,200(sp)
 800802c:	dd003015 	stw	r20,192(sp)
 8008030:	dcc02f15 	stw	r19,188(sp)
 8008034:	dc802e15 	stw	r18,184(sp)
 8008038:	dc402d15 	stw	r17,180(sp)
 800803c:	dc002c15 	stw	r16,176(sp)
 8008040:	d9002115 	stw	r4,132(sp)
 8008044:	d9402015 	stw	r5,128(sp)
 8008048:	d9c02215 	stw	r7,136(sp)
 800804c:	302b883a 	mov	r21,r6
 8008050:	20000226 	beq	r4,zero,800805c <___vfiprintf_internal_r+0x48>
 8008054:	20800e17 	ldw	r2,56(r4)
 8008058:	1000cf26 	beq	r2,zero,8008398 <___vfiprintf_internal_r+0x384>
 800805c:	d8c02017 	ldw	r3,128(sp)
 8008060:	1880030b 	ldhu	r2,12(r3)
 8008064:	10c8000c 	andi	r3,r2,8192
 8008068:	1800071e 	bne	r3,zero,8008088 <___vfiprintf_internal_r+0x74>
 800806c:	d9402017 	ldw	r5,128(sp)
 8008070:	00f7ffc4 	movi	r3,-8193
 8008074:	10880014 	ori	r2,r2,8192
 8008078:	29001917 	ldw	r4,100(r5)
 800807c:	2880030d 	sth	r2,12(r5)
 8008080:	20c6703a 	and	r3,r4,r3
 8008084:	28c01915 	stw	r3,100(r5)
 8008088:	10c0020c 	andi	r3,r2,8
 800808c:	1800a526 	beq	r3,zero,8008324 <___vfiprintf_internal_r+0x310>
 8008090:	d9002017 	ldw	r4,128(sp)
 8008094:	20c00417 	ldw	r3,16(r4)
 8008098:	1800a226 	beq	r3,zero,8008324 <___vfiprintf_internal_r+0x310>
 800809c:	1080068c 	andi	r2,r2,26
 80080a0:	00c00284 	movi	r3,10
 80080a4:	10c0a826 	beq	r2,r3,8008348 <___vfiprintf_internal_r+0x334>
 80080a8:	d9001a04 	addi	r4,sp,104
 80080ac:	d94019c4 	addi	r5,sp,103
 80080b0:	048205f4 	movhi	r18,2071
 80080b4:	2145c83a 	sub	r2,r4,r5
 80080b8:	949cbd04 	addi	r18,r18,29428
 80080bc:	d9001e15 	stw	r4,120(sp)
 80080c0:	d9401f15 	stw	r5,124(sp)
 80080c4:	dec01a15 	stw	sp,104(sp)
 80080c8:	d8001c15 	stw	zero,112(sp)
 80080cc:	d8001b15 	stw	zero,108(sp)
 80080d0:	d811883a 	mov	r8,sp
 80080d4:	d8002615 	stw	zero,152(sp)
 80080d8:	d8002415 	stw	zero,144(sp)
 80080dc:	d8802815 	stw	r2,160(sp)
 80080e0:	a82d883a 	mov	r22,r21
 80080e4:	b0800007 	ldb	r2,0(r22)
 80080e8:	10040d26 	beq	r2,zero,8009120 <___vfiprintf_internal_r+0x110c>
 80080ec:	00c00944 	movi	r3,37
 80080f0:	b029883a 	mov	r20,r22
 80080f4:	10c0021e 	bne	r2,r3,8008100 <___vfiprintf_internal_r+0xec>
 80080f8:	00001606 	br	8008154 <___vfiprintf_internal_r+0x140>
 80080fc:	10c00326 	beq	r2,r3,800810c <___vfiprintf_internal_r+0xf8>
 8008100:	a5000044 	addi	r20,r20,1
 8008104:	a0800007 	ldb	r2,0(r20)
 8008108:	103ffc1e 	bne	r2,zero,80080fc <__alt_data_end+0xfc0080fc>
 800810c:	a5a1c83a 	sub	r16,r20,r22
 8008110:	80001026 	beq	r16,zero,8008154 <___vfiprintf_internal_r+0x140>
 8008114:	d8c01c17 	ldw	r3,112(sp)
 8008118:	d8801b17 	ldw	r2,108(sp)
 800811c:	45800015 	stw	r22,0(r8)
 8008120:	80c7883a 	add	r3,r16,r3
 8008124:	10800044 	addi	r2,r2,1
 8008128:	44000115 	stw	r16,4(r8)
 800812c:	d8c01c15 	stw	r3,112(sp)
 8008130:	d8801b15 	stw	r2,108(sp)
 8008134:	010001c4 	movi	r4,7
 8008138:	2080750e 	bge	r4,r2,8008310 <___vfiprintf_internal_r+0x2fc>
 800813c:	1803951e 	bne	r3,zero,8008f94 <___vfiprintf_internal_r+0xf80>
 8008140:	d8c02417 	ldw	r3,144(sp)
 8008144:	d8001b15 	stw	zero,108(sp)
 8008148:	d811883a 	mov	r8,sp
 800814c:	1c07883a 	add	r3,r3,r16
 8008150:	d8c02415 	stw	r3,144(sp)
 8008154:	a0800007 	ldb	r2,0(r20)
 8008158:	1002e026 	beq	r2,zero,8008cdc <___vfiprintf_internal_r+0xcc8>
 800815c:	a5800044 	addi	r22,r20,1
 8008160:	a0c00047 	ldb	r3,1(r20)
 8008164:	d8001d85 	stb	zero,118(sp)
 8008168:	0027883a 	mov	r19,zero
 800816c:	d8002305 	stb	zero,140(sp)
 8008170:	043fffc4 	movi	r16,-1
 8008174:	d8002515 	stw	zero,148(sp)
 8008178:	0023883a 	mov	r17,zero
 800817c:	05001604 	movi	r20,88
 8008180:	05400244 	movi	r21,9
 8008184:	402f883a 	mov	r23,r8
 8008188:	b5800044 	addi	r22,r22,1
 800818c:	18bff804 	addi	r2,r3,-32
 8008190:	a0827736 	bltu	r20,r2,8008b70 <___vfiprintf_internal_r+0xb5c>
 8008194:	100490ba 	slli	r2,r2,2
 8008198:	01020074 	movhi	r4,2049
 800819c:	21206b04 	addi	r4,r4,-32340
 80081a0:	1105883a 	add	r2,r2,r4
 80081a4:	10800017 	ldw	r2,0(r2)
 80081a8:	1000683a 	jmp	r2
 80081ac:	08008870 	cmpltui	zero,at,545
 80081b0:	08008b70 	cmpltui	zero,at,557
 80081b4:	08008b70 	cmpltui	zero,at,557
 80081b8:	0800888c 	andi	zero,at,546
 80081bc:	08008b70 	cmpltui	zero,at,557
 80081c0:	08008b70 	cmpltui	zero,at,557
 80081c4:	08008b70 	cmpltui	zero,at,557
 80081c8:	08008b70 	cmpltui	zero,at,557
 80081cc:	08008b70 	cmpltui	zero,at,557
 80081d0:	08008b70 	cmpltui	zero,at,557
 80081d4:	08008a94 	ori	zero,at,554
 80081d8:	08008ab8 	rdprs	zero,at,554
 80081dc:	08008b70 	cmpltui	zero,at,557
 80081e0:	080083b0 	cmpltui	zero,at,526
 80081e4:	08008acc 	andi	zero,at,555
 80081e8:	08008b70 	cmpltui	zero,at,557
 80081ec:	08008898 	cmpnei	zero,at,546
 80081f0:	080088a4 	muli	zero,at,546
 80081f4:	080088a4 	muli	zero,at,546
 80081f8:	080088a4 	muli	zero,at,546
 80081fc:	080088a4 	muli	zero,at,546
 8008200:	080088a4 	muli	zero,at,546
 8008204:	080088a4 	muli	zero,at,546
 8008208:	080088a4 	muli	zero,at,546
 800820c:	080088a4 	muli	zero,at,546
 8008210:	080088a4 	muli	zero,at,546
 8008214:	08008b70 	cmpltui	zero,at,557
 8008218:	08008b70 	cmpltui	zero,at,557
 800821c:	08008b70 	cmpltui	zero,at,557
 8008220:	08008b70 	cmpltui	zero,at,557
 8008224:	08008b70 	cmpltui	zero,at,557
 8008228:	08008b70 	cmpltui	zero,at,557
 800822c:	08008b70 	cmpltui	zero,at,557
 8008230:	08008b70 	cmpltui	zero,at,557
 8008234:	08008b70 	cmpltui	zero,at,557
 8008238:	08008b70 	cmpltui	zero,at,557
 800823c:	080088e4 	muli	zero,at,547
 8008240:	08008b70 	cmpltui	zero,at,557
 8008244:	08008b70 	cmpltui	zero,at,557
 8008248:	08008b70 	cmpltui	zero,at,557
 800824c:	08008b70 	cmpltui	zero,at,557
 8008250:	08008b70 	cmpltui	zero,at,557
 8008254:	08008b70 	cmpltui	zero,at,557
 8008258:	08008b70 	cmpltui	zero,at,557
 800825c:	08008b70 	cmpltui	zero,at,557
 8008260:	08008b70 	cmpltui	zero,at,557
 8008264:	08008b70 	cmpltui	zero,at,557
 8008268:	08008920 	cmpeqi	zero,at,548
 800826c:	08008b70 	cmpltui	zero,at,557
 8008270:	08008b70 	cmpltui	zero,at,557
 8008274:	08008b70 	cmpltui	zero,at,557
 8008278:	08008b70 	cmpltui	zero,at,557
 800827c:	08008b70 	cmpltui	zero,at,557
 8008280:	0800897c 	xorhi	zero,at,549
 8008284:	08008b70 	cmpltui	zero,at,557
 8008288:	08008b70 	cmpltui	zero,at,557
 800828c:	080089f0 	cmpltui	zero,at,551
 8008290:	08008b70 	cmpltui	zero,at,557
 8008294:	08008b70 	cmpltui	zero,at,557
 8008298:	08008b70 	cmpltui	zero,at,557
 800829c:	08008b70 	cmpltui	zero,at,557
 80082a0:	08008b70 	cmpltui	zero,at,557
 80082a4:	08008b70 	cmpltui	zero,at,557
 80082a8:	08008b70 	cmpltui	zero,at,557
 80082ac:	08008b70 	cmpltui	zero,at,557
 80082b0:	08008b70 	cmpltui	zero,at,557
 80082b4:	08008b70 	cmpltui	zero,at,557
 80082b8:	08008798 	cmpnei	zero,at,542
 80082bc:	080087c8 	cmpgei	zero,at,543
 80082c0:	08008b70 	cmpltui	zero,at,557
 80082c4:	08008b70 	cmpltui	zero,at,557
 80082c8:	08008b70 	cmpltui	zero,at,557
 80082cc:	08008b18 	cmpnei	zero,at,556
 80082d0:	080087c8 	cmpgei	zero,at,543
 80082d4:	08008b70 	cmpltui	zero,at,557
 80082d8:	08008b70 	cmpltui	zero,at,557
 80082dc:	08008670 	cmpltui	zero,at,537
 80082e0:	08008b70 	cmpltui	zero,at,557
 80082e4:	08008684 	addi	zero,at,538
 80082e8:	080086bc 	xorhi	zero,at,538
 80082ec:	080083bc 	xorhi	zero,at,526
 80082f0:	08008664 	muli	zero,at,537
 80082f4:	08008b70 	cmpltui	zero,at,557
 80082f8:	08008a30 	cmpltui	zero,at,552
 80082fc:	08008b70 	cmpltui	zero,at,557
 8008300:	08008a7c 	xorhi	zero,at,553
 8008304:	08008b70 	cmpltui	zero,at,557
 8008308:	08008b70 	cmpltui	zero,at,557
 800830c:	08008740 	call	800874 <__ram_exceptions_end+0x800644>
 8008310:	42000204 	addi	r8,r8,8
 8008314:	d8c02417 	ldw	r3,144(sp)
 8008318:	1c07883a 	add	r3,r3,r16
 800831c:	d8c02415 	stw	r3,144(sp)
 8008320:	003f8c06 	br	8008154 <__alt_data_end+0xfc008154>
 8008324:	d9402017 	ldw	r5,128(sp)
 8008328:	d9002117 	ldw	r4,132(sp)
 800832c:	8002bd00 	call	8002bd0 <__swsetup_r>
 8008330:	1003c11e 	bne	r2,zero,8009238 <___vfiprintf_internal_r+0x1224>
 8008334:	d9402017 	ldw	r5,128(sp)
 8008338:	00c00284 	movi	r3,10
 800833c:	2880030b 	ldhu	r2,12(r5)
 8008340:	1080068c 	andi	r2,r2,26
 8008344:	10ff581e 	bne	r2,r3,80080a8 <__alt_data_end+0xfc0080a8>
 8008348:	d8c02017 	ldw	r3,128(sp)
 800834c:	1880038f 	ldh	r2,14(r3)
 8008350:	103f5516 	blt	r2,zero,80080a8 <__alt_data_end+0xfc0080a8>
 8008354:	d9c02217 	ldw	r7,136(sp)
 8008358:	d9002117 	ldw	r4,132(sp)
 800835c:	a80d883a 	mov	r6,r21
 8008360:	180b883a 	mov	r5,r3
 8008364:	800953c0 	call	800953c <__sbprintf>
 8008368:	dfc03517 	ldw	ra,212(sp)
 800836c:	df003417 	ldw	fp,208(sp)
 8008370:	ddc03317 	ldw	r23,204(sp)
 8008374:	dd803217 	ldw	r22,200(sp)
 8008378:	dd403117 	ldw	r21,196(sp)
 800837c:	dd003017 	ldw	r20,192(sp)
 8008380:	dcc02f17 	ldw	r19,188(sp)
 8008384:	dc802e17 	ldw	r18,184(sp)
 8008388:	dc402d17 	ldw	r17,180(sp)
 800838c:	dc002c17 	ldw	r16,176(sp)
 8008390:	dec03604 	addi	sp,sp,216
 8008394:	f800283a 	ret
 8008398:	8004bdc0 	call	8004bdc <__sinit>
 800839c:	003f2f06 	br	800805c <__alt_data_end+0xfc00805c>
 80083a0:	d8c02517 	ldw	r3,148(sp)
 80083a4:	d8802215 	stw	r2,136(sp)
 80083a8:	00c7c83a 	sub	r3,zero,r3
 80083ac:	d8c02515 	stw	r3,148(sp)
 80083b0:	8c400114 	ori	r17,r17,4
 80083b4:	b0c00007 	ldb	r3,0(r22)
 80083b8:	003f7306 	br	8008188 <__alt_data_end+0xfc008188>
 80083bc:	00800c04 	movi	r2,48
 80083c0:	d9402217 	ldw	r5,136(sp)
 80083c4:	d8801d05 	stb	r2,116(sp)
 80083c8:	00801e04 	movi	r2,120
 80083cc:	d8801d45 	stb	r2,117(sp)
 80083d0:	d8001d85 	stb	zero,118(sp)
 80083d4:	b811883a 	mov	r8,r23
 80083d8:	28c00104 	addi	r3,r5,4
 80083dc:	2cc00017 	ldw	r19,0(r5)
 80083e0:	0029883a 	mov	r20,zero
 80083e4:	88800094 	ori	r2,r17,2
 80083e8:	80032516 	blt	r16,zero,8009080 <___vfiprintf_internal_r+0x106c>
 80083ec:	00bfdfc4 	movi	r2,-129
 80083f0:	88a2703a 	and	r17,r17,r2
 80083f4:	d8c02215 	stw	r3,136(sp)
 80083f8:	8c400094 	ori	r17,r17,2
 80083fc:	98032a1e 	bne	r19,zero,80090a8 <___vfiprintf_internal_r+0x1094>
 8008400:	008205f4 	movhi	r2,2071
 8008404:	109c5c04 	addi	r2,r2,29040
 8008408:	d8802615 	stw	r2,152(sp)
 800840c:	002b883a 	mov	r21,zero
 8008410:	8001741e 	bne	r16,zero,80089e4 <___vfiprintf_internal_r+0x9d0>
 8008414:	0021883a 	mov	r16,zero
 8008418:	0029883a 	mov	r20,zero
 800841c:	ddc01a04 	addi	r23,sp,104
 8008420:	8027883a 	mov	r19,r16
 8008424:	8500010e 	bge	r16,r20,800842c <___vfiprintf_internal_r+0x418>
 8008428:	a027883a 	mov	r19,r20
 800842c:	ad403fcc 	andi	r21,r21,255
 8008430:	ad40201c 	xori	r21,r21,128
 8008434:	ad7fe004 	addi	r21,r21,-128
 8008438:	a8000126 	beq	r21,zero,8008440 <___vfiprintf_internal_r+0x42c>
 800843c:	9cc00044 	addi	r19,r19,1
 8008440:	89c0008c 	andi	r7,r17,2
 8008444:	38000126 	beq	r7,zero,800844c <___vfiprintf_internal_r+0x438>
 8008448:	9cc00084 	addi	r19,r19,2
 800844c:	88c0210c 	andi	r3,r17,132
 8008450:	1801dd1e 	bne	r3,zero,8008bc8 <___vfiprintf_internal_r+0xbb4>
 8008454:	d9402517 	ldw	r5,148(sp)
 8008458:	2cebc83a 	sub	r21,r5,r19
 800845c:	0541da0e 	bge	zero,r21,8008bc8 <___vfiprintf_internal_r+0xbb4>
 8008460:	07000404 	movi	fp,16
 8008464:	d8801c17 	ldw	r2,112(sp)
 8008468:	e543be0e 	bge	fp,r21,8009364 <___vfiprintf_internal_r+0x1350>
 800846c:	014205f4 	movhi	r5,2071
 8008470:	295cc104 	addi	r5,r5,29444
 8008474:	dc002715 	stw	r16,156(sp)
 8008478:	d9801b17 	ldw	r6,108(sp)
 800847c:	a821883a 	mov	r16,r21
 8008480:	d9402315 	stw	r5,140(sp)
 8008484:	028001c4 	movi	r10,7
 8008488:	d9c02915 	stw	r7,164(sp)
 800848c:	182b883a 	mov	r21,r3
 8008490:	00000506 	br	80084a8 <___vfiprintf_internal_r+0x494>
 8008494:	31000084 	addi	r4,r6,2
 8008498:	42000204 	addi	r8,r8,8
 800849c:	180d883a 	mov	r6,r3
 80084a0:	843ffc04 	addi	r16,r16,-16
 80084a4:	e4000f0e 	bge	fp,r16,80084e4 <___vfiprintf_internal_r+0x4d0>
 80084a8:	010205f4 	movhi	r4,2071
 80084ac:	10800404 	addi	r2,r2,16
 80084b0:	30c00044 	addi	r3,r6,1
 80084b4:	211cc104 	addi	r4,r4,29444
 80084b8:	41000015 	stw	r4,0(r8)
 80084bc:	47000115 	stw	fp,4(r8)
 80084c0:	d8801c15 	stw	r2,112(sp)
 80084c4:	d8c01b15 	stw	r3,108(sp)
 80084c8:	50fff20e 	bge	r10,r3,8008494 <__alt_data_end+0xfc008494>
 80084cc:	1001b21e 	bne	r2,zero,8008b98 <___vfiprintf_internal_r+0xb84>
 80084d0:	843ffc04 	addi	r16,r16,-16
 80084d4:	000d883a 	mov	r6,zero
 80084d8:	01000044 	movi	r4,1
 80084dc:	d811883a 	mov	r8,sp
 80084e0:	e43ff116 	blt	fp,r16,80084a8 <__alt_data_end+0xfc0084a8>
 80084e4:	a807883a 	mov	r3,r21
 80084e8:	d9c02917 	ldw	r7,164(sp)
 80084ec:	802b883a 	mov	r21,r16
 80084f0:	dc002717 	ldw	r16,156(sp)
 80084f4:	d9402317 	ldw	r5,140(sp)
 80084f8:	a885883a 	add	r2,r21,r2
 80084fc:	45400115 	stw	r21,4(r8)
 8008500:	41400015 	stw	r5,0(r8)
 8008504:	d8801c15 	stw	r2,112(sp)
 8008508:	d9001b15 	stw	r4,108(sp)
 800850c:	014001c4 	movi	r5,7
 8008510:	29026216 	blt	r5,r4,8008e9c <___vfiprintf_internal_r+0xe88>
 8008514:	d9801d87 	ldb	r6,118(sp)
 8008518:	42000204 	addi	r8,r8,8
 800851c:	21400044 	addi	r5,r4,1
 8008520:	3001ae1e 	bne	r6,zero,8008bdc <___vfiprintf_internal_r+0xbc8>
 8008524:	3801bb26 	beq	r7,zero,8008c14 <___vfiprintf_internal_r+0xc00>
 8008528:	d9001d04 	addi	r4,sp,116
 800852c:	10800084 	addi	r2,r2,2
 8008530:	41000015 	stw	r4,0(r8)
 8008534:	01000084 	movi	r4,2
 8008538:	41000115 	stw	r4,4(r8)
 800853c:	d8801c15 	stw	r2,112(sp)
 8008540:	d9401b15 	stw	r5,108(sp)
 8008544:	010001c4 	movi	r4,7
 8008548:	2142680e 	bge	r4,r5,8008eec <___vfiprintf_internal_r+0xed8>
 800854c:	1002b11e 	bne	r2,zero,8009014 <___vfiprintf_internal_r+0x1000>
 8008550:	01802004 	movi	r6,128
 8008554:	01400044 	movi	r5,1
 8008558:	0009883a 	mov	r4,zero
 800855c:	d811883a 	mov	r8,sp
 8008560:	1981ae1e 	bne	r3,r6,8008c1c <___vfiprintf_internal_r+0xc08>
 8008564:	d8c02517 	ldw	r3,148(sp)
 8008568:	1cf9c83a 	sub	fp,r3,r19
 800856c:	0701ab0e 	bge	zero,fp,8008c1c <___vfiprintf_internal_r+0xc08>
 8008570:	05400404 	movi	r21,16
 8008574:	af03a90e 	bge	r21,fp,800941c <___vfiprintf_internal_r+0x1408>
 8008578:	014205f4 	movhi	r5,2071
 800857c:	295cbd04 	addi	r5,r5,29428
 8008580:	d9402315 	stw	r5,140(sp)
 8008584:	01c001c4 	movi	r7,7
 8008588:	00000506 	br	80085a0 <___vfiprintf_internal_r+0x58c>
 800858c:	21800084 	addi	r6,r4,2
 8008590:	42000204 	addi	r8,r8,8
 8008594:	1809883a 	mov	r4,r3
 8008598:	e73ffc04 	addi	fp,fp,-16
 800859c:	af000d0e 	bge	r21,fp,80085d4 <___vfiprintf_internal_r+0x5c0>
 80085a0:	10800404 	addi	r2,r2,16
 80085a4:	20c00044 	addi	r3,r4,1
 80085a8:	44800015 	stw	r18,0(r8)
 80085ac:	45400115 	stw	r21,4(r8)
 80085b0:	d8801c15 	stw	r2,112(sp)
 80085b4:	d8c01b15 	stw	r3,108(sp)
 80085b8:	38fff40e 	bge	r7,r3,800858c <__alt_data_end+0xfc00858c>
 80085bc:	10022b1e 	bne	r2,zero,8008e6c <___vfiprintf_internal_r+0xe58>
 80085c0:	e73ffc04 	addi	fp,fp,-16
 80085c4:	01800044 	movi	r6,1
 80085c8:	0009883a 	mov	r4,zero
 80085cc:	d811883a 	mov	r8,sp
 80085d0:	af3ff316 	blt	r21,fp,80085a0 <__alt_data_end+0xfc0085a0>
 80085d4:	d8c02317 	ldw	r3,140(sp)
 80085d8:	1705883a 	add	r2,r2,fp
 80085dc:	47000115 	stw	fp,4(r8)
 80085e0:	40c00015 	stw	r3,0(r8)
 80085e4:	d8801c15 	stw	r2,112(sp)
 80085e8:	d9801b15 	stw	r6,108(sp)
 80085ec:	00c001c4 	movi	r3,7
 80085f0:	19829416 	blt	r3,r6,8009044 <___vfiprintf_internal_r+0x1030>
 80085f4:	8521c83a 	sub	r16,r16,r20
 80085f8:	42000204 	addi	r8,r8,8
 80085fc:	31400044 	addi	r5,r6,1
 8008600:	3009883a 	mov	r4,r6
 8008604:	04018716 	blt	zero,r16,8008c24 <___vfiprintf_internal_r+0xc10>
 8008608:	a085883a 	add	r2,r20,r2
 800860c:	45c00015 	stw	r23,0(r8)
 8008610:	45000115 	stw	r20,4(r8)
 8008614:	d8801c15 	stw	r2,112(sp)
 8008618:	d9401b15 	stw	r5,108(sp)
 800861c:	00c001c4 	movi	r3,7
 8008620:	1941c20e 	bge	r3,r5,8008d2c <___vfiprintf_internal_r+0xd18>
 8008624:	1002531e 	bne	r2,zero,8008f74 <___vfiprintf_internal_r+0xf60>
 8008628:	d8001b15 	stw	zero,108(sp)
 800862c:	8c40010c 	andi	r17,r17,4
 8008630:	88023226 	beq	r17,zero,8008efc <___vfiprintf_internal_r+0xee8>
 8008634:	d9002517 	ldw	r4,148(sp)
 8008638:	24e3c83a 	sub	r17,r4,r19
 800863c:	04432916 	blt	zero,r17,80092e4 <___vfiprintf_internal_r+0x12d0>
 8008640:	d8802517 	ldw	r2,148(sp)
 8008644:	14c0010e 	bge	r2,r19,800864c <___vfiprintf_internal_r+0x638>
 8008648:	9805883a 	mov	r2,r19
 800864c:	d8c02417 	ldw	r3,144(sp)
 8008650:	1887883a 	add	r3,r3,r2
 8008654:	d8c02415 	stw	r3,144(sp)
 8008658:	d8001b15 	stw	zero,108(sp)
 800865c:	d811883a 	mov	r8,sp
 8008660:	003ea006 	br	80080e4 <__alt_data_end+0xfc0080e4>
 8008664:	8c400814 	ori	r17,r17,32
 8008668:	b0c00007 	ldb	r3,0(r22)
 800866c:	003ec606 	br	8008188 <__alt_data_end+0xfc008188>
 8008670:	b0c00007 	ldb	r3,0(r22)
 8008674:	00801b04 	movi	r2,108
 8008678:	18832026 	beq	r3,r2,80092fc <___vfiprintf_internal_r+0x12e8>
 800867c:	8c400414 	ori	r17,r17,16
 8008680:	003ec106 	br	8008188 <__alt_data_end+0xfc008188>
 8008684:	9cc03fcc 	andi	r19,r19,255
 8008688:	b811883a 	mov	r8,r23
 800868c:	9803981e 	bne	r19,zero,80094f0 <___vfiprintf_internal_r+0x14dc>
 8008690:	8880080c 	andi	r2,r17,32
 8008694:	1002be26 	beq	r2,zero,8009190 <___vfiprintf_internal_r+0x117c>
 8008698:	d9002217 	ldw	r4,136(sp)
 800869c:	d9402417 	ldw	r5,144(sp)
 80086a0:	20800017 	ldw	r2,0(r4)
 80086a4:	2807d7fa 	srai	r3,r5,31
 80086a8:	21000104 	addi	r4,r4,4
 80086ac:	d9002215 	stw	r4,136(sp)
 80086b0:	11400015 	stw	r5,0(r2)
 80086b4:	10c00115 	stw	r3,4(r2)
 80086b8:	003e8a06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 80086bc:	9cc03fcc 	andi	r19,r19,255
 80086c0:	b811883a 	mov	r8,r23
 80086c4:	9803871e 	bne	r19,zero,80094e4 <___vfiprintf_internal_r+0x14d0>
 80086c8:	8880080c 	andi	r2,r17,32
 80086cc:	10009a26 	beq	r2,zero,8008938 <___vfiprintf_internal_r+0x924>
 80086d0:	d9002217 	ldw	r4,136(sp)
 80086d4:	d8001d85 	stb	zero,118(sp)
 80086d8:	20800204 	addi	r2,r4,8
 80086dc:	24c00017 	ldw	r19,0(r4)
 80086e0:	25000117 	ldw	r20,4(r4)
 80086e4:	8002a416 	blt	r16,zero,8009178 <___vfiprintf_internal_r+0x1164>
 80086e8:	013fdfc4 	movi	r4,-129
 80086ec:	9d06b03a 	or	r3,r19,r20
 80086f0:	d8802215 	stw	r2,136(sp)
 80086f4:	8922703a 	and	r17,r17,r4
 80086f8:	18009b26 	beq	r3,zero,8008968 <___vfiprintf_internal_r+0x954>
 80086fc:	002b883a 	mov	r21,zero
 8008700:	ddc01a04 	addi	r23,sp,104
 8008704:	9806d0fa 	srli	r3,r19,3
 8008708:	a008977a 	slli	r4,r20,29
 800870c:	a028d0fa 	srli	r20,r20,3
 8008710:	9cc001cc 	andi	r19,r19,7
 8008714:	98800c04 	addi	r2,r19,48
 8008718:	bdffffc4 	addi	r23,r23,-1
 800871c:	20e6b03a 	or	r19,r4,r3
 8008720:	b8800005 	stb	r2,0(r23)
 8008724:	9d06b03a 	or	r3,r19,r20
 8008728:	183ff61e 	bne	r3,zero,8008704 <__alt_data_end+0xfc008704>
 800872c:	88c0004c 	andi	r3,r17,1
 8008730:	18021f1e 	bne	r3,zero,8008fb0 <___vfiprintf_internal_r+0xf9c>
 8008734:	d9401e17 	ldw	r5,120(sp)
 8008738:	2de9c83a 	sub	r20,r5,r23
 800873c:	003f3806 	br	8008420 <__alt_data_end+0xfc008420>
 8008740:	9cc03fcc 	andi	r19,r19,255
 8008744:	b811883a 	mov	r8,r23
 8008748:	98034f1e 	bne	r19,zero,8009488 <___vfiprintf_internal_r+0x1474>
 800874c:	008205f4 	movhi	r2,2071
 8008750:	109c5c04 	addi	r2,r2,29040
 8008754:	d8802615 	stw	r2,152(sp)
 8008758:	8880080c 	andi	r2,r17,32
 800875c:	1000ac26 	beq	r2,zero,8008a10 <___vfiprintf_internal_r+0x9fc>
 8008760:	d9002217 	ldw	r4,136(sp)
 8008764:	24c00017 	ldw	r19,0(r4)
 8008768:	25000117 	ldw	r20,4(r4)
 800876c:	21000204 	addi	r4,r4,8
 8008770:	d9002215 	stw	r4,136(sp)
 8008774:	8880004c 	andi	r2,r17,1
 8008778:	1001e726 	beq	r2,zero,8008f18 <___vfiprintf_internal_r+0xf04>
 800877c:	9d04b03a 	or	r2,r19,r20
 8008780:	10025c1e 	bne	r2,zero,80090f4 <___vfiprintf_internal_r+0x10e0>
 8008784:	d8001d85 	stb	zero,118(sp)
 8008788:	80024416 	blt	r16,zero,800909c <___vfiprintf_internal_r+0x1088>
 800878c:	00bfdfc4 	movi	r2,-129
 8008790:	88a2703a 	and	r17,r17,r2
 8008794:	003f1d06 	br	800840c <__alt_data_end+0xfc00840c>
 8008798:	d8c02217 	ldw	r3,136(sp)
 800879c:	04c00044 	movi	r19,1
 80087a0:	b811883a 	mov	r8,r23
 80087a4:	18800017 	ldw	r2,0(r3)
 80087a8:	18c00104 	addi	r3,r3,4
 80087ac:	d8001d85 	stb	zero,118(sp)
 80087b0:	d8801005 	stb	r2,64(sp)
 80087b4:	d8c02215 	stw	r3,136(sp)
 80087b8:	9829883a 	mov	r20,r19
 80087bc:	ddc01004 	addi	r23,sp,64
 80087c0:	0021883a 	mov	r16,zero
 80087c4:	003f1e06 	br	8008440 <__alt_data_end+0xfc008440>
 80087c8:	9cc03fcc 	andi	r19,r19,255
 80087cc:	b811883a 	mov	r8,r23
 80087d0:	9803331e 	bne	r19,zero,80094a0 <___vfiprintf_internal_r+0x148c>
 80087d4:	8880080c 	andi	r2,r17,32
 80087d8:	10004826 	beq	r2,zero,80088fc <___vfiprintf_internal_r+0x8e8>
 80087dc:	d9002217 	ldw	r4,136(sp)
 80087e0:	20800117 	ldw	r2,4(r4)
 80087e4:	24c00017 	ldw	r19,0(r4)
 80087e8:	21000204 	addi	r4,r4,8
 80087ec:	d9002215 	stw	r4,136(sp)
 80087f0:	1029883a 	mov	r20,r2
 80087f4:	10024c16 	blt	r2,zero,8009128 <___vfiprintf_internal_r+0x1114>
 80087f8:	dd401d83 	ldbu	r21,118(sp)
 80087fc:	80007116 	blt	r16,zero,80089c4 <___vfiprintf_internal_r+0x9b0>
 8008800:	00ffdfc4 	movi	r3,-129
 8008804:	9d04b03a 	or	r2,r19,r20
 8008808:	88e2703a 	and	r17,r17,r3
 800880c:	1000d126 	beq	r2,zero,8008b54 <___vfiprintf_internal_r+0xb40>
 8008810:	a0023526 	beq	r20,zero,80090e8 <___vfiprintf_internal_r+0x10d4>
 8008814:	ddc01a04 	addi	r23,sp,104
 8008818:	4039883a 	mov	fp,r8
 800881c:	9809883a 	mov	r4,r19
 8008820:	a00b883a 	mov	r5,r20
 8008824:	01800284 	movi	r6,10
 8008828:	000f883a 	mov	r7,zero
 800882c:	800a5400 	call	800a540 <__umoddi3>
 8008830:	10800c04 	addi	r2,r2,48
 8008834:	bdffffc4 	addi	r23,r23,-1
 8008838:	9809883a 	mov	r4,r19
 800883c:	a00b883a 	mov	r5,r20
 8008840:	b8800005 	stb	r2,0(r23)
 8008844:	01800284 	movi	r6,10
 8008848:	000f883a 	mov	r7,zero
 800884c:	8009f440 	call	8009f44 <__udivdi3>
 8008850:	1027883a 	mov	r19,r2
 8008854:	10c4b03a 	or	r2,r2,r3
 8008858:	1829883a 	mov	r20,r3
 800885c:	103fef1e 	bne	r2,zero,800881c <__alt_data_end+0xfc00881c>
 8008860:	d9001e17 	ldw	r4,120(sp)
 8008864:	e011883a 	mov	r8,fp
 8008868:	25e9c83a 	sub	r20,r4,r23
 800886c:	003eec06 	br	8008420 <__alt_data_end+0xfc008420>
 8008870:	d8802307 	ldb	r2,140(sp)
 8008874:	1002361e 	bne	r2,zero,8009150 <___vfiprintf_internal_r+0x113c>
 8008878:	00c00804 	movi	r3,32
 800887c:	d8c02305 	stb	r3,140(sp)
 8008880:	04c00044 	movi	r19,1
 8008884:	b0c00007 	ldb	r3,0(r22)
 8008888:	003e3f06 	br	8008188 <__alt_data_end+0xfc008188>
 800888c:	8c400054 	ori	r17,r17,1
 8008890:	b0c00007 	ldb	r3,0(r22)
 8008894:	003e3c06 	br	8008188 <__alt_data_end+0xfc008188>
 8008898:	8c402014 	ori	r17,r17,128
 800889c:	b0c00007 	ldb	r3,0(r22)
 80088a0:	003e3906 	br	8008188 <__alt_data_end+0xfc008188>
 80088a4:	dc002715 	stw	r16,156(sp)
 80088a8:	d8002515 	stw	zero,148(sp)
 80088ac:	1f3ff404 	addi	fp,r3,-48
 80088b0:	0009883a 	mov	r4,zero
 80088b4:	b021883a 	mov	r16,r22
 80088b8:	01400284 	movi	r5,10
 80088bc:	800061c0 	call	800061c <__mulsi3>
 80088c0:	80c00007 	ldb	r3,0(r16)
 80088c4:	e089883a 	add	r4,fp,r2
 80088c8:	b5800044 	addi	r22,r22,1
 80088cc:	1f3ff404 	addi	fp,r3,-48
 80088d0:	b021883a 	mov	r16,r22
 80088d4:	af3ff82e 	bgeu	r21,fp,80088b8 <__alt_data_end+0xfc0088b8>
 80088d8:	d9002515 	stw	r4,148(sp)
 80088dc:	dc002717 	ldw	r16,156(sp)
 80088e0:	003e2a06 	br	800818c <__alt_data_end+0xfc00818c>
 80088e4:	9cc03fcc 	andi	r19,r19,255
 80088e8:	b811883a 	mov	r8,r23
 80088ec:	9802e91e 	bne	r19,zero,8009494 <___vfiprintf_internal_r+0x1480>
 80088f0:	8c400414 	ori	r17,r17,16
 80088f4:	8880080c 	andi	r2,r17,32
 80088f8:	103fb81e 	bne	r2,zero,80087dc <__alt_data_end+0xfc0087dc>
 80088fc:	8880040c 	andi	r2,r17,16
 8008900:	10022e26 	beq	r2,zero,80091bc <___vfiprintf_internal_r+0x11a8>
 8008904:	d9402217 	ldw	r5,136(sp)
 8008908:	2cc00017 	ldw	r19,0(r5)
 800890c:	29400104 	addi	r5,r5,4
 8008910:	d9402215 	stw	r5,136(sp)
 8008914:	9829d7fa 	srai	r20,r19,31
 8008918:	a005883a 	mov	r2,r20
 800891c:	003fb506 	br	80087f4 <__alt_data_end+0xfc0087f4>
 8008920:	9cc03fcc 	andi	r19,r19,255
 8008924:	b811883a 	mov	r8,r23
 8008928:	9802fa1e 	bne	r19,zero,8009514 <___vfiprintf_internal_r+0x1500>
 800892c:	8c400414 	ori	r17,r17,16
 8008930:	8880080c 	andi	r2,r17,32
 8008934:	103f661e 	bne	r2,zero,80086d0 <__alt_data_end+0xfc0086d0>
 8008938:	8880040c 	andi	r2,r17,16
 800893c:	10020626 	beq	r2,zero,8009158 <___vfiprintf_internal_r+0x1144>
 8008940:	d9402217 	ldw	r5,136(sp)
 8008944:	d8001d85 	stb	zero,118(sp)
 8008948:	0029883a 	mov	r20,zero
 800894c:	28800104 	addi	r2,r5,4
 8008950:	2cc00017 	ldw	r19,0(r5)
 8008954:	80020816 	blt	r16,zero,8009178 <___vfiprintf_internal_r+0x1164>
 8008958:	00ffdfc4 	movi	r3,-129
 800895c:	d8802215 	stw	r2,136(sp)
 8008960:	88e2703a 	and	r17,r17,r3
 8008964:	983f651e 	bne	r19,zero,80086fc <__alt_data_end+0xfc0086fc>
 8008968:	002b883a 	mov	r21,zero
 800896c:	8002cf26 	beq	r16,zero,80094ac <___vfiprintf_internal_r+0x1498>
 8008970:	0027883a 	mov	r19,zero
 8008974:	0029883a 	mov	r20,zero
 8008978:	003f6106 	br	8008700 <__alt_data_end+0xfc008700>
 800897c:	9cc03fcc 	andi	r19,r19,255
 8008980:	b811883a 	mov	r8,r23
 8008984:	9802e01e 	bne	r19,zero,8009508 <___vfiprintf_internal_r+0x14f4>
 8008988:	8c400414 	ori	r17,r17,16
 800898c:	8880080c 	andi	r2,r17,32
 8008990:	1000641e 	bne	r2,zero,8008b24 <___vfiprintf_internal_r+0xb10>
 8008994:	8880040c 	andi	r2,r17,16
 8008998:	1001c81e 	bne	r2,zero,80090bc <___vfiprintf_internal_r+0x10a8>
 800899c:	8880100c 	andi	r2,r17,64
 80089a0:	d8001d85 	stb	zero,118(sp)
 80089a4:	1002281e 	bne	r2,zero,8009248 <___vfiprintf_internal_r+0x1234>
 80089a8:	d9002217 	ldw	r4,136(sp)
 80089ac:	0029883a 	mov	r20,zero
 80089b0:	20800104 	addi	r2,r4,4
 80089b4:	24c00017 	ldw	r19,0(r4)
 80089b8:	8001c60e 	bge	r16,zero,80090d4 <___vfiprintf_internal_r+0x10c0>
 80089bc:	d8802215 	stw	r2,136(sp)
 80089c0:	002b883a 	mov	r21,zero
 80089c4:	9d04b03a 	or	r2,r19,r20
 80089c8:	103f911e 	bne	r2,zero,8008810 <__alt_data_end+0xfc008810>
 80089cc:	00800044 	movi	r2,1
 80089d0:	10803fcc 	andi	r2,r2,255
 80089d4:	00c00044 	movi	r3,1
 80089d8:	10c05f26 	beq	r2,r3,8008b58 <___vfiprintf_internal_r+0xb44>
 80089dc:	00c00084 	movi	r3,2
 80089e0:	10ffe31e 	bne	r2,r3,8008970 <__alt_data_end+0xfc008970>
 80089e4:	0027883a 	mov	r19,zero
 80089e8:	0029883a 	mov	r20,zero
 80089ec:	00015106 	br	8008f34 <___vfiprintf_internal_r+0xf20>
 80089f0:	9cc03fcc 	andi	r19,r19,255
 80089f4:	b811883a 	mov	r8,r23
 80089f8:	9802c01e 	bne	r19,zero,80094fc <___vfiprintf_internal_r+0x14e8>
 80089fc:	014205f4 	movhi	r5,2071
 8008a00:	295c5704 	addi	r5,r5,29020
 8008a04:	d9402615 	stw	r5,152(sp)
 8008a08:	8880080c 	andi	r2,r17,32
 8008a0c:	103f541e 	bne	r2,zero,8008760 <__alt_data_end+0xfc008760>
 8008a10:	8880040c 	andi	r2,r17,16
 8008a14:	1001f226 	beq	r2,zero,80091e0 <___vfiprintf_internal_r+0x11cc>
 8008a18:	d9402217 	ldw	r5,136(sp)
 8008a1c:	0029883a 	mov	r20,zero
 8008a20:	2cc00017 	ldw	r19,0(r5)
 8008a24:	29400104 	addi	r5,r5,4
 8008a28:	d9402215 	stw	r5,136(sp)
 8008a2c:	003f5106 	br	8008774 <__alt_data_end+0xfc008774>
 8008a30:	d8c02217 	ldw	r3,136(sp)
 8008a34:	b811883a 	mov	r8,r23
 8008a38:	d8001d85 	stb	zero,118(sp)
 8008a3c:	1dc00017 	ldw	r23,0(r3)
 8008a40:	1f000104 	addi	fp,r3,4
 8008a44:	b8025926 	beq	r23,zero,80093ac <___vfiprintf_internal_r+0x1398>
 8008a48:	80023316 	blt	r16,zero,8009318 <___vfiprintf_internal_r+0x1304>
 8008a4c:	800d883a 	mov	r6,r16
 8008a50:	000b883a 	mov	r5,zero
 8008a54:	b809883a 	mov	r4,r23
 8008a58:	da002a15 	stw	r8,168(sp)
 8008a5c:	80061540 	call	8006154 <memchr>
 8008a60:	da002a17 	ldw	r8,168(sp)
 8008a64:	10026826 	beq	r2,zero,8009408 <___vfiprintf_internal_r+0x13f4>
 8008a68:	15e9c83a 	sub	r20,r2,r23
 8008a6c:	dd401d83 	ldbu	r21,118(sp)
 8008a70:	df002215 	stw	fp,136(sp)
 8008a74:	0021883a 	mov	r16,zero
 8008a78:	003e6906 	br	8008420 <__alt_data_end+0xfc008420>
 8008a7c:	9cc03fcc 	andi	r19,r19,255
 8008a80:	b811883a 	mov	r8,r23
 8008a84:	983fc126 	beq	r19,zero,800898c <__alt_data_end+0xfc00898c>
 8008a88:	d8c02303 	ldbu	r3,140(sp)
 8008a8c:	d8c01d85 	stb	r3,118(sp)
 8008a90:	003fbe06 	br	800898c <__alt_data_end+0xfc00898c>
 8008a94:	d9002217 	ldw	r4,136(sp)
 8008a98:	d9402217 	ldw	r5,136(sp)
 8008a9c:	21000017 	ldw	r4,0(r4)
 8008aa0:	28800104 	addi	r2,r5,4
 8008aa4:	d9002515 	stw	r4,148(sp)
 8008aa8:	203e3d16 	blt	r4,zero,80083a0 <__alt_data_end+0xfc0083a0>
 8008aac:	d8802215 	stw	r2,136(sp)
 8008ab0:	b0c00007 	ldb	r3,0(r22)
 8008ab4:	003db406 	br	8008188 <__alt_data_end+0xfc008188>
 8008ab8:	00c00ac4 	movi	r3,43
 8008abc:	d8c02305 	stb	r3,140(sp)
 8008ac0:	04c00044 	movi	r19,1
 8008ac4:	b0c00007 	ldb	r3,0(r22)
 8008ac8:	003daf06 	br	8008188 <__alt_data_end+0xfc008188>
 8008acc:	b0c00007 	ldb	r3,0(r22)
 8008ad0:	01000a84 	movi	r4,42
 8008ad4:	b4000044 	addi	r16,r22,1
 8008ad8:	19025e26 	beq	r3,r4,8009454 <___vfiprintf_internal_r+0x1440>
 8008adc:	1f3ff404 	addi	fp,r3,-48
 8008ae0:	0009883a 	mov	r4,zero
 8008ae4:	af025236 	bltu	r21,fp,8009430 <___vfiprintf_internal_r+0x141c>
 8008ae8:	01400284 	movi	r5,10
 8008aec:	800061c0 	call	800061c <__mulsi3>
 8008af0:	80c00007 	ldb	r3,0(r16)
 8008af4:	1709883a 	add	r4,r2,fp
 8008af8:	85800044 	addi	r22,r16,1
 8008afc:	1f3ff404 	addi	fp,r3,-48
 8008b00:	b021883a 	mov	r16,r22
 8008b04:	af3ff82e 	bgeu	r21,fp,8008ae8 <__alt_data_end+0xfc008ae8>
 8008b08:	2021883a 	mov	r16,r4
 8008b0c:	203d9f0e 	bge	r4,zero,800818c <__alt_data_end+0xfc00818c>
 8008b10:	043fffc4 	movi	r16,-1
 8008b14:	003d9d06 	br	800818c <__alt_data_end+0xfc00818c>
 8008b18:	8c401014 	ori	r17,r17,64
 8008b1c:	b0c00007 	ldb	r3,0(r22)
 8008b20:	003d9906 	br	8008188 <__alt_data_end+0xfc008188>
 8008b24:	d9002217 	ldw	r4,136(sp)
 8008b28:	d8001d85 	stb	zero,118(sp)
 8008b2c:	20c00204 	addi	r3,r4,8
 8008b30:	24c00017 	ldw	r19,0(r4)
 8008b34:	25000117 	ldw	r20,4(r4)
 8008b38:	8001e716 	blt	r16,zero,80092d8 <___vfiprintf_internal_r+0x12c4>
 8008b3c:	013fdfc4 	movi	r4,-129
 8008b40:	9d04b03a 	or	r2,r19,r20
 8008b44:	d8c02215 	stw	r3,136(sp)
 8008b48:	8922703a 	and	r17,r17,r4
 8008b4c:	002b883a 	mov	r21,zero
 8008b50:	103f2f1e 	bne	r2,zero,8008810 <__alt_data_end+0xfc008810>
 8008b54:	803e2f26 	beq	r16,zero,8008414 <__alt_data_end+0xfc008414>
 8008b58:	0027883a 	mov	r19,zero
 8008b5c:	9cc00c04 	addi	r19,r19,48
 8008b60:	dcc019c5 	stb	r19,103(sp)
 8008b64:	dd002817 	ldw	r20,160(sp)
 8008b68:	ddc019c4 	addi	r23,sp,103
 8008b6c:	003e2c06 	br	8008420 <__alt_data_end+0xfc008420>
 8008b70:	9cc03fcc 	andi	r19,r19,255
 8008b74:	b811883a 	mov	r8,r23
 8008b78:	9802571e 	bne	r19,zero,80094d8 <___vfiprintf_internal_r+0x14c4>
 8008b7c:	18005726 	beq	r3,zero,8008cdc <___vfiprintf_internal_r+0xcc8>
 8008b80:	04c00044 	movi	r19,1
 8008b84:	d8c01005 	stb	r3,64(sp)
 8008b88:	d8001d85 	stb	zero,118(sp)
 8008b8c:	9829883a 	mov	r20,r19
 8008b90:	ddc01004 	addi	r23,sp,64
 8008b94:	003f0a06 	br	80087c0 <__alt_data_end+0xfc0087c0>
 8008b98:	d9402017 	ldw	r5,128(sp)
 8008b9c:	d9002117 	ldw	r4,132(sp)
 8008ba0:	d9801a04 	addi	r6,sp,104
 8008ba4:	da802a15 	stw	r10,168(sp)
 8008ba8:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008bac:	da802a17 	ldw	r10,168(sp)
 8008bb0:	1000501e 	bne	r2,zero,8008cf4 <___vfiprintf_internal_r+0xce0>
 8008bb4:	d9801b17 	ldw	r6,108(sp)
 8008bb8:	d8801c17 	ldw	r2,112(sp)
 8008bbc:	d811883a 	mov	r8,sp
 8008bc0:	31000044 	addi	r4,r6,1
 8008bc4:	003e3606 	br	80084a0 <__alt_data_end+0xfc0084a0>
 8008bc8:	d9001b17 	ldw	r4,108(sp)
 8008bcc:	d8801c17 	ldw	r2,112(sp)
 8008bd0:	21400044 	addi	r5,r4,1
 8008bd4:	d9801d87 	ldb	r6,118(sp)
 8008bd8:	303e5226 	beq	r6,zero,8008524 <__alt_data_end+0xfc008524>
 8008bdc:	01800044 	movi	r6,1
 8008be0:	d9001d84 	addi	r4,sp,118
 8008be4:	1185883a 	add	r2,r2,r6
 8008be8:	41000015 	stw	r4,0(r8)
 8008bec:	41800115 	stw	r6,4(r8)
 8008bf0:	d8801c15 	stw	r2,112(sp)
 8008bf4:	d9401b15 	stw	r5,108(sp)
 8008bf8:	010001c4 	movi	r4,7
 8008bfc:	2140b00e 	bge	r4,r5,8008ec0 <___vfiprintf_internal_r+0xeac>
 8008c00:	1000f61e 	bne	r2,zero,8008fdc <___vfiprintf_internal_r+0xfc8>
 8008c04:	3800b31e 	bne	r7,zero,8008ed4 <___vfiprintf_internal_r+0xec0>
 8008c08:	0009883a 	mov	r4,zero
 8008c0c:	300b883a 	mov	r5,r6
 8008c10:	d811883a 	mov	r8,sp
 8008c14:	01802004 	movi	r6,128
 8008c18:	19be5226 	beq	r3,r6,8008564 <__alt_data_end+0xfc008564>
 8008c1c:	8521c83a 	sub	r16,r16,r20
 8008c20:	043e790e 	bge	zero,r16,8008608 <__alt_data_end+0xfc008608>
 8008c24:	05400404 	movi	r21,16
 8008c28:	ac01b00e 	bge	r21,r16,80092ec <___vfiprintf_internal_r+0x12d8>
 8008c2c:	014205f4 	movhi	r5,2071
 8008c30:	295cbd04 	addi	r5,r5,29428
 8008c34:	d9402315 	stw	r5,140(sp)
 8008c38:	070001c4 	movi	fp,7
 8008c3c:	00000506 	br	8008c54 <___vfiprintf_internal_r+0xc40>
 8008c40:	21400084 	addi	r5,r4,2
 8008c44:	42000204 	addi	r8,r8,8
 8008c48:	1809883a 	mov	r4,r3
 8008c4c:	843ffc04 	addi	r16,r16,-16
 8008c50:	ac000d0e 	bge	r21,r16,8008c88 <___vfiprintf_internal_r+0xc74>
 8008c54:	10800404 	addi	r2,r2,16
 8008c58:	20c00044 	addi	r3,r4,1
 8008c5c:	44800015 	stw	r18,0(r8)
 8008c60:	45400115 	stw	r21,4(r8)
 8008c64:	d8801c15 	stw	r2,112(sp)
 8008c68:	d8c01b15 	stw	r3,108(sp)
 8008c6c:	e0fff40e 	bge	fp,r3,8008c40 <__alt_data_end+0xfc008c40>
 8008c70:	1000101e 	bne	r2,zero,8008cb4 <___vfiprintf_internal_r+0xca0>
 8008c74:	843ffc04 	addi	r16,r16,-16
 8008c78:	01400044 	movi	r5,1
 8008c7c:	0009883a 	mov	r4,zero
 8008c80:	d811883a 	mov	r8,sp
 8008c84:	ac3ff316 	blt	r21,r16,8008c54 <__alt_data_end+0xfc008c54>
 8008c88:	d8c02317 	ldw	r3,140(sp)
 8008c8c:	1405883a 	add	r2,r2,r16
 8008c90:	44000115 	stw	r16,4(r8)
 8008c94:	40c00015 	stw	r3,0(r8)
 8008c98:	d8801c15 	stw	r2,112(sp)
 8008c9c:	d9401b15 	stw	r5,108(sp)
 8008ca0:	00c001c4 	movi	r3,7
 8008ca4:	19401916 	blt	r3,r5,8008d0c <___vfiprintf_internal_r+0xcf8>
 8008ca8:	42000204 	addi	r8,r8,8
 8008cac:	29400044 	addi	r5,r5,1
 8008cb0:	003e5506 	br	8008608 <__alt_data_end+0xfc008608>
 8008cb4:	d9402017 	ldw	r5,128(sp)
 8008cb8:	d9002117 	ldw	r4,132(sp)
 8008cbc:	d9801a04 	addi	r6,sp,104
 8008cc0:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008cc4:	10000b1e 	bne	r2,zero,8008cf4 <___vfiprintf_internal_r+0xce0>
 8008cc8:	d9001b17 	ldw	r4,108(sp)
 8008ccc:	d8801c17 	ldw	r2,112(sp)
 8008cd0:	d811883a 	mov	r8,sp
 8008cd4:	21400044 	addi	r5,r4,1
 8008cd8:	003fdc06 	br	8008c4c <__alt_data_end+0xfc008c4c>
 8008cdc:	d8801c17 	ldw	r2,112(sp)
 8008ce0:	10000426 	beq	r2,zero,8008cf4 <___vfiprintf_internal_r+0xce0>
 8008ce4:	d9402017 	ldw	r5,128(sp)
 8008ce8:	d9002117 	ldw	r4,132(sp)
 8008cec:	d9801a04 	addi	r6,sp,104
 8008cf0:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008cf4:	d9402017 	ldw	r5,128(sp)
 8008cf8:	2880030b 	ldhu	r2,12(r5)
 8008cfc:	1080100c 	andi	r2,r2,64
 8008d00:	10014d1e 	bne	r2,zero,8009238 <___vfiprintf_internal_r+0x1224>
 8008d04:	d8802417 	ldw	r2,144(sp)
 8008d08:	003d9706 	br	8008368 <__alt_data_end+0xfc008368>
 8008d0c:	1000d21e 	bne	r2,zero,8009058 <___vfiprintf_internal_r+0x1044>
 8008d10:	00c00044 	movi	r3,1
 8008d14:	a005883a 	mov	r2,r20
 8008d18:	ddc00015 	stw	r23,0(sp)
 8008d1c:	dd000115 	stw	r20,4(sp)
 8008d20:	dd001c15 	stw	r20,112(sp)
 8008d24:	d8c01b15 	stw	r3,108(sp)
 8008d28:	d811883a 	mov	r8,sp
 8008d2c:	42000204 	addi	r8,r8,8
 8008d30:	8c40010c 	andi	r17,r17,4
 8008d34:	88004026 	beq	r17,zero,8008e38 <___vfiprintf_internal_r+0xe24>
 8008d38:	d9002517 	ldw	r4,148(sp)
 8008d3c:	24e3c83a 	sub	r17,r4,r19
 8008d40:	04403d0e 	bge	zero,r17,8008e38 <___vfiprintf_internal_r+0xe24>
 8008d44:	04000404 	movi	r16,16
 8008d48:	8441a90e 	bge	r16,r17,80093f0 <___vfiprintf_internal_r+0x13dc>
 8008d4c:	00c205f4 	movhi	r3,2071
 8008d50:	18dcc104 	addi	r3,r3,29444
 8008d54:	d9001b17 	ldw	r4,108(sp)
 8008d58:	d8c02315 	stw	r3,140(sp)
 8008d5c:	050001c4 	movi	r20,7
 8008d60:	dd402117 	ldw	r21,132(sp)
 8008d64:	ddc02017 	ldw	r23,128(sp)
 8008d68:	00000506 	br	8008d80 <___vfiprintf_internal_r+0xd6c>
 8008d6c:	21400084 	addi	r5,r4,2
 8008d70:	42000204 	addi	r8,r8,8
 8008d74:	1809883a 	mov	r4,r3
 8008d78:	8c7ffc04 	addi	r17,r17,-16
 8008d7c:	84400f0e 	bge	r16,r17,8008dbc <___vfiprintf_internal_r+0xda8>
 8008d80:	014205f4 	movhi	r5,2071
 8008d84:	10800404 	addi	r2,r2,16
 8008d88:	20c00044 	addi	r3,r4,1
 8008d8c:	295cc104 	addi	r5,r5,29444
 8008d90:	41400015 	stw	r5,0(r8)
 8008d94:	44000115 	stw	r16,4(r8)
 8008d98:	d8801c15 	stw	r2,112(sp)
 8008d9c:	d8c01b15 	stw	r3,108(sp)
 8008da0:	a0fff20e 	bge	r20,r3,8008d6c <__alt_data_end+0xfc008d6c>
 8008da4:	1000141e 	bne	r2,zero,8008df8 <___vfiprintf_internal_r+0xde4>
 8008da8:	8c7ffc04 	addi	r17,r17,-16
 8008dac:	01400044 	movi	r5,1
 8008db0:	0009883a 	mov	r4,zero
 8008db4:	d811883a 	mov	r8,sp
 8008db8:	847ff116 	blt	r16,r17,8008d80 <__alt_data_end+0xfc008d80>
 8008dbc:	d8c02317 	ldw	r3,140(sp)
 8008dc0:	1445883a 	add	r2,r2,r17
 8008dc4:	44400115 	stw	r17,4(r8)
 8008dc8:	40c00015 	stw	r3,0(r8)
 8008dcc:	d8801c15 	stw	r2,112(sp)
 8008dd0:	d9401b15 	stw	r5,108(sp)
 8008dd4:	00c001c4 	movi	r3,7
 8008dd8:	1940170e 	bge	r3,r5,8008e38 <___vfiprintf_internal_r+0xe24>
 8008ddc:	1000101e 	bne	r2,zero,8008e20 <___vfiprintf_internal_r+0xe0c>
 8008de0:	d8802517 	ldw	r2,148(sp)
 8008de4:	14c11616 	blt	r2,r19,8009240 <___vfiprintf_internal_r+0x122c>
 8008de8:	d9002417 	ldw	r4,144(sp)
 8008dec:	2089883a 	add	r4,r4,r2
 8008df0:	d9002415 	stw	r4,144(sp)
 8008df4:	003e1806 	br	8008658 <__alt_data_end+0xfc008658>
 8008df8:	d9801a04 	addi	r6,sp,104
 8008dfc:	b80b883a 	mov	r5,r23
 8008e00:	a809883a 	mov	r4,r21
 8008e04:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008e08:	103fba1e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8008e0c:	d9001b17 	ldw	r4,108(sp)
 8008e10:	d8801c17 	ldw	r2,112(sp)
 8008e14:	d811883a 	mov	r8,sp
 8008e18:	21400044 	addi	r5,r4,1
 8008e1c:	003fd606 	br	8008d78 <__alt_data_end+0xfc008d78>
 8008e20:	d9402017 	ldw	r5,128(sp)
 8008e24:	d9002117 	ldw	r4,132(sp)
 8008e28:	d9801a04 	addi	r6,sp,104
 8008e2c:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008e30:	103fb01e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8008e34:	d8801c17 	ldw	r2,112(sp)
 8008e38:	d8c02517 	ldw	r3,148(sp)
 8008e3c:	1cc0010e 	bge	r3,r19,8008e44 <___vfiprintf_internal_r+0xe30>
 8008e40:	9807883a 	mov	r3,r19
 8008e44:	d9002417 	ldw	r4,144(sp)
 8008e48:	20c9883a 	add	r4,r4,r3
 8008e4c:	d9002415 	stw	r4,144(sp)
 8008e50:	103e0126 	beq	r2,zero,8008658 <__alt_data_end+0xfc008658>
 8008e54:	d9402017 	ldw	r5,128(sp)
 8008e58:	d9002117 	ldw	r4,132(sp)
 8008e5c:	d9801a04 	addi	r6,sp,104
 8008e60:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008e64:	103dfc26 	beq	r2,zero,8008658 <__alt_data_end+0xfc008658>
 8008e68:	003fa206 	br	8008cf4 <__alt_data_end+0xfc008cf4>
 8008e6c:	d9402017 	ldw	r5,128(sp)
 8008e70:	d9002117 	ldw	r4,132(sp)
 8008e74:	d9801a04 	addi	r6,sp,104
 8008e78:	d9c02b15 	stw	r7,172(sp)
 8008e7c:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008e80:	d9c02b17 	ldw	r7,172(sp)
 8008e84:	103f9b1e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8008e88:	d9001b17 	ldw	r4,108(sp)
 8008e8c:	d8801c17 	ldw	r2,112(sp)
 8008e90:	d811883a 	mov	r8,sp
 8008e94:	21800044 	addi	r6,r4,1
 8008e98:	003dbf06 	br	8008598 <__alt_data_end+0xfc008598>
 8008e9c:	1000d81e 	bne	r2,zero,8009200 <___vfiprintf_internal_r+0x11ec>
 8008ea0:	d9001d87 	ldb	r4,118(sp)
 8008ea4:	20000a26 	beq	r4,zero,8008ed0 <___vfiprintf_internal_r+0xebc>
 8008ea8:	00800044 	movi	r2,1
 8008eac:	d9001d84 	addi	r4,sp,118
 8008eb0:	100b883a 	mov	r5,r2
 8008eb4:	d9000015 	stw	r4,0(sp)
 8008eb8:	d8800115 	stw	r2,4(sp)
 8008ebc:	d811883a 	mov	r8,sp
 8008ec0:	2809883a 	mov	r4,r5
 8008ec4:	42000204 	addi	r8,r8,8
 8008ec8:	29400044 	addi	r5,r5,1
 8008ecc:	003d9506 	br	8008524 <__alt_data_end+0xfc008524>
 8008ed0:	3800fd26 	beq	r7,zero,80092c8 <___vfiprintf_internal_r+0x12b4>
 8008ed4:	00800084 	movi	r2,2
 8008ed8:	d9001d04 	addi	r4,sp,116
 8008edc:	d9000015 	stw	r4,0(sp)
 8008ee0:	d8800115 	stw	r2,4(sp)
 8008ee4:	01400044 	movi	r5,1
 8008ee8:	d811883a 	mov	r8,sp
 8008eec:	2809883a 	mov	r4,r5
 8008ef0:	42000204 	addi	r8,r8,8
 8008ef4:	29400044 	addi	r5,r5,1
 8008ef8:	003f4606 	br	8008c14 <__alt_data_end+0xfc008c14>
 8008efc:	d8802517 	ldw	r2,148(sp)
 8008f00:	14c0010e 	bge	r2,r19,8008f08 <___vfiprintf_internal_r+0xef4>
 8008f04:	9805883a 	mov	r2,r19
 8008f08:	d9402417 	ldw	r5,144(sp)
 8008f0c:	288b883a 	add	r5,r5,r2
 8008f10:	d9402415 	stw	r5,144(sp)
 8008f14:	003dd006 	br	8008658 <__alt_data_end+0xfc008658>
 8008f18:	d8001d85 	stb	zero,118(sp)
 8008f1c:	80005d16 	blt	r16,zero,8009094 <___vfiprintf_internal_r+0x1080>
 8008f20:	00ffdfc4 	movi	r3,-129
 8008f24:	9d04b03a 	or	r2,r19,r20
 8008f28:	88e2703a 	and	r17,r17,r3
 8008f2c:	103d3726 	beq	r2,zero,800840c <__alt_data_end+0xfc00840c>
 8008f30:	002b883a 	mov	r21,zero
 8008f34:	d9002617 	ldw	r4,152(sp)
 8008f38:	ddc01a04 	addi	r23,sp,104
 8008f3c:	988003cc 	andi	r2,r19,15
 8008f40:	a006973a 	slli	r3,r20,28
 8008f44:	2085883a 	add	r2,r4,r2
 8008f48:	9826d13a 	srli	r19,r19,4
 8008f4c:	10800003 	ldbu	r2,0(r2)
 8008f50:	a028d13a 	srli	r20,r20,4
 8008f54:	bdffffc4 	addi	r23,r23,-1
 8008f58:	1ce6b03a 	or	r19,r3,r19
 8008f5c:	b8800005 	stb	r2,0(r23)
 8008f60:	9d04b03a 	or	r2,r19,r20
 8008f64:	103ff51e 	bne	r2,zero,8008f3c <__alt_data_end+0xfc008f3c>
 8008f68:	d8801e17 	ldw	r2,120(sp)
 8008f6c:	15e9c83a 	sub	r20,r2,r23
 8008f70:	003d2b06 	br	8008420 <__alt_data_end+0xfc008420>
 8008f74:	d9402017 	ldw	r5,128(sp)
 8008f78:	d9002117 	ldw	r4,132(sp)
 8008f7c:	d9801a04 	addi	r6,sp,104
 8008f80:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008f84:	103f5b1e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8008f88:	d8801c17 	ldw	r2,112(sp)
 8008f8c:	d811883a 	mov	r8,sp
 8008f90:	003f6706 	br	8008d30 <__alt_data_end+0xfc008d30>
 8008f94:	d9402017 	ldw	r5,128(sp)
 8008f98:	d9002117 	ldw	r4,132(sp)
 8008f9c:	d9801a04 	addi	r6,sp,104
 8008fa0:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008fa4:	103f531e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8008fa8:	d811883a 	mov	r8,sp
 8008fac:	003cd906 	br	8008314 <__alt_data_end+0xfc008314>
 8008fb0:	10803fcc 	andi	r2,r2,255
 8008fb4:	1080201c 	xori	r2,r2,128
 8008fb8:	10bfe004 	addi	r2,r2,-128
 8008fbc:	00c00c04 	movi	r3,48
 8008fc0:	10ffe926 	beq	r2,r3,8008f68 <__alt_data_end+0xfc008f68>
 8008fc4:	b8ffffc5 	stb	r3,-1(r23)
 8008fc8:	d8c01e17 	ldw	r3,120(sp)
 8008fcc:	b8bfffc4 	addi	r2,r23,-1
 8008fd0:	102f883a 	mov	r23,r2
 8008fd4:	18a9c83a 	sub	r20,r3,r2
 8008fd8:	003d1106 	br	8008420 <__alt_data_end+0xfc008420>
 8008fdc:	d9402017 	ldw	r5,128(sp)
 8008fe0:	d9002117 	ldw	r4,132(sp)
 8008fe4:	d9801a04 	addi	r6,sp,104
 8008fe8:	d8c02a15 	stw	r3,168(sp)
 8008fec:	d9c02b15 	stw	r7,172(sp)
 8008ff0:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8008ff4:	d8c02a17 	ldw	r3,168(sp)
 8008ff8:	d9c02b17 	ldw	r7,172(sp)
 8008ffc:	103f3d1e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8009000:	d9001b17 	ldw	r4,108(sp)
 8009004:	d8801c17 	ldw	r2,112(sp)
 8009008:	d811883a 	mov	r8,sp
 800900c:	21400044 	addi	r5,r4,1
 8009010:	003d4406 	br	8008524 <__alt_data_end+0xfc008524>
 8009014:	d9402017 	ldw	r5,128(sp)
 8009018:	d9002117 	ldw	r4,132(sp)
 800901c:	d9801a04 	addi	r6,sp,104
 8009020:	d8c02a15 	stw	r3,168(sp)
 8009024:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8009028:	d8c02a17 	ldw	r3,168(sp)
 800902c:	103f311e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8009030:	d9001b17 	ldw	r4,108(sp)
 8009034:	d8801c17 	ldw	r2,112(sp)
 8009038:	d811883a 	mov	r8,sp
 800903c:	21400044 	addi	r5,r4,1
 8009040:	003ef406 	br	8008c14 <__alt_data_end+0xfc008c14>
 8009044:	1000bd1e 	bne	r2,zero,800933c <___vfiprintf_internal_r+0x1328>
 8009048:	01400044 	movi	r5,1
 800904c:	0009883a 	mov	r4,zero
 8009050:	d811883a 	mov	r8,sp
 8009054:	003ef106 	br	8008c1c <__alt_data_end+0xfc008c1c>
 8009058:	d9402017 	ldw	r5,128(sp)
 800905c:	d9002117 	ldw	r4,132(sp)
 8009060:	d9801a04 	addi	r6,sp,104
 8009064:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8009068:	103f221e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 800906c:	d9401b17 	ldw	r5,108(sp)
 8009070:	d8801c17 	ldw	r2,112(sp)
 8009074:	d811883a 	mov	r8,sp
 8009078:	29400044 	addi	r5,r5,1
 800907c:	003d6206 	br	8008608 <__alt_data_end+0xfc008608>
 8009080:	014205f4 	movhi	r5,2071
 8009084:	295c5c04 	addi	r5,r5,29040
 8009088:	d9402615 	stw	r5,152(sp)
 800908c:	d8c02215 	stw	r3,136(sp)
 8009090:	1023883a 	mov	r17,r2
 8009094:	9d04b03a 	or	r2,r19,r20
 8009098:	103fa51e 	bne	r2,zero,8008f30 <__alt_data_end+0xfc008f30>
 800909c:	002b883a 	mov	r21,zero
 80090a0:	00800084 	movi	r2,2
 80090a4:	003e4a06 	br	80089d0 <__alt_data_end+0xfc0089d0>
 80090a8:	014205f4 	movhi	r5,2071
 80090ac:	295c5c04 	addi	r5,r5,29040
 80090b0:	002b883a 	mov	r21,zero
 80090b4:	d9402615 	stw	r5,152(sp)
 80090b8:	003f9e06 	br	8008f34 <__alt_data_end+0xfc008f34>
 80090bc:	d9402217 	ldw	r5,136(sp)
 80090c0:	d8001d85 	stb	zero,118(sp)
 80090c4:	0029883a 	mov	r20,zero
 80090c8:	28800104 	addi	r2,r5,4
 80090cc:	2cc00017 	ldw	r19,0(r5)
 80090d0:	803e3a16 	blt	r16,zero,80089bc <__alt_data_end+0xfc0089bc>
 80090d4:	00ffdfc4 	movi	r3,-129
 80090d8:	d8802215 	stw	r2,136(sp)
 80090dc:	88e2703a 	and	r17,r17,r3
 80090e0:	002b883a 	mov	r21,zero
 80090e4:	983e9b26 	beq	r19,zero,8008b54 <__alt_data_end+0xfc008b54>
 80090e8:	00800244 	movi	r2,9
 80090ec:	14fdc936 	bltu	r2,r19,8008814 <__alt_data_end+0xfc008814>
 80090f0:	003e9a06 	br	8008b5c <__alt_data_end+0xfc008b5c>
 80090f4:	00800c04 	movi	r2,48
 80090f8:	d8c01d45 	stb	r3,117(sp)
 80090fc:	d8801d05 	stb	r2,116(sp)
 8009100:	d8001d85 	stb	zero,118(sp)
 8009104:	88c00094 	ori	r3,r17,2
 8009108:	80009c16 	blt	r16,zero,800937c <___vfiprintf_internal_r+0x1368>
 800910c:	00bfdfc4 	movi	r2,-129
 8009110:	88a2703a 	and	r17,r17,r2
 8009114:	8c400094 	ori	r17,r17,2
 8009118:	002b883a 	mov	r21,zero
 800911c:	003f8506 	br	8008f34 <__alt_data_end+0xfc008f34>
 8009120:	b029883a 	mov	r20,r22
 8009124:	003c0b06 	br	8008154 <__alt_data_end+0xfc008154>
 8009128:	04e7c83a 	sub	r19,zero,r19
 800912c:	05400b44 	movi	r21,45
 8009130:	9804c03a 	cmpne	r2,r19,zero
 8009134:	0529c83a 	sub	r20,zero,r20
 8009138:	dd401d85 	stb	r21,118(sp)
 800913c:	a0a9c83a 	sub	r20,r20,r2
 8009140:	80009716 	blt	r16,zero,80093a0 <___vfiprintf_internal_r+0x138c>
 8009144:	00bfdfc4 	movi	r2,-129
 8009148:	88a2703a 	and	r17,r17,r2
 800914c:	003db006 	br	8008810 <__alt_data_end+0xfc008810>
 8009150:	b0c00007 	ldb	r3,0(r22)
 8009154:	003c0c06 	br	8008188 <__alt_data_end+0xfc008188>
 8009158:	8880100c 	andi	r2,r17,64
 800915c:	d8001d85 	stb	zero,118(sp)
 8009160:	1000461e 	bne	r2,zero,800927c <___vfiprintf_internal_r+0x1268>
 8009164:	d9002217 	ldw	r4,136(sp)
 8009168:	0029883a 	mov	r20,zero
 800916c:	20800104 	addi	r2,r4,4
 8009170:	24c00017 	ldw	r19,0(r4)
 8009174:	803df80e 	bge	r16,zero,8008958 <__alt_data_end+0xfc008958>
 8009178:	9d06b03a 	or	r3,r19,r20
 800917c:	d8802215 	stw	r2,136(sp)
 8009180:	183d5e1e 	bne	r3,zero,80086fc <__alt_data_end+0xfc0086fc>
 8009184:	002b883a 	mov	r21,zero
 8009188:	0005883a 	mov	r2,zero
 800918c:	003e1006 	br	80089d0 <__alt_data_end+0xfc0089d0>
 8009190:	8880040c 	andi	r2,r17,16
 8009194:	1000321e 	bne	r2,zero,8009260 <___vfiprintf_internal_r+0x124c>
 8009198:	8c40100c 	andi	r17,r17,64
 800919c:	88008d26 	beq	r17,zero,80093d4 <___vfiprintf_internal_r+0x13c0>
 80091a0:	d9402217 	ldw	r5,136(sp)
 80091a4:	d8c02417 	ldw	r3,144(sp)
 80091a8:	28800017 	ldw	r2,0(r5)
 80091ac:	29400104 	addi	r5,r5,4
 80091b0:	d9402215 	stw	r5,136(sp)
 80091b4:	10c0000d 	sth	r3,0(r2)
 80091b8:	003bca06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 80091bc:	8880100c 	andi	r2,r17,64
 80091c0:	10003a26 	beq	r2,zero,80092ac <___vfiprintf_internal_r+0x1298>
 80091c4:	d8802217 	ldw	r2,136(sp)
 80091c8:	14c0000f 	ldh	r19,0(r2)
 80091cc:	10800104 	addi	r2,r2,4
 80091d0:	d8802215 	stw	r2,136(sp)
 80091d4:	9829d7fa 	srai	r20,r19,31
 80091d8:	a005883a 	mov	r2,r20
 80091dc:	003d8506 	br	80087f4 <__alt_data_end+0xfc0087f4>
 80091e0:	8880100c 	andi	r2,r17,64
 80091e4:	10002b26 	beq	r2,zero,8009294 <___vfiprintf_internal_r+0x1280>
 80091e8:	d8802217 	ldw	r2,136(sp)
 80091ec:	0029883a 	mov	r20,zero
 80091f0:	14c0000b 	ldhu	r19,0(r2)
 80091f4:	10800104 	addi	r2,r2,4
 80091f8:	d8802215 	stw	r2,136(sp)
 80091fc:	003d5d06 	br	8008774 <__alt_data_end+0xfc008774>
 8009200:	d9402017 	ldw	r5,128(sp)
 8009204:	d9002117 	ldw	r4,132(sp)
 8009208:	d9801a04 	addi	r6,sp,104
 800920c:	d8c02a15 	stw	r3,168(sp)
 8009210:	d9c02b15 	stw	r7,172(sp)
 8009214:	8007f000 	call	8007f00 <__sprint_r.part.0>
 8009218:	d8c02a17 	ldw	r3,168(sp)
 800921c:	d9c02b17 	ldw	r7,172(sp)
 8009220:	103eb41e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8009224:	d9001b17 	ldw	r4,108(sp)
 8009228:	d8801c17 	ldw	r2,112(sp)
 800922c:	d811883a 	mov	r8,sp
 8009230:	21400044 	addi	r5,r4,1
 8009234:	003e6706 	br	8008bd4 <__alt_data_end+0xfc008bd4>
 8009238:	00bfffc4 	movi	r2,-1
 800923c:	003c4a06 	br	8008368 <__alt_data_end+0xfc008368>
 8009240:	9805883a 	mov	r2,r19
 8009244:	003ee806 	br	8008de8 <__alt_data_end+0xfc008de8>
 8009248:	d8c02217 	ldw	r3,136(sp)
 800924c:	0029883a 	mov	r20,zero
 8009250:	18800104 	addi	r2,r3,4
 8009254:	1cc0000b 	ldhu	r19,0(r3)
 8009258:	803f9e0e 	bge	r16,zero,80090d4 <__alt_data_end+0xfc0090d4>
 800925c:	003dd706 	br	80089bc <__alt_data_end+0xfc0089bc>
 8009260:	d8c02217 	ldw	r3,136(sp)
 8009264:	d9002417 	ldw	r4,144(sp)
 8009268:	18800017 	ldw	r2,0(r3)
 800926c:	18c00104 	addi	r3,r3,4
 8009270:	d8c02215 	stw	r3,136(sp)
 8009274:	11000015 	stw	r4,0(r2)
 8009278:	003b9a06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 800927c:	d8c02217 	ldw	r3,136(sp)
 8009280:	0029883a 	mov	r20,zero
 8009284:	18800104 	addi	r2,r3,4
 8009288:	1cc0000b 	ldhu	r19,0(r3)
 800928c:	803db20e 	bge	r16,zero,8008958 <__alt_data_end+0xfc008958>
 8009290:	003fb906 	br	8009178 <__alt_data_end+0xfc009178>
 8009294:	d9002217 	ldw	r4,136(sp)
 8009298:	0029883a 	mov	r20,zero
 800929c:	24c00017 	ldw	r19,0(r4)
 80092a0:	21000104 	addi	r4,r4,4
 80092a4:	d9002215 	stw	r4,136(sp)
 80092a8:	003d3206 	br	8008774 <__alt_data_end+0xfc008774>
 80092ac:	d8c02217 	ldw	r3,136(sp)
 80092b0:	1cc00017 	ldw	r19,0(r3)
 80092b4:	18c00104 	addi	r3,r3,4
 80092b8:	d8c02215 	stw	r3,136(sp)
 80092bc:	9829d7fa 	srai	r20,r19,31
 80092c0:	a005883a 	mov	r2,r20
 80092c4:	003d4b06 	br	80087f4 <__alt_data_end+0xfc0087f4>
 80092c8:	0009883a 	mov	r4,zero
 80092cc:	01400044 	movi	r5,1
 80092d0:	d811883a 	mov	r8,sp
 80092d4:	003e4f06 	br	8008c14 <__alt_data_end+0xfc008c14>
 80092d8:	d8c02215 	stw	r3,136(sp)
 80092dc:	002b883a 	mov	r21,zero
 80092e0:	003db806 	br	80089c4 <__alt_data_end+0xfc0089c4>
 80092e4:	d811883a 	mov	r8,sp
 80092e8:	003e9606 	br	8008d44 <__alt_data_end+0xfc008d44>
 80092ec:	010205f4 	movhi	r4,2071
 80092f0:	211cbd04 	addi	r4,r4,29428
 80092f4:	d9002315 	stw	r4,140(sp)
 80092f8:	003e6306 	br	8008c88 <__alt_data_end+0xfc008c88>
 80092fc:	b0c00043 	ldbu	r3,1(r22)
 8009300:	8c400814 	ori	r17,r17,32
 8009304:	b5800044 	addi	r22,r22,1
 8009308:	18c03fcc 	andi	r3,r3,255
 800930c:	18c0201c 	xori	r3,r3,128
 8009310:	18ffe004 	addi	r3,r3,-128
 8009314:	003b9c06 	br	8008188 <__alt_data_end+0xfc008188>
 8009318:	b809883a 	mov	r4,r23
 800931c:	da002a15 	stw	r8,168(sp)
 8009320:	80007840 	call	8000784 <strlen>
 8009324:	1029883a 	mov	r20,r2
 8009328:	dd401d83 	ldbu	r21,118(sp)
 800932c:	df002215 	stw	fp,136(sp)
 8009330:	0021883a 	mov	r16,zero
 8009334:	da002a17 	ldw	r8,168(sp)
 8009338:	003c3906 	br	8008420 <__alt_data_end+0xfc008420>
 800933c:	d9402017 	ldw	r5,128(sp)
 8009340:	d9002117 	ldw	r4,132(sp)
 8009344:	d9801a04 	addi	r6,sp,104
 8009348:	8007f000 	call	8007f00 <__sprint_r.part.0>
 800934c:	103e691e 	bne	r2,zero,8008cf4 <__alt_data_end+0xfc008cf4>
 8009350:	d9001b17 	ldw	r4,108(sp)
 8009354:	d8801c17 	ldw	r2,112(sp)
 8009358:	d811883a 	mov	r8,sp
 800935c:	21400044 	addi	r5,r4,1
 8009360:	003e2e06 	br	8008c1c <__alt_data_end+0xfc008c1c>
 8009364:	010205f4 	movhi	r4,2071
 8009368:	211cc104 	addi	r4,r4,29444
 800936c:	d9002315 	stw	r4,140(sp)
 8009370:	d9001b17 	ldw	r4,108(sp)
 8009374:	21000044 	addi	r4,r4,1
 8009378:	003c5e06 	br	80084f4 <__alt_data_end+0xfc0084f4>
 800937c:	002b883a 	mov	r21,zero
 8009380:	00800084 	movi	r2,2
 8009384:	10803fcc 	andi	r2,r2,255
 8009388:	01000044 	movi	r4,1
 800938c:	11002b26 	beq	r2,r4,800943c <___vfiprintf_internal_r+0x1428>
 8009390:	01000084 	movi	r4,2
 8009394:	11002b1e 	bne	r2,r4,8009444 <___vfiprintf_internal_r+0x1430>
 8009398:	1823883a 	mov	r17,r3
 800939c:	003ee506 	br	8008f34 <__alt_data_end+0xfc008f34>
 80093a0:	8807883a 	mov	r3,r17
 80093a4:	00800044 	movi	r2,1
 80093a8:	003ff606 	br	8009384 <__alt_data_end+0xfc009384>
 80093ac:	00800184 	movi	r2,6
 80093b0:	1400012e 	bgeu	r2,r16,80093b8 <___vfiprintf_internal_r+0x13a4>
 80093b4:	1021883a 	mov	r16,r2
 80093b8:	8029883a 	mov	r20,r16
 80093bc:	8027883a 	mov	r19,r16
 80093c0:	80002216 	blt	r16,zero,800944c <___vfiprintf_internal_r+0x1438>
 80093c4:	05c205f4 	movhi	r23,2071
 80093c8:	df002215 	stw	fp,136(sp)
 80093cc:	bddc6104 	addi	r23,r23,29060
 80093d0:	003cfb06 	br	80087c0 <__alt_data_end+0xfc0087c0>
 80093d4:	d9002217 	ldw	r4,136(sp)
 80093d8:	d9402417 	ldw	r5,144(sp)
 80093dc:	20800017 	ldw	r2,0(r4)
 80093e0:	21000104 	addi	r4,r4,4
 80093e4:	d9002215 	stw	r4,136(sp)
 80093e8:	11400015 	stw	r5,0(r2)
 80093ec:	003b3d06 	br	80080e4 <__alt_data_end+0xfc0080e4>
 80093f0:	014205f4 	movhi	r5,2071
 80093f4:	295cc104 	addi	r5,r5,29444
 80093f8:	d9402315 	stw	r5,140(sp)
 80093fc:	d9401b17 	ldw	r5,108(sp)
 8009400:	29400044 	addi	r5,r5,1
 8009404:	003e6d06 	br	8008dbc <__alt_data_end+0xfc008dbc>
 8009408:	8029883a 	mov	r20,r16
 800940c:	dd401d83 	ldbu	r21,118(sp)
 8009410:	df002215 	stw	fp,136(sp)
 8009414:	0021883a 	mov	r16,zero
 8009418:	003c0106 	br	8008420 <__alt_data_end+0xfc008420>
 800941c:	00c205f4 	movhi	r3,2071
 8009420:	18dcbd04 	addi	r3,r3,29428
 8009424:	d8c02315 	stw	r3,140(sp)
 8009428:	280d883a 	mov	r6,r5
 800942c:	003c6906 	br	80085d4 <__alt_data_end+0xfc0085d4>
 8009430:	802d883a 	mov	r22,r16
 8009434:	0021883a 	mov	r16,zero
 8009438:	003b5406 	br	800818c <__alt_data_end+0xfc00818c>
 800943c:	1823883a 	mov	r17,r3
 8009440:	003cf306 	br	8008810 <__alt_data_end+0xfc008810>
 8009444:	1823883a 	mov	r17,r3
 8009448:	003cad06 	br	8008700 <__alt_data_end+0xfc008700>
 800944c:	0027883a 	mov	r19,zero
 8009450:	003fdc06 	br	80093c4 <__alt_data_end+0xfc0093c4>
 8009454:	d9402217 	ldw	r5,136(sp)
 8009458:	8005883a 	mov	r2,r16
 800945c:	b0c00043 	ldbu	r3,1(r22)
 8009460:	2c000017 	ldw	r16,0(r5)
 8009464:	29000104 	addi	r4,r5,4
 8009468:	d9002215 	stw	r4,136(sp)
 800946c:	102d883a 	mov	r22,r2
 8009470:	803fa50e 	bge	r16,zero,8009308 <__alt_data_end+0xfc009308>
 8009474:	18c03fcc 	andi	r3,r3,255
 8009478:	18c0201c 	xori	r3,r3,128
 800947c:	043fffc4 	movi	r16,-1
 8009480:	18ffe004 	addi	r3,r3,-128
 8009484:	003b4006 	br	8008188 <__alt_data_end+0xfc008188>
 8009488:	d9402303 	ldbu	r5,140(sp)
 800948c:	d9401d85 	stb	r5,118(sp)
 8009490:	003cae06 	br	800874c <__alt_data_end+0xfc00874c>
 8009494:	d8c02303 	ldbu	r3,140(sp)
 8009498:	d8c01d85 	stb	r3,118(sp)
 800949c:	003d1406 	br	80088f0 <__alt_data_end+0xfc0088f0>
 80094a0:	d8c02303 	ldbu	r3,140(sp)
 80094a4:	d8c01d85 	stb	r3,118(sp)
 80094a8:	003cca06 	br	80087d4 <__alt_data_end+0xfc0087d4>
 80094ac:	8880004c 	andi	r2,r17,1
 80094b0:	002b883a 	mov	r21,zero
 80094b4:	10000526 	beq	r2,zero,80094cc <___vfiprintf_internal_r+0x14b8>
 80094b8:	00800c04 	movi	r2,48
 80094bc:	d88019c5 	stb	r2,103(sp)
 80094c0:	dd002817 	ldw	r20,160(sp)
 80094c4:	ddc019c4 	addi	r23,sp,103
 80094c8:	003bd506 	br	8008420 <__alt_data_end+0xfc008420>
 80094cc:	0029883a 	mov	r20,zero
 80094d0:	ddc01a04 	addi	r23,sp,104
 80094d4:	003bd206 	br	8008420 <__alt_data_end+0xfc008420>
 80094d8:	d9002303 	ldbu	r4,140(sp)
 80094dc:	d9001d85 	stb	r4,118(sp)
 80094e0:	003da606 	br	8008b7c <__alt_data_end+0xfc008b7c>
 80094e4:	d8c02303 	ldbu	r3,140(sp)
 80094e8:	d8c01d85 	stb	r3,118(sp)
 80094ec:	003c7606 	br	80086c8 <__alt_data_end+0xfc0086c8>
 80094f0:	d8c02303 	ldbu	r3,140(sp)
 80094f4:	d8c01d85 	stb	r3,118(sp)
 80094f8:	003c6506 	br	8008690 <__alt_data_end+0xfc008690>
 80094fc:	d9002303 	ldbu	r4,140(sp)
 8009500:	d9001d85 	stb	r4,118(sp)
 8009504:	003d3d06 	br	80089fc <__alt_data_end+0xfc0089fc>
 8009508:	d8c02303 	ldbu	r3,140(sp)
 800950c:	d8c01d85 	stb	r3,118(sp)
 8009510:	003d1d06 	br	8008988 <__alt_data_end+0xfc008988>
 8009514:	d8c02303 	ldbu	r3,140(sp)
 8009518:	d8c01d85 	stb	r3,118(sp)
 800951c:	003d0306 	br	800892c <__alt_data_end+0xfc00892c>

08009520 <__vfiprintf_internal>:
 8009520:	00820634 	movhi	r2,2072
 8009524:	10a3c904 	addi	r2,r2,-28892
 8009528:	300f883a 	mov	r7,r6
 800952c:	280d883a 	mov	r6,r5
 8009530:	200b883a 	mov	r5,r4
 8009534:	11000017 	ldw	r4,0(r2)
 8009538:	80080141 	jmpi	8008014 <___vfiprintf_internal_r>

0800953c <__sbprintf>:
 800953c:	2880030b 	ldhu	r2,12(r5)
 8009540:	2ac01917 	ldw	r11,100(r5)
 8009544:	2a80038b 	ldhu	r10,14(r5)
 8009548:	2a400717 	ldw	r9,28(r5)
 800954c:	2a000917 	ldw	r8,36(r5)
 8009550:	defee204 	addi	sp,sp,-1144
 8009554:	00c10004 	movi	r3,1024
 8009558:	dc011a15 	stw	r16,1128(sp)
 800955c:	10bfff4c 	andi	r2,r2,65533
 8009560:	2821883a 	mov	r16,r5
 8009564:	d8cb883a 	add	r5,sp,r3
 8009568:	dc811c15 	stw	r18,1136(sp)
 800956c:	dc411b15 	stw	r17,1132(sp)
 8009570:	dfc11d15 	stw	ra,1140(sp)
 8009574:	2025883a 	mov	r18,r4
 8009578:	d881030d 	sth	r2,1036(sp)
 800957c:	dac11915 	stw	r11,1124(sp)
 8009580:	da81038d 	sth	r10,1038(sp)
 8009584:	da410715 	stw	r9,1052(sp)
 8009588:	da010915 	stw	r8,1060(sp)
 800958c:	dec10015 	stw	sp,1024(sp)
 8009590:	dec10415 	stw	sp,1040(sp)
 8009594:	d8c10215 	stw	r3,1032(sp)
 8009598:	d8c10515 	stw	r3,1044(sp)
 800959c:	d8010615 	stw	zero,1048(sp)
 80095a0:	80080140 	call	8008014 <___vfiprintf_internal_r>
 80095a4:	1023883a 	mov	r17,r2
 80095a8:	10000416 	blt	r2,zero,80095bc <__sbprintf+0x80>
 80095ac:	d9410004 	addi	r5,sp,1024
 80095b0:	9009883a 	mov	r4,r18
 80095b4:	80047f00 	call	80047f0 <_fflush_r>
 80095b8:	10000d1e 	bne	r2,zero,80095f0 <__sbprintf+0xb4>
 80095bc:	d881030b 	ldhu	r2,1036(sp)
 80095c0:	1080100c 	andi	r2,r2,64
 80095c4:	10000326 	beq	r2,zero,80095d4 <__sbprintf+0x98>
 80095c8:	8080030b 	ldhu	r2,12(r16)
 80095cc:	10801014 	ori	r2,r2,64
 80095d0:	8080030d 	sth	r2,12(r16)
 80095d4:	8805883a 	mov	r2,r17
 80095d8:	dfc11d17 	ldw	ra,1140(sp)
 80095dc:	dc811c17 	ldw	r18,1136(sp)
 80095e0:	dc411b17 	ldw	r17,1132(sp)
 80095e4:	dc011a17 	ldw	r16,1128(sp)
 80095e8:	dec11e04 	addi	sp,sp,1144
 80095ec:	f800283a 	ret
 80095f0:	047fffc4 	movi	r17,-1
 80095f4:	003ff106 	br	80095bc <__alt_data_end+0xfc0095bc>

080095f8 <_write_r>:
 80095f8:	defffd04 	addi	sp,sp,-12
 80095fc:	2805883a 	mov	r2,r5
 8009600:	dc000015 	stw	r16,0(sp)
 8009604:	04020634 	movhi	r16,2072
 8009608:	dc400115 	stw	r17,4(sp)
 800960c:	300b883a 	mov	r5,r6
 8009610:	842aa404 	addi	r16,r16,-21872
 8009614:	2023883a 	mov	r17,r4
 8009618:	380d883a 	mov	r6,r7
 800961c:	1009883a 	mov	r4,r2
 8009620:	dfc00215 	stw	ra,8(sp)
 8009624:	80000015 	stw	zero,0(r16)
 8009628:	800de200 	call	800de20 <write>
 800962c:	00ffffc4 	movi	r3,-1
 8009630:	10c00526 	beq	r2,r3,8009648 <_write_r+0x50>
 8009634:	dfc00217 	ldw	ra,8(sp)
 8009638:	dc400117 	ldw	r17,4(sp)
 800963c:	dc000017 	ldw	r16,0(sp)
 8009640:	dec00304 	addi	sp,sp,12
 8009644:	f800283a 	ret
 8009648:	80c00017 	ldw	r3,0(r16)
 800964c:	183ff926 	beq	r3,zero,8009634 <__alt_data_end+0xfc009634>
 8009650:	88c00015 	stw	r3,0(r17)
 8009654:	003ff706 	br	8009634 <__alt_data_end+0xfc009634>

08009658 <_close_r>:
 8009658:	defffd04 	addi	sp,sp,-12
 800965c:	dc000015 	stw	r16,0(sp)
 8009660:	04020634 	movhi	r16,2072
 8009664:	dc400115 	stw	r17,4(sp)
 8009668:	842aa404 	addi	r16,r16,-21872
 800966c:	2023883a 	mov	r17,r4
 8009670:	2809883a 	mov	r4,r5
 8009674:	dfc00215 	stw	ra,8(sp)
 8009678:	80000015 	stw	zero,0(r16)
 800967c:	800d5980 	call	800d598 <close>
 8009680:	00ffffc4 	movi	r3,-1
 8009684:	10c00526 	beq	r2,r3,800969c <_close_r+0x44>
 8009688:	dfc00217 	ldw	ra,8(sp)
 800968c:	dc400117 	ldw	r17,4(sp)
 8009690:	dc000017 	ldw	r16,0(sp)
 8009694:	dec00304 	addi	sp,sp,12
 8009698:	f800283a 	ret
 800969c:	80c00017 	ldw	r3,0(r16)
 80096a0:	183ff926 	beq	r3,zero,8009688 <__alt_data_end+0xfc009688>
 80096a4:	88c00015 	stw	r3,0(r17)
 80096a8:	003ff706 	br	8009688 <__alt_data_end+0xfc009688>

080096ac <_calloc_r>:
 80096ac:	defffe04 	addi	sp,sp,-8
 80096b0:	2805883a 	mov	r2,r5
 80096b4:	dc000015 	stw	r16,0(sp)
 80096b8:	300b883a 	mov	r5,r6
 80096bc:	2021883a 	mov	r16,r4
 80096c0:	1009883a 	mov	r4,r2
 80096c4:	dfc00115 	stw	ra,4(sp)
 80096c8:	800061c0 	call	800061c <__mulsi3>
 80096cc:	100b883a 	mov	r5,r2
 80096d0:	8009883a 	mov	r4,r16
 80096d4:	80059480 	call	8005948 <_malloc_r>
 80096d8:	10002926 	beq	r2,zero,8009780 <_calloc_r+0xd4>
 80096dc:	11bfff17 	ldw	r6,-4(r2)
 80096e0:	1021883a 	mov	r16,r2
 80096e4:	00bfff04 	movi	r2,-4
 80096e8:	308c703a 	and	r6,r6,r2
 80096ec:	00c00904 	movi	r3,36
 80096f0:	308d883a 	add	r6,r6,r2
 80096f4:	19801636 	bltu	r3,r6,8009750 <_calloc_r+0xa4>
 80096f8:	008004c4 	movi	r2,19
 80096fc:	11800b2e 	bgeu	r2,r6,800972c <_calloc_r+0x80>
 8009700:	80000015 	stw	zero,0(r16)
 8009704:	80000115 	stw	zero,4(r16)
 8009708:	008006c4 	movi	r2,27
 800970c:	11801a2e 	bgeu	r2,r6,8009778 <_calloc_r+0xcc>
 8009710:	80000215 	stw	zero,8(r16)
 8009714:	80000315 	stw	zero,12(r16)
 8009718:	30c0151e 	bne	r6,r3,8009770 <_calloc_r+0xc4>
 800971c:	80000415 	stw	zero,16(r16)
 8009720:	80800604 	addi	r2,r16,24
 8009724:	80000515 	stw	zero,20(r16)
 8009728:	00000106 	br	8009730 <_calloc_r+0x84>
 800972c:	8005883a 	mov	r2,r16
 8009730:	10000015 	stw	zero,0(r2)
 8009734:	10000115 	stw	zero,4(r2)
 8009738:	10000215 	stw	zero,8(r2)
 800973c:	8005883a 	mov	r2,r16
 8009740:	dfc00117 	ldw	ra,4(sp)
 8009744:	dc000017 	ldw	r16,0(sp)
 8009748:	dec00204 	addi	sp,sp,8
 800974c:	f800283a 	ret
 8009750:	000b883a 	mov	r5,zero
 8009754:	8009883a 	mov	r4,r16
 8009758:	80064dc0 	call	80064dc <memset>
 800975c:	8005883a 	mov	r2,r16
 8009760:	dfc00117 	ldw	ra,4(sp)
 8009764:	dc000017 	ldw	r16,0(sp)
 8009768:	dec00204 	addi	sp,sp,8
 800976c:	f800283a 	ret
 8009770:	80800404 	addi	r2,r16,16
 8009774:	003fee06 	br	8009730 <__alt_data_end+0xfc009730>
 8009778:	80800204 	addi	r2,r16,8
 800977c:	003fec06 	br	8009730 <__alt_data_end+0xfc009730>
 8009780:	0005883a 	mov	r2,zero
 8009784:	003fee06 	br	8009740 <__alt_data_end+0xfc009740>

08009788 <_fclose_r>:
 8009788:	28003926 	beq	r5,zero,8009870 <_fclose_r+0xe8>
 800978c:	defffc04 	addi	sp,sp,-16
 8009790:	dc400115 	stw	r17,4(sp)
 8009794:	dc000015 	stw	r16,0(sp)
 8009798:	dfc00315 	stw	ra,12(sp)
 800979c:	dc800215 	stw	r18,8(sp)
 80097a0:	2023883a 	mov	r17,r4
 80097a4:	2821883a 	mov	r16,r5
 80097a8:	20000226 	beq	r4,zero,80097b4 <_fclose_r+0x2c>
 80097ac:	20800e17 	ldw	r2,56(r4)
 80097b0:	10002726 	beq	r2,zero,8009850 <_fclose_r+0xc8>
 80097b4:	8080030f 	ldh	r2,12(r16)
 80097b8:	1000071e 	bne	r2,zero,80097d8 <_fclose_r+0x50>
 80097bc:	0005883a 	mov	r2,zero
 80097c0:	dfc00317 	ldw	ra,12(sp)
 80097c4:	dc800217 	ldw	r18,8(sp)
 80097c8:	dc400117 	ldw	r17,4(sp)
 80097cc:	dc000017 	ldw	r16,0(sp)
 80097d0:	dec00404 	addi	sp,sp,16
 80097d4:	f800283a 	ret
 80097d8:	800b883a 	mov	r5,r16
 80097dc:	8809883a 	mov	r4,r17
 80097e0:	80045d40 	call	80045d4 <__sflush_r>
 80097e4:	1025883a 	mov	r18,r2
 80097e8:	80800b17 	ldw	r2,44(r16)
 80097ec:	10000426 	beq	r2,zero,8009800 <_fclose_r+0x78>
 80097f0:	81400717 	ldw	r5,28(r16)
 80097f4:	8809883a 	mov	r4,r17
 80097f8:	103ee83a 	callr	r2
 80097fc:	10001616 	blt	r2,zero,8009858 <_fclose_r+0xd0>
 8009800:	8080030b 	ldhu	r2,12(r16)
 8009804:	1080200c 	andi	r2,r2,128
 8009808:	1000151e 	bne	r2,zero,8009860 <_fclose_r+0xd8>
 800980c:	81400c17 	ldw	r5,48(r16)
 8009810:	28000526 	beq	r5,zero,8009828 <_fclose_r+0xa0>
 8009814:	80801004 	addi	r2,r16,64
 8009818:	28800226 	beq	r5,r2,8009824 <_fclose_r+0x9c>
 800981c:	8809883a 	mov	r4,r17
 8009820:	8004d500 	call	8004d50 <_free_r>
 8009824:	80000c15 	stw	zero,48(r16)
 8009828:	81401117 	ldw	r5,68(r16)
 800982c:	28000326 	beq	r5,zero,800983c <_fclose_r+0xb4>
 8009830:	8809883a 	mov	r4,r17
 8009834:	8004d500 	call	8004d50 <_free_r>
 8009838:	80001115 	stw	zero,68(r16)
 800983c:	8004bec0 	call	8004bec <__sfp_lock_acquire>
 8009840:	8000030d 	sth	zero,12(r16)
 8009844:	8004bf00 	call	8004bf0 <__sfp_lock_release>
 8009848:	9005883a 	mov	r2,r18
 800984c:	003fdc06 	br	80097c0 <__alt_data_end+0xfc0097c0>
 8009850:	8004bdc0 	call	8004bdc <__sinit>
 8009854:	003fd706 	br	80097b4 <__alt_data_end+0xfc0097b4>
 8009858:	04bfffc4 	movi	r18,-1
 800985c:	003fe806 	br	8009800 <__alt_data_end+0xfc009800>
 8009860:	81400417 	ldw	r5,16(r16)
 8009864:	8809883a 	mov	r4,r17
 8009868:	8004d500 	call	8004d50 <_free_r>
 800986c:	003fe706 	br	800980c <__alt_data_end+0xfc00980c>
 8009870:	0005883a 	mov	r2,zero
 8009874:	f800283a 	ret

08009878 <fclose>:
 8009878:	00820634 	movhi	r2,2072
 800987c:	10a3c904 	addi	r2,r2,-28892
 8009880:	200b883a 	mov	r5,r4
 8009884:	11000017 	ldw	r4,0(r2)
 8009888:	80097881 	jmpi	8009788 <_fclose_r>

0800988c <__fputwc>:
 800988c:	defff804 	addi	sp,sp,-32
 8009890:	dcc00415 	stw	r19,16(sp)
 8009894:	dc800315 	stw	r18,12(sp)
 8009898:	dc000115 	stw	r16,4(sp)
 800989c:	dfc00715 	stw	ra,28(sp)
 80098a0:	dd400615 	stw	r21,24(sp)
 80098a4:	dd000515 	stw	r20,20(sp)
 80098a8:	dc400215 	stw	r17,8(sp)
 80098ac:	2027883a 	mov	r19,r4
 80098b0:	2825883a 	mov	r18,r5
 80098b4:	3021883a 	mov	r16,r6
 80098b8:	80057380 	call	8005738 <__locale_mb_cur_max>
 80098bc:	00c00044 	movi	r3,1
 80098c0:	10c03e26 	beq	r2,r3,80099bc <__fputwc+0x130>
 80098c4:	81c01704 	addi	r7,r16,92
 80098c8:	900d883a 	mov	r6,r18
 80098cc:	d80b883a 	mov	r5,sp
 80098d0:	9809883a 	mov	r4,r19
 80098d4:	8009d5c0 	call	8009d5c <_wcrtomb_r>
 80098d8:	1029883a 	mov	r20,r2
 80098dc:	00bfffc4 	movi	r2,-1
 80098e0:	a0802026 	beq	r20,r2,8009964 <__fputwc+0xd8>
 80098e4:	d9400003 	ldbu	r5,0(sp)
 80098e8:	a0001c26 	beq	r20,zero,800995c <__fputwc+0xd0>
 80098ec:	0023883a 	mov	r17,zero
 80098f0:	05400284 	movi	r21,10
 80098f4:	00000906 	br	800991c <__fputwc+0x90>
 80098f8:	80800017 	ldw	r2,0(r16)
 80098fc:	11400005 	stb	r5,0(r2)
 8009900:	80c00017 	ldw	r3,0(r16)
 8009904:	18c00044 	addi	r3,r3,1
 8009908:	80c00015 	stw	r3,0(r16)
 800990c:	8c400044 	addi	r17,r17,1
 8009910:	dc45883a 	add	r2,sp,r17
 8009914:	8d00112e 	bgeu	r17,r20,800995c <__fputwc+0xd0>
 8009918:	11400003 	ldbu	r5,0(r2)
 800991c:	80c00217 	ldw	r3,8(r16)
 8009920:	18ffffc4 	addi	r3,r3,-1
 8009924:	80c00215 	stw	r3,8(r16)
 8009928:	183ff30e 	bge	r3,zero,80098f8 <__alt_data_end+0xfc0098f8>
 800992c:	80800617 	ldw	r2,24(r16)
 8009930:	18801916 	blt	r3,r2,8009998 <__fputwc+0x10c>
 8009934:	80800017 	ldw	r2,0(r16)
 8009938:	11400005 	stb	r5,0(r2)
 800993c:	80800017 	ldw	r2,0(r16)
 8009940:	10c00003 	ldbu	r3,0(r2)
 8009944:	10800044 	addi	r2,r2,1
 8009948:	1d402326 	beq	r3,r21,80099d8 <__fputwc+0x14c>
 800994c:	80800015 	stw	r2,0(r16)
 8009950:	8c400044 	addi	r17,r17,1
 8009954:	dc45883a 	add	r2,sp,r17
 8009958:	8d3fef36 	bltu	r17,r20,8009918 <__alt_data_end+0xfc009918>
 800995c:	9005883a 	mov	r2,r18
 8009960:	00000406 	br	8009974 <__fputwc+0xe8>
 8009964:	80c0030b 	ldhu	r3,12(r16)
 8009968:	a005883a 	mov	r2,r20
 800996c:	18c01014 	ori	r3,r3,64
 8009970:	80c0030d 	sth	r3,12(r16)
 8009974:	dfc00717 	ldw	ra,28(sp)
 8009978:	dd400617 	ldw	r21,24(sp)
 800997c:	dd000517 	ldw	r20,20(sp)
 8009980:	dcc00417 	ldw	r19,16(sp)
 8009984:	dc800317 	ldw	r18,12(sp)
 8009988:	dc400217 	ldw	r17,8(sp)
 800998c:	dc000117 	ldw	r16,4(sp)
 8009990:	dec00804 	addi	sp,sp,32
 8009994:	f800283a 	ret
 8009998:	800d883a 	mov	r6,r16
 800999c:	29403fcc 	andi	r5,r5,255
 80099a0:	9809883a 	mov	r4,r19
 80099a4:	8009c040 	call	8009c04 <__swbuf_r>
 80099a8:	10bfffe0 	cmpeqi	r2,r2,-1
 80099ac:	10803fcc 	andi	r2,r2,255
 80099b0:	103fd626 	beq	r2,zero,800990c <__alt_data_end+0xfc00990c>
 80099b4:	00bfffc4 	movi	r2,-1
 80099b8:	003fee06 	br	8009974 <__alt_data_end+0xfc009974>
 80099bc:	90ffffc4 	addi	r3,r18,-1
 80099c0:	01003f84 	movi	r4,254
 80099c4:	20ffbf36 	bltu	r4,r3,80098c4 <__alt_data_end+0xfc0098c4>
 80099c8:	900b883a 	mov	r5,r18
 80099cc:	dc800005 	stb	r18,0(sp)
 80099d0:	1029883a 	mov	r20,r2
 80099d4:	003fc506 	br	80098ec <__alt_data_end+0xfc0098ec>
 80099d8:	800d883a 	mov	r6,r16
 80099dc:	a80b883a 	mov	r5,r21
 80099e0:	9809883a 	mov	r4,r19
 80099e4:	8009c040 	call	8009c04 <__swbuf_r>
 80099e8:	10bfffe0 	cmpeqi	r2,r2,-1
 80099ec:	003fef06 	br	80099ac <__alt_data_end+0xfc0099ac>

080099f0 <_fputwc_r>:
 80099f0:	3080030b 	ldhu	r2,12(r6)
 80099f4:	10c8000c 	andi	r3,r2,8192
 80099f8:	1800051e 	bne	r3,zero,8009a10 <_fputwc_r+0x20>
 80099fc:	30c01917 	ldw	r3,100(r6)
 8009a00:	10880014 	ori	r2,r2,8192
 8009a04:	3080030d 	sth	r2,12(r6)
 8009a08:	18880014 	ori	r2,r3,8192
 8009a0c:	30801915 	stw	r2,100(r6)
 8009a10:	800988c1 	jmpi	800988c <__fputwc>

08009a14 <fputwc>:
 8009a14:	00820634 	movhi	r2,2072
 8009a18:	defffc04 	addi	sp,sp,-16
 8009a1c:	10a3c904 	addi	r2,r2,-28892
 8009a20:	dc000115 	stw	r16,4(sp)
 8009a24:	14000017 	ldw	r16,0(r2)
 8009a28:	dc400215 	stw	r17,8(sp)
 8009a2c:	dfc00315 	stw	ra,12(sp)
 8009a30:	2023883a 	mov	r17,r4
 8009a34:	80000226 	beq	r16,zero,8009a40 <fputwc+0x2c>
 8009a38:	80800e17 	ldw	r2,56(r16)
 8009a3c:	10001026 	beq	r2,zero,8009a80 <fputwc+0x6c>
 8009a40:	2880030b 	ldhu	r2,12(r5)
 8009a44:	10c8000c 	andi	r3,r2,8192
 8009a48:	1800051e 	bne	r3,zero,8009a60 <fputwc+0x4c>
 8009a4c:	28c01917 	ldw	r3,100(r5)
 8009a50:	10880014 	ori	r2,r2,8192
 8009a54:	2880030d 	sth	r2,12(r5)
 8009a58:	18880014 	ori	r2,r3,8192
 8009a5c:	28801915 	stw	r2,100(r5)
 8009a60:	280d883a 	mov	r6,r5
 8009a64:	8009883a 	mov	r4,r16
 8009a68:	880b883a 	mov	r5,r17
 8009a6c:	dfc00317 	ldw	ra,12(sp)
 8009a70:	dc400217 	ldw	r17,8(sp)
 8009a74:	dc000117 	ldw	r16,4(sp)
 8009a78:	dec00404 	addi	sp,sp,16
 8009a7c:	800988c1 	jmpi	800988c <__fputwc>
 8009a80:	8009883a 	mov	r4,r16
 8009a84:	d9400015 	stw	r5,0(sp)
 8009a88:	8004bdc0 	call	8004bdc <__sinit>
 8009a8c:	d9400017 	ldw	r5,0(sp)
 8009a90:	003feb06 	br	8009a40 <__alt_data_end+0xfc009a40>

08009a94 <_fstat_r>:
 8009a94:	defffd04 	addi	sp,sp,-12
 8009a98:	2805883a 	mov	r2,r5
 8009a9c:	dc000015 	stw	r16,0(sp)
 8009aa0:	04020634 	movhi	r16,2072
 8009aa4:	dc400115 	stw	r17,4(sp)
 8009aa8:	842aa404 	addi	r16,r16,-21872
 8009aac:	2023883a 	mov	r17,r4
 8009ab0:	300b883a 	mov	r5,r6
 8009ab4:	1009883a 	mov	r4,r2
 8009ab8:	dfc00215 	stw	ra,8(sp)
 8009abc:	80000015 	stw	zero,0(r16)
 8009ac0:	800d6d80 	call	800d6d8 <fstat>
 8009ac4:	00ffffc4 	movi	r3,-1
 8009ac8:	10c00526 	beq	r2,r3,8009ae0 <_fstat_r+0x4c>
 8009acc:	dfc00217 	ldw	ra,8(sp)
 8009ad0:	dc400117 	ldw	r17,4(sp)
 8009ad4:	dc000017 	ldw	r16,0(sp)
 8009ad8:	dec00304 	addi	sp,sp,12
 8009adc:	f800283a 	ret
 8009ae0:	80c00017 	ldw	r3,0(r16)
 8009ae4:	183ff926 	beq	r3,zero,8009acc <__alt_data_end+0xfc009acc>
 8009ae8:	88c00015 	stw	r3,0(r17)
 8009aec:	003ff706 	br	8009acc <__alt_data_end+0xfc009acc>

08009af0 <_isatty_r>:
 8009af0:	defffd04 	addi	sp,sp,-12
 8009af4:	dc000015 	stw	r16,0(sp)
 8009af8:	04020634 	movhi	r16,2072
 8009afc:	dc400115 	stw	r17,4(sp)
 8009b00:	842aa404 	addi	r16,r16,-21872
 8009b04:	2023883a 	mov	r17,r4
 8009b08:	2809883a 	mov	r4,r5
 8009b0c:	dfc00215 	stw	ra,8(sp)
 8009b10:	80000015 	stw	zero,0(r16)
 8009b14:	800d7cc0 	call	800d7cc <isatty>
 8009b18:	00ffffc4 	movi	r3,-1
 8009b1c:	10c00526 	beq	r2,r3,8009b34 <_isatty_r+0x44>
 8009b20:	dfc00217 	ldw	ra,8(sp)
 8009b24:	dc400117 	ldw	r17,4(sp)
 8009b28:	dc000017 	ldw	r16,0(sp)
 8009b2c:	dec00304 	addi	sp,sp,12
 8009b30:	f800283a 	ret
 8009b34:	80c00017 	ldw	r3,0(r16)
 8009b38:	183ff926 	beq	r3,zero,8009b20 <__alt_data_end+0xfc009b20>
 8009b3c:	88c00015 	stw	r3,0(r17)
 8009b40:	003ff706 	br	8009b20 <__alt_data_end+0xfc009b20>

08009b44 <_lseek_r>:
 8009b44:	defffd04 	addi	sp,sp,-12
 8009b48:	2805883a 	mov	r2,r5
 8009b4c:	dc000015 	stw	r16,0(sp)
 8009b50:	04020634 	movhi	r16,2072
 8009b54:	dc400115 	stw	r17,4(sp)
 8009b58:	300b883a 	mov	r5,r6
 8009b5c:	842aa404 	addi	r16,r16,-21872
 8009b60:	2023883a 	mov	r17,r4
 8009b64:	380d883a 	mov	r6,r7
 8009b68:	1009883a 	mov	r4,r2
 8009b6c:	dfc00215 	stw	ra,8(sp)
 8009b70:	80000015 	stw	zero,0(r16)
 8009b74:	800d9a00 	call	800d9a0 <lseek>
 8009b78:	00ffffc4 	movi	r3,-1
 8009b7c:	10c00526 	beq	r2,r3,8009b94 <_lseek_r+0x50>
 8009b80:	dfc00217 	ldw	ra,8(sp)
 8009b84:	dc400117 	ldw	r17,4(sp)
 8009b88:	dc000017 	ldw	r16,0(sp)
 8009b8c:	dec00304 	addi	sp,sp,12
 8009b90:	f800283a 	ret
 8009b94:	80c00017 	ldw	r3,0(r16)
 8009b98:	183ff926 	beq	r3,zero,8009b80 <__alt_data_end+0xfc009b80>
 8009b9c:	88c00015 	stw	r3,0(r17)
 8009ba0:	003ff706 	br	8009b80 <__alt_data_end+0xfc009b80>

08009ba4 <_read_r>:
 8009ba4:	defffd04 	addi	sp,sp,-12
 8009ba8:	2805883a 	mov	r2,r5
 8009bac:	dc000015 	stw	r16,0(sp)
 8009bb0:	04020634 	movhi	r16,2072
 8009bb4:	dc400115 	stw	r17,4(sp)
 8009bb8:	300b883a 	mov	r5,r6
 8009bbc:	842aa404 	addi	r16,r16,-21872
 8009bc0:	2023883a 	mov	r17,r4
 8009bc4:	380d883a 	mov	r6,r7
 8009bc8:	1009883a 	mov	r4,r2
 8009bcc:	dfc00215 	stw	ra,8(sp)
 8009bd0:	80000015 	stw	zero,0(r16)
 8009bd4:	800db7c0 	call	800db7c <read>
 8009bd8:	00ffffc4 	movi	r3,-1
 8009bdc:	10c00526 	beq	r2,r3,8009bf4 <_read_r+0x50>
 8009be0:	dfc00217 	ldw	ra,8(sp)
 8009be4:	dc400117 	ldw	r17,4(sp)
 8009be8:	dc000017 	ldw	r16,0(sp)
 8009bec:	dec00304 	addi	sp,sp,12
 8009bf0:	f800283a 	ret
 8009bf4:	80c00017 	ldw	r3,0(r16)
 8009bf8:	183ff926 	beq	r3,zero,8009be0 <__alt_data_end+0xfc009be0>
 8009bfc:	88c00015 	stw	r3,0(r17)
 8009c00:	003ff706 	br	8009be0 <__alt_data_end+0xfc009be0>

08009c04 <__swbuf_r>:
 8009c04:	defffb04 	addi	sp,sp,-20
 8009c08:	dcc00315 	stw	r19,12(sp)
 8009c0c:	dc800215 	stw	r18,8(sp)
 8009c10:	dc000015 	stw	r16,0(sp)
 8009c14:	dfc00415 	stw	ra,16(sp)
 8009c18:	dc400115 	stw	r17,4(sp)
 8009c1c:	2025883a 	mov	r18,r4
 8009c20:	2827883a 	mov	r19,r5
 8009c24:	3021883a 	mov	r16,r6
 8009c28:	20000226 	beq	r4,zero,8009c34 <__swbuf_r+0x30>
 8009c2c:	20800e17 	ldw	r2,56(r4)
 8009c30:	10004226 	beq	r2,zero,8009d3c <__swbuf_r+0x138>
 8009c34:	80800617 	ldw	r2,24(r16)
 8009c38:	8100030b 	ldhu	r4,12(r16)
 8009c3c:	80800215 	stw	r2,8(r16)
 8009c40:	2080020c 	andi	r2,r4,8
 8009c44:	10003626 	beq	r2,zero,8009d20 <__swbuf_r+0x11c>
 8009c48:	80c00417 	ldw	r3,16(r16)
 8009c4c:	18003426 	beq	r3,zero,8009d20 <__swbuf_r+0x11c>
 8009c50:	2088000c 	andi	r2,r4,8192
 8009c54:	9c403fcc 	andi	r17,r19,255
 8009c58:	10001a26 	beq	r2,zero,8009cc4 <__swbuf_r+0xc0>
 8009c5c:	80800017 	ldw	r2,0(r16)
 8009c60:	81000517 	ldw	r4,20(r16)
 8009c64:	10c7c83a 	sub	r3,r2,r3
 8009c68:	1900200e 	bge	r3,r4,8009cec <__swbuf_r+0xe8>
 8009c6c:	18c00044 	addi	r3,r3,1
 8009c70:	81000217 	ldw	r4,8(r16)
 8009c74:	11400044 	addi	r5,r2,1
 8009c78:	81400015 	stw	r5,0(r16)
 8009c7c:	213fffc4 	addi	r4,r4,-1
 8009c80:	81000215 	stw	r4,8(r16)
 8009c84:	14c00005 	stb	r19,0(r2)
 8009c88:	80800517 	ldw	r2,20(r16)
 8009c8c:	10c01e26 	beq	r2,r3,8009d08 <__swbuf_r+0x104>
 8009c90:	8080030b 	ldhu	r2,12(r16)
 8009c94:	1080004c 	andi	r2,r2,1
 8009c98:	10000226 	beq	r2,zero,8009ca4 <__swbuf_r+0xa0>
 8009c9c:	00800284 	movi	r2,10
 8009ca0:	88801926 	beq	r17,r2,8009d08 <__swbuf_r+0x104>
 8009ca4:	8805883a 	mov	r2,r17
 8009ca8:	dfc00417 	ldw	ra,16(sp)
 8009cac:	dcc00317 	ldw	r19,12(sp)
 8009cb0:	dc800217 	ldw	r18,8(sp)
 8009cb4:	dc400117 	ldw	r17,4(sp)
 8009cb8:	dc000017 	ldw	r16,0(sp)
 8009cbc:	dec00504 	addi	sp,sp,20
 8009cc0:	f800283a 	ret
 8009cc4:	81401917 	ldw	r5,100(r16)
 8009cc8:	00b7ffc4 	movi	r2,-8193
 8009ccc:	21080014 	ori	r4,r4,8192
 8009cd0:	2884703a 	and	r2,r5,r2
 8009cd4:	80801915 	stw	r2,100(r16)
 8009cd8:	80800017 	ldw	r2,0(r16)
 8009cdc:	8100030d 	sth	r4,12(r16)
 8009ce0:	81000517 	ldw	r4,20(r16)
 8009ce4:	10c7c83a 	sub	r3,r2,r3
 8009ce8:	193fe016 	blt	r3,r4,8009c6c <__alt_data_end+0xfc009c6c>
 8009cec:	800b883a 	mov	r5,r16
 8009cf0:	9009883a 	mov	r4,r18
 8009cf4:	80047f00 	call	80047f0 <_fflush_r>
 8009cf8:	1000071e 	bne	r2,zero,8009d18 <__swbuf_r+0x114>
 8009cfc:	80800017 	ldw	r2,0(r16)
 8009d00:	00c00044 	movi	r3,1
 8009d04:	003fda06 	br	8009c70 <__alt_data_end+0xfc009c70>
 8009d08:	800b883a 	mov	r5,r16
 8009d0c:	9009883a 	mov	r4,r18
 8009d10:	80047f00 	call	80047f0 <_fflush_r>
 8009d14:	103fe326 	beq	r2,zero,8009ca4 <__alt_data_end+0xfc009ca4>
 8009d18:	00bfffc4 	movi	r2,-1
 8009d1c:	003fe206 	br	8009ca8 <__alt_data_end+0xfc009ca8>
 8009d20:	800b883a 	mov	r5,r16
 8009d24:	9009883a 	mov	r4,r18
 8009d28:	8002bd00 	call	8002bd0 <__swsetup_r>
 8009d2c:	103ffa1e 	bne	r2,zero,8009d18 <__alt_data_end+0xfc009d18>
 8009d30:	8100030b 	ldhu	r4,12(r16)
 8009d34:	80c00417 	ldw	r3,16(r16)
 8009d38:	003fc506 	br	8009c50 <__alt_data_end+0xfc009c50>
 8009d3c:	8004bdc0 	call	8004bdc <__sinit>
 8009d40:	003fbc06 	br	8009c34 <__alt_data_end+0xfc009c34>

08009d44 <__swbuf>:
 8009d44:	00820634 	movhi	r2,2072
 8009d48:	10a3c904 	addi	r2,r2,-28892
 8009d4c:	280d883a 	mov	r6,r5
 8009d50:	200b883a 	mov	r5,r4
 8009d54:	11000017 	ldw	r4,0(r2)
 8009d58:	8009c041 	jmpi	8009c04 <__swbuf_r>

08009d5c <_wcrtomb_r>:
 8009d5c:	defff604 	addi	sp,sp,-40
 8009d60:	00820634 	movhi	r2,2072
 8009d64:	dc800815 	stw	r18,32(sp)
 8009d68:	dc400715 	stw	r17,28(sp)
 8009d6c:	dc000615 	stw	r16,24(sp)
 8009d70:	10a3cd04 	addi	r2,r2,-28876
 8009d74:	dfc00915 	stw	ra,36(sp)
 8009d78:	2021883a 	mov	r16,r4
 8009d7c:	3823883a 	mov	r17,r7
 8009d80:	14800017 	ldw	r18,0(r2)
 8009d84:	28001426 	beq	r5,zero,8009dd8 <_wcrtomb_r+0x7c>
 8009d88:	d9400415 	stw	r5,16(sp)
 8009d8c:	d9800515 	stw	r6,20(sp)
 8009d90:	800572c0 	call	800572c <__locale_charset>
 8009d94:	d9800517 	ldw	r6,20(sp)
 8009d98:	d9400417 	ldw	r5,16(sp)
 8009d9c:	100f883a 	mov	r7,r2
 8009da0:	dc400015 	stw	r17,0(sp)
 8009da4:	8009883a 	mov	r4,r16
 8009da8:	903ee83a 	callr	r18
 8009dac:	00ffffc4 	movi	r3,-1
 8009db0:	10c0031e 	bne	r2,r3,8009dc0 <_wcrtomb_r+0x64>
 8009db4:	88000015 	stw	zero,0(r17)
 8009db8:	00c02284 	movi	r3,138
 8009dbc:	80c00015 	stw	r3,0(r16)
 8009dc0:	dfc00917 	ldw	ra,36(sp)
 8009dc4:	dc800817 	ldw	r18,32(sp)
 8009dc8:	dc400717 	ldw	r17,28(sp)
 8009dcc:	dc000617 	ldw	r16,24(sp)
 8009dd0:	dec00a04 	addi	sp,sp,40
 8009dd4:	f800283a 	ret
 8009dd8:	800572c0 	call	800572c <__locale_charset>
 8009ddc:	100f883a 	mov	r7,r2
 8009de0:	dc400015 	stw	r17,0(sp)
 8009de4:	000d883a 	mov	r6,zero
 8009de8:	d9400104 	addi	r5,sp,4
 8009dec:	8009883a 	mov	r4,r16
 8009df0:	903ee83a 	callr	r18
 8009df4:	003fed06 	br	8009dac <__alt_data_end+0xfc009dac>

08009df8 <wcrtomb>:
 8009df8:	defff604 	addi	sp,sp,-40
 8009dfc:	00820634 	movhi	r2,2072
 8009e00:	dc800615 	stw	r18,24(sp)
 8009e04:	dc400515 	stw	r17,20(sp)
 8009e08:	10a3c904 	addi	r2,r2,-28892
 8009e0c:	dfc00915 	stw	ra,36(sp)
 8009e10:	dd000815 	stw	r20,32(sp)
 8009e14:	dcc00715 	stw	r19,28(sp)
 8009e18:	dc000415 	stw	r16,16(sp)
 8009e1c:	3025883a 	mov	r18,r6
 8009e20:	14400017 	ldw	r17,0(r2)
 8009e24:	20001926 	beq	r4,zero,8009e8c <wcrtomb+0x94>
 8009e28:	00820634 	movhi	r2,2072
 8009e2c:	10a3cd04 	addi	r2,r2,-28876
 8009e30:	15000017 	ldw	r20,0(r2)
 8009e34:	2021883a 	mov	r16,r4
 8009e38:	2827883a 	mov	r19,r5
 8009e3c:	800572c0 	call	800572c <__locale_charset>
 8009e40:	100f883a 	mov	r7,r2
 8009e44:	dc800015 	stw	r18,0(sp)
 8009e48:	980d883a 	mov	r6,r19
 8009e4c:	800b883a 	mov	r5,r16
 8009e50:	8809883a 	mov	r4,r17
 8009e54:	a03ee83a 	callr	r20
 8009e58:	00ffffc4 	movi	r3,-1
 8009e5c:	10c0031e 	bne	r2,r3,8009e6c <wcrtomb+0x74>
 8009e60:	90000015 	stw	zero,0(r18)
 8009e64:	00c02284 	movi	r3,138
 8009e68:	88c00015 	stw	r3,0(r17)
 8009e6c:	dfc00917 	ldw	ra,36(sp)
 8009e70:	dd000817 	ldw	r20,32(sp)
 8009e74:	dcc00717 	ldw	r19,28(sp)
 8009e78:	dc800617 	ldw	r18,24(sp)
 8009e7c:	dc400517 	ldw	r17,20(sp)
 8009e80:	dc000417 	ldw	r16,16(sp)
 8009e84:	dec00a04 	addi	sp,sp,40
 8009e88:	f800283a 	ret
 8009e8c:	00820634 	movhi	r2,2072
 8009e90:	10a3cd04 	addi	r2,r2,-28876
 8009e94:	14000017 	ldw	r16,0(r2)
 8009e98:	800572c0 	call	800572c <__locale_charset>
 8009e9c:	100f883a 	mov	r7,r2
 8009ea0:	dc800015 	stw	r18,0(sp)
 8009ea4:	000d883a 	mov	r6,zero
 8009ea8:	d9400104 	addi	r5,sp,4
 8009eac:	8809883a 	mov	r4,r17
 8009eb0:	803ee83a 	callr	r16
 8009eb4:	003fe806 	br	8009e58 <__alt_data_end+0xfc009e58>

08009eb8 <__ascii_wctomb>:
 8009eb8:	28000526 	beq	r5,zero,8009ed0 <__ascii_wctomb+0x18>
 8009ebc:	00803fc4 	movi	r2,255
 8009ec0:	11800536 	bltu	r2,r6,8009ed8 <__ascii_wctomb+0x20>
 8009ec4:	29800005 	stb	r6,0(r5)
 8009ec8:	00800044 	movi	r2,1
 8009ecc:	f800283a 	ret
 8009ed0:	0005883a 	mov	r2,zero
 8009ed4:	f800283a 	ret
 8009ed8:	00802284 	movi	r2,138
 8009edc:	20800015 	stw	r2,0(r4)
 8009ee0:	00bfffc4 	movi	r2,-1
 8009ee4:	f800283a 	ret

08009ee8 <_wctomb_r>:
 8009ee8:	00820634 	movhi	r2,2072
 8009eec:	defff904 	addi	sp,sp,-28
 8009ef0:	10a3cd04 	addi	r2,r2,-28876
 8009ef4:	dfc00615 	stw	ra,24(sp)
 8009ef8:	dc400515 	stw	r17,20(sp)
 8009efc:	dc000415 	stw	r16,16(sp)
 8009f00:	3823883a 	mov	r17,r7
 8009f04:	14000017 	ldw	r16,0(r2)
 8009f08:	d9000115 	stw	r4,4(sp)
 8009f0c:	d9400215 	stw	r5,8(sp)
 8009f10:	d9800315 	stw	r6,12(sp)
 8009f14:	800572c0 	call	800572c <__locale_charset>
 8009f18:	d9800317 	ldw	r6,12(sp)
 8009f1c:	d9400217 	ldw	r5,8(sp)
 8009f20:	d9000117 	ldw	r4,4(sp)
 8009f24:	100f883a 	mov	r7,r2
 8009f28:	dc400015 	stw	r17,0(sp)
 8009f2c:	803ee83a 	callr	r16
 8009f30:	dfc00617 	ldw	ra,24(sp)
 8009f34:	dc400517 	ldw	r17,20(sp)
 8009f38:	dc000417 	ldw	r16,16(sp)
 8009f3c:	dec00704 	addi	sp,sp,28
 8009f40:	f800283a 	ret

08009f44 <__udivdi3>:
 8009f44:	defff404 	addi	sp,sp,-48
 8009f48:	dcc00515 	stw	r19,20(sp)
 8009f4c:	dc000215 	stw	r16,8(sp)
 8009f50:	dfc00b15 	stw	ra,44(sp)
 8009f54:	df000a15 	stw	fp,40(sp)
 8009f58:	ddc00915 	stw	r23,36(sp)
 8009f5c:	dd800815 	stw	r22,32(sp)
 8009f60:	dd400715 	stw	r21,28(sp)
 8009f64:	dd000615 	stw	r20,24(sp)
 8009f68:	dc800415 	stw	r18,16(sp)
 8009f6c:	dc400315 	stw	r17,12(sp)
 8009f70:	2027883a 	mov	r19,r4
 8009f74:	2821883a 	mov	r16,r5
 8009f78:	3800461e 	bne	r7,zero,800a094 <__udivdi3+0x150>
 8009f7c:	3023883a 	mov	r17,r6
 8009f80:	2025883a 	mov	r18,r4
 8009f84:	2980572e 	bgeu	r5,r6,800a0e4 <__udivdi3+0x1a0>
 8009f88:	00bfffd4 	movui	r2,65535
 8009f8c:	282d883a 	mov	r22,r5
 8009f90:	1180b236 	bltu	r2,r6,800a25c <__udivdi3+0x318>
 8009f94:	00803fc4 	movi	r2,255
 8009f98:	1185803a 	cmpltu	r2,r2,r6
 8009f9c:	100490fa 	slli	r2,r2,3
 8009fa0:	3086d83a 	srl	r3,r6,r2
 8009fa4:	010205f4 	movhi	r4,2071
 8009fa8:	211cc504 	addi	r4,r4,29460
 8009fac:	20c7883a 	add	r3,r4,r3
 8009fb0:	18c00003 	ldbu	r3,0(r3)
 8009fb4:	1885883a 	add	r2,r3,r2
 8009fb8:	00c00804 	movi	r3,32
 8009fbc:	1887c83a 	sub	r3,r3,r2
 8009fc0:	18000526 	beq	r3,zero,8009fd8 <__udivdi3+0x94>
 8009fc4:	80e0983a 	sll	r16,r16,r3
 8009fc8:	9884d83a 	srl	r2,r19,r2
 8009fcc:	30e2983a 	sll	r17,r6,r3
 8009fd0:	98e4983a 	sll	r18,r19,r3
 8009fd4:	142cb03a 	or	r22,r2,r16
 8009fd8:	882ad43a 	srli	r21,r17,16
 8009fdc:	b009883a 	mov	r4,r22
 8009fe0:	8d3fffcc 	andi	r20,r17,65535
 8009fe4:	a80b883a 	mov	r5,r21
 8009fe8:	800ac600 	call	800ac60 <__umodsi3>
 8009fec:	b009883a 	mov	r4,r22
 8009ff0:	a80b883a 	mov	r5,r21
 8009ff4:	1027883a 	mov	r19,r2
 8009ff8:	800abfc0 	call	800abfc <__udivsi3>
 8009ffc:	100b883a 	mov	r5,r2
 800a000:	a009883a 	mov	r4,r20
 800a004:	102d883a 	mov	r22,r2
 800a008:	800061c0 	call	800061c <__mulsi3>
 800a00c:	9826943a 	slli	r19,r19,16
 800a010:	9006d43a 	srli	r3,r18,16
 800a014:	1cc6b03a 	or	r3,r3,r19
 800a018:	1880052e 	bgeu	r3,r2,800a030 <__udivdi3+0xec>
 800a01c:	1c47883a 	add	r3,r3,r17
 800a020:	b13fffc4 	addi	r4,r22,-1
 800a024:	1c400136 	bltu	r3,r17,800a02c <__udivdi3+0xe8>
 800a028:	18814236 	bltu	r3,r2,800a534 <__udivdi3+0x5f0>
 800a02c:	202d883a 	mov	r22,r4
 800a030:	18a1c83a 	sub	r16,r3,r2
 800a034:	8009883a 	mov	r4,r16
 800a038:	a80b883a 	mov	r5,r21
 800a03c:	800ac600 	call	800ac60 <__umodsi3>
 800a040:	1027883a 	mov	r19,r2
 800a044:	8009883a 	mov	r4,r16
 800a048:	a80b883a 	mov	r5,r21
 800a04c:	9826943a 	slli	r19,r19,16
 800a050:	800abfc0 	call	800abfc <__udivsi3>
 800a054:	100b883a 	mov	r5,r2
 800a058:	a009883a 	mov	r4,r20
 800a05c:	94bfffcc 	andi	r18,r18,65535
 800a060:	1021883a 	mov	r16,r2
 800a064:	94e4b03a 	or	r18,r18,r19
 800a068:	800061c0 	call	800061c <__mulsi3>
 800a06c:	9080052e 	bgeu	r18,r2,800a084 <__udivdi3+0x140>
 800a070:	8ca5883a 	add	r18,r17,r18
 800a074:	80ffffc4 	addi	r3,r16,-1
 800a078:	94410c36 	bltu	r18,r17,800a4ac <__udivdi3+0x568>
 800a07c:	90810b2e 	bgeu	r18,r2,800a4ac <__udivdi3+0x568>
 800a080:	843fff84 	addi	r16,r16,-2
 800a084:	b004943a 	slli	r2,r22,16
 800a088:	0007883a 	mov	r3,zero
 800a08c:	1404b03a 	or	r2,r2,r16
 800a090:	00005e06 	br	800a20c <__udivdi3+0x2c8>
 800a094:	29c05b36 	bltu	r5,r7,800a204 <__udivdi3+0x2c0>
 800a098:	00bfffd4 	movui	r2,65535
 800a09c:	11c0672e 	bgeu	r2,r7,800a23c <__udivdi3+0x2f8>
 800a0a0:	00804034 	movhi	r2,256
 800a0a4:	10bfffc4 	addi	r2,r2,-1
 800a0a8:	11c10a36 	bltu	r2,r7,800a4d4 <__udivdi3+0x590>
 800a0ac:	00800404 	movi	r2,16
 800a0b0:	3886d83a 	srl	r3,r7,r2
 800a0b4:	010205f4 	movhi	r4,2071
 800a0b8:	211cc504 	addi	r4,r4,29460
 800a0bc:	20c7883a 	add	r3,r4,r3
 800a0c0:	18c00003 	ldbu	r3,0(r3)
 800a0c4:	05c00804 	movi	r23,32
 800a0c8:	1885883a 	add	r2,r3,r2
 800a0cc:	b8afc83a 	sub	r23,r23,r2
 800a0d0:	b800671e 	bne	r23,zero,800a270 <__udivdi3+0x32c>
 800a0d4:	3c010536 	bltu	r7,r16,800a4ec <__udivdi3+0x5a8>
 800a0d8:	9985403a 	cmpgeu	r2,r19,r6
 800a0dc:	0007883a 	mov	r3,zero
 800a0e0:	00004a06 	br	800a20c <__udivdi3+0x2c8>
 800a0e4:	3000041e 	bne	r6,zero,800a0f8 <__udivdi3+0x1b4>
 800a0e8:	000b883a 	mov	r5,zero
 800a0ec:	01000044 	movi	r4,1
 800a0f0:	800abfc0 	call	800abfc <__udivsi3>
 800a0f4:	1023883a 	mov	r17,r2
 800a0f8:	00bfffd4 	movui	r2,65535
 800a0fc:	1440532e 	bgeu	r2,r17,800a24c <__udivdi3+0x308>
 800a100:	00804034 	movhi	r2,256
 800a104:	10bfffc4 	addi	r2,r2,-1
 800a108:	1440f436 	bltu	r2,r17,800a4dc <__udivdi3+0x598>
 800a10c:	00800404 	movi	r2,16
 800a110:	8886d83a 	srl	r3,r17,r2
 800a114:	010205f4 	movhi	r4,2071
 800a118:	211cc504 	addi	r4,r4,29460
 800a11c:	20c7883a 	add	r3,r4,r3
 800a120:	18c00003 	ldbu	r3,0(r3)
 800a124:	1885883a 	add	r2,r3,r2
 800a128:	00c00804 	movi	r3,32
 800a12c:	1887c83a 	sub	r3,r3,r2
 800a130:	1800a51e 	bne	r3,zero,800a3c8 <__udivdi3+0x484>
 800a134:	882ad43a 	srli	r21,r17,16
 800a138:	8461c83a 	sub	r16,r16,r17
 800a13c:	8d3fffcc 	andi	r20,r17,65535
 800a140:	00c00044 	movi	r3,1
 800a144:	a80b883a 	mov	r5,r21
 800a148:	8009883a 	mov	r4,r16
 800a14c:	d8c00115 	stw	r3,4(sp)
 800a150:	800ac600 	call	800ac60 <__umodsi3>
 800a154:	a80b883a 	mov	r5,r21
 800a158:	8009883a 	mov	r4,r16
 800a15c:	1027883a 	mov	r19,r2
 800a160:	800abfc0 	call	800abfc <__udivsi3>
 800a164:	a00b883a 	mov	r5,r20
 800a168:	1009883a 	mov	r4,r2
 800a16c:	102d883a 	mov	r22,r2
 800a170:	800061c0 	call	800061c <__mulsi3>
 800a174:	9826943a 	slli	r19,r19,16
 800a178:	900ed43a 	srli	r7,r18,16
 800a17c:	d8c00117 	ldw	r3,4(sp)
 800a180:	3cceb03a 	or	r7,r7,r19
 800a184:	3880052e 	bgeu	r7,r2,800a19c <__udivdi3+0x258>
 800a188:	3c4f883a 	add	r7,r7,r17
 800a18c:	b13fffc4 	addi	r4,r22,-1
 800a190:	3c400136 	bltu	r7,r17,800a198 <__udivdi3+0x254>
 800a194:	3880e436 	bltu	r7,r2,800a528 <__udivdi3+0x5e4>
 800a198:	202d883a 	mov	r22,r4
 800a19c:	38a1c83a 	sub	r16,r7,r2
 800a1a0:	8009883a 	mov	r4,r16
 800a1a4:	a80b883a 	mov	r5,r21
 800a1a8:	d8c00115 	stw	r3,4(sp)
 800a1ac:	800ac600 	call	800ac60 <__umodsi3>
 800a1b0:	1027883a 	mov	r19,r2
 800a1b4:	8009883a 	mov	r4,r16
 800a1b8:	a80b883a 	mov	r5,r21
 800a1bc:	9826943a 	slli	r19,r19,16
 800a1c0:	800abfc0 	call	800abfc <__udivsi3>
 800a1c4:	a00b883a 	mov	r5,r20
 800a1c8:	1009883a 	mov	r4,r2
 800a1cc:	94bfffcc 	andi	r18,r18,65535
 800a1d0:	1021883a 	mov	r16,r2
 800a1d4:	94e4b03a 	or	r18,r18,r19
 800a1d8:	800061c0 	call	800061c <__mulsi3>
 800a1dc:	d8c00117 	ldw	r3,4(sp)
 800a1e0:	9080052e 	bgeu	r18,r2,800a1f8 <__udivdi3+0x2b4>
 800a1e4:	8ca5883a 	add	r18,r17,r18
 800a1e8:	813fffc4 	addi	r4,r16,-1
 800a1ec:	9440ad36 	bltu	r18,r17,800a4a4 <__udivdi3+0x560>
 800a1f0:	9080ac2e 	bgeu	r18,r2,800a4a4 <__udivdi3+0x560>
 800a1f4:	843fff84 	addi	r16,r16,-2
 800a1f8:	b004943a 	slli	r2,r22,16
 800a1fc:	1404b03a 	or	r2,r2,r16
 800a200:	00000206 	br	800a20c <__udivdi3+0x2c8>
 800a204:	0007883a 	mov	r3,zero
 800a208:	0005883a 	mov	r2,zero
 800a20c:	dfc00b17 	ldw	ra,44(sp)
 800a210:	df000a17 	ldw	fp,40(sp)
 800a214:	ddc00917 	ldw	r23,36(sp)
 800a218:	dd800817 	ldw	r22,32(sp)
 800a21c:	dd400717 	ldw	r21,28(sp)
 800a220:	dd000617 	ldw	r20,24(sp)
 800a224:	dcc00517 	ldw	r19,20(sp)
 800a228:	dc800417 	ldw	r18,16(sp)
 800a22c:	dc400317 	ldw	r17,12(sp)
 800a230:	dc000217 	ldw	r16,8(sp)
 800a234:	dec00c04 	addi	sp,sp,48
 800a238:	f800283a 	ret
 800a23c:	00803fc4 	movi	r2,255
 800a240:	11c5803a 	cmpltu	r2,r2,r7
 800a244:	100490fa 	slli	r2,r2,3
 800a248:	003f9906 	br	800a0b0 <__alt_data_end+0xfc00a0b0>
 800a24c:	00803fc4 	movi	r2,255
 800a250:	1445803a 	cmpltu	r2,r2,r17
 800a254:	100490fa 	slli	r2,r2,3
 800a258:	003fad06 	br	800a110 <__alt_data_end+0xfc00a110>
 800a25c:	00804034 	movhi	r2,256
 800a260:	10bfffc4 	addi	r2,r2,-1
 800a264:	11809f36 	bltu	r2,r6,800a4e4 <__udivdi3+0x5a0>
 800a268:	00800404 	movi	r2,16
 800a26c:	003f4c06 	br	8009fa0 <__alt_data_end+0xfc009fa0>
 800a270:	3dce983a 	sll	r7,r7,r23
 800a274:	30b8d83a 	srl	fp,r6,r2
 800a278:	80a2d83a 	srl	r17,r16,r2
 800a27c:	35cc983a 	sll	r6,r6,r23
 800a280:	3f38b03a 	or	fp,r7,fp
 800a284:	e024d43a 	srli	r18,fp,16
 800a288:	9884d83a 	srl	r2,r19,r2
 800a28c:	85e0983a 	sll	r16,r16,r23
 800a290:	8809883a 	mov	r4,r17
 800a294:	900b883a 	mov	r5,r18
 800a298:	d9800015 	stw	r6,0(sp)
 800a29c:	1420b03a 	or	r16,r2,r16
 800a2a0:	800ac600 	call	800ac60 <__umodsi3>
 800a2a4:	900b883a 	mov	r5,r18
 800a2a8:	8809883a 	mov	r4,r17
 800a2ac:	1029883a 	mov	r20,r2
 800a2b0:	e5bfffcc 	andi	r22,fp,65535
 800a2b4:	800abfc0 	call	800abfc <__udivsi3>
 800a2b8:	100b883a 	mov	r5,r2
 800a2bc:	b009883a 	mov	r4,r22
 800a2c0:	102b883a 	mov	r21,r2
 800a2c4:	800061c0 	call	800061c <__mulsi3>
 800a2c8:	a028943a 	slli	r20,r20,16
 800a2cc:	8006d43a 	srli	r3,r16,16
 800a2d0:	1d06b03a 	or	r3,r3,r20
 800a2d4:	1880042e 	bgeu	r3,r2,800a2e8 <__udivdi3+0x3a4>
 800a2d8:	1f07883a 	add	r3,r3,fp
 800a2dc:	a93fffc4 	addi	r4,r21,-1
 800a2e0:	1f00892e 	bgeu	r3,fp,800a508 <__udivdi3+0x5c4>
 800a2e4:	202b883a 	mov	r21,r4
 800a2e8:	18a3c83a 	sub	r17,r3,r2
 800a2ec:	8809883a 	mov	r4,r17
 800a2f0:	900b883a 	mov	r5,r18
 800a2f4:	800ac600 	call	800ac60 <__umodsi3>
 800a2f8:	1029883a 	mov	r20,r2
 800a2fc:	8809883a 	mov	r4,r17
 800a300:	900b883a 	mov	r5,r18
 800a304:	a028943a 	slli	r20,r20,16
 800a308:	800abfc0 	call	800abfc <__udivsi3>
 800a30c:	100b883a 	mov	r5,r2
 800a310:	b009883a 	mov	r4,r22
 800a314:	843fffcc 	andi	r16,r16,65535
 800a318:	1023883a 	mov	r17,r2
 800a31c:	8520b03a 	or	r16,r16,r20
 800a320:	800061c0 	call	800061c <__mulsi3>
 800a324:	8080042e 	bgeu	r16,r2,800a338 <__udivdi3+0x3f4>
 800a328:	8721883a 	add	r16,r16,fp
 800a32c:	88ffffc4 	addi	r3,r17,-1
 800a330:	8700712e 	bgeu	r16,fp,800a4f8 <__udivdi3+0x5b4>
 800a334:	1823883a 	mov	r17,r3
 800a338:	a80e943a 	slli	r7,r21,16
 800a33c:	d8c00017 	ldw	r3,0(sp)
 800a340:	80a1c83a 	sub	r16,r16,r2
 800a344:	3c64b03a 	or	r18,r7,r17
 800a348:	1d3fffcc 	andi	r20,r3,65535
 800a34c:	9022d43a 	srli	r17,r18,16
 800a350:	95bfffcc 	andi	r22,r18,65535
 800a354:	a00b883a 	mov	r5,r20
 800a358:	b009883a 	mov	r4,r22
 800a35c:	182ad43a 	srli	r21,r3,16
 800a360:	800061c0 	call	800061c <__mulsi3>
 800a364:	a00b883a 	mov	r5,r20
 800a368:	8809883a 	mov	r4,r17
 800a36c:	1039883a 	mov	fp,r2
 800a370:	800061c0 	call	800061c <__mulsi3>
 800a374:	8809883a 	mov	r4,r17
 800a378:	a80b883a 	mov	r5,r21
 800a37c:	1029883a 	mov	r20,r2
 800a380:	800061c0 	call	800061c <__mulsi3>
 800a384:	a80b883a 	mov	r5,r21
 800a388:	b009883a 	mov	r4,r22
 800a38c:	1023883a 	mov	r17,r2
 800a390:	800061c0 	call	800061c <__mulsi3>
 800a394:	e006d43a 	srli	r3,fp,16
 800a398:	1505883a 	add	r2,r2,r20
 800a39c:	1887883a 	add	r3,r3,r2
 800a3a0:	1d00022e 	bgeu	r3,r20,800a3ac <__udivdi3+0x468>
 800a3a4:	00800074 	movhi	r2,1
 800a3a8:	88a3883a 	add	r17,r17,r2
 800a3ac:	1804d43a 	srli	r2,r3,16
 800a3b0:	1463883a 	add	r17,r2,r17
 800a3b4:	84404436 	bltu	r16,r17,800a4c8 <__udivdi3+0x584>
 800a3b8:	84403e26 	beq	r16,r17,800a4b4 <__udivdi3+0x570>
 800a3bc:	9005883a 	mov	r2,r18
 800a3c0:	0007883a 	mov	r3,zero
 800a3c4:	003f9106 	br	800a20c <__alt_data_end+0xfc00a20c>
 800a3c8:	88e2983a 	sll	r17,r17,r3
 800a3cc:	80aed83a 	srl	r23,r16,r2
 800a3d0:	80e0983a 	sll	r16,r16,r3
 800a3d4:	882ad43a 	srli	r21,r17,16
 800a3d8:	9884d83a 	srl	r2,r19,r2
 800a3dc:	b809883a 	mov	r4,r23
 800a3e0:	a80b883a 	mov	r5,r21
 800a3e4:	98e4983a 	sll	r18,r19,r3
 800a3e8:	142cb03a 	or	r22,r2,r16
 800a3ec:	800ac600 	call	800ac60 <__umodsi3>
 800a3f0:	b809883a 	mov	r4,r23
 800a3f4:	a80b883a 	mov	r5,r21
 800a3f8:	1027883a 	mov	r19,r2
 800a3fc:	8d3fffcc 	andi	r20,r17,65535
 800a400:	800abfc0 	call	800abfc <__udivsi3>
 800a404:	a009883a 	mov	r4,r20
 800a408:	100b883a 	mov	r5,r2
 800a40c:	102f883a 	mov	r23,r2
 800a410:	800061c0 	call	800061c <__mulsi3>
 800a414:	9826943a 	slli	r19,r19,16
 800a418:	b008d43a 	srli	r4,r22,16
 800a41c:	24c8b03a 	or	r4,r4,r19
 800a420:	2080062e 	bgeu	r4,r2,800a43c <__udivdi3+0x4f8>
 800a424:	2449883a 	add	r4,r4,r17
 800a428:	b8ffffc4 	addi	r3,r23,-1
 800a42c:	24403c36 	bltu	r4,r17,800a520 <__udivdi3+0x5dc>
 800a430:	20803b2e 	bgeu	r4,r2,800a520 <__udivdi3+0x5dc>
 800a434:	bdffff84 	addi	r23,r23,-2
 800a438:	2449883a 	add	r4,r4,r17
 800a43c:	20a1c83a 	sub	r16,r4,r2
 800a440:	a80b883a 	mov	r5,r21
 800a444:	8009883a 	mov	r4,r16
 800a448:	800ac600 	call	800ac60 <__umodsi3>
 800a44c:	a80b883a 	mov	r5,r21
 800a450:	8009883a 	mov	r4,r16
 800a454:	1027883a 	mov	r19,r2
 800a458:	800abfc0 	call	800abfc <__udivsi3>
 800a45c:	a009883a 	mov	r4,r20
 800a460:	100b883a 	mov	r5,r2
 800a464:	9826943a 	slli	r19,r19,16
 800a468:	1039883a 	mov	fp,r2
 800a46c:	800061c0 	call	800061c <__mulsi3>
 800a470:	b13fffcc 	andi	r4,r22,65535
 800a474:	24c8b03a 	or	r4,r4,r19
 800a478:	2080062e 	bgeu	r4,r2,800a494 <__udivdi3+0x550>
 800a47c:	2449883a 	add	r4,r4,r17
 800a480:	e0ffffc4 	addi	r3,fp,-1
 800a484:	24402436 	bltu	r4,r17,800a518 <__udivdi3+0x5d4>
 800a488:	2080232e 	bgeu	r4,r2,800a518 <__udivdi3+0x5d4>
 800a48c:	e73fff84 	addi	fp,fp,-2
 800a490:	2449883a 	add	r4,r4,r17
 800a494:	b82e943a 	slli	r23,r23,16
 800a498:	20a1c83a 	sub	r16,r4,r2
 800a49c:	bf06b03a 	or	r3,r23,fp
 800a4a0:	003f2806 	br	800a144 <__alt_data_end+0xfc00a144>
 800a4a4:	2021883a 	mov	r16,r4
 800a4a8:	003f5306 	br	800a1f8 <__alt_data_end+0xfc00a1f8>
 800a4ac:	1821883a 	mov	r16,r3
 800a4b0:	003ef406 	br	800a084 <__alt_data_end+0xfc00a084>
 800a4b4:	1806943a 	slli	r3,r3,16
 800a4b8:	9de6983a 	sll	r19,r19,r23
 800a4bc:	e73fffcc 	andi	fp,fp,65535
 800a4c0:	1f07883a 	add	r3,r3,fp
 800a4c4:	98ffbd2e 	bgeu	r19,r3,800a3bc <__alt_data_end+0xfc00a3bc>
 800a4c8:	90bfffc4 	addi	r2,r18,-1
 800a4cc:	0007883a 	mov	r3,zero
 800a4d0:	003f4e06 	br	800a20c <__alt_data_end+0xfc00a20c>
 800a4d4:	00800604 	movi	r2,24
 800a4d8:	003ef506 	br	800a0b0 <__alt_data_end+0xfc00a0b0>
 800a4dc:	00800604 	movi	r2,24
 800a4e0:	003f0b06 	br	800a110 <__alt_data_end+0xfc00a110>
 800a4e4:	00800604 	movi	r2,24
 800a4e8:	003ead06 	br	8009fa0 <__alt_data_end+0xfc009fa0>
 800a4ec:	0007883a 	mov	r3,zero
 800a4f0:	00800044 	movi	r2,1
 800a4f4:	003f4506 	br	800a20c <__alt_data_end+0xfc00a20c>
 800a4f8:	80bf8e2e 	bgeu	r16,r2,800a334 <__alt_data_end+0xfc00a334>
 800a4fc:	8c7fff84 	addi	r17,r17,-2
 800a500:	8721883a 	add	r16,r16,fp
 800a504:	003f8c06 	br	800a338 <__alt_data_end+0xfc00a338>
 800a508:	18bf762e 	bgeu	r3,r2,800a2e4 <__alt_data_end+0xfc00a2e4>
 800a50c:	ad7fff84 	addi	r21,r21,-2
 800a510:	1f07883a 	add	r3,r3,fp
 800a514:	003f7406 	br	800a2e8 <__alt_data_end+0xfc00a2e8>
 800a518:	1839883a 	mov	fp,r3
 800a51c:	003fdd06 	br	800a494 <__alt_data_end+0xfc00a494>
 800a520:	182f883a 	mov	r23,r3
 800a524:	003fc506 	br	800a43c <__alt_data_end+0xfc00a43c>
 800a528:	b5bfff84 	addi	r22,r22,-2
 800a52c:	3c4f883a 	add	r7,r7,r17
 800a530:	003f1a06 	br	800a19c <__alt_data_end+0xfc00a19c>
 800a534:	b5bfff84 	addi	r22,r22,-2
 800a538:	1c47883a 	add	r3,r3,r17
 800a53c:	003ebc06 	br	800a030 <__alt_data_end+0xfc00a030>

0800a540 <__umoddi3>:
 800a540:	defff304 	addi	sp,sp,-52
 800a544:	df000b15 	stw	fp,44(sp)
 800a548:	dc400415 	stw	r17,16(sp)
 800a54c:	dc000315 	stw	r16,12(sp)
 800a550:	dfc00c15 	stw	ra,48(sp)
 800a554:	ddc00a15 	stw	r23,40(sp)
 800a558:	dd800915 	stw	r22,36(sp)
 800a55c:	dd400815 	stw	r21,32(sp)
 800a560:	dd000715 	stw	r20,28(sp)
 800a564:	dcc00615 	stw	r19,24(sp)
 800a568:	dc800515 	stw	r18,20(sp)
 800a56c:	2021883a 	mov	r16,r4
 800a570:	2823883a 	mov	r17,r5
 800a574:	2839883a 	mov	fp,r5
 800a578:	3800401e 	bne	r7,zero,800a67c <__umoddi3+0x13c>
 800a57c:	3027883a 	mov	r19,r6
 800a580:	2029883a 	mov	r20,r4
 800a584:	2980552e 	bgeu	r5,r6,800a6dc <__umoddi3+0x19c>
 800a588:	00bfffd4 	movui	r2,65535
 800a58c:	1180a236 	bltu	r2,r6,800a818 <__umoddi3+0x2d8>
 800a590:	01003fc4 	movi	r4,255
 800a594:	2189803a 	cmpltu	r4,r4,r6
 800a598:	200890fa 	slli	r4,r4,3
 800a59c:	3104d83a 	srl	r2,r6,r4
 800a5a0:	00c205f4 	movhi	r3,2071
 800a5a4:	18dcc504 	addi	r3,r3,29460
 800a5a8:	1885883a 	add	r2,r3,r2
 800a5ac:	10c00003 	ldbu	r3,0(r2)
 800a5b0:	00800804 	movi	r2,32
 800a5b4:	1909883a 	add	r4,r3,r4
 800a5b8:	1125c83a 	sub	r18,r2,r4
 800a5bc:	90000526 	beq	r18,zero,800a5d4 <__umoddi3+0x94>
 800a5c0:	8ca2983a 	sll	r17,r17,r18
 800a5c4:	8108d83a 	srl	r4,r16,r4
 800a5c8:	34a6983a 	sll	r19,r6,r18
 800a5cc:	84a8983a 	sll	r20,r16,r18
 800a5d0:	2478b03a 	or	fp,r4,r17
 800a5d4:	982cd43a 	srli	r22,r19,16
 800a5d8:	e009883a 	mov	r4,fp
 800a5dc:	9dffffcc 	andi	r23,r19,65535
 800a5e0:	b00b883a 	mov	r5,r22
 800a5e4:	800ac600 	call	800ac60 <__umodsi3>
 800a5e8:	b00b883a 	mov	r5,r22
 800a5ec:	e009883a 	mov	r4,fp
 800a5f0:	102b883a 	mov	r21,r2
 800a5f4:	800abfc0 	call	800abfc <__udivsi3>
 800a5f8:	100b883a 	mov	r5,r2
 800a5fc:	b809883a 	mov	r4,r23
 800a600:	800061c0 	call	800061c <__mulsi3>
 800a604:	a82a943a 	slli	r21,r21,16
 800a608:	a006d43a 	srli	r3,r20,16
 800a60c:	1d46b03a 	or	r3,r3,r21
 800a610:	1880032e 	bgeu	r3,r2,800a620 <__umoddi3+0xe0>
 800a614:	1cc7883a 	add	r3,r3,r19
 800a618:	1cc00136 	bltu	r3,r19,800a620 <__umoddi3+0xe0>
 800a61c:	18813136 	bltu	r3,r2,800aae4 <__umoddi3+0x5a4>
 800a620:	18a1c83a 	sub	r16,r3,r2
 800a624:	b00b883a 	mov	r5,r22
 800a628:	8009883a 	mov	r4,r16
 800a62c:	800ac600 	call	800ac60 <__umodsi3>
 800a630:	b00b883a 	mov	r5,r22
 800a634:	8009883a 	mov	r4,r16
 800a638:	1023883a 	mov	r17,r2
 800a63c:	800abfc0 	call	800abfc <__udivsi3>
 800a640:	100b883a 	mov	r5,r2
 800a644:	b809883a 	mov	r4,r23
 800a648:	8822943a 	slli	r17,r17,16
 800a64c:	800061c0 	call	800061c <__mulsi3>
 800a650:	a0ffffcc 	andi	r3,r20,65535
 800a654:	1c46b03a 	or	r3,r3,r17
 800a658:	1880042e 	bgeu	r3,r2,800a66c <__umoddi3+0x12c>
 800a65c:	1cc7883a 	add	r3,r3,r19
 800a660:	1cc00236 	bltu	r3,r19,800a66c <__umoddi3+0x12c>
 800a664:	1880012e 	bgeu	r3,r2,800a66c <__umoddi3+0x12c>
 800a668:	1cc7883a 	add	r3,r3,r19
 800a66c:	1885c83a 	sub	r2,r3,r2
 800a670:	1484d83a 	srl	r2,r2,r18
 800a674:	0007883a 	mov	r3,zero
 800a678:	00005306 	br	800a7c8 <__umoddi3+0x288>
 800a67c:	29c05036 	bltu	r5,r7,800a7c0 <__umoddi3+0x280>
 800a680:	00bfffd4 	movui	r2,65535
 800a684:	11c05c2e 	bgeu	r2,r7,800a7f8 <__umoddi3+0x2b8>
 800a688:	00804034 	movhi	r2,256
 800a68c:	10bfffc4 	addi	r2,r2,-1
 800a690:	11c10636 	bltu	r2,r7,800aaac <__umoddi3+0x56c>
 800a694:	01000404 	movi	r4,16
 800a698:	3904d83a 	srl	r2,r7,r4
 800a69c:	00c205f4 	movhi	r3,2071
 800a6a0:	18dcc504 	addi	r3,r3,29460
 800a6a4:	1885883a 	add	r2,r3,r2
 800a6a8:	14c00003 	ldbu	r19,0(r2)
 800a6ac:	00c00804 	movi	r3,32
 800a6b0:	9927883a 	add	r19,r19,r4
 800a6b4:	1ce9c83a 	sub	r20,r3,r19
 800a6b8:	a0005c1e 	bne	r20,zero,800a82c <__umoddi3+0x2ec>
 800a6bc:	3c400136 	bltu	r7,r17,800a6c4 <__umoddi3+0x184>
 800a6c0:	81810a36 	bltu	r16,r6,800aaec <__umoddi3+0x5ac>
 800a6c4:	8185c83a 	sub	r2,r16,r6
 800a6c8:	89e3c83a 	sub	r17,r17,r7
 800a6cc:	8089803a 	cmpltu	r4,r16,r2
 800a6d0:	8939c83a 	sub	fp,r17,r4
 800a6d4:	e007883a 	mov	r3,fp
 800a6d8:	00003b06 	br	800a7c8 <__umoddi3+0x288>
 800a6dc:	3000041e 	bne	r6,zero,800a6f0 <__umoddi3+0x1b0>
 800a6e0:	000b883a 	mov	r5,zero
 800a6e4:	01000044 	movi	r4,1
 800a6e8:	800abfc0 	call	800abfc <__udivsi3>
 800a6ec:	1027883a 	mov	r19,r2
 800a6f0:	00bfffd4 	movui	r2,65535
 800a6f4:	14c0442e 	bgeu	r2,r19,800a808 <__umoddi3+0x2c8>
 800a6f8:	00804034 	movhi	r2,256
 800a6fc:	10bfffc4 	addi	r2,r2,-1
 800a700:	14c0ec36 	bltu	r2,r19,800aab4 <__umoddi3+0x574>
 800a704:	00800404 	movi	r2,16
 800a708:	9886d83a 	srl	r3,r19,r2
 800a70c:	010205f4 	movhi	r4,2071
 800a710:	211cc504 	addi	r4,r4,29460
 800a714:	20c7883a 	add	r3,r4,r3
 800a718:	18c00003 	ldbu	r3,0(r3)
 800a71c:	1887883a 	add	r3,r3,r2
 800a720:	00800804 	movi	r2,32
 800a724:	10e5c83a 	sub	r18,r2,r3
 800a728:	9000ab1e 	bne	r18,zero,800a9d8 <__umoddi3+0x498>
 800a72c:	982cd43a 	srli	r22,r19,16
 800a730:	8ce3c83a 	sub	r17,r17,r19
 800a734:	9dffffcc 	andi	r23,r19,65535
 800a738:	b00b883a 	mov	r5,r22
 800a73c:	8809883a 	mov	r4,r17
 800a740:	800ac600 	call	800ac60 <__umodsi3>
 800a744:	b00b883a 	mov	r5,r22
 800a748:	8809883a 	mov	r4,r17
 800a74c:	102b883a 	mov	r21,r2
 800a750:	800abfc0 	call	800abfc <__udivsi3>
 800a754:	b80b883a 	mov	r5,r23
 800a758:	1009883a 	mov	r4,r2
 800a75c:	800061c0 	call	800061c <__mulsi3>
 800a760:	a82a943a 	slli	r21,r21,16
 800a764:	a006d43a 	srli	r3,r20,16
 800a768:	1d46b03a 	or	r3,r3,r21
 800a76c:	1880042e 	bgeu	r3,r2,800a780 <__umoddi3+0x240>
 800a770:	1cc7883a 	add	r3,r3,r19
 800a774:	1cc00236 	bltu	r3,r19,800a780 <__umoddi3+0x240>
 800a778:	1880012e 	bgeu	r3,r2,800a780 <__umoddi3+0x240>
 800a77c:	1cc7883a 	add	r3,r3,r19
 800a780:	18a1c83a 	sub	r16,r3,r2
 800a784:	b00b883a 	mov	r5,r22
 800a788:	8009883a 	mov	r4,r16
 800a78c:	800ac600 	call	800ac60 <__umodsi3>
 800a790:	1023883a 	mov	r17,r2
 800a794:	b00b883a 	mov	r5,r22
 800a798:	8009883a 	mov	r4,r16
 800a79c:	800abfc0 	call	800abfc <__udivsi3>
 800a7a0:	8822943a 	slli	r17,r17,16
 800a7a4:	b80b883a 	mov	r5,r23
 800a7a8:	1009883a 	mov	r4,r2
 800a7ac:	800061c0 	call	800061c <__mulsi3>
 800a7b0:	a53fffcc 	andi	r20,r20,65535
 800a7b4:	a446b03a 	or	r3,r20,r17
 800a7b8:	18bfac2e 	bgeu	r3,r2,800a66c <__alt_data_end+0xfc00a66c>
 800a7bc:	003fa706 	br	800a65c <__alt_data_end+0xfc00a65c>
 800a7c0:	2005883a 	mov	r2,r4
 800a7c4:	2807883a 	mov	r3,r5
 800a7c8:	dfc00c17 	ldw	ra,48(sp)
 800a7cc:	df000b17 	ldw	fp,44(sp)
 800a7d0:	ddc00a17 	ldw	r23,40(sp)
 800a7d4:	dd800917 	ldw	r22,36(sp)
 800a7d8:	dd400817 	ldw	r21,32(sp)
 800a7dc:	dd000717 	ldw	r20,28(sp)
 800a7e0:	dcc00617 	ldw	r19,24(sp)
 800a7e4:	dc800517 	ldw	r18,20(sp)
 800a7e8:	dc400417 	ldw	r17,16(sp)
 800a7ec:	dc000317 	ldw	r16,12(sp)
 800a7f0:	dec00d04 	addi	sp,sp,52
 800a7f4:	f800283a 	ret
 800a7f8:	04c03fc4 	movi	r19,255
 800a7fc:	99c9803a 	cmpltu	r4,r19,r7
 800a800:	200890fa 	slli	r4,r4,3
 800a804:	003fa406 	br	800a698 <__alt_data_end+0xfc00a698>
 800a808:	00803fc4 	movi	r2,255
 800a80c:	14c5803a 	cmpltu	r2,r2,r19
 800a810:	100490fa 	slli	r2,r2,3
 800a814:	003fbc06 	br	800a708 <__alt_data_end+0xfc00a708>
 800a818:	00804034 	movhi	r2,256
 800a81c:	10bfffc4 	addi	r2,r2,-1
 800a820:	1180a636 	bltu	r2,r6,800aabc <__umoddi3+0x57c>
 800a824:	01000404 	movi	r4,16
 800a828:	003f5c06 	br	800a59c <__alt_data_end+0xfc00a59c>
 800a82c:	3d0e983a 	sll	r7,r7,r20
 800a830:	34ead83a 	srl	r21,r6,r19
 800a834:	8cc6d83a 	srl	r3,r17,r19
 800a838:	8d10983a 	sll	r8,r17,r20
 800a83c:	3d6ab03a 	or	r21,r7,r21
 800a840:	a82cd43a 	srli	r22,r21,16
 800a844:	84e2d83a 	srl	r17,r16,r19
 800a848:	1809883a 	mov	r4,r3
 800a84c:	b00b883a 	mov	r5,r22
 800a850:	8a22b03a 	or	r17,r17,r8
 800a854:	3524983a 	sll	r18,r6,r20
 800a858:	dc400015 	stw	r17,0(sp)
 800a85c:	d8c00115 	stw	r3,4(sp)
 800a860:	800ac600 	call	800ac60 <__umodsi3>
 800a864:	d8c00117 	ldw	r3,4(sp)
 800a868:	b00b883a 	mov	r5,r22
 800a86c:	1039883a 	mov	fp,r2
 800a870:	1809883a 	mov	r4,r3
 800a874:	800abfc0 	call	800abfc <__udivsi3>
 800a878:	adffffcc 	andi	r23,r21,65535
 800a87c:	100b883a 	mov	r5,r2
 800a880:	b809883a 	mov	r4,r23
 800a884:	1023883a 	mov	r17,r2
 800a888:	800061c0 	call	800061c <__mulsi3>
 800a88c:	d9400017 	ldw	r5,0(sp)
 800a890:	e008943a 	slli	r4,fp,16
 800a894:	8520983a 	sll	r16,r16,r20
 800a898:	2806d43a 	srli	r3,r5,16
 800a89c:	1906b03a 	or	r3,r3,r4
 800a8a0:	1880042e 	bgeu	r3,r2,800a8b4 <__umoddi3+0x374>
 800a8a4:	1d47883a 	add	r3,r3,r21
 800a8a8:	893fffc4 	addi	r4,r17,-1
 800a8ac:	1d40892e 	bgeu	r3,r21,800aad4 <__umoddi3+0x594>
 800a8b0:	2023883a 	mov	r17,r4
 800a8b4:	18b9c83a 	sub	fp,r3,r2
 800a8b8:	b00b883a 	mov	r5,r22
 800a8bc:	e009883a 	mov	r4,fp
 800a8c0:	800ac600 	call	800ac60 <__umodsi3>
 800a8c4:	b00b883a 	mov	r5,r22
 800a8c8:	e009883a 	mov	r4,fp
 800a8cc:	d8800215 	stw	r2,8(sp)
 800a8d0:	800abfc0 	call	800abfc <__udivsi3>
 800a8d4:	100b883a 	mov	r5,r2
 800a8d8:	b809883a 	mov	r4,r23
 800a8dc:	102d883a 	mov	r22,r2
 800a8e0:	800061c0 	call	800061c <__mulsi3>
 800a8e4:	d9800217 	ldw	r6,8(sp)
 800a8e8:	d8c00017 	ldw	r3,0(sp)
 800a8ec:	300c943a 	slli	r6,r6,16
 800a8f0:	1a3fffcc 	andi	r8,r3,65535
 800a8f4:	4190b03a 	or	r8,r8,r6
 800a8f8:	4080042e 	bgeu	r8,r2,800a90c <__umoddi3+0x3cc>
 800a8fc:	4551883a 	add	r8,r8,r21
 800a900:	b0ffffc4 	addi	r3,r22,-1
 800a904:	45406f2e 	bgeu	r8,r21,800aac4 <__umoddi3+0x584>
 800a908:	182d883a 	mov	r22,r3
 800a90c:	880e943a 	slli	r7,r17,16
 800a910:	9006d43a 	srli	r3,r18,16
 800a914:	91bfffcc 	andi	r6,r18,65535
 800a918:	3dacb03a 	or	r22,r7,r22
 800a91c:	b02ed43a 	srli	r23,r22,16
 800a920:	b5bfffcc 	andi	r22,r22,65535
 800a924:	300b883a 	mov	r5,r6
 800a928:	b009883a 	mov	r4,r22
 800a92c:	40a3c83a 	sub	r17,r8,r2
 800a930:	d8c00115 	stw	r3,4(sp)
 800a934:	d9800215 	stw	r6,8(sp)
 800a938:	800061c0 	call	800061c <__mulsi3>
 800a93c:	d9800217 	ldw	r6,8(sp)
 800a940:	b809883a 	mov	r4,r23
 800a944:	1039883a 	mov	fp,r2
 800a948:	300b883a 	mov	r5,r6
 800a94c:	800061c0 	call	800061c <__mulsi3>
 800a950:	d8c00117 	ldw	r3,4(sp)
 800a954:	b809883a 	mov	r4,r23
 800a958:	d8800215 	stw	r2,8(sp)
 800a95c:	180b883a 	mov	r5,r3
 800a960:	800061c0 	call	800061c <__mulsi3>
 800a964:	d8c00117 	ldw	r3,4(sp)
 800a968:	b009883a 	mov	r4,r22
 800a96c:	102f883a 	mov	r23,r2
 800a970:	180b883a 	mov	r5,r3
 800a974:	800061c0 	call	800061c <__mulsi3>
 800a978:	d9800217 	ldw	r6,8(sp)
 800a97c:	e006d43a 	srli	r3,fp,16
 800a980:	1185883a 	add	r2,r2,r6
 800a984:	1885883a 	add	r2,r3,r2
 800a988:	1180022e 	bgeu	r2,r6,800a994 <__umoddi3+0x454>
 800a98c:	00c00074 	movhi	r3,1
 800a990:	b8ef883a 	add	r23,r23,r3
 800a994:	1006d43a 	srli	r3,r2,16
 800a998:	1004943a 	slli	r2,r2,16
 800a99c:	e73fffcc 	andi	fp,fp,65535
 800a9a0:	1dc7883a 	add	r3,r3,r23
 800a9a4:	1739883a 	add	fp,r2,fp
 800a9a8:	88c03a36 	bltu	r17,r3,800aa94 <__umoddi3+0x554>
 800a9ac:	88c05126 	beq	r17,r3,800aaf4 <__umoddi3+0x5b4>
 800a9b0:	88c9c83a 	sub	r4,r17,r3
 800a9b4:	e00f883a 	mov	r7,fp
 800a9b8:	81cfc83a 	sub	r7,r16,r7
 800a9bc:	81c7803a 	cmpltu	r3,r16,r7
 800a9c0:	20c7c83a 	sub	r3,r4,r3
 800a9c4:	1cc4983a 	sll	r2,r3,r19
 800a9c8:	3d0ed83a 	srl	r7,r7,r20
 800a9cc:	1d06d83a 	srl	r3,r3,r20
 800a9d0:	11c4b03a 	or	r2,r2,r7
 800a9d4:	003f7c06 	br	800a7c8 <__alt_data_end+0xfc00a7c8>
 800a9d8:	9ca6983a 	sll	r19,r19,r18
 800a9dc:	88f8d83a 	srl	fp,r17,r3
 800a9e0:	80c4d83a 	srl	r2,r16,r3
 800a9e4:	982cd43a 	srli	r22,r19,16
 800a9e8:	8ca2983a 	sll	r17,r17,r18
 800a9ec:	e009883a 	mov	r4,fp
 800a9f0:	b00b883a 	mov	r5,r22
 800a9f4:	146ab03a 	or	r21,r2,r17
 800a9f8:	800ac600 	call	800ac60 <__umodsi3>
 800a9fc:	b00b883a 	mov	r5,r22
 800aa00:	e009883a 	mov	r4,fp
 800aa04:	1029883a 	mov	r20,r2
 800aa08:	9dffffcc 	andi	r23,r19,65535
 800aa0c:	800abfc0 	call	800abfc <__udivsi3>
 800aa10:	b809883a 	mov	r4,r23
 800aa14:	100b883a 	mov	r5,r2
 800aa18:	800061c0 	call	800061c <__mulsi3>
 800aa1c:	a008943a 	slli	r4,r20,16
 800aa20:	a806d43a 	srli	r3,r21,16
 800aa24:	84a8983a 	sll	r20,r16,r18
 800aa28:	1906b03a 	or	r3,r3,r4
 800aa2c:	1880042e 	bgeu	r3,r2,800aa40 <__umoddi3+0x500>
 800aa30:	1cc7883a 	add	r3,r3,r19
 800aa34:	1cc00236 	bltu	r3,r19,800aa40 <__umoddi3+0x500>
 800aa38:	1880012e 	bgeu	r3,r2,800aa40 <__umoddi3+0x500>
 800aa3c:	1cc7883a 	add	r3,r3,r19
 800aa40:	18a3c83a 	sub	r17,r3,r2
 800aa44:	b00b883a 	mov	r5,r22
 800aa48:	8809883a 	mov	r4,r17
 800aa4c:	800ac600 	call	800ac60 <__umodsi3>
 800aa50:	b00b883a 	mov	r5,r22
 800aa54:	8809883a 	mov	r4,r17
 800aa58:	1021883a 	mov	r16,r2
 800aa5c:	800abfc0 	call	800abfc <__udivsi3>
 800aa60:	100b883a 	mov	r5,r2
 800aa64:	b809883a 	mov	r4,r23
 800aa68:	8020943a 	slli	r16,r16,16
 800aa6c:	800061c0 	call	800061c <__mulsi3>
 800aa70:	a8ffffcc 	andi	r3,r21,65535
 800aa74:	1c06b03a 	or	r3,r3,r16
 800aa78:	1880042e 	bgeu	r3,r2,800aa8c <__umoddi3+0x54c>
 800aa7c:	1cc7883a 	add	r3,r3,r19
 800aa80:	1cc00236 	bltu	r3,r19,800aa8c <__umoddi3+0x54c>
 800aa84:	1880012e 	bgeu	r3,r2,800aa8c <__umoddi3+0x54c>
 800aa88:	1cc7883a 	add	r3,r3,r19
 800aa8c:	18a3c83a 	sub	r17,r3,r2
 800aa90:	003f2906 	br	800a738 <__alt_data_end+0xfc00a738>
 800aa94:	e48fc83a 	sub	r7,fp,r18
 800aa98:	1d49c83a 	sub	r4,r3,r21
 800aa9c:	e1f9803a 	cmpltu	fp,fp,r7
 800aaa0:	2739c83a 	sub	fp,r4,fp
 800aaa4:	8f09c83a 	sub	r4,r17,fp
 800aaa8:	003fc306 	br	800a9b8 <__alt_data_end+0xfc00a9b8>
 800aaac:	01000604 	movi	r4,24
 800aab0:	003ef906 	br	800a698 <__alt_data_end+0xfc00a698>
 800aab4:	00800604 	movi	r2,24
 800aab8:	003f1306 	br	800a708 <__alt_data_end+0xfc00a708>
 800aabc:	01000604 	movi	r4,24
 800aac0:	003eb606 	br	800a59c <__alt_data_end+0xfc00a59c>
 800aac4:	40bf902e 	bgeu	r8,r2,800a908 <__alt_data_end+0xfc00a908>
 800aac8:	b5bfff84 	addi	r22,r22,-2
 800aacc:	4551883a 	add	r8,r8,r21
 800aad0:	003f8e06 	br	800a90c <__alt_data_end+0xfc00a90c>
 800aad4:	18bf762e 	bgeu	r3,r2,800a8b0 <__alt_data_end+0xfc00a8b0>
 800aad8:	8c7fff84 	addi	r17,r17,-2
 800aadc:	1d47883a 	add	r3,r3,r21
 800aae0:	003f7406 	br	800a8b4 <__alt_data_end+0xfc00a8b4>
 800aae4:	1cc7883a 	add	r3,r3,r19
 800aae8:	003ecd06 	br	800a620 <__alt_data_end+0xfc00a620>
 800aaec:	8005883a 	mov	r2,r16
 800aaf0:	003ef806 	br	800a6d4 <__alt_data_end+0xfc00a6d4>
 800aaf4:	873fe736 	bltu	r16,fp,800aa94 <__alt_data_end+0xfc00aa94>
 800aaf8:	e00f883a 	mov	r7,fp
 800aafc:	0009883a 	mov	r4,zero
 800ab00:	003fad06 	br	800a9b8 <__alt_data_end+0xfc00a9b8>

0800ab04 <__divsi3>:
 800ab04:	20001b16 	blt	r4,zero,800ab74 <__divsi3+0x70>
 800ab08:	000f883a 	mov	r7,zero
 800ab0c:	28001616 	blt	r5,zero,800ab68 <__divsi3+0x64>
 800ab10:	200d883a 	mov	r6,r4
 800ab14:	29001a2e 	bgeu	r5,r4,800ab80 <__divsi3+0x7c>
 800ab18:	00800804 	movi	r2,32
 800ab1c:	00c00044 	movi	r3,1
 800ab20:	00000106 	br	800ab28 <__divsi3+0x24>
 800ab24:	10000d26 	beq	r2,zero,800ab5c <__divsi3+0x58>
 800ab28:	294b883a 	add	r5,r5,r5
 800ab2c:	10bfffc4 	addi	r2,r2,-1
 800ab30:	18c7883a 	add	r3,r3,r3
 800ab34:	293ffb36 	bltu	r5,r4,800ab24 <__alt_data_end+0xfc00ab24>
 800ab38:	0005883a 	mov	r2,zero
 800ab3c:	18000726 	beq	r3,zero,800ab5c <__divsi3+0x58>
 800ab40:	0005883a 	mov	r2,zero
 800ab44:	31400236 	bltu	r6,r5,800ab50 <__divsi3+0x4c>
 800ab48:	314dc83a 	sub	r6,r6,r5
 800ab4c:	10c4b03a 	or	r2,r2,r3
 800ab50:	1806d07a 	srli	r3,r3,1
 800ab54:	280ad07a 	srli	r5,r5,1
 800ab58:	183ffa1e 	bne	r3,zero,800ab44 <__alt_data_end+0xfc00ab44>
 800ab5c:	38000126 	beq	r7,zero,800ab64 <__divsi3+0x60>
 800ab60:	0085c83a 	sub	r2,zero,r2
 800ab64:	f800283a 	ret
 800ab68:	014bc83a 	sub	r5,zero,r5
 800ab6c:	39c0005c 	xori	r7,r7,1
 800ab70:	003fe706 	br	800ab10 <__alt_data_end+0xfc00ab10>
 800ab74:	0109c83a 	sub	r4,zero,r4
 800ab78:	01c00044 	movi	r7,1
 800ab7c:	003fe306 	br	800ab0c <__alt_data_end+0xfc00ab0c>
 800ab80:	00c00044 	movi	r3,1
 800ab84:	003fee06 	br	800ab40 <__alt_data_end+0xfc00ab40>

0800ab88 <__modsi3>:
 800ab88:	20001716 	blt	r4,zero,800abe8 <__modsi3+0x60>
 800ab8c:	000f883a 	mov	r7,zero
 800ab90:	2005883a 	mov	r2,r4
 800ab94:	28001216 	blt	r5,zero,800abe0 <__modsi3+0x58>
 800ab98:	2900162e 	bgeu	r5,r4,800abf4 <__modsi3+0x6c>
 800ab9c:	01800804 	movi	r6,32
 800aba0:	00c00044 	movi	r3,1
 800aba4:	00000106 	br	800abac <__modsi3+0x24>
 800aba8:	30000a26 	beq	r6,zero,800abd4 <__modsi3+0x4c>
 800abac:	294b883a 	add	r5,r5,r5
 800abb0:	31bfffc4 	addi	r6,r6,-1
 800abb4:	18c7883a 	add	r3,r3,r3
 800abb8:	293ffb36 	bltu	r5,r4,800aba8 <__alt_data_end+0xfc00aba8>
 800abbc:	18000526 	beq	r3,zero,800abd4 <__modsi3+0x4c>
 800abc0:	1806d07a 	srli	r3,r3,1
 800abc4:	11400136 	bltu	r2,r5,800abcc <__modsi3+0x44>
 800abc8:	1145c83a 	sub	r2,r2,r5
 800abcc:	280ad07a 	srli	r5,r5,1
 800abd0:	183ffb1e 	bne	r3,zero,800abc0 <__alt_data_end+0xfc00abc0>
 800abd4:	38000126 	beq	r7,zero,800abdc <__modsi3+0x54>
 800abd8:	0085c83a 	sub	r2,zero,r2
 800abdc:	f800283a 	ret
 800abe0:	014bc83a 	sub	r5,zero,r5
 800abe4:	003fec06 	br	800ab98 <__alt_data_end+0xfc00ab98>
 800abe8:	0109c83a 	sub	r4,zero,r4
 800abec:	01c00044 	movi	r7,1
 800abf0:	003fe706 	br	800ab90 <__alt_data_end+0xfc00ab90>
 800abf4:	00c00044 	movi	r3,1
 800abf8:	003ff106 	br	800abc0 <__alt_data_end+0xfc00abc0>

0800abfc <__udivsi3>:
 800abfc:	200d883a 	mov	r6,r4
 800ac00:	2900152e 	bgeu	r5,r4,800ac58 <__udivsi3+0x5c>
 800ac04:	28001416 	blt	r5,zero,800ac58 <__udivsi3+0x5c>
 800ac08:	00800804 	movi	r2,32
 800ac0c:	00c00044 	movi	r3,1
 800ac10:	00000206 	br	800ac1c <__udivsi3+0x20>
 800ac14:	10000e26 	beq	r2,zero,800ac50 <__udivsi3+0x54>
 800ac18:	28000516 	blt	r5,zero,800ac30 <__udivsi3+0x34>
 800ac1c:	294b883a 	add	r5,r5,r5
 800ac20:	10bfffc4 	addi	r2,r2,-1
 800ac24:	18c7883a 	add	r3,r3,r3
 800ac28:	293ffa36 	bltu	r5,r4,800ac14 <__alt_data_end+0xfc00ac14>
 800ac2c:	18000826 	beq	r3,zero,800ac50 <__udivsi3+0x54>
 800ac30:	0005883a 	mov	r2,zero
 800ac34:	31400236 	bltu	r6,r5,800ac40 <__udivsi3+0x44>
 800ac38:	314dc83a 	sub	r6,r6,r5
 800ac3c:	10c4b03a 	or	r2,r2,r3
 800ac40:	1806d07a 	srli	r3,r3,1
 800ac44:	280ad07a 	srli	r5,r5,1
 800ac48:	183ffa1e 	bne	r3,zero,800ac34 <__alt_data_end+0xfc00ac34>
 800ac4c:	f800283a 	ret
 800ac50:	0005883a 	mov	r2,zero
 800ac54:	f800283a 	ret
 800ac58:	00c00044 	movi	r3,1
 800ac5c:	003ff406 	br	800ac30 <__alt_data_end+0xfc00ac30>

0800ac60 <__umodsi3>:
 800ac60:	2005883a 	mov	r2,r4
 800ac64:	2900122e 	bgeu	r5,r4,800acb0 <__umodsi3+0x50>
 800ac68:	28001116 	blt	r5,zero,800acb0 <__umodsi3+0x50>
 800ac6c:	01800804 	movi	r6,32
 800ac70:	00c00044 	movi	r3,1
 800ac74:	00000206 	br	800ac80 <__umodsi3+0x20>
 800ac78:	30000c26 	beq	r6,zero,800acac <__umodsi3+0x4c>
 800ac7c:	28000516 	blt	r5,zero,800ac94 <__umodsi3+0x34>
 800ac80:	294b883a 	add	r5,r5,r5
 800ac84:	31bfffc4 	addi	r6,r6,-1
 800ac88:	18c7883a 	add	r3,r3,r3
 800ac8c:	293ffa36 	bltu	r5,r4,800ac78 <__alt_data_end+0xfc00ac78>
 800ac90:	18000626 	beq	r3,zero,800acac <__umodsi3+0x4c>
 800ac94:	1806d07a 	srli	r3,r3,1
 800ac98:	11400136 	bltu	r2,r5,800aca0 <__umodsi3+0x40>
 800ac9c:	1145c83a 	sub	r2,r2,r5
 800aca0:	280ad07a 	srli	r5,r5,1
 800aca4:	183ffb1e 	bne	r3,zero,800ac94 <__alt_data_end+0xfc00ac94>
 800aca8:	f800283a 	ret
 800acac:	f800283a 	ret
 800acb0:	00c00044 	movi	r3,1
 800acb4:	003ff706 	br	800ac94 <__alt_data_end+0xfc00ac94>

0800acb8 <__adddf3>:
 800acb8:	02c00434 	movhi	r11,16
 800acbc:	5affffc4 	addi	r11,r11,-1
 800acc0:	2806d7fa 	srli	r3,r5,31
 800acc4:	2ad4703a 	and	r10,r5,r11
 800acc8:	3ad2703a 	and	r9,r7,r11
 800accc:	3804d53a 	srli	r2,r7,20
 800acd0:	3018d77a 	srli	r12,r6,29
 800acd4:	280ad53a 	srli	r5,r5,20
 800acd8:	501490fa 	slli	r10,r10,3
 800acdc:	2010d77a 	srli	r8,r4,29
 800ace0:	481290fa 	slli	r9,r9,3
 800ace4:	380ed7fa 	srli	r7,r7,31
 800ace8:	defffb04 	addi	sp,sp,-20
 800acec:	dc800215 	stw	r18,8(sp)
 800acf0:	dc400115 	stw	r17,4(sp)
 800acf4:	dc000015 	stw	r16,0(sp)
 800acf8:	dfc00415 	stw	ra,16(sp)
 800acfc:	dcc00315 	stw	r19,12(sp)
 800ad00:	1c803fcc 	andi	r18,r3,255
 800ad04:	2c01ffcc 	andi	r16,r5,2047
 800ad08:	5210b03a 	or	r8,r10,r8
 800ad0c:	202290fa 	slli	r17,r4,3
 800ad10:	1081ffcc 	andi	r2,r2,2047
 800ad14:	4b12b03a 	or	r9,r9,r12
 800ad18:	300c90fa 	slli	r6,r6,3
 800ad1c:	91c07526 	beq	r18,r7,800aef4 <__adddf3+0x23c>
 800ad20:	8087c83a 	sub	r3,r16,r2
 800ad24:	00c0ab0e 	bge	zero,r3,800afd4 <__adddf3+0x31c>
 800ad28:	10002a1e 	bne	r2,zero,800add4 <__adddf3+0x11c>
 800ad2c:	4984b03a 	or	r2,r9,r6
 800ad30:	1000961e 	bne	r2,zero,800af8c <__adddf3+0x2d4>
 800ad34:	888001cc 	andi	r2,r17,7
 800ad38:	10000726 	beq	r2,zero,800ad58 <__adddf3+0xa0>
 800ad3c:	888003cc 	andi	r2,r17,15
 800ad40:	00c00104 	movi	r3,4
 800ad44:	10c00426 	beq	r2,r3,800ad58 <__adddf3+0xa0>
 800ad48:	88c7883a 	add	r3,r17,r3
 800ad4c:	1c63803a 	cmpltu	r17,r3,r17
 800ad50:	4451883a 	add	r8,r8,r17
 800ad54:	1823883a 	mov	r17,r3
 800ad58:	4080202c 	andhi	r2,r8,128
 800ad5c:	10005926 	beq	r2,zero,800aec4 <__adddf3+0x20c>
 800ad60:	84000044 	addi	r16,r16,1
 800ad64:	0081ffc4 	movi	r2,2047
 800ad68:	8080ba26 	beq	r16,r2,800b054 <__adddf3+0x39c>
 800ad6c:	00bfe034 	movhi	r2,65408
 800ad70:	10bfffc4 	addi	r2,r2,-1
 800ad74:	4090703a 	and	r8,r8,r2
 800ad78:	4004977a 	slli	r2,r8,29
 800ad7c:	4010927a 	slli	r8,r8,9
 800ad80:	8822d0fa 	srli	r17,r17,3
 800ad84:	8401ffcc 	andi	r16,r16,2047
 800ad88:	4010d33a 	srli	r8,r8,12
 800ad8c:	9007883a 	mov	r3,r18
 800ad90:	1444b03a 	or	r2,r2,r17
 800ad94:	8401ffcc 	andi	r16,r16,2047
 800ad98:	8020953a 	slli	r16,r16,20
 800ad9c:	18c03fcc 	andi	r3,r3,255
 800ada0:	01000434 	movhi	r4,16
 800ada4:	213fffc4 	addi	r4,r4,-1
 800ada8:	180697fa 	slli	r3,r3,31
 800adac:	4110703a 	and	r8,r8,r4
 800adb0:	4410b03a 	or	r8,r8,r16
 800adb4:	40c6b03a 	or	r3,r8,r3
 800adb8:	dfc00417 	ldw	ra,16(sp)
 800adbc:	dcc00317 	ldw	r19,12(sp)
 800adc0:	dc800217 	ldw	r18,8(sp)
 800adc4:	dc400117 	ldw	r17,4(sp)
 800adc8:	dc000017 	ldw	r16,0(sp)
 800adcc:	dec00504 	addi	sp,sp,20
 800add0:	f800283a 	ret
 800add4:	0081ffc4 	movi	r2,2047
 800add8:	80bfd626 	beq	r16,r2,800ad34 <__alt_data_end+0xfc00ad34>
 800addc:	4a402034 	orhi	r9,r9,128
 800ade0:	00800e04 	movi	r2,56
 800ade4:	10c09f16 	blt	r2,r3,800b064 <__adddf3+0x3ac>
 800ade8:	008007c4 	movi	r2,31
 800adec:	10c0c216 	blt	r2,r3,800b0f8 <__adddf3+0x440>
 800adf0:	00800804 	movi	r2,32
 800adf4:	10c5c83a 	sub	r2,r2,r3
 800adf8:	488a983a 	sll	r5,r9,r2
 800adfc:	30c8d83a 	srl	r4,r6,r3
 800ae00:	3084983a 	sll	r2,r6,r2
 800ae04:	48c6d83a 	srl	r3,r9,r3
 800ae08:	290cb03a 	or	r6,r5,r4
 800ae0c:	1004c03a 	cmpne	r2,r2,zero
 800ae10:	308cb03a 	or	r6,r6,r2
 800ae14:	898dc83a 	sub	r6,r17,r6
 800ae18:	89a3803a 	cmpltu	r17,r17,r6
 800ae1c:	40d1c83a 	sub	r8,r8,r3
 800ae20:	4451c83a 	sub	r8,r8,r17
 800ae24:	3023883a 	mov	r17,r6
 800ae28:	4080202c 	andhi	r2,r8,128
 800ae2c:	10002326 	beq	r2,zero,800aebc <__adddf3+0x204>
 800ae30:	04c02034 	movhi	r19,128
 800ae34:	9cffffc4 	addi	r19,r19,-1
 800ae38:	44e6703a 	and	r19,r8,r19
 800ae3c:	98007626 	beq	r19,zero,800b018 <__adddf3+0x360>
 800ae40:	9809883a 	mov	r4,r19
 800ae44:	800d4f80 	call	800d4f8 <__clzsi2>
 800ae48:	10fffe04 	addi	r3,r2,-8
 800ae4c:	010007c4 	movi	r4,31
 800ae50:	20c07716 	blt	r4,r3,800b030 <__adddf3+0x378>
 800ae54:	00800804 	movi	r2,32
 800ae58:	10c5c83a 	sub	r2,r2,r3
 800ae5c:	8884d83a 	srl	r2,r17,r2
 800ae60:	98d0983a 	sll	r8,r19,r3
 800ae64:	88e2983a 	sll	r17,r17,r3
 800ae68:	1204b03a 	or	r2,r2,r8
 800ae6c:	1c007416 	blt	r3,r16,800b040 <__adddf3+0x388>
 800ae70:	1c21c83a 	sub	r16,r3,r16
 800ae74:	82000044 	addi	r8,r16,1
 800ae78:	00c007c4 	movi	r3,31
 800ae7c:	1a009116 	blt	r3,r8,800b0c4 <__adddf3+0x40c>
 800ae80:	00c00804 	movi	r3,32
 800ae84:	1a07c83a 	sub	r3,r3,r8
 800ae88:	8a08d83a 	srl	r4,r17,r8
 800ae8c:	88e2983a 	sll	r17,r17,r3
 800ae90:	10c6983a 	sll	r3,r2,r3
 800ae94:	1210d83a 	srl	r8,r2,r8
 800ae98:	8804c03a 	cmpne	r2,r17,zero
 800ae9c:	1906b03a 	or	r3,r3,r4
 800aea0:	18a2b03a 	or	r17,r3,r2
 800aea4:	0021883a 	mov	r16,zero
 800aea8:	003fa206 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800aeac:	1890b03a 	or	r8,r3,r2
 800aeb0:	40017d26 	beq	r8,zero,800b4a8 <__adddf3+0x7f0>
 800aeb4:	1011883a 	mov	r8,r2
 800aeb8:	1823883a 	mov	r17,r3
 800aebc:	888001cc 	andi	r2,r17,7
 800aec0:	103f9e1e 	bne	r2,zero,800ad3c <__alt_data_end+0xfc00ad3c>
 800aec4:	4004977a 	slli	r2,r8,29
 800aec8:	8822d0fa 	srli	r17,r17,3
 800aecc:	4010d0fa 	srli	r8,r8,3
 800aed0:	9007883a 	mov	r3,r18
 800aed4:	1444b03a 	or	r2,r2,r17
 800aed8:	0101ffc4 	movi	r4,2047
 800aedc:	81002426 	beq	r16,r4,800af70 <__adddf3+0x2b8>
 800aee0:	8120703a 	and	r16,r16,r4
 800aee4:	01000434 	movhi	r4,16
 800aee8:	213fffc4 	addi	r4,r4,-1
 800aeec:	4110703a 	and	r8,r8,r4
 800aef0:	003fa806 	br	800ad94 <__alt_data_end+0xfc00ad94>
 800aef4:	8089c83a 	sub	r4,r16,r2
 800aef8:	01005e0e 	bge	zero,r4,800b074 <__adddf3+0x3bc>
 800aefc:	10002b26 	beq	r2,zero,800afac <__adddf3+0x2f4>
 800af00:	0081ffc4 	movi	r2,2047
 800af04:	80bf8b26 	beq	r16,r2,800ad34 <__alt_data_end+0xfc00ad34>
 800af08:	4a402034 	orhi	r9,r9,128
 800af0c:	00800e04 	movi	r2,56
 800af10:	1100a40e 	bge	r2,r4,800b1a4 <__adddf3+0x4ec>
 800af14:	498cb03a 	or	r6,r9,r6
 800af18:	300ac03a 	cmpne	r5,r6,zero
 800af1c:	0013883a 	mov	r9,zero
 800af20:	2c4b883a 	add	r5,r5,r17
 800af24:	2c63803a 	cmpltu	r17,r5,r17
 800af28:	4a11883a 	add	r8,r9,r8
 800af2c:	8a11883a 	add	r8,r17,r8
 800af30:	2823883a 	mov	r17,r5
 800af34:	4080202c 	andhi	r2,r8,128
 800af38:	103fe026 	beq	r2,zero,800aebc <__alt_data_end+0xfc00aebc>
 800af3c:	84000044 	addi	r16,r16,1
 800af40:	0081ffc4 	movi	r2,2047
 800af44:	8080d226 	beq	r16,r2,800b290 <__adddf3+0x5d8>
 800af48:	00bfe034 	movhi	r2,65408
 800af4c:	10bfffc4 	addi	r2,r2,-1
 800af50:	4090703a 	and	r8,r8,r2
 800af54:	880ad07a 	srli	r5,r17,1
 800af58:	400897fa 	slli	r4,r8,31
 800af5c:	88c0004c 	andi	r3,r17,1
 800af60:	28e2b03a 	or	r17,r5,r3
 800af64:	4010d07a 	srli	r8,r8,1
 800af68:	2462b03a 	or	r17,r4,r17
 800af6c:	003f7106 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800af70:	4088b03a 	or	r4,r8,r2
 800af74:	20014526 	beq	r4,zero,800b48c <__adddf3+0x7d4>
 800af78:	01000434 	movhi	r4,16
 800af7c:	42000234 	orhi	r8,r8,8
 800af80:	213fffc4 	addi	r4,r4,-1
 800af84:	4110703a 	and	r8,r8,r4
 800af88:	003f8206 	br	800ad94 <__alt_data_end+0xfc00ad94>
 800af8c:	18ffffc4 	addi	r3,r3,-1
 800af90:	1800491e 	bne	r3,zero,800b0b8 <__adddf3+0x400>
 800af94:	898bc83a 	sub	r5,r17,r6
 800af98:	8963803a 	cmpltu	r17,r17,r5
 800af9c:	4251c83a 	sub	r8,r8,r9
 800afa0:	4451c83a 	sub	r8,r8,r17
 800afa4:	2823883a 	mov	r17,r5
 800afa8:	003f9f06 	br	800ae28 <__alt_data_end+0xfc00ae28>
 800afac:	4984b03a 	or	r2,r9,r6
 800afb0:	103f6026 	beq	r2,zero,800ad34 <__alt_data_end+0xfc00ad34>
 800afb4:	213fffc4 	addi	r4,r4,-1
 800afb8:	2000931e 	bne	r4,zero,800b208 <__adddf3+0x550>
 800afbc:	898d883a 	add	r6,r17,r6
 800afc0:	3463803a 	cmpltu	r17,r6,r17
 800afc4:	4251883a 	add	r8,r8,r9
 800afc8:	8a11883a 	add	r8,r17,r8
 800afcc:	3023883a 	mov	r17,r6
 800afd0:	003fd806 	br	800af34 <__alt_data_end+0xfc00af34>
 800afd4:	1800541e 	bne	r3,zero,800b128 <__adddf3+0x470>
 800afd8:	80800044 	addi	r2,r16,1
 800afdc:	1081ffcc 	andi	r2,r2,2047
 800afe0:	00c00044 	movi	r3,1
 800afe4:	1880a00e 	bge	r3,r2,800b268 <__adddf3+0x5b0>
 800afe8:	8989c83a 	sub	r4,r17,r6
 800afec:	8905803a 	cmpltu	r2,r17,r4
 800aff0:	4267c83a 	sub	r19,r8,r9
 800aff4:	98a7c83a 	sub	r19,r19,r2
 800aff8:	9880202c 	andhi	r2,r19,128
 800affc:	10006326 	beq	r2,zero,800b18c <__adddf3+0x4d4>
 800b000:	3463c83a 	sub	r17,r6,r17
 800b004:	4a07c83a 	sub	r3,r9,r8
 800b008:	344d803a 	cmpltu	r6,r6,r17
 800b00c:	19a7c83a 	sub	r19,r3,r6
 800b010:	3825883a 	mov	r18,r7
 800b014:	983f8a1e 	bne	r19,zero,800ae40 <__alt_data_end+0xfc00ae40>
 800b018:	8809883a 	mov	r4,r17
 800b01c:	800d4f80 	call	800d4f8 <__clzsi2>
 800b020:	10800804 	addi	r2,r2,32
 800b024:	10fffe04 	addi	r3,r2,-8
 800b028:	010007c4 	movi	r4,31
 800b02c:	20ff890e 	bge	r4,r3,800ae54 <__alt_data_end+0xfc00ae54>
 800b030:	10bff604 	addi	r2,r2,-40
 800b034:	8884983a 	sll	r2,r17,r2
 800b038:	0023883a 	mov	r17,zero
 800b03c:	1c3f8c0e 	bge	r3,r16,800ae70 <__alt_data_end+0xfc00ae70>
 800b040:	023fe034 	movhi	r8,65408
 800b044:	423fffc4 	addi	r8,r8,-1
 800b048:	80e1c83a 	sub	r16,r16,r3
 800b04c:	1210703a 	and	r8,r2,r8
 800b050:	003f3806 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b054:	9007883a 	mov	r3,r18
 800b058:	0011883a 	mov	r8,zero
 800b05c:	0005883a 	mov	r2,zero
 800b060:	003f4c06 	br	800ad94 <__alt_data_end+0xfc00ad94>
 800b064:	498cb03a 	or	r6,r9,r6
 800b068:	300cc03a 	cmpne	r6,r6,zero
 800b06c:	0007883a 	mov	r3,zero
 800b070:	003f6806 	br	800ae14 <__alt_data_end+0xfc00ae14>
 800b074:	20009c1e 	bne	r4,zero,800b2e8 <__adddf3+0x630>
 800b078:	80800044 	addi	r2,r16,1
 800b07c:	1141ffcc 	andi	r5,r2,2047
 800b080:	01000044 	movi	r4,1
 800b084:	2140670e 	bge	r4,r5,800b224 <__adddf3+0x56c>
 800b088:	0101ffc4 	movi	r4,2047
 800b08c:	11007f26 	beq	r2,r4,800b28c <__adddf3+0x5d4>
 800b090:	898d883a 	add	r6,r17,r6
 800b094:	4247883a 	add	r3,r8,r9
 800b098:	3451803a 	cmpltu	r8,r6,r17
 800b09c:	40d1883a 	add	r8,r8,r3
 800b0a0:	402297fa 	slli	r17,r8,31
 800b0a4:	300cd07a 	srli	r6,r6,1
 800b0a8:	4010d07a 	srli	r8,r8,1
 800b0ac:	1021883a 	mov	r16,r2
 800b0b0:	89a2b03a 	or	r17,r17,r6
 800b0b4:	003f1f06 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b0b8:	0081ffc4 	movi	r2,2047
 800b0bc:	80bf481e 	bne	r16,r2,800ade0 <__alt_data_end+0xfc00ade0>
 800b0c0:	003f1c06 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b0c4:	843ff844 	addi	r16,r16,-31
 800b0c8:	01000804 	movi	r4,32
 800b0cc:	1406d83a 	srl	r3,r2,r16
 800b0d0:	41005026 	beq	r8,r4,800b214 <__adddf3+0x55c>
 800b0d4:	01001004 	movi	r4,64
 800b0d8:	2211c83a 	sub	r8,r4,r8
 800b0dc:	1204983a 	sll	r2,r2,r8
 800b0e0:	88a2b03a 	or	r17,r17,r2
 800b0e4:	8822c03a 	cmpne	r17,r17,zero
 800b0e8:	1c62b03a 	or	r17,r3,r17
 800b0ec:	0011883a 	mov	r8,zero
 800b0f0:	0021883a 	mov	r16,zero
 800b0f4:	003f7106 	br	800aebc <__alt_data_end+0xfc00aebc>
 800b0f8:	193ff804 	addi	r4,r3,-32
 800b0fc:	00800804 	movi	r2,32
 800b100:	4908d83a 	srl	r4,r9,r4
 800b104:	18804526 	beq	r3,r2,800b21c <__adddf3+0x564>
 800b108:	00801004 	movi	r2,64
 800b10c:	10c5c83a 	sub	r2,r2,r3
 800b110:	4886983a 	sll	r3,r9,r2
 800b114:	198cb03a 	or	r6,r3,r6
 800b118:	300cc03a 	cmpne	r6,r6,zero
 800b11c:	218cb03a 	or	r6,r4,r6
 800b120:	0007883a 	mov	r3,zero
 800b124:	003f3b06 	br	800ae14 <__alt_data_end+0xfc00ae14>
 800b128:	80002a26 	beq	r16,zero,800b1d4 <__adddf3+0x51c>
 800b12c:	0101ffc4 	movi	r4,2047
 800b130:	11006826 	beq	r2,r4,800b2d4 <__adddf3+0x61c>
 800b134:	00c7c83a 	sub	r3,zero,r3
 800b138:	42002034 	orhi	r8,r8,128
 800b13c:	01000e04 	movi	r4,56
 800b140:	20c07c16 	blt	r4,r3,800b334 <__adddf3+0x67c>
 800b144:	010007c4 	movi	r4,31
 800b148:	20c0da16 	blt	r4,r3,800b4b4 <__adddf3+0x7fc>
 800b14c:	01000804 	movi	r4,32
 800b150:	20c9c83a 	sub	r4,r4,r3
 800b154:	4114983a 	sll	r10,r8,r4
 800b158:	88cad83a 	srl	r5,r17,r3
 800b15c:	8908983a 	sll	r4,r17,r4
 800b160:	40c6d83a 	srl	r3,r8,r3
 800b164:	5162b03a 	or	r17,r10,r5
 800b168:	2008c03a 	cmpne	r4,r4,zero
 800b16c:	8922b03a 	or	r17,r17,r4
 800b170:	3463c83a 	sub	r17,r6,r17
 800b174:	48c7c83a 	sub	r3,r9,r3
 800b178:	344d803a 	cmpltu	r6,r6,r17
 800b17c:	1991c83a 	sub	r8,r3,r6
 800b180:	1021883a 	mov	r16,r2
 800b184:	3825883a 	mov	r18,r7
 800b188:	003f2706 	br	800ae28 <__alt_data_end+0xfc00ae28>
 800b18c:	24d0b03a 	or	r8,r4,r19
 800b190:	40001b1e 	bne	r8,zero,800b200 <__adddf3+0x548>
 800b194:	0005883a 	mov	r2,zero
 800b198:	0007883a 	mov	r3,zero
 800b19c:	0021883a 	mov	r16,zero
 800b1a0:	003f4d06 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800b1a4:	008007c4 	movi	r2,31
 800b1a8:	11003c16 	blt	r2,r4,800b29c <__adddf3+0x5e4>
 800b1ac:	00800804 	movi	r2,32
 800b1b0:	1105c83a 	sub	r2,r2,r4
 800b1b4:	488e983a 	sll	r7,r9,r2
 800b1b8:	310ad83a 	srl	r5,r6,r4
 800b1bc:	3084983a 	sll	r2,r6,r2
 800b1c0:	4912d83a 	srl	r9,r9,r4
 800b1c4:	394ab03a 	or	r5,r7,r5
 800b1c8:	1004c03a 	cmpne	r2,r2,zero
 800b1cc:	288ab03a 	or	r5,r5,r2
 800b1d0:	003f5306 	br	800af20 <__alt_data_end+0xfc00af20>
 800b1d4:	4448b03a 	or	r4,r8,r17
 800b1d8:	20003e26 	beq	r4,zero,800b2d4 <__adddf3+0x61c>
 800b1dc:	00c6303a 	nor	r3,zero,r3
 800b1e0:	18003a1e 	bne	r3,zero,800b2cc <__adddf3+0x614>
 800b1e4:	3463c83a 	sub	r17,r6,r17
 800b1e8:	4a07c83a 	sub	r3,r9,r8
 800b1ec:	344d803a 	cmpltu	r6,r6,r17
 800b1f0:	1991c83a 	sub	r8,r3,r6
 800b1f4:	1021883a 	mov	r16,r2
 800b1f8:	3825883a 	mov	r18,r7
 800b1fc:	003f0a06 	br	800ae28 <__alt_data_end+0xfc00ae28>
 800b200:	2023883a 	mov	r17,r4
 800b204:	003f0d06 	br	800ae3c <__alt_data_end+0xfc00ae3c>
 800b208:	0081ffc4 	movi	r2,2047
 800b20c:	80bf3f1e 	bne	r16,r2,800af0c <__alt_data_end+0xfc00af0c>
 800b210:	003ec806 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b214:	0005883a 	mov	r2,zero
 800b218:	003fb106 	br	800b0e0 <__alt_data_end+0xfc00b0e0>
 800b21c:	0007883a 	mov	r3,zero
 800b220:	003fbc06 	br	800b114 <__alt_data_end+0xfc00b114>
 800b224:	4444b03a 	or	r2,r8,r17
 800b228:	8000871e 	bne	r16,zero,800b448 <__adddf3+0x790>
 800b22c:	1000ba26 	beq	r2,zero,800b518 <__adddf3+0x860>
 800b230:	4984b03a 	or	r2,r9,r6
 800b234:	103ebf26 	beq	r2,zero,800ad34 <__alt_data_end+0xfc00ad34>
 800b238:	8985883a 	add	r2,r17,r6
 800b23c:	4247883a 	add	r3,r8,r9
 800b240:	1451803a 	cmpltu	r8,r2,r17
 800b244:	40d1883a 	add	r8,r8,r3
 800b248:	40c0202c 	andhi	r3,r8,128
 800b24c:	1023883a 	mov	r17,r2
 800b250:	183f1a26 	beq	r3,zero,800aebc <__alt_data_end+0xfc00aebc>
 800b254:	00bfe034 	movhi	r2,65408
 800b258:	10bfffc4 	addi	r2,r2,-1
 800b25c:	2021883a 	mov	r16,r4
 800b260:	4090703a 	and	r8,r8,r2
 800b264:	003eb306 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b268:	4444b03a 	or	r2,r8,r17
 800b26c:	8000291e 	bne	r16,zero,800b314 <__adddf3+0x65c>
 800b270:	10004b1e 	bne	r2,zero,800b3a0 <__adddf3+0x6e8>
 800b274:	4990b03a 	or	r8,r9,r6
 800b278:	40008b26 	beq	r8,zero,800b4a8 <__adddf3+0x7f0>
 800b27c:	4811883a 	mov	r8,r9
 800b280:	3023883a 	mov	r17,r6
 800b284:	3825883a 	mov	r18,r7
 800b288:	003eaa06 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b28c:	1021883a 	mov	r16,r2
 800b290:	0011883a 	mov	r8,zero
 800b294:	0005883a 	mov	r2,zero
 800b298:	003f0f06 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800b29c:	217ff804 	addi	r5,r4,-32
 800b2a0:	00800804 	movi	r2,32
 800b2a4:	494ad83a 	srl	r5,r9,r5
 800b2a8:	20807d26 	beq	r4,r2,800b4a0 <__adddf3+0x7e8>
 800b2ac:	00801004 	movi	r2,64
 800b2b0:	1109c83a 	sub	r4,r2,r4
 800b2b4:	4912983a 	sll	r9,r9,r4
 800b2b8:	498cb03a 	or	r6,r9,r6
 800b2bc:	300cc03a 	cmpne	r6,r6,zero
 800b2c0:	298ab03a 	or	r5,r5,r6
 800b2c4:	0013883a 	mov	r9,zero
 800b2c8:	003f1506 	br	800af20 <__alt_data_end+0xfc00af20>
 800b2cc:	0101ffc4 	movi	r4,2047
 800b2d0:	113f9a1e 	bne	r2,r4,800b13c <__alt_data_end+0xfc00b13c>
 800b2d4:	4811883a 	mov	r8,r9
 800b2d8:	3023883a 	mov	r17,r6
 800b2dc:	1021883a 	mov	r16,r2
 800b2e0:	3825883a 	mov	r18,r7
 800b2e4:	003e9306 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b2e8:	8000161e 	bne	r16,zero,800b344 <__adddf3+0x68c>
 800b2ec:	444ab03a 	or	r5,r8,r17
 800b2f0:	28005126 	beq	r5,zero,800b438 <__adddf3+0x780>
 800b2f4:	0108303a 	nor	r4,zero,r4
 800b2f8:	20004d1e 	bne	r4,zero,800b430 <__adddf3+0x778>
 800b2fc:	89a3883a 	add	r17,r17,r6
 800b300:	4253883a 	add	r9,r8,r9
 800b304:	898d803a 	cmpltu	r6,r17,r6
 800b308:	3251883a 	add	r8,r6,r9
 800b30c:	1021883a 	mov	r16,r2
 800b310:	003f0806 	br	800af34 <__alt_data_end+0xfc00af34>
 800b314:	1000301e 	bne	r2,zero,800b3d8 <__adddf3+0x720>
 800b318:	4984b03a 	or	r2,r9,r6
 800b31c:	10007126 	beq	r2,zero,800b4e4 <__adddf3+0x82c>
 800b320:	4811883a 	mov	r8,r9
 800b324:	3023883a 	mov	r17,r6
 800b328:	3825883a 	mov	r18,r7
 800b32c:	0401ffc4 	movi	r16,2047
 800b330:	003e8006 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b334:	4462b03a 	or	r17,r8,r17
 800b338:	8822c03a 	cmpne	r17,r17,zero
 800b33c:	0007883a 	mov	r3,zero
 800b340:	003f8b06 	br	800b170 <__alt_data_end+0xfc00b170>
 800b344:	0141ffc4 	movi	r5,2047
 800b348:	11403b26 	beq	r2,r5,800b438 <__adddf3+0x780>
 800b34c:	0109c83a 	sub	r4,zero,r4
 800b350:	42002034 	orhi	r8,r8,128
 800b354:	01400e04 	movi	r5,56
 800b358:	29006716 	blt	r5,r4,800b4f8 <__adddf3+0x840>
 800b35c:	014007c4 	movi	r5,31
 800b360:	29007016 	blt	r5,r4,800b524 <__adddf3+0x86c>
 800b364:	01400804 	movi	r5,32
 800b368:	290bc83a 	sub	r5,r5,r4
 800b36c:	4154983a 	sll	r10,r8,r5
 800b370:	890ed83a 	srl	r7,r17,r4
 800b374:	894a983a 	sll	r5,r17,r5
 800b378:	4108d83a 	srl	r4,r8,r4
 800b37c:	51e2b03a 	or	r17,r10,r7
 800b380:	280ac03a 	cmpne	r5,r5,zero
 800b384:	8962b03a 	or	r17,r17,r5
 800b388:	89a3883a 	add	r17,r17,r6
 800b38c:	2253883a 	add	r9,r4,r9
 800b390:	898d803a 	cmpltu	r6,r17,r6
 800b394:	3251883a 	add	r8,r6,r9
 800b398:	1021883a 	mov	r16,r2
 800b39c:	003ee506 	br	800af34 <__alt_data_end+0xfc00af34>
 800b3a0:	4984b03a 	or	r2,r9,r6
 800b3a4:	103e6326 	beq	r2,zero,800ad34 <__alt_data_end+0xfc00ad34>
 800b3a8:	8987c83a 	sub	r3,r17,r6
 800b3ac:	88c9803a 	cmpltu	r4,r17,r3
 800b3b0:	4245c83a 	sub	r2,r8,r9
 800b3b4:	1105c83a 	sub	r2,r2,r4
 800b3b8:	1100202c 	andhi	r4,r2,128
 800b3bc:	203ebb26 	beq	r4,zero,800aeac <__alt_data_end+0xfc00aeac>
 800b3c0:	3463c83a 	sub	r17,r6,r17
 800b3c4:	4a07c83a 	sub	r3,r9,r8
 800b3c8:	344d803a 	cmpltu	r6,r6,r17
 800b3cc:	1991c83a 	sub	r8,r3,r6
 800b3d0:	3825883a 	mov	r18,r7
 800b3d4:	003e5706 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b3d8:	4984b03a 	or	r2,r9,r6
 800b3dc:	10002e26 	beq	r2,zero,800b498 <__adddf3+0x7e0>
 800b3e0:	4004d0fa 	srli	r2,r8,3
 800b3e4:	8822d0fa 	srli	r17,r17,3
 800b3e8:	4010977a 	slli	r8,r8,29
 800b3ec:	10c0022c 	andhi	r3,r2,8
 800b3f0:	4462b03a 	or	r17,r8,r17
 800b3f4:	18000826 	beq	r3,zero,800b418 <__adddf3+0x760>
 800b3f8:	4808d0fa 	srli	r4,r9,3
 800b3fc:	20c0022c 	andhi	r3,r4,8
 800b400:	1800051e 	bne	r3,zero,800b418 <__adddf3+0x760>
 800b404:	300cd0fa 	srli	r6,r6,3
 800b408:	4806977a 	slli	r3,r9,29
 800b40c:	2005883a 	mov	r2,r4
 800b410:	3825883a 	mov	r18,r7
 800b414:	19a2b03a 	or	r17,r3,r6
 800b418:	8810d77a 	srli	r8,r17,29
 800b41c:	100490fa 	slli	r2,r2,3
 800b420:	882290fa 	slli	r17,r17,3
 800b424:	0401ffc4 	movi	r16,2047
 800b428:	4090b03a 	or	r8,r8,r2
 800b42c:	003e4106 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b430:	0141ffc4 	movi	r5,2047
 800b434:	117fc71e 	bne	r2,r5,800b354 <__alt_data_end+0xfc00b354>
 800b438:	4811883a 	mov	r8,r9
 800b43c:	3023883a 	mov	r17,r6
 800b440:	1021883a 	mov	r16,r2
 800b444:	003e3b06 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b448:	10002f26 	beq	r2,zero,800b508 <__adddf3+0x850>
 800b44c:	4984b03a 	or	r2,r9,r6
 800b450:	10001126 	beq	r2,zero,800b498 <__adddf3+0x7e0>
 800b454:	4004d0fa 	srli	r2,r8,3
 800b458:	8822d0fa 	srli	r17,r17,3
 800b45c:	4010977a 	slli	r8,r8,29
 800b460:	10c0022c 	andhi	r3,r2,8
 800b464:	4462b03a 	or	r17,r8,r17
 800b468:	183feb26 	beq	r3,zero,800b418 <__alt_data_end+0xfc00b418>
 800b46c:	4808d0fa 	srli	r4,r9,3
 800b470:	20c0022c 	andhi	r3,r4,8
 800b474:	183fe81e 	bne	r3,zero,800b418 <__alt_data_end+0xfc00b418>
 800b478:	300cd0fa 	srli	r6,r6,3
 800b47c:	4806977a 	slli	r3,r9,29
 800b480:	2005883a 	mov	r2,r4
 800b484:	19a2b03a 	or	r17,r3,r6
 800b488:	003fe306 	br	800b418 <__alt_data_end+0xfc00b418>
 800b48c:	0011883a 	mov	r8,zero
 800b490:	0005883a 	mov	r2,zero
 800b494:	003e3f06 	br	800ad94 <__alt_data_end+0xfc00ad94>
 800b498:	0401ffc4 	movi	r16,2047
 800b49c:	003e2506 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b4a0:	0013883a 	mov	r9,zero
 800b4a4:	003f8406 	br	800b2b8 <__alt_data_end+0xfc00b2b8>
 800b4a8:	0005883a 	mov	r2,zero
 800b4ac:	0007883a 	mov	r3,zero
 800b4b0:	003e8906 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800b4b4:	197ff804 	addi	r5,r3,-32
 800b4b8:	01000804 	movi	r4,32
 800b4bc:	414ad83a 	srl	r5,r8,r5
 800b4c0:	19002426 	beq	r3,r4,800b554 <__adddf3+0x89c>
 800b4c4:	01001004 	movi	r4,64
 800b4c8:	20c7c83a 	sub	r3,r4,r3
 800b4cc:	40c6983a 	sll	r3,r8,r3
 800b4d0:	1c46b03a 	or	r3,r3,r17
 800b4d4:	1806c03a 	cmpne	r3,r3,zero
 800b4d8:	28e2b03a 	or	r17,r5,r3
 800b4dc:	0007883a 	mov	r3,zero
 800b4e0:	003f2306 	br	800b170 <__alt_data_end+0xfc00b170>
 800b4e4:	0007883a 	mov	r3,zero
 800b4e8:	5811883a 	mov	r8,r11
 800b4ec:	00bfffc4 	movi	r2,-1
 800b4f0:	0401ffc4 	movi	r16,2047
 800b4f4:	003e7806 	br	800aed8 <__alt_data_end+0xfc00aed8>
 800b4f8:	4462b03a 	or	r17,r8,r17
 800b4fc:	8822c03a 	cmpne	r17,r17,zero
 800b500:	0009883a 	mov	r4,zero
 800b504:	003fa006 	br	800b388 <__alt_data_end+0xfc00b388>
 800b508:	4811883a 	mov	r8,r9
 800b50c:	3023883a 	mov	r17,r6
 800b510:	0401ffc4 	movi	r16,2047
 800b514:	003e0706 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b518:	4811883a 	mov	r8,r9
 800b51c:	3023883a 	mov	r17,r6
 800b520:	003e0406 	br	800ad34 <__alt_data_end+0xfc00ad34>
 800b524:	21fff804 	addi	r7,r4,-32
 800b528:	01400804 	movi	r5,32
 800b52c:	41ced83a 	srl	r7,r8,r7
 800b530:	21400a26 	beq	r4,r5,800b55c <__adddf3+0x8a4>
 800b534:	01401004 	movi	r5,64
 800b538:	2909c83a 	sub	r4,r5,r4
 800b53c:	4108983a 	sll	r4,r8,r4
 800b540:	2448b03a 	or	r4,r4,r17
 800b544:	2008c03a 	cmpne	r4,r4,zero
 800b548:	3922b03a 	or	r17,r7,r4
 800b54c:	0009883a 	mov	r4,zero
 800b550:	003f8d06 	br	800b388 <__alt_data_end+0xfc00b388>
 800b554:	0007883a 	mov	r3,zero
 800b558:	003fdd06 	br	800b4d0 <__alt_data_end+0xfc00b4d0>
 800b55c:	0009883a 	mov	r4,zero
 800b560:	003ff706 	br	800b540 <__alt_data_end+0xfc00b540>

0800b564 <__divdf3>:
 800b564:	defff004 	addi	sp,sp,-64
 800b568:	dc800815 	stw	r18,32(sp)
 800b56c:	2824d53a 	srli	r18,r5,20
 800b570:	dd800c15 	stw	r22,48(sp)
 800b574:	282cd7fa 	srli	r22,r5,31
 800b578:	dc000615 	stw	r16,24(sp)
 800b57c:	04000434 	movhi	r16,16
 800b580:	843fffc4 	addi	r16,r16,-1
 800b584:	dfc00f15 	stw	ra,60(sp)
 800b588:	df000e15 	stw	fp,56(sp)
 800b58c:	ddc00d15 	stw	r23,52(sp)
 800b590:	dd400b15 	stw	r21,44(sp)
 800b594:	dd000a15 	stw	r20,40(sp)
 800b598:	dcc00915 	stw	r19,36(sp)
 800b59c:	dc400715 	stw	r17,28(sp)
 800b5a0:	9481ffcc 	andi	r18,r18,2047
 800b5a4:	2c20703a 	and	r16,r5,r16
 800b5a8:	b2003fcc 	andi	r8,r22,255
 800b5ac:	90006126 	beq	r18,zero,800b734 <__divdf3+0x1d0>
 800b5b0:	0081ffc4 	movi	r2,2047
 800b5b4:	202b883a 	mov	r21,r4
 800b5b8:	90803726 	beq	r18,r2,800b698 <__divdf3+0x134>
 800b5bc:	80800434 	orhi	r2,r16,16
 800b5c0:	100490fa 	slli	r2,r2,3
 800b5c4:	2020d77a 	srli	r16,r4,29
 800b5c8:	202a90fa 	slli	r21,r4,3
 800b5cc:	94bf0044 	addi	r18,r18,-1023
 800b5d0:	80a0b03a 	or	r16,r16,r2
 800b5d4:	0013883a 	mov	r9,zero
 800b5d8:	000b883a 	mov	r5,zero
 800b5dc:	3806d53a 	srli	r3,r7,20
 800b5e0:	382ed7fa 	srli	r23,r7,31
 800b5e4:	04400434 	movhi	r17,16
 800b5e8:	8c7fffc4 	addi	r17,r17,-1
 800b5ec:	18c1ffcc 	andi	r3,r3,2047
 800b5f0:	3029883a 	mov	r20,r6
 800b5f4:	3c62703a 	and	r17,r7,r17
 800b5f8:	bf003fcc 	andi	fp,r23,255
 800b5fc:	18006e26 	beq	r3,zero,800b7b8 <__divdf3+0x254>
 800b600:	0081ffc4 	movi	r2,2047
 800b604:	18806626 	beq	r3,r2,800b7a0 <__divdf3+0x23c>
 800b608:	88800434 	orhi	r2,r17,16
 800b60c:	100490fa 	slli	r2,r2,3
 800b610:	3022d77a 	srli	r17,r6,29
 800b614:	302890fa 	slli	r20,r6,3
 800b618:	18ff0044 	addi	r3,r3,-1023
 800b61c:	88a2b03a 	or	r17,r17,r2
 800b620:	000f883a 	mov	r7,zero
 800b624:	b5e6f03a 	xor	r19,r22,r23
 800b628:	3a4cb03a 	or	r6,r7,r9
 800b62c:	008003c4 	movi	r2,15
 800b630:	9809883a 	mov	r4,r19
 800b634:	90c7c83a 	sub	r3,r18,r3
 800b638:	9cc03fcc 	andi	r19,r19,255
 800b63c:	11809636 	bltu	r2,r6,800b898 <__divdf3+0x334>
 800b640:	300c90ba 	slli	r6,r6,2
 800b644:	00820074 	movhi	r2,2049
 800b648:	10ad9604 	addi	r2,r2,-18856
 800b64c:	308d883a 	add	r6,r6,r2
 800b650:	30800017 	ldw	r2,0(r6)
 800b654:	1000683a 	jmp	r2
 800b658:	0800b898 	cmpnei	zero,at,738
 800b65c:	0800b6d0 	cmplti	zero,at,731
 800b660:	0800b888 	cmpgei	zero,at,738
 800b664:	0800b6c4 	addi	zero,at,731
 800b668:	0800b888 	cmpgei	zero,at,738
 800b66c:	0800b85c 	xori	zero,at,737
 800b670:	0800b888 	cmpgei	zero,at,738
 800b674:	0800b6c4 	addi	zero,at,731
 800b678:	0800b6d0 	cmplti	zero,at,731
 800b67c:	0800b6d0 	cmplti	zero,at,731
 800b680:	0800b85c 	xori	zero,at,737
 800b684:	0800b6c4 	addi	zero,at,731
 800b688:	0800b6b4 	orhi	zero,at,730
 800b68c:	0800b6b4 	orhi	zero,at,730
 800b690:	0800b6b4 	orhi	zero,at,730
 800b694:	0800bc20 	cmpeqi	zero,at,752
 800b698:	2404b03a 	or	r2,r4,r16
 800b69c:	10006c1e 	bne	r2,zero,800b850 <__divdf3+0x2ec>
 800b6a0:	02400204 	movi	r9,8
 800b6a4:	0021883a 	mov	r16,zero
 800b6a8:	002b883a 	mov	r21,zero
 800b6ac:	01400084 	movi	r5,2
 800b6b0:	003fca06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b6b4:	8023883a 	mov	r17,r16
 800b6b8:	a829883a 	mov	r20,r21
 800b6bc:	4039883a 	mov	fp,r8
 800b6c0:	280f883a 	mov	r7,r5
 800b6c4:	00800084 	movi	r2,2
 800b6c8:	3881601e 	bne	r7,r2,800bc4c <__divdf3+0x6e8>
 800b6cc:	e027883a 	mov	r19,fp
 800b6d0:	9900004c 	andi	r4,r19,1
 800b6d4:	0081ffc4 	movi	r2,2047
 800b6d8:	0021883a 	mov	r16,zero
 800b6dc:	002b883a 	mov	r21,zero
 800b6e0:	1004953a 	slli	r2,r2,20
 800b6e4:	20c03fcc 	andi	r3,r4,255
 800b6e8:	01400434 	movhi	r5,16
 800b6ec:	297fffc4 	addi	r5,r5,-1
 800b6f0:	180697fa 	slli	r3,r3,31
 800b6f4:	8160703a 	and	r16,r16,r5
 800b6f8:	80a0b03a 	or	r16,r16,r2
 800b6fc:	80c6b03a 	or	r3,r16,r3
 800b700:	a805883a 	mov	r2,r21
 800b704:	dfc00f17 	ldw	ra,60(sp)
 800b708:	df000e17 	ldw	fp,56(sp)
 800b70c:	ddc00d17 	ldw	r23,52(sp)
 800b710:	dd800c17 	ldw	r22,48(sp)
 800b714:	dd400b17 	ldw	r21,44(sp)
 800b718:	dd000a17 	ldw	r20,40(sp)
 800b71c:	dcc00917 	ldw	r19,36(sp)
 800b720:	dc800817 	ldw	r18,32(sp)
 800b724:	dc400717 	ldw	r17,28(sp)
 800b728:	dc000617 	ldw	r16,24(sp)
 800b72c:	dec01004 	addi	sp,sp,64
 800b730:	f800283a 	ret
 800b734:	2404b03a 	or	r2,r4,r16
 800b738:	2023883a 	mov	r17,r4
 800b73c:	10003f26 	beq	r2,zero,800b83c <__divdf3+0x2d8>
 800b740:	80015e26 	beq	r16,zero,800bcbc <__divdf3+0x758>
 800b744:	8009883a 	mov	r4,r16
 800b748:	d9800215 	stw	r6,8(sp)
 800b74c:	d9c00515 	stw	r7,20(sp)
 800b750:	da000415 	stw	r8,16(sp)
 800b754:	800d4f80 	call	800d4f8 <__clzsi2>
 800b758:	d9800217 	ldw	r6,8(sp)
 800b75c:	d9c00517 	ldw	r7,20(sp)
 800b760:	da000417 	ldw	r8,16(sp)
 800b764:	113ffd44 	addi	r4,r2,-11
 800b768:	00c00704 	movi	r3,28
 800b76c:	19014f16 	blt	r3,r4,800bcac <__divdf3+0x748>
 800b770:	00c00744 	movi	r3,29
 800b774:	157ffe04 	addi	r21,r2,-8
 800b778:	1907c83a 	sub	r3,r3,r4
 800b77c:	8560983a 	sll	r16,r16,r21
 800b780:	88c6d83a 	srl	r3,r17,r3
 800b784:	8d6a983a 	sll	r21,r17,r21
 800b788:	1c20b03a 	or	r16,r3,r16
 800b78c:	1080fcc4 	addi	r2,r2,1011
 800b790:	00a5c83a 	sub	r18,zero,r2
 800b794:	0013883a 	mov	r9,zero
 800b798:	000b883a 	mov	r5,zero
 800b79c:	003f8f06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b7a0:	3444b03a 	or	r2,r6,r17
 800b7a4:	1000231e 	bne	r2,zero,800b834 <__divdf3+0x2d0>
 800b7a8:	0023883a 	mov	r17,zero
 800b7ac:	0029883a 	mov	r20,zero
 800b7b0:	01c00084 	movi	r7,2
 800b7b4:	003f9b06 	br	800b624 <__alt_data_end+0xfc00b624>
 800b7b8:	3444b03a 	or	r2,r6,r17
 800b7bc:	10001926 	beq	r2,zero,800b824 <__divdf3+0x2c0>
 800b7c0:	88014b26 	beq	r17,zero,800bcf0 <__divdf3+0x78c>
 800b7c4:	8809883a 	mov	r4,r17
 800b7c8:	d9400115 	stw	r5,4(sp)
 800b7cc:	d9800215 	stw	r6,8(sp)
 800b7d0:	da000415 	stw	r8,16(sp)
 800b7d4:	da400315 	stw	r9,12(sp)
 800b7d8:	800d4f80 	call	800d4f8 <__clzsi2>
 800b7dc:	d9400117 	ldw	r5,4(sp)
 800b7e0:	d9800217 	ldw	r6,8(sp)
 800b7e4:	da000417 	ldw	r8,16(sp)
 800b7e8:	da400317 	ldw	r9,12(sp)
 800b7ec:	113ffd44 	addi	r4,r2,-11
 800b7f0:	00c00704 	movi	r3,28
 800b7f4:	19013a16 	blt	r3,r4,800bce0 <__divdf3+0x77c>
 800b7f8:	00c00744 	movi	r3,29
 800b7fc:	153ffe04 	addi	r20,r2,-8
 800b800:	1907c83a 	sub	r3,r3,r4
 800b804:	8d22983a 	sll	r17,r17,r20
 800b808:	30c6d83a 	srl	r3,r6,r3
 800b80c:	3528983a 	sll	r20,r6,r20
 800b810:	1c62b03a 	or	r17,r3,r17
 800b814:	1080fcc4 	addi	r2,r2,1011
 800b818:	0087c83a 	sub	r3,zero,r2
 800b81c:	000f883a 	mov	r7,zero
 800b820:	003f8006 	br	800b624 <__alt_data_end+0xfc00b624>
 800b824:	0023883a 	mov	r17,zero
 800b828:	0029883a 	mov	r20,zero
 800b82c:	01c00044 	movi	r7,1
 800b830:	003f7c06 	br	800b624 <__alt_data_end+0xfc00b624>
 800b834:	01c000c4 	movi	r7,3
 800b838:	003f7a06 	br	800b624 <__alt_data_end+0xfc00b624>
 800b83c:	02400104 	movi	r9,4
 800b840:	0021883a 	mov	r16,zero
 800b844:	002b883a 	mov	r21,zero
 800b848:	01400044 	movi	r5,1
 800b84c:	003f6306 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b850:	02400304 	movi	r9,12
 800b854:	014000c4 	movi	r5,3
 800b858:	003f6006 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b85c:	04000434 	movhi	r16,16
 800b860:	0009883a 	mov	r4,zero
 800b864:	843fffc4 	addi	r16,r16,-1
 800b868:	057fffc4 	movi	r21,-1
 800b86c:	0081ffc4 	movi	r2,2047
 800b870:	003f9b06 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800b874:	00c00044 	movi	r3,1
 800b878:	1887c83a 	sub	r3,r3,r2
 800b87c:	01000e04 	movi	r4,56
 800b880:	20c1530e 	bge	r4,r3,800bdd0 <__divdf3+0x86c>
 800b884:	9900004c 	andi	r4,r19,1
 800b888:	0005883a 	mov	r2,zero
 800b88c:	0021883a 	mov	r16,zero
 800b890:	002b883a 	mov	r21,zero
 800b894:	003f9206 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800b898:	8c012e36 	bltu	r17,r16,800bd54 <__divdf3+0x7f0>
 800b89c:	84412c26 	beq	r16,r17,800bd50 <__divdf3+0x7ec>
 800b8a0:	a82f883a 	mov	r23,r21
 800b8a4:	18ffffc4 	addi	r3,r3,-1
 800b8a8:	002b883a 	mov	r21,zero
 800b8ac:	a004d63a 	srli	r2,r20,24
 800b8b0:	8822923a 	slli	r17,r17,8
 800b8b4:	a028923a 	slli	r20,r20,8
 800b8b8:	8009883a 	mov	r4,r16
 800b8bc:	88acb03a 	or	r22,r17,r2
 800b8c0:	dd000015 	stw	r20,0(sp)
 800b8c4:	b028d43a 	srli	r20,r22,16
 800b8c8:	d8c00215 	stw	r3,8(sp)
 800b8cc:	b4bfffcc 	andi	r18,r22,65535
 800b8d0:	a00b883a 	mov	r5,r20
 800b8d4:	800abfc0 	call	800abfc <__udivsi3>
 800b8d8:	100b883a 	mov	r5,r2
 800b8dc:	9009883a 	mov	r4,r18
 800b8e0:	1023883a 	mov	r17,r2
 800b8e4:	800061c0 	call	800061c <__mulsi3>
 800b8e8:	8009883a 	mov	r4,r16
 800b8ec:	a00b883a 	mov	r5,r20
 800b8f0:	1039883a 	mov	fp,r2
 800b8f4:	800ac600 	call	800ac60 <__umodsi3>
 800b8f8:	1004943a 	slli	r2,r2,16
 800b8fc:	b808d43a 	srli	r4,r23,16
 800b900:	d8c00217 	ldw	r3,8(sp)
 800b904:	2084b03a 	or	r2,r4,r2
 800b908:	1700062e 	bgeu	r2,fp,800b924 <__divdf3+0x3c0>
 800b90c:	1585883a 	add	r2,r2,r22
 800b910:	893fffc4 	addi	r4,r17,-1
 800b914:	15811d36 	bltu	r2,r22,800bd8c <__divdf3+0x828>
 800b918:	17011c2e 	bgeu	r2,fp,800bd8c <__divdf3+0x828>
 800b91c:	8c7fff84 	addi	r17,r17,-2
 800b920:	1585883a 	add	r2,r2,r22
 800b924:	1739c83a 	sub	fp,r2,fp
 800b928:	a00b883a 	mov	r5,r20
 800b92c:	e009883a 	mov	r4,fp
 800b930:	d8c00215 	stw	r3,8(sp)
 800b934:	800abfc0 	call	800abfc <__udivsi3>
 800b938:	100b883a 	mov	r5,r2
 800b93c:	9009883a 	mov	r4,r18
 800b940:	1021883a 	mov	r16,r2
 800b944:	800061c0 	call	800061c <__mulsi3>
 800b948:	a00b883a 	mov	r5,r20
 800b94c:	e009883a 	mov	r4,fp
 800b950:	d8800415 	stw	r2,16(sp)
 800b954:	800ac600 	call	800ac60 <__umodsi3>
 800b958:	1004943a 	slli	r2,r2,16
 800b95c:	da000417 	ldw	r8,16(sp)
 800b960:	bdffffcc 	andi	r23,r23,65535
 800b964:	b884b03a 	or	r2,r23,r2
 800b968:	d8c00217 	ldw	r3,8(sp)
 800b96c:	1200062e 	bgeu	r2,r8,800b988 <__divdf3+0x424>
 800b970:	1585883a 	add	r2,r2,r22
 800b974:	813fffc4 	addi	r4,r16,-1
 800b978:	15810236 	bltu	r2,r22,800bd84 <__divdf3+0x820>
 800b97c:	1201012e 	bgeu	r2,r8,800bd84 <__divdf3+0x820>
 800b980:	843fff84 	addi	r16,r16,-2
 800b984:	1585883a 	add	r2,r2,r22
 800b988:	8822943a 	slli	r17,r17,16
 800b98c:	d9800017 	ldw	r6,0(sp)
 800b990:	1211c83a 	sub	r8,r2,r8
 800b994:	8c22b03a 	or	r17,r17,r16
 800b998:	373fffcc 	andi	fp,r6,65535
 800b99c:	8abfffcc 	andi	r10,r17,65535
 800b9a0:	8820d43a 	srli	r16,r17,16
 800b9a4:	5009883a 	mov	r4,r10
 800b9a8:	e00b883a 	mov	r5,fp
 800b9ac:	302ed43a 	srli	r23,r6,16
 800b9b0:	d8c00215 	stw	r3,8(sp)
 800b9b4:	da000415 	stw	r8,16(sp)
 800b9b8:	da800115 	stw	r10,4(sp)
 800b9bc:	800061c0 	call	800061c <__mulsi3>
 800b9c0:	800b883a 	mov	r5,r16
 800b9c4:	e009883a 	mov	r4,fp
 800b9c8:	d8800515 	stw	r2,20(sp)
 800b9cc:	800061c0 	call	800061c <__mulsi3>
 800b9d0:	8009883a 	mov	r4,r16
 800b9d4:	b80b883a 	mov	r5,r23
 800b9d8:	d8800315 	stw	r2,12(sp)
 800b9dc:	800061c0 	call	800061c <__mulsi3>
 800b9e0:	da800117 	ldw	r10,4(sp)
 800b9e4:	b80b883a 	mov	r5,r23
 800b9e8:	1021883a 	mov	r16,r2
 800b9ec:	5009883a 	mov	r4,r10
 800b9f0:	800061c0 	call	800061c <__mulsi3>
 800b9f4:	d9c00517 	ldw	r7,20(sp)
 800b9f8:	da400317 	ldw	r9,12(sp)
 800b9fc:	d8c00217 	ldw	r3,8(sp)
 800ba00:	3808d43a 	srli	r4,r7,16
 800ba04:	1245883a 	add	r2,r2,r9
 800ba08:	da000417 	ldw	r8,16(sp)
 800ba0c:	2085883a 	add	r2,r4,r2
 800ba10:	1240022e 	bgeu	r2,r9,800ba1c <__divdf3+0x4b8>
 800ba14:	01000074 	movhi	r4,1
 800ba18:	8121883a 	add	r16,r16,r4
 800ba1c:	1008d43a 	srli	r4,r2,16
 800ba20:	1004943a 	slli	r2,r2,16
 800ba24:	39ffffcc 	andi	r7,r7,65535
 800ba28:	2409883a 	add	r4,r4,r16
 800ba2c:	11c5883a 	add	r2,r2,r7
 800ba30:	4100bb36 	bltu	r8,r4,800bd20 <__divdf3+0x7bc>
 800ba34:	4100d726 	beq	r8,r4,800bd94 <__divdf3+0x830>
 800ba38:	4109c83a 	sub	r4,r8,r4
 800ba3c:	a8a1c83a 	sub	r16,r21,r2
 800ba40:	ac2b803a 	cmpltu	r21,r21,r16
 800ba44:	256bc83a 	sub	r21,r4,r21
 800ba48:	b540d926 	beq	r22,r21,800bdb0 <__divdf3+0x84c>
 800ba4c:	a00b883a 	mov	r5,r20
 800ba50:	a809883a 	mov	r4,r21
 800ba54:	d8c00215 	stw	r3,8(sp)
 800ba58:	800abfc0 	call	800abfc <__udivsi3>
 800ba5c:	100b883a 	mov	r5,r2
 800ba60:	9009883a 	mov	r4,r18
 800ba64:	d8800515 	stw	r2,20(sp)
 800ba68:	800061c0 	call	800061c <__mulsi3>
 800ba6c:	a809883a 	mov	r4,r21
 800ba70:	a00b883a 	mov	r5,r20
 800ba74:	d8800415 	stw	r2,16(sp)
 800ba78:	800ac600 	call	800ac60 <__umodsi3>
 800ba7c:	1004943a 	slli	r2,r2,16
 800ba80:	8008d43a 	srli	r4,r16,16
 800ba84:	da000417 	ldw	r8,16(sp)
 800ba88:	d8c00217 	ldw	r3,8(sp)
 800ba8c:	2084b03a 	or	r2,r4,r2
 800ba90:	d9c00517 	ldw	r7,20(sp)
 800ba94:	1200062e 	bgeu	r2,r8,800bab0 <__divdf3+0x54c>
 800ba98:	1585883a 	add	r2,r2,r22
 800ba9c:	393fffc4 	addi	r4,r7,-1
 800baa0:	1580c536 	bltu	r2,r22,800bdb8 <__divdf3+0x854>
 800baa4:	1200c42e 	bgeu	r2,r8,800bdb8 <__divdf3+0x854>
 800baa8:	39ffff84 	addi	r7,r7,-2
 800baac:	1585883a 	add	r2,r2,r22
 800bab0:	122bc83a 	sub	r21,r2,r8
 800bab4:	a00b883a 	mov	r5,r20
 800bab8:	a809883a 	mov	r4,r21
 800babc:	d8c00215 	stw	r3,8(sp)
 800bac0:	d9c00515 	stw	r7,20(sp)
 800bac4:	800abfc0 	call	800abfc <__udivsi3>
 800bac8:	9009883a 	mov	r4,r18
 800bacc:	100b883a 	mov	r5,r2
 800bad0:	d8800415 	stw	r2,16(sp)
 800bad4:	800061c0 	call	800061c <__mulsi3>
 800bad8:	a809883a 	mov	r4,r21
 800badc:	a00b883a 	mov	r5,r20
 800bae0:	1025883a 	mov	r18,r2
 800bae4:	800ac600 	call	800ac60 <__umodsi3>
 800bae8:	1004943a 	slli	r2,r2,16
 800baec:	813fffcc 	andi	r4,r16,65535
 800baf0:	d8c00217 	ldw	r3,8(sp)
 800baf4:	20a0b03a 	or	r16,r4,r2
 800baf8:	d9c00517 	ldw	r7,20(sp)
 800bafc:	da000417 	ldw	r8,16(sp)
 800bb00:	8480062e 	bgeu	r16,r18,800bb1c <__divdf3+0x5b8>
 800bb04:	85a1883a 	add	r16,r16,r22
 800bb08:	40bfffc4 	addi	r2,r8,-1
 800bb0c:	8580ac36 	bltu	r16,r22,800bdc0 <__divdf3+0x85c>
 800bb10:	8480ab2e 	bgeu	r16,r18,800bdc0 <__divdf3+0x85c>
 800bb14:	423fff84 	addi	r8,r8,-2
 800bb18:	85a1883a 	add	r16,r16,r22
 800bb1c:	3804943a 	slli	r2,r7,16
 800bb20:	84a1c83a 	sub	r16,r16,r18
 800bb24:	e009883a 	mov	r4,fp
 800bb28:	1228b03a 	or	r20,r2,r8
 800bb2c:	a1ffffcc 	andi	r7,r20,65535
 800bb30:	a024d43a 	srli	r18,r20,16
 800bb34:	380b883a 	mov	r5,r7
 800bb38:	d8c00215 	stw	r3,8(sp)
 800bb3c:	d9c00515 	stw	r7,20(sp)
 800bb40:	800061c0 	call	800061c <__mulsi3>
 800bb44:	900b883a 	mov	r5,r18
 800bb48:	e009883a 	mov	r4,fp
 800bb4c:	102b883a 	mov	r21,r2
 800bb50:	800061c0 	call	800061c <__mulsi3>
 800bb54:	900b883a 	mov	r5,r18
 800bb58:	b809883a 	mov	r4,r23
 800bb5c:	1039883a 	mov	fp,r2
 800bb60:	800061c0 	call	800061c <__mulsi3>
 800bb64:	d9c00517 	ldw	r7,20(sp)
 800bb68:	b80b883a 	mov	r5,r23
 800bb6c:	1025883a 	mov	r18,r2
 800bb70:	3809883a 	mov	r4,r7
 800bb74:	800061c0 	call	800061c <__mulsi3>
 800bb78:	a808d43a 	srli	r4,r21,16
 800bb7c:	1705883a 	add	r2,r2,fp
 800bb80:	d8c00217 	ldw	r3,8(sp)
 800bb84:	2085883a 	add	r2,r4,r2
 800bb88:	1700022e 	bgeu	r2,fp,800bb94 <__divdf3+0x630>
 800bb8c:	01000074 	movhi	r4,1
 800bb90:	9125883a 	add	r18,r18,r4
 800bb94:	1008d43a 	srli	r4,r2,16
 800bb98:	1004943a 	slli	r2,r2,16
 800bb9c:	ad7fffcc 	andi	r21,r21,65535
 800bba0:	2489883a 	add	r4,r4,r18
 800bba4:	1545883a 	add	r2,r2,r21
 800bba8:	81003836 	bltu	r16,r4,800bc8c <__divdf3+0x728>
 800bbac:	81003626 	beq	r16,r4,800bc88 <__divdf3+0x724>
 800bbb0:	a5000054 	ori	r20,r20,1
 800bbb4:	1880ffc4 	addi	r2,r3,1023
 800bbb8:	00bf2e0e 	bge	zero,r2,800b874 <__alt_data_end+0xfc00b874>
 800bbbc:	a10001cc 	andi	r4,r20,7
 800bbc0:	20000726 	beq	r4,zero,800bbe0 <__divdf3+0x67c>
 800bbc4:	a10003cc 	andi	r4,r20,15
 800bbc8:	01400104 	movi	r5,4
 800bbcc:	21400426 	beq	r4,r5,800bbe0 <__divdf3+0x67c>
 800bbd0:	a149883a 	add	r4,r20,r5
 800bbd4:	2529803a 	cmpltu	r20,r4,r20
 800bbd8:	8d23883a 	add	r17,r17,r20
 800bbdc:	2029883a 	mov	r20,r4
 800bbe0:	8900402c 	andhi	r4,r17,256
 800bbe4:	20000426 	beq	r4,zero,800bbf8 <__divdf3+0x694>
 800bbe8:	18810004 	addi	r2,r3,1024
 800bbec:	00ffc034 	movhi	r3,65280
 800bbf0:	18ffffc4 	addi	r3,r3,-1
 800bbf4:	88e2703a 	and	r17,r17,r3
 800bbf8:	00c1ff84 	movi	r3,2046
 800bbfc:	18beb416 	blt	r3,r2,800b6d0 <__alt_data_end+0xfc00b6d0>
 800bc00:	a028d0fa 	srli	r20,r20,3
 800bc04:	882a977a 	slli	r21,r17,29
 800bc08:	8820927a 	slli	r16,r17,9
 800bc0c:	1081ffcc 	andi	r2,r2,2047
 800bc10:	ad2ab03a 	or	r21,r21,r20
 800bc14:	8020d33a 	srli	r16,r16,12
 800bc18:	9900004c 	andi	r4,r19,1
 800bc1c:	003eb006 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800bc20:	8080022c 	andhi	r2,r16,8
 800bc24:	10001226 	beq	r2,zero,800bc70 <__divdf3+0x70c>
 800bc28:	8880022c 	andhi	r2,r17,8
 800bc2c:	1000101e 	bne	r2,zero,800bc70 <__divdf3+0x70c>
 800bc30:	00800434 	movhi	r2,16
 800bc34:	8c000234 	orhi	r16,r17,8
 800bc38:	10bfffc4 	addi	r2,r2,-1
 800bc3c:	b809883a 	mov	r4,r23
 800bc40:	80a0703a 	and	r16,r16,r2
 800bc44:	a02b883a 	mov	r21,r20
 800bc48:	003f0806 	br	800b86c <__alt_data_end+0xfc00b86c>
 800bc4c:	008000c4 	movi	r2,3
 800bc50:	3880b126 	beq	r7,r2,800bf18 <__divdf3+0x9b4>
 800bc54:	00800044 	movi	r2,1
 800bc58:	38805b1e 	bne	r7,r2,800bdc8 <__divdf3+0x864>
 800bc5c:	e009883a 	mov	r4,fp
 800bc60:	0005883a 	mov	r2,zero
 800bc64:	0021883a 	mov	r16,zero
 800bc68:	002b883a 	mov	r21,zero
 800bc6c:	003e9c06 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800bc70:	00800434 	movhi	r2,16
 800bc74:	84000234 	orhi	r16,r16,8
 800bc78:	10bfffc4 	addi	r2,r2,-1
 800bc7c:	b009883a 	mov	r4,r22
 800bc80:	80a0703a 	and	r16,r16,r2
 800bc84:	003ef906 	br	800b86c <__alt_data_end+0xfc00b86c>
 800bc88:	103fca26 	beq	r2,zero,800bbb4 <__alt_data_end+0xfc00bbb4>
 800bc8c:	b421883a 	add	r16,r22,r16
 800bc90:	a17fffc4 	addi	r5,r20,-1
 800bc94:	8580422e 	bgeu	r16,r22,800bda0 <__divdf3+0x83c>
 800bc98:	2829883a 	mov	r20,r5
 800bc9c:	813fc41e 	bne	r16,r4,800bbb0 <__alt_data_end+0xfc00bbb0>
 800bca0:	d9800017 	ldw	r6,0(sp)
 800bca4:	30bfc21e 	bne	r6,r2,800bbb0 <__alt_data_end+0xfc00bbb0>
 800bca8:	003fc206 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800bcac:	143ff604 	addi	r16,r2,-40
 800bcb0:	8c20983a 	sll	r16,r17,r16
 800bcb4:	002b883a 	mov	r21,zero
 800bcb8:	003eb406 	br	800b78c <__alt_data_end+0xfc00b78c>
 800bcbc:	d9800215 	stw	r6,8(sp)
 800bcc0:	d9c00515 	stw	r7,20(sp)
 800bcc4:	da000415 	stw	r8,16(sp)
 800bcc8:	800d4f80 	call	800d4f8 <__clzsi2>
 800bccc:	10800804 	addi	r2,r2,32
 800bcd0:	da000417 	ldw	r8,16(sp)
 800bcd4:	d9c00517 	ldw	r7,20(sp)
 800bcd8:	d9800217 	ldw	r6,8(sp)
 800bcdc:	003ea106 	br	800b764 <__alt_data_end+0xfc00b764>
 800bce0:	147ff604 	addi	r17,r2,-40
 800bce4:	3462983a 	sll	r17,r6,r17
 800bce8:	0029883a 	mov	r20,zero
 800bcec:	003ec906 	br	800b814 <__alt_data_end+0xfc00b814>
 800bcf0:	3009883a 	mov	r4,r6
 800bcf4:	d9400115 	stw	r5,4(sp)
 800bcf8:	d9800215 	stw	r6,8(sp)
 800bcfc:	da000415 	stw	r8,16(sp)
 800bd00:	da400315 	stw	r9,12(sp)
 800bd04:	800d4f80 	call	800d4f8 <__clzsi2>
 800bd08:	10800804 	addi	r2,r2,32
 800bd0c:	da400317 	ldw	r9,12(sp)
 800bd10:	da000417 	ldw	r8,16(sp)
 800bd14:	d9800217 	ldw	r6,8(sp)
 800bd18:	d9400117 	ldw	r5,4(sp)
 800bd1c:	003eb306 	br	800b7ec <__alt_data_end+0xfc00b7ec>
 800bd20:	d9800017 	ldw	r6,0(sp)
 800bd24:	a9ab883a 	add	r21,r21,r6
 800bd28:	a98b803a 	cmpltu	r5,r21,r6
 800bd2c:	2d8b883a 	add	r5,r5,r22
 800bd30:	2a11883a 	add	r8,r5,r8
 800bd34:	897fffc4 	addi	r5,r17,-1
 800bd38:	b2000c2e 	bgeu	r22,r8,800bd6c <__divdf3+0x808>
 800bd3c:	41003f36 	bltu	r8,r4,800be3c <__divdf3+0x8d8>
 800bd40:	22006c26 	beq	r4,r8,800bef4 <__divdf3+0x990>
 800bd44:	4109c83a 	sub	r4,r8,r4
 800bd48:	2823883a 	mov	r17,r5
 800bd4c:	003f3b06 	br	800ba3c <__alt_data_end+0xfc00ba3c>
 800bd50:	ad3ed336 	bltu	r21,r20,800b8a0 <__alt_data_end+0xfc00b8a0>
 800bd54:	a804d07a 	srli	r2,r21,1
 800bd58:	802e97fa 	slli	r23,r16,31
 800bd5c:	a82a97fa 	slli	r21,r21,31
 800bd60:	8020d07a 	srli	r16,r16,1
 800bd64:	b8aeb03a 	or	r23,r23,r2
 800bd68:	003ed006 	br	800b8ac <__alt_data_end+0xfc00b8ac>
 800bd6c:	b23ff51e 	bne	r22,r8,800bd44 <__alt_data_end+0xfc00bd44>
 800bd70:	d9800017 	ldw	r6,0(sp)
 800bd74:	a9bff12e 	bgeu	r21,r6,800bd3c <__alt_data_end+0xfc00bd3c>
 800bd78:	b109c83a 	sub	r4,r22,r4
 800bd7c:	2823883a 	mov	r17,r5
 800bd80:	003f2e06 	br	800ba3c <__alt_data_end+0xfc00ba3c>
 800bd84:	2021883a 	mov	r16,r4
 800bd88:	003eff06 	br	800b988 <__alt_data_end+0xfc00b988>
 800bd8c:	2023883a 	mov	r17,r4
 800bd90:	003ee406 	br	800b924 <__alt_data_end+0xfc00b924>
 800bd94:	a8bfe236 	bltu	r21,r2,800bd20 <__alt_data_end+0xfc00bd20>
 800bd98:	0009883a 	mov	r4,zero
 800bd9c:	003f2706 	br	800ba3c <__alt_data_end+0xfc00ba3c>
 800bda0:	81002d36 	bltu	r16,r4,800be58 <__divdf3+0x8f4>
 800bda4:	24005626 	beq	r4,r16,800bf00 <__divdf3+0x99c>
 800bda8:	2829883a 	mov	r20,r5
 800bdac:	003f8006 	br	800bbb0 <__alt_data_end+0xfc00bbb0>
 800bdb0:	053fffc4 	movi	r20,-1
 800bdb4:	003f7f06 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800bdb8:	200f883a 	mov	r7,r4
 800bdbc:	003f3c06 	br	800bab0 <__alt_data_end+0xfc00bab0>
 800bdc0:	1011883a 	mov	r8,r2
 800bdc4:	003f5506 	br	800bb1c <__alt_data_end+0xfc00bb1c>
 800bdc8:	e027883a 	mov	r19,fp
 800bdcc:	003f7906 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800bdd0:	010007c4 	movi	r4,31
 800bdd4:	20c02816 	blt	r4,r3,800be78 <__divdf3+0x914>
 800bdd8:	00800804 	movi	r2,32
 800bddc:	10c5c83a 	sub	r2,r2,r3
 800bde0:	888a983a 	sll	r5,r17,r2
 800bde4:	a0c8d83a 	srl	r4,r20,r3
 800bde8:	a084983a 	sll	r2,r20,r2
 800bdec:	88e2d83a 	srl	r17,r17,r3
 800bdf0:	2906b03a 	or	r3,r5,r4
 800bdf4:	1004c03a 	cmpne	r2,r2,zero
 800bdf8:	1886b03a 	or	r3,r3,r2
 800bdfc:	188001cc 	andi	r2,r3,7
 800be00:	10000726 	beq	r2,zero,800be20 <__divdf3+0x8bc>
 800be04:	188003cc 	andi	r2,r3,15
 800be08:	01000104 	movi	r4,4
 800be0c:	11000426 	beq	r2,r4,800be20 <__divdf3+0x8bc>
 800be10:	1805883a 	mov	r2,r3
 800be14:	10c00104 	addi	r3,r2,4
 800be18:	1885803a 	cmpltu	r2,r3,r2
 800be1c:	88a3883a 	add	r17,r17,r2
 800be20:	8880202c 	andhi	r2,r17,128
 800be24:	10002926 	beq	r2,zero,800becc <__divdf3+0x968>
 800be28:	9900004c 	andi	r4,r19,1
 800be2c:	00800044 	movi	r2,1
 800be30:	0021883a 	mov	r16,zero
 800be34:	002b883a 	mov	r21,zero
 800be38:	003e2906 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800be3c:	d9800017 	ldw	r6,0(sp)
 800be40:	8c7fff84 	addi	r17,r17,-2
 800be44:	a9ab883a 	add	r21,r21,r6
 800be48:	a98b803a 	cmpltu	r5,r21,r6
 800be4c:	2d8b883a 	add	r5,r5,r22
 800be50:	2a11883a 	add	r8,r5,r8
 800be54:	003ef806 	br	800ba38 <__alt_data_end+0xfc00ba38>
 800be58:	d9800017 	ldw	r6,0(sp)
 800be5c:	318f883a 	add	r7,r6,r6
 800be60:	398b803a 	cmpltu	r5,r7,r6
 800be64:	2d8d883a 	add	r6,r5,r22
 800be68:	81a1883a 	add	r16,r16,r6
 800be6c:	a17fff84 	addi	r5,r20,-2
 800be70:	d9c00015 	stw	r7,0(sp)
 800be74:	003f8806 	br	800bc98 <__alt_data_end+0xfc00bc98>
 800be78:	013ff844 	movi	r4,-31
 800be7c:	2085c83a 	sub	r2,r4,r2
 800be80:	8888d83a 	srl	r4,r17,r2
 800be84:	00800804 	movi	r2,32
 800be88:	18802126 	beq	r3,r2,800bf10 <__divdf3+0x9ac>
 800be8c:	04001004 	movi	r16,64
 800be90:	80c7c83a 	sub	r3,r16,r3
 800be94:	88e0983a 	sll	r16,r17,r3
 800be98:	8504b03a 	or	r2,r16,r20
 800be9c:	1004c03a 	cmpne	r2,r2,zero
 800bea0:	2084b03a 	or	r2,r4,r2
 800bea4:	144001cc 	andi	r17,r2,7
 800bea8:	88000d1e 	bne	r17,zero,800bee0 <__divdf3+0x97c>
 800beac:	0021883a 	mov	r16,zero
 800beb0:	102ad0fa 	srli	r21,r2,3
 800beb4:	9900004c 	andi	r4,r19,1
 800beb8:	0005883a 	mov	r2,zero
 800bebc:	ac6ab03a 	or	r21,r21,r17
 800bec0:	003e0706 	br	800b6e0 <__alt_data_end+0xfc00b6e0>
 800bec4:	1007883a 	mov	r3,r2
 800bec8:	0023883a 	mov	r17,zero
 800becc:	8820927a 	slli	r16,r17,9
 800bed0:	1805883a 	mov	r2,r3
 800bed4:	8822977a 	slli	r17,r17,29
 800bed8:	8020d33a 	srli	r16,r16,12
 800bedc:	003ff406 	br	800beb0 <__alt_data_end+0xfc00beb0>
 800bee0:	10c003cc 	andi	r3,r2,15
 800bee4:	01000104 	movi	r4,4
 800bee8:	193ff626 	beq	r3,r4,800bec4 <__alt_data_end+0xfc00bec4>
 800beec:	0023883a 	mov	r17,zero
 800bef0:	003fc806 	br	800be14 <__alt_data_end+0xfc00be14>
 800bef4:	a8bfd136 	bltu	r21,r2,800be3c <__alt_data_end+0xfc00be3c>
 800bef8:	2823883a 	mov	r17,r5
 800befc:	003fa606 	br	800bd98 <__alt_data_end+0xfc00bd98>
 800bf00:	d9800017 	ldw	r6,0(sp)
 800bf04:	30bfd436 	bltu	r6,r2,800be58 <__alt_data_end+0xfc00be58>
 800bf08:	2829883a 	mov	r20,r5
 800bf0c:	003f6406 	br	800bca0 <__alt_data_end+0xfc00bca0>
 800bf10:	0021883a 	mov	r16,zero
 800bf14:	003fe006 	br	800be98 <__alt_data_end+0xfc00be98>
 800bf18:	00800434 	movhi	r2,16
 800bf1c:	8c000234 	orhi	r16,r17,8
 800bf20:	10bfffc4 	addi	r2,r2,-1
 800bf24:	e009883a 	mov	r4,fp
 800bf28:	80a0703a 	and	r16,r16,r2
 800bf2c:	a02b883a 	mov	r21,r20
 800bf30:	003e4e06 	br	800b86c <__alt_data_end+0xfc00b86c>

0800bf34 <__eqdf2>:
 800bf34:	2804d53a 	srli	r2,r5,20
 800bf38:	3806d53a 	srli	r3,r7,20
 800bf3c:	02000434 	movhi	r8,16
 800bf40:	423fffc4 	addi	r8,r8,-1
 800bf44:	1081ffcc 	andi	r2,r2,2047
 800bf48:	0281ffc4 	movi	r10,2047
 800bf4c:	2a12703a 	and	r9,r5,r8
 800bf50:	18c1ffcc 	andi	r3,r3,2047
 800bf54:	3a10703a 	and	r8,r7,r8
 800bf58:	280ad7fa 	srli	r5,r5,31
 800bf5c:	380ed7fa 	srli	r7,r7,31
 800bf60:	12801026 	beq	r2,r10,800bfa4 <__eqdf2+0x70>
 800bf64:	0281ffc4 	movi	r10,2047
 800bf68:	1a800a26 	beq	r3,r10,800bf94 <__eqdf2+0x60>
 800bf6c:	10c00226 	beq	r2,r3,800bf78 <__eqdf2+0x44>
 800bf70:	00800044 	movi	r2,1
 800bf74:	f800283a 	ret
 800bf78:	4a3ffd1e 	bne	r9,r8,800bf70 <__alt_data_end+0xfc00bf70>
 800bf7c:	21bffc1e 	bne	r4,r6,800bf70 <__alt_data_end+0xfc00bf70>
 800bf80:	29c00c26 	beq	r5,r7,800bfb4 <__eqdf2+0x80>
 800bf84:	103ffa1e 	bne	r2,zero,800bf70 <__alt_data_end+0xfc00bf70>
 800bf88:	2244b03a 	or	r2,r4,r9
 800bf8c:	1004c03a 	cmpne	r2,r2,zero
 800bf90:	f800283a 	ret
 800bf94:	3214b03a 	or	r10,r6,r8
 800bf98:	503ff426 	beq	r10,zero,800bf6c <__alt_data_end+0xfc00bf6c>
 800bf9c:	00800044 	movi	r2,1
 800bfa0:	f800283a 	ret
 800bfa4:	2254b03a 	or	r10,r4,r9
 800bfa8:	503fee26 	beq	r10,zero,800bf64 <__alt_data_end+0xfc00bf64>
 800bfac:	00800044 	movi	r2,1
 800bfb0:	f800283a 	ret
 800bfb4:	0005883a 	mov	r2,zero
 800bfb8:	f800283a 	ret

0800bfbc <__gedf2>:
 800bfbc:	2804d53a 	srli	r2,r5,20
 800bfc0:	3806d53a 	srli	r3,r7,20
 800bfc4:	02000434 	movhi	r8,16
 800bfc8:	423fffc4 	addi	r8,r8,-1
 800bfcc:	1081ffcc 	andi	r2,r2,2047
 800bfd0:	0241ffc4 	movi	r9,2047
 800bfd4:	2a14703a 	and	r10,r5,r8
 800bfd8:	18c1ffcc 	andi	r3,r3,2047
 800bfdc:	3a10703a 	and	r8,r7,r8
 800bfe0:	280ad7fa 	srli	r5,r5,31
 800bfe4:	380ed7fa 	srli	r7,r7,31
 800bfe8:	12401d26 	beq	r2,r9,800c060 <__gedf2+0xa4>
 800bfec:	0241ffc4 	movi	r9,2047
 800bff0:	1a401226 	beq	r3,r9,800c03c <__gedf2+0x80>
 800bff4:	1000081e 	bne	r2,zero,800c018 <__gedf2+0x5c>
 800bff8:	2296b03a 	or	r11,r4,r10
 800bffc:	5813003a 	cmpeq	r9,r11,zero
 800c000:	1800091e 	bne	r3,zero,800c028 <__gedf2+0x6c>
 800c004:	3218b03a 	or	r12,r6,r8
 800c008:	6000071e 	bne	r12,zero,800c028 <__gedf2+0x6c>
 800c00c:	0005883a 	mov	r2,zero
 800c010:	5800101e 	bne	r11,zero,800c054 <__gedf2+0x98>
 800c014:	f800283a 	ret
 800c018:	18000c1e 	bne	r3,zero,800c04c <__gedf2+0x90>
 800c01c:	3212b03a 	or	r9,r6,r8
 800c020:	48000c26 	beq	r9,zero,800c054 <__gedf2+0x98>
 800c024:	0013883a 	mov	r9,zero
 800c028:	39c03fcc 	andi	r7,r7,255
 800c02c:	48000826 	beq	r9,zero,800c050 <__gedf2+0x94>
 800c030:	38000926 	beq	r7,zero,800c058 <__gedf2+0x9c>
 800c034:	00800044 	movi	r2,1
 800c038:	f800283a 	ret
 800c03c:	3212b03a 	or	r9,r6,r8
 800c040:	483fec26 	beq	r9,zero,800bff4 <__alt_data_end+0xfc00bff4>
 800c044:	00bfff84 	movi	r2,-2
 800c048:	f800283a 	ret
 800c04c:	39c03fcc 	andi	r7,r7,255
 800c050:	29c00626 	beq	r5,r7,800c06c <__gedf2+0xb0>
 800c054:	283ff726 	beq	r5,zero,800c034 <__alt_data_end+0xfc00c034>
 800c058:	00bfffc4 	movi	r2,-1
 800c05c:	f800283a 	ret
 800c060:	2292b03a 	or	r9,r4,r10
 800c064:	483fe126 	beq	r9,zero,800bfec <__alt_data_end+0xfc00bfec>
 800c068:	003ff606 	br	800c044 <__alt_data_end+0xfc00c044>
 800c06c:	18bff916 	blt	r3,r2,800c054 <__alt_data_end+0xfc00c054>
 800c070:	10c00316 	blt	r2,r3,800c080 <__gedf2+0xc4>
 800c074:	42bff736 	bltu	r8,r10,800c054 <__alt_data_end+0xfc00c054>
 800c078:	52000326 	beq	r10,r8,800c088 <__gedf2+0xcc>
 800c07c:	5200042e 	bgeu	r10,r8,800c090 <__gedf2+0xd4>
 800c080:	283fec1e 	bne	r5,zero,800c034 <__alt_data_end+0xfc00c034>
 800c084:	003ff406 	br	800c058 <__alt_data_end+0xfc00c058>
 800c088:	313ff236 	bltu	r6,r4,800c054 <__alt_data_end+0xfc00c054>
 800c08c:	21bffc36 	bltu	r4,r6,800c080 <__alt_data_end+0xfc00c080>
 800c090:	0005883a 	mov	r2,zero
 800c094:	f800283a 	ret

0800c098 <__ledf2>:
 800c098:	2804d53a 	srli	r2,r5,20
 800c09c:	3810d53a 	srli	r8,r7,20
 800c0a0:	00c00434 	movhi	r3,16
 800c0a4:	18ffffc4 	addi	r3,r3,-1
 800c0a8:	1081ffcc 	andi	r2,r2,2047
 800c0ac:	0241ffc4 	movi	r9,2047
 800c0b0:	28d4703a 	and	r10,r5,r3
 800c0b4:	4201ffcc 	andi	r8,r8,2047
 800c0b8:	38c6703a 	and	r3,r7,r3
 800c0bc:	280ad7fa 	srli	r5,r5,31
 800c0c0:	380ed7fa 	srli	r7,r7,31
 800c0c4:	12401f26 	beq	r2,r9,800c144 <__ledf2+0xac>
 800c0c8:	0241ffc4 	movi	r9,2047
 800c0cc:	42401426 	beq	r8,r9,800c120 <__ledf2+0x88>
 800c0d0:	1000091e 	bne	r2,zero,800c0f8 <__ledf2+0x60>
 800c0d4:	2296b03a 	or	r11,r4,r10
 800c0d8:	5813003a 	cmpeq	r9,r11,zero
 800c0dc:	29403fcc 	andi	r5,r5,255
 800c0e0:	40000a1e 	bne	r8,zero,800c10c <__ledf2+0x74>
 800c0e4:	30d8b03a 	or	r12,r6,r3
 800c0e8:	6000081e 	bne	r12,zero,800c10c <__ledf2+0x74>
 800c0ec:	0005883a 	mov	r2,zero
 800c0f0:	5800111e 	bne	r11,zero,800c138 <__ledf2+0xa0>
 800c0f4:	f800283a 	ret
 800c0f8:	29403fcc 	andi	r5,r5,255
 800c0fc:	40000c1e 	bne	r8,zero,800c130 <__ledf2+0x98>
 800c100:	30d2b03a 	or	r9,r6,r3
 800c104:	48000c26 	beq	r9,zero,800c138 <__ledf2+0xa0>
 800c108:	0013883a 	mov	r9,zero
 800c10c:	39c03fcc 	andi	r7,r7,255
 800c110:	48000826 	beq	r9,zero,800c134 <__ledf2+0x9c>
 800c114:	38001126 	beq	r7,zero,800c15c <__ledf2+0xc4>
 800c118:	00800044 	movi	r2,1
 800c11c:	f800283a 	ret
 800c120:	30d2b03a 	or	r9,r6,r3
 800c124:	483fea26 	beq	r9,zero,800c0d0 <__alt_data_end+0xfc00c0d0>
 800c128:	00800084 	movi	r2,2
 800c12c:	f800283a 	ret
 800c130:	39c03fcc 	andi	r7,r7,255
 800c134:	39400726 	beq	r7,r5,800c154 <__ledf2+0xbc>
 800c138:	2800081e 	bne	r5,zero,800c15c <__ledf2+0xc4>
 800c13c:	00800044 	movi	r2,1
 800c140:	f800283a 	ret
 800c144:	2292b03a 	or	r9,r4,r10
 800c148:	483fdf26 	beq	r9,zero,800c0c8 <__alt_data_end+0xfc00c0c8>
 800c14c:	00800084 	movi	r2,2
 800c150:	f800283a 	ret
 800c154:	4080030e 	bge	r8,r2,800c164 <__ledf2+0xcc>
 800c158:	383fef26 	beq	r7,zero,800c118 <__alt_data_end+0xfc00c118>
 800c15c:	00bfffc4 	movi	r2,-1
 800c160:	f800283a 	ret
 800c164:	123feb16 	blt	r2,r8,800c114 <__alt_data_end+0xfc00c114>
 800c168:	1abff336 	bltu	r3,r10,800c138 <__alt_data_end+0xfc00c138>
 800c16c:	50c00326 	beq	r10,r3,800c17c <__ledf2+0xe4>
 800c170:	50c0042e 	bgeu	r10,r3,800c184 <__ledf2+0xec>
 800c174:	283fe81e 	bne	r5,zero,800c118 <__alt_data_end+0xfc00c118>
 800c178:	003ff806 	br	800c15c <__alt_data_end+0xfc00c15c>
 800c17c:	313fee36 	bltu	r6,r4,800c138 <__alt_data_end+0xfc00c138>
 800c180:	21bffc36 	bltu	r4,r6,800c174 <__alt_data_end+0xfc00c174>
 800c184:	0005883a 	mov	r2,zero
 800c188:	f800283a 	ret

0800c18c <__muldf3>:
 800c18c:	deffee04 	addi	sp,sp,-72
 800c190:	dd000c15 	stw	r20,48(sp)
 800c194:	2828d53a 	srli	r20,r5,20
 800c198:	ddc00f15 	stw	r23,60(sp)
 800c19c:	282ed7fa 	srli	r23,r5,31
 800c1a0:	dc000815 	stw	r16,32(sp)
 800c1a4:	04000434 	movhi	r16,16
 800c1a8:	dcc00b15 	stw	r19,44(sp)
 800c1ac:	843fffc4 	addi	r16,r16,-1
 800c1b0:	dfc01115 	stw	ra,68(sp)
 800c1b4:	df001015 	stw	fp,64(sp)
 800c1b8:	dd800e15 	stw	r22,56(sp)
 800c1bc:	dd400d15 	stw	r21,52(sp)
 800c1c0:	dc800a15 	stw	r18,40(sp)
 800c1c4:	dc400915 	stw	r17,36(sp)
 800c1c8:	a501ffcc 	andi	r20,r20,2047
 800c1cc:	2c20703a 	and	r16,r5,r16
 800c1d0:	b827883a 	mov	r19,r23
 800c1d4:	ba403fcc 	andi	r9,r23,255
 800c1d8:	a0006026 	beq	r20,zero,800c35c <__muldf3+0x1d0>
 800c1dc:	0081ffc4 	movi	r2,2047
 800c1e0:	202d883a 	mov	r22,r4
 800c1e4:	a0803626 	beq	r20,r2,800c2c0 <__muldf3+0x134>
 800c1e8:	84000434 	orhi	r16,r16,16
 800c1ec:	200ad77a 	srli	r5,r4,29
 800c1f0:	800490fa 	slli	r2,r16,3
 800c1f4:	202c90fa 	slli	r22,r4,3
 800c1f8:	a53f0044 	addi	r20,r20,-1023
 800c1fc:	28a0b03a 	or	r16,r5,r2
 800c200:	002b883a 	mov	r21,zero
 800c204:	000b883a 	mov	r5,zero
 800c208:	3804d53a 	srli	r2,r7,20
 800c20c:	3838d7fa 	srli	fp,r7,31
 800c210:	04400434 	movhi	r17,16
 800c214:	8c7fffc4 	addi	r17,r17,-1
 800c218:	1081ffcc 	andi	r2,r2,2047
 800c21c:	3025883a 	mov	r18,r6
 800c220:	3c62703a 	and	r17,r7,r17
 800c224:	e2803fcc 	andi	r10,fp,255
 800c228:	10006d26 	beq	r2,zero,800c3e0 <__muldf3+0x254>
 800c22c:	00c1ffc4 	movi	r3,2047
 800c230:	10c06526 	beq	r2,r3,800c3c8 <__muldf3+0x23c>
 800c234:	8c400434 	orhi	r17,r17,16
 800c238:	300ed77a 	srli	r7,r6,29
 800c23c:	880690fa 	slli	r3,r17,3
 800c240:	302490fa 	slli	r18,r6,3
 800c244:	10bf0044 	addi	r2,r2,-1023
 800c248:	38e2b03a 	or	r17,r7,r3
 800c24c:	000f883a 	mov	r7,zero
 800c250:	a087883a 	add	r3,r20,r2
 800c254:	010003c4 	movi	r4,15
 800c258:	3d44b03a 	or	r2,r7,r21
 800c25c:	e5ccf03a 	xor	r6,fp,r23
 800c260:	1a000044 	addi	r8,r3,1
 800c264:	20809b36 	bltu	r4,r2,800c4d4 <__muldf3+0x348>
 800c268:	100490ba 	slli	r2,r2,2
 800c26c:	01020074 	movhi	r4,2049
 800c270:	2130a004 	addi	r4,r4,-15744
 800c274:	1105883a 	add	r2,r2,r4
 800c278:	10800017 	ldw	r2,0(r2)
 800c27c:	1000683a 	jmp	r2
 800c280:	0800c4d4 	ori	zero,at,787
 800c284:	0800c2e0 	cmpeqi	zero,at,779
 800c288:	0800c2e0 	cmpeqi	zero,at,779
 800c28c:	0800c2dc 	xori	zero,at,779
 800c290:	0800c4b0 	cmpltui	zero,at,786
 800c294:	0800c4b0 	cmpltui	zero,at,786
 800c298:	0800c498 	cmpnei	zero,at,786
 800c29c:	0800c2dc 	xori	zero,at,779
 800c2a0:	0800c4b0 	cmpltui	zero,at,786
 800c2a4:	0800c498 	cmpnei	zero,at,786
 800c2a8:	0800c4b0 	cmpltui	zero,at,786
 800c2ac:	0800c2dc 	xori	zero,at,779
 800c2b0:	0800c4c0 	call	800c4c <__ram_exceptions_end+0x800a1c>
 800c2b4:	0800c4c0 	call	800c4c <__ram_exceptions_end+0x800a1c>
 800c2b8:	0800c4c0 	call	800c4c <__ram_exceptions_end+0x800a1c>
 800c2bc:	0800c820 	cmpeqi	zero,at,800
 800c2c0:	2404b03a 	or	r2,r4,r16
 800c2c4:	1000711e 	bne	r2,zero,800c48c <__muldf3+0x300>
 800c2c8:	05400204 	movi	r21,8
 800c2cc:	0021883a 	mov	r16,zero
 800c2d0:	002d883a 	mov	r22,zero
 800c2d4:	01400084 	movi	r5,2
 800c2d8:	003fcb06 	br	800c208 <__alt_data_end+0xfc00c208>
 800c2dc:	500d883a 	mov	r6,r10
 800c2e0:	00800084 	movi	r2,2
 800c2e4:	38805926 	beq	r7,r2,800c44c <__muldf3+0x2c0>
 800c2e8:	008000c4 	movi	r2,3
 800c2ec:	3881bb26 	beq	r7,r2,800c9dc <__muldf3+0x850>
 800c2f0:	00800044 	movi	r2,1
 800c2f4:	3881961e 	bne	r7,r2,800c950 <__muldf3+0x7c4>
 800c2f8:	3027883a 	mov	r19,r6
 800c2fc:	0005883a 	mov	r2,zero
 800c300:	0021883a 	mov	r16,zero
 800c304:	002d883a 	mov	r22,zero
 800c308:	1004953a 	slli	r2,r2,20
 800c30c:	98c03fcc 	andi	r3,r19,255
 800c310:	04400434 	movhi	r17,16
 800c314:	8c7fffc4 	addi	r17,r17,-1
 800c318:	180697fa 	slli	r3,r3,31
 800c31c:	8460703a 	and	r16,r16,r17
 800c320:	80a0b03a 	or	r16,r16,r2
 800c324:	80c6b03a 	or	r3,r16,r3
 800c328:	b005883a 	mov	r2,r22
 800c32c:	dfc01117 	ldw	ra,68(sp)
 800c330:	df001017 	ldw	fp,64(sp)
 800c334:	ddc00f17 	ldw	r23,60(sp)
 800c338:	dd800e17 	ldw	r22,56(sp)
 800c33c:	dd400d17 	ldw	r21,52(sp)
 800c340:	dd000c17 	ldw	r20,48(sp)
 800c344:	dcc00b17 	ldw	r19,44(sp)
 800c348:	dc800a17 	ldw	r18,40(sp)
 800c34c:	dc400917 	ldw	r17,36(sp)
 800c350:	dc000817 	ldw	r16,32(sp)
 800c354:	dec01204 	addi	sp,sp,72
 800c358:	f800283a 	ret
 800c35c:	2404b03a 	or	r2,r4,r16
 800c360:	202b883a 	mov	r21,r4
 800c364:	10004426 	beq	r2,zero,800c478 <__muldf3+0x2ec>
 800c368:	80015126 	beq	r16,zero,800c8b0 <__muldf3+0x724>
 800c36c:	8009883a 	mov	r4,r16
 800c370:	d9800715 	stw	r6,28(sp)
 800c374:	d9c00215 	stw	r7,8(sp)
 800c378:	da400415 	stw	r9,16(sp)
 800c37c:	800d4f80 	call	800d4f8 <__clzsi2>
 800c380:	d9800717 	ldw	r6,28(sp)
 800c384:	d9c00217 	ldw	r7,8(sp)
 800c388:	da400417 	ldw	r9,16(sp)
 800c38c:	113ffd44 	addi	r4,r2,-11
 800c390:	00c00704 	movi	r3,28
 800c394:	19014216 	blt	r3,r4,800c8a0 <__muldf3+0x714>
 800c398:	00c00744 	movi	r3,29
 800c39c:	15bffe04 	addi	r22,r2,-8
 800c3a0:	1907c83a 	sub	r3,r3,r4
 800c3a4:	85a0983a 	sll	r16,r16,r22
 800c3a8:	a8c6d83a 	srl	r3,r21,r3
 800c3ac:	adac983a 	sll	r22,r21,r22
 800c3b0:	1c20b03a 	or	r16,r3,r16
 800c3b4:	1080fcc4 	addi	r2,r2,1011
 800c3b8:	00a9c83a 	sub	r20,zero,r2
 800c3bc:	002b883a 	mov	r21,zero
 800c3c0:	000b883a 	mov	r5,zero
 800c3c4:	003f9006 	br	800c208 <__alt_data_end+0xfc00c208>
 800c3c8:	3446b03a 	or	r3,r6,r17
 800c3cc:	1800281e 	bne	r3,zero,800c470 <__muldf3+0x2e4>
 800c3d0:	0023883a 	mov	r17,zero
 800c3d4:	0025883a 	mov	r18,zero
 800c3d8:	01c00084 	movi	r7,2
 800c3dc:	003f9c06 	br	800c250 <__alt_data_end+0xfc00c250>
 800c3e0:	3446b03a 	or	r3,r6,r17
 800c3e4:	18001e26 	beq	r3,zero,800c460 <__muldf3+0x2d4>
 800c3e8:	88012126 	beq	r17,zero,800c870 <__muldf3+0x6e4>
 800c3ec:	8809883a 	mov	r4,r17
 800c3f0:	d9400215 	stw	r5,8(sp)
 800c3f4:	d9800715 	stw	r6,28(sp)
 800c3f8:	da400415 	stw	r9,16(sp)
 800c3fc:	da800315 	stw	r10,12(sp)
 800c400:	800d4f80 	call	800d4f8 <__clzsi2>
 800c404:	d9400217 	ldw	r5,8(sp)
 800c408:	d9800717 	ldw	r6,28(sp)
 800c40c:	da400417 	ldw	r9,16(sp)
 800c410:	da800317 	ldw	r10,12(sp)
 800c414:	113ffd44 	addi	r4,r2,-11
 800c418:	00c00704 	movi	r3,28
 800c41c:	19011016 	blt	r3,r4,800c860 <__muldf3+0x6d4>
 800c420:	00c00744 	movi	r3,29
 800c424:	14bffe04 	addi	r18,r2,-8
 800c428:	1907c83a 	sub	r3,r3,r4
 800c42c:	8ca2983a 	sll	r17,r17,r18
 800c430:	30c6d83a 	srl	r3,r6,r3
 800c434:	34a4983a 	sll	r18,r6,r18
 800c438:	1c62b03a 	or	r17,r3,r17
 800c43c:	1080fcc4 	addi	r2,r2,1011
 800c440:	0085c83a 	sub	r2,zero,r2
 800c444:	000f883a 	mov	r7,zero
 800c448:	003f8106 	br	800c250 <__alt_data_end+0xfc00c250>
 800c44c:	3027883a 	mov	r19,r6
 800c450:	0081ffc4 	movi	r2,2047
 800c454:	0021883a 	mov	r16,zero
 800c458:	002d883a 	mov	r22,zero
 800c45c:	003faa06 	br	800c308 <__alt_data_end+0xfc00c308>
 800c460:	0023883a 	mov	r17,zero
 800c464:	0025883a 	mov	r18,zero
 800c468:	01c00044 	movi	r7,1
 800c46c:	003f7806 	br	800c250 <__alt_data_end+0xfc00c250>
 800c470:	01c000c4 	movi	r7,3
 800c474:	003f7606 	br	800c250 <__alt_data_end+0xfc00c250>
 800c478:	05400104 	movi	r21,4
 800c47c:	0021883a 	mov	r16,zero
 800c480:	002d883a 	mov	r22,zero
 800c484:	01400044 	movi	r5,1
 800c488:	003f5f06 	br	800c208 <__alt_data_end+0xfc00c208>
 800c48c:	05400304 	movi	r21,12
 800c490:	014000c4 	movi	r5,3
 800c494:	003f5c06 	br	800c208 <__alt_data_end+0xfc00c208>
 800c498:	04000434 	movhi	r16,16
 800c49c:	0027883a 	mov	r19,zero
 800c4a0:	843fffc4 	addi	r16,r16,-1
 800c4a4:	05bfffc4 	movi	r22,-1
 800c4a8:	0081ffc4 	movi	r2,2047
 800c4ac:	003f9606 	br	800c308 <__alt_data_end+0xfc00c308>
 800c4b0:	8023883a 	mov	r17,r16
 800c4b4:	b025883a 	mov	r18,r22
 800c4b8:	280f883a 	mov	r7,r5
 800c4bc:	003f8806 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c4c0:	8023883a 	mov	r17,r16
 800c4c4:	b025883a 	mov	r18,r22
 800c4c8:	480d883a 	mov	r6,r9
 800c4cc:	280f883a 	mov	r7,r5
 800c4d0:	003f8306 	br	800c2e0 <__alt_data_end+0xfc00c2e0>
 800c4d4:	b026d43a 	srli	r19,r22,16
 800c4d8:	902ed43a 	srli	r23,r18,16
 800c4dc:	b5bfffcc 	andi	r22,r22,65535
 800c4e0:	94bfffcc 	andi	r18,r18,65535
 800c4e4:	b00b883a 	mov	r5,r22
 800c4e8:	9009883a 	mov	r4,r18
 800c4ec:	d8c00515 	stw	r3,20(sp)
 800c4f0:	d9800715 	stw	r6,28(sp)
 800c4f4:	da000615 	stw	r8,24(sp)
 800c4f8:	800061c0 	call	800061c <__mulsi3>
 800c4fc:	980b883a 	mov	r5,r19
 800c500:	9009883a 	mov	r4,r18
 800c504:	1029883a 	mov	r20,r2
 800c508:	800061c0 	call	800061c <__mulsi3>
 800c50c:	b80b883a 	mov	r5,r23
 800c510:	9809883a 	mov	r4,r19
 800c514:	102b883a 	mov	r21,r2
 800c518:	800061c0 	call	800061c <__mulsi3>
 800c51c:	b809883a 	mov	r4,r23
 800c520:	b00b883a 	mov	r5,r22
 800c524:	1039883a 	mov	fp,r2
 800c528:	800061c0 	call	800061c <__mulsi3>
 800c52c:	a008d43a 	srli	r4,r20,16
 800c530:	1545883a 	add	r2,r2,r21
 800c534:	d8c00517 	ldw	r3,20(sp)
 800c538:	2085883a 	add	r2,r4,r2
 800c53c:	d9800717 	ldw	r6,28(sp)
 800c540:	da000617 	ldw	r8,24(sp)
 800c544:	1540022e 	bgeu	r2,r21,800c550 <__muldf3+0x3c4>
 800c548:	01000074 	movhi	r4,1
 800c54c:	e139883a 	add	fp,fp,r4
 800c550:	100e943a 	slli	r7,r2,16
 800c554:	1004d43a 	srli	r2,r2,16
 800c558:	882ad43a 	srli	r21,r17,16
 800c55c:	a53fffcc 	andi	r20,r20,65535
 800c560:	8c7fffcc 	andi	r17,r17,65535
 800c564:	3d29883a 	add	r20,r7,r20
 800c568:	b00b883a 	mov	r5,r22
 800c56c:	8809883a 	mov	r4,r17
 800c570:	d8c00515 	stw	r3,20(sp)
 800c574:	d9800715 	stw	r6,28(sp)
 800c578:	da000615 	stw	r8,24(sp)
 800c57c:	dd000115 	stw	r20,4(sp)
 800c580:	d8800015 	stw	r2,0(sp)
 800c584:	800061c0 	call	800061c <__mulsi3>
 800c588:	980b883a 	mov	r5,r19
 800c58c:	8809883a 	mov	r4,r17
 800c590:	d8800215 	stw	r2,8(sp)
 800c594:	800061c0 	call	800061c <__mulsi3>
 800c598:	9809883a 	mov	r4,r19
 800c59c:	a80b883a 	mov	r5,r21
 800c5a0:	1029883a 	mov	r20,r2
 800c5a4:	800061c0 	call	800061c <__mulsi3>
 800c5a8:	b00b883a 	mov	r5,r22
 800c5ac:	a809883a 	mov	r4,r21
 800c5b0:	d8800415 	stw	r2,16(sp)
 800c5b4:	800061c0 	call	800061c <__mulsi3>
 800c5b8:	d9c00217 	ldw	r7,8(sp)
 800c5bc:	1505883a 	add	r2,r2,r20
 800c5c0:	d8c00517 	ldw	r3,20(sp)
 800c5c4:	3826d43a 	srli	r19,r7,16
 800c5c8:	d9800717 	ldw	r6,28(sp)
 800c5cc:	da000617 	ldw	r8,24(sp)
 800c5d0:	9885883a 	add	r2,r19,r2
 800c5d4:	da400417 	ldw	r9,16(sp)
 800c5d8:	1500022e 	bgeu	r2,r20,800c5e4 <__muldf3+0x458>
 800c5dc:	01000074 	movhi	r4,1
 800c5e0:	4913883a 	add	r9,r9,r4
 800c5e4:	1028d43a 	srli	r20,r2,16
 800c5e8:	1004943a 	slli	r2,r2,16
 800c5ec:	802cd43a 	srli	r22,r16,16
 800c5f0:	843fffcc 	andi	r16,r16,65535
 800c5f4:	3cffffcc 	andi	r19,r7,65535
 800c5f8:	9009883a 	mov	r4,r18
 800c5fc:	800b883a 	mov	r5,r16
 800c600:	a269883a 	add	r20,r20,r9
 800c604:	d8c00515 	stw	r3,20(sp)
 800c608:	d9800715 	stw	r6,28(sp)
 800c60c:	da000615 	stw	r8,24(sp)
 800c610:	14e7883a 	add	r19,r2,r19
 800c614:	800061c0 	call	800061c <__mulsi3>
 800c618:	9009883a 	mov	r4,r18
 800c61c:	b00b883a 	mov	r5,r22
 800c620:	d8800315 	stw	r2,12(sp)
 800c624:	800061c0 	call	800061c <__mulsi3>
 800c628:	b809883a 	mov	r4,r23
 800c62c:	b00b883a 	mov	r5,r22
 800c630:	d8800215 	stw	r2,8(sp)
 800c634:	800061c0 	call	800061c <__mulsi3>
 800c638:	b80b883a 	mov	r5,r23
 800c63c:	8009883a 	mov	r4,r16
 800c640:	d8800415 	stw	r2,16(sp)
 800c644:	800061c0 	call	800061c <__mulsi3>
 800c648:	da800317 	ldw	r10,12(sp)
 800c64c:	d9c00217 	ldw	r7,8(sp)
 800c650:	d9000017 	ldw	r4,0(sp)
 800c654:	502ed43a 	srli	r23,r10,16
 800c658:	11c5883a 	add	r2,r2,r7
 800c65c:	24e5883a 	add	r18,r4,r19
 800c660:	b885883a 	add	r2,r23,r2
 800c664:	d8c00517 	ldw	r3,20(sp)
 800c668:	d9800717 	ldw	r6,28(sp)
 800c66c:	da000617 	ldw	r8,24(sp)
 800c670:	da400417 	ldw	r9,16(sp)
 800c674:	11c0022e 	bgeu	r2,r7,800c680 <__muldf3+0x4f4>
 800c678:	01000074 	movhi	r4,1
 800c67c:	4913883a 	add	r9,r9,r4
 800c680:	100ed43a 	srli	r7,r2,16
 800c684:	1004943a 	slli	r2,r2,16
 800c688:	55ffffcc 	andi	r23,r10,65535
 800c68c:	3a53883a 	add	r9,r7,r9
 800c690:	8809883a 	mov	r4,r17
 800c694:	800b883a 	mov	r5,r16
 800c698:	d8c00515 	stw	r3,20(sp)
 800c69c:	d9800715 	stw	r6,28(sp)
 800c6a0:	da000615 	stw	r8,24(sp)
 800c6a4:	da400415 	stw	r9,16(sp)
 800c6a8:	15ef883a 	add	r23,r2,r23
 800c6ac:	800061c0 	call	800061c <__mulsi3>
 800c6b0:	8809883a 	mov	r4,r17
 800c6b4:	b00b883a 	mov	r5,r22
 800c6b8:	d8800215 	stw	r2,8(sp)
 800c6bc:	800061c0 	call	800061c <__mulsi3>
 800c6c0:	b00b883a 	mov	r5,r22
 800c6c4:	a809883a 	mov	r4,r21
 800c6c8:	d8800315 	stw	r2,12(sp)
 800c6cc:	800061c0 	call	800061c <__mulsi3>
 800c6d0:	8009883a 	mov	r4,r16
 800c6d4:	a80b883a 	mov	r5,r21
 800c6d8:	1023883a 	mov	r17,r2
 800c6dc:	800061c0 	call	800061c <__mulsi3>
 800c6e0:	d9c00217 	ldw	r7,8(sp)
 800c6e4:	da800317 	ldw	r10,12(sp)
 800c6e8:	d8c00517 	ldw	r3,20(sp)
 800c6ec:	3808d43a 	srli	r4,r7,16
 800c6f0:	1285883a 	add	r2,r2,r10
 800c6f4:	d9800717 	ldw	r6,28(sp)
 800c6f8:	2085883a 	add	r2,r4,r2
 800c6fc:	da000617 	ldw	r8,24(sp)
 800c700:	da400417 	ldw	r9,16(sp)
 800c704:	1280022e 	bgeu	r2,r10,800c710 <__muldf3+0x584>
 800c708:	01000074 	movhi	r4,1
 800c70c:	8923883a 	add	r17,r17,r4
 800c710:	1008943a 	slli	r4,r2,16
 800c714:	39ffffcc 	andi	r7,r7,65535
 800c718:	e4b9883a 	add	fp,fp,r18
 800c71c:	21cf883a 	add	r7,r4,r7
 800c720:	e4e7803a 	cmpltu	r19,fp,r19
 800c724:	3d0f883a 	add	r7,r7,r20
 800c728:	bf39883a 	add	fp,r23,fp
 800c72c:	99c9883a 	add	r4,r19,r7
 800c730:	e5ef803a 	cmpltu	r23,fp,r23
 800c734:	490b883a 	add	r5,r9,r4
 800c738:	1004d43a 	srli	r2,r2,16
 800c73c:	b965883a 	add	r18,r23,r5
 800c740:	24c9803a 	cmpltu	r4,r4,r19
 800c744:	3d29803a 	cmpltu	r20,r7,r20
 800c748:	a128b03a 	or	r20,r20,r4
 800c74c:	95ef803a 	cmpltu	r23,r18,r23
 800c750:	2a53803a 	cmpltu	r9,r5,r9
 800c754:	a0a9883a 	add	r20,r20,r2
 800c758:	4deeb03a 	or	r23,r9,r23
 800c75c:	a5ef883a 	add	r23,r20,r23
 800c760:	bc63883a 	add	r17,r23,r17
 800c764:	e004927a 	slli	r2,fp,9
 800c768:	d9000117 	ldw	r4,4(sp)
 800c76c:	882e927a 	slli	r23,r17,9
 800c770:	9022d5fa 	srli	r17,r18,23
 800c774:	e038d5fa 	srli	fp,fp,23
 800c778:	1104b03a 	or	r2,r2,r4
 800c77c:	9024927a 	slli	r18,r18,9
 800c780:	1004c03a 	cmpne	r2,r2,zero
 800c784:	bc62b03a 	or	r17,r23,r17
 800c788:	1738b03a 	or	fp,r2,fp
 800c78c:	8880402c 	andhi	r2,r17,256
 800c790:	e4a4b03a 	or	r18,fp,r18
 800c794:	10000726 	beq	r2,zero,800c7b4 <__muldf3+0x628>
 800c798:	9006d07a 	srli	r3,r18,1
 800c79c:	880497fa 	slli	r2,r17,31
 800c7a0:	9480004c 	andi	r18,r18,1
 800c7a4:	8822d07a 	srli	r17,r17,1
 800c7a8:	1ca4b03a 	or	r18,r3,r18
 800c7ac:	14a4b03a 	or	r18,r2,r18
 800c7b0:	4007883a 	mov	r3,r8
 800c7b4:	1880ffc4 	addi	r2,r3,1023
 800c7b8:	0080460e 	bge	zero,r2,800c8d4 <__muldf3+0x748>
 800c7bc:	910001cc 	andi	r4,r18,7
 800c7c0:	20000726 	beq	r4,zero,800c7e0 <__muldf3+0x654>
 800c7c4:	910003cc 	andi	r4,r18,15
 800c7c8:	01400104 	movi	r5,4
 800c7cc:	21400426 	beq	r4,r5,800c7e0 <__muldf3+0x654>
 800c7d0:	9149883a 	add	r4,r18,r5
 800c7d4:	24a5803a 	cmpltu	r18,r4,r18
 800c7d8:	8ca3883a 	add	r17,r17,r18
 800c7dc:	2025883a 	mov	r18,r4
 800c7e0:	8900402c 	andhi	r4,r17,256
 800c7e4:	20000426 	beq	r4,zero,800c7f8 <__muldf3+0x66c>
 800c7e8:	18810004 	addi	r2,r3,1024
 800c7ec:	00ffc034 	movhi	r3,65280
 800c7f0:	18ffffc4 	addi	r3,r3,-1
 800c7f4:	88e2703a 	and	r17,r17,r3
 800c7f8:	00c1ff84 	movi	r3,2046
 800c7fc:	18bf1316 	blt	r3,r2,800c44c <__alt_data_end+0xfc00c44c>
 800c800:	882c977a 	slli	r22,r17,29
 800c804:	9024d0fa 	srli	r18,r18,3
 800c808:	8822927a 	slli	r17,r17,9
 800c80c:	1081ffcc 	andi	r2,r2,2047
 800c810:	b4acb03a 	or	r22,r22,r18
 800c814:	8820d33a 	srli	r16,r17,12
 800c818:	3027883a 	mov	r19,r6
 800c81c:	003eba06 	br	800c308 <__alt_data_end+0xfc00c308>
 800c820:	8080022c 	andhi	r2,r16,8
 800c824:	10000926 	beq	r2,zero,800c84c <__muldf3+0x6c0>
 800c828:	8880022c 	andhi	r2,r17,8
 800c82c:	1000071e 	bne	r2,zero,800c84c <__muldf3+0x6c0>
 800c830:	00800434 	movhi	r2,16
 800c834:	8c000234 	orhi	r16,r17,8
 800c838:	10bfffc4 	addi	r2,r2,-1
 800c83c:	e027883a 	mov	r19,fp
 800c840:	80a0703a 	and	r16,r16,r2
 800c844:	902d883a 	mov	r22,r18
 800c848:	003f1706 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800c84c:	00800434 	movhi	r2,16
 800c850:	84000234 	orhi	r16,r16,8
 800c854:	10bfffc4 	addi	r2,r2,-1
 800c858:	80a0703a 	and	r16,r16,r2
 800c85c:	003f1206 	br	800c4a8 <__alt_data_end+0xfc00c4a8>
 800c860:	147ff604 	addi	r17,r2,-40
 800c864:	3462983a 	sll	r17,r6,r17
 800c868:	0025883a 	mov	r18,zero
 800c86c:	003ef306 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c870:	3009883a 	mov	r4,r6
 800c874:	d9400215 	stw	r5,8(sp)
 800c878:	d9800715 	stw	r6,28(sp)
 800c87c:	da400415 	stw	r9,16(sp)
 800c880:	da800315 	stw	r10,12(sp)
 800c884:	800d4f80 	call	800d4f8 <__clzsi2>
 800c888:	10800804 	addi	r2,r2,32
 800c88c:	da800317 	ldw	r10,12(sp)
 800c890:	da400417 	ldw	r9,16(sp)
 800c894:	d9800717 	ldw	r6,28(sp)
 800c898:	d9400217 	ldw	r5,8(sp)
 800c89c:	003edd06 	br	800c414 <__alt_data_end+0xfc00c414>
 800c8a0:	143ff604 	addi	r16,r2,-40
 800c8a4:	ac20983a 	sll	r16,r21,r16
 800c8a8:	002d883a 	mov	r22,zero
 800c8ac:	003ec106 	br	800c3b4 <__alt_data_end+0xfc00c3b4>
 800c8b0:	d9800715 	stw	r6,28(sp)
 800c8b4:	d9c00215 	stw	r7,8(sp)
 800c8b8:	da400415 	stw	r9,16(sp)
 800c8bc:	800d4f80 	call	800d4f8 <__clzsi2>
 800c8c0:	10800804 	addi	r2,r2,32
 800c8c4:	da400417 	ldw	r9,16(sp)
 800c8c8:	d9c00217 	ldw	r7,8(sp)
 800c8cc:	d9800717 	ldw	r6,28(sp)
 800c8d0:	003eae06 	br	800c38c <__alt_data_end+0xfc00c38c>
 800c8d4:	00c00044 	movi	r3,1
 800c8d8:	1887c83a 	sub	r3,r3,r2
 800c8dc:	01000e04 	movi	r4,56
 800c8e0:	20fe8516 	blt	r4,r3,800c2f8 <__alt_data_end+0xfc00c2f8>
 800c8e4:	010007c4 	movi	r4,31
 800c8e8:	20c01b16 	blt	r4,r3,800c958 <__muldf3+0x7cc>
 800c8ec:	00800804 	movi	r2,32
 800c8f0:	10c5c83a 	sub	r2,r2,r3
 800c8f4:	888a983a 	sll	r5,r17,r2
 800c8f8:	90c8d83a 	srl	r4,r18,r3
 800c8fc:	9084983a 	sll	r2,r18,r2
 800c900:	88e2d83a 	srl	r17,r17,r3
 800c904:	2906b03a 	or	r3,r5,r4
 800c908:	1004c03a 	cmpne	r2,r2,zero
 800c90c:	1886b03a 	or	r3,r3,r2
 800c910:	188001cc 	andi	r2,r3,7
 800c914:	10000726 	beq	r2,zero,800c934 <__muldf3+0x7a8>
 800c918:	188003cc 	andi	r2,r3,15
 800c91c:	01000104 	movi	r4,4
 800c920:	11000426 	beq	r2,r4,800c934 <__muldf3+0x7a8>
 800c924:	1805883a 	mov	r2,r3
 800c928:	10c00104 	addi	r3,r2,4
 800c92c:	1885803a 	cmpltu	r2,r3,r2
 800c930:	88a3883a 	add	r17,r17,r2
 800c934:	8880202c 	andhi	r2,r17,128
 800c938:	10001c26 	beq	r2,zero,800c9ac <__muldf3+0x820>
 800c93c:	3027883a 	mov	r19,r6
 800c940:	00800044 	movi	r2,1
 800c944:	0021883a 	mov	r16,zero
 800c948:	002d883a 	mov	r22,zero
 800c94c:	003e6e06 	br	800c308 <__alt_data_end+0xfc00c308>
 800c950:	4007883a 	mov	r3,r8
 800c954:	003f9706 	br	800c7b4 <__alt_data_end+0xfc00c7b4>
 800c958:	017ff844 	movi	r5,-31
 800c95c:	2885c83a 	sub	r2,r5,r2
 800c960:	888ad83a 	srl	r5,r17,r2
 800c964:	00800804 	movi	r2,32
 800c968:	18801a26 	beq	r3,r2,800c9d4 <__muldf3+0x848>
 800c96c:	01001004 	movi	r4,64
 800c970:	20c7c83a 	sub	r3,r4,r3
 800c974:	88e2983a 	sll	r17,r17,r3
 800c978:	8ca4b03a 	or	r18,r17,r18
 800c97c:	9004c03a 	cmpne	r2,r18,zero
 800c980:	2884b03a 	or	r2,r5,r2
 800c984:	144001cc 	andi	r17,r2,7
 800c988:	88000d1e 	bne	r17,zero,800c9c0 <__muldf3+0x834>
 800c98c:	0021883a 	mov	r16,zero
 800c990:	102cd0fa 	srli	r22,r2,3
 800c994:	3027883a 	mov	r19,r6
 800c998:	0005883a 	mov	r2,zero
 800c99c:	b46cb03a 	or	r22,r22,r17
 800c9a0:	003e5906 	br	800c308 <__alt_data_end+0xfc00c308>
 800c9a4:	1007883a 	mov	r3,r2
 800c9a8:	0023883a 	mov	r17,zero
 800c9ac:	8820927a 	slli	r16,r17,9
 800c9b0:	1805883a 	mov	r2,r3
 800c9b4:	8822977a 	slli	r17,r17,29
 800c9b8:	8020d33a 	srli	r16,r16,12
 800c9bc:	003ff406 	br	800c990 <__alt_data_end+0xfc00c990>
 800c9c0:	10c003cc 	andi	r3,r2,15
 800c9c4:	01000104 	movi	r4,4
 800c9c8:	193ff626 	beq	r3,r4,800c9a4 <__alt_data_end+0xfc00c9a4>
 800c9cc:	0023883a 	mov	r17,zero
 800c9d0:	003fd506 	br	800c928 <__alt_data_end+0xfc00c928>
 800c9d4:	0023883a 	mov	r17,zero
 800c9d8:	003fe706 	br	800c978 <__alt_data_end+0xfc00c978>
 800c9dc:	00800434 	movhi	r2,16
 800c9e0:	8c000234 	orhi	r16,r17,8
 800c9e4:	10bfffc4 	addi	r2,r2,-1
 800c9e8:	3027883a 	mov	r19,r6
 800c9ec:	80a0703a 	and	r16,r16,r2
 800c9f0:	902d883a 	mov	r22,r18
 800c9f4:	003eac06 	br	800c4a8 <__alt_data_end+0xfc00c4a8>

0800c9f8 <__subdf3>:
 800c9f8:	02000434 	movhi	r8,16
 800c9fc:	423fffc4 	addi	r8,r8,-1
 800ca00:	defffb04 	addi	sp,sp,-20
 800ca04:	2a14703a 	and	r10,r5,r8
 800ca08:	3812d53a 	srli	r9,r7,20
 800ca0c:	3a10703a 	and	r8,r7,r8
 800ca10:	2006d77a 	srli	r3,r4,29
 800ca14:	3004d77a 	srli	r2,r6,29
 800ca18:	dc000015 	stw	r16,0(sp)
 800ca1c:	501490fa 	slli	r10,r10,3
 800ca20:	2820d53a 	srli	r16,r5,20
 800ca24:	401090fa 	slli	r8,r8,3
 800ca28:	dc800215 	stw	r18,8(sp)
 800ca2c:	dc400115 	stw	r17,4(sp)
 800ca30:	dfc00415 	stw	ra,16(sp)
 800ca34:	202290fa 	slli	r17,r4,3
 800ca38:	dcc00315 	stw	r19,12(sp)
 800ca3c:	4a41ffcc 	andi	r9,r9,2047
 800ca40:	0101ffc4 	movi	r4,2047
 800ca44:	2824d7fa 	srli	r18,r5,31
 800ca48:	8401ffcc 	andi	r16,r16,2047
 800ca4c:	50c6b03a 	or	r3,r10,r3
 800ca50:	380ed7fa 	srli	r7,r7,31
 800ca54:	408ab03a 	or	r5,r8,r2
 800ca58:	300c90fa 	slli	r6,r6,3
 800ca5c:	49009626 	beq	r9,r4,800ccb8 <__subdf3+0x2c0>
 800ca60:	39c0005c 	xori	r7,r7,1
 800ca64:	8245c83a 	sub	r2,r16,r9
 800ca68:	3c807426 	beq	r7,r18,800cc3c <__subdf3+0x244>
 800ca6c:	0080af0e 	bge	zero,r2,800cd2c <__subdf3+0x334>
 800ca70:	48002a1e 	bne	r9,zero,800cb1c <__subdf3+0x124>
 800ca74:	2988b03a 	or	r4,r5,r6
 800ca78:	20009a1e 	bne	r4,zero,800cce4 <__subdf3+0x2ec>
 800ca7c:	888001cc 	andi	r2,r17,7
 800ca80:	10000726 	beq	r2,zero,800caa0 <__subdf3+0xa8>
 800ca84:	888003cc 	andi	r2,r17,15
 800ca88:	01000104 	movi	r4,4
 800ca8c:	11000426 	beq	r2,r4,800caa0 <__subdf3+0xa8>
 800ca90:	890b883a 	add	r5,r17,r4
 800ca94:	2c63803a 	cmpltu	r17,r5,r17
 800ca98:	1c47883a 	add	r3,r3,r17
 800ca9c:	2823883a 	mov	r17,r5
 800caa0:	1880202c 	andhi	r2,r3,128
 800caa4:	10005926 	beq	r2,zero,800cc0c <__subdf3+0x214>
 800caa8:	84000044 	addi	r16,r16,1
 800caac:	0081ffc4 	movi	r2,2047
 800cab0:	8080be26 	beq	r16,r2,800cdac <__subdf3+0x3b4>
 800cab4:	017fe034 	movhi	r5,65408
 800cab8:	297fffc4 	addi	r5,r5,-1
 800cabc:	1946703a 	and	r3,r3,r5
 800cac0:	1804977a 	slli	r2,r3,29
 800cac4:	1806927a 	slli	r3,r3,9
 800cac8:	8822d0fa 	srli	r17,r17,3
 800cacc:	8401ffcc 	andi	r16,r16,2047
 800cad0:	180ad33a 	srli	r5,r3,12
 800cad4:	9100004c 	andi	r4,r18,1
 800cad8:	1444b03a 	or	r2,r2,r17
 800cadc:	80c1ffcc 	andi	r3,r16,2047
 800cae0:	1820953a 	slli	r16,r3,20
 800cae4:	20c03fcc 	andi	r3,r4,255
 800cae8:	180897fa 	slli	r4,r3,31
 800caec:	00c00434 	movhi	r3,16
 800caf0:	18ffffc4 	addi	r3,r3,-1
 800caf4:	28c6703a 	and	r3,r5,r3
 800caf8:	1c06b03a 	or	r3,r3,r16
 800cafc:	1906b03a 	or	r3,r3,r4
 800cb00:	dfc00417 	ldw	ra,16(sp)
 800cb04:	dcc00317 	ldw	r19,12(sp)
 800cb08:	dc800217 	ldw	r18,8(sp)
 800cb0c:	dc400117 	ldw	r17,4(sp)
 800cb10:	dc000017 	ldw	r16,0(sp)
 800cb14:	dec00504 	addi	sp,sp,20
 800cb18:	f800283a 	ret
 800cb1c:	0101ffc4 	movi	r4,2047
 800cb20:	813fd626 	beq	r16,r4,800ca7c <__alt_data_end+0xfc00ca7c>
 800cb24:	29402034 	orhi	r5,r5,128
 800cb28:	01000e04 	movi	r4,56
 800cb2c:	2080a316 	blt	r4,r2,800cdbc <__subdf3+0x3c4>
 800cb30:	010007c4 	movi	r4,31
 800cb34:	2080c616 	blt	r4,r2,800ce50 <__subdf3+0x458>
 800cb38:	01000804 	movi	r4,32
 800cb3c:	2089c83a 	sub	r4,r4,r2
 800cb40:	2910983a 	sll	r8,r5,r4
 800cb44:	308ed83a 	srl	r7,r6,r2
 800cb48:	3108983a 	sll	r4,r6,r4
 800cb4c:	2884d83a 	srl	r2,r5,r2
 800cb50:	41ccb03a 	or	r6,r8,r7
 800cb54:	2008c03a 	cmpne	r4,r4,zero
 800cb58:	310cb03a 	or	r6,r6,r4
 800cb5c:	898dc83a 	sub	r6,r17,r6
 800cb60:	89a3803a 	cmpltu	r17,r17,r6
 800cb64:	1887c83a 	sub	r3,r3,r2
 800cb68:	1c47c83a 	sub	r3,r3,r17
 800cb6c:	3023883a 	mov	r17,r6
 800cb70:	1880202c 	andhi	r2,r3,128
 800cb74:	10002326 	beq	r2,zero,800cc04 <__subdf3+0x20c>
 800cb78:	04c02034 	movhi	r19,128
 800cb7c:	9cffffc4 	addi	r19,r19,-1
 800cb80:	1ce6703a 	and	r19,r3,r19
 800cb84:	98007a26 	beq	r19,zero,800cd70 <__subdf3+0x378>
 800cb88:	9809883a 	mov	r4,r19
 800cb8c:	800d4f80 	call	800d4f8 <__clzsi2>
 800cb90:	113ffe04 	addi	r4,r2,-8
 800cb94:	00c007c4 	movi	r3,31
 800cb98:	19007b16 	blt	r3,r4,800cd88 <__subdf3+0x390>
 800cb9c:	00800804 	movi	r2,32
 800cba0:	1105c83a 	sub	r2,r2,r4
 800cba4:	8884d83a 	srl	r2,r17,r2
 800cba8:	9906983a 	sll	r3,r19,r4
 800cbac:	8922983a 	sll	r17,r17,r4
 800cbb0:	10c4b03a 	or	r2,r2,r3
 800cbb4:	24007816 	blt	r4,r16,800cd98 <__subdf3+0x3a0>
 800cbb8:	2421c83a 	sub	r16,r4,r16
 800cbbc:	80c00044 	addi	r3,r16,1
 800cbc0:	010007c4 	movi	r4,31
 800cbc4:	20c09516 	blt	r4,r3,800ce1c <__subdf3+0x424>
 800cbc8:	01400804 	movi	r5,32
 800cbcc:	28cbc83a 	sub	r5,r5,r3
 800cbd0:	88c8d83a 	srl	r4,r17,r3
 800cbd4:	8962983a 	sll	r17,r17,r5
 800cbd8:	114a983a 	sll	r5,r2,r5
 800cbdc:	10c6d83a 	srl	r3,r2,r3
 800cbe0:	8804c03a 	cmpne	r2,r17,zero
 800cbe4:	290ab03a 	or	r5,r5,r4
 800cbe8:	28a2b03a 	or	r17,r5,r2
 800cbec:	0021883a 	mov	r16,zero
 800cbf0:	003fa206 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800cbf4:	2090b03a 	or	r8,r4,r2
 800cbf8:	40018e26 	beq	r8,zero,800d234 <__subdf3+0x83c>
 800cbfc:	1007883a 	mov	r3,r2
 800cc00:	2023883a 	mov	r17,r4
 800cc04:	888001cc 	andi	r2,r17,7
 800cc08:	103f9e1e 	bne	r2,zero,800ca84 <__alt_data_end+0xfc00ca84>
 800cc0c:	1804977a 	slli	r2,r3,29
 800cc10:	8822d0fa 	srli	r17,r17,3
 800cc14:	1810d0fa 	srli	r8,r3,3
 800cc18:	9100004c 	andi	r4,r18,1
 800cc1c:	1444b03a 	or	r2,r2,r17
 800cc20:	00c1ffc4 	movi	r3,2047
 800cc24:	80c02826 	beq	r16,r3,800ccc8 <__subdf3+0x2d0>
 800cc28:	01400434 	movhi	r5,16
 800cc2c:	297fffc4 	addi	r5,r5,-1
 800cc30:	80e0703a 	and	r16,r16,r3
 800cc34:	414a703a 	and	r5,r8,r5
 800cc38:	003fa806 	br	800cadc <__alt_data_end+0xfc00cadc>
 800cc3c:	0080630e 	bge	zero,r2,800cdcc <__subdf3+0x3d4>
 800cc40:	48003026 	beq	r9,zero,800cd04 <__subdf3+0x30c>
 800cc44:	0101ffc4 	movi	r4,2047
 800cc48:	813f8c26 	beq	r16,r4,800ca7c <__alt_data_end+0xfc00ca7c>
 800cc4c:	29402034 	orhi	r5,r5,128
 800cc50:	01000e04 	movi	r4,56
 800cc54:	2080a90e 	bge	r4,r2,800cefc <__subdf3+0x504>
 800cc58:	298cb03a 	or	r6,r5,r6
 800cc5c:	3012c03a 	cmpne	r9,r6,zero
 800cc60:	0005883a 	mov	r2,zero
 800cc64:	4c53883a 	add	r9,r9,r17
 800cc68:	4c63803a 	cmpltu	r17,r9,r17
 800cc6c:	10c7883a 	add	r3,r2,r3
 800cc70:	88c7883a 	add	r3,r17,r3
 800cc74:	4823883a 	mov	r17,r9
 800cc78:	1880202c 	andhi	r2,r3,128
 800cc7c:	1000d026 	beq	r2,zero,800cfc0 <__subdf3+0x5c8>
 800cc80:	84000044 	addi	r16,r16,1
 800cc84:	0081ffc4 	movi	r2,2047
 800cc88:	8080fe26 	beq	r16,r2,800d084 <__subdf3+0x68c>
 800cc8c:	00bfe034 	movhi	r2,65408
 800cc90:	10bfffc4 	addi	r2,r2,-1
 800cc94:	1886703a 	and	r3,r3,r2
 800cc98:	880ad07a 	srli	r5,r17,1
 800cc9c:	180497fa 	slli	r2,r3,31
 800cca0:	8900004c 	andi	r4,r17,1
 800cca4:	2922b03a 	or	r17,r5,r4
 800cca8:	1806d07a 	srli	r3,r3,1
 800ccac:	1462b03a 	or	r17,r2,r17
 800ccb0:	3825883a 	mov	r18,r7
 800ccb4:	003f7106 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800ccb8:	2984b03a 	or	r2,r5,r6
 800ccbc:	103f6826 	beq	r2,zero,800ca60 <__alt_data_end+0xfc00ca60>
 800ccc0:	39c03fcc 	andi	r7,r7,255
 800ccc4:	003f6706 	br	800ca64 <__alt_data_end+0xfc00ca64>
 800ccc8:	4086b03a 	or	r3,r8,r2
 800cccc:	18015226 	beq	r3,zero,800d218 <__subdf3+0x820>
 800ccd0:	00c00434 	movhi	r3,16
 800ccd4:	41400234 	orhi	r5,r8,8
 800ccd8:	18ffffc4 	addi	r3,r3,-1
 800ccdc:	28ca703a 	and	r5,r5,r3
 800cce0:	003f7e06 	br	800cadc <__alt_data_end+0xfc00cadc>
 800cce4:	10bfffc4 	addi	r2,r2,-1
 800cce8:	1000491e 	bne	r2,zero,800ce10 <__subdf3+0x418>
 800ccec:	898fc83a 	sub	r7,r17,r6
 800ccf0:	89e3803a 	cmpltu	r17,r17,r7
 800ccf4:	1947c83a 	sub	r3,r3,r5
 800ccf8:	1c47c83a 	sub	r3,r3,r17
 800ccfc:	3823883a 	mov	r17,r7
 800cd00:	003f9b06 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800cd04:	2988b03a 	or	r4,r5,r6
 800cd08:	203f5c26 	beq	r4,zero,800ca7c <__alt_data_end+0xfc00ca7c>
 800cd0c:	10bfffc4 	addi	r2,r2,-1
 800cd10:	1000931e 	bne	r2,zero,800cf60 <__subdf3+0x568>
 800cd14:	898d883a 	add	r6,r17,r6
 800cd18:	3463803a 	cmpltu	r17,r6,r17
 800cd1c:	1947883a 	add	r3,r3,r5
 800cd20:	88c7883a 	add	r3,r17,r3
 800cd24:	3023883a 	mov	r17,r6
 800cd28:	003fd306 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800cd2c:	1000541e 	bne	r2,zero,800ce80 <__subdf3+0x488>
 800cd30:	80800044 	addi	r2,r16,1
 800cd34:	1081ffcc 	andi	r2,r2,2047
 800cd38:	01000044 	movi	r4,1
 800cd3c:	2080a20e 	bge	r4,r2,800cfc8 <__subdf3+0x5d0>
 800cd40:	8989c83a 	sub	r4,r17,r6
 800cd44:	8905803a 	cmpltu	r2,r17,r4
 800cd48:	1967c83a 	sub	r19,r3,r5
 800cd4c:	98a7c83a 	sub	r19,r19,r2
 800cd50:	9880202c 	andhi	r2,r19,128
 800cd54:	10006326 	beq	r2,zero,800cee4 <__subdf3+0x4ec>
 800cd58:	3463c83a 	sub	r17,r6,r17
 800cd5c:	28c7c83a 	sub	r3,r5,r3
 800cd60:	344d803a 	cmpltu	r6,r6,r17
 800cd64:	19a7c83a 	sub	r19,r3,r6
 800cd68:	3825883a 	mov	r18,r7
 800cd6c:	983f861e 	bne	r19,zero,800cb88 <__alt_data_end+0xfc00cb88>
 800cd70:	8809883a 	mov	r4,r17
 800cd74:	800d4f80 	call	800d4f8 <__clzsi2>
 800cd78:	10800804 	addi	r2,r2,32
 800cd7c:	113ffe04 	addi	r4,r2,-8
 800cd80:	00c007c4 	movi	r3,31
 800cd84:	193f850e 	bge	r3,r4,800cb9c <__alt_data_end+0xfc00cb9c>
 800cd88:	10bff604 	addi	r2,r2,-40
 800cd8c:	8884983a 	sll	r2,r17,r2
 800cd90:	0023883a 	mov	r17,zero
 800cd94:	243f880e 	bge	r4,r16,800cbb8 <__alt_data_end+0xfc00cbb8>
 800cd98:	00ffe034 	movhi	r3,65408
 800cd9c:	18ffffc4 	addi	r3,r3,-1
 800cda0:	8121c83a 	sub	r16,r16,r4
 800cda4:	10c6703a 	and	r3,r2,r3
 800cda8:	003f3406 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800cdac:	9100004c 	andi	r4,r18,1
 800cdb0:	000b883a 	mov	r5,zero
 800cdb4:	0005883a 	mov	r2,zero
 800cdb8:	003f4806 	br	800cadc <__alt_data_end+0xfc00cadc>
 800cdbc:	298cb03a 	or	r6,r5,r6
 800cdc0:	300cc03a 	cmpne	r6,r6,zero
 800cdc4:	0005883a 	mov	r2,zero
 800cdc8:	003f6406 	br	800cb5c <__alt_data_end+0xfc00cb5c>
 800cdcc:	10009a1e 	bne	r2,zero,800d038 <__subdf3+0x640>
 800cdd0:	82400044 	addi	r9,r16,1
 800cdd4:	4881ffcc 	andi	r2,r9,2047
 800cdd8:	02800044 	movi	r10,1
 800cddc:	5080670e 	bge	r10,r2,800cf7c <__subdf3+0x584>
 800cde0:	0081ffc4 	movi	r2,2047
 800cde4:	4880af26 	beq	r9,r2,800d0a4 <__subdf3+0x6ac>
 800cde8:	898d883a 	add	r6,r17,r6
 800cdec:	1945883a 	add	r2,r3,r5
 800cdf0:	3447803a 	cmpltu	r3,r6,r17
 800cdf4:	1887883a 	add	r3,r3,r2
 800cdf8:	182297fa 	slli	r17,r3,31
 800cdfc:	300cd07a 	srli	r6,r6,1
 800ce00:	1806d07a 	srli	r3,r3,1
 800ce04:	4821883a 	mov	r16,r9
 800ce08:	89a2b03a 	or	r17,r17,r6
 800ce0c:	003f1b06 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800ce10:	0101ffc4 	movi	r4,2047
 800ce14:	813f441e 	bne	r16,r4,800cb28 <__alt_data_end+0xfc00cb28>
 800ce18:	003f1806 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800ce1c:	843ff844 	addi	r16,r16,-31
 800ce20:	01400804 	movi	r5,32
 800ce24:	1408d83a 	srl	r4,r2,r16
 800ce28:	19405026 	beq	r3,r5,800cf6c <__subdf3+0x574>
 800ce2c:	01401004 	movi	r5,64
 800ce30:	28c7c83a 	sub	r3,r5,r3
 800ce34:	10c4983a 	sll	r2,r2,r3
 800ce38:	88a2b03a 	or	r17,r17,r2
 800ce3c:	8822c03a 	cmpne	r17,r17,zero
 800ce40:	2462b03a 	or	r17,r4,r17
 800ce44:	0007883a 	mov	r3,zero
 800ce48:	0021883a 	mov	r16,zero
 800ce4c:	003f6d06 	br	800cc04 <__alt_data_end+0xfc00cc04>
 800ce50:	11fff804 	addi	r7,r2,-32
 800ce54:	01000804 	movi	r4,32
 800ce58:	29ced83a 	srl	r7,r5,r7
 800ce5c:	11004526 	beq	r2,r4,800cf74 <__subdf3+0x57c>
 800ce60:	01001004 	movi	r4,64
 800ce64:	2089c83a 	sub	r4,r4,r2
 800ce68:	2904983a 	sll	r2,r5,r4
 800ce6c:	118cb03a 	or	r6,r2,r6
 800ce70:	300cc03a 	cmpne	r6,r6,zero
 800ce74:	398cb03a 	or	r6,r7,r6
 800ce78:	0005883a 	mov	r2,zero
 800ce7c:	003f3706 	br	800cb5c <__alt_data_end+0xfc00cb5c>
 800ce80:	80002a26 	beq	r16,zero,800cf2c <__subdf3+0x534>
 800ce84:	0101ffc4 	movi	r4,2047
 800ce88:	49006626 	beq	r9,r4,800d024 <__subdf3+0x62c>
 800ce8c:	0085c83a 	sub	r2,zero,r2
 800ce90:	18c02034 	orhi	r3,r3,128
 800ce94:	01000e04 	movi	r4,56
 800ce98:	20807e16 	blt	r4,r2,800d094 <__subdf3+0x69c>
 800ce9c:	010007c4 	movi	r4,31
 800cea0:	2080e716 	blt	r4,r2,800d240 <__subdf3+0x848>
 800cea4:	01000804 	movi	r4,32
 800cea8:	2089c83a 	sub	r4,r4,r2
 800ceac:	1914983a 	sll	r10,r3,r4
 800ceb0:	8890d83a 	srl	r8,r17,r2
 800ceb4:	8908983a 	sll	r4,r17,r4
 800ceb8:	1884d83a 	srl	r2,r3,r2
 800cebc:	5222b03a 	or	r17,r10,r8
 800cec0:	2006c03a 	cmpne	r3,r4,zero
 800cec4:	88e2b03a 	or	r17,r17,r3
 800cec8:	3463c83a 	sub	r17,r6,r17
 800cecc:	2885c83a 	sub	r2,r5,r2
 800ced0:	344d803a 	cmpltu	r6,r6,r17
 800ced4:	1187c83a 	sub	r3,r2,r6
 800ced8:	4821883a 	mov	r16,r9
 800cedc:	3825883a 	mov	r18,r7
 800cee0:	003f2306 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800cee4:	24d0b03a 	or	r8,r4,r19
 800cee8:	40001b1e 	bne	r8,zero,800cf58 <__subdf3+0x560>
 800ceec:	0005883a 	mov	r2,zero
 800cef0:	0009883a 	mov	r4,zero
 800cef4:	0021883a 	mov	r16,zero
 800cef8:	003f4906 	br	800cc20 <__alt_data_end+0xfc00cc20>
 800cefc:	010007c4 	movi	r4,31
 800cf00:	20803a16 	blt	r4,r2,800cfec <__subdf3+0x5f4>
 800cf04:	01000804 	movi	r4,32
 800cf08:	2089c83a 	sub	r4,r4,r2
 800cf0c:	2912983a 	sll	r9,r5,r4
 800cf10:	3090d83a 	srl	r8,r6,r2
 800cf14:	3108983a 	sll	r4,r6,r4
 800cf18:	2884d83a 	srl	r2,r5,r2
 800cf1c:	4a12b03a 	or	r9,r9,r8
 800cf20:	2008c03a 	cmpne	r4,r4,zero
 800cf24:	4912b03a 	or	r9,r9,r4
 800cf28:	003f4e06 	br	800cc64 <__alt_data_end+0xfc00cc64>
 800cf2c:	1c48b03a 	or	r4,r3,r17
 800cf30:	20003c26 	beq	r4,zero,800d024 <__subdf3+0x62c>
 800cf34:	0084303a 	nor	r2,zero,r2
 800cf38:	1000381e 	bne	r2,zero,800d01c <__subdf3+0x624>
 800cf3c:	3463c83a 	sub	r17,r6,r17
 800cf40:	28c5c83a 	sub	r2,r5,r3
 800cf44:	344d803a 	cmpltu	r6,r6,r17
 800cf48:	1187c83a 	sub	r3,r2,r6
 800cf4c:	4821883a 	mov	r16,r9
 800cf50:	3825883a 	mov	r18,r7
 800cf54:	003f0606 	br	800cb70 <__alt_data_end+0xfc00cb70>
 800cf58:	2023883a 	mov	r17,r4
 800cf5c:	003f0906 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800cf60:	0101ffc4 	movi	r4,2047
 800cf64:	813f3a1e 	bne	r16,r4,800cc50 <__alt_data_end+0xfc00cc50>
 800cf68:	003ec406 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800cf6c:	0005883a 	mov	r2,zero
 800cf70:	003fb106 	br	800ce38 <__alt_data_end+0xfc00ce38>
 800cf74:	0005883a 	mov	r2,zero
 800cf78:	003fbc06 	br	800ce6c <__alt_data_end+0xfc00ce6c>
 800cf7c:	1c44b03a 	or	r2,r3,r17
 800cf80:	80008e1e 	bne	r16,zero,800d1bc <__subdf3+0x7c4>
 800cf84:	1000c826 	beq	r2,zero,800d2a8 <__subdf3+0x8b0>
 800cf88:	2984b03a 	or	r2,r5,r6
 800cf8c:	103ebb26 	beq	r2,zero,800ca7c <__alt_data_end+0xfc00ca7c>
 800cf90:	8989883a 	add	r4,r17,r6
 800cf94:	1945883a 	add	r2,r3,r5
 800cf98:	2447803a 	cmpltu	r3,r4,r17
 800cf9c:	1887883a 	add	r3,r3,r2
 800cfa0:	1880202c 	andhi	r2,r3,128
 800cfa4:	2023883a 	mov	r17,r4
 800cfa8:	103f1626 	beq	r2,zero,800cc04 <__alt_data_end+0xfc00cc04>
 800cfac:	00bfe034 	movhi	r2,65408
 800cfb0:	10bfffc4 	addi	r2,r2,-1
 800cfb4:	5021883a 	mov	r16,r10
 800cfb8:	1886703a 	and	r3,r3,r2
 800cfbc:	003eaf06 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800cfc0:	3825883a 	mov	r18,r7
 800cfc4:	003f0f06 	br	800cc04 <__alt_data_end+0xfc00cc04>
 800cfc8:	1c44b03a 	or	r2,r3,r17
 800cfcc:	8000251e 	bne	r16,zero,800d064 <__subdf3+0x66c>
 800cfd0:	1000661e 	bne	r2,zero,800d16c <__subdf3+0x774>
 800cfd4:	2990b03a 	or	r8,r5,r6
 800cfd8:	40009626 	beq	r8,zero,800d234 <__subdf3+0x83c>
 800cfdc:	2807883a 	mov	r3,r5
 800cfe0:	3023883a 	mov	r17,r6
 800cfe4:	3825883a 	mov	r18,r7
 800cfe8:	003ea406 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800cfec:	127ff804 	addi	r9,r2,-32
 800cff0:	01000804 	movi	r4,32
 800cff4:	2a52d83a 	srl	r9,r5,r9
 800cff8:	11008c26 	beq	r2,r4,800d22c <__subdf3+0x834>
 800cffc:	01001004 	movi	r4,64
 800d000:	2085c83a 	sub	r2,r4,r2
 800d004:	2884983a 	sll	r2,r5,r2
 800d008:	118cb03a 	or	r6,r2,r6
 800d00c:	300cc03a 	cmpne	r6,r6,zero
 800d010:	4992b03a 	or	r9,r9,r6
 800d014:	0005883a 	mov	r2,zero
 800d018:	003f1206 	br	800cc64 <__alt_data_end+0xfc00cc64>
 800d01c:	0101ffc4 	movi	r4,2047
 800d020:	493f9c1e 	bne	r9,r4,800ce94 <__alt_data_end+0xfc00ce94>
 800d024:	2807883a 	mov	r3,r5
 800d028:	3023883a 	mov	r17,r6
 800d02c:	4821883a 	mov	r16,r9
 800d030:	3825883a 	mov	r18,r7
 800d034:	003e9106 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d038:	80001f1e 	bne	r16,zero,800d0b8 <__subdf3+0x6c0>
 800d03c:	1c48b03a 	or	r4,r3,r17
 800d040:	20005a26 	beq	r4,zero,800d1ac <__subdf3+0x7b4>
 800d044:	0084303a 	nor	r2,zero,r2
 800d048:	1000561e 	bne	r2,zero,800d1a4 <__subdf3+0x7ac>
 800d04c:	89a3883a 	add	r17,r17,r6
 800d050:	1945883a 	add	r2,r3,r5
 800d054:	898d803a 	cmpltu	r6,r17,r6
 800d058:	3087883a 	add	r3,r6,r2
 800d05c:	4821883a 	mov	r16,r9
 800d060:	003f0506 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800d064:	10002b1e 	bne	r2,zero,800d114 <__subdf3+0x71c>
 800d068:	2984b03a 	or	r2,r5,r6
 800d06c:	10008026 	beq	r2,zero,800d270 <__subdf3+0x878>
 800d070:	2807883a 	mov	r3,r5
 800d074:	3023883a 	mov	r17,r6
 800d078:	3825883a 	mov	r18,r7
 800d07c:	0401ffc4 	movi	r16,2047
 800d080:	003e7e06 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d084:	3809883a 	mov	r4,r7
 800d088:	0011883a 	mov	r8,zero
 800d08c:	0005883a 	mov	r2,zero
 800d090:	003ee306 	br	800cc20 <__alt_data_end+0xfc00cc20>
 800d094:	1c62b03a 	or	r17,r3,r17
 800d098:	8822c03a 	cmpne	r17,r17,zero
 800d09c:	0005883a 	mov	r2,zero
 800d0a0:	003f8906 	br	800cec8 <__alt_data_end+0xfc00cec8>
 800d0a4:	3809883a 	mov	r4,r7
 800d0a8:	4821883a 	mov	r16,r9
 800d0ac:	0011883a 	mov	r8,zero
 800d0b0:	0005883a 	mov	r2,zero
 800d0b4:	003eda06 	br	800cc20 <__alt_data_end+0xfc00cc20>
 800d0b8:	0101ffc4 	movi	r4,2047
 800d0bc:	49003b26 	beq	r9,r4,800d1ac <__subdf3+0x7b4>
 800d0c0:	0085c83a 	sub	r2,zero,r2
 800d0c4:	18c02034 	orhi	r3,r3,128
 800d0c8:	01000e04 	movi	r4,56
 800d0cc:	20806e16 	blt	r4,r2,800d288 <__subdf3+0x890>
 800d0d0:	010007c4 	movi	r4,31
 800d0d4:	20807716 	blt	r4,r2,800d2b4 <__subdf3+0x8bc>
 800d0d8:	01000804 	movi	r4,32
 800d0dc:	2089c83a 	sub	r4,r4,r2
 800d0e0:	1914983a 	sll	r10,r3,r4
 800d0e4:	8890d83a 	srl	r8,r17,r2
 800d0e8:	8908983a 	sll	r4,r17,r4
 800d0ec:	1884d83a 	srl	r2,r3,r2
 800d0f0:	5222b03a 	or	r17,r10,r8
 800d0f4:	2006c03a 	cmpne	r3,r4,zero
 800d0f8:	88e2b03a 	or	r17,r17,r3
 800d0fc:	89a3883a 	add	r17,r17,r6
 800d100:	1145883a 	add	r2,r2,r5
 800d104:	898d803a 	cmpltu	r6,r17,r6
 800d108:	3087883a 	add	r3,r6,r2
 800d10c:	4821883a 	mov	r16,r9
 800d110:	003ed906 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800d114:	2984b03a 	or	r2,r5,r6
 800d118:	10004226 	beq	r2,zero,800d224 <__subdf3+0x82c>
 800d11c:	1808d0fa 	srli	r4,r3,3
 800d120:	8822d0fa 	srli	r17,r17,3
 800d124:	1806977a 	slli	r3,r3,29
 800d128:	2080022c 	andhi	r2,r4,8
 800d12c:	1c62b03a 	or	r17,r3,r17
 800d130:	10000826 	beq	r2,zero,800d154 <__subdf3+0x75c>
 800d134:	2812d0fa 	srli	r9,r5,3
 800d138:	4880022c 	andhi	r2,r9,8
 800d13c:	1000051e 	bne	r2,zero,800d154 <__subdf3+0x75c>
 800d140:	300cd0fa 	srli	r6,r6,3
 800d144:	2804977a 	slli	r2,r5,29
 800d148:	4809883a 	mov	r4,r9
 800d14c:	3825883a 	mov	r18,r7
 800d150:	11a2b03a 	or	r17,r2,r6
 800d154:	8806d77a 	srli	r3,r17,29
 800d158:	200890fa 	slli	r4,r4,3
 800d15c:	882290fa 	slli	r17,r17,3
 800d160:	0401ffc4 	movi	r16,2047
 800d164:	1906b03a 	or	r3,r3,r4
 800d168:	003e4406 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d16c:	2984b03a 	or	r2,r5,r6
 800d170:	103e4226 	beq	r2,zero,800ca7c <__alt_data_end+0xfc00ca7c>
 800d174:	8989c83a 	sub	r4,r17,r6
 800d178:	8911803a 	cmpltu	r8,r17,r4
 800d17c:	1945c83a 	sub	r2,r3,r5
 800d180:	1205c83a 	sub	r2,r2,r8
 800d184:	1200202c 	andhi	r8,r2,128
 800d188:	403e9a26 	beq	r8,zero,800cbf4 <__alt_data_end+0xfc00cbf4>
 800d18c:	3463c83a 	sub	r17,r6,r17
 800d190:	28c5c83a 	sub	r2,r5,r3
 800d194:	344d803a 	cmpltu	r6,r6,r17
 800d198:	1187c83a 	sub	r3,r2,r6
 800d19c:	3825883a 	mov	r18,r7
 800d1a0:	003e3606 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d1a4:	0101ffc4 	movi	r4,2047
 800d1a8:	493fc71e 	bne	r9,r4,800d0c8 <__alt_data_end+0xfc00d0c8>
 800d1ac:	2807883a 	mov	r3,r5
 800d1b0:	3023883a 	mov	r17,r6
 800d1b4:	4821883a 	mov	r16,r9
 800d1b8:	003e3006 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d1bc:	10003626 	beq	r2,zero,800d298 <__subdf3+0x8a0>
 800d1c0:	2984b03a 	or	r2,r5,r6
 800d1c4:	10001726 	beq	r2,zero,800d224 <__subdf3+0x82c>
 800d1c8:	1808d0fa 	srli	r4,r3,3
 800d1cc:	8822d0fa 	srli	r17,r17,3
 800d1d0:	1806977a 	slli	r3,r3,29
 800d1d4:	2080022c 	andhi	r2,r4,8
 800d1d8:	1c62b03a 	or	r17,r3,r17
 800d1dc:	10000726 	beq	r2,zero,800d1fc <__subdf3+0x804>
 800d1e0:	2812d0fa 	srli	r9,r5,3
 800d1e4:	4880022c 	andhi	r2,r9,8
 800d1e8:	1000041e 	bne	r2,zero,800d1fc <__subdf3+0x804>
 800d1ec:	300cd0fa 	srli	r6,r6,3
 800d1f0:	2804977a 	slli	r2,r5,29
 800d1f4:	4809883a 	mov	r4,r9
 800d1f8:	11a2b03a 	or	r17,r2,r6
 800d1fc:	8806d77a 	srli	r3,r17,29
 800d200:	200890fa 	slli	r4,r4,3
 800d204:	882290fa 	slli	r17,r17,3
 800d208:	3825883a 	mov	r18,r7
 800d20c:	1906b03a 	or	r3,r3,r4
 800d210:	0401ffc4 	movi	r16,2047
 800d214:	003e1906 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d218:	000b883a 	mov	r5,zero
 800d21c:	0005883a 	mov	r2,zero
 800d220:	003e2e06 	br	800cadc <__alt_data_end+0xfc00cadc>
 800d224:	0401ffc4 	movi	r16,2047
 800d228:	003e1406 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d22c:	0005883a 	mov	r2,zero
 800d230:	003f7506 	br	800d008 <__alt_data_end+0xfc00d008>
 800d234:	0005883a 	mov	r2,zero
 800d238:	0009883a 	mov	r4,zero
 800d23c:	003e7806 	br	800cc20 <__alt_data_end+0xfc00cc20>
 800d240:	123ff804 	addi	r8,r2,-32
 800d244:	01000804 	movi	r4,32
 800d248:	1a10d83a 	srl	r8,r3,r8
 800d24c:	11002526 	beq	r2,r4,800d2e4 <__subdf3+0x8ec>
 800d250:	01001004 	movi	r4,64
 800d254:	2085c83a 	sub	r2,r4,r2
 800d258:	1884983a 	sll	r2,r3,r2
 800d25c:	1444b03a 	or	r2,r2,r17
 800d260:	1004c03a 	cmpne	r2,r2,zero
 800d264:	40a2b03a 	or	r17,r8,r2
 800d268:	0005883a 	mov	r2,zero
 800d26c:	003f1606 	br	800cec8 <__alt_data_end+0xfc00cec8>
 800d270:	02000434 	movhi	r8,16
 800d274:	0009883a 	mov	r4,zero
 800d278:	423fffc4 	addi	r8,r8,-1
 800d27c:	00bfffc4 	movi	r2,-1
 800d280:	0401ffc4 	movi	r16,2047
 800d284:	003e6606 	br	800cc20 <__alt_data_end+0xfc00cc20>
 800d288:	1c62b03a 	or	r17,r3,r17
 800d28c:	8822c03a 	cmpne	r17,r17,zero
 800d290:	0005883a 	mov	r2,zero
 800d294:	003f9906 	br	800d0fc <__alt_data_end+0xfc00d0fc>
 800d298:	2807883a 	mov	r3,r5
 800d29c:	3023883a 	mov	r17,r6
 800d2a0:	0401ffc4 	movi	r16,2047
 800d2a4:	003df506 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d2a8:	2807883a 	mov	r3,r5
 800d2ac:	3023883a 	mov	r17,r6
 800d2b0:	003df206 	br	800ca7c <__alt_data_end+0xfc00ca7c>
 800d2b4:	123ff804 	addi	r8,r2,-32
 800d2b8:	01000804 	movi	r4,32
 800d2bc:	1a10d83a 	srl	r8,r3,r8
 800d2c0:	11000a26 	beq	r2,r4,800d2ec <__subdf3+0x8f4>
 800d2c4:	01001004 	movi	r4,64
 800d2c8:	2085c83a 	sub	r2,r4,r2
 800d2cc:	1884983a 	sll	r2,r3,r2
 800d2d0:	1444b03a 	or	r2,r2,r17
 800d2d4:	1004c03a 	cmpne	r2,r2,zero
 800d2d8:	40a2b03a 	or	r17,r8,r2
 800d2dc:	0005883a 	mov	r2,zero
 800d2e0:	003f8606 	br	800d0fc <__alt_data_end+0xfc00d0fc>
 800d2e4:	0005883a 	mov	r2,zero
 800d2e8:	003fdc06 	br	800d25c <__alt_data_end+0xfc00d25c>
 800d2ec:	0005883a 	mov	r2,zero
 800d2f0:	003ff706 	br	800d2d0 <__alt_data_end+0xfc00d2d0>

0800d2f4 <__fixdfsi>:
 800d2f4:	280cd53a 	srli	r6,r5,20
 800d2f8:	00c00434 	movhi	r3,16
 800d2fc:	18ffffc4 	addi	r3,r3,-1
 800d300:	3181ffcc 	andi	r6,r6,2047
 800d304:	01c0ff84 	movi	r7,1022
 800d308:	28c6703a 	and	r3,r5,r3
 800d30c:	280ad7fa 	srli	r5,r5,31
 800d310:	3980120e 	bge	r7,r6,800d35c <__fixdfsi+0x68>
 800d314:	00810744 	movi	r2,1053
 800d318:	11800c16 	blt	r2,r6,800d34c <__fixdfsi+0x58>
 800d31c:	00810cc4 	movi	r2,1075
 800d320:	1185c83a 	sub	r2,r2,r6
 800d324:	01c007c4 	movi	r7,31
 800d328:	18c00434 	orhi	r3,r3,16
 800d32c:	38800d16 	blt	r7,r2,800d364 <__fixdfsi+0x70>
 800d330:	31befb44 	addi	r6,r6,-1043
 800d334:	2084d83a 	srl	r2,r4,r2
 800d338:	1986983a 	sll	r3,r3,r6
 800d33c:	1884b03a 	or	r2,r3,r2
 800d340:	28000726 	beq	r5,zero,800d360 <__fixdfsi+0x6c>
 800d344:	0085c83a 	sub	r2,zero,r2
 800d348:	f800283a 	ret
 800d34c:	00a00034 	movhi	r2,32768
 800d350:	10bfffc4 	addi	r2,r2,-1
 800d354:	2885883a 	add	r2,r5,r2
 800d358:	f800283a 	ret
 800d35c:	0005883a 	mov	r2,zero
 800d360:	f800283a 	ret
 800d364:	008104c4 	movi	r2,1043
 800d368:	1185c83a 	sub	r2,r2,r6
 800d36c:	1884d83a 	srl	r2,r3,r2
 800d370:	003ff306 	br	800d340 <__alt_data_end+0xfc00d340>

0800d374 <__floatsidf>:
 800d374:	defffd04 	addi	sp,sp,-12
 800d378:	dfc00215 	stw	ra,8(sp)
 800d37c:	dc400115 	stw	r17,4(sp)
 800d380:	dc000015 	stw	r16,0(sp)
 800d384:	20002b26 	beq	r4,zero,800d434 <__floatsidf+0xc0>
 800d388:	2023883a 	mov	r17,r4
 800d38c:	2020d7fa 	srli	r16,r4,31
 800d390:	20002d16 	blt	r4,zero,800d448 <__floatsidf+0xd4>
 800d394:	8809883a 	mov	r4,r17
 800d398:	800d4f80 	call	800d4f8 <__clzsi2>
 800d39c:	01410784 	movi	r5,1054
 800d3a0:	288bc83a 	sub	r5,r5,r2
 800d3a4:	01010cc4 	movi	r4,1075
 800d3a8:	2149c83a 	sub	r4,r4,r5
 800d3ac:	00c007c4 	movi	r3,31
 800d3b0:	1900160e 	bge	r3,r4,800d40c <__floatsidf+0x98>
 800d3b4:	00c104c4 	movi	r3,1043
 800d3b8:	1947c83a 	sub	r3,r3,r5
 800d3bc:	88c6983a 	sll	r3,r17,r3
 800d3c0:	00800434 	movhi	r2,16
 800d3c4:	10bfffc4 	addi	r2,r2,-1
 800d3c8:	1886703a 	and	r3,r3,r2
 800d3cc:	2941ffcc 	andi	r5,r5,2047
 800d3d0:	800d883a 	mov	r6,r16
 800d3d4:	0005883a 	mov	r2,zero
 800d3d8:	280a953a 	slli	r5,r5,20
 800d3dc:	31803fcc 	andi	r6,r6,255
 800d3e0:	01000434 	movhi	r4,16
 800d3e4:	300c97fa 	slli	r6,r6,31
 800d3e8:	213fffc4 	addi	r4,r4,-1
 800d3ec:	1906703a 	and	r3,r3,r4
 800d3f0:	1946b03a 	or	r3,r3,r5
 800d3f4:	1986b03a 	or	r3,r3,r6
 800d3f8:	dfc00217 	ldw	ra,8(sp)
 800d3fc:	dc400117 	ldw	r17,4(sp)
 800d400:	dc000017 	ldw	r16,0(sp)
 800d404:	dec00304 	addi	sp,sp,12
 800d408:	f800283a 	ret
 800d40c:	00c002c4 	movi	r3,11
 800d410:	1887c83a 	sub	r3,r3,r2
 800d414:	88c6d83a 	srl	r3,r17,r3
 800d418:	8904983a 	sll	r2,r17,r4
 800d41c:	01000434 	movhi	r4,16
 800d420:	213fffc4 	addi	r4,r4,-1
 800d424:	2941ffcc 	andi	r5,r5,2047
 800d428:	1906703a 	and	r3,r3,r4
 800d42c:	800d883a 	mov	r6,r16
 800d430:	003fe906 	br	800d3d8 <__alt_data_end+0xfc00d3d8>
 800d434:	000d883a 	mov	r6,zero
 800d438:	000b883a 	mov	r5,zero
 800d43c:	0007883a 	mov	r3,zero
 800d440:	0005883a 	mov	r2,zero
 800d444:	003fe406 	br	800d3d8 <__alt_data_end+0xfc00d3d8>
 800d448:	0123c83a 	sub	r17,zero,r4
 800d44c:	003fd106 	br	800d394 <__alt_data_end+0xfc00d394>

0800d450 <__floatunsidf>:
 800d450:	defffe04 	addi	sp,sp,-8
 800d454:	dc000015 	stw	r16,0(sp)
 800d458:	dfc00115 	stw	ra,4(sp)
 800d45c:	2021883a 	mov	r16,r4
 800d460:	20002226 	beq	r4,zero,800d4ec <__floatunsidf+0x9c>
 800d464:	800d4f80 	call	800d4f8 <__clzsi2>
 800d468:	01010784 	movi	r4,1054
 800d46c:	2089c83a 	sub	r4,r4,r2
 800d470:	01810cc4 	movi	r6,1075
 800d474:	310dc83a 	sub	r6,r6,r4
 800d478:	00c007c4 	movi	r3,31
 800d47c:	1980120e 	bge	r3,r6,800d4c8 <__floatunsidf+0x78>
 800d480:	00c104c4 	movi	r3,1043
 800d484:	1907c83a 	sub	r3,r3,r4
 800d488:	80ca983a 	sll	r5,r16,r3
 800d48c:	00800434 	movhi	r2,16
 800d490:	10bfffc4 	addi	r2,r2,-1
 800d494:	2101ffcc 	andi	r4,r4,2047
 800d498:	0021883a 	mov	r16,zero
 800d49c:	288a703a 	and	r5,r5,r2
 800d4a0:	2008953a 	slli	r4,r4,20
 800d4a4:	00c00434 	movhi	r3,16
 800d4a8:	18ffffc4 	addi	r3,r3,-1
 800d4ac:	28c6703a 	and	r3,r5,r3
 800d4b0:	8005883a 	mov	r2,r16
 800d4b4:	1906b03a 	or	r3,r3,r4
 800d4b8:	dfc00117 	ldw	ra,4(sp)
 800d4bc:	dc000017 	ldw	r16,0(sp)
 800d4c0:	dec00204 	addi	sp,sp,8
 800d4c4:	f800283a 	ret
 800d4c8:	00c002c4 	movi	r3,11
 800d4cc:	188bc83a 	sub	r5,r3,r2
 800d4d0:	814ad83a 	srl	r5,r16,r5
 800d4d4:	00c00434 	movhi	r3,16
 800d4d8:	18ffffc4 	addi	r3,r3,-1
 800d4dc:	81a0983a 	sll	r16,r16,r6
 800d4e0:	2101ffcc 	andi	r4,r4,2047
 800d4e4:	28ca703a 	and	r5,r5,r3
 800d4e8:	003fed06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>
 800d4ec:	0009883a 	mov	r4,zero
 800d4f0:	000b883a 	mov	r5,zero
 800d4f4:	003fea06 	br	800d4a0 <__alt_data_end+0xfc00d4a0>

0800d4f8 <__clzsi2>:
 800d4f8:	00bfffd4 	movui	r2,65535
 800d4fc:	11000536 	bltu	r2,r4,800d514 <__clzsi2+0x1c>
 800d500:	00803fc4 	movi	r2,255
 800d504:	11000f36 	bltu	r2,r4,800d544 <__clzsi2+0x4c>
 800d508:	00800804 	movi	r2,32
 800d50c:	0007883a 	mov	r3,zero
 800d510:	00000506 	br	800d528 <__clzsi2+0x30>
 800d514:	00804034 	movhi	r2,256
 800d518:	10bfffc4 	addi	r2,r2,-1
 800d51c:	11000c2e 	bgeu	r2,r4,800d550 <__clzsi2+0x58>
 800d520:	00800204 	movi	r2,8
 800d524:	00c00604 	movi	r3,24
 800d528:	20c8d83a 	srl	r4,r4,r3
 800d52c:	00c205f4 	movhi	r3,2071
 800d530:	18dcc504 	addi	r3,r3,29460
 800d534:	1909883a 	add	r4,r3,r4
 800d538:	20c00003 	ldbu	r3,0(r4)
 800d53c:	10c5c83a 	sub	r2,r2,r3
 800d540:	f800283a 	ret
 800d544:	00800604 	movi	r2,24
 800d548:	00c00204 	movi	r3,8
 800d54c:	003ff606 	br	800d528 <__alt_data_end+0xfc00d528>
 800d550:	00800404 	movi	r2,16
 800d554:	1007883a 	mov	r3,r2
 800d558:	003ff306 	br	800d528 <__alt_data_end+0xfc00d528>

0800d55c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d55c:	defffe04 	addi	sp,sp,-8
 800d560:	dfc00115 	stw	ra,4(sp)
 800d564:	df000015 	stw	fp,0(sp)
 800d568:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d56c:	d0a01617 	ldw	r2,-32680(gp)
 800d570:	10000326 	beq	r2,zero,800d580 <alt_get_errno+0x24>
 800d574:	d0a01617 	ldw	r2,-32680(gp)
 800d578:	103ee83a 	callr	r2
 800d57c:	00000106 	br	800d584 <alt_get_errno+0x28>
 800d580:	d0a6e704 	addi	r2,gp,-25700
}
 800d584:	e037883a 	mov	sp,fp
 800d588:	dfc00117 	ldw	ra,4(sp)
 800d58c:	df000017 	ldw	fp,0(sp)
 800d590:	dec00204 	addi	sp,sp,8
 800d594:	f800283a 	ret

0800d598 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d598:	defffb04 	addi	sp,sp,-20
 800d59c:	dfc00415 	stw	ra,16(sp)
 800d5a0:	df000315 	stw	fp,12(sp)
 800d5a4:	df000304 	addi	fp,sp,12
 800d5a8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d5ac:	e0bfff17 	ldw	r2,-4(fp)
 800d5b0:	10000816 	blt	r2,zero,800d5d4 <close+0x3c>
 800d5b4:	01400304 	movi	r5,12
 800d5b8:	e13fff17 	ldw	r4,-4(fp)
 800d5bc:	800061c0 	call	800061c <__mulsi3>
 800d5c0:	1007883a 	mov	r3,r2
 800d5c4:	008205f4 	movhi	r2,2071
 800d5c8:	109f4504 	addi	r2,r2,32020
 800d5cc:	1885883a 	add	r2,r3,r2
 800d5d0:	00000106 	br	800d5d8 <close+0x40>
 800d5d4:	0005883a 	mov	r2,zero
 800d5d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d5dc:	e0bffd17 	ldw	r2,-12(fp)
 800d5e0:	10001926 	beq	r2,zero,800d648 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d5e4:	e0bffd17 	ldw	r2,-12(fp)
 800d5e8:	10800017 	ldw	r2,0(r2)
 800d5ec:	10800417 	ldw	r2,16(r2)
 800d5f0:	10000626 	beq	r2,zero,800d60c <close+0x74>
 800d5f4:	e0bffd17 	ldw	r2,-12(fp)
 800d5f8:	10800017 	ldw	r2,0(r2)
 800d5fc:	10800417 	ldw	r2,16(r2)
 800d600:	e13ffd17 	ldw	r4,-12(fp)
 800d604:	103ee83a 	callr	r2
 800d608:	00000106 	br	800d610 <close+0x78>
 800d60c:	0005883a 	mov	r2,zero
 800d610:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d614:	e13fff17 	ldw	r4,-4(fp)
 800d618:	800dc800 	call	800dc80 <alt_release_fd>
    if (rval < 0)
 800d61c:	e0bffe17 	ldw	r2,-8(fp)
 800d620:	1000070e 	bge	r2,zero,800d640 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800d624:	800d55c0 	call	800d55c <alt_get_errno>
 800d628:	1007883a 	mov	r3,r2
 800d62c:	e0bffe17 	ldw	r2,-8(fp)
 800d630:	0085c83a 	sub	r2,zero,r2
 800d634:	18800015 	stw	r2,0(r3)
      return -1;
 800d638:	00bfffc4 	movi	r2,-1
 800d63c:	00000706 	br	800d65c <close+0xc4>
    }
    return 0;
 800d640:	0005883a 	mov	r2,zero
 800d644:	00000506 	br	800d65c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d648:	800d55c0 	call	800d55c <alt_get_errno>
 800d64c:	1007883a 	mov	r3,r2
 800d650:	00801444 	movi	r2,81
 800d654:	18800015 	stw	r2,0(r3)
    return -1;
 800d658:	00bfffc4 	movi	r2,-1
  }
}
 800d65c:	e037883a 	mov	sp,fp
 800d660:	dfc00117 	ldw	ra,4(sp)
 800d664:	df000017 	ldw	fp,0(sp)
 800d668:	dec00204 	addi	sp,sp,8
 800d66c:	f800283a 	ret

0800d670 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d670:	defffc04 	addi	sp,sp,-16
 800d674:	df000315 	stw	fp,12(sp)
 800d678:	df000304 	addi	fp,sp,12
 800d67c:	e13ffd15 	stw	r4,-12(fp)
 800d680:	e17ffe15 	stw	r5,-8(fp)
 800d684:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d688:	e0bfff17 	ldw	r2,-4(fp)
}
 800d68c:	e037883a 	mov	sp,fp
 800d690:	df000017 	ldw	fp,0(sp)
 800d694:	dec00104 	addi	sp,sp,4
 800d698:	f800283a 	ret

0800d69c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d69c:	defffe04 	addi	sp,sp,-8
 800d6a0:	dfc00115 	stw	ra,4(sp)
 800d6a4:	df000015 	stw	fp,0(sp)
 800d6a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d6ac:	d0a01617 	ldw	r2,-32680(gp)
 800d6b0:	10000326 	beq	r2,zero,800d6c0 <alt_get_errno+0x24>
 800d6b4:	d0a01617 	ldw	r2,-32680(gp)
 800d6b8:	103ee83a 	callr	r2
 800d6bc:	00000106 	br	800d6c4 <alt_get_errno+0x28>
 800d6c0:	d0a6e704 	addi	r2,gp,-25700
}
 800d6c4:	e037883a 	mov	sp,fp
 800d6c8:	dfc00117 	ldw	ra,4(sp)
 800d6cc:	df000017 	ldw	fp,0(sp)
 800d6d0:	dec00204 	addi	sp,sp,8
 800d6d4:	f800283a 	ret

0800d6d8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d6d8:	defffb04 	addi	sp,sp,-20
 800d6dc:	dfc00415 	stw	ra,16(sp)
 800d6e0:	df000315 	stw	fp,12(sp)
 800d6e4:	df000304 	addi	fp,sp,12
 800d6e8:	e13ffe15 	stw	r4,-8(fp)
 800d6ec:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d6f0:	e0bffe17 	ldw	r2,-8(fp)
 800d6f4:	10000816 	blt	r2,zero,800d718 <fstat+0x40>
 800d6f8:	01400304 	movi	r5,12
 800d6fc:	e13ffe17 	ldw	r4,-8(fp)
 800d700:	800061c0 	call	800061c <__mulsi3>
 800d704:	1007883a 	mov	r3,r2
 800d708:	008205f4 	movhi	r2,2071
 800d70c:	109f4504 	addi	r2,r2,32020
 800d710:	1885883a 	add	r2,r3,r2
 800d714:	00000106 	br	800d71c <fstat+0x44>
 800d718:	0005883a 	mov	r2,zero
 800d71c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d720:	e0bffd17 	ldw	r2,-12(fp)
 800d724:	10001026 	beq	r2,zero,800d768 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d728:	e0bffd17 	ldw	r2,-12(fp)
 800d72c:	10800017 	ldw	r2,0(r2)
 800d730:	10800817 	ldw	r2,32(r2)
 800d734:	10000726 	beq	r2,zero,800d754 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800d738:	e0bffd17 	ldw	r2,-12(fp)
 800d73c:	10800017 	ldw	r2,0(r2)
 800d740:	10800817 	ldw	r2,32(r2)
 800d744:	e17fff17 	ldw	r5,-4(fp)
 800d748:	e13ffd17 	ldw	r4,-12(fp)
 800d74c:	103ee83a 	callr	r2
 800d750:	00000a06 	br	800d77c <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d754:	e0bfff17 	ldw	r2,-4(fp)
 800d758:	00c80004 	movi	r3,8192
 800d75c:	10c00115 	stw	r3,4(r2)
      return 0;
 800d760:	0005883a 	mov	r2,zero
 800d764:	00000506 	br	800d77c <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d768:	800d69c0 	call	800d69c <alt_get_errno>
 800d76c:	1007883a 	mov	r3,r2
 800d770:	00801444 	movi	r2,81
 800d774:	18800015 	stw	r2,0(r3)
    return -1;
 800d778:	00bfffc4 	movi	r2,-1
  }
}
 800d77c:	e037883a 	mov	sp,fp
 800d780:	dfc00117 	ldw	ra,4(sp)
 800d784:	df000017 	ldw	fp,0(sp)
 800d788:	dec00204 	addi	sp,sp,8
 800d78c:	f800283a 	ret

0800d790 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d790:	defffe04 	addi	sp,sp,-8
 800d794:	dfc00115 	stw	ra,4(sp)
 800d798:	df000015 	stw	fp,0(sp)
 800d79c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d7a0:	d0a01617 	ldw	r2,-32680(gp)
 800d7a4:	10000326 	beq	r2,zero,800d7b4 <alt_get_errno+0x24>
 800d7a8:	d0a01617 	ldw	r2,-32680(gp)
 800d7ac:	103ee83a 	callr	r2
 800d7b0:	00000106 	br	800d7b8 <alt_get_errno+0x28>
 800d7b4:	d0a6e704 	addi	r2,gp,-25700
}
 800d7b8:	e037883a 	mov	sp,fp
 800d7bc:	dfc00117 	ldw	ra,4(sp)
 800d7c0:	df000017 	ldw	fp,0(sp)
 800d7c4:	dec00204 	addi	sp,sp,8
 800d7c8:	f800283a 	ret

0800d7cc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d7cc:	deffed04 	addi	sp,sp,-76
 800d7d0:	dfc01215 	stw	ra,72(sp)
 800d7d4:	df001115 	stw	fp,68(sp)
 800d7d8:	df001104 	addi	fp,sp,68
 800d7dc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d7e0:	e0bfff17 	ldw	r2,-4(fp)
 800d7e4:	10000816 	blt	r2,zero,800d808 <isatty+0x3c>
 800d7e8:	01400304 	movi	r5,12
 800d7ec:	e13fff17 	ldw	r4,-4(fp)
 800d7f0:	800061c0 	call	800061c <__mulsi3>
 800d7f4:	1007883a 	mov	r3,r2
 800d7f8:	008205f4 	movhi	r2,2071
 800d7fc:	109f4504 	addi	r2,r2,32020
 800d800:	1885883a 	add	r2,r3,r2
 800d804:	00000106 	br	800d80c <isatty+0x40>
 800d808:	0005883a 	mov	r2,zero
 800d80c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d810:	e0bfef17 	ldw	r2,-68(fp)
 800d814:	10000e26 	beq	r2,zero,800d850 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d818:	e0bfef17 	ldw	r2,-68(fp)
 800d81c:	10800017 	ldw	r2,0(r2)
 800d820:	10800817 	ldw	r2,32(r2)
 800d824:	1000021e 	bne	r2,zero,800d830 <isatty+0x64>
    {
      return 1;
 800d828:	00800044 	movi	r2,1
 800d82c:	00000d06 	br	800d864 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d830:	e0bff004 	addi	r2,fp,-64
 800d834:	100b883a 	mov	r5,r2
 800d838:	e13fff17 	ldw	r4,-4(fp)
 800d83c:	800d6d80 	call	800d6d8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d840:	e0bff117 	ldw	r2,-60(fp)
 800d844:	10880020 	cmpeqi	r2,r2,8192
 800d848:	10803fcc 	andi	r2,r2,255
 800d84c:	00000506 	br	800d864 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d850:	800d7900 	call	800d790 <alt_get_errno>
 800d854:	1007883a 	mov	r3,r2
 800d858:	00801444 	movi	r2,81
 800d85c:	18800015 	stw	r2,0(r3)
    return 0;
 800d860:	0005883a 	mov	r2,zero
  }
}
 800d864:	e037883a 	mov	sp,fp
 800d868:	dfc00117 	ldw	ra,4(sp)
 800d86c:	df000017 	ldw	fp,0(sp)
 800d870:	dec00204 	addi	sp,sp,8
 800d874:	f800283a 	ret

0800d878 <alt_load_section>:
 800d878:	defffc04 	addi	sp,sp,-16
 800d87c:	df000315 	stw	fp,12(sp)
 800d880:	df000304 	addi	fp,sp,12
 800d884:	e13ffd15 	stw	r4,-12(fp)
 800d888:	e17ffe15 	stw	r5,-8(fp)
 800d88c:	e1bfff15 	stw	r6,-4(fp)
 800d890:	e0fffe17 	ldw	r3,-8(fp)
 800d894:	e0bffd17 	ldw	r2,-12(fp)
 800d898:	18800c26 	beq	r3,r2,800d8cc <alt_load_section+0x54>
 800d89c:	00000806 	br	800d8c0 <alt_load_section+0x48>
 800d8a0:	e0bffe17 	ldw	r2,-8(fp)
 800d8a4:	10c00104 	addi	r3,r2,4
 800d8a8:	e0fffe15 	stw	r3,-8(fp)
 800d8ac:	e0fffd17 	ldw	r3,-12(fp)
 800d8b0:	19000104 	addi	r4,r3,4
 800d8b4:	e13ffd15 	stw	r4,-12(fp)
 800d8b8:	18c00017 	ldw	r3,0(r3)
 800d8bc:	10c00015 	stw	r3,0(r2)
 800d8c0:	e0fffe17 	ldw	r3,-8(fp)
 800d8c4:	e0bfff17 	ldw	r2,-4(fp)
 800d8c8:	18bff51e 	bne	r3,r2,800d8a0 <__alt_data_end+0xfc00d8a0>
 800d8cc:	0001883a 	nop
 800d8d0:	e037883a 	mov	sp,fp
 800d8d4:	df000017 	ldw	fp,0(sp)
 800d8d8:	dec00104 	addi	sp,sp,4
 800d8dc:	f800283a 	ret

0800d8e0 <alt_load>:
 800d8e0:	defffe04 	addi	sp,sp,-8
 800d8e4:	dfc00115 	stw	ra,4(sp)
 800d8e8:	df000015 	stw	fp,0(sp)
 800d8ec:	d839883a 	mov	fp,sp
 800d8f0:	01820634 	movhi	r6,2072
 800d8f4:	31a3d804 	addi	r6,r6,-28832
 800d8f8:	014205f4 	movhi	r5,2071
 800d8fc:	295d1204 	addi	r5,r5,29768
 800d900:	01020634 	movhi	r4,2072
 800d904:	2123d804 	addi	r4,r4,-28832
 800d908:	800d8780 	call	800d878 <alt_load_section>
 800d90c:	01800034 	movhi	r6,0
 800d910:	31808c04 	addi	r6,r6,560
 800d914:	01400034 	movhi	r5,0
 800d918:	29400804 	addi	r5,r5,32
 800d91c:	01000034 	movhi	r4,0
 800d920:	21000804 	addi	r4,r4,32
 800d924:	800d8780 	call	800d878 <alt_load_section>
 800d928:	018205f4 	movhi	r6,2071
 800d92c:	319d1204 	addi	r6,r6,29768
 800d930:	01420074 	movhi	r5,2049
 800d934:	297fa204 	addi	r5,r5,-376
 800d938:	01020074 	movhi	r4,2049
 800d93c:	213fa204 	addi	r4,r4,-376
 800d940:	800d8780 	call	800d878 <alt_load_section>
 800d944:	800edd00 	call	800edd0 <alt_dcache_flush_all>
 800d948:	800ef900 	call	800ef90 <alt_icache_flush_all>
 800d94c:	0001883a 	nop
 800d950:	e037883a 	mov	sp,fp
 800d954:	dfc00117 	ldw	ra,4(sp)
 800d958:	df000017 	ldw	fp,0(sp)
 800d95c:	dec00204 	addi	sp,sp,8
 800d960:	f800283a 	ret

0800d964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d964:	defffe04 	addi	sp,sp,-8
 800d968:	dfc00115 	stw	ra,4(sp)
 800d96c:	df000015 	stw	fp,0(sp)
 800d970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d974:	d0a01617 	ldw	r2,-32680(gp)
 800d978:	10000326 	beq	r2,zero,800d988 <alt_get_errno+0x24>
 800d97c:	d0a01617 	ldw	r2,-32680(gp)
 800d980:	103ee83a 	callr	r2
 800d984:	00000106 	br	800d98c <alt_get_errno+0x28>
 800d988:	d0a6e704 	addi	r2,gp,-25700
}
 800d98c:	e037883a 	mov	sp,fp
 800d990:	dfc00117 	ldw	ra,4(sp)
 800d994:	df000017 	ldw	fp,0(sp)
 800d998:	dec00204 	addi	sp,sp,8
 800d99c:	f800283a 	ret

0800d9a0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d9a0:	defff904 	addi	sp,sp,-28
 800d9a4:	dfc00615 	stw	ra,24(sp)
 800d9a8:	df000515 	stw	fp,20(sp)
 800d9ac:	df000504 	addi	fp,sp,20
 800d9b0:	e13ffd15 	stw	r4,-12(fp)
 800d9b4:	e17ffe15 	stw	r5,-8(fp)
 800d9b8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d9bc:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d9c0:	e0bffd17 	ldw	r2,-12(fp)
 800d9c4:	10000816 	blt	r2,zero,800d9e8 <lseek+0x48>
 800d9c8:	01400304 	movi	r5,12
 800d9cc:	e13ffd17 	ldw	r4,-12(fp)
 800d9d0:	800061c0 	call	800061c <__mulsi3>
 800d9d4:	1007883a 	mov	r3,r2
 800d9d8:	008205f4 	movhi	r2,2071
 800d9dc:	109f4504 	addi	r2,r2,32020
 800d9e0:	1885883a 	add	r2,r3,r2
 800d9e4:	00000106 	br	800d9ec <lseek+0x4c>
 800d9e8:	0005883a 	mov	r2,zero
 800d9ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d9f0:	e0bffc17 	ldw	r2,-16(fp)
 800d9f4:	10001026 	beq	r2,zero,800da38 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d9f8:	e0bffc17 	ldw	r2,-16(fp)
 800d9fc:	10800017 	ldw	r2,0(r2)
 800da00:	10800717 	ldw	r2,28(r2)
 800da04:	10000926 	beq	r2,zero,800da2c <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800da08:	e0bffc17 	ldw	r2,-16(fp)
 800da0c:	10800017 	ldw	r2,0(r2)
 800da10:	10800717 	ldw	r2,28(r2)
 800da14:	e1bfff17 	ldw	r6,-4(fp)
 800da18:	e17ffe17 	ldw	r5,-8(fp)
 800da1c:	e13ffc17 	ldw	r4,-16(fp)
 800da20:	103ee83a 	callr	r2
 800da24:	e0bffb15 	stw	r2,-20(fp)
 800da28:	00000506 	br	800da40 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800da2c:	00bfde84 	movi	r2,-134
 800da30:	e0bffb15 	stw	r2,-20(fp)
 800da34:	00000206 	br	800da40 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800da38:	00bfebc4 	movi	r2,-81
 800da3c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800da40:	e0bffb17 	ldw	r2,-20(fp)
 800da44:	1000070e 	bge	r2,zero,800da64 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800da48:	800d9640 	call	800d964 <alt_get_errno>
 800da4c:	1007883a 	mov	r3,r2
 800da50:	e0bffb17 	ldw	r2,-20(fp)
 800da54:	0085c83a 	sub	r2,zero,r2
 800da58:	18800015 	stw	r2,0(r3)
    rc = -1;
 800da5c:	00bfffc4 	movi	r2,-1
 800da60:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800da64:	e0bffb17 	ldw	r2,-20(fp)
}
 800da68:	e037883a 	mov	sp,fp
 800da6c:	dfc00117 	ldw	ra,4(sp)
 800da70:	df000017 	ldw	fp,0(sp)
 800da74:	dec00204 	addi	sp,sp,8
 800da78:	f800283a 	ret

0800da7c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800da7c:	defffd04 	addi	sp,sp,-12
 800da80:	dfc00215 	stw	ra,8(sp)
 800da84:	df000115 	stw	fp,4(sp)
 800da88:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800da8c:	0009883a 	mov	r4,zero
 800da90:	800df540 	call	800df54 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800da94:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800da98:	800df8c0 	call	800df8c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800da9c:	018205f4 	movhi	r6,2071
 800daa0:	319d0804 	addi	r6,r6,29728
 800daa4:	014205f4 	movhi	r5,2071
 800daa8:	295d0804 	addi	r5,r5,29728
 800daac:	010205f4 	movhi	r4,2071
 800dab0:	211d0804 	addi	r4,r4,29728
 800dab4:	800f3340 	call	800f334 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800dab8:	800eed00 	call	800eed0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800dabc:	01020074 	movhi	r4,2049
 800dac0:	213bcc04 	addi	r4,r4,-4304
 800dac4:	800faf40 	call	800faf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800dac8:	d0a6e817 	ldw	r2,-25696(gp)
 800dacc:	d0e6e917 	ldw	r3,-25692(gp)
 800dad0:	d126ea17 	ldw	r4,-25688(gp)
 800dad4:	200d883a 	mov	r6,r4
 800dad8:	180b883a 	mov	r5,r3
 800dadc:	1009883a 	mov	r4,r2
 800dae0:	80000c00 	call	80000c0 <main>
 800dae4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800dae8:	01000044 	movi	r4,1
 800daec:	800d5980 	call	800d598 <close>
  exit (result);
 800daf0:	e13fff17 	ldw	r4,-4(fp)
 800daf4:	800fb080 	call	800fb08 <exit>

0800daf8 <__malloc_lock>:
 800daf8:	defffe04 	addi	sp,sp,-8
 800dafc:	df000115 	stw	fp,4(sp)
 800db00:	df000104 	addi	fp,sp,4
 800db04:	e13fff15 	stw	r4,-4(fp)
 800db08:	0001883a 	nop
 800db0c:	e037883a 	mov	sp,fp
 800db10:	df000017 	ldw	fp,0(sp)
 800db14:	dec00104 	addi	sp,sp,4
 800db18:	f800283a 	ret

0800db1c <__malloc_unlock>:
 800db1c:	defffe04 	addi	sp,sp,-8
 800db20:	df000115 	stw	fp,4(sp)
 800db24:	df000104 	addi	fp,sp,4
 800db28:	e13fff15 	stw	r4,-4(fp)
 800db2c:	0001883a 	nop
 800db30:	e037883a 	mov	sp,fp
 800db34:	df000017 	ldw	fp,0(sp)
 800db38:	dec00104 	addi	sp,sp,4
 800db3c:	f800283a 	ret

0800db40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800db40:	defffe04 	addi	sp,sp,-8
 800db44:	dfc00115 	stw	ra,4(sp)
 800db48:	df000015 	stw	fp,0(sp)
 800db4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800db50:	d0a01617 	ldw	r2,-32680(gp)
 800db54:	10000326 	beq	r2,zero,800db64 <alt_get_errno+0x24>
 800db58:	d0a01617 	ldw	r2,-32680(gp)
 800db5c:	103ee83a 	callr	r2
 800db60:	00000106 	br	800db68 <alt_get_errno+0x28>
 800db64:	d0a6e704 	addi	r2,gp,-25700
}
 800db68:	e037883a 	mov	sp,fp
 800db6c:	dfc00117 	ldw	ra,4(sp)
 800db70:	df000017 	ldw	fp,0(sp)
 800db74:	dec00204 	addi	sp,sp,8
 800db78:	f800283a 	ret

0800db7c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800db7c:	defff904 	addi	sp,sp,-28
 800db80:	dfc00615 	stw	ra,24(sp)
 800db84:	df000515 	stw	fp,20(sp)
 800db88:	df000504 	addi	fp,sp,20
 800db8c:	e13ffd15 	stw	r4,-12(fp)
 800db90:	e17ffe15 	stw	r5,-8(fp)
 800db94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800db98:	e0bffd17 	ldw	r2,-12(fp)
 800db9c:	10000816 	blt	r2,zero,800dbc0 <read+0x44>
 800dba0:	01400304 	movi	r5,12
 800dba4:	e13ffd17 	ldw	r4,-12(fp)
 800dba8:	800061c0 	call	800061c <__mulsi3>
 800dbac:	1007883a 	mov	r3,r2
 800dbb0:	008205f4 	movhi	r2,2071
 800dbb4:	109f4504 	addi	r2,r2,32020
 800dbb8:	1885883a 	add	r2,r3,r2
 800dbbc:	00000106 	br	800dbc4 <read+0x48>
 800dbc0:	0005883a 	mov	r2,zero
 800dbc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800dbc8:	e0bffb17 	ldw	r2,-20(fp)
 800dbcc:	10002226 	beq	r2,zero,800dc58 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800dbd0:	e0bffb17 	ldw	r2,-20(fp)
 800dbd4:	10800217 	ldw	r2,8(r2)
 800dbd8:	108000cc 	andi	r2,r2,3
 800dbdc:	10800060 	cmpeqi	r2,r2,1
 800dbe0:	1000181e 	bne	r2,zero,800dc44 <read+0xc8>
        (fd->dev->read))
 800dbe4:	e0bffb17 	ldw	r2,-20(fp)
 800dbe8:	10800017 	ldw	r2,0(r2)
 800dbec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800dbf0:	10001426 	beq	r2,zero,800dc44 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800dbf4:	e0bffb17 	ldw	r2,-20(fp)
 800dbf8:	10800017 	ldw	r2,0(r2)
 800dbfc:	10800517 	ldw	r2,20(r2)
 800dc00:	e0ffff17 	ldw	r3,-4(fp)
 800dc04:	180d883a 	mov	r6,r3
 800dc08:	e17ffe17 	ldw	r5,-8(fp)
 800dc0c:	e13ffb17 	ldw	r4,-20(fp)
 800dc10:	103ee83a 	callr	r2
 800dc14:	e0bffc15 	stw	r2,-16(fp)
 800dc18:	e0bffc17 	ldw	r2,-16(fp)
 800dc1c:	1000070e 	bge	r2,zero,800dc3c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800dc20:	800db400 	call	800db40 <alt_get_errno>
 800dc24:	1007883a 	mov	r3,r2
 800dc28:	e0bffc17 	ldw	r2,-16(fp)
 800dc2c:	0085c83a 	sub	r2,zero,r2
 800dc30:	18800015 	stw	r2,0(r3)
          return -1;
 800dc34:	00bfffc4 	movi	r2,-1
 800dc38:	00000c06 	br	800dc6c <read+0xf0>
        }
        return rval;
 800dc3c:	e0bffc17 	ldw	r2,-16(fp)
 800dc40:	00000a06 	br	800dc6c <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800dc44:	800db400 	call	800db40 <alt_get_errno>
 800dc48:	1007883a 	mov	r3,r2
 800dc4c:	00800344 	movi	r2,13
 800dc50:	18800015 	stw	r2,0(r3)
 800dc54:	00000406 	br	800dc68 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800dc58:	800db400 	call	800db40 <alt_get_errno>
 800dc5c:	1007883a 	mov	r3,r2
 800dc60:	00801444 	movi	r2,81
 800dc64:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dc68:	00bfffc4 	movi	r2,-1
}
 800dc6c:	e037883a 	mov	sp,fp
 800dc70:	dfc00117 	ldw	ra,4(sp)
 800dc74:	df000017 	ldw	fp,0(sp)
 800dc78:	dec00204 	addi	sp,sp,8
 800dc7c:	f800283a 	ret

0800dc80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800dc80:	defffc04 	addi	sp,sp,-16
 800dc84:	dfc00315 	stw	ra,12(sp)
 800dc88:	df000215 	stw	fp,8(sp)
 800dc8c:	dc000115 	stw	r16,4(sp)
 800dc90:	df000204 	addi	fp,sp,8
 800dc94:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800dc98:	e0bffe17 	ldw	r2,-8(fp)
 800dc9c:	108000d0 	cmplti	r2,r2,3
 800dca0:	1000111e 	bne	r2,zero,800dce8 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800dca4:	040205f4 	movhi	r16,2071
 800dca8:	841f4504 	addi	r16,r16,32020
 800dcac:	e0bffe17 	ldw	r2,-8(fp)
 800dcb0:	01400304 	movi	r5,12
 800dcb4:	1009883a 	mov	r4,r2
 800dcb8:	800061c0 	call	800061c <__mulsi3>
 800dcbc:	8085883a 	add	r2,r16,r2
 800dcc0:	10800204 	addi	r2,r2,8
 800dcc4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800dcc8:	040205f4 	movhi	r16,2071
 800dccc:	841f4504 	addi	r16,r16,32020
 800dcd0:	e0bffe17 	ldw	r2,-8(fp)
 800dcd4:	01400304 	movi	r5,12
 800dcd8:	1009883a 	mov	r4,r2
 800dcdc:	800061c0 	call	800061c <__mulsi3>
 800dce0:	8085883a 	add	r2,r16,r2
 800dce4:	10000015 	stw	zero,0(r2)
  }
}
 800dce8:	0001883a 	nop
 800dcec:	e6ffff04 	addi	sp,fp,-4
 800dcf0:	dfc00217 	ldw	ra,8(sp)
 800dcf4:	df000117 	ldw	fp,4(sp)
 800dcf8:	dc000017 	ldw	r16,0(sp)
 800dcfc:	dec00304 	addi	sp,sp,12
 800dd00:	f800283a 	ret

0800dd04 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800dd04:	defff904 	addi	sp,sp,-28
 800dd08:	df000615 	stw	fp,24(sp)
 800dd0c:	df000604 	addi	fp,sp,24
 800dd10:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dd14:	0005303a 	rdctl	r2,status
 800dd18:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dd1c:	e0fffe17 	ldw	r3,-8(fp)
 800dd20:	00bfff84 	movi	r2,-2
 800dd24:	1884703a 	and	r2,r3,r2
 800dd28:	1001703a 	wrctl	status,r2
  
  return context;
 800dd2c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800dd30:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800dd34:	d0a01717 	ldw	r2,-32676(gp)
 800dd38:	10c000c4 	addi	r3,r2,3
 800dd3c:	00bfff04 	movi	r2,-4
 800dd40:	1884703a 	and	r2,r3,r2
 800dd44:	d0a01715 	stw	r2,-32676(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800dd48:	d0e01717 	ldw	r3,-32676(gp)
 800dd4c:	e0bfff17 	ldw	r2,-4(fp)
 800dd50:	1887883a 	add	r3,r3,r2
 800dd54:	00830034 	movhi	r2,3072
 800dd58:	10800004 	addi	r2,r2,0
 800dd5c:	10c0062e 	bgeu	r2,r3,800dd78 <sbrk+0x74>
 800dd60:	e0bffb17 	ldw	r2,-20(fp)
 800dd64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dd68:	e0bffa17 	ldw	r2,-24(fp)
 800dd6c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800dd70:	00bfffc4 	movi	r2,-1
 800dd74:	00000b06 	br	800dda4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800dd78:	d0a01717 	ldw	r2,-32676(gp)
 800dd7c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 800dd80:	d0e01717 	ldw	r3,-32676(gp)
 800dd84:	e0bfff17 	ldw	r2,-4(fp)
 800dd88:	1885883a 	add	r2,r3,r2
 800dd8c:	d0a01715 	stw	r2,-32676(gp)
 800dd90:	e0bffb17 	ldw	r2,-20(fp)
 800dd94:	e0bffc15 	stw	r2,-16(fp)
 800dd98:	e0bffc17 	ldw	r2,-16(fp)
 800dd9c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800dda0:	e0bffd17 	ldw	r2,-12(fp)
} 
 800dda4:	e037883a 	mov	sp,fp
 800dda8:	df000017 	ldw	fp,0(sp)
 800ddac:	dec00104 	addi	sp,sp,4
 800ddb0:	f800283a 	ret

0800ddb4 <usleep>:
 800ddb4:	defffd04 	addi	sp,sp,-12
 800ddb8:	dfc00215 	stw	ra,8(sp)
 800ddbc:	df000115 	stw	fp,4(sp)
 800ddc0:	df000104 	addi	fp,sp,4
 800ddc4:	e13fff15 	stw	r4,-4(fp)
 800ddc8:	e13fff17 	ldw	r4,-4(fp)
 800ddcc:	800ec780 	call	800ec78 <alt_busy_sleep>
 800ddd0:	e037883a 	mov	sp,fp
 800ddd4:	dfc00117 	ldw	ra,4(sp)
 800ddd8:	df000017 	ldw	fp,0(sp)
 800dddc:	dec00204 	addi	sp,sp,8
 800dde0:	f800283a 	ret

0800dde4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dde4:	defffe04 	addi	sp,sp,-8
 800dde8:	dfc00115 	stw	ra,4(sp)
 800ddec:	df000015 	stw	fp,0(sp)
 800ddf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ddf4:	d0a01617 	ldw	r2,-32680(gp)
 800ddf8:	10000326 	beq	r2,zero,800de08 <alt_get_errno+0x24>
 800ddfc:	d0a01617 	ldw	r2,-32680(gp)
 800de00:	103ee83a 	callr	r2
 800de04:	00000106 	br	800de0c <alt_get_errno+0x28>
 800de08:	d0a6e704 	addi	r2,gp,-25700
}
 800de0c:	e037883a 	mov	sp,fp
 800de10:	dfc00117 	ldw	ra,4(sp)
 800de14:	df000017 	ldw	fp,0(sp)
 800de18:	dec00204 	addi	sp,sp,8
 800de1c:	f800283a 	ret

0800de20 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800de20:	defff904 	addi	sp,sp,-28
 800de24:	dfc00615 	stw	ra,24(sp)
 800de28:	df000515 	stw	fp,20(sp)
 800de2c:	df000504 	addi	fp,sp,20
 800de30:	e13ffd15 	stw	r4,-12(fp)
 800de34:	e17ffe15 	stw	r5,-8(fp)
 800de38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800de3c:	e0bffd17 	ldw	r2,-12(fp)
 800de40:	10000816 	blt	r2,zero,800de64 <write+0x44>
 800de44:	01400304 	movi	r5,12
 800de48:	e13ffd17 	ldw	r4,-12(fp)
 800de4c:	800061c0 	call	800061c <__mulsi3>
 800de50:	1007883a 	mov	r3,r2
 800de54:	008205f4 	movhi	r2,2071
 800de58:	109f4504 	addi	r2,r2,32020
 800de5c:	1885883a 	add	r2,r3,r2
 800de60:	00000106 	br	800de68 <write+0x48>
 800de64:	0005883a 	mov	r2,zero
 800de68:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800de6c:	e0bffb17 	ldw	r2,-20(fp)
 800de70:	10002126 	beq	r2,zero,800def8 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800de74:	e0bffb17 	ldw	r2,-20(fp)
 800de78:	10800217 	ldw	r2,8(r2)
 800de7c:	108000cc 	andi	r2,r2,3
 800de80:	10001826 	beq	r2,zero,800dee4 <write+0xc4>
 800de84:	e0bffb17 	ldw	r2,-20(fp)
 800de88:	10800017 	ldw	r2,0(r2)
 800de8c:	10800617 	ldw	r2,24(r2)
 800de90:	10001426 	beq	r2,zero,800dee4 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800de94:	e0bffb17 	ldw	r2,-20(fp)
 800de98:	10800017 	ldw	r2,0(r2)
 800de9c:	10800617 	ldw	r2,24(r2)
 800dea0:	e0ffff17 	ldw	r3,-4(fp)
 800dea4:	180d883a 	mov	r6,r3
 800dea8:	e17ffe17 	ldw	r5,-8(fp)
 800deac:	e13ffb17 	ldw	r4,-20(fp)
 800deb0:	103ee83a 	callr	r2
 800deb4:	e0bffc15 	stw	r2,-16(fp)
 800deb8:	e0bffc17 	ldw	r2,-16(fp)
 800debc:	1000070e 	bge	r2,zero,800dedc <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800dec0:	800dde40 	call	800dde4 <alt_get_errno>
 800dec4:	1007883a 	mov	r3,r2
 800dec8:	e0bffc17 	ldw	r2,-16(fp)
 800decc:	0085c83a 	sub	r2,zero,r2
 800ded0:	18800015 	stw	r2,0(r3)
        return -1;
 800ded4:	00bfffc4 	movi	r2,-1
 800ded8:	00000c06 	br	800df0c <write+0xec>
      }
      return rval;
 800dedc:	e0bffc17 	ldw	r2,-16(fp)
 800dee0:	00000a06 	br	800df0c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800dee4:	800dde40 	call	800dde4 <alt_get_errno>
 800dee8:	1007883a 	mov	r3,r2
 800deec:	00800344 	movi	r2,13
 800def0:	18800015 	stw	r2,0(r3)
 800def4:	00000406 	br	800df08 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800def8:	800dde40 	call	800dde4 <alt_get_errno>
 800defc:	1007883a 	mov	r3,r2
 800df00:	00801444 	movi	r2,81
 800df04:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800df08:	00bfffc4 	movi	r2,-1
}
 800df0c:	e037883a 	mov	sp,fp
 800df10:	dfc00117 	ldw	ra,4(sp)
 800df14:	df000017 	ldw	fp,0(sp)
 800df18:	dec00204 	addi	sp,sp,8
 800df1c:	f800283a 	ret

0800df20 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800df20:	defffd04 	addi	sp,sp,-12
 800df24:	dfc00215 	stw	ra,8(sp)
 800df28:	df000115 	stw	fp,4(sp)
 800df2c:	df000104 	addi	fp,sp,4
 800df30:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800df34:	d1601304 	addi	r5,gp,-32692
 800df38:	e13fff17 	ldw	r4,-4(fp)
 800df3c:	800ee2c0 	call	800ee2c <alt_dev_llist_insert>
}
 800df40:	e037883a 	mov	sp,fp
 800df44:	dfc00117 	ldw	ra,4(sp)
 800df48:	df000017 	ldw	fp,0(sp)
 800df4c:	dec00204 	addi	sp,sp,8
 800df50:	f800283a 	ret

0800df54 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800df54:	defffd04 	addi	sp,sp,-12
 800df58:	dfc00215 	stw	ra,8(sp)
 800df5c:	df000115 	stw	fp,4(sp)
 800df60:	df000104 	addi	fp,sp,4
 800df64:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800df68:	800f7d80 	call	800f7d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800df6c:	00800044 	movi	r2,1
 800df70:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800df74:	0001883a 	nop
 800df78:	e037883a 	mov	sp,fp
 800df7c:	dfc00117 	ldw	ra,4(sp)
 800df80:	df000017 	ldw	fp,0(sp)
 800df84:	dec00204 	addi	sp,sp,8
 800df88:	f800283a 	ret

0800df8c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800df8c:	defffe04 	addi	sp,sp,-8
 800df90:	dfc00115 	stw	ra,4(sp)
 800df94:	df000015 	stw	fp,0(sp)
 800df98:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800df9c:	01c0fa04 	movi	r7,1000
 800dfa0:	01800084 	movi	r6,2
 800dfa4:	000b883a 	mov	r5,zero
 800dfa8:	01081004 	movi	r4,8256
 800dfac:	800ead00 	call	800ead0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800dfb0:	01800044 	movi	r6,1
 800dfb4:	000b883a 	mov	r5,zero
 800dfb8:	010205f4 	movhi	r4,2071
 800dfbc:	211faf04 	addi	r4,r4,32444
 800dfc0:	800e1540 	call	800e154 <altera_avalon_jtag_uart_init>
 800dfc4:	010205f4 	movhi	r4,2071
 800dfc8:	211fa504 	addi	r4,r4,32404
 800dfcc:	800df200 	call	800df20 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800dfd0:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800dfd4:	0001883a 	nop
}
 800dfd8:	0001883a 	nop
 800dfdc:	e037883a 	mov	sp,fp
 800dfe0:	dfc00117 	ldw	ra,4(sp)
 800dfe4:	df000017 	ldw	fp,0(sp)
 800dfe8:	dec00204 	addi	sp,sp,8
 800dfec:	f800283a 	ret

0800dff0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800dff0:	defffa04 	addi	sp,sp,-24
 800dff4:	dfc00515 	stw	ra,20(sp)
 800dff8:	df000415 	stw	fp,16(sp)
 800dffc:	df000404 	addi	fp,sp,16
 800e000:	e13ffd15 	stw	r4,-12(fp)
 800e004:	e17ffe15 	stw	r5,-8(fp)
 800e008:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e00c:	e0bffd17 	ldw	r2,-12(fp)
 800e010:	10800017 	ldw	r2,0(r2)
 800e014:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800e018:	e0bffc17 	ldw	r2,-16(fp)
 800e01c:	10c00a04 	addi	r3,r2,40
 800e020:	e0bffd17 	ldw	r2,-12(fp)
 800e024:	10800217 	ldw	r2,8(r2)
 800e028:	100f883a 	mov	r7,r2
 800e02c:	e1bfff17 	ldw	r6,-4(fp)
 800e030:	e17ffe17 	ldw	r5,-8(fp)
 800e034:	1809883a 	mov	r4,r3
 800e038:	800e6180 	call	800e618 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800e03c:	e037883a 	mov	sp,fp
 800e040:	dfc00117 	ldw	ra,4(sp)
 800e044:	df000017 	ldw	fp,0(sp)
 800e048:	dec00204 	addi	sp,sp,8
 800e04c:	f800283a 	ret

0800e050 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800e050:	defffa04 	addi	sp,sp,-24
 800e054:	dfc00515 	stw	ra,20(sp)
 800e058:	df000415 	stw	fp,16(sp)
 800e05c:	df000404 	addi	fp,sp,16
 800e060:	e13ffd15 	stw	r4,-12(fp)
 800e064:	e17ffe15 	stw	r5,-8(fp)
 800e068:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e06c:	e0bffd17 	ldw	r2,-12(fp)
 800e070:	10800017 	ldw	r2,0(r2)
 800e074:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800e078:	e0bffc17 	ldw	r2,-16(fp)
 800e07c:	10c00a04 	addi	r3,r2,40
 800e080:	e0bffd17 	ldw	r2,-12(fp)
 800e084:	10800217 	ldw	r2,8(r2)
 800e088:	100f883a 	mov	r7,r2
 800e08c:	e1bfff17 	ldw	r6,-4(fp)
 800e090:	e17ffe17 	ldw	r5,-8(fp)
 800e094:	1809883a 	mov	r4,r3
 800e098:	800e8340 	call	800e834 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800e09c:	e037883a 	mov	sp,fp
 800e0a0:	dfc00117 	ldw	ra,4(sp)
 800e0a4:	df000017 	ldw	fp,0(sp)
 800e0a8:	dec00204 	addi	sp,sp,8
 800e0ac:	f800283a 	ret

0800e0b0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800e0b0:	defffc04 	addi	sp,sp,-16
 800e0b4:	dfc00315 	stw	ra,12(sp)
 800e0b8:	df000215 	stw	fp,8(sp)
 800e0bc:	df000204 	addi	fp,sp,8
 800e0c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800e0c4:	e0bfff17 	ldw	r2,-4(fp)
 800e0c8:	10800017 	ldw	r2,0(r2)
 800e0cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800e0d0:	e0bffe17 	ldw	r2,-8(fp)
 800e0d4:	10c00a04 	addi	r3,r2,40
 800e0d8:	e0bfff17 	ldw	r2,-4(fp)
 800e0dc:	10800217 	ldw	r2,8(r2)
 800e0e0:	100b883a 	mov	r5,r2
 800e0e4:	1809883a 	mov	r4,r3
 800e0e8:	800e4c00 	call	800e4c0 <altera_avalon_jtag_uart_close>
}
 800e0ec:	e037883a 	mov	sp,fp
 800e0f0:	dfc00117 	ldw	ra,4(sp)
 800e0f4:	df000017 	ldw	fp,0(sp)
 800e0f8:	dec00204 	addi	sp,sp,8
 800e0fc:	f800283a 	ret

0800e100 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800e100:	defffa04 	addi	sp,sp,-24
 800e104:	dfc00515 	stw	ra,20(sp)
 800e108:	df000415 	stw	fp,16(sp)
 800e10c:	df000404 	addi	fp,sp,16
 800e110:	e13ffd15 	stw	r4,-12(fp)
 800e114:	e17ffe15 	stw	r5,-8(fp)
 800e118:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800e11c:	e0bffd17 	ldw	r2,-12(fp)
 800e120:	10800017 	ldw	r2,0(r2)
 800e124:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800e128:	e0bffc17 	ldw	r2,-16(fp)
 800e12c:	10800a04 	addi	r2,r2,40
 800e130:	e1bfff17 	ldw	r6,-4(fp)
 800e134:	e17ffe17 	ldw	r5,-8(fp)
 800e138:	1009883a 	mov	r4,r2
 800e13c:	800e5280 	call	800e528 <altera_avalon_jtag_uart_ioctl>
}
 800e140:	e037883a 	mov	sp,fp
 800e144:	dfc00117 	ldw	ra,4(sp)
 800e148:	df000017 	ldw	fp,0(sp)
 800e14c:	dec00204 	addi	sp,sp,8
 800e150:	f800283a 	ret

0800e154 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800e154:	defffa04 	addi	sp,sp,-24
 800e158:	dfc00515 	stw	ra,20(sp)
 800e15c:	df000415 	stw	fp,16(sp)
 800e160:	df000404 	addi	fp,sp,16
 800e164:	e13ffd15 	stw	r4,-12(fp)
 800e168:	e17ffe15 	stw	r5,-8(fp)
 800e16c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e170:	e0bffd17 	ldw	r2,-12(fp)
 800e174:	00c00044 	movi	r3,1
 800e178:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800e17c:	e0bffd17 	ldw	r2,-12(fp)
 800e180:	10800017 	ldw	r2,0(r2)
 800e184:	10800104 	addi	r2,r2,4
 800e188:	1007883a 	mov	r3,r2
 800e18c:	e0bffd17 	ldw	r2,-12(fp)
 800e190:	10800817 	ldw	r2,32(r2)
 800e194:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800e198:	e0bffe17 	ldw	r2,-8(fp)
 800e19c:	e0ffff17 	ldw	r3,-4(fp)
 800e1a0:	d8000015 	stw	zero,0(sp)
 800e1a4:	e1fffd17 	ldw	r7,-12(fp)
 800e1a8:	01820074 	movhi	r6,2049
 800e1ac:	31b88504 	addi	r6,r6,-7660
 800e1b0:	180b883a 	mov	r5,r3
 800e1b4:	1009883a 	mov	r4,r2
 800e1b8:	800efb00 	call	800efb0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800e1bc:	e0bffd17 	ldw	r2,-12(fp)
 800e1c0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800e1c4:	e0bffd17 	ldw	r2,-12(fp)
 800e1c8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e1cc:	d0e6ec17 	ldw	r3,-25680(gp)
 800e1d0:	e1fffd17 	ldw	r7,-12(fp)
 800e1d4:	01820074 	movhi	r6,2049
 800e1d8:	31b90804 	addi	r6,r6,-7136
 800e1dc:	180b883a 	mov	r5,r3
 800e1e0:	1009883a 	mov	r4,r2
 800e1e4:	800eb4c0 	call	800eb4c <alt_alarm_start>
 800e1e8:	1000040e 	bge	r2,zero,800e1fc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800e1ec:	e0fffd17 	ldw	r3,-12(fp)
 800e1f0:	00a00034 	movhi	r2,32768
 800e1f4:	10bfffc4 	addi	r2,r2,-1
 800e1f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800e1fc:	0001883a 	nop
 800e200:	e037883a 	mov	sp,fp
 800e204:	dfc00117 	ldw	ra,4(sp)
 800e208:	df000017 	ldw	fp,0(sp)
 800e20c:	dec00204 	addi	sp,sp,8
 800e210:	f800283a 	ret

0800e214 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800e214:	defff804 	addi	sp,sp,-32
 800e218:	df000715 	stw	fp,28(sp)
 800e21c:	df000704 	addi	fp,sp,28
 800e220:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800e224:	e0bfff17 	ldw	r2,-4(fp)
 800e228:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800e22c:	e0bffb17 	ldw	r2,-20(fp)
 800e230:	10800017 	ldw	r2,0(r2)
 800e234:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e238:	e0bffc17 	ldw	r2,-16(fp)
 800e23c:	10800104 	addi	r2,r2,4
 800e240:	10800037 	ldwio	r2,0(r2)
 800e244:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800e248:	e0bffd17 	ldw	r2,-12(fp)
 800e24c:	1080c00c 	andi	r2,r2,768
 800e250:	10006d26 	beq	r2,zero,800e408 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800e254:	e0bffd17 	ldw	r2,-12(fp)
 800e258:	1080400c 	andi	r2,r2,256
 800e25c:	10003526 	beq	r2,zero,800e334 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800e260:	00800074 	movhi	r2,1
 800e264:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e268:	e0bffb17 	ldw	r2,-20(fp)
 800e26c:	10800a17 	ldw	r2,40(r2)
 800e270:	10800044 	addi	r2,r2,1
 800e274:	1081ffcc 	andi	r2,r2,2047
 800e278:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800e27c:	e0bffb17 	ldw	r2,-20(fp)
 800e280:	10c00b17 	ldw	r3,44(r2)
 800e284:	e0bffe17 	ldw	r2,-8(fp)
 800e288:	18801526 	beq	r3,r2,800e2e0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800e28c:	e0bffc17 	ldw	r2,-16(fp)
 800e290:	10800037 	ldwio	r2,0(r2)
 800e294:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800e298:	e0bff917 	ldw	r2,-28(fp)
 800e29c:	10a0000c 	andi	r2,r2,32768
 800e2a0:	10001126 	beq	r2,zero,800e2e8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800e2a4:	e0bffb17 	ldw	r2,-20(fp)
 800e2a8:	10800a17 	ldw	r2,40(r2)
 800e2ac:	e0fff917 	ldw	r3,-28(fp)
 800e2b0:	1809883a 	mov	r4,r3
 800e2b4:	e0fffb17 	ldw	r3,-20(fp)
 800e2b8:	1885883a 	add	r2,r3,r2
 800e2bc:	10800e04 	addi	r2,r2,56
 800e2c0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e2c4:	e0bffb17 	ldw	r2,-20(fp)
 800e2c8:	10800a17 	ldw	r2,40(r2)
 800e2cc:	10800044 	addi	r2,r2,1
 800e2d0:	10c1ffcc 	andi	r3,r2,2047
 800e2d4:	e0bffb17 	ldw	r2,-20(fp)
 800e2d8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800e2dc:	003fe206 	br	800e268 <__alt_data_end+0xfc00e268>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 800e2e0:	0001883a 	nop
 800e2e4:	00000106 	br	800e2ec <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800e2e8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e2ec:	e0bff917 	ldw	r2,-28(fp)
 800e2f0:	10bfffec 	andhi	r2,r2,65535
 800e2f4:	10000f26 	beq	r2,zero,800e334 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e2f8:	e0bffb17 	ldw	r2,-20(fp)
 800e2fc:	10c00817 	ldw	r3,32(r2)
 800e300:	00bfff84 	movi	r2,-2
 800e304:	1886703a 	and	r3,r3,r2
 800e308:	e0bffb17 	ldw	r2,-20(fp)
 800e30c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e310:	e0bffc17 	ldw	r2,-16(fp)
 800e314:	10800104 	addi	r2,r2,4
 800e318:	1007883a 	mov	r3,r2
 800e31c:	e0bffb17 	ldw	r2,-20(fp)
 800e320:	10800817 	ldw	r2,32(r2)
 800e324:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e328:	e0bffc17 	ldw	r2,-16(fp)
 800e32c:	10800104 	addi	r2,r2,4
 800e330:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e334:	e0bffd17 	ldw	r2,-12(fp)
 800e338:	1080800c 	andi	r2,r2,512
 800e33c:	103fbe26 	beq	r2,zero,800e238 <__alt_data_end+0xfc00e238>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e340:	e0bffd17 	ldw	r2,-12(fp)
 800e344:	1004d43a 	srli	r2,r2,16
 800e348:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e34c:	00001406 	br	800e3a0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e350:	e0bffc17 	ldw	r2,-16(fp)
 800e354:	e0fffb17 	ldw	r3,-20(fp)
 800e358:	18c00d17 	ldw	r3,52(r3)
 800e35c:	e13ffb17 	ldw	r4,-20(fp)
 800e360:	20c7883a 	add	r3,r4,r3
 800e364:	18c20e04 	addi	r3,r3,2104
 800e368:	18c00003 	ldbu	r3,0(r3)
 800e36c:	18c03fcc 	andi	r3,r3,255
 800e370:	18c0201c 	xori	r3,r3,128
 800e374:	18ffe004 	addi	r3,r3,-128
 800e378:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e37c:	e0bffb17 	ldw	r2,-20(fp)
 800e380:	10800d17 	ldw	r2,52(r2)
 800e384:	10800044 	addi	r2,r2,1
 800e388:	10c1ffcc 	andi	r3,r2,2047
 800e38c:	e0bffb17 	ldw	r2,-20(fp)
 800e390:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e394:	e0bffa17 	ldw	r2,-24(fp)
 800e398:	10bfffc4 	addi	r2,r2,-1
 800e39c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e3a0:	e0bffa17 	ldw	r2,-24(fp)
 800e3a4:	10000526 	beq	r2,zero,800e3bc <altera_avalon_jtag_uart_irq+0x1a8>
 800e3a8:	e0bffb17 	ldw	r2,-20(fp)
 800e3ac:	10c00d17 	ldw	r3,52(r2)
 800e3b0:	e0bffb17 	ldw	r2,-20(fp)
 800e3b4:	10800c17 	ldw	r2,48(r2)
 800e3b8:	18bfe51e 	bne	r3,r2,800e350 <__alt_data_end+0xfc00e350>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800e3bc:	e0bffa17 	ldw	r2,-24(fp)
 800e3c0:	103f9d26 	beq	r2,zero,800e238 <__alt_data_end+0xfc00e238>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e3c4:	e0bffb17 	ldw	r2,-20(fp)
 800e3c8:	10c00817 	ldw	r3,32(r2)
 800e3cc:	00bfff44 	movi	r2,-3
 800e3d0:	1886703a 	and	r3,r3,r2
 800e3d4:	e0bffb17 	ldw	r2,-20(fp)
 800e3d8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e3dc:	e0bffb17 	ldw	r2,-20(fp)
 800e3e0:	10800017 	ldw	r2,0(r2)
 800e3e4:	10800104 	addi	r2,r2,4
 800e3e8:	1007883a 	mov	r3,r2
 800e3ec:	e0bffb17 	ldw	r2,-20(fp)
 800e3f0:	10800817 	ldw	r2,32(r2)
 800e3f4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e3f8:	e0bffc17 	ldw	r2,-16(fp)
 800e3fc:	10800104 	addi	r2,r2,4
 800e400:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800e404:	003f8c06 	br	800e238 <__alt_data_end+0xfc00e238>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800e408:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 800e40c:	0001883a 	nop
 800e410:	e037883a 	mov	sp,fp
 800e414:	df000017 	ldw	fp,0(sp)
 800e418:	dec00104 	addi	sp,sp,4
 800e41c:	f800283a 	ret

0800e420 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e420:	defff804 	addi	sp,sp,-32
 800e424:	df000715 	stw	fp,28(sp)
 800e428:	df000704 	addi	fp,sp,28
 800e42c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e430:	e0bffb17 	ldw	r2,-20(fp)
 800e434:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e438:	e0bff917 	ldw	r2,-28(fp)
 800e43c:	10800017 	ldw	r2,0(r2)
 800e440:	10800104 	addi	r2,r2,4
 800e444:	10800037 	ldwio	r2,0(r2)
 800e448:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e44c:	e0bffa17 	ldw	r2,-24(fp)
 800e450:	1081000c 	andi	r2,r2,1024
 800e454:	10000b26 	beq	r2,zero,800e484 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e458:	e0bff917 	ldw	r2,-28(fp)
 800e45c:	10800017 	ldw	r2,0(r2)
 800e460:	10800104 	addi	r2,r2,4
 800e464:	1007883a 	mov	r3,r2
 800e468:	e0bff917 	ldw	r2,-28(fp)
 800e46c:	10800817 	ldw	r2,32(r2)
 800e470:	10810014 	ori	r2,r2,1024
 800e474:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e478:	e0bff917 	ldw	r2,-28(fp)
 800e47c:	10000915 	stw	zero,36(r2)
 800e480:	00000a06 	br	800e4ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e484:	e0bff917 	ldw	r2,-28(fp)
 800e488:	10c00917 	ldw	r3,36(r2)
 800e48c:	00a00034 	movhi	r2,32768
 800e490:	10bfff04 	addi	r2,r2,-4
 800e494:	10c00536 	bltu	r2,r3,800e4ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e498:	e0bff917 	ldw	r2,-28(fp)
 800e49c:	10800917 	ldw	r2,36(r2)
 800e4a0:	10c00044 	addi	r3,r2,1
 800e4a4:	e0bff917 	ldw	r2,-28(fp)
 800e4a8:	10c00915 	stw	r3,36(r2)
 800e4ac:	d0a6ec17 	ldw	r2,-25680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e4b0:	e037883a 	mov	sp,fp
 800e4b4:	df000017 	ldw	fp,0(sp)
 800e4b8:	dec00104 	addi	sp,sp,4
 800e4bc:	f800283a 	ret

0800e4c0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e4c0:	defffd04 	addi	sp,sp,-12
 800e4c4:	df000215 	stw	fp,8(sp)
 800e4c8:	df000204 	addi	fp,sp,8
 800e4cc:	e13ffe15 	stw	r4,-8(fp)
 800e4d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e4d4:	00000506 	br	800e4ec <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e4d8:	e0bfff17 	ldw	r2,-4(fp)
 800e4dc:	1090000c 	andi	r2,r2,16384
 800e4e0:	10000226 	beq	r2,zero,800e4ec <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e4e4:	00bffd44 	movi	r2,-11
 800e4e8:	00000b06 	br	800e518 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e4ec:	e0bffe17 	ldw	r2,-8(fp)
 800e4f0:	10c00d17 	ldw	r3,52(r2)
 800e4f4:	e0bffe17 	ldw	r2,-8(fp)
 800e4f8:	10800c17 	ldw	r2,48(r2)
 800e4fc:	18800526 	beq	r3,r2,800e514 <altera_avalon_jtag_uart_close+0x54>
 800e500:	e0bffe17 	ldw	r2,-8(fp)
 800e504:	10c00917 	ldw	r3,36(r2)
 800e508:	e0bffe17 	ldw	r2,-8(fp)
 800e50c:	10800117 	ldw	r2,4(r2)
 800e510:	18bff136 	bltu	r3,r2,800e4d8 <__alt_data_end+0xfc00e4d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800e514:	0005883a 	mov	r2,zero
}
 800e518:	e037883a 	mov	sp,fp
 800e51c:	df000017 	ldw	fp,0(sp)
 800e520:	dec00104 	addi	sp,sp,4
 800e524:	f800283a 	ret

0800e528 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e528:	defffa04 	addi	sp,sp,-24
 800e52c:	df000515 	stw	fp,20(sp)
 800e530:	df000504 	addi	fp,sp,20
 800e534:	e13ffd15 	stw	r4,-12(fp)
 800e538:	e17ffe15 	stw	r5,-8(fp)
 800e53c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800e540:	00bff9c4 	movi	r2,-25
 800e544:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800e548:	e0bffe17 	ldw	r2,-8(fp)
 800e54c:	10da8060 	cmpeqi	r3,r2,27137
 800e550:	1800031e 	bne	r3,zero,800e560 <altera_avalon_jtag_uart_ioctl+0x38>
 800e554:	109a80a0 	cmpeqi	r2,r2,27138
 800e558:	1000181e 	bne	r2,zero,800e5bc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 800e55c:	00002906 	br	800e604 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800e560:	e0bffd17 	ldw	r2,-12(fp)
 800e564:	10c00117 	ldw	r3,4(r2)
 800e568:	00a00034 	movhi	r2,32768
 800e56c:	10bfffc4 	addi	r2,r2,-1
 800e570:	18802126 	beq	r3,r2,800e5f8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 800e574:	e0bfff17 	ldw	r2,-4(fp)
 800e578:	10800017 	ldw	r2,0(r2)
 800e57c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e580:	e0bffc17 	ldw	r2,-16(fp)
 800e584:	10800090 	cmplti	r2,r2,2
 800e588:	1000061e 	bne	r2,zero,800e5a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e58c:	e0fffc17 	ldw	r3,-16(fp)
 800e590:	00a00034 	movhi	r2,32768
 800e594:	10bfffc4 	addi	r2,r2,-1
 800e598:	18800226 	beq	r3,r2,800e5a4 <altera_avalon_jtag_uart_ioctl+0x7c>
 800e59c:	e0bffc17 	ldw	r2,-16(fp)
 800e5a0:	00000206 	br	800e5ac <altera_avalon_jtag_uart_ioctl+0x84>
 800e5a4:	00a00034 	movhi	r2,32768
 800e5a8:	10bfff84 	addi	r2,r2,-2
 800e5ac:	e0fffd17 	ldw	r3,-12(fp)
 800e5b0:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e5b4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e5b8:	00000f06 	br	800e5f8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800e5bc:	e0bffd17 	ldw	r2,-12(fp)
 800e5c0:	10c00117 	ldw	r3,4(r2)
 800e5c4:	00a00034 	movhi	r2,32768
 800e5c8:	10bfffc4 	addi	r2,r2,-1
 800e5cc:	18800c26 	beq	r3,r2,800e600 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e5d0:	e0bffd17 	ldw	r2,-12(fp)
 800e5d4:	10c00917 	ldw	r3,36(r2)
 800e5d8:	e0bffd17 	ldw	r2,-12(fp)
 800e5dc:	10800117 	ldw	r2,4(r2)
 800e5e0:	1885803a 	cmpltu	r2,r3,r2
 800e5e4:	10c03fcc 	andi	r3,r2,255
 800e5e8:	e0bfff17 	ldw	r2,-4(fp)
 800e5ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e5f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800e5f4:	00000206 	br	800e600 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800e5f8:	0001883a 	nop
 800e5fc:	00000106 	br	800e604 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 800e600:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800e604:	e0bffb17 	ldw	r2,-20(fp)
}
 800e608:	e037883a 	mov	sp,fp
 800e60c:	df000017 	ldw	fp,0(sp)
 800e610:	dec00104 	addi	sp,sp,4
 800e614:	f800283a 	ret

0800e618 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e618:	defff304 	addi	sp,sp,-52
 800e61c:	dfc00c15 	stw	ra,48(sp)
 800e620:	df000b15 	stw	fp,44(sp)
 800e624:	df000b04 	addi	fp,sp,44
 800e628:	e13ffc15 	stw	r4,-16(fp)
 800e62c:	e17ffd15 	stw	r5,-12(fp)
 800e630:	e1bffe15 	stw	r6,-8(fp)
 800e634:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800e638:	e0bffd17 	ldw	r2,-12(fp)
 800e63c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e640:	00004706 	br	800e760 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e644:	e0bffc17 	ldw	r2,-16(fp)
 800e648:	10800a17 	ldw	r2,40(r2)
 800e64c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800e650:	e0bffc17 	ldw	r2,-16(fp)
 800e654:	10800b17 	ldw	r2,44(r2)
 800e658:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800e65c:	e0fff717 	ldw	r3,-36(fp)
 800e660:	e0bff817 	ldw	r2,-32(fp)
 800e664:	18800536 	bltu	r3,r2,800e67c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e668:	e0fff717 	ldw	r3,-36(fp)
 800e66c:	e0bff817 	ldw	r2,-32(fp)
 800e670:	1885c83a 	sub	r2,r3,r2
 800e674:	e0bff615 	stw	r2,-40(fp)
 800e678:	00000406 	br	800e68c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e67c:	00c20004 	movi	r3,2048
 800e680:	e0bff817 	ldw	r2,-32(fp)
 800e684:	1885c83a 	sub	r2,r3,r2
 800e688:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e68c:	e0bff617 	ldw	r2,-40(fp)
 800e690:	10001e26 	beq	r2,zero,800e70c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800e694:	e0fffe17 	ldw	r3,-8(fp)
 800e698:	e0bff617 	ldw	r2,-40(fp)
 800e69c:	1880022e 	bgeu	r3,r2,800e6a8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800e6a0:	e0bffe17 	ldw	r2,-8(fp)
 800e6a4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e6a8:	e0bffc17 	ldw	r2,-16(fp)
 800e6ac:	10c00e04 	addi	r3,r2,56
 800e6b0:	e0bff817 	ldw	r2,-32(fp)
 800e6b4:	1885883a 	add	r2,r3,r2
 800e6b8:	e1bff617 	ldw	r6,-40(fp)
 800e6bc:	100b883a 	mov	r5,r2
 800e6c0:	e13ff517 	ldw	r4,-44(fp)
 800e6c4:	80062380 	call	8006238 <memcpy>
      ptr   += n;
 800e6c8:	e0fff517 	ldw	r3,-44(fp)
 800e6cc:	e0bff617 	ldw	r2,-40(fp)
 800e6d0:	1885883a 	add	r2,r3,r2
 800e6d4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800e6d8:	e0fffe17 	ldw	r3,-8(fp)
 800e6dc:	e0bff617 	ldw	r2,-40(fp)
 800e6e0:	1885c83a 	sub	r2,r3,r2
 800e6e4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e6e8:	e0fff817 	ldw	r3,-32(fp)
 800e6ec:	e0bff617 	ldw	r2,-40(fp)
 800e6f0:	1885883a 	add	r2,r3,r2
 800e6f4:	10c1ffcc 	andi	r3,r2,2047
 800e6f8:	e0bffc17 	ldw	r2,-16(fp)
 800e6fc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e700:	e0bffe17 	ldw	r2,-8(fp)
 800e704:	00bfcf16 	blt	zero,r2,800e644 <__alt_data_end+0xfc00e644>
 800e708:	00000106 	br	800e710 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 800e70c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 800e710:	e0fff517 	ldw	r3,-44(fp)
 800e714:	e0bffd17 	ldw	r2,-12(fp)
 800e718:	1880141e 	bne	r3,r2,800e76c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e71c:	e0bfff17 	ldw	r2,-4(fp)
 800e720:	1090000c 	andi	r2,r2,16384
 800e724:	1000131e 	bne	r2,zero,800e774 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e728:	0001883a 	nop
 800e72c:	e0bffc17 	ldw	r2,-16(fp)
 800e730:	10c00a17 	ldw	r3,40(r2)
 800e734:	e0bff717 	ldw	r2,-36(fp)
 800e738:	1880051e 	bne	r3,r2,800e750 <altera_avalon_jtag_uart_read+0x138>
 800e73c:	e0bffc17 	ldw	r2,-16(fp)
 800e740:	10c00917 	ldw	r3,36(r2)
 800e744:	e0bffc17 	ldw	r2,-16(fp)
 800e748:	10800117 	ldw	r2,4(r2)
 800e74c:	18bff736 	bltu	r3,r2,800e72c <__alt_data_end+0xfc00e72c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e750:	e0bffc17 	ldw	r2,-16(fp)
 800e754:	10c00a17 	ldw	r3,40(r2)
 800e758:	e0bff717 	ldw	r2,-36(fp)
 800e75c:	18800726 	beq	r3,r2,800e77c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e760:	e0bffe17 	ldw	r2,-8(fp)
 800e764:	00bfb716 	blt	zero,r2,800e644 <__alt_data_end+0xfc00e644>
 800e768:	00000506 	br	800e780 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 800e76c:	0001883a 	nop
 800e770:	00000306 	br	800e780 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 800e774:	0001883a 	nop
 800e778:	00000106 	br	800e780 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 800e77c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e780:	e0fff517 	ldw	r3,-44(fp)
 800e784:	e0bffd17 	ldw	r2,-12(fp)
 800e788:	18801826 	beq	r3,r2,800e7ec <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e78c:	0005303a 	rdctl	r2,status
 800e790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e794:	e0fffb17 	ldw	r3,-20(fp)
 800e798:	00bfff84 	movi	r2,-2
 800e79c:	1884703a 	and	r2,r3,r2
 800e7a0:	1001703a 	wrctl	status,r2
  
  return context;
 800e7a4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e7a8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e7ac:	e0bffc17 	ldw	r2,-16(fp)
 800e7b0:	10800817 	ldw	r2,32(r2)
 800e7b4:	10c00054 	ori	r3,r2,1
 800e7b8:	e0bffc17 	ldw	r2,-16(fp)
 800e7bc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e7c0:	e0bffc17 	ldw	r2,-16(fp)
 800e7c4:	10800017 	ldw	r2,0(r2)
 800e7c8:	10800104 	addi	r2,r2,4
 800e7cc:	1007883a 	mov	r3,r2
 800e7d0:	e0bffc17 	ldw	r2,-16(fp)
 800e7d4:	10800817 	ldw	r2,32(r2)
 800e7d8:	18800035 	stwio	r2,0(r3)
 800e7dc:	e0bffa17 	ldw	r2,-24(fp)
 800e7e0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e7e4:	e0bff917 	ldw	r2,-28(fp)
 800e7e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e7ec:	e0fff517 	ldw	r3,-44(fp)
 800e7f0:	e0bffd17 	ldw	r2,-12(fp)
 800e7f4:	18800426 	beq	r3,r2,800e808 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800e7f8:	e0fff517 	ldw	r3,-44(fp)
 800e7fc:	e0bffd17 	ldw	r2,-12(fp)
 800e800:	1885c83a 	sub	r2,r3,r2
 800e804:	00000606 	br	800e820 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800e808:	e0bfff17 	ldw	r2,-4(fp)
 800e80c:	1090000c 	andi	r2,r2,16384
 800e810:	10000226 	beq	r2,zero,800e81c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800e814:	00bffd44 	movi	r2,-11
 800e818:	00000106 	br	800e820 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800e81c:	00bffec4 	movi	r2,-5
}
 800e820:	e037883a 	mov	sp,fp
 800e824:	dfc00117 	ldw	ra,4(sp)
 800e828:	df000017 	ldw	fp,0(sp)
 800e82c:	dec00204 	addi	sp,sp,8
 800e830:	f800283a 	ret

0800e834 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e834:	defff304 	addi	sp,sp,-52
 800e838:	dfc00c15 	stw	ra,48(sp)
 800e83c:	df000b15 	stw	fp,44(sp)
 800e840:	df000b04 	addi	fp,sp,44
 800e844:	e13ffc15 	stw	r4,-16(fp)
 800e848:	e17ffd15 	stw	r5,-12(fp)
 800e84c:	e1bffe15 	stw	r6,-8(fp)
 800e850:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e854:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e858:	e0bffd17 	ldw	r2,-12(fp)
 800e85c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e860:	00003706 	br	800e940 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e864:	e0bffc17 	ldw	r2,-16(fp)
 800e868:	10800c17 	ldw	r2,48(r2)
 800e86c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 800e870:	e0bffc17 	ldw	r2,-16(fp)
 800e874:	10800d17 	ldw	r2,52(r2)
 800e878:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800e87c:	e0fff917 	ldw	r3,-28(fp)
 800e880:	e0bff517 	ldw	r2,-44(fp)
 800e884:	1880062e 	bgeu	r3,r2,800e8a0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e888:	e0fff517 	ldw	r3,-44(fp)
 800e88c:	e0bff917 	ldw	r2,-28(fp)
 800e890:	1885c83a 	sub	r2,r3,r2
 800e894:	10bfffc4 	addi	r2,r2,-1
 800e898:	e0bff615 	stw	r2,-40(fp)
 800e89c:	00000b06 	br	800e8cc <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e8a0:	e0bff517 	ldw	r2,-44(fp)
 800e8a4:	10000526 	beq	r2,zero,800e8bc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e8a8:	00c20004 	movi	r3,2048
 800e8ac:	e0bff917 	ldw	r2,-28(fp)
 800e8b0:	1885c83a 	sub	r2,r3,r2
 800e8b4:	e0bff615 	stw	r2,-40(fp)
 800e8b8:	00000406 	br	800e8cc <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e8bc:	00c1ffc4 	movi	r3,2047
 800e8c0:	e0bff917 	ldw	r2,-28(fp)
 800e8c4:	1885c83a 	sub	r2,r3,r2
 800e8c8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800e8cc:	e0bff617 	ldw	r2,-40(fp)
 800e8d0:	10001e26 	beq	r2,zero,800e94c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800e8d4:	e0fffe17 	ldw	r3,-8(fp)
 800e8d8:	e0bff617 	ldw	r2,-40(fp)
 800e8dc:	1880022e 	bgeu	r3,r2,800e8e8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800e8e0:	e0bffe17 	ldw	r2,-8(fp)
 800e8e4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e8e8:	e0bffc17 	ldw	r2,-16(fp)
 800e8ec:	10c20e04 	addi	r3,r2,2104
 800e8f0:	e0bff917 	ldw	r2,-28(fp)
 800e8f4:	1885883a 	add	r2,r3,r2
 800e8f8:	e1bff617 	ldw	r6,-40(fp)
 800e8fc:	e17ffd17 	ldw	r5,-12(fp)
 800e900:	1009883a 	mov	r4,r2
 800e904:	80062380 	call	8006238 <memcpy>
      ptr   += n;
 800e908:	e0fffd17 	ldw	r3,-12(fp)
 800e90c:	e0bff617 	ldw	r2,-40(fp)
 800e910:	1885883a 	add	r2,r3,r2
 800e914:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800e918:	e0fffe17 	ldw	r3,-8(fp)
 800e91c:	e0bff617 	ldw	r2,-40(fp)
 800e920:	1885c83a 	sub	r2,r3,r2
 800e924:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e928:	e0fff917 	ldw	r3,-28(fp)
 800e92c:	e0bff617 	ldw	r2,-40(fp)
 800e930:	1885883a 	add	r2,r3,r2
 800e934:	10c1ffcc 	andi	r3,r2,2047
 800e938:	e0bffc17 	ldw	r2,-16(fp)
 800e93c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e940:	e0bffe17 	ldw	r2,-8(fp)
 800e944:	00bfc716 	blt	zero,r2,800e864 <__alt_data_end+0xfc00e864>
 800e948:	00000106 	br	800e950 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 800e94c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e950:	0005303a 	rdctl	r2,status
 800e954:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e958:	e0fffb17 	ldw	r3,-20(fp)
 800e95c:	00bfff84 	movi	r2,-2
 800e960:	1884703a 	and	r2,r3,r2
 800e964:	1001703a 	wrctl	status,r2
  
  return context;
 800e968:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e96c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e970:	e0bffc17 	ldw	r2,-16(fp)
 800e974:	10800817 	ldw	r2,32(r2)
 800e978:	10c00094 	ori	r3,r2,2
 800e97c:	e0bffc17 	ldw	r2,-16(fp)
 800e980:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e984:	e0bffc17 	ldw	r2,-16(fp)
 800e988:	10800017 	ldw	r2,0(r2)
 800e98c:	10800104 	addi	r2,r2,4
 800e990:	1007883a 	mov	r3,r2
 800e994:	e0bffc17 	ldw	r2,-16(fp)
 800e998:	10800817 	ldw	r2,32(r2)
 800e99c:	18800035 	stwio	r2,0(r3)
 800e9a0:	e0bffa17 	ldw	r2,-24(fp)
 800e9a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e9a8:	e0bff817 	ldw	r2,-32(fp)
 800e9ac:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e9b0:	e0bffe17 	ldw	r2,-8(fp)
 800e9b4:	0080100e 	bge	zero,r2,800e9f8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800e9b8:	e0bfff17 	ldw	r2,-4(fp)
 800e9bc:	1090000c 	andi	r2,r2,16384
 800e9c0:	1000101e 	bne	r2,zero,800ea04 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e9c4:	0001883a 	nop
 800e9c8:	e0bffc17 	ldw	r2,-16(fp)
 800e9cc:	10c00d17 	ldw	r3,52(r2)
 800e9d0:	e0bff517 	ldw	r2,-44(fp)
 800e9d4:	1880051e 	bne	r3,r2,800e9ec <altera_avalon_jtag_uart_write+0x1b8>
 800e9d8:	e0bffc17 	ldw	r2,-16(fp)
 800e9dc:	10c00917 	ldw	r3,36(r2)
 800e9e0:	e0bffc17 	ldw	r2,-16(fp)
 800e9e4:	10800117 	ldw	r2,4(r2)
 800e9e8:	18bff736 	bltu	r3,r2,800e9c8 <__alt_data_end+0xfc00e9c8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e9ec:	e0bffc17 	ldw	r2,-16(fp)
 800e9f0:	10800917 	ldw	r2,36(r2)
 800e9f4:	1000051e 	bne	r2,zero,800ea0c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800e9f8:	e0bffe17 	ldw	r2,-8(fp)
 800e9fc:	00bfd016 	blt	zero,r2,800e940 <__alt_data_end+0xfc00e940>
 800ea00:	00000306 	br	800ea10 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 800ea04:	0001883a 	nop
 800ea08:	00000106 	br	800ea10 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 800ea0c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800ea10:	e0fffd17 	ldw	r3,-12(fp)
 800ea14:	e0bff717 	ldw	r2,-36(fp)
 800ea18:	18800426 	beq	r3,r2,800ea2c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800ea1c:	e0fffd17 	ldw	r3,-12(fp)
 800ea20:	e0bff717 	ldw	r2,-36(fp)
 800ea24:	1885c83a 	sub	r2,r3,r2
 800ea28:	00000606 	br	800ea44 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800ea2c:	e0bfff17 	ldw	r2,-4(fp)
 800ea30:	1090000c 	andi	r2,r2,16384
 800ea34:	10000226 	beq	r2,zero,800ea40 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800ea38:	00bffd44 	movi	r2,-11
 800ea3c:	00000106 	br	800ea44 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800ea40:	00bffec4 	movi	r2,-5
}
 800ea44:	e037883a 	mov	sp,fp
 800ea48:	dfc00117 	ldw	ra,4(sp)
 800ea4c:	df000017 	ldw	fp,0(sp)
 800ea50:	dec00204 	addi	sp,sp,8
 800ea54:	f800283a 	ret

0800ea58 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800ea58:	defffa04 	addi	sp,sp,-24
 800ea5c:	dfc00515 	stw	ra,20(sp)
 800ea60:	df000415 	stw	fp,16(sp)
 800ea64:	df000404 	addi	fp,sp,16
 800ea68:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800ea6c:	0007883a 	mov	r3,zero
 800ea70:	e0bfff17 	ldw	r2,-4(fp)
 800ea74:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800ea78:	e0bfff17 	ldw	r2,-4(fp)
 800ea7c:	10800104 	addi	r2,r2,4
 800ea80:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea84:	0005303a 	rdctl	r2,status
 800ea88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea8c:	e0fffd17 	ldw	r3,-12(fp)
 800ea90:	00bfff84 	movi	r2,-2
 800ea94:	1884703a 	and	r2,r3,r2
 800ea98:	1001703a 	wrctl	status,r2
  
  return context;
 800ea9c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800eaa0:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800eaa4:	800f6d00 	call	800f6d0 <alt_tick>
 800eaa8:	e0bffc17 	ldw	r2,-16(fp)
 800eaac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eab0:	e0bffe17 	ldw	r2,-8(fp)
 800eab4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800eab8:	0001883a 	nop
 800eabc:	e037883a 	mov	sp,fp
 800eac0:	dfc00117 	ldw	ra,4(sp)
 800eac4:	df000017 	ldw	fp,0(sp)
 800eac8:	dec00204 	addi	sp,sp,8
 800eacc:	f800283a 	ret

0800ead0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800ead0:	defff804 	addi	sp,sp,-32
 800ead4:	dfc00715 	stw	ra,28(sp)
 800ead8:	df000615 	stw	fp,24(sp)
 800eadc:	df000604 	addi	fp,sp,24
 800eae0:	e13ffc15 	stw	r4,-16(fp)
 800eae4:	e17ffd15 	stw	r5,-12(fp)
 800eae8:	e1bffe15 	stw	r6,-8(fp)
 800eaec:	e1ffff15 	stw	r7,-4(fp)
 800eaf0:	e0bfff17 	ldw	r2,-4(fp)
 800eaf4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800eaf8:	d0a6ec17 	ldw	r2,-25680(gp)
 800eafc:	1000021e 	bne	r2,zero,800eb08 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800eb00:	e0bffb17 	ldw	r2,-20(fp)
 800eb04:	d0a6ec15 	stw	r2,-25680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800eb08:	e0bffc17 	ldw	r2,-16(fp)
 800eb0c:	10800104 	addi	r2,r2,4
 800eb10:	00c001c4 	movi	r3,7
 800eb14:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800eb18:	d8000015 	stw	zero,0(sp)
 800eb1c:	e1fffc17 	ldw	r7,-16(fp)
 800eb20:	01820074 	movhi	r6,2049
 800eb24:	31ba9604 	addi	r6,r6,-5544
 800eb28:	e17ffe17 	ldw	r5,-8(fp)
 800eb2c:	e13ffd17 	ldw	r4,-12(fp)
 800eb30:	800efb00 	call	800efb0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800eb34:	0001883a 	nop
 800eb38:	e037883a 	mov	sp,fp
 800eb3c:	dfc00117 	ldw	ra,4(sp)
 800eb40:	df000017 	ldw	fp,0(sp)
 800eb44:	dec00204 	addi	sp,sp,8
 800eb48:	f800283a 	ret

0800eb4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800eb4c:	defff504 	addi	sp,sp,-44
 800eb50:	df000a15 	stw	fp,40(sp)
 800eb54:	df000a04 	addi	fp,sp,40
 800eb58:	e13ffc15 	stw	r4,-16(fp)
 800eb5c:	e17ffd15 	stw	r5,-12(fp)
 800eb60:	e1bffe15 	stw	r6,-8(fp)
 800eb64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800eb68:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800eb6c:	d0a6ec17 	ldw	r2,-25680(gp)
  
  if (alt_ticks_per_second ())
 800eb70:	10003c26 	beq	r2,zero,800ec64 <alt_alarm_start+0x118>
  {
    if (alarm)
 800eb74:	e0bffc17 	ldw	r2,-16(fp)
 800eb78:	10003826 	beq	r2,zero,800ec5c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800eb7c:	e0bffc17 	ldw	r2,-16(fp)
 800eb80:	e0fffe17 	ldw	r3,-8(fp)
 800eb84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800eb88:	e0bffc17 	ldw	r2,-16(fp)
 800eb8c:	e0ffff17 	ldw	r3,-4(fp)
 800eb90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eb94:	0005303a 	rdctl	r2,status
 800eb98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eb9c:	e0fff917 	ldw	r3,-28(fp)
 800eba0:	00bfff84 	movi	r2,-2
 800eba4:	1884703a 	and	r2,r3,r2
 800eba8:	1001703a 	wrctl	status,r2
  
  return context;
 800ebac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 800ebb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800ebb4:	d0a6ed17 	ldw	r2,-25676(gp)
      
      current_nticks = alt_nticks();
 800ebb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800ebbc:	e0fffd17 	ldw	r3,-12(fp)
 800ebc0:	e0bff617 	ldw	r2,-40(fp)
 800ebc4:	1885883a 	add	r2,r3,r2
 800ebc8:	10c00044 	addi	r3,r2,1
 800ebcc:	e0bffc17 	ldw	r2,-16(fp)
 800ebd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800ebd4:	e0bffc17 	ldw	r2,-16(fp)
 800ebd8:	10c00217 	ldw	r3,8(r2)
 800ebdc:	e0bff617 	ldw	r2,-40(fp)
 800ebe0:	1880042e 	bgeu	r3,r2,800ebf4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800ebe4:	e0bffc17 	ldw	r2,-16(fp)
 800ebe8:	00c00044 	movi	r3,1
 800ebec:	10c00405 	stb	r3,16(r2)
 800ebf0:	00000206 	br	800ebfc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800ebf4:	e0bffc17 	ldw	r2,-16(fp)
 800ebf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800ebfc:	e0bffc17 	ldw	r2,-16(fp)
 800ec00:	d0e01904 	addi	r3,gp,-32668
 800ec04:	e0fffa15 	stw	r3,-24(fp)
 800ec08:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800ec0c:	e0bffb17 	ldw	r2,-20(fp)
 800ec10:	e0fffa17 	ldw	r3,-24(fp)
 800ec14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ec18:	e0bffa17 	ldw	r2,-24(fp)
 800ec1c:	10c00017 	ldw	r3,0(r2)
 800ec20:	e0bffb17 	ldw	r2,-20(fp)
 800ec24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800ec28:	e0bffa17 	ldw	r2,-24(fp)
 800ec2c:	10800017 	ldw	r2,0(r2)
 800ec30:	e0fffb17 	ldw	r3,-20(fp)
 800ec34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ec38:	e0bffa17 	ldw	r2,-24(fp)
 800ec3c:	e0fffb17 	ldw	r3,-20(fp)
 800ec40:	10c00015 	stw	r3,0(r2)
 800ec44:	e0bff817 	ldw	r2,-32(fp)
 800ec48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ec4c:	e0bff717 	ldw	r2,-36(fp)
 800ec50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800ec54:	0005883a 	mov	r2,zero
 800ec58:	00000306 	br	800ec68 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800ec5c:	00bffa84 	movi	r2,-22
 800ec60:	00000106 	br	800ec68 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800ec64:	00bfde84 	movi	r2,-134
  }
}
 800ec68:	e037883a 	mov	sp,fp
 800ec6c:	df000017 	ldw	fp,0(sp)
 800ec70:	dec00104 	addi	sp,sp,4
 800ec74:	f800283a 	ret

0800ec78 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800ec78:	defffa04 	addi	sp,sp,-24
 800ec7c:	dfc00515 	stw	ra,20(sp)
 800ec80:	df000415 	stw	fp,16(sp)
 800ec84:	df000404 	addi	fp,sp,16
 800ec88:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800ec8c:	00800244 	movi	r2,9
 800ec90:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800ec94:	014003f4 	movhi	r5,15
 800ec98:	29509004 	addi	r5,r5,16960
 800ec9c:	e13ffd17 	ldw	r4,-12(fp)
 800eca0:	800061c0 	call	800061c <__mulsi3>
 800eca4:	100b883a 	mov	r5,r2
 800eca8:	0100bef4 	movhi	r4,763
 800ecac:	213c2004 	addi	r4,r4,-3968
 800ecb0:	800abfc0 	call	800abfc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 800ecb4:	100b883a 	mov	r5,r2
 800ecb8:	01200034 	movhi	r4,32768
 800ecbc:	213fffc4 	addi	r4,r4,-1
 800ecc0:	800abfc0 	call	800abfc <__udivsi3>
 800ecc4:	100b883a 	mov	r5,r2
 800ecc8:	e13fff17 	ldw	r4,-4(fp)
 800eccc:	800abfc0 	call	800abfc <__udivsi3>
 800ecd0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 800ecd4:	e0bffe17 	ldw	r2,-8(fp)
 800ecd8:	10002a26 	beq	r2,zero,800ed84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800ecdc:	e03ffc15 	stw	zero,-16(fp)
 800ece0:	00001706 	br	800ed40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ece4:	00a00034 	movhi	r2,32768
 800ece8:	10bfffc4 	addi	r2,r2,-1
 800ecec:	10bfffc4 	addi	r2,r2,-1
 800ecf0:	103ffe1e 	bne	r2,zero,800ecec <__alt_data_end+0xfc00ecec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ecf4:	014003f4 	movhi	r5,15
 800ecf8:	29509004 	addi	r5,r5,16960
 800ecfc:	e13ffd17 	ldw	r4,-12(fp)
 800ed00:	800061c0 	call	800061c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800ed04:	100b883a 	mov	r5,r2
 800ed08:	0100bef4 	movhi	r4,763
 800ed0c:	213c2004 	addi	r4,r4,-3968
 800ed10:	800abfc0 	call	800abfc <__udivsi3>
 800ed14:	100b883a 	mov	r5,r2
 800ed18:	01200034 	movhi	r4,32768
 800ed1c:	213fffc4 	addi	r4,r4,-1
 800ed20:	800abfc0 	call	800abfc <__udivsi3>
 800ed24:	1007883a 	mov	r3,r2
 800ed28:	e0bfff17 	ldw	r2,-4(fp)
 800ed2c:	10c5c83a 	sub	r2,r2,r3
 800ed30:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 800ed34:	e0bffc17 	ldw	r2,-16(fp)
 800ed38:	10800044 	addi	r2,r2,1
 800ed3c:	e0bffc15 	stw	r2,-16(fp)
 800ed40:	e0fffc17 	ldw	r3,-16(fp)
 800ed44:	e0bffe17 	ldw	r2,-8(fp)
 800ed48:	18bfe616 	blt	r3,r2,800ece4 <__alt_data_end+0xfc00ece4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ed4c:	014003f4 	movhi	r5,15
 800ed50:	29509004 	addi	r5,r5,16960
 800ed54:	e13ffd17 	ldw	r4,-12(fp)
 800ed58:	800061c0 	call	800061c <__mulsi3>
 800ed5c:	100b883a 	mov	r5,r2
 800ed60:	0100bef4 	movhi	r4,763
 800ed64:	213c2004 	addi	r4,r4,-3968
 800ed68:	800abfc0 	call	800abfc <__udivsi3>
 800ed6c:	e17fff17 	ldw	r5,-4(fp)
 800ed70:	1009883a 	mov	r4,r2
 800ed74:	800061c0 	call	800061c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800ed78:	10bfffc4 	addi	r2,r2,-1
 800ed7c:	103ffe1e 	bne	r2,zero,800ed78 <__alt_data_end+0xfc00ed78>
 800ed80:	00000d06 	br	800edb8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ed84:	014003f4 	movhi	r5,15
 800ed88:	29509004 	addi	r5,r5,16960
 800ed8c:	e13ffd17 	ldw	r4,-12(fp)
 800ed90:	800061c0 	call	800061c <__mulsi3>
 800ed94:	100b883a 	mov	r5,r2
 800ed98:	0100bef4 	movhi	r4,763
 800ed9c:	213c2004 	addi	r4,r4,-3968
 800eda0:	800abfc0 	call	800abfc <__udivsi3>
 800eda4:	e17fff17 	ldw	r5,-4(fp)
 800eda8:	1009883a 	mov	r4,r2
 800edac:	800061c0 	call	800061c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 800edb0:	10bfffc4 	addi	r2,r2,-1
 800edb4:	00bffe16 	blt	zero,r2,800edb0 <__alt_data_end+0xfc00edb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800edb8:	0005883a 	mov	r2,zero
}
 800edbc:	e037883a 	mov	sp,fp
 800edc0:	dfc00117 	ldw	ra,4(sp)
 800edc4:	df000017 	ldw	fp,0(sp)
 800edc8:	dec00204 	addi	sp,sp,8
 800edcc:	f800283a 	ret

0800edd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800edd0:	deffff04 	addi	sp,sp,-4
 800edd4:	df000015 	stw	fp,0(sp)
 800edd8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800eddc:	0001883a 	nop
 800ede0:	e037883a 	mov	sp,fp
 800ede4:	df000017 	ldw	fp,0(sp)
 800ede8:	dec00104 	addi	sp,sp,4
 800edec:	f800283a 	ret

0800edf0 <alt_get_errno>:
 800edf0:	defffe04 	addi	sp,sp,-8
 800edf4:	dfc00115 	stw	ra,4(sp)
 800edf8:	df000015 	stw	fp,0(sp)
 800edfc:	d839883a 	mov	fp,sp
 800ee00:	d0a01617 	ldw	r2,-32680(gp)
 800ee04:	10000326 	beq	r2,zero,800ee14 <alt_get_errno+0x24>
 800ee08:	d0a01617 	ldw	r2,-32680(gp)
 800ee0c:	103ee83a 	callr	r2
 800ee10:	00000106 	br	800ee18 <alt_get_errno+0x28>
 800ee14:	d0a6e704 	addi	r2,gp,-25700
 800ee18:	e037883a 	mov	sp,fp
 800ee1c:	dfc00117 	ldw	ra,4(sp)
 800ee20:	df000017 	ldw	fp,0(sp)
 800ee24:	dec00204 	addi	sp,sp,8
 800ee28:	f800283a 	ret

0800ee2c <alt_dev_llist_insert>:
 800ee2c:	defffa04 	addi	sp,sp,-24
 800ee30:	dfc00515 	stw	ra,20(sp)
 800ee34:	df000415 	stw	fp,16(sp)
 800ee38:	df000404 	addi	fp,sp,16
 800ee3c:	e13ffe15 	stw	r4,-8(fp)
 800ee40:	e17fff15 	stw	r5,-4(fp)
 800ee44:	e0bffe17 	ldw	r2,-8(fp)
 800ee48:	10000326 	beq	r2,zero,800ee58 <alt_dev_llist_insert+0x2c>
 800ee4c:	e0bffe17 	ldw	r2,-8(fp)
 800ee50:	10800217 	ldw	r2,8(r2)
 800ee54:	1000061e 	bne	r2,zero,800ee70 <alt_dev_llist_insert+0x44>
 800ee58:	800edf00 	call	800edf0 <alt_get_errno>
 800ee5c:	1007883a 	mov	r3,r2
 800ee60:	00800584 	movi	r2,22
 800ee64:	18800015 	stw	r2,0(r3)
 800ee68:	00bffa84 	movi	r2,-22
 800ee6c:	00001306 	br	800eebc <alt_dev_llist_insert+0x90>
 800ee70:	e0bffe17 	ldw	r2,-8(fp)
 800ee74:	e0ffff17 	ldw	r3,-4(fp)
 800ee78:	e0fffc15 	stw	r3,-16(fp)
 800ee7c:	e0bffd15 	stw	r2,-12(fp)
 800ee80:	e0bffd17 	ldw	r2,-12(fp)
 800ee84:	e0fffc17 	ldw	r3,-16(fp)
 800ee88:	10c00115 	stw	r3,4(r2)
 800ee8c:	e0bffc17 	ldw	r2,-16(fp)
 800ee90:	10c00017 	ldw	r3,0(r2)
 800ee94:	e0bffd17 	ldw	r2,-12(fp)
 800ee98:	10c00015 	stw	r3,0(r2)
 800ee9c:	e0bffc17 	ldw	r2,-16(fp)
 800eea0:	10800017 	ldw	r2,0(r2)
 800eea4:	e0fffd17 	ldw	r3,-12(fp)
 800eea8:	10c00115 	stw	r3,4(r2)
 800eeac:	e0bffc17 	ldw	r2,-16(fp)
 800eeb0:	e0fffd17 	ldw	r3,-12(fp)
 800eeb4:	10c00015 	stw	r3,0(r2)
 800eeb8:	0005883a 	mov	r2,zero
 800eebc:	e037883a 	mov	sp,fp
 800eec0:	dfc00117 	ldw	ra,4(sp)
 800eec4:	df000017 	ldw	fp,0(sp)
 800eec8:	dec00204 	addi	sp,sp,8
 800eecc:	f800283a 	ret

0800eed0 <_do_ctors>:
 800eed0:	defffd04 	addi	sp,sp,-12
 800eed4:	dfc00215 	stw	ra,8(sp)
 800eed8:	df000115 	stw	fp,4(sp)
 800eedc:	df000104 	addi	fp,sp,4
 800eee0:	00820074 	movhi	r2,2049
 800eee4:	10bfa104 	addi	r2,r2,-380
 800eee8:	e0bfff15 	stw	r2,-4(fp)
 800eeec:	00000606 	br	800ef08 <_do_ctors+0x38>
 800eef0:	e0bfff17 	ldw	r2,-4(fp)
 800eef4:	10800017 	ldw	r2,0(r2)
 800eef8:	103ee83a 	callr	r2
 800eefc:	e0bfff17 	ldw	r2,-4(fp)
 800ef00:	10bfff04 	addi	r2,r2,-4
 800ef04:	e0bfff15 	stw	r2,-4(fp)
 800ef08:	e0ffff17 	ldw	r3,-4(fp)
 800ef0c:	00820074 	movhi	r2,2049
 800ef10:	10bfa204 	addi	r2,r2,-376
 800ef14:	18bff62e 	bgeu	r3,r2,800eef0 <__alt_data_end+0xfc00eef0>
 800ef18:	0001883a 	nop
 800ef1c:	e037883a 	mov	sp,fp
 800ef20:	dfc00117 	ldw	ra,4(sp)
 800ef24:	df000017 	ldw	fp,0(sp)
 800ef28:	dec00204 	addi	sp,sp,8
 800ef2c:	f800283a 	ret

0800ef30 <_do_dtors>:
 800ef30:	defffd04 	addi	sp,sp,-12
 800ef34:	dfc00215 	stw	ra,8(sp)
 800ef38:	df000115 	stw	fp,4(sp)
 800ef3c:	df000104 	addi	fp,sp,4
 800ef40:	00820074 	movhi	r2,2049
 800ef44:	10bfa104 	addi	r2,r2,-380
 800ef48:	e0bfff15 	stw	r2,-4(fp)
 800ef4c:	00000606 	br	800ef68 <_do_dtors+0x38>
 800ef50:	e0bfff17 	ldw	r2,-4(fp)
 800ef54:	10800017 	ldw	r2,0(r2)
 800ef58:	103ee83a 	callr	r2
 800ef5c:	e0bfff17 	ldw	r2,-4(fp)
 800ef60:	10bfff04 	addi	r2,r2,-4
 800ef64:	e0bfff15 	stw	r2,-4(fp)
 800ef68:	e0ffff17 	ldw	r3,-4(fp)
 800ef6c:	00820074 	movhi	r2,2049
 800ef70:	10bfa204 	addi	r2,r2,-376
 800ef74:	18bff62e 	bgeu	r3,r2,800ef50 <__alt_data_end+0xfc00ef50>
 800ef78:	0001883a 	nop
 800ef7c:	e037883a 	mov	sp,fp
 800ef80:	dfc00117 	ldw	ra,4(sp)
 800ef84:	df000017 	ldw	fp,0(sp)
 800ef88:	dec00204 	addi	sp,sp,8
 800ef8c:	f800283a 	ret

0800ef90 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800ef90:	deffff04 	addi	sp,sp,-4
 800ef94:	df000015 	stw	fp,0(sp)
 800ef98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800ef9c:	0001883a 	nop
 800efa0:	e037883a 	mov	sp,fp
 800efa4:	df000017 	ldw	fp,0(sp)
 800efa8:	dec00104 	addi	sp,sp,4
 800efac:	f800283a 	ret

0800efb0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800efb0:	defff904 	addi	sp,sp,-28
 800efb4:	dfc00615 	stw	ra,24(sp)
 800efb8:	df000515 	stw	fp,20(sp)
 800efbc:	df000504 	addi	fp,sp,20
 800efc0:	e13ffc15 	stw	r4,-16(fp)
 800efc4:	e17ffd15 	stw	r5,-12(fp)
 800efc8:	e1bffe15 	stw	r6,-8(fp)
 800efcc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800efd0:	e0800217 	ldw	r2,8(fp)
 800efd4:	d8800015 	stw	r2,0(sp)
 800efd8:	e1ffff17 	ldw	r7,-4(fp)
 800efdc:	e1bffe17 	ldw	r6,-8(fp)
 800efe0:	e17ffd17 	ldw	r5,-12(fp)
 800efe4:	e13ffc17 	ldw	r4,-16(fp)
 800efe8:	800f1600 	call	800f160 <alt_iic_isr_register>
}  
 800efec:	e037883a 	mov	sp,fp
 800eff0:	dfc00117 	ldw	ra,4(sp)
 800eff4:	df000017 	ldw	fp,0(sp)
 800eff8:	dec00204 	addi	sp,sp,8
 800effc:	f800283a 	ret

0800f000 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800f000:	defff904 	addi	sp,sp,-28
 800f004:	df000615 	stw	fp,24(sp)
 800f008:	df000604 	addi	fp,sp,24
 800f00c:	e13ffe15 	stw	r4,-8(fp)
 800f010:	e17fff15 	stw	r5,-4(fp)
 800f014:	e0bfff17 	ldw	r2,-4(fp)
 800f018:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f01c:	0005303a 	rdctl	r2,status
 800f020:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f024:	e0fffb17 	ldw	r3,-20(fp)
 800f028:	00bfff84 	movi	r2,-2
 800f02c:	1884703a 	and	r2,r3,r2
 800f030:	1001703a 	wrctl	status,r2
  
  return context;
 800f034:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f038:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800f03c:	00c00044 	movi	r3,1
 800f040:	e0bffa17 	ldw	r2,-24(fp)
 800f044:	1884983a 	sll	r2,r3,r2
 800f048:	1007883a 	mov	r3,r2
 800f04c:	d0a6eb17 	ldw	r2,-25684(gp)
 800f050:	1884b03a 	or	r2,r3,r2
 800f054:	d0a6eb15 	stw	r2,-25684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f058:	d0a6eb17 	ldw	r2,-25684(gp)
 800f05c:	100170fa 	wrctl	ienable,r2
 800f060:	e0bffc17 	ldw	r2,-16(fp)
 800f064:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f068:	e0bffd17 	ldw	r2,-12(fp)
 800f06c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f070:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800f074:	0001883a 	nop
}
 800f078:	e037883a 	mov	sp,fp
 800f07c:	df000017 	ldw	fp,0(sp)
 800f080:	dec00104 	addi	sp,sp,4
 800f084:	f800283a 	ret

0800f088 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800f088:	defff904 	addi	sp,sp,-28
 800f08c:	df000615 	stw	fp,24(sp)
 800f090:	df000604 	addi	fp,sp,24
 800f094:	e13ffe15 	stw	r4,-8(fp)
 800f098:	e17fff15 	stw	r5,-4(fp)
 800f09c:	e0bfff17 	ldw	r2,-4(fp)
 800f0a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f0a4:	0005303a 	rdctl	r2,status
 800f0a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f0ac:	e0fffb17 	ldw	r3,-20(fp)
 800f0b0:	00bfff84 	movi	r2,-2
 800f0b4:	1884703a 	and	r2,r3,r2
 800f0b8:	1001703a 	wrctl	status,r2
  
  return context;
 800f0bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800f0c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800f0c4:	00c00044 	movi	r3,1
 800f0c8:	e0bffa17 	ldw	r2,-24(fp)
 800f0cc:	1884983a 	sll	r2,r3,r2
 800f0d0:	0084303a 	nor	r2,zero,r2
 800f0d4:	1007883a 	mov	r3,r2
 800f0d8:	d0a6eb17 	ldw	r2,-25684(gp)
 800f0dc:	1884703a 	and	r2,r3,r2
 800f0e0:	d0a6eb15 	stw	r2,-25684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800f0e4:	d0a6eb17 	ldw	r2,-25684(gp)
 800f0e8:	100170fa 	wrctl	ienable,r2
 800f0ec:	e0bffc17 	ldw	r2,-16(fp)
 800f0f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f0f4:	e0bffd17 	ldw	r2,-12(fp)
 800f0f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800f0fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800f100:	0001883a 	nop
}
 800f104:	e037883a 	mov	sp,fp
 800f108:	df000017 	ldw	fp,0(sp)
 800f10c:	dec00104 	addi	sp,sp,4
 800f110:	f800283a 	ret

0800f114 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800f114:	defffc04 	addi	sp,sp,-16
 800f118:	df000315 	stw	fp,12(sp)
 800f11c:	df000304 	addi	fp,sp,12
 800f120:	e13ffe15 	stw	r4,-8(fp)
 800f124:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800f128:	000530fa 	rdctl	r2,ienable
 800f12c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800f130:	00c00044 	movi	r3,1
 800f134:	e0bfff17 	ldw	r2,-4(fp)
 800f138:	1884983a 	sll	r2,r3,r2
 800f13c:	1007883a 	mov	r3,r2
 800f140:	e0bffd17 	ldw	r2,-12(fp)
 800f144:	1884703a 	and	r2,r3,r2
 800f148:	1004c03a 	cmpne	r2,r2,zero
 800f14c:	10803fcc 	andi	r2,r2,255
}
 800f150:	e037883a 	mov	sp,fp
 800f154:	df000017 	ldw	fp,0(sp)
 800f158:	dec00104 	addi	sp,sp,4
 800f15c:	f800283a 	ret

0800f160 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800f160:	defff504 	addi	sp,sp,-44
 800f164:	dfc00a15 	stw	ra,40(sp)
 800f168:	df000915 	stw	fp,36(sp)
 800f16c:	df000904 	addi	fp,sp,36
 800f170:	e13ffc15 	stw	r4,-16(fp)
 800f174:	e17ffd15 	stw	r5,-12(fp)
 800f178:	e1bffe15 	stw	r6,-8(fp)
 800f17c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800f180:	00bffa84 	movi	r2,-22
 800f184:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800f188:	e0bffd17 	ldw	r2,-12(fp)
 800f18c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800f190:	e0bff817 	ldw	r2,-32(fp)
 800f194:	10800808 	cmpgei	r2,r2,32
 800f198:	1000271e 	bne	r2,zero,800f238 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f19c:	0005303a 	rdctl	r2,status
 800f1a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f1a4:	e0fffb17 	ldw	r3,-20(fp)
 800f1a8:	00bfff84 	movi	r2,-2
 800f1ac:	1884703a 	and	r2,r3,r2
 800f1b0:	1001703a 	wrctl	status,r2
  
  return context;
 800f1b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800f1b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 800f1bc:	00820ab4 	movhi	r2,2090
 800f1c0:	109ab604 	addi	r2,r2,27352
 800f1c4:	e0fff817 	ldw	r3,-32(fp)
 800f1c8:	180690fa 	slli	r3,r3,3
 800f1cc:	10c5883a 	add	r2,r2,r3
 800f1d0:	e0fffe17 	ldw	r3,-8(fp)
 800f1d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800f1d8:	00820ab4 	movhi	r2,2090
 800f1dc:	109ab604 	addi	r2,r2,27352
 800f1e0:	e0fff817 	ldw	r3,-32(fp)
 800f1e4:	180690fa 	slli	r3,r3,3
 800f1e8:	10c5883a 	add	r2,r2,r3
 800f1ec:	10800104 	addi	r2,r2,4
 800f1f0:	e0ffff17 	ldw	r3,-4(fp)
 800f1f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800f1f8:	e0bffe17 	ldw	r2,-8(fp)
 800f1fc:	10000526 	beq	r2,zero,800f214 <alt_iic_isr_register+0xb4>
 800f200:	e0bff817 	ldw	r2,-32(fp)
 800f204:	100b883a 	mov	r5,r2
 800f208:	e13ffc17 	ldw	r4,-16(fp)
 800f20c:	800f0000 	call	800f000 <alt_ic_irq_enable>
 800f210:	00000406 	br	800f224 <alt_iic_isr_register+0xc4>
 800f214:	e0bff817 	ldw	r2,-32(fp)
 800f218:	100b883a 	mov	r5,r2
 800f21c:	e13ffc17 	ldw	r4,-16(fp)
 800f220:	800f0880 	call	800f088 <alt_ic_irq_disable>
 800f224:	e0bff715 	stw	r2,-36(fp)
 800f228:	e0bffa17 	ldw	r2,-24(fp)
 800f22c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f230:	e0bff917 	ldw	r2,-28(fp)
 800f234:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800f238:	e0bff717 	ldw	r2,-36(fp)
}
 800f23c:	e037883a 	mov	sp,fp
 800f240:	dfc00117 	ldw	ra,4(sp)
 800f244:	df000017 	ldw	fp,0(sp)
 800f248:	dec00204 	addi	sp,sp,8
 800f24c:	f800283a 	ret

0800f250 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800f250:	defff804 	addi	sp,sp,-32
 800f254:	dfc00715 	stw	ra,28(sp)
 800f258:	df000615 	stw	fp,24(sp)
 800f25c:	dc000515 	stw	r16,20(sp)
 800f260:	df000604 	addi	fp,sp,24
 800f264:	e13ffb15 	stw	r4,-20(fp)
 800f268:	e17ffc15 	stw	r5,-16(fp)
 800f26c:	e1bffd15 	stw	r6,-12(fp)
 800f270:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 800f274:	e1bffe17 	ldw	r6,-8(fp)
 800f278:	e17ffd17 	ldw	r5,-12(fp)
 800f27c:	e13ffc17 	ldw	r4,-16(fp)
 800f280:	800f4d80 	call	800f4d8 <open>
 800f284:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 800f288:	e0bffa17 	ldw	r2,-24(fp)
 800f28c:	10002216 	blt	r2,zero,800f318 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 800f290:	040205f4 	movhi	r16,2071
 800f294:	841f4504 	addi	r16,r16,32020
 800f298:	e0bffa17 	ldw	r2,-24(fp)
 800f29c:	01400304 	movi	r5,12
 800f2a0:	1009883a 	mov	r4,r2
 800f2a4:	800061c0 	call	800061c <__mulsi3>
 800f2a8:	8085883a 	add	r2,r16,r2
 800f2ac:	10c00017 	ldw	r3,0(r2)
 800f2b0:	e0bffb17 	ldw	r2,-20(fp)
 800f2b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800f2b8:	040205f4 	movhi	r16,2071
 800f2bc:	841f4504 	addi	r16,r16,32020
 800f2c0:	e0bffa17 	ldw	r2,-24(fp)
 800f2c4:	01400304 	movi	r5,12
 800f2c8:	1009883a 	mov	r4,r2
 800f2cc:	800061c0 	call	800061c <__mulsi3>
 800f2d0:	8085883a 	add	r2,r16,r2
 800f2d4:	10800104 	addi	r2,r2,4
 800f2d8:	10c00017 	ldw	r3,0(r2)
 800f2dc:	e0bffb17 	ldw	r2,-20(fp)
 800f2e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800f2e4:	040205f4 	movhi	r16,2071
 800f2e8:	841f4504 	addi	r16,r16,32020
 800f2ec:	e0bffa17 	ldw	r2,-24(fp)
 800f2f0:	01400304 	movi	r5,12
 800f2f4:	1009883a 	mov	r4,r2
 800f2f8:	800061c0 	call	800061c <__mulsi3>
 800f2fc:	8085883a 	add	r2,r16,r2
 800f300:	10800204 	addi	r2,r2,8
 800f304:	10c00017 	ldw	r3,0(r2)
 800f308:	e0bffb17 	ldw	r2,-20(fp)
 800f30c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f310:	e13ffa17 	ldw	r4,-24(fp)
 800f314:	800dc800 	call	800dc80 <alt_release_fd>
  }
} 
 800f318:	0001883a 	nop
 800f31c:	e6ffff04 	addi	sp,fp,-4
 800f320:	dfc00217 	ldw	ra,8(sp)
 800f324:	df000117 	ldw	fp,4(sp)
 800f328:	dc000017 	ldw	r16,0(sp)
 800f32c:	dec00304 	addi	sp,sp,12
 800f330:	f800283a 	ret

0800f334 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f334:	defffb04 	addi	sp,sp,-20
 800f338:	dfc00415 	stw	ra,16(sp)
 800f33c:	df000315 	stw	fp,12(sp)
 800f340:	df000304 	addi	fp,sp,12
 800f344:	e13ffd15 	stw	r4,-12(fp)
 800f348:	e17ffe15 	stw	r5,-8(fp)
 800f34c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f350:	01c07fc4 	movi	r7,511
 800f354:	01800044 	movi	r6,1
 800f358:	e17ffd17 	ldw	r5,-12(fp)
 800f35c:	010205f4 	movhi	r4,2071
 800f360:	211f4804 	addi	r4,r4,32032
 800f364:	800f2500 	call	800f250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f368:	01c07fc4 	movi	r7,511
 800f36c:	000d883a 	mov	r6,zero
 800f370:	e17ffe17 	ldw	r5,-8(fp)
 800f374:	010205f4 	movhi	r4,2071
 800f378:	211f4504 	addi	r4,r4,32020
 800f37c:	800f2500 	call	800f250 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f380:	01c07fc4 	movi	r7,511
 800f384:	01800044 	movi	r6,1
 800f388:	e17fff17 	ldw	r5,-4(fp)
 800f38c:	010205f4 	movhi	r4,2071
 800f390:	211f4b04 	addi	r4,r4,32044
 800f394:	800f2500 	call	800f250 <alt_open_fd>
}  
 800f398:	0001883a 	nop
 800f39c:	e037883a 	mov	sp,fp
 800f3a0:	dfc00117 	ldw	ra,4(sp)
 800f3a4:	df000017 	ldw	fp,0(sp)
 800f3a8:	dec00204 	addi	sp,sp,8
 800f3ac:	f800283a 	ret

0800f3b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f3b0:	defffe04 	addi	sp,sp,-8
 800f3b4:	dfc00115 	stw	ra,4(sp)
 800f3b8:	df000015 	stw	fp,0(sp)
 800f3bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f3c0:	d0a01617 	ldw	r2,-32680(gp)
 800f3c4:	10000326 	beq	r2,zero,800f3d4 <alt_get_errno+0x24>
 800f3c8:	d0a01617 	ldw	r2,-32680(gp)
 800f3cc:	103ee83a 	callr	r2
 800f3d0:	00000106 	br	800f3d8 <alt_get_errno+0x28>
 800f3d4:	d0a6e704 	addi	r2,gp,-25700
}
 800f3d8:	e037883a 	mov	sp,fp
 800f3dc:	dfc00117 	ldw	ra,4(sp)
 800f3e0:	df000017 	ldw	fp,0(sp)
 800f3e4:	dec00204 	addi	sp,sp,8
 800f3e8:	f800283a 	ret

0800f3ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f3ec:	defffb04 	addi	sp,sp,-20
 800f3f0:	dfc00415 	stw	ra,16(sp)
 800f3f4:	df000315 	stw	fp,12(sp)
 800f3f8:	dc000215 	stw	r16,8(sp)
 800f3fc:	df000304 	addi	fp,sp,12
 800f400:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f404:	e0bffe17 	ldw	r2,-8(fp)
 800f408:	10800217 	ldw	r2,8(r2)
 800f40c:	10d00034 	orhi	r3,r2,16384
 800f410:	e0bffe17 	ldw	r2,-8(fp)
 800f414:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f418:	e03ffd15 	stw	zero,-12(fp)
 800f41c:	00002306 	br	800f4ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f420:	040205f4 	movhi	r16,2071
 800f424:	841f4504 	addi	r16,r16,32020
 800f428:	e0bffd17 	ldw	r2,-12(fp)
 800f42c:	01400304 	movi	r5,12
 800f430:	1009883a 	mov	r4,r2
 800f434:	800061c0 	call	800061c <__mulsi3>
 800f438:	8085883a 	add	r2,r16,r2
 800f43c:	10c00017 	ldw	r3,0(r2)
 800f440:	e0bffe17 	ldw	r2,-8(fp)
 800f444:	10800017 	ldw	r2,0(r2)
 800f448:	1880151e 	bne	r3,r2,800f4a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f44c:	040205f4 	movhi	r16,2071
 800f450:	841f4504 	addi	r16,r16,32020
 800f454:	e0bffd17 	ldw	r2,-12(fp)
 800f458:	01400304 	movi	r5,12
 800f45c:	1009883a 	mov	r4,r2
 800f460:	800061c0 	call	800061c <__mulsi3>
 800f464:	8085883a 	add	r2,r16,r2
 800f468:	10800204 	addi	r2,r2,8
 800f46c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f470:	10000b0e 	bge	r2,zero,800f4a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800f474:	01400304 	movi	r5,12
 800f478:	e13ffd17 	ldw	r4,-12(fp)
 800f47c:	800061c0 	call	800061c <__mulsi3>
 800f480:	1007883a 	mov	r3,r2
 800f484:	008205f4 	movhi	r2,2071
 800f488:	109f4504 	addi	r2,r2,32020
 800f48c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f490:	e0bffe17 	ldw	r2,-8(fp)
 800f494:	18800226 	beq	r3,r2,800f4a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800f498:	00bffcc4 	movi	r2,-13
 800f49c:	00000806 	br	800f4c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f4a0:	e0bffd17 	ldw	r2,-12(fp)
 800f4a4:	10800044 	addi	r2,r2,1
 800f4a8:	e0bffd15 	stw	r2,-12(fp)
 800f4ac:	d0a01517 	ldw	r2,-32684(gp)
 800f4b0:	1007883a 	mov	r3,r2
 800f4b4:	e0bffd17 	ldw	r2,-12(fp)
 800f4b8:	18bfd92e 	bgeu	r3,r2,800f420 <__alt_data_end+0xfc00f420>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f4bc:	0005883a 	mov	r2,zero
}
 800f4c0:	e6ffff04 	addi	sp,fp,-4
 800f4c4:	dfc00217 	ldw	ra,8(sp)
 800f4c8:	df000117 	ldw	fp,4(sp)
 800f4cc:	dc000017 	ldw	r16,0(sp)
 800f4d0:	dec00304 	addi	sp,sp,12
 800f4d4:	f800283a 	ret

0800f4d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f4d8:	defff604 	addi	sp,sp,-40
 800f4dc:	dfc00915 	stw	ra,36(sp)
 800f4e0:	df000815 	stw	fp,32(sp)
 800f4e4:	df000804 	addi	fp,sp,32
 800f4e8:	e13ffd15 	stw	r4,-12(fp)
 800f4ec:	e17ffe15 	stw	r5,-8(fp)
 800f4f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f4f4:	00bfffc4 	movi	r2,-1
 800f4f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800f4fc:	00bffb44 	movi	r2,-19
 800f500:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800f504:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f508:	d1601304 	addi	r5,gp,-32692
 800f50c:	e13ffd17 	ldw	r4,-12(fp)
 800f510:	800f7fc0 	call	800f7fc <alt_find_dev>
 800f514:	e0bff815 	stw	r2,-32(fp)
 800f518:	e0bff817 	ldw	r2,-32(fp)
 800f51c:	1000051e 	bne	r2,zero,800f534 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f520:	e13ffd17 	ldw	r4,-12(fp)
 800f524:	800f88c0 	call	800f88c <alt_find_file>
 800f528:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800f52c:	00800044 	movi	r2,1
 800f530:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f534:	e0bff817 	ldw	r2,-32(fp)
 800f538:	10002b26 	beq	r2,zero,800f5e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f53c:	e13ff817 	ldw	r4,-32(fp)
 800f540:	800f9940 	call	800f994 <alt_get_fd>
 800f544:	e0bff915 	stw	r2,-28(fp)
 800f548:	e0bff917 	ldw	r2,-28(fp)
 800f54c:	1000030e 	bge	r2,zero,800f55c <open+0x84>
    {
      status = index;
 800f550:	e0bff917 	ldw	r2,-28(fp)
 800f554:	e0bffa15 	stw	r2,-24(fp)
 800f558:	00002506 	br	800f5f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f55c:	01400304 	movi	r5,12
 800f560:	e13ff917 	ldw	r4,-28(fp)
 800f564:	800061c0 	call	800061c <__mulsi3>
 800f568:	1007883a 	mov	r3,r2
 800f56c:	008205f4 	movhi	r2,2071
 800f570:	109f4504 	addi	r2,r2,32020
 800f574:	1885883a 	add	r2,r3,r2
 800f578:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f57c:	e0fffe17 	ldw	r3,-8(fp)
 800f580:	00900034 	movhi	r2,16384
 800f584:	10bfffc4 	addi	r2,r2,-1
 800f588:	1886703a 	and	r3,r3,r2
 800f58c:	e0bffc17 	ldw	r2,-16(fp)
 800f590:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f594:	e0bffb17 	ldw	r2,-20(fp)
 800f598:	1000051e 	bne	r2,zero,800f5b0 <open+0xd8>
 800f59c:	e13ffc17 	ldw	r4,-16(fp)
 800f5a0:	800f3ec0 	call	800f3ec <alt_file_locked>
 800f5a4:	e0bffa15 	stw	r2,-24(fp)
 800f5a8:	e0bffa17 	ldw	r2,-24(fp)
 800f5ac:	10001016 	blt	r2,zero,800f5f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f5b0:	e0bff817 	ldw	r2,-32(fp)
 800f5b4:	10800317 	ldw	r2,12(r2)
 800f5b8:	10000826 	beq	r2,zero,800f5dc <open+0x104>
 800f5bc:	e0bff817 	ldw	r2,-32(fp)
 800f5c0:	10800317 	ldw	r2,12(r2)
 800f5c4:	e1ffff17 	ldw	r7,-4(fp)
 800f5c8:	e1bffe17 	ldw	r6,-8(fp)
 800f5cc:	e17ffd17 	ldw	r5,-12(fp)
 800f5d0:	e13ffc17 	ldw	r4,-16(fp)
 800f5d4:	103ee83a 	callr	r2
 800f5d8:	00000106 	br	800f5e0 <open+0x108>
 800f5dc:	0005883a 	mov	r2,zero
 800f5e0:	e0bffa15 	stw	r2,-24(fp)
 800f5e4:	00000206 	br	800f5f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f5e8:	00bffb44 	movi	r2,-19
 800f5ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f5f0:	e0bffa17 	ldw	r2,-24(fp)
 800f5f4:	1000090e 	bge	r2,zero,800f61c <open+0x144>
  {
    alt_release_fd (index);  
 800f5f8:	e13ff917 	ldw	r4,-28(fp)
 800f5fc:	800dc800 	call	800dc80 <alt_release_fd>
    ALT_ERRNO = -status;
 800f600:	800f3b00 	call	800f3b0 <alt_get_errno>
 800f604:	1007883a 	mov	r3,r2
 800f608:	e0bffa17 	ldw	r2,-24(fp)
 800f60c:	0085c83a 	sub	r2,zero,r2
 800f610:	18800015 	stw	r2,0(r3)
    return -1;
 800f614:	00bfffc4 	movi	r2,-1
 800f618:	00000106 	br	800f620 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 800f61c:	e0bff917 	ldw	r2,-28(fp)
}
 800f620:	e037883a 	mov	sp,fp
 800f624:	dfc00117 	ldw	ra,4(sp)
 800f628:	df000017 	ldw	fp,0(sp)
 800f62c:	dec00204 	addi	sp,sp,8
 800f630:	f800283a 	ret

0800f634 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800f634:	defffa04 	addi	sp,sp,-24
 800f638:	df000515 	stw	fp,20(sp)
 800f63c:	df000504 	addi	fp,sp,20
 800f640:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f644:	0005303a 	rdctl	r2,status
 800f648:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f64c:	e0fffc17 	ldw	r3,-16(fp)
 800f650:	00bfff84 	movi	r2,-2
 800f654:	1884703a 	and	r2,r3,r2
 800f658:	1001703a 	wrctl	status,r2
  
  return context;
 800f65c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800f660:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800f664:	e0bfff17 	ldw	r2,-4(fp)
 800f668:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800f66c:	e0bffd17 	ldw	r2,-12(fp)
 800f670:	10800017 	ldw	r2,0(r2)
 800f674:	e0fffd17 	ldw	r3,-12(fp)
 800f678:	18c00117 	ldw	r3,4(r3)
 800f67c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800f680:	e0bffd17 	ldw	r2,-12(fp)
 800f684:	10800117 	ldw	r2,4(r2)
 800f688:	e0fffd17 	ldw	r3,-12(fp)
 800f68c:	18c00017 	ldw	r3,0(r3)
 800f690:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800f694:	e0bffd17 	ldw	r2,-12(fp)
 800f698:	e0fffd17 	ldw	r3,-12(fp)
 800f69c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800f6a0:	e0bffd17 	ldw	r2,-12(fp)
 800f6a4:	e0fffd17 	ldw	r3,-12(fp)
 800f6a8:	10c00015 	stw	r3,0(r2)
 800f6ac:	e0bffb17 	ldw	r2,-20(fp)
 800f6b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f6b4:	e0bffe17 	ldw	r2,-8(fp)
 800f6b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800f6bc:	0001883a 	nop
 800f6c0:	e037883a 	mov	sp,fp
 800f6c4:	df000017 	ldw	fp,0(sp)
 800f6c8:	dec00104 	addi	sp,sp,4
 800f6cc:	f800283a 	ret

0800f6d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800f6d0:	defffb04 	addi	sp,sp,-20
 800f6d4:	dfc00415 	stw	ra,16(sp)
 800f6d8:	df000315 	stw	fp,12(sp)
 800f6dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800f6e0:	d0a01917 	ldw	r2,-32668(gp)
 800f6e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800f6e8:	d0a6ed17 	ldw	r2,-25676(gp)
 800f6ec:	10800044 	addi	r2,r2,1
 800f6f0:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f6f4:	00002e06 	br	800f7b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800f6f8:	e0bffd17 	ldw	r2,-12(fp)
 800f6fc:	10800017 	ldw	r2,0(r2)
 800f700:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800f704:	e0bffd17 	ldw	r2,-12(fp)
 800f708:	10800403 	ldbu	r2,16(r2)
 800f70c:	10803fcc 	andi	r2,r2,255
 800f710:	10000426 	beq	r2,zero,800f724 <alt_tick+0x54>
 800f714:	d0a6ed17 	ldw	r2,-25676(gp)
 800f718:	1000021e 	bne	r2,zero,800f724 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800f71c:	e0bffd17 	ldw	r2,-12(fp)
 800f720:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800f724:	e0bffd17 	ldw	r2,-12(fp)
 800f728:	10800217 	ldw	r2,8(r2)
 800f72c:	d0e6ed17 	ldw	r3,-25676(gp)
 800f730:	18801d36 	bltu	r3,r2,800f7a8 <alt_tick+0xd8>
 800f734:	e0bffd17 	ldw	r2,-12(fp)
 800f738:	10800403 	ldbu	r2,16(r2)
 800f73c:	10803fcc 	andi	r2,r2,255
 800f740:	1000191e 	bne	r2,zero,800f7a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800f744:	e0bffd17 	ldw	r2,-12(fp)
 800f748:	10800317 	ldw	r2,12(r2)
 800f74c:	e0fffd17 	ldw	r3,-12(fp)
 800f750:	18c00517 	ldw	r3,20(r3)
 800f754:	1809883a 	mov	r4,r3
 800f758:	103ee83a 	callr	r2
 800f75c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800f760:	e0bfff17 	ldw	r2,-4(fp)
 800f764:	1000031e 	bne	r2,zero,800f774 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800f768:	e13ffd17 	ldw	r4,-12(fp)
 800f76c:	800f6340 	call	800f634 <alt_alarm_stop>
 800f770:	00000d06 	br	800f7a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800f774:	e0bffd17 	ldw	r2,-12(fp)
 800f778:	10c00217 	ldw	r3,8(r2)
 800f77c:	e0bfff17 	ldw	r2,-4(fp)
 800f780:	1887883a 	add	r3,r3,r2
 800f784:	e0bffd17 	ldw	r2,-12(fp)
 800f788:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800f78c:	e0bffd17 	ldw	r2,-12(fp)
 800f790:	10c00217 	ldw	r3,8(r2)
 800f794:	d0a6ed17 	ldw	r2,-25676(gp)
 800f798:	1880032e 	bgeu	r3,r2,800f7a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800f79c:	e0bffd17 	ldw	r2,-12(fp)
 800f7a0:	00c00044 	movi	r3,1
 800f7a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800f7a8:	e0bffe17 	ldw	r2,-8(fp)
 800f7ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f7b0:	e0fffd17 	ldw	r3,-12(fp)
 800f7b4:	d0a01904 	addi	r2,gp,-32668
 800f7b8:	18bfcf1e 	bne	r3,r2,800f6f8 <__alt_data_end+0xfc00f6f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800f7bc:	0001883a 	nop
}
 800f7c0:	0001883a 	nop
 800f7c4:	e037883a 	mov	sp,fp
 800f7c8:	dfc00117 	ldw	ra,4(sp)
 800f7cc:	df000017 	ldw	fp,0(sp)
 800f7d0:	dec00204 	addi	sp,sp,8
 800f7d4:	f800283a 	ret

0800f7d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800f7d8:	deffff04 	addi	sp,sp,-4
 800f7dc:	df000015 	stw	fp,0(sp)
 800f7e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800f7e4:	000170fa 	wrctl	ienable,zero
}
 800f7e8:	0001883a 	nop
 800f7ec:	e037883a 	mov	sp,fp
 800f7f0:	df000017 	ldw	fp,0(sp)
 800f7f4:	dec00104 	addi	sp,sp,4
 800f7f8:	f800283a 	ret

0800f7fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800f7fc:	defffa04 	addi	sp,sp,-24
 800f800:	dfc00515 	stw	ra,20(sp)
 800f804:	df000415 	stw	fp,16(sp)
 800f808:	df000404 	addi	fp,sp,16
 800f80c:	e13ffe15 	stw	r4,-8(fp)
 800f810:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800f814:	e0bfff17 	ldw	r2,-4(fp)
 800f818:	10800017 	ldw	r2,0(r2)
 800f81c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800f820:	e13ffe17 	ldw	r4,-8(fp)
 800f824:	80007840 	call	8000784 <strlen>
 800f828:	10800044 	addi	r2,r2,1
 800f82c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f830:	00000d06 	br	800f868 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800f834:	e0bffc17 	ldw	r2,-16(fp)
 800f838:	10800217 	ldw	r2,8(r2)
 800f83c:	e0fffd17 	ldw	r3,-12(fp)
 800f840:	180d883a 	mov	r6,r3
 800f844:	e17ffe17 	ldw	r5,-8(fp)
 800f848:	1009883a 	mov	r4,r2
 800f84c:	800fb400 	call	800fb40 <memcmp>
 800f850:	1000021e 	bne	r2,zero,800f85c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800f854:	e0bffc17 	ldw	r2,-16(fp)
 800f858:	00000706 	br	800f878 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800f85c:	e0bffc17 	ldw	r2,-16(fp)
 800f860:	10800017 	ldw	r2,0(r2)
 800f864:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f868:	e0fffc17 	ldw	r3,-16(fp)
 800f86c:	e0bfff17 	ldw	r2,-4(fp)
 800f870:	18bff01e 	bne	r3,r2,800f834 <__alt_data_end+0xfc00f834>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800f874:	0005883a 	mov	r2,zero
}
 800f878:	e037883a 	mov	sp,fp
 800f87c:	dfc00117 	ldw	ra,4(sp)
 800f880:	df000017 	ldw	fp,0(sp)
 800f884:	dec00204 	addi	sp,sp,8
 800f888:	f800283a 	ret

0800f88c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800f88c:	defffb04 	addi	sp,sp,-20
 800f890:	dfc00415 	stw	ra,16(sp)
 800f894:	df000315 	stw	fp,12(sp)
 800f898:	df000304 	addi	fp,sp,12
 800f89c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800f8a0:	d0a01117 	ldw	r2,-32700(gp)
 800f8a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f8a8:	00003106 	br	800f970 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800f8ac:	e0bffd17 	ldw	r2,-12(fp)
 800f8b0:	10800217 	ldw	r2,8(r2)
 800f8b4:	1009883a 	mov	r4,r2
 800f8b8:	80007840 	call	8000784 <strlen>
 800f8bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800f8c0:	e0bffd17 	ldw	r2,-12(fp)
 800f8c4:	10c00217 	ldw	r3,8(r2)
 800f8c8:	e0bffe17 	ldw	r2,-8(fp)
 800f8cc:	10bfffc4 	addi	r2,r2,-1
 800f8d0:	1885883a 	add	r2,r3,r2
 800f8d4:	10800003 	ldbu	r2,0(r2)
 800f8d8:	10803fcc 	andi	r2,r2,255
 800f8dc:	1080201c 	xori	r2,r2,128
 800f8e0:	10bfe004 	addi	r2,r2,-128
 800f8e4:	10800bd8 	cmpnei	r2,r2,47
 800f8e8:	1000031e 	bne	r2,zero,800f8f8 <alt_find_file+0x6c>
    {
      len -= 1;
 800f8ec:	e0bffe17 	ldw	r2,-8(fp)
 800f8f0:	10bfffc4 	addi	r2,r2,-1
 800f8f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f8f8:	e0bffe17 	ldw	r2,-8(fp)
 800f8fc:	e0ffff17 	ldw	r3,-4(fp)
 800f900:	1885883a 	add	r2,r3,r2
 800f904:	10800003 	ldbu	r2,0(r2)
 800f908:	10803fcc 	andi	r2,r2,255
 800f90c:	1080201c 	xori	r2,r2,128
 800f910:	10bfe004 	addi	r2,r2,-128
 800f914:	10800be0 	cmpeqi	r2,r2,47
 800f918:	1000081e 	bne	r2,zero,800f93c <alt_find_file+0xb0>
 800f91c:	e0bffe17 	ldw	r2,-8(fp)
 800f920:	e0ffff17 	ldw	r3,-4(fp)
 800f924:	1885883a 	add	r2,r3,r2
 800f928:	10800003 	ldbu	r2,0(r2)
 800f92c:	10803fcc 	andi	r2,r2,255
 800f930:	1080201c 	xori	r2,r2,128
 800f934:	10bfe004 	addi	r2,r2,-128
 800f938:	10000a1e 	bne	r2,zero,800f964 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800f93c:	e0bffd17 	ldw	r2,-12(fp)
 800f940:	10800217 	ldw	r2,8(r2)
 800f944:	e0fffe17 	ldw	r3,-8(fp)
 800f948:	180d883a 	mov	r6,r3
 800f94c:	e17fff17 	ldw	r5,-4(fp)
 800f950:	1009883a 	mov	r4,r2
 800f954:	800fb400 	call	800fb40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f958:	1000021e 	bne	r2,zero,800f964 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800f95c:	e0bffd17 	ldw	r2,-12(fp)
 800f960:	00000706 	br	800f980 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800f964:	e0bffd17 	ldw	r2,-12(fp)
 800f968:	10800017 	ldw	r2,0(r2)
 800f96c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f970:	e0fffd17 	ldw	r3,-12(fp)
 800f974:	d0a01104 	addi	r2,gp,-32700
 800f978:	18bfcc1e 	bne	r3,r2,800f8ac <__alt_data_end+0xfc00f8ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800f97c:	0005883a 	mov	r2,zero
}
 800f980:	e037883a 	mov	sp,fp
 800f984:	dfc00117 	ldw	ra,4(sp)
 800f988:	df000017 	ldw	fp,0(sp)
 800f98c:	dec00204 	addi	sp,sp,8
 800f990:	f800283a 	ret

0800f994 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f994:	defffa04 	addi	sp,sp,-24
 800f998:	dfc00515 	stw	ra,20(sp)
 800f99c:	df000415 	stw	fp,16(sp)
 800f9a0:	dc000315 	stw	r16,12(sp)
 800f9a4:	df000404 	addi	fp,sp,16
 800f9a8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f9ac:	00bffa04 	movi	r2,-24
 800f9b0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f9b4:	e03ffc15 	stw	zero,-16(fp)
 800f9b8:	00001d06 	br	800fa30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 800f9bc:	040205f4 	movhi	r16,2071
 800f9c0:	841f4504 	addi	r16,r16,32020
 800f9c4:	e0bffc17 	ldw	r2,-16(fp)
 800f9c8:	01400304 	movi	r5,12
 800f9cc:	1009883a 	mov	r4,r2
 800f9d0:	800061c0 	call	800061c <__mulsi3>
 800f9d4:	8085883a 	add	r2,r16,r2
 800f9d8:	10800017 	ldw	r2,0(r2)
 800f9dc:	1000111e 	bne	r2,zero,800fa24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 800f9e0:	040205f4 	movhi	r16,2071
 800f9e4:	841f4504 	addi	r16,r16,32020
 800f9e8:	e0bffc17 	ldw	r2,-16(fp)
 800f9ec:	01400304 	movi	r5,12
 800f9f0:	1009883a 	mov	r4,r2
 800f9f4:	800061c0 	call	800061c <__mulsi3>
 800f9f8:	8085883a 	add	r2,r16,r2
 800f9fc:	e0fffe17 	ldw	r3,-8(fp)
 800fa00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800fa04:	d0e01517 	ldw	r3,-32684(gp)
 800fa08:	e0bffc17 	ldw	r2,-16(fp)
 800fa0c:	1880020e 	bge	r3,r2,800fa18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 800fa10:	e0bffc17 	ldw	r2,-16(fp)
 800fa14:	d0a01515 	stw	r2,-32684(gp)
      }
      rc = i;
 800fa18:	e0bffc17 	ldw	r2,-16(fp)
 800fa1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 800fa20:	00000606 	br	800fa3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800fa24:	e0bffc17 	ldw	r2,-16(fp)
 800fa28:	10800044 	addi	r2,r2,1
 800fa2c:	e0bffc15 	stw	r2,-16(fp)
 800fa30:	e0bffc17 	ldw	r2,-16(fp)
 800fa34:	10800810 	cmplti	r2,r2,32
 800fa38:	103fe01e 	bne	r2,zero,800f9bc <__alt_data_end+0xfc00f9bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800fa3c:	e0bffd17 	ldw	r2,-12(fp)
}
 800fa40:	e6ffff04 	addi	sp,fp,-4
 800fa44:	dfc00217 	ldw	ra,8(sp)
 800fa48:	df000117 	ldw	fp,4(sp)
 800fa4c:	dc000017 	ldw	r16,0(sp)
 800fa50:	dec00304 	addi	sp,sp,12
 800fa54:	f800283a 	ret

0800fa58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800fa58:	defffe04 	addi	sp,sp,-8
 800fa5c:	df000115 	stw	fp,4(sp)
 800fa60:	df000104 	addi	fp,sp,4
 800fa64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800fa68:	e0bfff17 	ldw	r2,-4(fp)
 800fa6c:	10bffe84 	addi	r2,r2,-6
 800fa70:	10c00428 	cmpgeui	r3,r2,16
 800fa74:	18001a1e 	bne	r3,zero,800fae0 <alt_exception_cause_generated_bad_addr+0x88>
 800fa78:	100690ba 	slli	r3,r2,2
 800fa7c:	00820074 	movhi	r2,2049
 800fa80:	10bea404 	addi	r2,r2,-1392
 800fa84:	1885883a 	add	r2,r3,r2
 800fa88:	10800017 	ldw	r2,0(r2)
 800fa8c:	1000683a 	jmp	r2
 800fa90:	0800fad0 	cmplti	zero,at,1003
 800fa94:	0800fad0 	cmplti	zero,at,1003
 800fa98:	0800fae0 	cmpeqi	zero,at,1003
 800fa9c:	0800fae0 	cmpeqi	zero,at,1003
 800faa0:	0800fae0 	cmpeqi	zero,at,1003
 800faa4:	0800fad0 	cmplti	zero,at,1003
 800faa8:	0800fad8 	cmpnei	zero,at,1003
 800faac:	0800fae0 	cmpeqi	zero,at,1003
 800fab0:	0800fad0 	cmplti	zero,at,1003
 800fab4:	0800fad0 	cmplti	zero,at,1003
 800fab8:	0800fae0 	cmpeqi	zero,at,1003
 800fabc:	0800fad0 	cmplti	zero,at,1003
 800fac0:	0800fad8 	cmpnei	zero,at,1003
 800fac4:	0800fae0 	cmpeqi	zero,at,1003
 800fac8:	0800fae0 	cmpeqi	zero,at,1003
 800facc:	0800fad0 	cmplti	zero,at,1003
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800fad0:	00800044 	movi	r2,1
 800fad4:	00000306 	br	800fae4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800fad8:	0005883a 	mov	r2,zero
 800fadc:	00000106 	br	800fae4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 800fae0:	0005883a 	mov	r2,zero
  }
}
 800fae4:	e037883a 	mov	sp,fp
 800fae8:	df000017 	ldw	fp,0(sp)
 800faec:	dec00104 	addi	sp,sp,4
 800faf0:	f800283a 	ret

0800faf4 <atexit>:
 800faf4:	200b883a 	mov	r5,r4
 800faf8:	000f883a 	mov	r7,zero
 800fafc:	000d883a 	mov	r6,zero
 800fb00:	0009883a 	mov	r4,zero
 800fb04:	800fbbc1 	jmpi	800fbbc <__register_exitproc>

0800fb08 <exit>:
 800fb08:	defffe04 	addi	sp,sp,-8
 800fb0c:	000b883a 	mov	r5,zero
 800fb10:	dc000015 	stw	r16,0(sp)
 800fb14:	dfc00115 	stw	ra,4(sp)
 800fb18:	2021883a 	mov	r16,r4
 800fb1c:	800fcd40 	call	800fcd4 <__call_exitprocs>
 800fb20:	00820634 	movhi	r2,2072
 800fb24:	10a3c804 	addi	r2,r2,-28896
 800fb28:	11000017 	ldw	r4,0(r2)
 800fb2c:	20800f17 	ldw	r2,60(r4)
 800fb30:	10000126 	beq	r2,zero,800fb38 <exit+0x30>
 800fb34:	103ee83a 	callr	r2
 800fb38:	8009883a 	mov	r4,r16
 800fb3c:	800fe540 	call	800fe54 <_exit>

0800fb40 <memcmp>:
 800fb40:	01c000c4 	movi	r7,3
 800fb44:	3980192e 	bgeu	r7,r6,800fbac <memcmp+0x6c>
 800fb48:	2144b03a 	or	r2,r4,r5
 800fb4c:	11c4703a 	and	r2,r2,r7
 800fb50:	10000f26 	beq	r2,zero,800fb90 <memcmp+0x50>
 800fb54:	20800003 	ldbu	r2,0(r4)
 800fb58:	28c00003 	ldbu	r3,0(r5)
 800fb5c:	10c0151e 	bne	r2,r3,800fbb4 <memcmp+0x74>
 800fb60:	31bfff84 	addi	r6,r6,-2
 800fb64:	01ffffc4 	movi	r7,-1
 800fb68:	00000406 	br	800fb7c <memcmp+0x3c>
 800fb6c:	20800003 	ldbu	r2,0(r4)
 800fb70:	28c00003 	ldbu	r3,0(r5)
 800fb74:	31bfffc4 	addi	r6,r6,-1
 800fb78:	10c00e1e 	bne	r2,r3,800fbb4 <memcmp+0x74>
 800fb7c:	21000044 	addi	r4,r4,1
 800fb80:	29400044 	addi	r5,r5,1
 800fb84:	31fff91e 	bne	r6,r7,800fb6c <__alt_data_end+0xfc00fb6c>
 800fb88:	0005883a 	mov	r2,zero
 800fb8c:	f800283a 	ret
 800fb90:	20c00017 	ldw	r3,0(r4)
 800fb94:	28800017 	ldw	r2,0(r5)
 800fb98:	18bfee1e 	bne	r3,r2,800fb54 <__alt_data_end+0xfc00fb54>
 800fb9c:	31bfff04 	addi	r6,r6,-4
 800fba0:	21000104 	addi	r4,r4,4
 800fba4:	29400104 	addi	r5,r5,4
 800fba8:	39bff936 	bltu	r7,r6,800fb90 <__alt_data_end+0xfc00fb90>
 800fbac:	303fe91e 	bne	r6,zero,800fb54 <__alt_data_end+0xfc00fb54>
 800fbb0:	003ff506 	br	800fb88 <__alt_data_end+0xfc00fb88>
 800fbb4:	10c5c83a 	sub	r2,r2,r3
 800fbb8:	f800283a 	ret

0800fbbc <__register_exitproc>:
 800fbbc:	defffa04 	addi	sp,sp,-24
 800fbc0:	dc000315 	stw	r16,12(sp)
 800fbc4:	04020634 	movhi	r16,2072
 800fbc8:	8423c804 	addi	r16,r16,-28896
 800fbcc:	80c00017 	ldw	r3,0(r16)
 800fbd0:	dc400415 	stw	r17,16(sp)
 800fbd4:	dfc00515 	stw	ra,20(sp)
 800fbd8:	18805217 	ldw	r2,328(r3)
 800fbdc:	2023883a 	mov	r17,r4
 800fbe0:	10003726 	beq	r2,zero,800fcc0 <__register_exitproc+0x104>
 800fbe4:	10c00117 	ldw	r3,4(r2)
 800fbe8:	010007c4 	movi	r4,31
 800fbec:	20c00e16 	blt	r4,r3,800fc28 <__register_exitproc+0x6c>
 800fbf0:	1a000044 	addi	r8,r3,1
 800fbf4:	8800221e 	bne	r17,zero,800fc80 <__register_exitproc+0xc4>
 800fbf8:	18c00084 	addi	r3,r3,2
 800fbfc:	18c7883a 	add	r3,r3,r3
 800fc00:	18c7883a 	add	r3,r3,r3
 800fc04:	12000115 	stw	r8,4(r2)
 800fc08:	10c7883a 	add	r3,r2,r3
 800fc0c:	19400015 	stw	r5,0(r3)
 800fc10:	0005883a 	mov	r2,zero
 800fc14:	dfc00517 	ldw	ra,20(sp)
 800fc18:	dc400417 	ldw	r17,16(sp)
 800fc1c:	dc000317 	ldw	r16,12(sp)
 800fc20:	dec00604 	addi	sp,sp,24
 800fc24:	f800283a 	ret
 800fc28:	00800034 	movhi	r2,0
 800fc2c:	10800004 	addi	r2,r2,0
 800fc30:	10002626 	beq	r2,zero,800fccc <__register_exitproc+0x110>
 800fc34:	01006404 	movi	r4,400
 800fc38:	d9400015 	stw	r5,0(sp)
 800fc3c:	d9800115 	stw	r6,4(sp)
 800fc40:	d9c00215 	stw	r7,8(sp)
 800fc44:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800fc48:	d9400017 	ldw	r5,0(sp)
 800fc4c:	d9800117 	ldw	r6,4(sp)
 800fc50:	d9c00217 	ldw	r7,8(sp)
 800fc54:	10001d26 	beq	r2,zero,800fccc <__register_exitproc+0x110>
 800fc58:	81000017 	ldw	r4,0(r16)
 800fc5c:	10000115 	stw	zero,4(r2)
 800fc60:	02000044 	movi	r8,1
 800fc64:	22405217 	ldw	r9,328(r4)
 800fc68:	0007883a 	mov	r3,zero
 800fc6c:	12400015 	stw	r9,0(r2)
 800fc70:	20805215 	stw	r2,328(r4)
 800fc74:	10006215 	stw	zero,392(r2)
 800fc78:	10006315 	stw	zero,396(r2)
 800fc7c:	883fde26 	beq	r17,zero,800fbf8 <__alt_data_end+0xfc00fbf8>
 800fc80:	18c9883a 	add	r4,r3,r3
 800fc84:	2109883a 	add	r4,r4,r4
 800fc88:	1109883a 	add	r4,r2,r4
 800fc8c:	21802215 	stw	r6,136(r4)
 800fc90:	01800044 	movi	r6,1
 800fc94:	12406217 	ldw	r9,392(r2)
 800fc98:	30cc983a 	sll	r6,r6,r3
 800fc9c:	4992b03a 	or	r9,r9,r6
 800fca0:	12406215 	stw	r9,392(r2)
 800fca4:	21c04215 	stw	r7,264(r4)
 800fca8:	01000084 	movi	r4,2
 800fcac:	893fd21e 	bne	r17,r4,800fbf8 <__alt_data_end+0xfc00fbf8>
 800fcb0:	11006317 	ldw	r4,396(r2)
 800fcb4:	218cb03a 	or	r6,r4,r6
 800fcb8:	11806315 	stw	r6,396(r2)
 800fcbc:	003fce06 	br	800fbf8 <__alt_data_end+0xfc00fbf8>
 800fcc0:	18805304 	addi	r2,r3,332
 800fcc4:	18805215 	stw	r2,328(r3)
 800fcc8:	003fc606 	br	800fbe4 <__alt_data_end+0xfc00fbe4>
 800fccc:	00bfffc4 	movi	r2,-1
 800fcd0:	003fd006 	br	800fc14 <__alt_data_end+0xfc00fc14>

0800fcd4 <__call_exitprocs>:
 800fcd4:	defff504 	addi	sp,sp,-44
 800fcd8:	df000915 	stw	fp,36(sp)
 800fcdc:	dd400615 	stw	r21,24(sp)
 800fce0:	dc800315 	stw	r18,12(sp)
 800fce4:	dfc00a15 	stw	ra,40(sp)
 800fce8:	ddc00815 	stw	r23,32(sp)
 800fcec:	dd800715 	stw	r22,28(sp)
 800fcf0:	dd000515 	stw	r20,20(sp)
 800fcf4:	dcc00415 	stw	r19,16(sp)
 800fcf8:	dc400215 	stw	r17,8(sp)
 800fcfc:	dc000115 	stw	r16,4(sp)
 800fd00:	d9000015 	stw	r4,0(sp)
 800fd04:	2839883a 	mov	fp,r5
 800fd08:	04800044 	movi	r18,1
 800fd0c:	057fffc4 	movi	r21,-1
 800fd10:	00820634 	movhi	r2,2072
 800fd14:	10a3c804 	addi	r2,r2,-28896
 800fd18:	12000017 	ldw	r8,0(r2)
 800fd1c:	45005217 	ldw	r20,328(r8)
 800fd20:	44c05204 	addi	r19,r8,328
 800fd24:	a0001c26 	beq	r20,zero,800fd98 <__call_exitprocs+0xc4>
 800fd28:	a0800117 	ldw	r2,4(r20)
 800fd2c:	15ffffc4 	addi	r23,r2,-1
 800fd30:	b8000d16 	blt	r23,zero,800fd68 <__call_exitprocs+0x94>
 800fd34:	14000044 	addi	r16,r2,1
 800fd38:	8421883a 	add	r16,r16,r16
 800fd3c:	8421883a 	add	r16,r16,r16
 800fd40:	84402004 	addi	r17,r16,128
 800fd44:	a463883a 	add	r17,r20,r17
 800fd48:	a421883a 	add	r16,r20,r16
 800fd4c:	e0001e26 	beq	fp,zero,800fdc8 <__call_exitprocs+0xf4>
 800fd50:	80804017 	ldw	r2,256(r16)
 800fd54:	e0801c26 	beq	fp,r2,800fdc8 <__call_exitprocs+0xf4>
 800fd58:	bdffffc4 	addi	r23,r23,-1
 800fd5c:	843fff04 	addi	r16,r16,-4
 800fd60:	8c7fff04 	addi	r17,r17,-4
 800fd64:	bd7ff91e 	bne	r23,r21,800fd4c <__alt_data_end+0xfc00fd4c>
 800fd68:	00800034 	movhi	r2,0
 800fd6c:	10800004 	addi	r2,r2,0
 800fd70:	10000926 	beq	r2,zero,800fd98 <__call_exitprocs+0xc4>
 800fd74:	a0800117 	ldw	r2,4(r20)
 800fd78:	1000301e 	bne	r2,zero,800fe3c <__call_exitprocs+0x168>
 800fd7c:	a0800017 	ldw	r2,0(r20)
 800fd80:	10003226 	beq	r2,zero,800fe4c <__call_exitprocs+0x178>
 800fd84:	a009883a 	mov	r4,r20
 800fd88:	98800015 	stw	r2,0(r19)
 800fd8c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 800fd90:	9d000017 	ldw	r20,0(r19)
 800fd94:	a03fe41e 	bne	r20,zero,800fd28 <__alt_data_end+0xfc00fd28>
 800fd98:	dfc00a17 	ldw	ra,40(sp)
 800fd9c:	df000917 	ldw	fp,36(sp)
 800fda0:	ddc00817 	ldw	r23,32(sp)
 800fda4:	dd800717 	ldw	r22,28(sp)
 800fda8:	dd400617 	ldw	r21,24(sp)
 800fdac:	dd000517 	ldw	r20,20(sp)
 800fdb0:	dcc00417 	ldw	r19,16(sp)
 800fdb4:	dc800317 	ldw	r18,12(sp)
 800fdb8:	dc400217 	ldw	r17,8(sp)
 800fdbc:	dc000117 	ldw	r16,4(sp)
 800fdc0:	dec00b04 	addi	sp,sp,44
 800fdc4:	f800283a 	ret
 800fdc8:	a0800117 	ldw	r2,4(r20)
 800fdcc:	80c00017 	ldw	r3,0(r16)
 800fdd0:	10bfffc4 	addi	r2,r2,-1
 800fdd4:	15c01426 	beq	r2,r23,800fe28 <__call_exitprocs+0x154>
 800fdd8:	80000015 	stw	zero,0(r16)
 800fddc:	183fde26 	beq	r3,zero,800fd58 <__alt_data_end+0xfc00fd58>
 800fde0:	95c8983a 	sll	r4,r18,r23
 800fde4:	a0806217 	ldw	r2,392(r20)
 800fde8:	a5800117 	ldw	r22,4(r20)
 800fdec:	2084703a 	and	r2,r4,r2
 800fdf0:	10000b26 	beq	r2,zero,800fe20 <__call_exitprocs+0x14c>
 800fdf4:	a0806317 	ldw	r2,396(r20)
 800fdf8:	2088703a 	and	r4,r4,r2
 800fdfc:	20000c1e 	bne	r4,zero,800fe30 <__call_exitprocs+0x15c>
 800fe00:	89400017 	ldw	r5,0(r17)
 800fe04:	d9000017 	ldw	r4,0(sp)
 800fe08:	183ee83a 	callr	r3
 800fe0c:	a0800117 	ldw	r2,4(r20)
 800fe10:	15bfbf1e 	bne	r2,r22,800fd10 <__alt_data_end+0xfc00fd10>
 800fe14:	98800017 	ldw	r2,0(r19)
 800fe18:	153fcf26 	beq	r2,r20,800fd58 <__alt_data_end+0xfc00fd58>
 800fe1c:	003fbc06 	br	800fd10 <__alt_data_end+0xfc00fd10>
 800fe20:	183ee83a 	callr	r3
 800fe24:	003ff906 	br	800fe0c <__alt_data_end+0xfc00fe0c>
 800fe28:	a5c00115 	stw	r23,4(r20)
 800fe2c:	003feb06 	br	800fddc <__alt_data_end+0xfc00fddc>
 800fe30:	89000017 	ldw	r4,0(r17)
 800fe34:	183ee83a 	callr	r3
 800fe38:	003ff406 	br	800fe0c <__alt_data_end+0xfc00fe0c>
 800fe3c:	a0800017 	ldw	r2,0(r20)
 800fe40:	a027883a 	mov	r19,r20
 800fe44:	1029883a 	mov	r20,r2
 800fe48:	003fb606 	br	800fd24 <__alt_data_end+0xfc00fd24>
 800fe4c:	0005883a 	mov	r2,zero
 800fe50:	003ffb06 	br	800fe40 <__alt_data_end+0xfc00fe40>

0800fe54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800fe54:	defffd04 	addi	sp,sp,-12
 800fe58:	df000215 	stw	fp,8(sp)
 800fe5c:	df000204 	addi	fp,sp,8
 800fe60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800fe64:	0001883a 	nop
 800fe68:	e0bfff17 	ldw	r2,-4(fp)
 800fe6c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800fe70:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800fe74:	10000226 	beq	r2,zero,800fe80 <_exit+0x2c>
    ALT_SIM_FAIL();
 800fe78:	002af070 	cmpltui	zero,zero,43969
 800fe7c:	00000106 	br	800fe84 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800fe80:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800fe84:	003fff06 	br	800fe84 <__alt_data_end+0xfc00fe84>

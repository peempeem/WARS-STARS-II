
ws2.elf:     file format elf32-littlenios2
ws2.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000000

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000021c memsz 0x0000021c flags r-x
    LOAD off    0x00002000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x0064dee8 memsz 0x0064dee8 flags r-x
    LOAD off    0x0064fee8 vaddr 0x0864dee8 paddr 0x0864fa1c align 2**12
         filesz 0x00001b34 memsz 0x00001b34 flags rw-
    LOAD off    0x00652550 vaddr 0x08651550 paddr 0x08651550 align 2**12
         filesz 0x00000000 memsz 0x0012c2f4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000021c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00017d8c  08000000  08000000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0063615c  08017d8c  08017d8c  00019d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b34  0864dee8  0864fa1c  0064fee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0012c39e  08651550  08651550  00652550  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000023c  0000023c  00651a1c  2**0
                  CONTENTS
  7 .sdram        00000000  0877d844  0877d844  00651a1c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00651a1c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000012c0  00000000  00000000  00651a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002c5fd  00000000  00000000  00652d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b45f  00000000  00000000  0067f2fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e4a9  00000000  00000000  0068a75c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003468  00000000  00000000  00698c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000509a  00000000  00000000  0069c070  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001a9f1  00000000  00000000  006a110a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  006bbafc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ee8  00000000  00000000  006bbb40  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  006c2b46  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  006c2b49  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  006c2b55  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  006c2b56  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  006c2b57  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  006c2b5b  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  006c2b5f  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  006c2b63  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  006c2b6e  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  006c2b79  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  006c2b84  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  006c2b87  2**0
                  CONTENTS, READONLY
 30 .jdi          00004a8a  00000000  00000000  006c2bba  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00080bce  00000000  00000000  006c7644  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
08000000 l    d  .text	00000000 .text
08017d8c l    d  .rodata	00000000 .rodata
0864dee8 l    d  .rwdata	00000000 .rwdata
08651550 l    d  .bss	00000000 .bss
0000023c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0877d844 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ws2_bsp//obj/HAL/src/crt0.o
08000038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 common.c
00000000 l    df *ABS*	00000000 display.c
08017d8c l     O .rodata	00000730 playership0_bitmap
080184bc l     O .rodata	00000024 playership0_sprite
080184e0 l     O .rodata	00001be8 playership1_bitmap
0801a0c8 l     O .rodata	00000024 playership1_sprite
0801a0ec l     O .rodata	00000550 enemyship0_bitmap
0801a63c l     O .rodata	00000024 enemyship0_sprite
0801a660 l     O .rodata	00001650 enemyship1_bitmap
0801bcb0 l     O .rodata	00000024 enemyship1_sprite
0801bcd4 l     O .rodata	00000200 weapon1_0_bitmap
0801bed4 l     O .rodata	00000024 weapon1_0_sprite
0801bef8 l     O .rodata	00000264 weapon2_0_bitmap
0801c15c l     O .rodata	00000024 weapon2_0_sprite
0801c180 l     O .rodata	0000002c player_missle_data
0801c1ac l     O .rodata	0000002c enemy_missle_data
0801c1d8 l     O .rodata	00000050 player_fighter
0801c228 l     O .rodata	00000050 player_cruiser
0801c278 l     O .rodata	00000050 enemy_fighter
0801c2c8 l     O .rodata	00000050 enemy_cruiser
08651550 l     O .bss	00000004 frame.1849
00000000 l    df *ABS*	00000000 game.c
0801c318 l     O .rodata	00000730 playership0_bitmap
0801ca48 l     O .rodata	00000024 playership0_sprite
0801ca6c l     O .rodata	00001be8 playership1_bitmap
0801e654 l     O .rodata	00000024 playership1_sprite
0801e678 l     O .rodata	00000550 enemyship0_bitmap
0801ebc8 l     O .rodata	00000024 enemyship0_sprite
0801ebec l     O .rodata	00001650 enemyship1_bitmap
0802023c l     O .rodata	00000024 enemyship1_sprite
08020260 l     O .rodata	00000200 weapon1_0_bitmap
08020460 l     O .rodata	00000024 weapon1_0_sprite
08020484 l     O .rodata	00000264 weapon2_0_bitmap
080206e8 l     O .rodata	00000024 weapon2_0_sprite
0802070c l     O .rodata	0000002c player_missle_data
08020738 l     O .rodata	0000002c enemy_missle_data
08020764 l     O .rodata	00000050 player_fighter
080207b4 l     O .rodata	00000050 player_cruiser
08020804 l     O .rodata	00000050 enemy_fighter
08020854 l     O .rodata	00000050 enemy_cruiser
00000000 l    df *ABS*	00000000 gdu.c
0864f9c4 l     O .rwdata	00000004 gdu_mem
00000000 l    df *ABS*	00000000 level1.c
080208a4 l     O .rodata	00000730 playership0_bitmap
08020fd4 l     O .rodata	00000024 playership0_sprite
08020ff8 l     O .rodata	00001be8 playership1_bitmap
08022be0 l     O .rodata	00000024 playership1_sprite
08022c04 l     O .rodata	00000550 enemyship0_bitmap
08023154 l     O .rodata	00000024 enemyship0_sprite
08023178 l     O .rodata	00001650 enemyship1_bitmap
080247c8 l     O .rodata	00000024 enemyship1_sprite
080247ec l     O .rodata	00000200 weapon1_0_bitmap
080249ec l     O .rodata	00000024 weapon1_0_sprite
08024a10 l     O .rodata	00000264 weapon2_0_bitmap
08024c74 l     O .rodata	00000024 weapon2_0_sprite
08024c98 l     O .rodata	0000002c player_missle_data
08024cc4 l     O .rodata	0000002c enemy_missle_data
08024cf0 l     O .rodata	00000050 player_fighter
08024d40 l     O .rodata	00000050 player_cruiser
08024d90 l     O .rodata	00000050 enemy_fighter
08024de0 l     O .rodata	00000050 enemy_cruiser
08024e30 l     O .rodata	000e1000 level1_background_bitmap
08105e30 l     O .rodata	00000024 level1_background_sprite
08105e54 l     O .rodata	0002bf20 level1_player_planet_bitmap
08131d74 l     O .rodata	00000024 level1_player_planet_sprite
08131d98 l     O .rodata	0002bf20 level1_enemy_planet_bitmap
0815dcb8 l     O .rodata	00000024 level1_enemy_planet_sprite
0815dcdc l     O .rodata	00012c00 statusbar_bitmap
081708dc l     O .rodata	00000024 statusbar_sprite
08170900 l     O .rodata	0000254c greenhealth_bitmap
08172e4c l     O .rodata	00000024 greenhealth_sprite
08172e70 l     O .rodata	0000254c redhealth_bitmap
081753bc l     O .rodata	00000024 redhealth_sprite
081753e0 l     O .rodata	000009b0 warning_bitmap
08175d90 l     O .rodata	00000024 warning_sprite
08175db4 l     O .rodata	00000420 cursor_bitmap
081761d4 l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 lose.c
081761f8 l     O .rodata	00177000 lightspeed_background_bitmap
082ed1f8 l     O .rodata	00000024 lightspeed_background_sprite
082ed21c l     O .rodata	00000730 playership0_bitmap
082ed94c l     O .rodata	00000024 playership0_sprite
082ed970 l     O .rodata	00001be8 playership1_bitmap
082ef558 l     O .rodata	00000024 playership1_sprite
082ef57c l     O .rodata	00000550 enemyship0_bitmap
082efacc l     O .rodata	00000024 enemyship0_sprite
082efaf0 l     O .rodata	00001650 enemyship1_bitmap
082f1140 l     O .rodata	00000024 enemyship1_sprite
082f1164 l     O .rodata	00000200 weapon1_0_bitmap
082f1364 l     O .rodata	00000024 weapon1_0_sprite
082f1388 l     O .rodata	00000264 weapon2_0_bitmap
082f15ec l     O .rodata	00000024 weapon2_0_sprite
082f1610 l     O .rodata	0000002c player_missle_data
082f163c l     O .rodata	0000002c enemy_missle_data
082f1668 l     O .rodata	00000050 player_fighter
082f16b8 l     O .rodata	00000050 player_cruiser
082f1708 l     O .rodata	00000050 enemy_fighter
082f1758 l     O .rodata	00000050 enemy_cruiser
082f17a8 l     O .rodata	00000420 cursor_bitmap
082f1bc8 l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 title_screen.c
082f1bec l     O .rodata	00000730 playership0_bitmap
082f231c l     O .rodata	00000024 playership0_sprite
082f2340 l     O .rodata	00001be8 playership1_bitmap
082f3f28 l     O .rodata	00000024 playership1_sprite
082f3f4c l     O .rodata	00000550 enemyship0_bitmap
082f449c l     O .rodata	00000024 enemyship0_sprite
082f44c0 l     O .rodata	00001650 enemyship1_bitmap
082f5b10 l     O .rodata	00000024 enemyship1_sprite
082f5b34 l     O .rodata	00000200 weapon1_0_bitmap
082f5d34 l     O .rodata	00000024 weapon1_0_sprite
082f5d58 l     O .rodata	00000264 weapon2_0_bitmap
082f5fbc l     O .rodata	00000024 weapon2_0_sprite
082f5fe0 l     O .rodata	0000002c player_missle_data
082f600c l     O .rodata	0000002c enemy_missle_data
082f6038 l     O .rodata	00000050 player_fighter
082f6088 l     O .rodata	00000050 player_cruiser
082f60d8 l     O .rodata	00000050 enemy_fighter
082f6128 l     O .rodata	00000050 enemy_cruiser
082f6178 l     O .rodata	00177000 lightspeed_background_bitmap
0846d178 l     O .rodata	00000024 lightspeed_background_sprite
0846d19c l     O .rodata	0000b3b0 title_screen_ship_bitmap
0847854c l     O .rodata	00000024 title_screen_ship_sprite
08478570 l     O .rodata	0000d8f0 WAR_STARS_II_bitmap
08485e60 l     O .rodata	00000024 WAR_STARS_II_sprite
08485e84 l     O .rodata	00009ab0 start_button_unpressed_bitmap
0848f934 l     O .rodata	00000024 start_button_unpressed_sprite
0848f958 l     O .rodata	00009ab0 start_button_pressed_bitmap
08499408 l     O .rodata	00000024 start_button_pressed_sprite
0849942c l     O .rodata	00000420 cursor_bitmap
0849984c l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 win.c
08499870 l     O .rodata	00177000 lightspeed_background_bitmap
08610870 l     O .rodata	00000024 lightspeed_background_sprite
08610894 l     O .rodata	00000730 playership0_bitmap
08610fc4 l     O .rodata	00000024 playership0_sprite
08610fe8 l     O .rodata	00001be8 playership1_bitmap
08612bd0 l     O .rodata	00000024 playership1_sprite
08612bf4 l     O .rodata	00000550 enemyship0_bitmap
08613144 l     O .rodata	00000024 enemyship0_sprite
08613168 l     O .rodata	00001650 enemyship1_bitmap
086147b8 l     O .rodata	00000024 enemyship1_sprite
086147dc l     O .rodata	00000200 weapon1_0_bitmap
086149dc l     O .rodata	00000024 weapon1_0_sprite
08614a00 l     O .rodata	00000264 weapon2_0_bitmap
08614c64 l     O .rodata	00000024 weapon2_0_sprite
08614c88 l     O .rodata	0000002c player_missle_data
08614cb4 l     O .rodata	0000002c enemy_missle_data
08614ce0 l     O .rodata	00000050 player_fighter
08614d30 l     O .rodata	00000050 player_cruiser
08614d80 l     O .rodata	00000050 enemy_fighter
08614dd0 l     O .rodata	00000050 enemy_cruiser
08614e20 l     O .rodata	00000420 cursor_bitmap
08615240 l     O .rodata	00000024 cursor_sprite
00000000 l    df *ABS*	00000000 main.c
08615264 l     O .rodata	00000730 playership0_bitmap
08615994 l     O .rodata	00000024 playership0_sprite
086159b8 l     O .rodata	00001be8 playership1_bitmap
086175a0 l     O .rodata	00000024 playership1_sprite
086175c4 l     O .rodata	00000550 enemyship0_bitmap
08617b14 l     O .rodata	00000024 enemyship0_sprite
08617b38 l     O .rodata	00001650 enemyship1_bitmap
08619188 l     O .rodata	00000024 enemyship1_sprite
086191ac l     O .rodata	00000200 weapon1_0_bitmap
086193ac l     O .rodata	00000024 weapon1_0_sprite
086193d0 l     O .rodata	00000264 weapon2_0_bitmap
08619634 l     O .rodata	00000024 weapon2_0_sprite
08619658 l     O .rodata	0000002c player_missle_data
08619684 l     O .rodata	0000002c enemy_missle_data
086196b0 l     O .rodata	00000050 player_fighter
08619700 l     O .rodata	00000050 player_cruiser
08619750 l     O .rodata	00000050 enemy_fighter
086197a0 l     O .rodata	00000050 enemy_cruiser
086197f0 l     O .rodata	00034260 mouse_bitmap
0864da50 l     O .rodata	00000024 mouse_sprite
00000000 l    df *ABS*	00000000 mouse.c
0864f9c8 l     O .rwdata	00000001 addr
08651554 l     O .bss	00000001 runningdebugflag.3268
08651555 l     O .bss	00000001 device.3267
08651556 l     O .bss	00000008 buf.3266
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
0865156c l     O .bss	00000004 usb_delay.2652
08651570 l     O .bss	00000001 tmp_addr.2653
00000000 l    df *ABS*	00000000 vga.c
086515d4 l     O .bss	0012c000 vga_mem
0864f9dc l     O .rwdata	00000004 vga_regs
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0864dd2e l     O .rodata	00000010 zeroes.4404
0800cdac l     F .text	000000bc __sbprintf
0864dd3e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0800cfbc l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0800eb14 l     F .text	00000008 __fp_unlock
0800eb28 l     F .text	0000019c __sinit.part.1
0800ecc4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0864df18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0864e35c l     O .rwdata	00000020 lc_ctype_charset
0864e33c l     O .rwdata	00000020 lc_message_charset
0864e37c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
0864dd70 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011f28 l     F .text	000000fc __sprint_r.part.0
0864de94 l     O .rodata	00000010 zeroes.4349
08013564 l     F .text	000000bc __sbprintf
0864dea4 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
08015264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08015378 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
080153a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08015498 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08015580 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801566c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08015848 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0864fa10 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08015c90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08015dcc l     F .text	00000034 alt_dev_reg
0864e964 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080160c0 l     F .text	0000020c altera_avalon_jtag_uart_irq
080162cc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08016b00 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08016e98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080172f8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08017458 l     F .text	0000003c alt_get_errno
08017494 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
086515a8 g     O .bss	00000004 alt_instruction_exception_handler
0801156c g     F .text	00000074 _mprec_log10
080015dc g     F .text	00000054 weapon_select
08011658 g     F .text	0000008c __any_on
08013b18 g     F .text	00000054 _isatty_r
0864dd7c g     O .rodata	00000028 __mprec_tinytens
08015784 g     F .text	0000007c alt_main
08001630 g     F .text	000000b4 allocate_weapon
0864f9d0 g     O .rwdata	00000008 ctrl_xfers
0800a8cc g     F .text	000000c0 _puts_r
0877d744 g     O .bss	00000100 alt_irq
08013b6c g     F .text	00000060 _lseek_r
08005dac g     F .text	00000644 USB_Task
0864fa1c g       *ABS*	00000000 __flash_rwdata_start
0801500c g     F .text	00000088 .hidden __eqdf2
08000f38 g     F .text	000000b4 allocate_ship
0877d844 g       *ABS*	00000000 __alt_heap_start
0800a890 g     F .text	0000003c printf
08013d84 g     F .text	0000009c _wcrtomb_r
08004fd8 g     F .text	00000088 kbdPoll
08011de8 g     F .text	0000005c __sseek
0800ee74 g     F .text	00000010 __sinit
08013c2c g     F .text	00000140 __swbuf_r
0800f948 g     F .text	0000007c _setlocale_r
0800eccc g     F .text	00000078 __sfmoreglue
08001728 g     F .text	00000200 spawn_weapon
08015824 g     F .text	00000024 __malloc_unlock
08003f3c g     F .text	000001bc GetDriverandReport
08001928 g     F .text	00000600 update_ships
08007650 g     F .text	00000440 .hidden __divsf3
0800446c g     F .text	00000028 disable_master_timer
080104d0 g     F .text	0000015c memmove
0800ee5c g     F .text	00000018 _cleanup
08000ee4 g     F .text	00000054 ship_select
0801062c g     F .text	000000a8 _Balloc
08008528 g     F .text	00000070 .hidden __fixsfsi
080066e8 g     F .text	00000058 set_aura
0800512c g     F .text	0000006c MAXreg_wr
0864dee8 g     O .rwdata	00000030 ClientDriverTable
08008f68 g     F .text	000000dc .hidden __gtdf2
080176dc g     F .text	00000024 altera_nios2_gen2_irq_init
080063f0 g     F .text	0000002c MSDProbe
00000000 g     F .entry	0000000c __reset
080058ac g     F .text	000000e8 XferCtrlData
00000020 g       *ABS*	00000000 __flash_exceptions_start
086515ac g     O .bss	00000010 hid_ep
08013abc g     F .text	0000005c _fstat_r
0865158c g     O .bss	00000004 errno
08011d64 g     F .text	00000008 __seofread
08651594 g     O .bss	00000004 alt_argv
086579c4 g       *ABS*	00000000 _gp
08015c60 g     F .text	00000030 usleep
08005230 g     F .text	0000005c MAXreg_rd
08008044 g     F .text	000004e4 .hidden __subsf3
08004554 g     F .text	000000bc create_rate
08004494 g     F .text	0000005c get_time
080043c0 g     F .text	00000080 is_clicked
08002564 g     F .text	0000009c update_game
0864e7e4 g     O .rwdata	00000180 alt_fd_list
08004ef8 g     F .text	00000040 HID_init
08017700 g     F .text	00000090 alt_find_dev
0800a5f0 g     F .text	00000148 memcpy
0800eb1c g     F .text	0000000c _cleanup_r
08015188 g     F .text	000000dc .hidden __floatsidf
080173dc g     F .text	0000007c alt_io_redirect
08015094 g     F .text	000000f4 .hidden __ltdf2
08000420 g     F .text	00000048 double_render
08017d8c g       *ABS*	00000000 __DTOR_END__
0800a98c g     F .text	00000014 puts
0801795c g     F .text	0000009c alt_exception_cause_generated_bad_addr
080044f0 g     F .text	00000064 get_micros
08011c48 g     F .text	00000074 __fpclassifyd
080114c8 g     F .text	000000a4 __ratio
08013548 g     F .text	0000001c __vfiprintf_internal
080164c4 g     F .text	0000021c altera_avalon_jtag_uart_read
0800a860 g     F .text	00000030 _printf_r
08000c8c g     F .text	00000034 deallocate_object
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
080016e4 g     F .text	00000044 destroy_weapon
080070a4 g     F .text	00000064 .hidden __udivsi3
080154d4 g     F .text	000000ac isatty
0864ddcc g     O .rodata	000000c8 __mprec_tens
0800f9c4 g     F .text	0000000c __locale_charset
08007b4c g     F .text	000000c8 .hidden __lesf2
080068a0 g     F .text	00000074 .hidden __fixunsdfsi
080006b8 g     F .text	000001b8 mouse_over_object
08651588 g     O .bss	00000004 __malloc_top_pad
0864f9d8 g     O .rwdata	00000001 usb_task_state
0864f9e8 g     O .rwdata	00000004 __mb_cur_max
0800f9f4 g     F .text	0000000c _localeconv_r
08010a60 g     F .text	0000003c __i2b
0800f2f8 g     F .text	000004c8 __sfvwrite_r
08011cbc g     F .text	00000054 _sbrk_r
08013bcc g     F .text	00000060 _read_r
08005568 g     F .text	00000094 MAX3421E_init
0864fa08 g     O .rwdata	00000004 alt_max_fd
080137b0 g     F .text	000000f0 _fclose_r
0800eae4 g     F .text	00000030 fflush
08651584 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a2d4 g     F .text	00000110 .hidden __extendsfdf2
0864f9cc g     O .rwdata	00000004 timer_regs
080086bc g     F .text	000008ac .hidden __adddf3
08011270 g     F .text	0000010c __b2d
080065f8 g     F .text	00000040 vga_init
08014078 g     F .text	000005c4 .hidden __umoddi3
080156a8 g     F .text	000000dc lseek
0864f9e0 g     O .rwdata	00000004 _global_impure_ptr
080116e4 g     F .text	00000564 _realloc_r
00001000 g       *ABS*	00000000 __alt_exception_stack_pointer
0877d844 g       *ABS*	00000000 __bss_end
08017208 g     F .text	000000f0 alt_iic_isr_register
08015b58 g     F .text	00000108 alt_tick
080069b0 g     F .text	000005fc .hidden __udivdi3
08013a18 g     F .text	00000024 _fputwc_r
080067c4 g     F .text	0000007c getPixel
0864dda4 g     O .rodata	00000028 __mprec_bigtens
08010844 g     F .text	00000104 __s2b
0800a22c g     F .text	000000a8 .hidden __floatunsidf
08010fb0 g     F .text	00000060 __mcmp
080013d0 g     F .text	00000084 distance
080010c0 g     F .text	0000017c spawn_ship
0800ee94 g     F .text	00000018 __fp_lock_all
080171bc g     F .text	0000004c alt_ic_irq_enabled
08015abc g     F .text	0000009c alt_alarm_stop
086515a4 g     O .bss	00000004 alt_irq_active
080064b8 g     F .text	0000002c DummyProbe
00000108 g     F .exceptions	000000d4 alt_irq_handler
0864e7bc g     O .rwdata	00000028 alt_dev_null
08004f38 g     F .text	000000a0 mousePoll
08000cc0 g     F .text	000001e0 push_scene
080053bc g     F .text	00000024 Vbus_power
08016e78 g     F .text	00000020 alt_dcache_flush_all
08010948 g     F .text	00000068 __hi0bits
080004d4 g     F .text	00000060 start_fade
0800a1ac g     F .text	00000080 .hidden __fixdfsi
08000258 g     F .text	00000158 slow_down
0864fa1c g       *ABS*	00000000 __ram_rwdata_end
0864fa00 g     O .rwdata	00000008 alt_dev_list
08015ccc g     F .text	00000100 write
08007a90 g     F .text	000000bc .hidden __gtsf2
0864dee8 g       *ABS*	00000000 __ram_rodata_end
08651571 g     O .bss	00000001 usb_error
080153e0 g     F .text	000000b8 fstat
08015094 g     F .text	000000f4 .hidden __ledf2
08010d28 g     F .text	00000140 __pow5mult
0801203c g     F .text	0000150c ___vfiprintf_internal_r
0865157c g     O .bss	00000004 __nlocale_changed
08007108 g     F .text	00000058 .hidden __umodsi3
0877d844 g       *ABS*	00000000 end
080066c4 g     F .text	00000024 is_vblank
08016000 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001dc g     F .exceptions	00000060 alt_instruction_exception_entry
08005a08 g     F .text	0000017c XferDispatchPkt
08004128 g     F .text	00000088 new_mouse
08017d8c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08016b78 g     F .text	0000007c alt_avalon_timer_sc_init
0800a58c g     F .text	00000064 .hidden __clzsi2
080166e0 g     F .text	00000224 altera_avalon_jtag_uart_write
08000534 g     F .text	00000070 is_fade_done
0800ee84 g     F .text	00000004 __sfp_lock_acquire
080103ec g     F .text	000000e4 memchr
0800aab4 g     F .text	000022dc ___vfprintf_internal_r
0800572c g     F .text	00000034 MaxGpxHandler
08002640 g     F .text	00000024 gdu_is_running
0800efe8 g     F .text	00000310 _free_r
08006674 g     F .text	00000050 get_frame
08003580 g     F .text	0000012c run_lose
0800f9d0 g     F .text	00000010 __locale_mb_cur_max
080041b0 g     F .text	00000210 poll_mouse
08017bd8 g     F .text	00000180 __call_exitprocs
08651578 g     O .bss	00000004 __mlocale_changed
0864f9ec g     O .rwdata	00000004 __malloc_sbrk_base
08000000 g     F .text	0000003c _start
0865159c g     O .bss	00000004 _alt_tick_rate
0800528c g     F .text	00000090 MAXbytes_rd
0800a9b8 g     F .text	00000064 rand
08010e68 g     F .text	00000148 __lshift
08016904 g     F .text	000001fc alt_avalon_spi_command
086515a0 g     O .bss	00000004 _alt_nticks
08015884 g     F .text	00000104 read
08015e38 g     F .text	00000064 alt_sys_init
08008598 g     F .text	00000124 .hidden __floatsisf
0877d6fc g     O .bss	00000048 devtable
080026b4 g     F .text	00000030 gdu_set_frame
08017ac0 g     F .text	00000118 __register_exitproc
08004af0 g     F .text	00000408 HIDKProbe
086515bc g     O .bss	00000018 msd_ep
080005a4 g     F .text	00000114 show_fade
080036ac g     F .text	00000648 run_title_screen
08010a9c g     F .text	0000028c __multiply
0801636c g     F .text	00000068 altera_avalon_jtag_uart_close
08005d14 g     F .text	00000098 USB_init
0877d5fc g     O .bss	00000100 bigbuf
08007160 g     F .text	00000028 .hidden __mulsi3
0864dee8 g       *ABS*	00000000 __ram_rwdata_start
08017d8c g       *ABS*	00000000 __ram_rodata_start
0877d5d4 g     O .bss	00000028 __malloc_current_mallinfo
08001330 g     F .text	000000a0 isqrt
08651568 g     O .bss	00000001 last_usb_task_state
0801137c g     F .text	0000014c __d2b
08001f28 g     F .text	0000063c update_weapons
08651560 g     O .bss	00000008 dev0ep
08015e9c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08017898 g     F .text	000000c4 alt_get_fd
08016d20 g     F .text	00000158 alt_busy_sleep
0800641c g     F .text	00000038 MSDEventHandler
08013680 g     F .text	00000054 _close_r
08002600 g     F .text	00000040 gdu_run
08017a44 g     F .text	0000007c memcmp
08015f5c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0877d844 g       *ABS*	00000000 __alt_stack_base
08015fac g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08006914 g     F .text	0000009c .hidden __floatundisf
0800ce68 g     F .text	00000154 __swsetup_r
0801463c g     F .text	000009d0 .hidden __divdf3
0800ed44 g     F .text	00000118 __sfp
080115e0 g     F .text	00000078 __copybits
0864e3b4 g     O .rwdata	00000408 __malloc_av_
0800ee90 g     F .text	00000004 __sinit_lock_release
08006480 g     F .text	00000038 CDCEventHandler
08009044 g     F .text	0000086c .hidden __muldf3
08003cf4 g     F .text	0000012c run_win
080064e4 g     F .text	00000038 DummyEventHandler
08011d10 g     F .text	00000054 __sread
08017790 g     F .text	00000108 alt_find_file
08000ac8 g     F .text	000001c4 allocate_object
08016ed4 g     F .text	000000a4 alt_dev_llist_insert
08015800 g     F .text	00000024 __malloc_lock
08015a0c g     F .text	000000b0 sbrk
0800ea88 g     F .text	0000005c _fflush_r
080136d4 g     F .text	000000dc _calloc_r
08004440 g     F .text	0000002c enable_master_timer
08651550 g       *ABS*	00000000 __bss_start
080027ac g     F .text	00000070 push_sprite
080053e0 g     F .text	00000188 MAX_busprobe
0865155e g     O .bss	00000002 hid_device
0800a738 g     F .text	00000128 memset
08003e20 g     F .text	0000011c main
080055fc g     F .text	00000064 MAX3421E_Task
08651598 g     O .bss	00000004 alt_envp
08651580 g     O .bss	00000004 __malloc_max_total_mem
08015efc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08013d6c g     F .text	00000018 __swbuf
0800a9a0 g     F .text	00000018 srand
08006574 g     F .text	00000084 ConvUTF8ToStr
08007b4c g     F .text	000000c8 .hidden __ltsf2
08011e44 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080138a0 g     F .text	00000014 fclose
0800a3e4 g     F .text	000001a8 .hidden __truncdfsf2
0800d1e4 g     F .text	00001688 _dtoa_r
0800fbe0 g     F .text	0000080c _malloc_r
08013ee0 g     F .text	00000030 __ascii_wctomb
0864fa0c g     O .rwdata	00000004 alt_errno
08002664 g     F .text	00000050 gdu_reset
0800f7c0 g     F .text	000000c4 _fwalk
08000468 g     F .text	0000006c create_fade
08006fac g     F .text	00000084 .hidden __divsi3
08005b84 g     F .text	00000190 XferInTransfer
0800eec4 g     F .text	00000124 _malloc_trim_r
08004610 g     F .text	000000d8 is_ready
08017d8c g       *ABS*	00000000 __CTOR_END__
08007c14 g     F .text	00000430 .hidden __mulsf3
0800653c g     F .text	00000038 GetDevtable
08011e4c g     F .text	000000dc strcmp
0800123c g     F .text	000000f4 destroy_ship
08017d8c g       *ABS*	00000000 __flash_rodata_start
08017d8c g       *ABS*	00000000 __DTOR_LIST__
08005994 g     F .text	00000074 XferCtrlND
0801500c g     F .text	00000088 .hidden __nedf2
0800531c g     F .text	000000a0 MAX3421E_reset
0800281c g     F .text	00000068 pop_sprite
08015e00 g     F .text	00000038 alt_irq_init
08015988 g     F .text	00000084 alt_release_fd
0864dbe8 g     O .rodata	00000100 .hidden __clz_tab
08651574 g     O .bss	00000004 _PathLocale
080179f8 g     F .text	00000014 atexit
08007a90 g     F .text	000000bc .hidden __gesf2
08013620 g     F .text	00000060 _write_r
0800fa00 g     F .text	00000018 setlocale
0864f9e4 g     O .rwdata	00000004 _impure_ptr
08651590 g     O .bss	00000004 alt_argc
0800e86c g     F .text	0000021c __sflush_r
08016fd8 g     F .text	00000060 _do_dtors
0800f9ec g     F .text	00000008 __locale_cjk_lang
08005198 g     F .text	00000098 MAXbytes_wr
00000020 g       .exceptions	00000000 alt_irq_entry
0801120c g     F .text	00000064 __ulp
0800eeac g     F .text	00000018 __fp_unlock_all
08000fec g     F .text	000000d4 ship_count
0864f9f8 g     O .rwdata	00000008 alt_fs_list
08006454 g     F .text	0000002c CDCProbe
00000020 g       *ABS*	00000000 __ram_exceptions_start
0800fa18 g     F .text	0000000c localeconv
0800651c g     F .text	00000020 GetUsbTaskState
08017058 g     F .text	00000050 alt_ic_isr_register
0864fa1c g       *ABS*	00000000 _edata
080026e4 g     F .text	000000c8 convert_sprite
08005098 g     F .text	00000038 HIDKEventHandler
0877d844 g       *ABS*	00000000 _end
080008dc g     F .text	000001a0 handle_mouse
08005660 g     F .text	000000cc MaxIntHandler
080138b4 g     F .text	00000164 __fputwc
0000023c g       *ABS*	00000000 __ram_exceptions_end
080163d4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
080050d0 g     F .text	00000034 SPI_init
08017130 g     F .text	0000008c alt_ic_irq_disable
08000ea0 g     F .text	00000044 clear_scene
08011d6c g     F .text	0000007c __swrite
0864f9f0 g     O .rwdata	00000004 __malloc_trim_threshold
0800f9e0 g     F .text	0000000c __locale_msgcharset
08017a0c g     F .text	00000038 exit
0800f884 g     F .text	000000c4 _fwalk_reent
08011010 g     F .text	000001fc __mdiff
08007030 g     F .text	00000074 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
0800ee88 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
080040f8 g     F .text	00000030 init_mouse
08006840 g     F .text	00000060 .hidden __fixunssfsi
08005060 g     F .text	00000038 HIDMEventHandler
08001454 g     F .text	00000188 closest_ship
08000a7c g     F .text	0000004c init_object
08017d58 g     F .text	00000034 _exit
08016bf4 g     F .text	0000012c alt_alarm_start
08013f6c g     F .text	0000010c .hidden __muldi3
0800fa24 g     F .text	000001bc __smakebuf_r
0800aa1c g     F .text	00000098 strlen
08017580 g     F .text	0000015c open
08000174 g     F .text	000000e4 cap_velocity
08008f68 g     F .text	000000dc .hidden __gedf2
08000870 g     F .text	0000006c mouse_to_game
0864f9f4 g     O .rwdata	00000004 __wctomb
08006740 g     F .text	00000084 setPixel
08012024 g     F .text	00000018 __sprint_r
08017038 g     F .text	00000020 alt_icache_flush_all
080170a8 g     F .text	00000088 alt_ic_irq_enable
0800cd90 g     F .text	0000001c __vfprintf_internal
080046e8 g     F .text	00000408 HIDMProbe
08013f10 g     F .text	0000005c _wctomb_r
080003b0 g     F .text	00000070 start_render
08005104 g     F .text	00000028 SPI_wr
080098b0 g     F .text	000008fc .hidden __subdf3
080109b0 g     F .text	000000b0 __lo0bits
0800003c g     F .text	00000138 update_physics
0864fa14 g     O .rwdata	00000008 alt_alarm_list
08016f78 g     F .text	00000060 _do_ctors
08013e20 g     F .text	000000c0 wcrtomb
080152a0 g     F .text	000000d8 close
08007188 g     F .text	000004c8 .hidden __addsf3
08006638 g     F .text	0000003c set_frame
080155e8 g     F .text	00000084 alt_load
08013a3c g     F .text	00000080 fputwc
0800ee8c g     F .text	00000004 __sinit_lock_acquire
08005760 g     F .text	0000014c XferCtrlReq
08002884 g     F .text	00000cfc run_level1
080106fc g     F .text	00000148 __multadd
080106d4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
   4:	08400014 	ori	at,at,0
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

        /* 
         * Switch to the exception stack and save the current stack pointer
         * in memory. Uses the et register as a scratch register.
         */
        movhi et, %hi(__alt_exception_stack_pointer - 80)
  20:	06000034 	movhi	et,0
        ori   et, et, %lo(__alt_exception_stack_pointer - 80) 
  24:	c603ec14 	ori	et,et,4016
        stw   sp, 76(et)
  28:	c6c01315 	stw	sp,76(et)
        mov   sp, et
  2c:	c037883a 	mov	sp,et
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  30:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  34:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  38:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  3c:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  40:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  44:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  48:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  4c:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  50:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  54:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  58:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  5c:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  60:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  64:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  68:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  6c:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  70:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  74:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  78:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  7c:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  80:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  84:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  88:	10000326 	beq	r2,zero,98 <alt_exception+0x78>
        beq   r4, zero, .Lnot_irq
  8c:	20000226 	beq	r4,zero,98 <alt_exception+0x78>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  90:	00001080 	call	108 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  94:	00000706 	br	b4 <alt_exception+0x94>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  98:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  9c:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  a0:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  a4:	00001dc0 	call	1dc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  a8:	1000021e 	bne	r2,zero,b4 <alt_exception+0x94>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  ac:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  b0:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  b4:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  b8:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  bc:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  c0:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  c4:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  c8:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  cc:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  d0:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  d4:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  d8:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  dc:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  e0:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  e4:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  e8:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  ec:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  f0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  f4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  f8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  fc:	dbc01017 	ldw	r15,64(sp)
#ifdef ALT_EXCEPTION_STACK
#ifdef ALT_STACK_CHECK
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
 100:	dec01317 	ldw	sp,76(sp)

        /*
         * Return to the interrupted instruction.
         */

        eret
 104:	ef80083a 	eret

00000108 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 108:	defff904 	addi	sp,sp,-28
 10c:	dfc00615 	stw	ra,24(sp)
 110:	df000515 	stw	fp,20(sp)
 114:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 118:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 11c:	0005313a 	rdctl	r2,ipending
 120:	e0bffe15 	stw	r2,-8(fp)

  return active;
 124:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 128:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 12c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 130:	00800044 	movi	r2,1
 134:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 138:	e0fffb17 	ldw	r3,-20(fp)
 13c:	e0bffc17 	ldw	r2,-16(fp)
 140:	1884703a 	and	r2,r3,r2
 144:	10001426 	beq	r2,zero,198 <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 148:	00821e34 	movhi	r2,2168
 14c:	10b5d104 	addi	r2,r2,-10428
 150:	e0fffd17 	ldw	r3,-12(fp)
 154:	180690fa 	slli	r3,r3,3
 158:	10c5883a 	add	r2,r2,r3
 15c:	10c00017 	ldw	r3,0(r2)
 160:	00821e34 	movhi	r2,2168
 164:	10b5d104 	addi	r2,r2,-10428
 168:	e13ffd17 	ldw	r4,-12(fp)
 16c:	200890fa 	slli	r4,r4,3
 170:	1105883a 	add	r2,r2,r4
 174:	10800104 	addi	r2,r2,4
 178:	10800017 	ldw	r2,0(r2)
 17c:	1009883a 	mov	r4,r2
 180:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 184:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 188:	0005313a 	rdctl	r2,ipending
 18c:	e0bfff15 	stw	r2,-4(fp)

  return active;
 190:	e0bfff17 	ldw	r2,-4(fp)
 194:	00000706 	br	1b4 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 198:	e0bffc17 	ldw	r2,-16(fp)
 19c:	1085883a 	add	r2,r2,r2
 1a0:	e0bffc15 	stw	r2,-16(fp)
      i++;
 1a4:	e0bffd17 	ldw	r2,-12(fp)
 1a8:	10800044 	addi	r2,r2,1
 1ac:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1b0:	003fe106 	br	138 <__alt_data_end+0xf4000138>

    active = alt_irq_pending ();
 1b4:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1b8:	e0bffb17 	ldw	r2,-20(fp)
 1bc:	103fdb1e 	bne	r2,zero,12c <__alt_data_end+0xf400012c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1c0:	0001883a 	nop
}
 1c4:	0001883a 	nop
 1c8:	e037883a 	mov	sp,fp
 1cc:	dfc00117 	ldw	ra,4(sp)
 1d0:	df000017 	ldw	fp,0(sp)
 1d4:	dec00204 	addi	sp,sp,8
 1d8:	f800283a 	ret

000001dc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1dc:	defffb04 	addi	sp,sp,-20
 1e0:	dfc00415 	stw	ra,16(sp)
 1e4:	df000315 	stw	fp,12(sp)
 1e8:	df000304 	addi	fp,sp,12
 1ec:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1f8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1fc:	d0a6f917 	ldw	r2,-25628(gp)
 200:	10000726 	beq	r2,zero,220 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 204:	d0a6f917 	ldw	r2,-25628(gp)
 208:	e0fffd17 	ldw	r3,-12(fp)
 20c:	e1bffe17 	ldw	r6,-8(fp)
 210:	e17fff17 	ldw	r5,-4(fp)
 214:	1809883a 	mov	r4,r3
 218:	103ee83a 	callr	r2
 21c:	00000206 	br	228 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 220:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 224:	0005883a 	mov	r2,zero
}
 228:	e037883a 	mov	sp,fp
 22c:	dfc00117 	ldw	ra,4(sp)
 230:	df000017 	ldw	fp,0(sp)
 234:	dec00204 	addi	sp,sp,8
 238:	f800283a 	ret

Disassembly of section .text:

08000000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000000:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000004:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000008:	06821974 	movhi	gp,2149
    ori gp, gp, %lo(_gp)
 800000c:	d69e7114 	ori	gp,gp,31172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000010:	00821974 	movhi	r2,2149
    ori r2, r2, %lo(__bss_start)
 8000014:	10855414 	ori	r2,r2,5456

    movhi r3, %hi(__bss_end)
 8000018:	00c21df4 	movhi	r3,2167
    ori r3, r3, %lo(__bss_end)
 800001c:	18f61114 	ori	r3,r3,55364

    beq r2, r3, 1f
 8000020:	10c00326 	beq	r2,r3,8000030 <_start+0x30>

0:
    stw zero, (r2)
 8000024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800002c:	10fffd36 	bltu	r2,r3,8000024 <__alt_data_end+0xfc000024>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000030:	80155e80 	call	80155e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000034:	80157840 	call	8015784 <alt_main>

08000038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000038:	003fff06 	br	8000038 <__alt_data_end+0xfc000038>

0800003c <update_physics>:
#include "common.h"
#include "math.h"

void update_physics(physics_t* phys, float dt) {
 800003c:	defffb04 	addi	sp,sp,-20
 8000040:	dfc00415 	stw	ra,16(sp)
 8000044:	df000315 	stw	fp,12(sp)
 8000048:	dc000215 	stw	r16,8(sp)
 800004c:	df000304 	addi	fp,sp,12
 8000050:	e13ffd15 	stw	r4,-12(fp)
 8000054:	e17ffe15 	stw	r5,-8(fp)
    phys->v.x += phys->a.x * dt;
 8000058:	e0bffd17 	ldw	r2,-12(fp)
 800005c:	14000217 	ldw	r16,8(r2)
 8000060:	e0bffd17 	ldw	r2,-12(fp)
 8000064:	10c00417 	ldw	r3,16(r2)
 8000068:	e17ffe17 	ldw	r5,-8(fp)
 800006c:	1809883a 	mov	r4,r3
 8000070:	8007c140 	call	8007c14 <__mulsf3>
 8000074:	1007883a 	mov	r3,r2
 8000078:	1805883a 	mov	r2,r3
 800007c:	100b883a 	mov	r5,r2
 8000080:	8009883a 	mov	r4,r16
 8000084:	80071880 	call	8007188 <__addsf3>
 8000088:	1009883a 	mov	r4,r2
 800008c:	2007883a 	mov	r3,r4
 8000090:	e0bffd17 	ldw	r2,-12(fp)
 8000094:	10c00215 	stw	r3,8(r2)
    phys->v.y += phys->a.y * dt;
 8000098:	e0bffd17 	ldw	r2,-12(fp)
 800009c:	14000317 	ldw	r16,12(r2)
 80000a0:	e0bffd17 	ldw	r2,-12(fp)
 80000a4:	10c00517 	ldw	r3,20(r2)
 80000a8:	e17ffe17 	ldw	r5,-8(fp)
 80000ac:	1809883a 	mov	r4,r3
 80000b0:	8007c140 	call	8007c14 <__mulsf3>
 80000b4:	1007883a 	mov	r3,r2
 80000b8:	1805883a 	mov	r2,r3
 80000bc:	100b883a 	mov	r5,r2
 80000c0:	8009883a 	mov	r4,r16
 80000c4:	80071880 	call	8007188 <__addsf3>
 80000c8:	1009883a 	mov	r4,r2
 80000cc:	2007883a 	mov	r3,r4
 80000d0:	e0bffd17 	ldw	r2,-12(fp)
 80000d4:	10c00315 	stw	r3,12(r2)
    phys->p.x += phys->v.x * dt;
 80000d8:	e0bffd17 	ldw	r2,-12(fp)
 80000dc:	14000017 	ldw	r16,0(r2)
 80000e0:	e0bffd17 	ldw	r2,-12(fp)
 80000e4:	10c00217 	ldw	r3,8(r2)
 80000e8:	e17ffe17 	ldw	r5,-8(fp)
 80000ec:	1809883a 	mov	r4,r3
 80000f0:	8007c140 	call	8007c14 <__mulsf3>
 80000f4:	1007883a 	mov	r3,r2
 80000f8:	1805883a 	mov	r2,r3
 80000fc:	100b883a 	mov	r5,r2
 8000100:	8009883a 	mov	r4,r16
 8000104:	80071880 	call	8007188 <__addsf3>
 8000108:	1009883a 	mov	r4,r2
 800010c:	2007883a 	mov	r3,r4
 8000110:	e0bffd17 	ldw	r2,-12(fp)
 8000114:	10c00015 	stw	r3,0(r2)
    phys->p.y += phys->v.y * dt;
 8000118:	e0bffd17 	ldw	r2,-12(fp)
 800011c:	14000117 	ldw	r16,4(r2)
 8000120:	e0bffd17 	ldw	r2,-12(fp)
 8000124:	10c00317 	ldw	r3,12(r2)
 8000128:	e17ffe17 	ldw	r5,-8(fp)
 800012c:	1809883a 	mov	r4,r3
 8000130:	8007c140 	call	8007c14 <__mulsf3>
 8000134:	1007883a 	mov	r3,r2
 8000138:	1805883a 	mov	r2,r3
 800013c:	100b883a 	mov	r5,r2
 8000140:	8009883a 	mov	r4,r16
 8000144:	80071880 	call	8007188 <__addsf3>
 8000148:	1009883a 	mov	r4,r2
 800014c:	2007883a 	mov	r3,r4
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	10c00115 	stw	r3,4(r2)
}
 8000158:	0001883a 	nop
 800015c:	e6ffff04 	addi	sp,fp,-4
 8000160:	dfc00217 	ldw	ra,8(sp)
 8000164:	df000117 	ldw	fp,4(sp)
 8000168:	dc000017 	ldw	r16,0(sp)
 800016c:	dec00304 	addi	sp,sp,12
 8000170:	f800283a 	ret

08000174 <cap_velocity>:

void cap_velocity(physics_t* phys, float max_v) {
 8000174:	defffc04 	addi	sp,sp,-16
 8000178:	dfc00315 	stw	ra,12(sp)
 800017c:	df000215 	stw	fp,8(sp)
 8000180:	df000204 	addi	fp,sp,8
 8000184:	e13ffe15 	stw	r4,-8(fp)
 8000188:	e17fff15 	stw	r5,-4(fp)
    if (phys->v.x > max_v)
 800018c:	e0bffe17 	ldw	r2,-8(fp)
 8000190:	10c00217 	ldw	r3,8(r2)
 8000194:	e17fff17 	ldw	r5,-4(fp)
 8000198:	1809883a 	mov	r4,r3
 800019c:	8007a900 	call	8007a90 <__gesf2>
 80001a0:	0080040e 	bge	zero,r2,80001b4 <cap_velocity+0x40>
        phys->v.x = max_v;
 80001a4:	e0bffe17 	ldw	r2,-8(fp)
 80001a8:	e0ffff17 	ldw	r3,-4(fp)
 80001ac:	10c00215 	stw	r3,8(r2)
 80001b0:	00000c06 	br	80001e4 <cap_velocity+0x70>
    else if (phys->v.x < -max_v)
 80001b4:	e0bffe17 	ldw	r2,-8(fp)
 80001b8:	10c00217 	ldw	r3,8(r2)
 80001bc:	e0bfff17 	ldw	r2,-4(fp)
 80001c0:	10a0003c 	xorhi	r2,r2,32768
 80001c4:	100b883a 	mov	r5,r2
 80001c8:	1809883a 	mov	r4,r3
 80001cc:	8007b4c0 	call	8007b4c <__lesf2>
 80001d0:	1000040e 	bge	r2,zero,80001e4 <cap_velocity+0x70>
        phys->v.x = -max_v;
 80001d4:	e0bfff17 	ldw	r2,-4(fp)
 80001d8:	10e0003c 	xorhi	r3,r2,32768
 80001dc:	e0bffe17 	ldw	r2,-8(fp)
 80001e0:	10c00215 	stw	r3,8(r2)
    if (phys->v.y > max_v)
 80001e4:	e0bffe17 	ldw	r2,-8(fp)
 80001e8:	10c00317 	ldw	r3,12(r2)
 80001ec:	e17fff17 	ldw	r5,-4(fp)
 80001f0:	1809883a 	mov	r4,r3
 80001f4:	8007a900 	call	8007a90 <__gesf2>
 80001f8:	0080040e 	bge	zero,r2,800020c <cap_velocity+0x98>
        phys->v.y = max_v;
 80001fc:	e0bffe17 	ldw	r2,-8(fp)
 8000200:	e0ffff17 	ldw	r3,-4(fp)
 8000204:	10c00315 	stw	r3,12(r2)
    else if (phys->v.y < -max_v)
        phys->v.y = -max_v;
}
 8000208:	00000d06 	br	8000240 <cap_velocity+0xcc>
        phys->v.x = max_v;
    else if (phys->v.x < -max_v)
        phys->v.x = -max_v;
    if (phys->v.y > max_v)
        phys->v.y = max_v;
    else if (phys->v.y < -max_v)
 800020c:	e0bffe17 	ldw	r2,-8(fp)
 8000210:	10c00317 	ldw	r3,12(r2)
 8000214:	e0bfff17 	ldw	r2,-4(fp)
 8000218:	10a0003c 	xorhi	r2,r2,32768
 800021c:	100b883a 	mov	r5,r2
 8000220:	1809883a 	mov	r4,r3
 8000224:	8007b4c0 	call	8007b4c <__lesf2>
 8000228:	10000116 	blt	r2,zero,8000230 <cap_velocity+0xbc>
        phys->v.y = -max_v;
}
 800022c:	00000406 	br	8000240 <cap_velocity+0xcc>
    else if (phys->v.x < -max_v)
        phys->v.x = -max_v;
    if (phys->v.y > max_v)
        phys->v.y = max_v;
    else if (phys->v.y < -max_v)
        phys->v.y = -max_v;
 8000230:	e0bfff17 	ldw	r2,-4(fp)
 8000234:	10e0003c 	xorhi	r3,r2,32768
 8000238:	e0bffe17 	ldw	r2,-8(fp)
 800023c:	10c00315 	stw	r3,12(r2)
}
 8000240:	0001883a 	nop
 8000244:	e037883a 	mov	sp,fp
 8000248:	dfc00117 	ldw	ra,4(sp)
 800024c:	df000017 	ldw	fp,0(sp)
 8000250:	dec00204 	addi	sp,sp,8
 8000254:	f800283a 	ret

08000258 <slow_down>:

void slow_down(physics_t* phys, float accel) {
 8000258:	defffb04 	addi	sp,sp,-20
 800025c:	dfc00415 	stw	ra,16(sp)
 8000260:	df000315 	stw	fp,12(sp)
 8000264:	df000304 	addi	fp,sp,12
 8000268:	e13ffe15 	stw	r4,-8(fp)
 800026c:	e17fff15 	stw	r5,-4(fp)
    float a = fabs(accel);
 8000270:	e0ffff17 	ldw	r3,-4(fp)
 8000274:	00a00034 	movhi	r2,32768
 8000278:	10bfffc4 	addi	r2,r2,-1
 800027c:	1884703a 	and	r2,r3,r2
 8000280:	e0bffd15 	stw	r2,-12(fp)
    if (fabsf(phys->v.x) < 1) {
 8000284:	e0bffe17 	ldw	r2,-8(fp)
 8000288:	10c00217 	ldw	r3,8(r2)
 800028c:	00a00034 	movhi	r2,32768
 8000290:	10bfffc4 	addi	r2,r2,-1
 8000294:	1884703a 	and	r2,r3,r2
 8000298:	014fe034 	movhi	r5,16256
 800029c:	1009883a 	mov	r4,r2
 80002a0:	8007b4c0 	call	8007b4c <__lesf2>
 80002a4:	1000050e 	bge	r2,zero,80002bc <slow_down+0x64>
        phys->v.x = 0;
 80002a8:	e0bffe17 	ldw	r2,-8(fp)
 80002ac:	10000215 	stw	zero,8(r2)
        phys->a.x = 0;
 80002b0:	e0bffe17 	ldw	r2,-8(fp)
 80002b4:	10000415 	stw	zero,16(r2)
 80002b8:	00001406 	br	800030c <slow_down+0xb4>
    } else {
        if (phys->v.x > 0)
 80002bc:	e0bffe17 	ldw	r2,-8(fp)
 80002c0:	10c00217 	ldw	r3,8(r2)
 80002c4:	000b883a 	mov	r5,zero
 80002c8:	1809883a 	mov	r4,r3
 80002cc:	8007a900 	call	8007a90 <__gesf2>
 80002d0:	0080050e 	bge	zero,r2,80002e8 <slow_down+0x90>
            phys->a.x = -a;
 80002d4:	e0bffd17 	ldw	r2,-12(fp)
 80002d8:	10e0003c 	xorhi	r3,r2,32768
 80002dc:	e0bffe17 	ldw	r2,-8(fp)
 80002e0:	10c00415 	stw	r3,16(r2)
 80002e4:	00000906 	br	800030c <slow_down+0xb4>
        else if (phys->v.x < 0)
 80002e8:	e0bffe17 	ldw	r2,-8(fp)
 80002ec:	10c00217 	ldw	r3,8(r2)
 80002f0:	000b883a 	mov	r5,zero
 80002f4:	1809883a 	mov	r4,r3
 80002f8:	8007b4c0 	call	8007b4c <__lesf2>
 80002fc:	1000030e 	bge	r2,zero,800030c <slow_down+0xb4>
            phys->a.x = a;
 8000300:	e0bffe17 	ldw	r2,-8(fp)
 8000304:	e0fffd17 	ldw	r3,-12(fp)
 8000308:	10c00415 	stw	r3,16(r2)
    }

    if (fabsf(phys->v.y) < 1) {
 800030c:	e0bffe17 	ldw	r2,-8(fp)
 8000310:	10c00317 	ldw	r3,12(r2)
 8000314:	00a00034 	movhi	r2,32768
 8000318:	10bfffc4 	addi	r2,r2,-1
 800031c:	1884703a 	and	r2,r3,r2
 8000320:	014fe034 	movhi	r5,16256
 8000324:	1009883a 	mov	r4,r2
 8000328:	8007b4c0 	call	8007b4c <__lesf2>
 800032c:	1000050e 	bge	r2,zero,8000344 <slow_down+0xec>
        phys->v.y = 0;
 8000330:	e0bffe17 	ldw	r2,-8(fp)
 8000334:	10000315 	stw	zero,12(r2)
        phys->a.y = 0;
 8000338:	e0bffe17 	ldw	r2,-8(fp)
 800033c:	10000515 	stw	zero,20(r2)
        if (phys->v.y > 0)
            phys->a.y = -a;
        else if (phys->v.y < 0)
            phys->a.y = a;
    }
 8000340:	00001506 	br	8000398 <slow_down+0x140>

    if (fabsf(phys->v.y) < 1) {
        phys->v.y = 0;
        phys->a.y = 0;
    } else {
        if (phys->v.y > 0)
 8000344:	e0bffe17 	ldw	r2,-8(fp)
 8000348:	10c00317 	ldw	r3,12(r2)
 800034c:	000b883a 	mov	r5,zero
 8000350:	1809883a 	mov	r4,r3
 8000354:	8007a900 	call	8007a90 <__gesf2>
 8000358:	0080050e 	bge	zero,r2,8000370 <slow_down+0x118>
            phys->a.y = -a;
 800035c:	e0bffd17 	ldw	r2,-12(fp)
 8000360:	10e0003c 	xorhi	r3,r2,32768
 8000364:	e0bffe17 	ldw	r2,-8(fp)
 8000368:	10c00515 	stw	r3,20(r2)
        else if (phys->v.y < 0)
            phys->a.y = a;
    }
 800036c:	00000a06 	br	8000398 <slow_down+0x140>
        phys->v.y = 0;
        phys->a.y = 0;
    } else {
        if (phys->v.y > 0)
            phys->a.y = -a;
        else if (phys->v.y < 0)
 8000370:	e0bffe17 	ldw	r2,-8(fp)
 8000374:	10c00317 	ldw	r3,12(r2)
 8000378:	000b883a 	mov	r5,zero
 800037c:	1809883a 	mov	r4,r3
 8000380:	8007b4c0 	call	8007b4c <__lesf2>
 8000384:	10000116 	blt	r2,zero,800038c <slow_down+0x134>
            phys->a.y = a;
    }
 8000388:	00000306 	br	8000398 <slow_down+0x140>
        phys->a.y = 0;
    } else {
        if (phys->v.y > 0)
            phys->a.y = -a;
        else if (phys->v.y < 0)
            phys->a.y = a;
 800038c:	e0bffe17 	ldw	r2,-8(fp)
 8000390:	e0fffd17 	ldw	r3,-12(fp)
 8000394:	10c00515 	stw	r3,20(r2)
    }
 8000398:	0001883a 	nop
 800039c:	e037883a 	mov	sp,fp
 80003a0:	dfc00117 	ldw	ra,4(sp)
 80003a4:	df000017 	ldw	fp,0(sp)
 80003a8:	dec00204 	addi	sp,sp,8
 80003ac:	f800283a 	ret

080003b0 <start_render>:
#include "gdu.h"
#include "timer.h"
#include "game.h"
#include "mouse.h"

void start_render() {
 80003b0:	defffe04 	addi	sp,sp,-8
 80003b4:	dfc00115 	stw	ra,4(sp)
 80003b8:	df000015 	stw	fp,0(sp)
 80003bc:	d839883a 	mov	fp,sp
    static int frame = 0;
    while (!is_vblank());
 80003c0:	0001883a 	nop
 80003c4:	80066c40 	call	80066c4 <is_vblank>
 80003c8:	103ffe26 	beq	r2,zero,80003c4 <__alt_data_end+0xfc0003c4>
    set_frame(frame);
 80003cc:	d0a6e317 	ldw	r2,-25716(gp)
 80003d0:	1009883a 	mov	r4,r2
 80003d4:	80066380 	call	8006638 <set_frame>
    gdu_set_frame(get_frame(!frame));
 80003d8:	d0a6e317 	ldw	r2,-25716(gp)
 80003dc:	1005003a 	cmpeq	r2,r2,zero
 80003e0:	10803fcc 	andi	r2,r2,255
 80003e4:	1009883a 	mov	r4,r2
 80003e8:	80066740 	call	8006674 <get_frame>
 80003ec:	1009883a 	mov	r4,r2
 80003f0:	80026b40 	call	80026b4 <gdu_set_frame>
    gdu_run();
 80003f4:	80026000 	call	8002600 <gdu_run>
    frame = !frame;
 80003f8:	d0a6e317 	ldw	r2,-25716(gp)
 80003fc:	1005003a 	cmpeq	r2,r2,zero
 8000400:	10803fcc 	andi	r2,r2,255
 8000404:	d0a6e315 	stw	r2,-25716(gp)
}
 8000408:	0001883a 	nop
 800040c:	e037883a 	mov	sp,fp
 8000410:	dfc00117 	ldw	ra,4(sp)
 8000414:	df000017 	ldw	fp,0(sp)
 8000418:	dec00204 	addi	sp,sp,8
 800041c:	f800283a 	ret

08000420 <double_render>:

void double_render() {
 8000420:	defffe04 	addi	sp,sp,-8
 8000424:	dfc00115 	stw	ra,4(sp)
 8000428:	df000015 	stw	fp,0(sp)
 800042c:	d839883a 	mov	fp,sp
    start_render();
 8000430:	80003b00 	call	80003b0 <start_render>
    while (gdu_is_running());
 8000434:	0001883a 	nop
 8000438:	80026400 	call	8002640 <gdu_is_running>
 800043c:	103ffe1e 	bne	r2,zero,8000438 <__alt_data_end+0xfc000438>
    start_render();
 8000440:	80003b00 	call	80003b0 <start_render>
    while (gdu_is_running());
 8000444:	0001883a 	nop
 8000448:	80026400 	call	8002640 <gdu_is_running>
 800044c:	103ffe1e 	bne	r2,zero,8000448 <__alt_data_end+0xfc000448>
}
 8000450:	0001883a 	nop
 8000454:	e037883a 	mov	sp,fp
 8000458:	dfc00117 	ldw	ra,4(sp)
 800045c:	df000017 	ldw	fp,0(sp)
 8000460:	dec00204 	addi	sp,sp,8
 8000464:	f800283a 	ret

08000468 <create_fade>:

fade_t create_fade(uint16_t color, int dir) {
 8000468:	defff804 	addi	sp,sp,-32
 800046c:	df000715 	stw	fp,28(sp)
 8000470:	df000704 	addi	fp,sp,28
 8000474:	e13ffd15 	stw	r4,-12(fp)
 8000478:	2805883a 	mov	r2,r5
 800047c:	e1bfff15 	stw	r6,-4(fp)
 8000480:	e0bffe0d 	sth	r2,-8(fp)
    fade_t fade = {
 8000484:	e03ff915 	stw	zero,-28(fp)
 8000488:	e03ffa15 	stw	zero,-24(fp)
 800048c:	e0bfff17 	ldw	r2,-4(fp)
 8000490:	e0bffb15 	stw	r2,-20(fp)
 8000494:	e0bffe0b 	ldhu	r2,-8(fp)
 8000498:	e0bffc0d 	sth	r2,-16(fp)
        0,
        0,
        dir,
        color
    };
    return fade;
 800049c:	e0bffd17 	ldw	r2,-12(fp)
 80004a0:	e0fff917 	ldw	r3,-28(fp)
 80004a4:	10c00015 	stw	r3,0(r2)
 80004a8:	e0fffa17 	ldw	r3,-24(fp)
 80004ac:	10c00115 	stw	r3,4(r2)
 80004b0:	e0fffb17 	ldw	r3,-20(fp)
 80004b4:	10c00215 	stw	r3,8(r2)
 80004b8:	e0fffc17 	ldw	r3,-16(fp)
 80004bc:	10c00315 	stw	r3,12(r2)
}
 80004c0:	e0bffd17 	ldw	r2,-12(fp)
 80004c4:	e037883a 	mov	sp,fp
 80004c8:	df000017 	ldw	fp,0(sp)
 80004cc:	dec00104 	addi	sp,sp,4
 80004d0:	f800283a 	ret

080004d4 <start_fade>:

void start_fade(fade_t* fade, float seconds) {
 80004d4:	defffb04 	addi	sp,sp,-20
 80004d8:	dfc00415 	stw	ra,16(sp)
 80004dc:	df000315 	stw	fp,12(sp)
 80004e0:	df000304 	addi	fp,sp,12
 80004e4:	e13ffe15 	stw	r4,-8(fp)
 80004e8:	e17fff15 	stw	r5,-4(fp)
    float time  = get_time();
 80004ec:	80044940 	call	8004494 <get_time>
 80004f0:	e0bffd15 	stw	r2,-12(fp)
    fade->start = time;
 80004f4:	e0bffe17 	ldw	r2,-8(fp)
 80004f8:	e0fffd17 	ldw	r3,-12(fp)
 80004fc:	10c00015 	stw	r3,0(r2)
    fade->end   = time + seconds;
 8000500:	e17fff17 	ldw	r5,-4(fp)
 8000504:	e13ffd17 	ldw	r4,-12(fp)
 8000508:	80071880 	call	8007188 <__addsf3>
 800050c:	1009883a 	mov	r4,r2
 8000510:	2007883a 	mov	r3,r4
 8000514:	e0bffe17 	ldw	r2,-8(fp)
 8000518:	10c00115 	stw	r3,4(r2)
}
 800051c:	0001883a 	nop
 8000520:	e037883a 	mov	sp,fp
 8000524:	dfc00117 	ldw	ra,4(sp)
 8000528:	df000017 	ldw	fp,0(sp)
 800052c:	dec00204 	addi	sp,sp,8
 8000530:	f800283a 	ret

08000534 <is_fade_done>:

int is_fade_done(fade_t* fade) { return (get_time() - fade->start >= fade->end); }
 8000534:	defffc04 	addi	sp,sp,-16
 8000538:	dfc00315 	stw	ra,12(sp)
 800053c:	df000215 	stw	fp,8(sp)
 8000540:	dc000115 	stw	r16,4(sp)
 8000544:	df000204 	addi	fp,sp,8
 8000548:	e13ffe15 	stw	r4,-8(fp)
 800054c:	80044940 	call	8004494 <get_time>
 8000550:	1009883a 	mov	r4,r2
 8000554:	e0bffe17 	ldw	r2,-8(fp)
 8000558:	10c00017 	ldw	r3,0(r2)
 800055c:	180b883a 	mov	r5,r3
 8000560:	80080440 	call	8008044 <__subsf3>
 8000564:	1007883a 	mov	r3,r2
 8000568:	1809883a 	mov	r4,r3
 800056c:	e0bffe17 	ldw	r2,-8(fp)
 8000570:	10c00117 	ldw	r3,4(r2)
 8000574:	04000044 	movi	r16,1
 8000578:	180b883a 	mov	r5,r3
 800057c:	8007a900 	call	8007a90 <__gesf2>
 8000580:	1000010e 	bge	r2,zero,8000588 <is_fade_done+0x54>
 8000584:	0021883a 	mov	r16,zero
 8000588:	80803fcc 	andi	r2,r16,255
 800058c:	e6ffff04 	addi	sp,fp,-4
 8000590:	dfc00217 	ldw	ra,8(sp)
 8000594:	df000117 	ldw	fp,4(sp)
 8000598:	dc000017 	ldw	r16,0(sp)
 800059c:	dec00304 	addi	sp,sp,12
 80005a0:	f800283a 	ret

080005a4 <show_fade>:

int show_fade(fade_t* fade) {
 80005a4:	defffa04 	addi	sp,sp,-24
 80005a8:	dfc00515 	stw	ra,20(sp)
 80005ac:	df000415 	stw	fp,16(sp)
 80005b0:	dc000315 	stw	r16,12(sp)
 80005b4:	df000404 	addi	fp,sp,16
 80005b8:	e13ffe15 	stw	r4,-8(fp)
    float bias = (get_time() - fade->start) / (fade->end - fade->start);
 80005bc:	80044940 	call	8004494 <get_time>
 80005c0:	1009883a 	mov	r4,r2
 80005c4:	e0bffe17 	ldw	r2,-8(fp)
 80005c8:	10c00017 	ldw	r3,0(r2)
 80005cc:	180b883a 	mov	r5,r3
 80005d0:	80080440 	call	8008044 <__subsf3>
 80005d4:	1007883a 	mov	r3,r2
 80005d8:	1821883a 	mov	r16,r3
 80005dc:	e0bffe17 	ldw	r2,-8(fp)
 80005e0:	10c00117 	ldw	r3,4(r2)
 80005e4:	e0bffe17 	ldw	r2,-8(fp)
 80005e8:	11000017 	ldw	r4,0(r2)
 80005ec:	200b883a 	mov	r5,r4
 80005f0:	1809883a 	mov	r4,r3
 80005f4:	80080440 	call	8008044 <__subsf3>
 80005f8:	1007883a 	mov	r3,r2
 80005fc:	1805883a 	mov	r2,r3
 8000600:	100b883a 	mov	r5,r2
 8000604:	8009883a 	mov	r4,r16
 8000608:	80076500 	call	8007650 <__divsf3>
 800060c:	1007883a 	mov	r3,r2
 8000610:	e0fffc15 	stw	r3,-16(fp)
    int done = bias > 1;
 8000614:	04000044 	movi	r16,1
 8000618:	014fe034 	movhi	r5,16256
 800061c:	e13ffc17 	ldw	r4,-16(fp)
 8000620:	8007a900 	call	8007a90 <__gesf2>
 8000624:	00800116 	blt	zero,r2,800062c <show_fade+0x88>
 8000628:	0021883a 	mov	r16,zero
 800062c:	80803fcc 	andi	r2,r16,255
 8000630:	e0bffd15 	stw	r2,-12(fp)
    if (done)
 8000634:	e0bffd17 	ldw	r2,-12(fp)
 8000638:	10000226 	beq	r2,zero,8000644 <show_fade+0xa0>
        bias = 1;
 800063c:	008fe034 	movhi	r2,16256
 8000640:	e0bffc15 	stw	r2,-16(fp)
    if (fade->dir == FADE_FROM)
 8000644:	e0bffe17 	ldw	r2,-8(fp)
 8000648:	10800217 	ldw	r2,8(r2)
 800064c:	10800058 	cmpnei	r2,r2,1
 8000650:	1000051e 	bne	r2,zero,8000668 <show_fade+0xc4>
        bias = 1 - bias;
 8000654:	e17ffc17 	ldw	r5,-16(fp)
 8000658:	010fe034 	movhi	r4,16256
 800065c:	80080440 	call	8008044 <__subsf3>
 8000660:	1007883a 	mov	r3,r2
 8000664:	e0fffc15 	stw	r3,-16(fp)
    set_aura(fade->color, (uint32_t) (64 * bias));
 8000668:	e0bffe17 	ldw	r2,-8(fp)
 800066c:	1080030b 	ldhu	r2,12(r2)
 8000670:	143fffcc 	andi	r16,r2,65535
 8000674:	0150a034 	movhi	r5,17024
 8000678:	e13ffc17 	ldw	r4,-16(fp)
 800067c:	8007c140 	call	8007c14 <__mulsf3>
 8000680:	1007883a 	mov	r3,r2
 8000684:	1805883a 	mov	r2,r3
 8000688:	1009883a 	mov	r4,r2
 800068c:	80068400 	call	8006840 <__fixunssfsi>
 8000690:	100b883a 	mov	r5,r2
 8000694:	8009883a 	mov	r4,r16
 8000698:	80066e80 	call	80066e8 <set_aura>
    return done;
 800069c:	e0bffd17 	ldw	r2,-12(fp)
}
 80006a0:	e6ffff04 	addi	sp,fp,-4
 80006a4:	dfc00217 	ldw	ra,8(sp)
 80006a8:	df000117 	ldw	fp,4(sp)
 80006ac:	dc000017 	ldw	r16,0(sp)
 80006b0:	dec00304 	addi	sp,sp,12
 80006b4:	f800283a 	ret

080006b8 <mouse_over_object>:

int mouse_over_object(scene_t* scene, mouse_t* mouse, game_object_t* obj) {
 80006b8:	defff804 	addi	sp,sp,-32
 80006bc:	df000715 	stw	fp,28(sp)
 80006c0:	df000704 	addi	fp,sp,28
 80006c4:	e13ffd15 	stw	r4,-12(fp)
 80006c8:	e17ffe15 	stw	r5,-8(fp)
 80006cc:	e1bfff15 	stw	r6,-4(fp)
    int x = mouse->pos.x;
 80006d0:	e0bffe17 	ldw	r2,-8(fp)
 80006d4:	10800017 	ldw	r2,0(r2)
 80006d8:	e0bff915 	stw	r2,-28(fp)
    int y = mouse->pos.y;
 80006dc:	e0bffe17 	ldw	r2,-8(fp)
 80006e0:	10800117 	ldw	r2,4(r2)
 80006e4:	e0bffa15 	stw	r2,-24(fp)
    if (obj->flags & SCROLL) {
 80006e8:	e0bfff17 	ldw	r2,-4(fp)
 80006ec:	10800017 	ldw	r2,0(r2)
 80006f0:	1080010c 	andi	r2,r2,4
 80006f4:	10000a26 	beq	r2,zero,8000720 <mouse_over_object+0x68>
        x += scene->scroll.pos.x;
 80006f8:	e0bffd17 	ldw	r2,-12(fp)
 80006fc:	10802c17 	ldw	r2,176(r2)
 8000700:	e0fff917 	ldw	r3,-28(fp)
 8000704:	1885883a 	add	r2,r3,r2
 8000708:	e0bff915 	stw	r2,-28(fp)
        y += scene->scroll.pos.y;
 800070c:	e0bffd17 	ldw	r2,-12(fp)
 8000710:	10802d17 	ldw	r2,180(r2)
 8000714:	e0fffa17 	ldw	r3,-24(fp)
 8000718:	1885883a 	add	r2,r3,r2
 800071c:	e0bffa15 	stw	r2,-24(fp)
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
 8000720:	e0bfff17 	ldw	r2,-4(fp)
 8000724:	10c00a17 	ldw	r3,40(r2)
 8000728:	e0bfff17 	ldw	r2,-4(fp)
 800072c:	10800817 	ldw	r2,32(r2)
 8000730:	1885c83a 	sub	r2,r3,r2
 8000734:	e0bffb15 	stw	r2,-20(fp)
    int h = obj->sprite.end_y - obj->sprite.start_y;
 8000738:	e0bfff17 	ldw	r2,-4(fp)
 800073c:	10c00b17 	ldw	r3,44(r2)
 8000740:	e0bfff17 	ldw	r2,-4(fp)
 8000744:	10800917 	ldw	r2,36(r2)
 8000748:	1885c83a 	sub	r2,r3,r2
 800074c:	e0bffc15 	stw	r2,-16(fp)
    if (obj->flags & CENTERED) {
 8000750:	e0bfff17 	ldw	r2,-4(fp)
 8000754:	10800017 	ldw	r2,0(r2)
 8000758:	1080020c 	andi	r2,r2,8
 800075c:	10002826 	beq	r2,zero,8000800 <mouse_over_object+0x148>
        return (x >= obj->pos.x - w / 2 &&
 8000760:	e0bfff17 	ldw	r2,-4(fp)
 8000764:	10c00117 	ldw	r3,4(r2)
 8000768:	e0bffb17 	ldw	r2,-20(fp)
 800076c:	1008d7fa 	srli	r4,r2,31
 8000770:	2085883a 	add	r2,r4,r2
 8000774:	1005d07a 	srai	r2,r2,1
 8000778:	1885c83a 	sub	r2,r3,r2
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
 800077c:	e0fff917 	ldw	r3,-28(fp)
 8000780:	18801d16 	blt	r3,r2,80007f8 <mouse_over_object+0x140>
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
 8000784:	e0bfff17 	ldw	r2,-4(fp)
 8000788:	10c00117 	ldw	r3,4(r2)
 800078c:	e0bffb17 	ldw	r2,-20(fp)
 8000790:	1008d7fa 	srli	r4,r2,31
 8000794:	2085883a 	add	r2,r4,r2
 8000798:	1005d07a 	srai	r2,r2,1
 800079c:	1887883a 	add	r3,r3,r2
        y += scene->scroll.pos.y;
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
 80007a0:	e0bff917 	ldw	r2,-28(fp)
 80007a4:	18801416 	blt	r3,r2,80007f8 <mouse_over_object+0x140>
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
 80007a8:	e0bfff17 	ldw	r2,-4(fp)
 80007ac:	10c00217 	ldw	r3,8(r2)
 80007b0:	e0bffc17 	ldw	r2,-16(fp)
 80007b4:	1008d7fa 	srli	r4,r2,31
 80007b8:	2085883a 	add	r2,r4,r2
 80007bc:	1005d07a 	srai	r2,r2,1
 80007c0:	1885c83a 	sub	r2,r3,r2
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
 80007c4:	e0fffa17 	ldw	r3,-24(fp)
 80007c8:	18800b16 	blt	r3,r2,80007f8 <mouse_over_object+0x140>
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
 80007cc:	e0bfff17 	ldw	r2,-4(fp)
 80007d0:	10c00217 	ldw	r3,8(r2)
 80007d4:	e0bffc17 	ldw	r2,-16(fp)
 80007d8:	1008d7fa 	srli	r4,r2,31
 80007dc:	2085883a 	add	r2,r4,r2
 80007e0:	1005d07a 	srai	r2,r2,1
 80007e4:	1887883a 	add	r3,r3,r2
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
 80007e8:	e0bffa17 	ldw	r2,-24(fp)
 80007ec:	18800216 	blt	r3,r2,80007f8 <mouse_over_object+0x140>
 80007f0:	00800044 	movi	r2,1
        y += scene->scroll.pos.y;
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
 80007f4:	00001a06 	br	8000860 <mouse_over_object+0x1a8>
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
 80007f8:	0005883a 	mov	r2,zero
        y += scene->scroll.pos.y;
    }
    int w = obj->sprite.end_x - obj->sprite.start_x;
    int h = obj->sprite.end_y - obj->sprite.start_y;
    if (obj->flags & CENTERED) {
        return (x >= obj->pos.x - w / 2 &&
 80007fc:	00001806 	br	8000860 <mouse_over_object+0x1a8>
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
 8000800:	e0bfff17 	ldw	r2,-4(fp)
 8000804:	10800117 	ldw	r2,4(r2)
            x <= obj->pos.x + w &&
            y >= obj->pos.y && 
 8000808:	e0fff917 	ldw	r3,-28(fp)
 800080c:	18801216 	blt	r3,r2,8000858 <mouse_over_object+0x1a0>
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
            x <= obj->pos.x + w &&
 8000810:	e0bfff17 	ldw	r2,-4(fp)
 8000814:	10c00117 	ldw	r3,4(r2)
 8000818:	e0bffb17 	ldw	r2,-20(fp)
 800081c:	1887883a 	add	r3,r3,r2
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
 8000820:	e0bff917 	ldw	r2,-28(fp)
 8000824:	18800c16 	blt	r3,r2,8000858 <mouse_over_object+0x1a0>
            x <= obj->pos.x + w &&
            y >= obj->pos.y && 
 8000828:	e0bfff17 	ldw	r2,-4(fp)
 800082c:	10800217 	ldw	r2,8(r2)
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
            x <= obj->pos.x + w &&
 8000830:	e0fffa17 	ldw	r3,-24(fp)
 8000834:	18800816 	blt	r3,r2,8000858 <mouse_over_object+0x1a0>
            y >= obj->pos.y && 
            y <= obj->pos.y + h);
 8000838:	e0bfff17 	ldw	r2,-4(fp)
 800083c:	10c00217 	ldw	r3,8(r2)
 8000840:	e0bffc17 	ldw	r2,-16(fp)
 8000844:	1887883a 	add	r3,r3,r2
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
            x <= obj->pos.x + w &&
            y >= obj->pos.y && 
 8000848:	e0bffa17 	ldw	r2,-24(fp)
 800084c:	18800216 	blt	r3,r2,8000858 <mouse_over_object+0x1a0>
 8000850:	00800044 	movi	r2,1
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
 8000854:	00000106 	br	800085c <mouse_over_object+0x1a4>
            x <= obj->pos.x + w &&
            y >= obj->pos.y && 
 8000858:	0005883a 	mov	r2,zero
        return (x >= obj->pos.x - w / 2 &&
                x <= obj->pos.x + w / 2 &&
                y >= obj->pos.y - h / 2 &&
                y <= obj->pos.y + h / 2);
    }
    return (x >= obj->pos.x && 
 800085c:	0001883a 	nop
            x <= obj->pos.x + w &&
            y >= obj->pos.y && 
            y <= obj->pos.y + h);
}
 8000860:	e037883a 	mov	sp,fp
 8000864:	df000017 	ldw	fp,0(sp)
 8000868:	dec00104 	addi	sp,sp,4
 800086c:	f800283a 	ret

08000870 <mouse_to_game>:

position_t mouse_to_game(scene_t* scene, mouse_t* mouse) {
 8000870:	defffb04 	addi	sp,sp,-20
 8000874:	df000415 	stw	fp,16(sp)
 8000878:	df000404 	addi	fp,sp,16
 800087c:	e13ffe15 	stw	r4,-8(fp)
 8000880:	e17fff15 	stw	r5,-4(fp)
    position_t pos = {scene->scroll.pos.x + mouse->pos.x, scene->scroll.pos.y + mouse->pos.y};
 8000884:	e0bffe17 	ldw	r2,-8(fp)
 8000888:	10c02c17 	ldw	r3,176(r2)
 800088c:	e0bfff17 	ldw	r2,-4(fp)
 8000890:	10800017 	ldw	r2,0(r2)
 8000894:	1885883a 	add	r2,r3,r2
 8000898:	e0bffc15 	stw	r2,-16(fp)
 800089c:	e0bffe17 	ldw	r2,-8(fp)
 80008a0:	10c02d17 	ldw	r3,180(r2)
 80008a4:	e0bfff17 	ldw	r2,-4(fp)
 80008a8:	10800117 	ldw	r2,4(r2)
 80008ac:	1885883a 	add	r2,r3,r2
 80008b0:	e0bffd15 	stw	r2,-12(fp)
    return pos;
 80008b4:	e0bffc17 	ldw	r2,-16(fp)
 80008b8:	e0fffd17 	ldw	r3,-12(fp)
 80008bc:	1009883a 	mov	r4,r2
 80008c0:	180b883a 	mov	r5,r3
}
 80008c4:	2005883a 	mov	r2,r4
 80008c8:	2807883a 	mov	r3,r5
 80008cc:	e037883a 	mov	sp,fp
 80008d0:	df000017 	ldw	fp,0(sp)
 80008d4:	dec00104 	addi	sp,sp,4
 80008d8:	f800283a 	ret

080008dc <handle_mouse>:

void handle_mouse(mouse_t* mouse, scene_t* scene, int h_scroll, int v_scroll) {
 80008dc:	defffb04 	addi	sp,sp,-20
 80008e0:	df000415 	stw	fp,16(sp)
 80008e4:	df000404 	addi	fp,sp,16
 80008e8:	e13ffc15 	stw	r4,-16(fp)
 80008ec:	e17ffd15 	stw	r5,-12(fp)
 80008f0:	e1bffe15 	stw	r6,-8(fp)
 80008f4:	e1ffff15 	stw	r7,-4(fp)
    if (mouse->pos.x < 0) {
 80008f8:	e0bffc17 	ldw	r2,-16(fp)
 80008fc:	10800017 	ldw	r2,0(r2)
 8000900:	1000110e 	bge	r2,zero,8000948 <handle_mouse+0x6c>
        if (h_scroll) {
 8000904:	e0bffe17 	ldw	r2,-8(fp)
 8000908:	10000c26 	beq	r2,zero,800093c <handle_mouse+0x60>
            scene->scroll.pos.x += mouse->pos.x;
 800090c:	e0bffd17 	ldw	r2,-12(fp)
 8000910:	10c02c17 	ldw	r3,176(r2)
 8000914:	e0bffc17 	ldw	r2,-16(fp)
 8000918:	10800017 	ldw	r2,0(r2)
 800091c:	1887883a 	add	r3,r3,r2
 8000920:	e0bffd17 	ldw	r2,-12(fp)
 8000924:	10c02c15 	stw	r3,176(r2)
            if (scene->scroll.pos.x < 0)
 8000928:	e0bffd17 	ldw	r2,-12(fp)
 800092c:	10802c17 	ldw	r2,176(r2)
 8000930:	1000020e 	bge	r2,zero,800093c <handle_mouse+0x60>
                scene->scroll.pos.x = 0;
 8000934:	e0bffd17 	ldw	r2,-12(fp)
 8000938:	10002c15 	stw	zero,176(r2)
        }
        mouse->pos.x = 0;
 800093c:	e0bffc17 	ldw	r2,-16(fp)
 8000940:	10000015 	stw	zero,0(r2)
 8000944:	00001a06 	br	80009b0 <handle_mouse+0xd4>
    } else if (mouse->pos.x > SCREEN_WIDTH) {
 8000948:	e0bffc17 	ldw	r2,-16(fp)
 800094c:	10800017 	ldw	r2,0(r2)
 8000950:	1080a050 	cmplti	r2,r2,641
 8000954:	1000161e 	bne	r2,zero,80009b0 <handle_mouse+0xd4>
        if (h_scroll) {
 8000958:	e0bffe17 	ldw	r2,-8(fp)
 800095c:	10001126 	beq	r2,zero,80009a4 <handle_mouse+0xc8>
            scene->scroll.pos.x += mouse->pos.x - SCREEN_WIDTH;
 8000960:	e0bffd17 	ldw	r2,-12(fp)
 8000964:	10c02c17 	ldw	r3,176(r2)
 8000968:	e0bffc17 	ldw	r2,-16(fp)
 800096c:	10800017 	ldw	r2,0(r2)
 8000970:	10bf6004 	addi	r2,r2,-640
 8000974:	1887883a 	add	r3,r3,r2
 8000978:	e0bffd17 	ldw	r2,-12(fp)
 800097c:	10c02c15 	stw	r3,176(r2)
            if (scene->scroll.pos.x > scene->scroll.max.x)
 8000980:	e0bffd17 	ldw	r2,-12(fp)
 8000984:	10802c17 	ldw	r2,176(r2)
 8000988:	e0fffd17 	ldw	r3,-12(fp)
 800098c:	18c02e17 	ldw	r3,184(r3)
 8000990:	1880040e 	bge	r3,r2,80009a4 <handle_mouse+0xc8>
                scene->scroll.pos.x = scene->scroll.max.x;
 8000994:	e0bffd17 	ldw	r2,-12(fp)
 8000998:	10c02e17 	ldw	r3,184(r2)
 800099c:	e0bffd17 	ldw	r2,-12(fp)
 80009a0:	10c02c15 	stw	r3,176(r2)
        }
        mouse->pos.x = SCREEN_WIDTH;
 80009a4:	e0bffc17 	ldw	r2,-16(fp)
 80009a8:	00c0a004 	movi	r3,640
 80009ac:	10c00015 	stw	r3,0(r2)
    }       
    if (mouse->pos.y < 0) {
 80009b0:	e0bffc17 	ldw	r2,-16(fp)
 80009b4:	10800117 	ldw	r2,4(r2)
 80009b8:	1000110e 	bge	r2,zero,8000a00 <handle_mouse+0x124>
        if (v_scroll) {
 80009bc:	e0bfff17 	ldw	r2,-4(fp)
 80009c0:	10000c26 	beq	r2,zero,80009f4 <handle_mouse+0x118>
            scene->scroll.pos.y += mouse->pos.y;
 80009c4:	e0bffd17 	ldw	r2,-12(fp)
 80009c8:	10c02d17 	ldw	r3,180(r2)
 80009cc:	e0bffc17 	ldw	r2,-16(fp)
 80009d0:	10800117 	ldw	r2,4(r2)
 80009d4:	1887883a 	add	r3,r3,r2
 80009d8:	e0bffd17 	ldw	r2,-12(fp)
 80009dc:	10c02d15 	stw	r3,180(r2)
            if (scene->scroll.pos.y < 0)
 80009e0:	e0bffd17 	ldw	r2,-12(fp)
 80009e4:	10802d17 	ldw	r2,180(r2)
 80009e8:	1000020e 	bge	r2,zero,80009f4 <handle_mouse+0x118>
                scene->scroll.pos.y = 0;
 80009ec:	e0bffd17 	ldw	r2,-12(fp)
 80009f0:	10002d15 	stw	zero,180(r2)
        }
        mouse->pos.y = 0;
 80009f4:	e0bffc17 	ldw	r2,-16(fp)
 80009f8:	10000115 	stw	zero,4(r2)
            if (scene->scroll.pos.y > scene->scroll.max.y)
                scene->scroll.pos.y = scene->scroll.max.y;
        }
        mouse->pos.y = SCREEN_HEIGHT;
    }
 80009fc:	00001a06 	br	8000a68 <handle_mouse+0x18c>
            scene->scroll.pos.y += mouse->pos.y;
            if (scene->scroll.pos.y < 0)
                scene->scroll.pos.y = 0;
        }
        mouse->pos.y = 0;
    } else if (mouse->pos.y > SCREEN_HEIGHT) {
 8000a00:	e0bffc17 	ldw	r2,-16(fp)
 8000a04:	10800117 	ldw	r2,4(r2)
 8000a08:	10807850 	cmplti	r2,r2,481
 8000a0c:	1000161e 	bne	r2,zero,8000a68 <handle_mouse+0x18c>
        if (v_scroll) {
 8000a10:	e0bfff17 	ldw	r2,-4(fp)
 8000a14:	10001126 	beq	r2,zero,8000a5c <handle_mouse+0x180>
            scene->scroll.pos.y += mouse->pos.y - SCREEN_HEIGHT;
 8000a18:	e0bffd17 	ldw	r2,-12(fp)
 8000a1c:	10c02d17 	ldw	r3,180(r2)
 8000a20:	e0bffc17 	ldw	r2,-16(fp)
 8000a24:	10800117 	ldw	r2,4(r2)
 8000a28:	10bf8804 	addi	r2,r2,-480
 8000a2c:	1887883a 	add	r3,r3,r2
 8000a30:	e0bffd17 	ldw	r2,-12(fp)
 8000a34:	10c02d15 	stw	r3,180(r2)
            if (scene->scroll.pos.y > scene->scroll.max.y)
 8000a38:	e0bffd17 	ldw	r2,-12(fp)
 8000a3c:	10802d17 	ldw	r2,180(r2)
 8000a40:	e0fffd17 	ldw	r3,-12(fp)
 8000a44:	18c02f17 	ldw	r3,188(r3)
 8000a48:	1880040e 	bge	r3,r2,8000a5c <handle_mouse+0x180>
                scene->scroll.pos.y = scene->scroll.max.y;
 8000a4c:	e0bffd17 	ldw	r2,-12(fp)
 8000a50:	10c02f17 	ldw	r3,188(r2)
 8000a54:	e0bffd17 	ldw	r2,-12(fp)
 8000a58:	10c02d15 	stw	r3,180(r2)
        }
        mouse->pos.y = SCREEN_HEIGHT;
 8000a5c:	e0bffc17 	ldw	r2,-16(fp)
 8000a60:	00c07804 	movi	r3,480
 8000a64:	10c00115 	stw	r3,4(r2)
    }
 8000a68:	0001883a 	nop
 8000a6c:	e037883a 	mov	sp,fp
 8000a70:	df000017 	ldw	fp,0(sp)
 8000a74:	dec00104 	addi	sp,sp,4
 8000a78:	f800283a 	ret

08000a7c <init_object>:
#include "game.h"
#include "vga.h"
#include <string.h>
#include <math.h>

void init_object(game_object_t* object, int flags) {
 8000a7c:	defffc04 	addi	sp,sp,-16
 8000a80:	dfc00315 	stw	ra,12(sp)
 8000a84:	df000215 	stw	fp,8(sp)
 8000a88:	df000204 	addi	fp,sp,8
 8000a8c:	e13ffe15 	stw	r4,-8(fp)
 8000a90:	e17fff15 	stw	r5,-4(fp)
    memset(object, 0, sizeof(game_object_t));
 8000a94:	01800c04 	movi	r6,48
 8000a98:	000b883a 	mov	r5,zero
 8000a9c:	e13ffe17 	ldw	r4,-8(fp)
 8000aa0:	800a7380 	call	800a738 <memset>
    object->flags = flags;
 8000aa4:	e0bffe17 	ldw	r2,-8(fp)
 8000aa8:	e0ffff17 	ldw	r3,-4(fp)
 8000aac:	10c00015 	stw	r3,0(r2)
}
 8000ab0:	0001883a 	nop
 8000ab4:	e037883a 	mov	sp,fp
 8000ab8:	dfc00117 	ldw	ra,4(sp)
 8000abc:	df000017 	ldw	fp,0(sp)
 8000ac0:	dec00204 	addi	sp,sp,8
 8000ac4:	f800283a 	ret

08000ac8 <allocate_object>:

game_object_t* allocate_object(scene_t* scene, int type, int flags) {
 8000ac8:	defff504 	addi	sp,sp,-44
 8000acc:	dfc00a15 	stw	ra,40(sp)
 8000ad0:	df000915 	stw	fp,36(sp)
 8000ad4:	df000904 	addi	fp,sp,36
 8000ad8:	e13ffd15 	stw	r4,-12(fp)
 8000adc:	e17ffe15 	stw	r5,-8(fp)
 8000ae0:	e1bfff15 	stw	r6,-4(fp)
    switch (type) {
 8000ae4:	e0bffe17 	ldw	r2,-8(fp)
 8000ae8:	10c00060 	cmpeqi	r3,r2,1
 8000aec:	1800221e 	bne	r3,zero,8000b78 <allocate_object+0xb0>
 8000af0:	10c00088 	cmpgei	r3,r2,2
 8000af4:	1800021e 	bne	r3,zero,8000b00 <allocate_object+0x38>
 8000af8:	10000626 	beq	r2,zero,8000b14 <allocate_object+0x4c>
 8000afc:	00005d06 	br	8000c74 <allocate_object+0x1ac>
 8000b00:	10c000a0 	cmpeqi	r3,r2,2
 8000b04:	1800351e 	bne	r3,zero,8000bdc <allocate_object+0x114>
 8000b08:	108000e0 	cmpeqi	r2,r2,3
 8000b0c:	10004c1e 	bne	r2,zero,8000c40 <allocate_object+0x178>
 8000b10:	00005806 	br	8000c74 <allocate_object+0x1ac>
        case BACKGROUND:
            for (int i = 0; i < BACKGROUND_SPRITES; i++) {
 8000b14:	e03ff715 	stw	zero,-36(fp)
 8000b18:	00001306 	br	8000b68 <allocate_object+0xa0>
                game_object_t* obj = &scene->objects.typed.background[i];
 8000b1c:	01400c04 	movi	r5,48
 8000b20:	e13ff717 	ldw	r4,-36(fp)
 8000b24:	80071600 	call	8007160 <__mulsi3>
 8000b28:	10822604 	addi	r2,r2,2200
 8000b2c:	e0fffd17 	ldw	r3,-12(fp)
 8000b30:	1885883a 	add	r2,r3,r2
 8000b34:	e0bffa15 	stw	r2,-24(fp)
                if (!(obj->flags & USED)) {
 8000b38:	e0bffa17 	ldw	r2,-24(fp)
 8000b3c:	10800017 	ldw	r2,0(r2)
 8000b40:	1080004c 	andi	r2,r2,1
 8000b44:	1000051e 	bne	r2,zero,8000b5c <allocate_object+0x94>
                    init_object(obj, flags);
 8000b48:	e17fff17 	ldw	r5,-4(fp)
 8000b4c:	e13ffa17 	ldw	r4,-24(fp)
 8000b50:	8000a7c0 	call	8000a7c <init_object>
                    return obj;
 8000b54:	e0bffa17 	ldw	r2,-24(fp)
 8000b58:	00004706 	br	8000c78 <allocate_object+0x1b0>
}

game_object_t* allocate_object(scene_t* scene, int type, int flags) {
    switch (type) {
        case BACKGROUND:
            for (int i = 0; i < BACKGROUND_SPRITES; i++) {
 8000b5c:	e0bff717 	ldw	r2,-36(fp)
 8000b60:	10800044 	addi	r2,r2,1
 8000b64:	e0bff715 	stw	r2,-36(fp)
 8000b68:	e0bff717 	ldw	r2,-36(fp)
 8000b6c:	10800210 	cmplti	r2,r2,8
 8000b70:	103fea1e 	bne	r2,zero,8000b1c <__alt_data_end+0xfc000b1c>
                if (!(obj->flags & USED)) {
                    init_object(obj, flags);
                    return obj;
                }
            }
            break;
 8000b74:	00003f06 	br	8000c74 <allocate_object+0x1ac>
        
        case SHIPS:
            for (int i = 0; i < SHIP_SPRITES; i++) {
 8000b78:	e03ff815 	stw	zero,-32(fp)
 8000b7c:	00001306 	br	8000bcc <allocate_object+0x104>
                game_object_t* obj = &scene->objects.typed.ships[i];
 8000b80:	01400c04 	movi	r5,48
 8000b84:	e13ff817 	ldw	r4,-32(fp)
 8000b88:	80071600 	call	8007160 <__mulsi3>
 8000b8c:	10828604 	addi	r2,r2,2584
 8000b90:	e0fffd17 	ldw	r3,-12(fp)
 8000b94:	1885883a 	add	r2,r3,r2
 8000b98:	e0bffb15 	stw	r2,-20(fp)
                if (!(obj->flags & USED)) {
 8000b9c:	e0bffb17 	ldw	r2,-20(fp)
 8000ba0:	10800017 	ldw	r2,0(r2)
 8000ba4:	1080004c 	andi	r2,r2,1
 8000ba8:	1000051e 	bne	r2,zero,8000bc0 <allocate_object+0xf8>
                    init_object(obj, flags);
 8000bac:	e17fff17 	ldw	r5,-4(fp)
 8000bb0:	e13ffb17 	ldw	r4,-20(fp)
 8000bb4:	8000a7c0 	call	8000a7c <init_object>
                    return obj;
 8000bb8:	e0bffb17 	ldw	r2,-20(fp)
 8000bbc:	00002e06 	br	8000c78 <allocate_object+0x1b0>
                }
            }
            break;
        
        case SHIPS:
            for (int i = 0; i < SHIP_SPRITES; i++) {
 8000bc0:	e0bff817 	ldw	r2,-32(fp)
 8000bc4:	10800044 	addi	r2,r2,1
 8000bc8:	e0bff815 	stw	r2,-32(fp)
 8000bcc:	e0bff817 	ldw	r2,-32(fp)
 8000bd0:	10800610 	cmplti	r2,r2,24
 8000bd4:	103fea1e 	bne	r2,zero,8000b80 <__alt_data_end+0xfc000b80>
                if (!(obj->flags & USED)) {
                    init_object(obj, flags);
                    return obj;
                }
            }
            break;
 8000bd8:	00002606 	br	8000c74 <allocate_object+0x1ac>
        
        case EFFECTS:
            for (int i = 0; i < EFFECT_SPRITES; i++) {
 8000bdc:	e03ff915 	stw	zero,-28(fp)
 8000be0:	00001306 	br	8000c30 <allocate_object+0x168>
                game_object_t* obj = &scene->objects.typed.effects[i];
 8000be4:	01400c04 	movi	r5,48
 8000be8:	e13ff917 	ldw	r4,-28(fp)
 8000bec:	80071600 	call	8007160 <__mulsi3>
 8000bf0:	1083a604 	addi	r2,r2,3736
 8000bf4:	e0fffd17 	ldw	r3,-12(fp)
 8000bf8:	1885883a 	add	r2,r3,r2
 8000bfc:	e0bffc15 	stw	r2,-16(fp)
                if (!(obj->flags & USED)) {
 8000c00:	e0bffc17 	ldw	r2,-16(fp)
 8000c04:	10800017 	ldw	r2,0(r2)
 8000c08:	1080004c 	andi	r2,r2,1
 8000c0c:	1000051e 	bne	r2,zero,8000c24 <allocate_object+0x15c>
                    init_object(obj, flags);
 8000c10:	e17fff17 	ldw	r5,-4(fp)
 8000c14:	e13ffc17 	ldw	r4,-16(fp)
 8000c18:	8000a7c0 	call	8000a7c <init_object>
                    return obj;
 8000c1c:	e0bffc17 	ldw	r2,-16(fp)
 8000c20:	00001506 	br	8000c78 <allocate_object+0x1b0>
                }
            }
            break;
        
        case EFFECTS:
            for (int i = 0; i < EFFECT_SPRITES; i++) {
 8000c24:	e0bff917 	ldw	r2,-28(fp)
 8000c28:	10800044 	addi	r2,r2,1
 8000c2c:	e0bff915 	stw	r2,-28(fp)
 8000c30:	e0bff917 	ldw	r2,-28(fp)
 8000c34:	108007d0 	cmplti	r2,r2,31
 8000c38:	103fea1e 	bne	r2,zero,8000be4 <__alt_data_end+0xfc000be4>
                if (!(obj->flags & USED)) {
                    init_object(obj, flags);
                    return obj;
                }
            }
            break;
 8000c3c:	00000d06 	br	8000c74 <allocate_object+0x1ac>
        
        case CURSOR:
            if (!(scene->objects.typed.cursor.flags & USED)) {
 8000c40:	e0bffd17 	ldw	r2,-12(fp)
 8000c44:	10851a17 	ldw	r2,5224(r2)
 8000c48:	1080004c 	andi	r2,r2,1
 8000c4c:	1000081e 	bne	r2,zero,8000c70 <allocate_object+0x1a8>
                init_object(&scene->objects.typed.cursor, flags);
 8000c50:	e0bffd17 	ldw	r2,-12(fp)
 8000c54:	10851a04 	addi	r2,r2,5224
 8000c58:	e17fff17 	ldw	r5,-4(fp)
 8000c5c:	1009883a 	mov	r4,r2
 8000c60:	8000a7c0 	call	8000a7c <init_object>
                return &scene->objects.typed.cursor;
 8000c64:	e0bffd17 	ldw	r2,-12(fp)
 8000c68:	10851a04 	addi	r2,r2,5224
 8000c6c:	00000206 	br	8000c78 <allocate_object+0x1b0>
            }
            break;
 8000c70:	0001883a 	nop
    }
    return NULL;
 8000c74:	0005883a 	mov	r2,zero
}
 8000c78:	e037883a 	mov	sp,fp
 8000c7c:	dfc00117 	ldw	ra,4(sp)
 8000c80:	df000017 	ldw	fp,0(sp)
 8000c84:	dec00204 	addi	sp,sp,8
 8000c88:	f800283a 	ret

08000c8c <deallocate_object>:

void deallocate_object(game_object_t* obj) {
 8000c8c:	defffe04 	addi	sp,sp,-8
 8000c90:	df000115 	stw	fp,4(sp)
 8000c94:	df000104 	addi	fp,sp,4
 8000c98:	e13fff15 	stw	r4,-4(fp)
    if (obj != NULL)
 8000c9c:	e0bfff17 	ldw	r2,-4(fp)
 8000ca0:	10000226 	beq	r2,zero,8000cac <deallocate_object+0x20>
        obj->flags = 0;
 8000ca4:	e0bfff17 	ldw	r2,-4(fp)
 8000ca8:	10000015 	stw	zero,0(r2)
}
 8000cac:	0001883a 	nop
 8000cb0:	e037883a 	mov	sp,fp
 8000cb4:	df000017 	ldw	fp,0(sp)
 8000cb8:	dec00104 	addi	sp,sp,4
 8000cbc:	f800283a 	ret

08000cc0 <push_scene>:

void push_scene(scene_t* scene) {
 8000cc0:	defff604 	addi	sp,sp,-40
 8000cc4:	dfc00915 	stw	ra,36(sp)
 8000cc8:	df000815 	stw	fp,32(sp)
 8000ccc:	df000804 	addi	fp,sp,32
 8000cd0:	e13fff15 	stw	r4,-4(fp)
    for (int i = 0; i < MAX_SPRITES; i++) {
 8000cd4:	e03ff815 	stw	zero,-32(fp)
 8000cd8:	00006806 	br	8000e7c <push_scene+0x1bc>
        game_object_t* obj = &scene->objects.untyped[i];
 8000cdc:	01400c04 	movi	r5,48
 8000ce0:	e13ff817 	ldw	r4,-32(fp)
 8000ce4:	80071600 	call	8007160 <__mulsi3>
 8000ce8:	10822604 	addi	r2,r2,2200
 8000cec:	e0ffff17 	ldw	r3,-4(fp)
 8000cf0:	1885883a 	add	r2,r3,r2
 8000cf4:	e0bffc15 	stw	r2,-16(fp)
        int pop = 1;
 8000cf8:	00800044 	movi	r2,1
 8000cfc:	e0bff915 	stw	r2,-28(fp)
        
        if ((obj->flags & USED) && (obj->flags & VISABLE)) {
 8000d00:	e0bffc17 	ldw	r2,-16(fp)
 8000d04:	10800017 	ldw	r2,0(r2)
 8000d08:	1080004c 	andi	r2,r2,1
 8000d0c:	10004d26 	beq	r2,zero,8000e44 <push_scene+0x184>
 8000d10:	e0bffc17 	ldw	r2,-16(fp)
 8000d14:	10800017 	ldw	r2,0(r2)
 8000d18:	1080008c 	andi	r2,r2,2
 8000d1c:	10004926 	beq	r2,zero,8000e44 <push_scene+0x184>
            int x = obj->pos.x;
 8000d20:	e0bffc17 	ldw	r2,-16(fp)
 8000d24:	10800117 	ldw	r2,4(r2)
 8000d28:	e0bffa15 	stw	r2,-24(fp)
            int y = obj->pos.y;
 8000d2c:	e0bffc17 	ldw	r2,-16(fp)
 8000d30:	10800217 	ldw	r2,8(r2)
 8000d34:	e0bffb15 	stw	r2,-20(fp)

            if (obj->flags & SCROLL) {
 8000d38:	e0bffc17 	ldw	r2,-16(fp)
 8000d3c:	10800017 	ldw	r2,0(r2)
 8000d40:	1080010c 	andi	r2,r2,4
 8000d44:	10000a26 	beq	r2,zero,8000d70 <push_scene+0xb0>
                x -= scene->scroll.pos.x;
 8000d48:	e0bfff17 	ldw	r2,-4(fp)
 8000d4c:	10802c17 	ldw	r2,176(r2)
 8000d50:	e0fffa17 	ldw	r3,-24(fp)
 8000d54:	1885c83a 	sub	r2,r3,r2
 8000d58:	e0bffa15 	stw	r2,-24(fp)
                y -= scene->scroll.pos.y;
 8000d5c:	e0bfff17 	ldw	r2,-4(fp)
 8000d60:	10802d17 	ldw	r2,180(r2)
 8000d64:	e0fffb17 	ldw	r3,-20(fp)
 8000d68:	1885c83a 	sub	r2,r3,r2
 8000d6c:	e0bffb15 	stw	r2,-20(fp)
            }

            int w = obj->sprite.end_x - obj->sprite.start_x;
 8000d70:	e0bffc17 	ldw	r2,-16(fp)
 8000d74:	10c00a17 	ldw	r3,40(r2)
 8000d78:	e0bffc17 	ldw	r2,-16(fp)
 8000d7c:	10800817 	ldw	r2,32(r2)
 8000d80:	1885c83a 	sub	r2,r3,r2
 8000d84:	e0bffd15 	stw	r2,-12(fp)
            int h = obj->sprite.end_y - obj->sprite.start_y;
 8000d88:	e0bffc17 	ldw	r2,-16(fp)
 8000d8c:	10c00b17 	ldw	r3,44(r2)
 8000d90:	e0bffc17 	ldw	r2,-16(fp)
 8000d94:	10800917 	ldw	r2,36(r2)
 8000d98:	1885c83a 	sub	r2,r3,r2
 8000d9c:	e0bffe15 	stw	r2,-8(fp)

            if (obj->flags & CENTERED) {
 8000da0:	e0bffc17 	ldw	r2,-16(fp)
 8000da4:	10800017 	ldw	r2,0(r2)
 8000da8:	1080020c 	andi	r2,r2,8
 8000dac:	10001026 	beq	r2,zero,8000df0 <push_scene+0x130>
                x -= w / 2;
 8000db0:	e0bffd17 	ldw	r2,-12(fp)
 8000db4:	1006d7fa 	srli	r3,r2,31
 8000db8:	1885883a 	add	r2,r3,r2
 8000dbc:	1005d07a 	srai	r2,r2,1
 8000dc0:	1007883a 	mov	r3,r2
 8000dc4:	e0bffa17 	ldw	r2,-24(fp)
 8000dc8:	10c5c83a 	sub	r2,r2,r3
 8000dcc:	e0bffa15 	stw	r2,-24(fp)
                y -= h / 2;
 8000dd0:	e0bffe17 	ldw	r2,-8(fp)
 8000dd4:	1006d7fa 	srli	r3,r2,31
 8000dd8:	1885883a 	add	r2,r3,r2
 8000ddc:	1005d07a 	srai	r2,r2,1
 8000de0:	1007883a 	mov	r3,r2
 8000de4:	e0bffb17 	ldw	r2,-20(fp)
 8000de8:	10c5c83a 	sub	r2,r2,r3
 8000dec:	e0bffb15 	stw	r2,-20(fp)
            }

            if (x >= -w && x < SCREEN_WIDTH && y >= -h && y < SCREEN_HEIGHT) {
 8000df0:	e0bffd17 	ldw	r2,-12(fp)
 8000df4:	0085c83a 	sub	r2,zero,r2
 8000df8:	e0fffa17 	ldw	r3,-24(fp)
 8000dfc:	18801116 	blt	r3,r2,8000e44 <push_scene+0x184>
 8000e00:	e0bffa17 	ldw	r2,-24(fp)
 8000e04:	1080a008 	cmpgei	r2,r2,640
 8000e08:	10000e1e 	bne	r2,zero,8000e44 <push_scene+0x184>
 8000e0c:	e0bffe17 	ldw	r2,-8(fp)
 8000e10:	0085c83a 	sub	r2,zero,r2
 8000e14:	e0fffb17 	ldw	r3,-20(fp)
 8000e18:	18800a16 	blt	r3,r2,8000e44 <push_scene+0x184>
 8000e1c:	e0bffb17 	ldw	r2,-20(fp)
 8000e20:	10807808 	cmpgei	r2,r2,480
 8000e24:	1000071e 	bne	r2,zero,8000e44 <push_scene+0x184>
                obj->sprite.screen_x = x;
 8000e28:	e0bffc17 	ldw	r2,-16(fp)
 8000e2c:	e0fffa17 	ldw	r3,-24(fp)
 8000e30:	10c00615 	stw	r3,24(r2)
                obj->sprite.screen_y = y;
 8000e34:	e0bffc17 	ldw	r2,-16(fp)
 8000e38:	e0fffb17 	ldw	r3,-20(fp)
 8000e3c:	10c00715 	stw	r3,28(r2)
                pop = 0;
 8000e40:	e03ff915 	stw	zero,-28(fp)
            }
        }

        if (pop)
 8000e44:	e0bff917 	ldw	r2,-28(fp)
 8000e48:	10000326 	beq	r2,zero,8000e58 <push_scene+0x198>
            pop_sprite(i);
 8000e4c:	e13ff817 	ldw	r4,-32(fp)
 8000e50:	800281c0 	call	800281c <pop_sprite>
 8000e54:	00000606 	br	8000e70 <push_scene+0x1b0>
        else
            push_sprite(&obj->sprite, i);
 8000e58:	e0bffc17 	ldw	r2,-16(fp)
 8000e5c:	10800304 	addi	r2,r2,12
 8000e60:	e0fff817 	ldw	r3,-32(fp)
 8000e64:	180b883a 	mov	r5,r3
 8000e68:	1009883a 	mov	r4,r2
 8000e6c:	80027ac0 	call	80027ac <push_sprite>
    if (obj != NULL)
        obj->flags = 0;
}

void push_scene(scene_t* scene) {
    for (int i = 0; i < MAX_SPRITES; i++) {
 8000e70:	e0bff817 	ldw	r2,-32(fp)
 8000e74:	10800044 	addi	r2,r2,1
 8000e78:	e0bff815 	stw	r2,-32(fp)
 8000e7c:	e0bff817 	ldw	r2,-32(fp)
 8000e80:	10801010 	cmplti	r2,r2,64
 8000e84:	103f951e 	bne	r2,zero,8000cdc <__alt_data_end+0xfc000cdc>
            pop_sprite(i);
        else
            push_sprite(&obj->sprite, i);
              
    }
}
 8000e88:	0001883a 	nop
 8000e8c:	e037883a 	mov	sp,fp
 8000e90:	dfc00117 	ldw	ra,4(sp)
 8000e94:	df000017 	ldw	fp,0(sp)
 8000e98:	dec00204 	addi	sp,sp,8
 8000e9c:	f800283a 	ret

08000ea0 <clear_scene>:

void clear_scene(scene_t* scene) {
 8000ea0:	defffd04 	addi	sp,sp,-12
 8000ea4:	dfc00215 	stw	ra,8(sp)
 8000ea8:	df000115 	stw	fp,4(sp)
 8000eac:	df000104 	addi	fp,sp,4
 8000eb0:	e13fff15 	stw	r4,-4(fp)
    memset(scene, 0, sizeof(scene_t));
 8000eb4:	01852604 	movi	r6,5272
 8000eb8:	000b883a 	mov	r5,zero
 8000ebc:	e13fff17 	ldw	r4,-4(fp)
 8000ec0:	800a7380 	call	800a738 <memset>
    scene->last_update = 0.0f;
 8000ec4:	e0bfff17 	ldw	r2,-4(fp)
 8000ec8:	10000015 	stw	zero,0(r2)
}
 8000ecc:	0001883a 	nop
 8000ed0:	e037883a 	mov	sp,fp
 8000ed4:	dfc00117 	ldw	ra,4(sp)
 8000ed8:	df000017 	ldw	fp,0(sp)
 8000edc:	dec00204 	addi	sp,sp,8
 8000ee0:	f800283a 	ret

08000ee4 <ship_select>:

ship_t* ship_select(scene_t* scene, int user) {
 8000ee4:	defffd04 	addi	sp,sp,-12
 8000ee8:	df000215 	stw	fp,8(sp)
 8000eec:	df000204 	addi	fp,sp,8
 8000ef0:	e13ffe15 	stw	r4,-8(fp)
 8000ef4:	e17fff15 	stw	r5,-4(fp)
    switch (user) {
 8000ef8:	e0bfff17 	ldw	r2,-4(fp)
 8000efc:	10000326 	beq	r2,zero,8000f0c <ship_select+0x28>
 8000f00:	10800060 	cmpeqi	r2,r2,1
 8000f04:	1000041e 	bne	r2,zero,8000f18 <ship_select+0x34>
 8000f08:	00000606 	br	8000f24 <ship_select+0x40>
        case PLAYER:
            return scene->ships.player;
 8000f0c:	e0bffe17 	ldw	r2,-8(fp)
 8000f10:	10803204 	addi	r2,r2,200
 8000f14:	00000406 	br	8000f28 <ship_select+0x44>
        case ENEMY:
            return scene->ships.enemy;
 8000f18:	e0bffe17 	ldw	r2,-8(fp)
 8000f1c:	1080aa04 	addi	r2,r2,680
 8000f20:	00000106 	br	8000f28 <ship_select+0x44>
    }
    return NULL;
 8000f24:	0005883a 	mov	r2,zero
}
 8000f28:	e037883a 	mov	sp,fp
 8000f2c:	df000017 	ldw	fp,0(sp)
 8000f30:	dec00104 	addi	sp,sp,4
 8000f34:	f800283a 	ret

08000f38 <allocate_ship>:

ship_t* allocate_ship(scene_t* scene, int user) {
 8000f38:	defffa04 	addi	sp,sp,-24
 8000f3c:	dfc00515 	stw	ra,20(sp)
 8000f40:	df000415 	stw	fp,16(sp)
 8000f44:	df000404 	addi	fp,sp,16
 8000f48:	e13ffe15 	stw	r4,-8(fp)
 8000f4c:	e17fff15 	stw	r5,-4(fp)
    ship_t* ships = ship_select(scene, user);
 8000f50:	e17fff17 	ldw	r5,-4(fp)
 8000f54:	e13ffe17 	ldw	r4,-8(fp)
 8000f58:	8000ee40 	call	8000ee4 <ship_select>
 8000f5c:	e0bffd15 	stw	r2,-12(fp)
    if (ships == NULL)
 8000f60:	e0bffd17 	ldw	r2,-12(fp)
 8000f64:	1000021e 	bne	r2,zero,8000f70 <allocate_ship+0x38>
        return NULL;
 8000f68:	0005883a 	mov	r2,zero
 8000f6c:	00001a06 	br	8000fd8 <allocate_ship+0xa0>
    
    for (int i = 0; i < USER_SHIPS; i++) {
 8000f70:	e03ffc15 	stw	zero,-16(fp)
 8000f74:	00001406 	br	8000fc8 <allocate_ship+0x90>
        if (ships[i].ptr == NULL)
 8000f78:	e0bffc17 	ldw	r2,-16(fp)
 8000f7c:	01401404 	movi	r5,80
 8000f80:	1009883a 	mov	r4,r2
 8000f84:	80071600 	call	8007160 <__mulsi3>
 8000f88:	1007883a 	mov	r3,r2
 8000f8c:	e0bffd17 	ldw	r2,-12(fp)
 8000f90:	10c5883a 	add	r2,r2,r3
 8000f94:	10800017 	ldw	r2,0(r2)
 8000f98:	1000081e 	bne	r2,zero,8000fbc <allocate_ship+0x84>
            return &ships[i];
 8000f9c:	e0bffc17 	ldw	r2,-16(fp)
 8000fa0:	01401404 	movi	r5,80
 8000fa4:	1009883a 	mov	r4,r2
 8000fa8:	80071600 	call	8007160 <__mulsi3>
 8000fac:	1007883a 	mov	r3,r2
 8000fb0:	e0bffd17 	ldw	r2,-12(fp)
 8000fb4:	10c5883a 	add	r2,r2,r3
 8000fb8:	00000706 	br	8000fd8 <allocate_ship+0xa0>
ship_t* allocate_ship(scene_t* scene, int user) {
    ship_t* ships = ship_select(scene, user);
    if (ships == NULL)
        return NULL;
    
    for (int i = 0; i < USER_SHIPS; i++) {
 8000fbc:	e0bffc17 	ldw	r2,-16(fp)
 8000fc0:	10800044 	addi	r2,r2,1
 8000fc4:	e0bffc15 	stw	r2,-16(fp)
 8000fc8:	e0bffc17 	ldw	r2,-16(fp)
 8000fcc:	10800190 	cmplti	r2,r2,6
 8000fd0:	103fe91e 	bne	r2,zero,8000f78 <__alt_data_end+0xfc000f78>
        if (ships[i].ptr == NULL)
            return &ships[i];
    }
    return NULL;
 8000fd4:	0005883a 	mov	r2,zero
}
 8000fd8:	e037883a 	mov	sp,fp
 8000fdc:	dfc00117 	ldw	ra,4(sp)
 8000fe0:	df000017 	ldw	fp,0(sp)
 8000fe4:	dec00204 	addi	sp,sp,8
 8000fe8:	f800283a 	ret

08000fec <ship_count>:

int ship_count(scene_t* scene, int user) {
 8000fec:	defff804 	addi	sp,sp,-32
 8000ff0:	dfc00715 	stw	ra,28(sp)
 8000ff4:	df000615 	stw	fp,24(sp)
 8000ff8:	dc000515 	stw	r16,20(sp)
 8000ffc:	df000604 	addi	fp,sp,24
 8001000:	e13ffd15 	stw	r4,-12(fp)
 8001004:	e17ffe15 	stw	r5,-8(fp)
    ship_t* ships = NULL;
 8001008:	e03ffa15 	stw	zero,-24(fp)

    switch (user) {
 800100c:	e0bffe17 	ldw	r2,-8(fp)
 8001010:	10000326 	beq	r2,zero,8001020 <ship_count+0x34>
 8001014:	10800060 	cmpeqi	r2,r2,1
 8001018:	1000051e 	bne	r2,zero,8001030 <ship_count+0x44>
 800101c:	00000806 	br	8001040 <ship_count+0x54>
        case PLAYER:
            ships = scene->ships.player;
 8001020:	e0bffd17 	ldw	r2,-12(fp)
 8001024:	10803204 	addi	r2,r2,200
 8001028:	e0bffa15 	stw	r2,-24(fp)
            break;
 800102c:	00000406 	br	8001040 <ship_count+0x54>
        case ENEMY:
            ships = scene->ships.enemy;
 8001030:	e0bffd17 	ldw	r2,-12(fp)
 8001034:	1080aa04 	addi	r2,r2,680
 8001038:	e0bffa15 	stw	r2,-24(fp)
            break;
 800103c:	0001883a 	nop
    }

    if (ships == NULL)
 8001040:	e0bffa17 	ldw	r2,-24(fp)
 8001044:	1000021e 	bne	r2,zero,8001050 <ship_count+0x64>
        return -1;
 8001048:	00bfffc4 	movi	r2,-1
 800104c:	00001606 	br	80010a8 <ship_count+0xbc>
    
    int count = 0;
 8001050:	e03ffb15 	stw	zero,-20(fp)
    for (int i = 0; i < USER_SHIPS; i++) {
 8001054:	e03ffc15 	stw	zero,-16(fp)
 8001058:	00000f06 	br	8001098 <ship_count+0xac>
        if (scene->ships.player[i].ptr != NULL)
 800105c:	e43ffd17 	ldw	r16,-12(fp)
 8001060:	e0bffc17 	ldw	r2,-16(fp)
 8001064:	01401404 	movi	r5,80
 8001068:	1009883a 	mov	r4,r2
 800106c:	80071600 	call	8007160 <__mulsi3>
 8001070:	8085883a 	add	r2,r16,r2
 8001074:	10803204 	addi	r2,r2,200
 8001078:	10800017 	ldw	r2,0(r2)
 800107c:	10000326 	beq	r2,zero,800108c <ship_count+0xa0>
            count++;
 8001080:	e0bffb17 	ldw	r2,-20(fp)
 8001084:	10800044 	addi	r2,r2,1
 8001088:	e0bffb15 	stw	r2,-20(fp)

    if (ships == NULL)
        return -1;
    
    int count = 0;
    for (int i = 0; i < USER_SHIPS; i++) {
 800108c:	e0bffc17 	ldw	r2,-16(fp)
 8001090:	10800044 	addi	r2,r2,1
 8001094:	e0bffc15 	stw	r2,-16(fp)
 8001098:	e0bffc17 	ldw	r2,-16(fp)
 800109c:	10800190 	cmplti	r2,r2,6
 80010a0:	103fee1e 	bne	r2,zero,800105c <__alt_data_end+0xfc00105c>
        if (scene->ships.player[i].ptr != NULL)
            count++;
    }
    
    return count;
 80010a4:	e0bffb17 	ldw	r2,-20(fp)
}
 80010a8:	e6ffff04 	addi	sp,fp,-4
 80010ac:	dfc00217 	ldw	ra,8(sp)
 80010b0:	df000117 	ldw	fp,4(sp)
 80010b4:	dc000017 	ldw	r16,0(sp)
 80010b8:	dec00304 	addi	sp,sp,12
 80010bc:	f800283a 	ret

080010c0 <spawn_ship>:

ship_t* spawn_ship(scene_t* scene, const ship_t* spawn, int user, position_t pos) {
 80010c0:	defff404 	addi	sp,sp,-48
 80010c4:	dfc00a15 	stw	ra,40(sp)
 80010c8:	df000915 	stw	fp,36(sp)
 80010cc:	dc000815 	stw	r16,32(sp)
 80010d0:	df000904 	addi	fp,sp,36
 80010d4:	e13ff915 	stw	r4,-28(fp)
 80010d8:	e17ffa15 	stw	r5,-24(fp)
 80010dc:	e1bffb15 	stw	r6,-20(fp)
 80010e0:	e1c00215 	stw	r7,8(fp)
    ship_t* ship = allocate_ship(scene, user);
 80010e4:	e17ffb17 	ldw	r5,-20(fp)
 80010e8:	e13ff917 	ldw	r4,-28(fp)
 80010ec:	8000f380 	call	8000f38 <allocate_ship>
 80010f0:	e0bff715 	stw	r2,-36(fp)
    if (ship == NULL)
 80010f4:	e0bff717 	ldw	r2,-36(fp)
 80010f8:	1000021e 	bne	r2,zero,8001104 <spawn_ship+0x44>
        return NULL;
 80010fc:	0005883a 	mov	r2,zero
 8001100:	00004806 	br	8001224 <spawn_ship+0x164>
    
    game_object_t* obj = allocate_object(scene, SHIPS, USED | VISABLE | SCROLL | CENTERED);
 8001104:	018003c4 	movi	r6,15
 8001108:	01400044 	movi	r5,1
 800110c:	e13ff917 	ldw	r4,-28(fp)
 8001110:	8000ac80 	call	8000ac8 <allocate_object>
 8001114:	e0bff815 	stw	r2,-32(fp)
    if (obj == NULL)
 8001118:	e0bff817 	ldw	r2,-32(fp)
 800111c:	1000021e 	bne	r2,zero,8001128 <spawn_ship+0x68>
        return NULL;
 8001120:	0005883a 	mov	r2,zero
 8001124:	00003f06 	br	8001224 <spawn_ship+0x164>

    *ship       = *spawn;
 8001128:	e0fff717 	ldw	r3,-36(fp)
 800112c:	e0bffa17 	ldw	r2,-24(fp)
 8001130:	1009883a 	mov	r4,r2
 8001134:	00801404 	movi	r2,80
 8001138:	100d883a 	mov	r6,r2
 800113c:	200b883a 	mov	r5,r4
 8001140:	1809883a 	mov	r4,r3
 8001144:	800a5f00 	call	800a5f0 <memcpy>
    ship->ptr   = obj;
 8001148:	e0bff717 	ldw	r2,-36(fp)
 800114c:	e0fff817 	ldw	r3,-32(fp)
 8001150:	10c00015 	stw	r3,0(r2)
    obj->sprite = *ship->sprite;
 8001154:	e0bff717 	ldw	r2,-36(fp)
 8001158:	10c00e17 	ldw	r3,56(r2)
 800115c:	e0bff817 	ldw	r2,-32(fp)
 8001160:	19000017 	ldw	r4,0(r3)
 8001164:	11000315 	stw	r4,12(r2)
 8001168:	19000117 	ldw	r4,4(r3)
 800116c:	11000415 	stw	r4,16(r2)
 8001170:	19000217 	ldw	r4,8(r3)
 8001174:	11000515 	stw	r4,20(r2)
 8001178:	19000317 	ldw	r4,12(r3)
 800117c:	11000615 	stw	r4,24(r2)
 8001180:	19000417 	ldw	r4,16(r3)
 8001184:	11000715 	stw	r4,28(r2)
 8001188:	19000517 	ldw	r4,20(r3)
 800118c:	11000815 	stw	r4,32(r2)
 8001190:	19000617 	ldw	r4,24(r3)
 8001194:	11000915 	stw	r4,36(r2)
 8001198:	19000717 	ldw	r4,28(r3)
 800119c:	11000a15 	stw	r4,40(r2)
 80011a0:	18c00817 	ldw	r3,32(r3)
 80011a4:	10c00b15 	stw	r3,44(r2)
    obj->pos    = pos;
 80011a8:	e0bff817 	ldw	r2,-32(fp)
 80011ac:	e0c00217 	ldw	r3,8(fp)
 80011b0:	10c00115 	stw	r3,4(r2)
 80011b4:	e0c00317 	ldw	r3,12(fp)
 80011b8:	10c00215 	stw	r3,8(r2)
    ship->physics.p.x = pos.x;
 80011bc:	e0800217 	ldw	r2,8(fp)
 80011c0:	1009883a 	mov	r4,r2
 80011c4:	80085980 	call	8008598 <__floatsisf>
 80011c8:	1007883a 	mov	r3,r2
 80011cc:	e0bff717 	ldw	r2,-36(fp)
 80011d0:	10c00815 	stw	r3,32(r2)
    ship->physics.p.y = pos.y;
 80011d4:	e0800317 	ldw	r2,12(fp)
 80011d8:	1009883a 	mov	r4,r2
 80011dc:	80085980 	call	8008598 <__floatsisf>
 80011e0:	1007883a 	mov	r3,r2
 80011e4:	e0bff717 	ldw	r2,-36(fp)
 80011e8:	10c00915 	stw	r3,36(r2)
    ship->firerate_data = create_rate(ship->firerate);
 80011ec:	e0bff717 	ldw	r2,-36(fp)
 80011f0:	10c01017 	ldw	r3,64(r2)
 80011f4:	e43ff717 	ldw	r16,-36(fp)
 80011f8:	e0bffc04 	addi	r2,fp,-16
 80011fc:	180b883a 	mov	r5,r3
 8001200:	1009883a 	mov	r4,r2
 8001204:	80045540 	call	8004554 <create_rate>
 8001208:	e0bffc17 	ldw	r2,-16(fp)
 800120c:	80801115 	stw	r2,68(r16)
 8001210:	e0bffd17 	ldw	r2,-12(fp)
 8001214:	80801215 	stw	r2,72(r16)
 8001218:	e0bffe17 	ldw	r2,-8(fp)
 800121c:	80801315 	stw	r2,76(r16)
    return ship;
 8001220:	e0bff717 	ldw	r2,-36(fp)
}
 8001224:	e6ffff04 	addi	sp,fp,-4
 8001228:	dfc00217 	ldw	ra,8(sp)
 800122c:	df000117 	ldw	fp,4(sp)
 8001230:	dc000017 	ldw	r16,0(sp)
 8001234:	dec00404 	addi	sp,sp,16
 8001238:	f800283a 	ret

0800123c <destroy_ship>:

void destroy_ship(scene_t* scene, ship_t* ship) {
 800123c:	defffc04 	addi	sp,sp,-16
 8001240:	dfc00315 	stw	ra,12(sp)
 8001244:	df000215 	stw	fp,8(sp)
 8001248:	df000204 	addi	fp,sp,8
 800124c:	e13ffe15 	stw	r4,-8(fp)
 8001250:	e17fff15 	stw	r5,-4(fp)
    if (ship->sprite->address == player_cruiser.sprite->address)
 8001254:	e0bfff17 	ldw	r2,-4(fp)
 8001258:	10800e17 	ldw	r2,56(r2)
 800125c:	10c00017 	ldw	r3,0(r2)
 8001260:	008200b4 	movhi	r2,2050
 8001264:	10b99504 	addi	r2,r2,-6572
 8001268:	10800017 	ldw	r2,0(r2)
 800126c:	1880051e 	bne	r3,r2,8001284 <destroy_ship+0x48>
        scene->shipcountc--;
 8001270:	e0bffe17 	ldw	r2,-8(fp)
 8001274:	10800117 	ldw	r2,4(r2)
 8001278:	10ffffc4 	addi	r3,r2,-1
 800127c:	e0bffe17 	ldw	r2,-8(fp)
 8001280:	10c00115 	stw	r3,4(r2)
    if (ship->sprite->address == player_fighter.sprite->address)
 8001284:	e0bfff17 	ldw	r2,-4(fp)
 8001288:	10800e17 	ldw	r2,56(r2)
 800128c:	10c00017 	ldw	r3,0(r2)
 8001290:	008200b4 	movhi	r2,2050
 8001294:	10b29204 	addi	r2,r2,-13752
 8001298:	10800017 	ldw	r2,0(r2)
 800129c:	1880051e 	bne	r3,r2,80012b4 <destroy_ship+0x78>
        scene->shipcountf--;
 80012a0:	e0bffe17 	ldw	r2,-8(fp)
 80012a4:	10800217 	ldw	r2,8(r2)
 80012a8:	10ffffc4 	addi	r3,r2,-1
 80012ac:	e0bffe17 	ldw	r2,-8(fp)
 80012b0:	10c00215 	stw	r3,8(r2)
    if (ship->sprite->address == enemy_cruiser.sprite->address ||
 80012b4:	e0bfff17 	ldw	r2,-4(fp)
 80012b8:	10800e17 	ldw	r2,56(r2)
 80012bc:	10c00017 	ldw	r3,0(r2)
 80012c0:	008200b4 	movhi	r2,2050
 80012c4:	10808f04 	addi	r2,r2,572
 80012c8:	10800017 	ldw	r2,0(r2)
 80012cc:	18800726 	beq	r3,r2,80012ec <destroy_ship+0xb0>
        ship->sprite->address == enemy_fighter.sprite->address)
 80012d0:	e0bfff17 	ldw	r2,-4(fp)
 80012d4:	10800e17 	ldw	r2,56(r2)
 80012d8:	10c00017 	ldw	r3,0(r2)
 80012dc:	008200b4 	movhi	r2,2050
 80012e0:	10baf204 	addi	r2,r2,-5176
 80012e4:	10800017 	ldw	r2,0(r2)
void destroy_ship(scene_t* scene, ship_t* ship) {
    if (ship->sprite->address == player_cruiser.sprite->address)
        scene->shipcountc--;
    if (ship->sprite->address == player_fighter.sprite->address)
        scene->shipcountf--;
    if (ship->sprite->address == enemy_cruiser.sprite->address ||
 80012e8:	1880051e 	bne	r3,r2,8001300 <destroy_ship+0xc4>
        ship->sprite->address == enemy_fighter.sprite->address)
        scene->eshipcount--;
 80012ec:	e0bffe17 	ldw	r2,-8(fp)
 80012f0:	10800317 	ldw	r2,12(r2)
 80012f4:	10ffffc4 	addi	r3,r2,-1
 80012f8:	e0bffe17 	ldw	r2,-8(fp)
 80012fc:	10c00315 	stw	r3,12(r2)
    deallocate_object(ship->ptr);
 8001300:	e0bfff17 	ldw	r2,-4(fp)
 8001304:	10800017 	ldw	r2,0(r2)
 8001308:	1009883a 	mov	r4,r2
 800130c:	8000c8c0 	call	8000c8c <deallocate_object>
    ship->ptr = NULL;
 8001310:	e0bfff17 	ldw	r2,-4(fp)
 8001314:	10000015 	stw	zero,0(r2)

    // todo: spawn ship exposion??
}
 8001318:	0001883a 	nop
 800131c:	e037883a 	mov	sp,fp
 8001320:	dfc00117 	ldw	ra,4(sp)
 8001324:	df000017 	ldw	fp,0(sp)
 8001328:	dec00204 	addi	sp,sp,8
 800132c:	f800283a 	ret

08001330 <isqrt>:

int isqrt(int x) {
 8001330:	defffa04 	addi	sp,sp,-24
 8001334:	df000515 	stw	fp,20(sp)
 8001338:	df000504 	addi	fp,sp,20
 800133c:	e13fff15 	stw	r4,-4(fp)
    int temp, g = 0, b = 0x8000, shft = 15;
 8001340:	e03ffb15 	stw	zero,-20(fp)
 8001344:	00a00014 	movui	r2,32768
 8001348:	e0bffc15 	stw	r2,-16(fp)
 800134c:	008003c4 	movi	r2,15
 8001350:	e0bffd15 	stw	r2,-12(fp)
    do {
        if (x >= (temp = (((g << 1) + b) << shft--))) {
 8001354:	e0bffb17 	ldw	r2,-20(fp)
 8001358:	1085883a 	add	r2,r2,r2
 800135c:	1007883a 	mov	r3,r2
 8001360:	e0bffc17 	ldw	r2,-16(fp)
 8001364:	1887883a 	add	r3,r3,r2
 8001368:	e0bffd17 	ldw	r2,-12(fp)
 800136c:	113fffc4 	addi	r4,r2,-1
 8001370:	e13ffd15 	stw	r4,-12(fp)
 8001374:	1884983a 	sll	r2,r3,r2
 8001378:	e0bffe15 	stw	r2,-8(fp)
 800137c:	e0bffe17 	ldw	r2,-8(fp)
 8001380:	e0ffff17 	ldw	r3,-4(fp)
 8001384:	18800816 	blt	r3,r2,80013a8 <isqrt+0x78>
           g += b;
 8001388:	e0fffb17 	ldw	r3,-20(fp)
 800138c:	e0bffc17 	ldw	r2,-16(fp)
 8001390:	1885883a 	add	r2,r3,r2
 8001394:	e0bffb15 	stw	r2,-20(fp)
           x -= temp;
 8001398:	e0ffff17 	ldw	r3,-4(fp)
 800139c:	e0bffe17 	ldw	r2,-8(fp)
 80013a0:	1885c83a 	sub	r2,r3,r2
 80013a4:	e0bfff15 	stw	r2,-4(fp)
        }
    } while (b >>= 1);
 80013a8:	e0bffc17 	ldw	r2,-16(fp)
 80013ac:	1005d07a 	srai	r2,r2,1
 80013b0:	e0bffc15 	stw	r2,-16(fp)
 80013b4:	e0bffc17 	ldw	r2,-16(fp)
 80013b8:	103fe61e 	bne	r2,zero,8001354 <__alt_data_end+0xfc001354>
    return g;
 80013bc:	e0bffb17 	ldw	r2,-20(fp)
}
 80013c0:	e037883a 	mov	sp,fp
 80013c4:	df000017 	ldw	fp,0(sp)
 80013c8:	dec00104 	addi	sp,sp,4
 80013cc:	f800283a 	ret

080013d0 <distance>:

int distance(position_t p1, position_t p2) {
 80013d0:	defff704 	addi	sp,sp,-36
 80013d4:	dfc00815 	stw	ra,32(sp)
 80013d8:	df000715 	stw	fp,28(sp)
 80013dc:	dc000615 	stw	r16,24(sp)
 80013e0:	df000704 	addi	fp,sp,28
 80013e4:	e13ffb15 	stw	r4,-20(fp)
 80013e8:	e17ffc15 	stw	r5,-16(fp)
 80013ec:	e1bffd15 	stw	r6,-12(fp)
 80013f0:	e1fffe15 	stw	r7,-8(fp)
    int dx = p2.x - p1.x;
 80013f4:	e0fffd17 	ldw	r3,-12(fp)
 80013f8:	e0bffb17 	ldw	r2,-20(fp)
 80013fc:	1885c83a 	sub	r2,r3,r2
 8001400:	e0bff915 	stw	r2,-28(fp)
    int dy = p2.y - p1.y;
 8001404:	e0fffe17 	ldw	r3,-8(fp)
 8001408:	e0bffc17 	ldw	r2,-16(fp)
 800140c:	1885c83a 	sub	r2,r3,r2
 8001410:	e0bffa15 	stw	r2,-24(fp)
    return isqrt(dx * dx + dy * dy);
 8001414:	e17ff917 	ldw	r5,-28(fp)
 8001418:	e13ff917 	ldw	r4,-28(fp)
 800141c:	80071600 	call	8007160 <__mulsi3>
 8001420:	1021883a 	mov	r16,r2
 8001424:	e17ffa17 	ldw	r5,-24(fp)
 8001428:	e13ffa17 	ldw	r4,-24(fp)
 800142c:	80071600 	call	8007160 <__mulsi3>
 8001430:	8085883a 	add	r2,r16,r2
 8001434:	1009883a 	mov	r4,r2
 8001438:	80013300 	call	8001330 <isqrt>
}
 800143c:	e6ffff04 	addi	sp,fp,-4
 8001440:	dfc00217 	ldw	ra,8(sp)
 8001444:	df000117 	ldw	fp,4(sp)
 8001448:	dc000017 	ldw	r16,0(sp)
 800144c:	dec00304 	addi	sp,sp,12
 8001450:	f800283a 	ret

08001454 <closest_ship>:

ship_t* closest_ship(scene_t* scene, int user, fposition_t pos) {
 8001454:	defff104 	addi	sp,sp,-60
 8001458:	dfc00e15 	stw	ra,56(sp)
 800145c:	df000d15 	stw	fp,52(sp)
 8001460:	df000d04 	addi	fp,sp,52
 8001464:	e13ffc15 	stw	r4,-16(fp)
 8001468:	e17ffd15 	stw	r5,-12(fp)
 800146c:	e1bffe15 	stw	r6,-8(fp)
 8001470:	e1ffff15 	stw	r7,-4(fp)
    ship_t* ships = ship_select(scene, user);
 8001474:	e17ffd17 	ldw	r5,-12(fp)
 8001478:	e13ffc17 	ldw	r4,-16(fp)
 800147c:	8000ee40 	call	8000ee4 <ship_select>
 8001480:	e0bff615 	stw	r2,-40(fp)
    if (ships == NULL)
 8001484:	e0bff617 	ldw	r2,-40(fp)
 8001488:	1000021e 	bne	r2,zero,8001494 <closest_ship+0x40>
        return NULL;
 800148c:	0005883a 	mov	r2,zero
 8001490:	00004d06 	br	80015c8 <closest_ship+0x174>
    
    position_t p = { pos.x, pos.y };
 8001494:	e0bffe17 	ldw	r2,-8(fp)
 8001498:	1009883a 	mov	r4,r2
 800149c:	80085280 	call	8008528 <__fixsfsi>
 80014a0:	e0bff815 	stw	r2,-32(fp)
 80014a4:	e0bfff17 	ldw	r2,-4(fp)
 80014a8:	1009883a 	mov	r4,r2
 80014ac:	80085280 	call	8008528 <__fixsfsi>
 80014b0:	e0bff915 	stw	r2,-28(fp)
    
    int idx = -1;
 80014b4:	00bfffc4 	movi	r2,-1
 80014b8:	e0bff315 	stw	r2,-52(fp)
    int lowest, dist;
    for (int i = 0; i < USER_SHIPS; i++) {
 80014bc:	e03ff515 	stw	zero,-44(fp)
 80014c0:	00003206 	br	800158c <closest_ship+0x138>
        if (ships[i].ptr != NULL) {
 80014c4:	e0bff517 	ldw	r2,-44(fp)
 80014c8:	01401404 	movi	r5,80
 80014cc:	1009883a 	mov	r4,r2
 80014d0:	80071600 	call	8007160 <__mulsi3>
 80014d4:	1007883a 	mov	r3,r2
 80014d8:	e0bff617 	ldw	r2,-40(fp)
 80014dc:	10c5883a 	add	r2,r2,r3
 80014e0:	10800017 	ldw	r2,0(r2)
 80014e4:	10002626 	beq	r2,zero,8001580 <closest_ship+0x12c>
            position_t sp = { ships[i].physics.p.x, ships[i].physics.p.y };
 80014e8:	e0bff517 	ldw	r2,-44(fp)
 80014ec:	01401404 	movi	r5,80
 80014f0:	1009883a 	mov	r4,r2
 80014f4:	80071600 	call	8007160 <__mulsi3>
 80014f8:	1007883a 	mov	r3,r2
 80014fc:	e0bff617 	ldw	r2,-40(fp)
 8001500:	10c5883a 	add	r2,r2,r3
 8001504:	10c00817 	ldw	r3,32(r2)
 8001508:	1809883a 	mov	r4,r3
 800150c:	80085280 	call	8008528 <__fixsfsi>
 8001510:	e0bffa15 	stw	r2,-24(fp)
 8001514:	e0bff517 	ldw	r2,-44(fp)
 8001518:	01401404 	movi	r5,80
 800151c:	1009883a 	mov	r4,r2
 8001520:	80071600 	call	8007160 <__mulsi3>
 8001524:	1007883a 	mov	r3,r2
 8001528:	e0bff617 	ldw	r2,-40(fp)
 800152c:	10c5883a 	add	r2,r2,r3
 8001530:	10c00917 	ldw	r3,36(r2)
 8001534:	1809883a 	mov	r4,r3
 8001538:	80085280 	call	8008528 <__fixsfsi>
 800153c:	e0bffb15 	stw	r2,-20(fp)
            dist = distance(p, sp);
 8001540:	e1bffa17 	ldw	r6,-24(fp)
 8001544:	e1fffb17 	ldw	r7,-20(fp)
 8001548:	e13ff817 	ldw	r4,-32(fp)
 800154c:	e17ff917 	ldw	r5,-28(fp)
 8001550:	80013d00 	call	80013d0 <distance>
 8001554:	e0bff715 	stw	r2,-36(fp)
            if (idx == -1 || dist < lowest) {
 8001558:	e0bff317 	ldw	r2,-52(fp)
 800155c:	10bfffe0 	cmpeqi	r2,r2,-1
 8001560:	1000031e 	bne	r2,zero,8001570 <closest_ship+0x11c>
 8001564:	e0fff717 	ldw	r3,-36(fp)
 8001568:	e0bff417 	ldw	r2,-48(fp)
 800156c:	1880040e 	bge	r3,r2,8001580 <closest_ship+0x12c>
                idx = i;
 8001570:	e0bff517 	ldw	r2,-44(fp)
 8001574:	e0bff315 	stw	r2,-52(fp)
                lowest = dist;
 8001578:	e0bff717 	ldw	r2,-36(fp)
 800157c:	e0bff415 	stw	r2,-48(fp)
    
    position_t p = { pos.x, pos.y };
    
    int idx = -1;
    int lowest, dist;
    for (int i = 0; i < USER_SHIPS; i++) {
 8001580:	e0bff517 	ldw	r2,-44(fp)
 8001584:	10800044 	addi	r2,r2,1
 8001588:	e0bff515 	stw	r2,-44(fp)
 800158c:	e0bff517 	ldw	r2,-44(fp)
 8001590:	10800190 	cmplti	r2,r2,6
 8001594:	103fcb1e 	bne	r2,zero,80014c4 <__alt_data_end+0xfc0014c4>
                idx = i;
                lowest = dist;
            }
        }
    }
    if (idx == -1)
 8001598:	e0bff317 	ldw	r2,-52(fp)
 800159c:	10bfffd8 	cmpnei	r2,r2,-1
 80015a0:	1000021e 	bne	r2,zero,80015ac <closest_ship+0x158>
    	return NULL;
 80015a4:	0005883a 	mov	r2,zero
 80015a8:	00000706 	br	80015c8 <closest_ship+0x174>
    return &ships[idx];
 80015ac:	e0bff317 	ldw	r2,-52(fp)
 80015b0:	01401404 	movi	r5,80
 80015b4:	1009883a 	mov	r4,r2
 80015b8:	80071600 	call	8007160 <__mulsi3>
 80015bc:	1007883a 	mov	r3,r2
 80015c0:	e0bff617 	ldw	r2,-40(fp)
 80015c4:	10c5883a 	add	r2,r2,r3
}
 80015c8:	e037883a 	mov	sp,fp
 80015cc:	dfc00117 	ldw	ra,4(sp)
 80015d0:	df000017 	ldw	fp,0(sp)
 80015d4:	dec00204 	addi	sp,sp,8
 80015d8:	f800283a 	ret

080015dc <weapon_select>:

weapon_t* weapon_select(scene_t* scene, int user) {
 80015dc:	defffd04 	addi	sp,sp,-12
 80015e0:	df000215 	stw	fp,8(sp)
 80015e4:	df000204 	addi	fp,sp,8
 80015e8:	e13ffe15 	stw	r4,-8(fp)
 80015ec:	e17fff15 	stw	r5,-4(fp)
    switch (user) {
 80015f0:	e0bfff17 	ldw	r2,-4(fp)
 80015f4:	10000326 	beq	r2,zero,8001604 <weapon_select+0x28>
 80015f8:	10800060 	cmpeqi	r2,r2,1
 80015fc:	1000041e 	bne	r2,zero,8001610 <weapon_select+0x34>
 8001600:	00000606 	br	800161c <weapon_select+0x40>
        case PLAYER:
            return scene->weapons.player;
 8001604:	e0bffe17 	ldw	r2,-8(fp)
 8001608:	10812204 	addi	r2,r2,1160
 800160c:	00000406 	br	8001620 <weapon_select+0x44>
        case ENEMY:
            return scene->weapons.enemy;
 8001610:	e0bffe17 	ldw	r2,-8(fp)
 8001614:	1081a404 	addi	r2,r2,1680
 8001618:	00000106 	br	8001620 <weapon_select+0x44>
    }
    return NULL;
 800161c:	0005883a 	mov	r2,zero
}
 8001620:	e037883a 	mov	sp,fp
 8001624:	df000017 	ldw	fp,0(sp)
 8001628:	dec00104 	addi	sp,sp,4
 800162c:	f800283a 	ret

08001630 <allocate_weapon>:

weapon_t* allocate_weapon(scene_t* scene, int user) {
 8001630:	defffa04 	addi	sp,sp,-24
 8001634:	dfc00515 	stw	ra,20(sp)
 8001638:	df000415 	stw	fp,16(sp)
 800163c:	df000404 	addi	fp,sp,16
 8001640:	e13ffe15 	stw	r4,-8(fp)
 8001644:	e17fff15 	stw	r5,-4(fp)
    weapon_t* weapons = weapon_select(scene, user);
 8001648:	e17fff17 	ldw	r5,-4(fp)
 800164c:	e13ffe17 	ldw	r4,-8(fp)
 8001650:	80015dc0 	call	80015dc <weapon_select>
 8001654:	e0bffd15 	stw	r2,-12(fp)
    if (weapons == NULL)
 8001658:	e0bffd17 	ldw	r2,-12(fp)
 800165c:	1000021e 	bne	r2,zero,8001668 <allocate_weapon+0x38>
        return NULL;
 8001660:	0005883a 	mov	r2,zero
 8001664:	00001a06 	br	80016d0 <allocate_weapon+0xa0>
    
    for (int i = 0; i < USER_WEAPONS; i++) {
 8001668:	e03ffc15 	stw	zero,-16(fp)
 800166c:	00001406 	br	80016c0 <allocate_weapon+0x90>
        if (weapons[i].ptr == NULL)
 8001670:	e0bffc17 	ldw	r2,-16(fp)
 8001674:	01400d04 	movi	r5,52
 8001678:	1009883a 	mov	r4,r2
 800167c:	80071600 	call	8007160 <__mulsi3>
 8001680:	1007883a 	mov	r3,r2
 8001684:	e0bffd17 	ldw	r2,-12(fp)
 8001688:	10c5883a 	add	r2,r2,r3
 800168c:	10800017 	ldw	r2,0(r2)
 8001690:	1000081e 	bne	r2,zero,80016b4 <allocate_weapon+0x84>
            return &weapons[i];
 8001694:	e0bffc17 	ldw	r2,-16(fp)
 8001698:	01400d04 	movi	r5,52
 800169c:	1009883a 	mov	r4,r2
 80016a0:	80071600 	call	8007160 <__mulsi3>
 80016a4:	1007883a 	mov	r3,r2
 80016a8:	e0bffd17 	ldw	r2,-12(fp)
 80016ac:	10c5883a 	add	r2,r2,r3
 80016b0:	00000706 	br	80016d0 <allocate_weapon+0xa0>
weapon_t* allocate_weapon(scene_t* scene, int user) {
    weapon_t* weapons = weapon_select(scene, user);
    if (weapons == NULL)
        return NULL;
    
    for (int i = 0; i < USER_WEAPONS; i++) {
 80016b4:	e0bffc17 	ldw	r2,-16(fp)
 80016b8:	10800044 	addi	r2,r2,1
 80016bc:	e0bffc15 	stw	r2,-16(fp)
 80016c0:	e0bffc17 	ldw	r2,-16(fp)
 80016c4:	10800290 	cmplti	r2,r2,10
 80016c8:	103fe91e 	bne	r2,zero,8001670 <__alt_data_end+0xfc001670>
        if (weapons[i].ptr == NULL)
            return &weapons[i];
    }
    return 0;
 80016cc:	0005883a 	mov	r2,zero
}
 80016d0:	e037883a 	mov	sp,fp
 80016d4:	dfc00117 	ldw	ra,4(sp)
 80016d8:	df000017 	ldw	fp,0(sp)
 80016dc:	dec00204 	addi	sp,sp,8
 80016e0:	f800283a 	ret

080016e4 <destroy_weapon>:

void destroy_weapon(weapon_t* weapon) {
 80016e4:	defffd04 	addi	sp,sp,-12
 80016e8:	dfc00215 	stw	ra,8(sp)
 80016ec:	df000115 	stw	fp,4(sp)
 80016f0:	df000104 	addi	fp,sp,4
 80016f4:	e13fff15 	stw	r4,-4(fp)
    deallocate_object(weapon->ptr);
 80016f8:	e0bfff17 	ldw	r2,-4(fp)
 80016fc:	10800017 	ldw	r2,0(r2)
 8001700:	1009883a 	mov	r4,r2
 8001704:	8000c8c0 	call	8000c8c <deallocate_object>
    weapon->ptr = NULL;
 8001708:	e0bfff17 	ldw	r2,-4(fp)
 800170c:	10000015 	stw	zero,0(r2)

    // todo: spawn weapon exposion??
}
 8001710:	0001883a 	nop
 8001714:	e037883a 	mov	sp,fp
 8001718:	dfc00117 	ldw	ra,4(sp)
 800171c:	df000017 	ldw	fp,0(sp)
 8001720:	dec00204 	addi	sp,sp,8
 8001724:	f800283a 	ret

08001728 <spawn_weapon>:

weapon_t* spawn_weapon(scene_t* scene, ship_t* ship, ship_t* target, fposition_t v, int user) {
 8001728:	defff704 	addi	sp,sp,-36
 800172c:	dfc00715 	stw	ra,28(sp)
 8001730:	df000615 	stw	fp,24(sp)
 8001734:	dc000515 	stw	r16,20(sp)
 8001738:	df000604 	addi	fp,sp,24
 800173c:	e13ffc15 	stw	r4,-16(fp)
 8001740:	e17ffd15 	stw	r5,-12(fp)
 8001744:	e1bffe15 	stw	r6,-8(fp)
 8001748:	e1c00215 	stw	r7,8(fp)
    weapon_t* weapon = allocate_weapon(scene, user);
 800174c:	e1400417 	ldw	r5,16(fp)
 8001750:	e13ffc17 	ldw	r4,-16(fp)
 8001754:	80016300 	call	8001630 <allocate_weapon>
 8001758:	e0bffa15 	stw	r2,-24(fp)
    if (weapon == NULL)
 800175c:	e0bffa17 	ldw	r2,-24(fp)
 8001760:	1000021e 	bne	r2,zero,800176c <spawn_weapon+0x44>
        return NULL;
 8001764:	0005883a 	mov	r2,zero
 8001768:	00006906 	br	8001910 <spawn_weapon+0x1e8>
        
    game_object_t* obj = allocate_object(scene, EFFECTS, USED | VISABLE | SCROLL | CENTERED);
 800176c:	018003c4 	movi	r6,15
 8001770:	01400084 	movi	r5,2
 8001774:	e13ffc17 	ldw	r4,-16(fp)
 8001778:	8000ac80 	call	8000ac8 <allocate_object>
 800177c:	e0bffb15 	stw	r2,-20(fp)
    if (obj == NULL)
 8001780:	e0bffb17 	ldw	r2,-20(fp)
 8001784:	1000021e 	bne	r2,zero,8001790 <spawn_weapon+0x68>
        return NULL;
 8001788:	0005883a 	mov	r2,zero
 800178c:	00006006 	br	8001910 <spawn_weapon+0x1e8>
        
    weapon->ptr     = obj;
 8001790:	e0bffa17 	ldw	r2,-24(fp)
 8001794:	e0fffb17 	ldw	r3,-20(fp)
 8001798:	10c00015 	stw	r3,0(r2)
    weapon->data    = (weapon_data_t*) ship->weapon;
 800179c:	e0bffd17 	ldw	r2,-12(fp)
 80017a0:	10c00f17 	ldw	r3,60(r2)
 80017a4:	e0bffa17 	ldw	r2,-24(fp)
 80017a8:	10c00115 	stw	r3,4(r2)
    weapon->target  = target;
 80017ac:	e0bffa17 	ldw	r2,-24(fp)
 80017b0:	e0fffe17 	ldw	r3,-8(fp)
 80017b4:	10c00215 	stw	r3,8(r2)

    weapon->physics.a.x = 0;
 80017b8:	e0bffa17 	ldw	r2,-24(fp)
 80017bc:	10000715 	stw	zero,28(r2)
    weapon->physics.a.y = 0;
 80017c0:	e0bffa17 	ldw	r2,-24(fp)
 80017c4:	10000815 	stw	zero,32(r2)
    weapon->physics.v.x = v.x;
 80017c8:	e0c00217 	ldw	r3,8(fp)
 80017cc:	e0bffa17 	ldw	r2,-24(fp)
 80017d0:	10c00515 	stw	r3,20(r2)
    weapon->physics.v.y = v.y;
 80017d4:	e0c00317 	ldw	r3,12(fp)
 80017d8:	e0bffa17 	ldw	r2,-24(fp)
 80017dc:	10c00615 	stw	r3,24(r2)
    weapon->physics.p.x = ship->physics.p.x + ship->fire_pos.x;
 80017e0:	e0bffd17 	ldw	r2,-12(fp)
 80017e4:	14000817 	ldw	r16,32(r2)
 80017e8:	e0bffd17 	ldw	r2,-12(fp)
 80017ec:	10800617 	ldw	r2,24(r2)
 80017f0:	1009883a 	mov	r4,r2
 80017f4:	80085980 	call	8008598 <__floatsisf>
 80017f8:	1007883a 	mov	r3,r2
 80017fc:	180b883a 	mov	r5,r3
 8001800:	8009883a 	mov	r4,r16
 8001804:	80071880 	call	8007188 <__addsf3>
 8001808:	1009883a 	mov	r4,r2
 800180c:	2007883a 	mov	r3,r4
 8001810:	e0bffa17 	ldw	r2,-24(fp)
 8001814:	10c00315 	stw	r3,12(r2)
    weapon->physics.p.y = ship->physics.p.y + ship->fire_pos.y;
 8001818:	e0bffd17 	ldw	r2,-12(fp)
 800181c:	14000917 	ldw	r16,36(r2)
 8001820:	e0bffd17 	ldw	r2,-12(fp)
 8001824:	10800717 	ldw	r2,28(r2)
 8001828:	1009883a 	mov	r4,r2
 800182c:	80085980 	call	8008598 <__floatsisf>
 8001830:	1007883a 	mov	r3,r2
 8001834:	180b883a 	mov	r5,r3
 8001838:	8009883a 	mov	r4,r16
 800183c:	80071880 	call	8007188 <__addsf3>
 8001840:	1009883a 	mov	r4,r2
 8001844:	2007883a 	mov	r3,r4
 8001848:	e0bffa17 	ldw	r2,-24(fp)
 800184c:	10c00415 	stw	r3,16(r2)
    weapon->timeout = get_time() + ship->weapon->timeout;
 8001850:	80044940 	call	8004494 <get_time>
 8001854:	1009883a 	mov	r4,r2
 8001858:	e0bffd17 	ldw	r2,-12(fp)
 800185c:	10800f17 	ldw	r2,60(r2)
 8001860:	10c00317 	ldw	r3,12(r2)
 8001864:	180b883a 	mov	r5,r3
 8001868:	80071880 	call	8007188 <__addsf3>
 800186c:	1009883a 	mov	r4,r2
 8001870:	2007883a 	mov	r3,r4
 8001874:	e0bffa17 	ldw	r2,-24(fp)
 8001878:	10c00915 	stw	r3,36(r2)

    obj->pos.x  = (int) weapon->physics.p.x;
 800187c:	e0bffa17 	ldw	r2,-24(fp)
 8001880:	10c00317 	ldw	r3,12(r2)
 8001884:	1809883a 	mov	r4,r3
 8001888:	80085280 	call	8008528 <__fixsfsi>
 800188c:	1007883a 	mov	r3,r2
 8001890:	e0bffb17 	ldw	r2,-20(fp)
 8001894:	10c00115 	stw	r3,4(r2)
    obj->pos.y  = (int) weapon->physics.p.y;
 8001898:	e0bffa17 	ldw	r2,-24(fp)
 800189c:	10c00417 	ldw	r3,16(r2)
 80018a0:	1809883a 	mov	r4,r3
 80018a4:	80085280 	call	8008528 <__fixsfsi>
 80018a8:	1007883a 	mov	r3,r2
 80018ac:	e0bffb17 	ldw	r2,-20(fp)
 80018b0:	10c00215 	stw	r3,8(r2)
    obj->sprite = *weapon->data->sprites[0];
 80018b4:	e0bffa17 	ldw	r2,-24(fp)
 80018b8:	10800117 	ldw	r2,4(r2)
 80018bc:	10c00517 	ldw	r3,20(r2)
 80018c0:	e0bffb17 	ldw	r2,-20(fp)
 80018c4:	19000017 	ldw	r4,0(r3)
 80018c8:	11000315 	stw	r4,12(r2)
 80018cc:	19000117 	ldw	r4,4(r3)
 80018d0:	11000415 	stw	r4,16(r2)
 80018d4:	19000217 	ldw	r4,8(r3)
 80018d8:	11000515 	stw	r4,20(r2)
 80018dc:	19000317 	ldw	r4,12(r3)
 80018e0:	11000615 	stw	r4,24(r2)
 80018e4:	19000417 	ldw	r4,16(r3)
 80018e8:	11000715 	stw	r4,28(r2)
 80018ec:	19000517 	ldw	r4,20(r3)
 80018f0:	11000815 	stw	r4,32(r2)
 80018f4:	19000617 	ldw	r4,24(r3)
 80018f8:	11000915 	stw	r4,36(r2)
 80018fc:	19000717 	ldw	r4,28(r3)
 8001900:	11000a15 	stw	r4,40(r2)
 8001904:	18c00817 	ldw	r3,32(r3)
 8001908:	10c00b15 	stw	r3,44(r2)
    return weapon;
 800190c:	e0bffa17 	ldw	r2,-24(fp)
}
 8001910:	e6ffff04 	addi	sp,fp,-4
 8001914:	dfc00217 	ldw	ra,8(sp)
 8001918:	df000117 	ldw	fp,4(sp)
 800191c:	dc000017 	ldw	r16,0(sp)
 8001920:	dec00404 	addi	sp,sp,16
 8001924:	f800283a 	ret

08001928 <update_ships>:

void update_ships(scene_t* scene, int user, float dt) {
 8001928:	deffec04 	addi	sp,sp,-80
 800192c:	dfc01315 	stw	ra,76(sp)
 8001930:	df001215 	stw	fp,72(sp)
 8001934:	dc001115 	stw	r16,68(sp)
 8001938:	df001204 	addi	fp,sp,72
 800193c:	e13ffc15 	stw	r4,-16(fp)
 8001940:	e17ffd15 	stw	r5,-12(fp)
 8001944:	e1bffe15 	stw	r6,-8(fp)
    ship_t* ships = ship_select(scene, user);
 8001948:	e17ffd17 	ldw	r5,-12(fp)
 800194c:	e13ffc17 	ldw	r4,-16(fp)
 8001950:	8000ee40 	call	8000ee4 <ship_select>
 8001954:	e0bff215 	stw	r2,-56(fp)
    ship_t* planet;
    position_t enemy_planet_pos;
    switch (user) {
 8001958:	e0bffd17 	ldw	r2,-12(fp)
 800195c:	10000326 	beq	r2,zero,800196c <update_ships+0x44>
 8001960:	10800060 	cmpeqi	r2,r2,1
 8001964:	10000b1e 	bne	r2,zero,8001994 <update_ships+0x6c>
            planet = &scene->playerplanet;
            enemy_planet_pos.x = (int) scene->objects.typed.background[1].pos.x;
            enemy_planet_pos.y = (int) scene->objects.typed.background[1].pos.y;
            break;
        default:
            return;
 8001968:	00016906 	br	8001f10 <update_ships+0x5e8>
    ship_t* ships = ship_select(scene, user);
    ship_t* planet;
    position_t enemy_planet_pos;
    switch (user) {
        case PLAYER:
            planet = &scene->enemyplanet;
 800196c:	e0bffc17 	ldw	r2,-16(fp)
 8001970:	10801804 	addi	r2,r2,96
 8001974:	e0bff015 	stw	r2,-64(fp)
            enemy_planet_pos.x = (int) scene->objects.typed.background[2].pos.x;
 8001978:	e0bffc17 	ldw	r2,-16(fp)
 800197c:	10823f17 	ldw	r2,2300(r2)
 8001980:	e0bff415 	stw	r2,-48(fp)
            enemy_planet_pos.y = (int) scene->objects.typed.background[2].pos.y;
 8001984:	e0bffc17 	ldw	r2,-16(fp)
 8001988:	10824017 	ldw	r2,2304(r2)
 800198c:	e0bff515 	stw	r2,-44(fp)
            break;
 8001990:	00000a06 	br	80019bc <update_ships+0x94>
        case ENEMY:
            planet = &scene->playerplanet;
 8001994:	e0bffc17 	ldw	r2,-16(fp)
 8001998:	10800404 	addi	r2,r2,16
 800199c:	e0bff015 	stw	r2,-64(fp)
            enemy_planet_pos.x = (int) scene->objects.typed.background[1].pos.x;
 80019a0:	e0bffc17 	ldw	r2,-16(fp)
 80019a4:	10823317 	ldw	r2,2252(r2)
 80019a8:	e0bff415 	stw	r2,-48(fp)
            enemy_planet_pos.y = (int) scene->objects.typed.background[1].pos.y;
 80019ac:	e0bffc17 	ldw	r2,-16(fp)
 80019b0:	10823417 	ldw	r2,2256(r2)
 80019b4:	e0bff515 	stw	r2,-44(fp)
            break;
 80019b8:	0001883a 	nop
        default:
            return;
    }
    for (int i = 0; i < USER_SHIPS; i++) {
 80019bc:	e03ff115 	stw	zero,-60(fp)
 80019c0:	00015006 	br	8001f04 <update_ships+0x5dc>
        if (ships[i].ptr != NULL) {
 80019c4:	e0bff117 	ldw	r2,-60(fp)
 80019c8:	01401404 	movi	r5,80
 80019cc:	1009883a 	mov	r4,r2
 80019d0:	80071600 	call	8007160 <__mulsi3>
 80019d4:	1007883a 	mov	r3,r2
 80019d8:	e0bff217 	ldw	r2,-56(fp)
 80019dc:	10c5883a 	add	r2,r2,r3
 80019e0:	10800017 	ldw	r2,0(r2)
 80019e4:	10014426 	beq	r2,zero,8001ef8 <update_ships+0x5d0>
            update_physics(&ships[i].physics, dt);
 80019e8:	e0bff117 	ldw	r2,-60(fp)
 80019ec:	01401404 	movi	r5,80
 80019f0:	1009883a 	mov	r4,r2
 80019f4:	80071600 	call	8007160 <__mulsi3>
 80019f8:	1007883a 	mov	r3,r2
 80019fc:	e0bff217 	ldw	r2,-56(fp)
 8001a00:	10c5883a 	add	r2,r2,r3
 8001a04:	10800804 	addi	r2,r2,32
 8001a08:	e17ffe17 	ldw	r5,-8(fp)
 8001a0c:	1009883a 	mov	r4,r2
 8001a10:	800003c0 	call	800003c <update_physics>
            cap_velocity(&ships[i].physics, ships[i].max_v);
 8001a14:	e0bff117 	ldw	r2,-60(fp)
 8001a18:	01401404 	movi	r5,80
 8001a1c:	1009883a 	mov	r4,r2
 8001a20:	80071600 	call	8007160 <__mulsi3>
 8001a24:	1007883a 	mov	r3,r2
 8001a28:	e0bff217 	ldw	r2,-56(fp)
 8001a2c:	10c5883a 	add	r2,r2,r3
 8001a30:	14000804 	addi	r16,r2,32
 8001a34:	e0bff117 	ldw	r2,-60(fp)
 8001a38:	01401404 	movi	r5,80
 8001a3c:	1009883a 	mov	r4,r2
 8001a40:	80071600 	call	8007160 <__mulsi3>
 8001a44:	1007883a 	mov	r3,r2
 8001a48:	e0bff217 	ldw	r2,-56(fp)
 8001a4c:	10c5883a 	add	r2,r2,r3
 8001a50:	10c00417 	ldw	r3,16(r2)
 8001a54:	180b883a 	mov	r5,r3
 8001a58:	8009883a 	mov	r4,r16
 8001a5c:	80001740 	call	8000174 <cap_velocity>

            position_t p = { ships[i].physics.p.x, ships[i].physics.p.y };
 8001a60:	e0bff117 	ldw	r2,-60(fp)
 8001a64:	01401404 	movi	r5,80
 8001a68:	1009883a 	mov	r4,r2
 8001a6c:	80071600 	call	8007160 <__mulsi3>
 8001a70:	1007883a 	mov	r3,r2
 8001a74:	e0bff217 	ldw	r2,-56(fp)
 8001a78:	10c5883a 	add	r2,r2,r3
 8001a7c:	10c00817 	ldw	r3,32(r2)
 8001a80:	1809883a 	mov	r4,r3
 8001a84:	80085280 	call	8008528 <__fixsfsi>
 8001a88:	e0bff615 	stw	r2,-40(fp)
 8001a8c:	e0bff117 	ldw	r2,-60(fp)
 8001a90:	01401404 	movi	r5,80
 8001a94:	1009883a 	mov	r4,r2
 8001a98:	80071600 	call	8007160 <__mulsi3>
 8001a9c:	1007883a 	mov	r3,r2
 8001aa0:	e0bff217 	ldw	r2,-56(fp)
 8001aa4:	10c5883a 	add	r2,r2,r3
 8001aa8:	10c00917 	ldw	r3,36(r2)
 8001aac:	1809883a 	mov	r4,r3
 8001ab0:	80085280 	call	8008528 <__fixsfsi>
 8001ab4:	e0bff715 	stw	r2,-36(fp)
            fposition_t v = { 32.0f, 0.0f };
 8001ab8:	00908034 	movhi	r2,16896
 8001abc:	e0bff815 	stw	r2,-32(fp)
 8001ac0:	e03ff915 	stw	zero,-28(fp)
            if (user == ENEMY)
 8001ac4:	e0bffd17 	ldw	r2,-12(fp)
 8001ac8:	10800058 	cmpnei	r2,r2,1
 8001acc:	1000031e 	bne	r2,zero,8001adc <update_ships+0x1b4>
                v.x = -v.x;
 8001ad0:	e0bff817 	ldw	r2,-32(fp)
 8001ad4:	10a0003c 	xorhi	r2,r2,32768
 8001ad8:	e0bff815 	stw	r2,-32(fp)

            if (distance(p, enemy_planet_pos) < ships[i].range) {
 8001adc:	e1bff417 	ldw	r6,-48(fp)
 8001ae0:	e1fff517 	ldw	r7,-44(fp)
 8001ae4:	e13ff617 	ldw	r4,-40(fp)
 8001ae8:	e17ff717 	ldw	r5,-36(fp)
 8001aec:	80013d00 	call	80013d0 <distance>
 8001af0:	1009883a 	mov	r4,r2
 8001af4:	80085980 	call	8008598 <__floatsisf>
 8001af8:	1021883a 	mov	r16,r2
 8001afc:	e0bff117 	ldw	r2,-60(fp)
 8001b00:	01401404 	movi	r5,80
 8001b04:	1009883a 	mov	r4,r2
 8001b08:	80071600 	call	8007160 <__mulsi3>
 8001b0c:	1007883a 	mov	r3,r2
 8001b10:	e0bff217 	ldw	r2,-56(fp)
 8001b14:	10c5883a 	add	r2,r2,r3
 8001b18:	10c00217 	ldw	r3,8(r2)
 8001b1c:	180b883a 	mov	r5,r3
 8001b20:	8009883a 	mov	r4,r16
 8001b24:	8007b4c0 	call	8007b4c <__lesf2>
 8001b28:	10002f0e 	bge	r2,zero,8001be8 <update_ships+0x2c0>
                if (is_ready(&ships[i].firerate_data))
 8001b2c:	e0bff117 	ldw	r2,-60(fp)
 8001b30:	01401404 	movi	r5,80
 8001b34:	1009883a 	mov	r4,r2
 8001b38:	80071600 	call	8007160 <__mulsi3>
 8001b3c:	1007883a 	mov	r3,r2
 8001b40:	e0bff217 	ldw	r2,-56(fp)
 8001b44:	10c5883a 	add	r2,r2,r3
 8001b48:	10801104 	addi	r2,r2,68
 8001b4c:	1009883a 	mov	r4,r2
 8001b50:	80046100 	call	8004610 <is_ready>
 8001b54:	10001026 	beq	r2,zero,8001b98 <update_ships+0x270>
                    spawn_weapon(scene, &ships[i], planet, v, user);
 8001b58:	e0bff117 	ldw	r2,-60(fp)
 8001b5c:	01401404 	movi	r5,80
 8001b60:	1009883a 	mov	r4,r2
 8001b64:	80071600 	call	8007160 <__mulsi3>
 8001b68:	1007883a 	mov	r3,r2
 8001b6c:	e0bff217 	ldw	r2,-56(fp)
 8001b70:	10c7883a 	add	r3,r2,r3
 8001b74:	e0bffd17 	ldw	r2,-12(fp)
 8001b78:	d8800115 	stw	r2,4(sp)
 8001b7c:	e0bff917 	ldw	r2,-28(fp)
 8001b80:	d8800015 	stw	r2,0(sp)
 8001b84:	e1fff817 	ldw	r7,-32(fp)
 8001b88:	e1bff017 	ldw	r6,-64(fp)
 8001b8c:	180b883a 	mov	r5,r3
 8001b90:	e13ffc17 	ldw	r4,-16(fp)
 8001b94:	80017280 	call	8001728 <spawn_weapon>
                slow_down(&ships[i].physics, ships[i].accel);
 8001b98:	e0bff117 	ldw	r2,-60(fp)
 8001b9c:	01401404 	movi	r5,80
 8001ba0:	1009883a 	mov	r4,r2
 8001ba4:	80071600 	call	8007160 <__mulsi3>
 8001ba8:	1007883a 	mov	r3,r2
 8001bac:	e0bff217 	ldw	r2,-56(fp)
 8001bb0:	10c5883a 	add	r2,r2,r3
 8001bb4:	14000804 	addi	r16,r2,32
 8001bb8:	e0bff117 	ldw	r2,-60(fp)
 8001bbc:	01401404 	movi	r5,80
 8001bc0:	1009883a 	mov	r4,r2
 8001bc4:	80071600 	call	8007160 <__mulsi3>
 8001bc8:	1007883a 	mov	r3,r2
 8001bcc:	e0bff217 	ldw	r2,-56(fp)
 8001bd0:	10c5883a 	add	r2,r2,r3
 8001bd4:	10c00317 	ldw	r3,12(r2)
 8001bd8:	180b883a 	mov	r5,r3
 8001bdc:	8009883a 	mov	r4,r16
 8001be0:	80002580 	call	8000258 <slow_down>
 8001be4:	00007706 	br	8001dc4 <update_ships+0x49c>
            } else {
                ship_t* enemy = closest_ship(scene, !user, ships[i].physics.p);
 8001be8:	e0bffd17 	ldw	r2,-12(fp)
 8001bec:	1005003a 	cmpeq	r2,r2,zero
 8001bf0:	14003fcc 	andi	r16,r2,255
 8001bf4:	e0bff117 	ldw	r2,-60(fp)
 8001bf8:	01401404 	movi	r5,80
 8001bfc:	1009883a 	mov	r4,r2
 8001c00:	80071600 	call	8007160 <__mulsi3>
 8001c04:	1007883a 	mov	r3,r2
 8001c08:	e0bff217 	ldw	r2,-56(fp)
 8001c0c:	10c5883a 	add	r2,r2,r3
 8001c10:	11800817 	ldw	r6,32(r2)
 8001c14:	11c00917 	ldw	r7,36(r2)
 8001c18:	800b883a 	mov	r5,r16
 8001c1c:	e13ffc17 	ldw	r4,-16(fp)
 8001c20:	80014540 	call	8001454 <closest_ship>
 8001c24:	e0bff315 	stw	r2,-52(fp)
                position_t epos = { enemy->physics.p.x, enemy->physics.p.y };
 8001c28:	e0bff317 	ldw	r2,-52(fp)
 8001c2c:	10c00817 	ldw	r3,32(r2)
 8001c30:	1809883a 	mov	r4,r3
 8001c34:	80085280 	call	8008528 <__fixsfsi>
 8001c38:	e0bffa15 	stw	r2,-24(fp)
 8001c3c:	e0bff317 	ldw	r2,-52(fp)
 8001c40:	10c00917 	ldw	r3,36(r2)
 8001c44:	1809883a 	mov	r4,r3
 8001c48:	80085280 	call	8008528 <__fixsfsi>
 8001c4c:	e0bffb15 	stw	r2,-20(fp)
                if (enemy == NULL || distance(p, epos) > ships[i].range) {
 8001c50:	e0bff317 	ldw	r2,-52(fp)
 8001c54:	10001426 	beq	r2,zero,8001ca8 <update_ships+0x380>
 8001c58:	e1bffa17 	ldw	r6,-24(fp)
 8001c5c:	e1fffb17 	ldw	r7,-20(fp)
 8001c60:	e13ff617 	ldw	r4,-40(fp)
 8001c64:	e17ff717 	ldw	r5,-36(fp)
 8001c68:	80013d00 	call	80013d0 <distance>
 8001c6c:	1009883a 	mov	r4,r2
 8001c70:	80085980 	call	8008598 <__floatsisf>
 8001c74:	1021883a 	mov	r16,r2
 8001c78:	e0bff117 	ldw	r2,-60(fp)
 8001c7c:	01401404 	movi	r5,80
 8001c80:	1009883a 	mov	r4,r2
 8001c84:	80071600 	call	8007160 <__mulsi3>
 8001c88:	1007883a 	mov	r3,r2
 8001c8c:	e0bff217 	ldw	r2,-56(fp)
 8001c90:	10c5883a 	add	r2,r2,r3
 8001c94:	10c00217 	ldw	r3,8(r2)
 8001c98:	180b883a 	mov	r5,r3
 8001c9c:	8009883a 	mov	r4,r16
 8001ca0:	8007a900 	call	8007a90 <__gesf2>
 8001ca4:	0080190e 	bge	zero,r2,8001d0c <update_ships+0x3e4>
                    ships[i].physics.a.x = ships[i].accel;
 8001ca8:	e0bff117 	ldw	r2,-60(fp)
 8001cac:	01401404 	movi	r5,80
 8001cb0:	1009883a 	mov	r4,r2
 8001cb4:	80071600 	call	8007160 <__mulsi3>
 8001cb8:	1007883a 	mov	r3,r2
 8001cbc:	e0bff217 	ldw	r2,-56(fp)
 8001cc0:	10e1883a 	add	r16,r2,r3
 8001cc4:	e0bff117 	ldw	r2,-60(fp)
 8001cc8:	01401404 	movi	r5,80
 8001ccc:	1009883a 	mov	r4,r2
 8001cd0:	80071600 	call	8007160 <__mulsi3>
 8001cd4:	1007883a 	mov	r3,r2
 8001cd8:	e0bff217 	ldw	r2,-56(fp)
 8001cdc:	10c7883a 	add	r3,r2,r3
 8001ce0:	18800317 	ldw	r2,12(r3)
 8001ce4:	80800c15 	stw	r2,48(r16)
                    ships[i].physics.a.y = 0;
 8001ce8:	e0bff117 	ldw	r2,-60(fp)
 8001cec:	01401404 	movi	r5,80
 8001cf0:	1009883a 	mov	r4,r2
 8001cf4:	80071600 	call	8007160 <__mulsi3>
 8001cf8:	1007883a 	mov	r3,r2
 8001cfc:	e0bff217 	ldw	r2,-56(fp)
 8001d00:	10c5883a 	add	r2,r2,r3
 8001d04:	10000d15 	stw	zero,52(r2)
 8001d08:	00002e06 	br	8001dc4 <update_ships+0x49c>
                } else {
                    if (is_ready(&ships[i].firerate_data))
 8001d0c:	e0bff117 	ldw	r2,-60(fp)
 8001d10:	01401404 	movi	r5,80
 8001d14:	1009883a 	mov	r4,r2
 8001d18:	80071600 	call	8007160 <__mulsi3>
 8001d1c:	1007883a 	mov	r3,r2
 8001d20:	e0bff217 	ldw	r2,-56(fp)
 8001d24:	10c5883a 	add	r2,r2,r3
 8001d28:	10801104 	addi	r2,r2,68
 8001d2c:	1009883a 	mov	r4,r2
 8001d30:	80046100 	call	8004610 <is_ready>
 8001d34:	10001026 	beq	r2,zero,8001d78 <update_ships+0x450>
                        spawn_weapon(scene, &ships[i], enemy, v, user);
 8001d38:	e0bff117 	ldw	r2,-60(fp)
 8001d3c:	01401404 	movi	r5,80
 8001d40:	1009883a 	mov	r4,r2
 8001d44:	80071600 	call	8007160 <__mulsi3>
 8001d48:	1007883a 	mov	r3,r2
 8001d4c:	e0bff217 	ldw	r2,-56(fp)
 8001d50:	10c7883a 	add	r3,r2,r3
 8001d54:	e0bffd17 	ldw	r2,-12(fp)
 8001d58:	d8800115 	stw	r2,4(sp)
 8001d5c:	e0bff917 	ldw	r2,-28(fp)
 8001d60:	d8800015 	stw	r2,0(sp)
 8001d64:	e1fff817 	ldw	r7,-32(fp)
 8001d68:	e1bff317 	ldw	r6,-52(fp)
 8001d6c:	180b883a 	mov	r5,r3
 8001d70:	e13ffc17 	ldw	r4,-16(fp)
 8001d74:	80017280 	call	8001728 <spawn_weapon>
                    slow_down(&ships[i].physics, ships[i].accel);
 8001d78:	e0bff117 	ldw	r2,-60(fp)
 8001d7c:	01401404 	movi	r5,80
 8001d80:	1009883a 	mov	r4,r2
 8001d84:	80071600 	call	8007160 <__mulsi3>
 8001d88:	1007883a 	mov	r3,r2
 8001d8c:	e0bff217 	ldw	r2,-56(fp)
 8001d90:	10c5883a 	add	r2,r2,r3
 8001d94:	14000804 	addi	r16,r2,32
 8001d98:	e0bff117 	ldw	r2,-60(fp)
 8001d9c:	01401404 	movi	r5,80
 8001da0:	1009883a 	mov	r4,r2
 8001da4:	80071600 	call	8007160 <__mulsi3>
 8001da8:	1007883a 	mov	r3,r2
 8001dac:	e0bff217 	ldw	r2,-56(fp)
 8001db0:	10c5883a 	add	r2,r2,r3
 8001db4:	10c00317 	ldw	r3,12(r2)
 8001db8:	180b883a 	mov	r5,r3
 8001dbc:	8009883a 	mov	r4,r16
 8001dc0:	80002580 	call	8000258 <slow_down>
                }
            }
            
            ships[i].ptr->pos.x = (int) ships[i].physics.p.x;
 8001dc4:	e0bff117 	ldw	r2,-60(fp)
 8001dc8:	01401404 	movi	r5,80
 8001dcc:	1009883a 	mov	r4,r2
 8001dd0:	80071600 	call	8007160 <__mulsi3>
 8001dd4:	1007883a 	mov	r3,r2
 8001dd8:	e0bff217 	ldw	r2,-56(fp)
 8001ddc:	10c5883a 	add	r2,r2,r3
 8001de0:	14000017 	ldw	r16,0(r2)
 8001de4:	e0bff117 	ldw	r2,-60(fp)
 8001de8:	01401404 	movi	r5,80
 8001dec:	1009883a 	mov	r4,r2
 8001df0:	80071600 	call	8007160 <__mulsi3>
 8001df4:	1007883a 	mov	r3,r2
 8001df8:	e0bff217 	ldw	r2,-56(fp)
 8001dfc:	10c5883a 	add	r2,r2,r3
 8001e00:	10c00817 	ldw	r3,32(r2)
 8001e04:	1809883a 	mov	r4,r3
 8001e08:	80085280 	call	8008528 <__fixsfsi>
 8001e0c:	80800115 	stw	r2,4(r16)
            ships[i].ptr->pos.y = (int) ships[i].physics.p.y;
 8001e10:	e0bff117 	ldw	r2,-60(fp)
 8001e14:	01401404 	movi	r5,80
 8001e18:	1009883a 	mov	r4,r2
 8001e1c:	80071600 	call	8007160 <__mulsi3>
 8001e20:	1007883a 	mov	r3,r2
 8001e24:	e0bff217 	ldw	r2,-56(fp)
 8001e28:	10c5883a 	add	r2,r2,r3
 8001e2c:	14000017 	ldw	r16,0(r2)
 8001e30:	e0bff117 	ldw	r2,-60(fp)
 8001e34:	01401404 	movi	r5,80
 8001e38:	1009883a 	mov	r4,r2
 8001e3c:	80071600 	call	8007160 <__mulsi3>
 8001e40:	1007883a 	mov	r3,r2
 8001e44:	e0bff217 	ldw	r2,-56(fp)
 8001e48:	10c5883a 	add	r2,r2,r3
 8001e4c:	10c00917 	ldw	r3,36(r2)
 8001e50:	1809883a 	mov	r4,r3
 8001e54:	80085280 	call	8008528 <__fixsfsi>
 8001e58:	80800215 	stw	r2,8(r16)

            if (ships[i].physics.p.x > scene->max.x || ships[i].physics.p.x < 0)
 8001e5c:	e0bff117 	ldw	r2,-60(fp)
 8001e60:	01401404 	movi	r5,80
 8001e64:	1009883a 	mov	r4,r2
 8001e68:	80071600 	call	8007160 <__mulsi3>
 8001e6c:	1007883a 	mov	r3,r2
 8001e70:	e0bff217 	ldw	r2,-56(fp)
 8001e74:	10c5883a 	add	r2,r2,r3
 8001e78:	14000817 	ldw	r16,32(r2)
 8001e7c:	e0bffc17 	ldw	r2,-16(fp)
 8001e80:	10803017 	ldw	r2,192(r2)
 8001e84:	1009883a 	mov	r4,r2
 8001e88:	80085980 	call	8008598 <__floatsisf>
 8001e8c:	1007883a 	mov	r3,r2
 8001e90:	180b883a 	mov	r5,r3
 8001e94:	8009883a 	mov	r4,r16
 8001e98:	8007a900 	call	8007a90 <__gesf2>
 8001e9c:	00800c16 	blt	zero,r2,8001ed0 <update_ships+0x5a8>
 8001ea0:	e0bff117 	ldw	r2,-60(fp)
 8001ea4:	01401404 	movi	r5,80
 8001ea8:	1009883a 	mov	r4,r2
 8001eac:	80071600 	call	8007160 <__mulsi3>
 8001eb0:	1007883a 	mov	r3,r2
 8001eb4:	e0bff217 	ldw	r2,-56(fp)
 8001eb8:	10c5883a 	add	r2,r2,r3
 8001ebc:	10c00817 	ldw	r3,32(r2)
 8001ec0:	000b883a 	mov	r5,zero
 8001ec4:	1809883a 	mov	r4,r3
 8001ec8:	8007b4c0 	call	8007b4c <__lesf2>
 8001ecc:	10000a0e 	bge	r2,zero,8001ef8 <update_ships+0x5d0>
                destroy_ship(scene, &ships[i]);
 8001ed0:	e0bff117 	ldw	r2,-60(fp)
 8001ed4:	01401404 	movi	r5,80
 8001ed8:	1009883a 	mov	r4,r2
 8001edc:	80071600 	call	8007160 <__mulsi3>
 8001ee0:	1007883a 	mov	r3,r2
 8001ee4:	e0bff217 	ldw	r2,-56(fp)
 8001ee8:	10c5883a 	add	r2,r2,r3
 8001eec:	100b883a 	mov	r5,r2
 8001ef0:	e13ffc17 	ldw	r4,-16(fp)
 8001ef4:	800123c0 	call	800123c <destroy_ship>
            enemy_planet_pos.y = (int) scene->objects.typed.background[1].pos.y;
            break;
        default:
            return;
    }
    for (int i = 0; i < USER_SHIPS; i++) {
 8001ef8:	e0bff117 	ldw	r2,-60(fp)
 8001efc:	10800044 	addi	r2,r2,1
 8001f00:	e0bff115 	stw	r2,-60(fp)
 8001f04:	e0bff117 	ldw	r2,-60(fp)
 8001f08:	10800190 	cmplti	r2,r2,6
 8001f0c:	103ead1e 	bne	r2,zero,80019c4 <__alt_data_end+0xfc0019c4>

            if (ships[i].physics.p.x > scene->max.x || ships[i].physics.p.x < 0)
                destroy_ship(scene, &ships[i]);
        }
    }
}
 8001f10:	e6ffff04 	addi	sp,fp,-4
 8001f14:	dfc00217 	ldw	ra,8(sp)
 8001f18:	df000117 	ldw	fp,4(sp)
 8001f1c:	dc000017 	ldw	r16,0(sp)
 8001f20:	dec00304 	addi	sp,sp,12
 8001f24:	f800283a 	ret

08001f28 <update_weapons>:

void update_weapons(scene_t* scene, int user, float dt) {
 8001f28:	defff204 	addi	sp,sp,-56
 8001f2c:	dfc00d15 	stw	ra,52(sp)
 8001f30:	df000c15 	stw	fp,48(sp)
 8001f34:	dc400b15 	stw	r17,44(sp)
 8001f38:	dc000a15 	stw	r16,40(sp)
 8001f3c:	df000c04 	addi	fp,sp,48
 8001f40:	e13ffb15 	stw	r4,-20(fp)
 8001f44:	e17ffc15 	stw	r5,-16(fp)
 8001f48:	e1bffd15 	stw	r6,-12(fp)
    weapon_t* weapons = weapon_select(scene, user);
 8001f4c:	e17ffc17 	ldw	r5,-16(fp)
 8001f50:	e13ffb17 	ldw	r4,-20(fp)
 8001f54:	80015dc0 	call	80015dc <weapon_select>
 8001f58:	e0bff515 	stw	r2,-44(fp)
    float time = get_time();
 8001f5c:	80044940 	call	8004494 <get_time>
 8001f60:	e0bff615 	stw	r2,-40(fp)
    for (int i = 0; i < USER_WEAPONS; i++) {
 8001f64:	e03ff415 	stw	zero,-48(fp)
 8001f68:	00017306 	br	8002538 <update_weapons+0x610>
        if (weapons[i].ptr != NULL) {
 8001f6c:	e0bff417 	ldw	r2,-48(fp)
 8001f70:	01400d04 	movi	r5,52
 8001f74:	1009883a 	mov	r4,r2
 8001f78:	80071600 	call	8007160 <__mulsi3>
 8001f7c:	1007883a 	mov	r3,r2
 8001f80:	e0bff517 	ldw	r2,-44(fp)
 8001f84:	10c5883a 	add	r2,r2,r3
 8001f88:	10800017 	ldw	r2,0(r2)
 8001f8c:	10016726 	beq	r2,zero,800252c <update_weapons+0x604>
            if (weapons[i].target->physics.p.x - weapons[i].physics.p.x > 0)
 8001f90:	e0bff417 	ldw	r2,-48(fp)
 8001f94:	01400d04 	movi	r5,52
 8001f98:	1009883a 	mov	r4,r2
 8001f9c:	80071600 	call	8007160 <__mulsi3>
 8001fa0:	1007883a 	mov	r3,r2
 8001fa4:	e0bff517 	ldw	r2,-44(fp)
 8001fa8:	10c5883a 	add	r2,r2,r3
 8001fac:	10800217 	ldw	r2,8(r2)
 8001fb0:	14000817 	ldw	r16,32(r2)
 8001fb4:	e0bff417 	ldw	r2,-48(fp)
 8001fb8:	01400d04 	movi	r5,52
 8001fbc:	1009883a 	mov	r4,r2
 8001fc0:	80071600 	call	8007160 <__mulsi3>
 8001fc4:	1007883a 	mov	r3,r2
 8001fc8:	e0bff517 	ldw	r2,-44(fp)
 8001fcc:	10c5883a 	add	r2,r2,r3
 8001fd0:	10c00317 	ldw	r3,12(r2)
 8001fd4:	180b883a 	mov	r5,r3
 8001fd8:	8009883a 	mov	r4,r16
 8001fdc:	80080440 	call	8008044 <__subsf3>
 8001fe0:	1007883a 	mov	r3,r2
 8001fe4:	1805883a 	mov	r2,r3
 8001fe8:	000b883a 	mov	r5,zero
 8001fec:	1009883a 	mov	r4,r2
 8001ff0:	8007a900 	call	8007a90 <__gesf2>
 8001ff4:	00800a0e 	bge	zero,r2,8002020 <update_weapons+0xf8>
                weapons[i].physics.a.x = 200.0f;
 8001ff8:	e0bff417 	ldw	r2,-48(fp)
 8001ffc:	01400d04 	movi	r5,52
 8002000:	1009883a 	mov	r4,r2
 8002004:	80071600 	call	8007160 <__mulsi3>
 8002008:	1007883a 	mov	r3,r2
 800200c:	e0bff517 	ldw	r2,-44(fp)
 8002010:	10c5883a 	add	r2,r2,r3
 8002014:	00d0d234 	movhi	r3,17224
 8002018:	10c00715 	stw	r3,28(r2)
 800201c:	00000906 	br	8002044 <update_weapons+0x11c>
            else
                weapons[i].physics.a.x = -200.0f;
 8002020:	e0bff417 	ldw	r2,-48(fp)
 8002024:	01400d04 	movi	r5,52
 8002028:	1009883a 	mov	r4,r2
 800202c:	80071600 	call	8007160 <__mulsi3>
 8002030:	1007883a 	mov	r3,r2
 8002034:	e0bff517 	ldw	r2,-44(fp)
 8002038:	10c5883a 	add	r2,r2,r3
 800203c:	00f0d234 	movhi	r3,49992
 8002040:	10c00715 	stw	r3,28(r2)
            
            if (weapons[i].target->physics.p.y - weapons[i].physics.p.y > 0)
 8002044:	e0bff417 	ldw	r2,-48(fp)
 8002048:	01400d04 	movi	r5,52
 800204c:	1009883a 	mov	r4,r2
 8002050:	80071600 	call	8007160 <__mulsi3>
 8002054:	1007883a 	mov	r3,r2
 8002058:	e0bff517 	ldw	r2,-44(fp)
 800205c:	10c5883a 	add	r2,r2,r3
 8002060:	10800217 	ldw	r2,8(r2)
 8002064:	14000917 	ldw	r16,36(r2)
 8002068:	e0bff417 	ldw	r2,-48(fp)
 800206c:	01400d04 	movi	r5,52
 8002070:	1009883a 	mov	r4,r2
 8002074:	80071600 	call	8007160 <__mulsi3>
 8002078:	1007883a 	mov	r3,r2
 800207c:	e0bff517 	ldw	r2,-44(fp)
 8002080:	10c5883a 	add	r2,r2,r3
 8002084:	10c00417 	ldw	r3,16(r2)
 8002088:	180b883a 	mov	r5,r3
 800208c:	8009883a 	mov	r4,r16
 8002090:	80080440 	call	8008044 <__subsf3>
 8002094:	1007883a 	mov	r3,r2
 8002098:	1805883a 	mov	r2,r3
 800209c:	000b883a 	mov	r5,zero
 80020a0:	1009883a 	mov	r4,r2
 80020a4:	8007a900 	call	8007a90 <__gesf2>
 80020a8:	00800a0e 	bge	zero,r2,80020d4 <update_weapons+0x1ac>
                weapons[i].physics.a.y = 200.0f;
 80020ac:	e0bff417 	ldw	r2,-48(fp)
 80020b0:	01400d04 	movi	r5,52
 80020b4:	1009883a 	mov	r4,r2
 80020b8:	80071600 	call	8007160 <__mulsi3>
 80020bc:	1007883a 	mov	r3,r2
 80020c0:	e0bff517 	ldw	r2,-44(fp)
 80020c4:	10c5883a 	add	r2,r2,r3
 80020c8:	00d0d234 	movhi	r3,17224
 80020cc:	10c00815 	stw	r3,32(r2)
 80020d0:	00000906 	br	80020f8 <update_weapons+0x1d0>
            else
                weapons[i].physics.a.y = -200.0f;
 80020d4:	e0bff417 	ldw	r2,-48(fp)
 80020d8:	01400d04 	movi	r5,52
 80020dc:	1009883a 	mov	r4,r2
 80020e0:	80071600 	call	8007160 <__mulsi3>
 80020e4:	1007883a 	mov	r3,r2
 80020e8:	e0bff517 	ldw	r2,-44(fp)
 80020ec:	10c5883a 	add	r2,r2,r3
 80020f0:	00f0d234 	movhi	r3,49992
 80020f4:	10c00815 	stw	r3,32(r2)
            
            cap_velocity(&weapons[i].physics, 100.0f);
 80020f8:	e0bff417 	ldw	r2,-48(fp)
 80020fc:	01400d04 	movi	r5,52
 8002100:	1009883a 	mov	r4,r2
 8002104:	80071600 	call	8007160 <__mulsi3>
 8002108:	1007883a 	mov	r3,r2
 800210c:	e0bff517 	ldw	r2,-44(fp)
 8002110:	10c5883a 	add	r2,r2,r3
 8002114:	10800304 	addi	r2,r2,12
 8002118:	0150b234 	movhi	r5,17096
 800211c:	1009883a 	mov	r4,r2
 8002120:	80001740 	call	8000174 <cap_velocity>

            update_physics(&weapons[i].physics, dt);
 8002124:	e0bff417 	ldw	r2,-48(fp)
 8002128:	01400d04 	movi	r5,52
 800212c:	1009883a 	mov	r4,r2
 8002130:	80071600 	call	8007160 <__mulsi3>
 8002134:	1007883a 	mov	r3,r2
 8002138:	e0bff517 	ldw	r2,-44(fp)
 800213c:	10c5883a 	add	r2,r2,r3
 8002140:	10800304 	addi	r2,r2,12
 8002144:	e17ffd17 	ldw	r5,-12(fp)
 8002148:	1009883a 	mov	r4,r2
 800214c:	800003c0 	call	800003c <update_physics>

            weapons[i].ptr->pos.x = (int) weapons[i].physics.p.x;
 8002150:	e0bff417 	ldw	r2,-48(fp)
 8002154:	01400d04 	movi	r5,52
 8002158:	1009883a 	mov	r4,r2
 800215c:	80071600 	call	8007160 <__mulsi3>
 8002160:	1007883a 	mov	r3,r2
 8002164:	e0bff517 	ldw	r2,-44(fp)
 8002168:	10c5883a 	add	r2,r2,r3
 800216c:	14000017 	ldw	r16,0(r2)
 8002170:	e0bff417 	ldw	r2,-48(fp)
 8002174:	01400d04 	movi	r5,52
 8002178:	1009883a 	mov	r4,r2
 800217c:	80071600 	call	8007160 <__mulsi3>
 8002180:	1007883a 	mov	r3,r2
 8002184:	e0bff517 	ldw	r2,-44(fp)
 8002188:	10c5883a 	add	r2,r2,r3
 800218c:	10c00317 	ldw	r3,12(r2)
 8002190:	1809883a 	mov	r4,r3
 8002194:	80085280 	call	8008528 <__fixsfsi>
 8002198:	80800115 	stw	r2,4(r16)
            weapons[i].ptr->pos.y = (int) weapons[i].physics.p.y;
 800219c:	e0bff417 	ldw	r2,-48(fp)
 80021a0:	01400d04 	movi	r5,52
 80021a4:	1009883a 	mov	r4,r2
 80021a8:	80071600 	call	8007160 <__mulsi3>
 80021ac:	1007883a 	mov	r3,r2
 80021b0:	e0bff517 	ldw	r2,-44(fp)
 80021b4:	10c5883a 	add	r2,r2,r3
 80021b8:	14000017 	ldw	r16,0(r2)
 80021bc:	e0bff417 	ldw	r2,-48(fp)
 80021c0:	01400d04 	movi	r5,52
 80021c4:	1009883a 	mov	r4,r2
 80021c8:	80071600 	call	8007160 <__mulsi3>
 80021cc:	1007883a 	mov	r3,r2
 80021d0:	e0bff517 	ldw	r2,-44(fp)
 80021d4:	10c5883a 	add	r2,r2,r3
 80021d8:	10c00417 	ldw	r3,16(r2)
 80021dc:	1809883a 	mov	r4,r3
 80021e0:	80085280 	call	8008528 <__fixsfsi>
 80021e4:	80800215 	stw	r2,8(r16)

            position_t pos = { weapons[i].physics.p.x, weapons[i].physics.p.y };
 80021e8:	e0bff417 	ldw	r2,-48(fp)
 80021ec:	01400d04 	movi	r5,52
 80021f0:	1009883a 	mov	r4,r2
 80021f4:	80071600 	call	8007160 <__mulsi3>
 80021f8:	1007883a 	mov	r3,r2
 80021fc:	e0bff517 	ldw	r2,-44(fp)
 8002200:	10c5883a 	add	r2,r2,r3
 8002204:	10c00317 	ldw	r3,12(r2)
 8002208:	1809883a 	mov	r4,r3
 800220c:	80085280 	call	8008528 <__fixsfsi>
 8002210:	e0bff715 	stw	r2,-36(fp)
 8002214:	e0bff417 	ldw	r2,-48(fp)
 8002218:	01400d04 	movi	r5,52
 800221c:	1009883a 	mov	r4,r2
 8002220:	80071600 	call	8007160 <__mulsi3>
 8002224:	1007883a 	mov	r3,r2
 8002228:	e0bff517 	ldw	r2,-44(fp)
 800222c:	10c5883a 	add	r2,r2,r3
 8002230:	10c00417 	ldw	r3,16(r2)
 8002234:	1809883a 	mov	r4,r3
 8002238:	80085280 	call	8008528 <__fixsfsi>
 800223c:	e0bff815 	stw	r2,-32(fp)
            position_t tpos = { weapons[i].target->physics.p.x, weapons[i].target->physics.p.y };
 8002240:	e0bff417 	ldw	r2,-48(fp)
 8002244:	01400d04 	movi	r5,52
 8002248:	1009883a 	mov	r4,r2
 800224c:	80071600 	call	8007160 <__mulsi3>
 8002250:	1007883a 	mov	r3,r2
 8002254:	e0bff517 	ldw	r2,-44(fp)
 8002258:	10c5883a 	add	r2,r2,r3
 800225c:	10800217 	ldw	r2,8(r2)
 8002260:	10c00817 	ldw	r3,32(r2)
 8002264:	1809883a 	mov	r4,r3
 8002268:	80085280 	call	8008528 <__fixsfsi>
 800226c:	e0bff915 	stw	r2,-28(fp)
 8002270:	e0bff417 	ldw	r2,-48(fp)
 8002274:	01400d04 	movi	r5,52
 8002278:	1009883a 	mov	r4,r2
 800227c:	80071600 	call	8007160 <__mulsi3>
 8002280:	1007883a 	mov	r3,r2
 8002284:	e0bff517 	ldw	r2,-44(fp)
 8002288:	10c5883a 	add	r2,r2,r3
 800228c:	10800217 	ldw	r2,8(r2)
 8002290:	10c00917 	ldw	r3,36(r2)
 8002294:	1809883a 	mov	r4,r3
 8002298:	80085280 	call	8008528 <__fixsfsi>
 800229c:	e0bffa15 	stw	r2,-24(fp)

            if (weapons[i].physics.p.x < 0 ||
 80022a0:	e0bff417 	ldw	r2,-48(fp)
 80022a4:	01400d04 	movi	r5,52
 80022a8:	1009883a 	mov	r4,r2
 80022ac:	80071600 	call	8007160 <__mulsi3>
 80022b0:	1007883a 	mov	r3,r2
 80022b4:	e0bff517 	ldw	r2,-44(fp)
 80022b8:	10c5883a 	add	r2,r2,r3
 80022bc:	10c00317 	ldw	r3,12(r2)
 80022c0:	000b883a 	mov	r5,zero
 80022c4:	1809883a 	mov	r4,r3
 80022c8:	8007b4c0 	call	8007b4c <__lesf2>
 80022cc:	10004416 	blt	r2,zero,80023e0 <update_weapons+0x4b8>
                weapons[i].physics.p.x > scene->max.x ||
 80022d0:	e0bff417 	ldw	r2,-48(fp)
 80022d4:	01400d04 	movi	r5,52
 80022d8:	1009883a 	mov	r4,r2
 80022dc:	80071600 	call	8007160 <__mulsi3>
 80022e0:	1007883a 	mov	r3,r2
 80022e4:	e0bff517 	ldw	r2,-44(fp)
 80022e8:	10c5883a 	add	r2,r2,r3
 80022ec:	14000317 	ldw	r16,12(r2)
 80022f0:	e0bffb17 	ldw	r2,-20(fp)
 80022f4:	10803017 	ldw	r2,192(r2)
 80022f8:	1009883a 	mov	r4,r2
 80022fc:	80085980 	call	8008598 <__floatsisf>
 8002300:	1007883a 	mov	r3,r2
            weapons[i].ptr->pos.y = (int) weapons[i].physics.p.y;

            position_t pos = { weapons[i].physics.p.x, weapons[i].physics.p.y };
            position_t tpos = { weapons[i].target->physics.p.x, weapons[i].target->physics.p.y };

            if (weapons[i].physics.p.x < 0 ||
 8002304:	180b883a 	mov	r5,r3
 8002308:	8009883a 	mov	r4,r16
 800230c:	8007a900 	call	8007a90 <__gesf2>
 8002310:	00803316 	blt	zero,r2,80023e0 <update_weapons+0x4b8>
                weapons[i].physics.p.x > scene->max.x ||
                weapons[i].physics.p.y < 0 ||
 8002314:	e0bff417 	ldw	r2,-48(fp)
 8002318:	01400d04 	movi	r5,52
 800231c:	1009883a 	mov	r4,r2
 8002320:	80071600 	call	8007160 <__mulsi3>
 8002324:	1007883a 	mov	r3,r2
 8002328:	e0bff517 	ldw	r2,-44(fp)
 800232c:	10c5883a 	add	r2,r2,r3
 8002330:	10c00417 	ldw	r3,16(r2)

            position_t pos = { weapons[i].physics.p.x, weapons[i].physics.p.y };
            position_t tpos = { weapons[i].target->physics.p.x, weapons[i].target->physics.p.y };

            if (weapons[i].physics.p.x < 0 ||
                weapons[i].physics.p.x > scene->max.x ||
 8002334:	000b883a 	mov	r5,zero
 8002338:	1809883a 	mov	r4,r3
 800233c:	8007b4c0 	call	8007b4c <__lesf2>
 8002340:	10002716 	blt	r2,zero,80023e0 <update_weapons+0x4b8>
                weapons[i].physics.p.y < 0 ||
                weapons[i].physics.p.y > scene->max.y ||
 8002344:	e0bff417 	ldw	r2,-48(fp)
 8002348:	01400d04 	movi	r5,52
 800234c:	1009883a 	mov	r4,r2
 8002350:	80071600 	call	8007160 <__mulsi3>
 8002354:	1007883a 	mov	r3,r2
 8002358:	e0bff517 	ldw	r2,-44(fp)
 800235c:	10c5883a 	add	r2,r2,r3
 8002360:	14000417 	ldw	r16,16(r2)
 8002364:	e0bffb17 	ldw	r2,-20(fp)
 8002368:	10803117 	ldw	r2,196(r2)
 800236c:	1009883a 	mov	r4,r2
 8002370:	80085980 	call	8008598 <__floatsisf>
 8002374:	1007883a 	mov	r3,r2
            position_t pos = { weapons[i].physics.p.x, weapons[i].physics.p.y };
            position_t tpos = { weapons[i].target->physics.p.x, weapons[i].target->physics.p.y };

            if (weapons[i].physics.p.x < 0 ||
                weapons[i].physics.p.x > scene->max.x ||
                weapons[i].physics.p.y < 0 ||
 8002378:	180b883a 	mov	r5,r3
 800237c:	8009883a 	mov	r4,r16
 8002380:	8007a900 	call	8007a90 <__gesf2>
 8002384:	00801616 	blt	zero,r2,80023e0 <update_weapons+0x4b8>
                weapons[i].physics.p.y > scene->max.y ||
                weapons[i].timeout < time ||
 8002388:	e0bff417 	ldw	r2,-48(fp)
 800238c:	01400d04 	movi	r5,52
 8002390:	1009883a 	mov	r4,r2
 8002394:	80071600 	call	8007160 <__mulsi3>
 8002398:	1007883a 	mov	r3,r2
 800239c:	e0bff517 	ldw	r2,-44(fp)
 80023a0:	10c5883a 	add	r2,r2,r3
 80023a4:	10c00917 	ldw	r3,36(r2)
            position_t tpos = { weapons[i].target->physics.p.x, weapons[i].target->physics.p.y };

            if (weapons[i].physics.p.x < 0 ||
                weapons[i].physics.p.x > scene->max.x ||
                weapons[i].physics.p.y < 0 ||
                weapons[i].physics.p.y > scene->max.y ||
 80023a8:	e17ff617 	ldw	r5,-40(fp)
 80023ac:	1809883a 	mov	r4,r3
 80023b0:	8007b4c0 	call	8007b4c <__lesf2>
 80023b4:	10000a16 	blt	r2,zero,80023e0 <update_weapons+0x4b8>
                weapons[i].timeout < time ||
                weapons[i].target->ptr == NULL)
 80023b8:	e0bff417 	ldw	r2,-48(fp)
 80023bc:	01400d04 	movi	r5,52
 80023c0:	1009883a 	mov	r4,r2
 80023c4:	80071600 	call	8007160 <__mulsi3>
 80023c8:	1007883a 	mov	r3,r2
 80023cc:	e0bff517 	ldw	r2,-44(fp)
 80023d0:	10c5883a 	add	r2,r2,r3
 80023d4:	10800217 	ldw	r2,8(r2)
 80023d8:	10800017 	ldw	r2,0(r2)

            if (weapons[i].physics.p.x < 0 ||
                weapons[i].physics.p.x > scene->max.x ||
                weapons[i].physics.p.y < 0 ||
                weapons[i].physics.p.y > scene->max.y ||
                weapons[i].timeout < time ||
 80023dc:	1000091e 	bne	r2,zero,8002404 <update_weapons+0x4dc>
                weapons[i].target->ptr == NULL)
                destroy_weapon(&weapons[i]);
 80023e0:	e0bff417 	ldw	r2,-48(fp)
 80023e4:	01400d04 	movi	r5,52
 80023e8:	1009883a 	mov	r4,r2
 80023ec:	80071600 	call	8007160 <__mulsi3>
 80023f0:	1007883a 	mov	r3,r2
 80023f4:	e0bff517 	ldw	r2,-44(fp)
 80023f8:	10c5883a 	add	r2,r2,r3
 80023fc:	1009883a 	mov	r4,r2
 8002400:	80016e40 	call	80016e4 <destroy_weapon>
            
            if (distance(pos, tpos) < weapons[i].target->hitradius) {
 8002404:	e1bff917 	ldw	r6,-28(fp)
 8002408:	e1fffa17 	ldw	r7,-24(fp)
 800240c:	e13ff717 	ldw	r4,-36(fp)
 8002410:	e17ff817 	ldw	r5,-32(fp)
 8002414:	80013d00 	call	80013d0 <distance>
 8002418:	1021883a 	mov	r16,r2
 800241c:	e0bff417 	ldw	r2,-48(fp)
 8002420:	01400d04 	movi	r5,52
 8002424:	1009883a 	mov	r4,r2
 8002428:	80071600 	call	8007160 <__mulsi3>
 800242c:	1007883a 	mov	r3,r2
 8002430:	e0bff517 	ldw	r2,-44(fp)
 8002434:	10c5883a 	add	r2,r2,r3
 8002438:	10800217 	ldw	r2,8(r2)
 800243c:	10800517 	ldw	r2,20(r2)
 8002440:	80803a0e 	bge	r16,r2,800252c <update_weapons+0x604>
                weapons[i].target->hp -= weapons[i].data->damage;
 8002444:	e0bff417 	ldw	r2,-48(fp)
 8002448:	01400d04 	movi	r5,52
 800244c:	1009883a 	mov	r4,r2
 8002450:	80071600 	call	8007160 <__mulsi3>
 8002454:	1007883a 	mov	r3,r2
 8002458:	e0bff517 	ldw	r2,-44(fp)
 800245c:	10c5883a 	add	r2,r2,r3
 8002460:	14000217 	ldw	r16,8(r2)
 8002464:	e0bff417 	ldw	r2,-48(fp)
 8002468:	01400d04 	movi	r5,52
 800246c:	1009883a 	mov	r4,r2
 8002470:	80071600 	call	8007160 <__mulsi3>
 8002474:	1007883a 	mov	r3,r2
 8002478:	e0bff517 	ldw	r2,-44(fp)
 800247c:	10c5883a 	add	r2,r2,r3
 8002480:	10800217 	ldw	r2,8(r2)
 8002484:	14400117 	ldw	r17,4(r2)
 8002488:	e0bff417 	ldw	r2,-48(fp)
 800248c:	01400d04 	movi	r5,52
 8002490:	1009883a 	mov	r4,r2
 8002494:	80071600 	call	8007160 <__mulsi3>
 8002498:	1007883a 	mov	r3,r2
 800249c:	e0bff517 	ldw	r2,-44(fp)
 80024a0:	10c5883a 	add	r2,r2,r3
 80024a4:	10800117 	ldw	r2,4(r2)
 80024a8:	10800017 	ldw	r2,0(r2)
 80024ac:	8885c83a 	sub	r2,r17,r2
 80024b0:	80800115 	stw	r2,4(r16)
                if (weapons[i].target->hp < 0)
 80024b4:	e0bff417 	ldw	r2,-48(fp)
 80024b8:	01400d04 	movi	r5,52
 80024bc:	1009883a 	mov	r4,r2
 80024c0:	80071600 	call	8007160 <__mulsi3>
 80024c4:	1007883a 	mov	r3,r2
 80024c8:	e0bff517 	ldw	r2,-44(fp)
 80024cc:	10c5883a 	add	r2,r2,r3
 80024d0:	10800217 	ldw	r2,8(r2)
 80024d4:	10800117 	ldw	r2,4(r2)
 80024d8:	10000b0e 	bge	r2,zero,8002508 <update_weapons+0x5e0>
                    destroy_ship(scene, weapons[i].target);
 80024dc:	e0bff417 	ldw	r2,-48(fp)
 80024e0:	01400d04 	movi	r5,52
 80024e4:	1009883a 	mov	r4,r2
 80024e8:	80071600 	call	8007160 <__mulsi3>
 80024ec:	1007883a 	mov	r3,r2
 80024f0:	e0bff517 	ldw	r2,-44(fp)
 80024f4:	10c5883a 	add	r2,r2,r3
 80024f8:	10800217 	ldw	r2,8(r2)
 80024fc:	100b883a 	mov	r5,r2
 8002500:	e13ffb17 	ldw	r4,-20(fp)
 8002504:	800123c0 	call	800123c <destroy_ship>
                destroy_weapon(&weapons[i]);
 8002508:	e0bff417 	ldw	r2,-48(fp)
 800250c:	01400d04 	movi	r5,52
 8002510:	1009883a 	mov	r4,r2
 8002514:	80071600 	call	8007160 <__mulsi3>
 8002518:	1007883a 	mov	r3,r2
 800251c:	e0bff517 	ldw	r2,-44(fp)
 8002520:	10c5883a 	add	r2,r2,r3
 8002524:	1009883a 	mov	r4,r2
 8002528:	80016e40 	call	80016e4 <destroy_weapon>
}

void update_weapons(scene_t* scene, int user, float dt) {
    weapon_t* weapons = weapon_select(scene, user);
    float time = get_time();
    for (int i = 0; i < USER_WEAPONS; i++) {
 800252c:	e0bff417 	ldw	r2,-48(fp)
 8002530:	10800044 	addi	r2,r2,1
 8002534:	e0bff415 	stw	r2,-48(fp)
 8002538:	e0bff417 	ldw	r2,-48(fp)
 800253c:	10800290 	cmplti	r2,r2,10
 8002540:	103e8a1e 	bne	r2,zero,8001f6c <__alt_data_end+0xfc001f6c>
                    destroy_ship(scene, weapons[i].target);
                destroy_weapon(&weapons[i]);
            }
        }
    }
}
 8002544:	0001883a 	nop
 8002548:	e6fffe04 	addi	sp,fp,-8
 800254c:	dfc00317 	ldw	ra,12(sp)
 8002550:	df000217 	ldw	fp,8(sp)
 8002554:	dc400117 	ldw	r17,4(sp)
 8002558:	dc000017 	ldw	r16,0(sp)
 800255c:	dec00404 	addi	sp,sp,16
 8002560:	f800283a 	ret

08002564 <update_game>:

void update_game(scene_t* scene) {
 8002564:	defffb04 	addi	sp,sp,-20
 8002568:	dfc00415 	stw	ra,16(sp)
 800256c:	df000315 	stw	fp,12(sp)
 8002570:	df000304 	addi	fp,sp,12
 8002574:	e13fff15 	stw	r4,-4(fp)
    float time = get_time();
 8002578:	80044940 	call	8004494 <get_time>
 800257c:	e0bffd15 	stw	r2,-12(fp)
    float dt = time - scene->last_update;
 8002580:	e0bfff17 	ldw	r2,-4(fp)
 8002584:	10c00017 	ldw	r3,0(r2)
 8002588:	180b883a 	mov	r5,r3
 800258c:	e13ffd17 	ldw	r4,-12(fp)
 8002590:	80080440 	call	8008044 <__subsf3>
 8002594:	1007883a 	mov	r3,r2
 8002598:	e0fffe15 	stw	r3,-8(fp)
    scene->last_update = time;
 800259c:	e0bfff17 	ldw	r2,-4(fp)
 80025a0:	e0fffd17 	ldw	r3,-12(fp)
 80025a4:	10c00015 	stw	r3,0(r2)
    update_ships(scene, PLAYER, dt);
 80025a8:	e1bffe17 	ldw	r6,-8(fp)
 80025ac:	000b883a 	mov	r5,zero
 80025b0:	e13fff17 	ldw	r4,-4(fp)
 80025b4:	80019280 	call	8001928 <update_ships>
    update_ships(scene, ENEMY, dt);
 80025b8:	e1bffe17 	ldw	r6,-8(fp)
 80025bc:	01400044 	movi	r5,1
 80025c0:	e13fff17 	ldw	r4,-4(fp)
 80025c4:	80019280 	call	8001928 <update_ships>
    update_weapons(scene, PLAYER, dt);
 80025c8:	e1bffe17 	ldw	r6,-8(fp)
 80025cc:	000b883a 	mov	r5,zero
 80025d0:	e13fff17 	ldw	r4,-4(fp)
 80025d4:	8001f280 	call	8001f28 <update_weapons>
    update_weapons(scene, ENEMY, dt);
 80025d8:	e1bffe17 	ldw	r6,-8(fp)
 80025dc:	01400044 	movi	r5,1
 80025e0:	e13fff17 	ldw	r4,-4(fp)
 80025e4:	8001f280 	call	8001f28 <update_weapons>
}
 80025e8:	0001883a 	nop
 80025ec:	e037883a 	mov	sp,fp
 80025f0:	dfc00117 	ldw	ra,4(sp)
 80025f4:	df000017 	ldw	fp,0(sp)
 80025f8:	dec00204 	addi	sp,sp,8
 80025fc:	f800283a 	ret

08002600 <gdu_run>:
    gdu_sprite_t    sprites[MAX_SPRITES];
} gdu_memory_t;

static volatile gdu_memory_t* gdu_mem = (gdu_memory_t*) GDU_MEM_LOCATION;

int gdu_run() {
 8002600:	deffff04 	addi	sp,sp,-4
 8002604:	df000015 	stw	fp,0(sp)
 8002608:	d839883a 	mov	fp,sp
    if (gdu_mem->running)
 800260c:	d0a00017 	ldw	r2,-32768(gp)
 8002610:	10800017 	ldw	r2,0(r2)
 8002614:	10000226 	beq	r2,zero,8002620 <gdu_run+0x20>
        return 0;
 8002618:	0005883a 	mov	r2,zero
 800261c:	00000406 	br	8002630 <gdu_run+0x30>
    gdu_mem->running = 1;
 8002620:	d0a00017 	ldw	r2,-32768(gp)
 8002624:	00c00044 	movi	r3,1
 8002628:	10c00015 	stw	r3,0(r2)
    return 1;
 800262c:	00800044 	movi	r2,1
}
 8002630:	e037883a 	mov	sp,fp
 8002634:	df000017 	ldw	fp,0(sp)
 8002638:	dec00104 	addi	sp,sp,4
 800263c:	f800283a 	ret

08002640 <gdu_is_running>:

int gdu_is_running() { return gdu_mem->running; }
 8002640:	deffff04 	addi	sp,sp,-4
 8002644:	df000015 	stw	fp,0(sp)
 8002648:	d839883a 	mov	fp,sp
 800264c:	d0a00017 	ldw	r2,-32768(gp)
 8002650:	10800017 	ldw	r2,0(r2)
 8002654:	e037883a 	mov	sp,fp
 8002658:	df000017 	ldw	fp,0(sp)
 800265c:	dec00104 	addi	sp,sp,4
 8002660:	f800283a 	ret

08002664 <gdu_reset>:

void gdu_reset() {
 8002664:	defffd04 	addi	sp,sp,-12
 8002668:	dfc00215 	stw	ra,8(sp)
 800266c:	df000115 	stw	fp,4(sp)
 8002670:	df000104 	addi	fp,sp,4
    for (int i = 0; i < MAX_SPRITES; i++)
 8002674:	e03fff15 	stw	zero,-4(fp)
 8002678:	00000506 	br	8002690 <gdu_reset+0x2c>
        pop_sprite(i);
 800267c:	e13fff17 	ldw	r4,-4(fp)
 8002680:	800281c0 	call	800281c <pop_sprite>
}

int gdu_is_running() { return gdu_mem->running; }

void gdu_reset() {
    for (int i = 0; i < MAX_SPRITES; i++)
 8002684:	e0bfff17 	ldw	r2,-4(fp)
 8002688:	10800044 	addi	r2,r2,1
 800268c:	e0bfff15 	stw	r2,-4(fp)
 8002690:	e0bfff17 	ldw	r2,-4(fp)
 8002694:	10801010 	cmplti	r2,r2,64
 8002698:	103ff81e 	bne	r2,zero,800267c <__alt_data_end+0xfc00267c>
        pop_sprite(i);
}
 800269c:	0001883a 	nop
 80026a0:	e037883a 	mov	sp,fp
 80026a4:	dfc00117 	ldw	ra,4(sp)
 80026a8:	df000017 	ldw	fp,0(sp)
 80026ac:	dec00204 	addi	sp,sp,8
 80026b0:	f800283a 	ret

080026b4 <gdu_set_frame>:

void gdu_set_frame(uint16_t* frame) { gdu_mem->frame_address = frame; }
 80026b4:	defffe04 	addi	sp,sp,-8
 80026b8:	df000115 	stw	fp,4(sp)
 80026bc:	df000104 	addi	fp,sp,4
 80026c0:	e13fff15 	stw	r4,-4(fp)
 80026c4:	d0a00017 	ldw	r2,-32768(gp)
 80026c8:	e0ffff17 	ldw	r3,-4(fp)
 80026cc:	10c00115 	stw	r3,4(r2)
 80026d0:	0001883a 	nop
 80026d4:	e037883a 	mov	sp,fp
 80026d8:	df000017 	ldw	fp,0(sp)
 80026dc:	dec00104 	addi	sp,sp,4
 80026e0:	f800283a 	ret

080026e4 <convert_sprite>:

void convert_sprite(volatile gdu_sprite_t* gdu_sprite, sprite_t* sprite) {
 80026e4:	defffd04 	addi	sp,sp,-12
 80026e8:	df000215 	stw	fp,8(sp)
 80026ec:	df000204 	addi	fp,sp,8
 80026f0:	e13ffe15 	stw	r4,-8(fp)
 80026f4:	e17fff15 	stw	r5,-4(fp)
    gdu_sprite->address     = (uint16_t*) sprite->address;
 80026f8:	e0bfff17 	ldw	r2,-4(fp)
 80026fc:	10c00017 	ldw	r3,0(r2)
 8002700:	e0bffe17 	ldw	r2,-8(fp)
 8002704:	10c00015 	stw	r3,0(r2)
    gdu_sprite->dimensions  = (uint32_t) ((sprite->width     << 16) + sprite->height);
 8002708:	e0bfff17 	ldw	r2,-4(fp)
 800270c:	10800117 	ldw	r2,4(r2)
 8002710:	1006943a 	slli	r3,r2,16
 8002714:	e0bfff17 	ldw	r2,-4(fp)
 8002718:	10800217 	ldw	r2,8(r2)
 800271c:	1885883a 	add	r2,r3,r2
 8002720:	1007883a 	mov	r3,r2
 8002724:	e0bffe17 	ldw	r2,-8(fp)
 8002728:	10c00115 	stw	r3,4(r2)
    gdu_sprite->screen_xy   = (uint32_t) ((sprite->screen_x  << 16) + sprite->screen_y);
 800272c:	e0bfff17 	ldw	r2,-4(fp)
 8002730:	10800317 	ldw	r2,12(r2)
 8002734:	1006943a 	slli	r3,r2,16
 8002738:	e0bfff17 	ldw	r2,-4(fp)
 800273c:	10800417 	ldw	r2,16(r2)
 8002740:	1885883a 	add	r2,r3,r2
 8002744:	1007883a 	mov	r3,r2
 8002748:	e0bffe17 	ldw	r2,-8(fp)
 800274c:	10c00215 	stw	r3,8(r2)
    gdu_sprite->start_xy    = (uint32_t) ((sprite->start_x   << 16) + sprite->start_y);
 8002750:	e0bfff17 	ldw	r2,-4(fp)
 8002754:	10800517 	ldw	r2,20(r2)
 8002758:	1006943a 	slli	r3,r2,16
 800275c:	e0bfff17 	ldw	r2,-4(fp)
 8002760:	10800617 	ldw	r2,24(r2)
 8002764:	1885883a 	add	r2,r3,r2
 8002768:	1007883a 	mov	r3,r2
 800276c:	e0bffe17 	ldw	r2,-8(fp)
 8002770:	10c00315 	stw	r3,12(r2)
    gdu_sprite->end_xy      = (uint32_t) ((sprite->end_x     << 16) + sprite->end_y);
 8002774:	e0bfff17 	ldw	r2,-4(fp)
 8002778:	10800717 	ldw	r2,28(r2)
 800277c:	1006943a 	slli	r3,r2,16
 8002780:	e0bfff17 	ldw	r2,-4(fp)
 8002784:	10800817 	ldw	r2,32(r2)
 8002788:	1885883a 	add	r2,r3,r2
 800278c:	1007883a 	mov	r3,r2
 8002790:	e0bffe17 	ldw	r2,-8(fp)
 8002794:	10c00415 	stw	r3,16(r2)
}
 8002798:	0001883a 	nop
 800279c:	e037883a 	mov	sp,fp
 80027a0:	df000017 	ldw	fp,0(sp)
 80027a4:	dec00104 	addi	sp,sp,4
 80027a8:	f800283a 	ret

080027ac <push_sprite>:

int push_sprite(sprite_t* sprite, uint32_t index) {
 80027ac:	defffb04 	addi	sp,sp,-20
 80027b0:	dfc00415 	stw	ra,16(sp)
 80027b4:	df000315 	stw	fp,12(sp)
 80027b8:	dc000215 	stw	r16,8(sp)
 80027bc:	df000304 	addi	fp,sp,12
 80027c0:	e13ffd15 	stw	r4,-12(fp)
 80027c4:	e17ffe15 	stw	r5,-8(fp)
    if (index > MAX_SPRITES)
 80027c8:	e0bffe17 	ldw	r2,-8(fp)
 80027cc:	10801070 	cmpltui	r2,r2,65
 80027d0:	1000021e 	bne	r2,zero,80027dc <push_sprite+0x30>
        return 0;
 80027d4:	0005883a 	mov	r2,zero
 80027d8:	00000a06 	br	8002804 <push_sprite+0x58>
    convert_sprite(&gdu_mem->sprites[index], sprite);
 80027dc:	d4200017 	ldw	r16,-32768(gp)
 80027e0:	01400504 	movi	r5,20
 80027e4:	e13ffe17 	ldw	r4,-8(fp)
 80027e8:	80071600 	call	8007160 <__mulsi3>
 80027ec:	10800204 	addi	r2,r2,8
 80027f0:	8085883a 	add	r2,r16,r2
 80027f4:	e17ffd17 	ldw	r5,-12(fp)
 80027f8:	1009883a 	mov	r4,r2
 80027fc:	80026e40 	call	80026e4 <convert_sprite>
    return 1;
 8002800:	00800044 	movi	r2,1
}
 8002804:	e6ffff04 	addi	sp,fp,-4
 8002808:	dfc00217 	ldw	ra,8(sp)
 800280c:	df000117 	ldw	fp,4(sp)
 8002810:	dc000017 	ldw	r16,0(sp)
 8002814:	dec00304 	addi	sp,sp,12
 8002818:	f800283a 	ret

0800281c <pop_sprite>:

int pop_sprite(int index) {
 800281c:	defffc04 	addi	sp,sp,-16
 8002820:	dfc00315 	stw	ra,12(sp)
 8002824:	df000215 	stw	fp,8(sp)
 8002828:	dc000115 	stw	r16,4(sp)
 800282c:	df000204 	addi	fp,sp,8
 8002830:	e13ffe15 	stw	r4,-8(fp)
    if (index > MAX_SPRITES)
 8002834:	e0bffe17 	ldw	r2,-8(fp)
 8002838:	10801050 	cmplti	r2,r2,65
 800283c:	1000021e 	bne	r2,zero,8002848 <pop_sprite+0x2c>
        return 0;
 8002840:	0005883a 	mov	r2,zero
 8002844:	00000906 	br	800286c <pop_sprite+0x50>
    gdu_mem->sprites[index].address = 0;
 8002848:	d4200017 	ldw	r16,-32768(gp)
 800284c:	e0bffe17 	ldw	r2,-8(fp)
 8002850:	01400504 	movi	r5,20
 8002854:	1009883a 	mov	r4,r2
 8002858:	80071600 	call	8007160 <__mulsi3>
 800285c:	8085883a 	add	r2,r16,r2
 8002860:	10800204 	addi	r2,r2,8
 8002864:	10000015 	stw	zero,0(r2)
    return 1;
 8002868:	00800044 	movi	r2,1
}
 800286c:	e6ffff04 	addi	sp,fp,-4
 8002870:	dfc00217 	ldw	ra,8(sp)
 8002874:	df000117 	ldw	fp,4(sp)
 8002878:	dc000017 	ldw	r16,0(sp)
 800287c:	dec00304 	addi	sp,sp,12
 8002880:	f800283a 	ret

08002884 <run_level1>:

#include <stdlib.h>

#define SPAWN_CUTOFF 250

int run_level1() {
 8002884:	defaa804 	addi	sp,sp,-5472
 8002888:	dfc55715 	stw	ra,5468(sp)
 800288c:	df055615 	stw	fp,5464(sp)
 8002890:	df055604 	addi	fp,sp,5464
    rate_t frame_rate = create_rate(20);
 8002894:	e0babb04 	addi	r2,fp,-5396
 8002898:	01506834 	movhi	r5,16800
 800289c:	1009883a 	mov	r4,r2
 80028a0:	80045540 	call	8004554 <create_rate>
    scene_t scene;
    clear_scene(&scene);
 80028a4:	e0babe04 	addi	r2,fp,-5384
 80028a8:	1009883a 	mov	r4,r2
 80028ac:	8000ea00 	call	8000ea0 <clear_scene>

    scene.scroll.max.x  = 3 * (level1_background_sprite.width - SCREEN_WIDTH);
 80028b0:	0080f004 	movi	r2,960
 80028b4:	10ff6004 	addi	r3,r2,-640
 80028b8:	1805883a 	mov	r2,r3
 80028bc:	1085883a 	add	r2,r2,r2
 80028c0:	10c5883a 	add	r2,r2,r3
 80028c4:	e0baec15 	stw	r2,-5200(fp)
    scene.max.x         = scene.scroll.max.x + SCREEN_WIDTH;
 80028c8:	e0baec17 	ldw	r2,-5200(fp)
 80028cc:	1080a004 	addi	r2,r2,640
 80028d0:	e0baee15 	stw	r2,-5192(fp)
    scene.max.y         = SCREEN_HEIGHT;
 80028d4:	00807804 	movi	r2,480
 80028d8:	e0baef15 	stw	r2,-5188(fp)

    game_object_t* background       = allocate_object(&scene, BACKGROUND,   USED | VISABLE);
 80028dc:	e0babe04 	addi	r2,fp,-5384
 80028e0:	018000c4 	movi	r6,3
 80028e4:	000b883a 	mov	r5,zero
 80028e8:	1009883a 	mov	r4,r2
 80028ec:	8000ac80 	call	8000ac8 <allocate_object>
 80028f0:	e0baaf15 	stw	r2,-5444(fp)
    game_object_t* player_planet    = allocate_object(&scene, BACKGROUND,   USED | VISABLE | SCROLL | CENTERED);
 80028f4:	e0babe04 	addi	r2,fp,-5384
 80028f8:	018003c4 	movi	r6,15
 80028fc:	000b883a 	mov	r5,zero
 8002900:	1009883a 	mov	r4,r2
 8002904:	8000ac80 	call	8000ac8 <allocate_object>
 8002908:	e0bab015 	stw	r2,-5440(fp)
    game_object_t* enemy_planet     = allocate_object(&scene, BACKGROUND,   USED | VISABLE | SCROLL | CENTERED);
 800290c:	e0babe04 	addi	r2,fp,-5384
 8002910:	018003c4 	movi	r6,15
 8002914:	000b883a 	mov	r5,zero
 8002918:	1009883a 	mov	r4,r2
 800291c:	8000ac80 	call	8000ac8 <allocate_object>
 8002920:	e0bab115 	stw	r2,-5436(fp)
    game_object_t* statusbar        = allocate_object(&scene, EFFECTS,      USED | VISABLE);
 8002924:	e0babe04 	addi	r2,fp,-5384
 8002928:	018000c4 	movi	r6,3
 800292c:	01400084 	movi	r5,2
 8002930:	1009883a 	mov	r4,r2
 8002934:	8000ac80 	call	8000ac8 <allocate_object>
 8002938:	e0bab215 	stw	r2,-5432(fp)
    game_object_t* playerbar        = allocate_object(&scene, EFFECTS,      USED | VISABLE);
 800293c:	e0babe04 	addi	r2,fp,-5384
 8002940:	018000c4 	movi	r6,3
 8002944:	01400084 	movi	r5,2
 8002948:	1009883a 	mov	r4,r2
 800294c:	8000ac80 	call	8000ac8 <allocate_object>
 8002950:	e0bab315 	stw	r2,-5428(fp)
    game_object_t* enemybar         = allocate_object(&scene, EFFECTS,      USED | VISABLE);
 8002954:	e0babe04 	addi	r2,fp,-5384
 8002958:	018000c4 	movi	r6,3
 800295c:	01400084 	movi	r5,2
 8002960:	1009883a 	mov	r4,r2
 8002964:	8000ac80 	call	8000ac8 <allocate_object>
 8002968:	e0bab415 	stw	r2,-5424(fp)
    game_object_t* spawnship1       = allocate_object(&scene, EFFECTS,      USED | VISABLE | CENTERED);
 800296c:	e0babe04 	addi	r2,fp,-5384
 8002970:	018002c4 	movi	r6,11
 8002974:	01400084 	movi	r5,2
 8002978:	1009883a 	mov	r4,r2
 800297c:	8000ac80 	call	8000ac8 <allocate_object>
 8002980:	e0bab515 	stw	r2,-5420(fp)
    game_object_t* spawnship2       = allocate_object(&scene, EFFECTS,      USED | VISABLE | CENTERED);
 8002984:	e0babe04 	addi	r2,fp,-5384
 8002988:	018002c4 	movi	r6,11
 800298c:	01400084 	movi	r5,2
 8002990:	1009883a 	mov	r4,r2
 8002994:	8000ac80 	call	8000ac8 <allocate_object>
 8002998:	e0bab615 	stw	r2,-5416(fp)
    game_object_t* spawnwarning     = allocate_object(&scene, EFFECTS,      USED | CENTERED);
 800299c:	e0babe04 	addi	r2,fp,-5384
 80029a0:	01800244 	movi	r6,9
 80029a4:	01400084 	movi	r5,2
 80029a8:	1009883a 	mov	r4,r2
 80029ac:	8000ac80 	call	8000ac8 <allocate_object>
 80029b0:	e0bab715 	stw	r2,-5412(fp)
    game_object_t* cursor           = allocate_object(&scene, CURSOR,       USED | VISABLE);
 80029b4:	e0babe04 	addi	r2,fp,-5384
 80029b8:	018000c4 	movi	r6,3
 80029bc:	014000c4 	movi	r5,3
 80029c0:	1009883a 	mov	r4,r2
 80029c4:	8000ac80 	call	8000ac8 <allocate_object>
 80029c8:	e0bab815 	stw	r2,-5408(fp)

    background->sprite      = level1_background_sprite;
 80029cc:	e0faaf17 	ldw	r3,-5444(fp)
 80029d0:	008200b4 	movhi	r2,2050
 80029d4:	10938c04 	addi	r2,r2,20016
 80029d8:	18800315 	stw	r2,12(r3)
 80029dc:	e0baaf17 	ldw	r2,-5444(fp)
 80029e0:	00c0f004 	movi	r3,960
 80029e4:	10c00415 	stw	r3,16(r2)
 80029e8:	e0baaf17 	ldw	r2,-5444(fp)
 80029ec:	00c07804 	movi	r3,480
 80029f0:	10c00515 	stw	r3,20(r2)
 80029f4:	e0baaf17 	ldw	r2,-5444(fp)
 80029f8:	10000615 	stw	zero,24(r2)
 80029fc:	e0baaf17 	ldw	r2,-5444(fp)
 8002a00:	10000715 	stw	zero,28(r2)
 8002a04:	e0baaf17 	ldw	r2,-5444(fp)
 8002a08:	10000815 	stw	zero,32(r2)
 8002a0c:	e0baaf17 	ldw	r2,-5444(fp)
 8002a10:	10000915 	stw	zero,36(r2)
 8002a14:	e0baaf17 	ldw	r2,-5444(fp)
 8002a18:	00c0f004 	movi	r3,960
 8002a1c:	10c00a15 	stw	r3,40(r2)
 8002a20:	e0baaf17 	ldw	r2,-5444(fp)
 8002a24:	00c07804 	movi	r3,480
 8002a28:	10c00b15 	stw	r3,44(r2)
    player_planet->sprite   = level1_player_planet_sprite;
 8002a2c:	e0fab017 	ldw	r3,-5440(fp)
 8002a30:	00820434 	movhi	r2,2064
 8002a34:	10979504 	addi	r2,r2,24148
 8002a38:	18800315 	stw	r2,12(r3)
 8002a3c:	e0bab017 	ldw	r2,-5440(fp)
 8002a40:	00c04b04 	movi	r3,300
 8002a44:	10c00415 	stw	r3,16(r2)
 8002a48:	e0bab017 	ldw	r2,-5440(fp)
 8002a4c:	00c04b04 	movi	r3,300
 8002a50:	10c00515 	stw	r3,20(r2)
 8002a54:	e0bab017 	ldw	r2,-5440(fp)
 8002a58:	10000615 	stw	zero,24(r2)
 8002a5c:	e0bab017 	ldw	r2,-5440(fp)
 8002a60:	10000715 	stw	zero,28(r2)
 8002a64:	e0bab017 	ldw	r2,-5440(fp)
 8002a68:	10000815 	stw	zero,32(r2)
 8002a6c:	e0bab017 	ldw	r2,-5440(fp)
 8002a70:	10000915 	stw	zero,36(r2)
 8002a74:	e0bab017 	ldw	r2,-5440(fp)
 8002a78:	00c04b04 	movi	r3,300
 8002a7c:	10c00a15 	stw	r3,40(r2)
 8002a80:	e0bab017 	ldw	r2,-5440(fp)
 8002a84:	00c04b04 	movi	r3,300
 8002a88:	10c00b15 	stw	r3,44(r2)
    enemy_planet->sprite    = level1_enemy_planet_sprite;
 8002a8c:	e0fab117 	ldw	r3,-5436(fp)
 8002a90:	008204f4 	movhi	r2,2067
 8002a94:	10876604 	addi	r2,r2,7576
 8002a98:	18800315 	stw	r2,12(r3)
 8002a9c:	e0bab117 	ldw	r2,-5436(fp)
 8002aa0:	00c04b04 	movi	r3,300
 8002aa4:	10c00415 	stw	r3,16(r2)
 8002aa8:	e0bab117 	ldw	r2,-5436(fp)
 8002aac:	00c04b04 	movi	r3,300
 8002ab0:	10c00515 	stw	r3,20(r2)
 8002ab4:	e0bab117 	ldw	r2,-5436(fp)
 8002ab8:	10000615 	stw	zero,24(r2)
 8002abc:	e0bab117 	ldw	r2,-5436(fp)
 8002ac0:	10000715 	stw	zero,28(r2)
 8002ac4:	e0bab117 	ldw	r2,-5436(fp)
 8002ac8:	10000815 	stw	zero,32(r2)
 8002acc:	e0bab117 	ldw	r2,-5436(fp)
 8002ad0:	10000915 	stw	zero,36(r2)
 8002ad4:	e0bab117 	ldw	r2,-5436(fp)
 8002ad8:	00c04b04 	movi	r3,300
 8002adc:	10c00a15 	stw	r3,40(r2)
 8002ae0:	e0bab117 	ldw	r2,-5436(fp)
 8002ae4:	00c04b04 	movi	r3,300
 8002ae8:	10c00b15 	stw	r3,44(r2)
    statusbar->sprite       = statusbar_sprite;
 8002aec:	e0fab217 	ldw	r3,-5432(fp)
 8002af0:	008205b4 	movhi	r2,2070
 8002af4:	10b73704 	addi	r2,r2,-8996
 8002af8:	18800315 	stw	r2,12(r3)
 8002afc:	e0bab217 	ldw	r2,-5432(fp)
 8002b00:	00c0a004 	movi	r3,640
 8002b04:	10c00415 	stw	r3,16(r2)
 8002b08:	e0bab217 	ldw	r2,-5432(fp)
 8002b0c:	00c00f04 	movi	r3,60
 8002b10:	10c00515 	stw	r3,20(r2)
 8002b14:	e0bab217 	ldw	r2,-5432(fp)
 8002b18:	10000615 	stw	zero,24(r2)
 8002b1c:	e0bab217 	ldw	r2,-5432(fp)
 8002b20:	10000715 	stw	zero,28(r2)
 8002b24:	e0bab217 	ldw	r2,-5432(fp)
 8002b28:	10000815 	stw	zero,32(r2)
 8002b2c:	e0bab217 	ldw	r2,-5432(fp)
 8002b30:	10000915 	stw	zero,36(r2)
 8002b34:	e0bab217 	ldw	r2,-5432(fp)
 8002b38:	00c0a004 	movi	r3,640
 8002b3c:	10c00a15 	stw	r3,40(r2)
 8002b40:	e0bab217 	ldw	r2,-5432(fp)
 8002b44:	00c00f04 	movi	r3,60
 8002b48:	10c00b15 	stw	r3,44(r2)
    playerbar->sprite       = greenhealth_sprite;
 8002b4c:	e0fab317 	ldw	r3,-5428(fp)
 8002b50:	008205f4 	movhi	r2,2071
 8002b54:	10824004 	addi	r2,r2,2304
 8002b58:	18800315 	stw	r2,12(r3)
 8002b5c:	e0bab317 	ldw	r2,-5428(fp)
 8002b60:	00c02684 	movi	r3,154
 8002b64:	10c00415 	stw	r3,16(r2)
 8002b68:	e0bab317 	ldw	r2,-5428(fp)
 8002b6c:	00c007c4 	movi	r3,31
 8002b70:	10c00515 	stw	r3,20(r2)
 8002b74:	e0bab317 	ldw	r2,-5428(fp)
 8002b78:	10000615 	stw	zero,24(r2)
 8002b7c:	e0bab317 	ldw	r2,-5428(fp)
 8002b80:	10000715 	stw	zero,28(r2)
 8002b84:	e0bab317 	ldw	r2,-5428(fp)
 8002b88:	10000815 	stw	zero,32(r2)
 8002b8c:	e0bab317 	ldw	r2,-5428(fp)
 8002b90:	10000915 	stw	zero,36(r2)
 8002b94:	e0bab317 	ldw	r2,-5428(fp)
 8002b98:	00c02684 	movi	r3,154
 8002b9c:	10c00a15 	stw	r3,40(r2)
 8002ba0:	e0bab317 	ldw	r2,-5428(fp)
 8002ba4:	00c007c4 	movi	r3,31
 8002ba8:	10c00b15 	stw	r3,44(r2)
    enemybar->sprite        = redhealth_sprite;
 8002bac:	e0fab417 	ldw	r3,-5424(fp)
 8002bb0:	008205f4 	movhi	r2,2071
 8002bb4:	108b9c04 	addi	r2,r2,11888
 8002bb8:	18800315 	stw	r2,12(r3)
 8002bbc:	e0bab417 	ldw	r2,-5424(fp)
 8002bc0:	00c02684 	movi	r3,154
 8002bc4:	10c00415 	stw	r3,16(r2)
 8002bc8:	e0bab417 	ldw	r2,-5424(fp)
 8002bcc:	00c007c4 	movi	r3,31
 8002bd0:	10c00515 	stw	r3,20(r2)
 8002bd4:	e0bab417 	ldw	r2,-5424(fp)
 8002bd8:	10000615 	stw	zero,24(r2)
 8002bdc:	e0bab417 	ldw	r2,-5424(fp)
 8002be0:	10000715 	stw	zero,28(r2)
 8002be4:	e0bab417 	ldw	r2,-5424(fp)
 8002be8:	10000815 	stw	zero,32(r2)
 8002bec:	e0bab417 	ldw	r2,-5424(fp)
 8002bf0:	10000915 	stw	zero,36(r2)
 8002bf4:	e0bab417 	ldw	r2,-5424(fp)
 8002bf8:	00c02684 	movi	r3,154
 8002bfc:	10c00a15 	stw	r3,40(r2)
 8002c00:	e0bab417 	ldw	r2,-5424(fp)
 8002c04:	00c007c4 	movi	r3,31
 8002c08:	10c00b15 	stw	r3,44(r2)
    spawnship1->sprite      = playership0_sprite;
 8002c0c:	e0fab517 	ldw	r3,-5420(fp)
 8002c10:	008200b4 	movhi	r2,2050
 8002c14:	10822904 	addi	r2,r2,2212
 8002c18:	18800315 	stw	r2,12(r3)
 8002c1c:	e0bab517 	ldw	r2,-5420(fp)
 8002c20:	00c00a04 	movi	r3,40
 8002c24:	10c00415 	stw	r3,16(r2)
 8002c28:	e0bab517 	ldw	r2,-5420(fp)
 8002c2c:	00c005c4 	movi	r3,23
 8002c30:	10c00515 	stw	r3,20(r2)
 8002c34:	e0bab517 	ldw	r2,-5420(fp)
 8002c38:	10000615 	stw	zero,24(r2)
 8002c3c:	e0bab517 	ldw	r2,-5420(fp)
 8002c40:	10000715 	stw	zero,28(r2)
 8002c44:	e0bab517 	ldw	r2,-5420(fp)
 8002c48:	10000815 	stw	zero,32(r2)
 8002c4c:	e0bab517 	ldw	r2,-5420(fp)
 8002c50:	10000915 	stw	zero,36(r2)
 8002c54:	e0bab517 	ldw	r2,-5420(fp)
 8002c58:	00c00a04 	movi	r3,40
 8002c5c:	10c00a15 	stw	r3,40(r2)
 8002c60:	e0bab517 	ldw	r2,-5420(fp)
 8002c64:	00c005c4 	movi	r3,23
 8002c68:	10c00b15 	stw	r3,44(r2)
    spawnship2->sprite      = playership1_sprite;
 8002c6c:	e0fab617 	ldw	r3,-5416(fp)
 8002c70:	008200b4 	movhi	r2,2050
 8002c74:	1083fe04 	addi	r2,r2,4088
 8002c78:	18800315 	stw	r2,12(r3)
 8002c7c:	e0bab617 	ldw	r2,-5416(fp)
 8002c80:	00c01784 	movi	r3,94
 8002c84:	10c00415 	stw	r3,16(r2)
 8002c88:	e0bab617 	ldw	r2,-5416(fp)
 8002c8c:	00c00984 	movi	r3,38
 8002c90:	10c00515 	stw	r3,20(r2)
 8002c94:	e0bab617 	ldw	r2,-5416(fp)
 8002c98:	10000615 	stw	zero,24(r2)
 8002c9c:	e0bab617 	ldw	r2,-5416(fp)
 8002ca0:	10000715 	stw	zero,28(r2)
 8002ca4:	e0bab617 	ldw	r2,-5416(fp)
 8002ca8:	10000815 	stw	zero,32(r2)
 8002cac:	e0bab617 	ldw	r2,-5416(fp)
 8002cb0:	10000915 	stw	zero,36(r2)
 8002cb4:	e0bab617 	ldw	r2,-5416(fp)
 8002cb8:	00c01784 	movi	r3,94
 8002cbc:	10c00a15 	stw	r3,40(r2)
 8002cc0:	e0bab617 	ldw	r2,-5416(fp)
 8002cc4:	00c00984 	movi	r3,38
 8002cc8:	10c00b15 	stw	r3,44(r2)
    spawnwarning->sprite    = warning_sprite;
 8002ccc:	e0fab717 	ldw	r3,-5412(fp)
 8002cd0:	008205f4 	movhi	r2,2071
 8002cd4:	1094f804 	addi	r2,r2,21472
 8002cd8:	18800315 	stw	r2,12(r3)
 8002cdc:	e0bab717 	ldw	r2,-5412(fp)
 8002ce0:	00c00a04 	movi	r3,40
 8002ce4:	10c00415 	stw	r3,16(r2)
 8002ce8:	e0bab717 	ldw	r2,-5412(fp)
 8002cec:	00c007c4 	movi	r3,31
 8002cf0:	10c00515 	stw	r3,20(r2)
 8002cf4:	e0bab717 	ldw	r2,-5412(fp)
 8002cf8:	10000615 	stw	zero,24(r2)
 8002cfc:	e0bab717 	ldw	r2,-5412(fp)
 8002d00:	10000715 	stw	zero,28(r2)
 8002d04:	e0bab717 	ldw	r2,-5412(fp)
 8002d08:	10000815 	stw	zero,32(r2)
 8002d0c:	e0bab717 	ldw	r2,-5412(fp)
 8002d10:	10000915 	stw	zero,36(r2)
 8002d14:	e0bab717 	ldw	r2,-5412(fp)
 8002d18:	00c00a04 	movi	r3,40
 8002d1c:	10c00a15 	stw	r3,40(r2)
 8002d20:	e0bab717 	ldw	r2,-5412(fp)
 8002d24:	00c007c4 	movi	r3,31
 8002d28:	10c00b15 	stw	r3,44(r2)
    cursor->sprite          = cursor_sprite;
 8002d2c:	e0fab817 	ldw	r3,-5408(fp)
 8002d30:	008205f4 	movhi	r2,2071
 8002d34:	10976d04 	addi	r2,r2,23988
 8002d38:	18800315 	stw	r2,12(r3)
 8002d3c:	e0bab817 	ldw	r2,-5408(fp)
 8002d40:	00c00584 	movi	r3,22
 8002d44:	10c00415 	stw	r3,16(r2)
 8002d48:	e0bab817 	ldw	r2,-5408(fp)
 8002d4c:	00c00604 	movi	r3,24
 8002d50:	10c00515 	stw	r3,20(r2)
 8002d54:	e0bab817 	ldw	r2,-5408(fp)
 8002d58:	10000615 	stw	zero,24(r2)
 8002d5c:	e0bab817 	ldw	r2,-5408(fp)
 8002d60:	10000715 	stw	zero,28(r2)
 8002d64:	e0bab817 	ldw	r2,-5408(fp)
 8002d68:	10000815 	stw	zero,32(r2)
 8002d6c:	e0bab817 	ldw	r2,-5408(fp)
 8002d70:	10000915 	stw	zero,36(r2)
 8002d74:	e0bab817 	ldw	r2,-5408(fp)
 8002d78:	00c00584 	movi	r3,22
 8002d7c:	10c00a15 	stw	r3,40(r2)
 8002d80:	e0bab817 	ldw	r2,-5408(fp)
 8002d84:	00c00604 	movi	r3,24
 8002d88:	10c00b15 	stw	r3,44(r2)

    player_planet->pos.x = 50 + player_planet->sprite.width / 2;
 8002d8c:	e0bab017 	ldw	r2,-5440(fp)
 8002d90:	10800417 	ldw	r2,16(r2)
 8002d94:	1006d7fa 	srli	r3,r2,31
 8002d98:	1885883a 	add	r2,r3,r2
 8002d9c:	1005d07a 	srai	r2,r2,1
 8002da0:	10c00c84 	addi	r3,r2,50
 8002da4:	e0bab017 	ldw	r2,-5440(fp)
 8002da8:	10c00115 	stw	r3,4(r2)
    player_planet->pos.y = scene.max.y / 2;
 8002dac:	e0baef17 	ldw	r2,-5188(fp)
 8002db0:	1006d7fa 	srli	r3,r2,31
 8002db4:	1885883a 	add	r2,r3,r2
 8002db8:	1005d07a 	srai	r2,r2,1
 8002dbc:	1007883a 	mov	r3,r2
 8002dc0:	e0bab017 	ldw	r2,-5440(fp)
 8002dc4:	10c00215 	stw	r3,8(r2)

    enemy_planet->pos.x = scene.max.x - 50 - enemy_planet->sprite.width / 2;
 8002dc8:	e0baee17 	ldw	r2,-5192(fp)
 8002dcc:	10fff384 	addi	r3,r2,-50
 8002dd0:	e0bab117 	ldw	r2,-5436(fp)
 8002dd4:	10800417 	ldw	r2,16(r2)
 8002dd8:	1008d7fa 	srli	r4,r2,31
 8002ddc:	2085883a 	add	r2,r4,r2
 8002de0:	1005d07a 	srai	r2,r2,1
 8002de4:	1887c83a 	sub	r3,r3,r2
 8002de8:	e0bab117 	ldw	r2,-5436(fp)
 8002dec:	10c00115 	stw	r3,4(r2)
    enemy_planet->pos.y = scene.max.y / 2;
 8002df0:	e0baef17 	ldw	r2,-5188(fp)
 8002df4:	1006d7fa 	srli	r3,r2,31
 8002df8:	1885883a 	add	r2,r3,r2
 8002dfc:	1005d07a 	srai	r2,r2,1
 8002e00:	1007883a 	mov	r3,r2
 8002e04:	e0bab117 	ldw	r2,-5436(fp)
 8002e08:	10c00215 	stw	r3,8(r2)

    statusbar->pos.y = SCREEN_HEIGHT - statusbar->sprite.height;
 8002e0c:	e0bab217 	ldw	r2,-5432(fp)
 8002e10:	10800517 	ldw	r2,20(r2)
 8002e14:	00c07804 	movi	r3,480
 8002e18:	1887c83a 	sub	r3,r3,r2
 8002e1c:	e0bab217 	ldw	r2,-5432(fp)
 8002e20:	10c00215 	stw	r3,8(r2)

    playerbar->pos.x = 36;
 8002e24:	e0bab317 	ldw	r2,-5428(fp)
 8002e28:	00c00904 	movi	r3,36
 8002e2c:	10c00115 	stw	r3,4(r2)
    playerbar->pos.y = SCREEN_HEIGHT - 46;
 8002e30:	e0bab317 	ldw	r2,-5428(fp)
 8002e34:	00c06c84 	movi	r3,434
 8002e38:	10c00215 	stw	r3,8(r2)
    enemybar->pos.x = 450;
 8002e3c:	e0bab417 	ldw	r2,-5424(fp)
 8002e40:	00c07084 	movi	r3,450
 8002e44:	10c00115 	stw	r3,4(r2)
    enemybar->pos.y = SCREEN_HEIGHT - 46;
 8002e48:	e0bab417 	ldw	r2,-5424(fp)
 8002e4c:	00c06c84 	movi	r3,434
 8002e50:	10c00215 	stw	r3,8(r2)
    
    position_t spawnship1_default = statusbar->pos;
 8002e54:	e0bab217 	ldw	r2,-5432(fp)
 8002e58:	10c00117 	ldw	r3,4(r2)
 8002e5c:	e0ffe415 	stw	r3,-112(fp)
 8002e60:	10800217 	ldw	r2,8(r2)
 8002e64:	e0bfe515 	stw	r2,-108(fp)
    spawnship1_default.x += 270;
 8002e68:	e0bfe417 	ldw	r2,-112(fp)
 8002e6c:	10804384 	addi	r2,r2,270
 8002e70:	e0bfe415 	stw	r2,-112(fp)
    spawnship1_default.y += 30;
 8002e74:	e0bfe517 	ldw	r2,-108(fp)
 8002e78:	10800784 	addi	r2,r2,30
 8002e7c:	e0bfe515 	stw	r2,-108(fp)
    spawnship1->pos = spawnship1_default;
 8002e80:	e0bab517 	ldw	r2,-5420(fp)
 8002e84:	e0ffe417 	ldw	r3,-112(fp)
 8002e88:	10c00115 	stw	r3,4(r2)
 8002e8c:	e0ffe517 	ldw	r3,-108(fp)
 8002e90:	10c00215 	stw	r3,8(r2)

    position_t spawnship2_default = spawnship1_default;
 8002e94:	e0bfe417 	ldw	r2,-112(fp)
 8002e98:	e0bfe615 	stw	r2,-104(fp)
 8002e9c:	e0bfe517 	ldw	r2,-108(fp)
 8002ea0:	e0bfe715 	stw	r2,-100(fp)
    spawnship2_default.x = 370;
 8002ea4:	00805c84 	movi	r2,370
 8002ea8:	e0bfe615 	stw	r2,-104(fp)
    spawnship2->pos = spawnship2_default;
 8002eac:	e0bab617 	ldw	r2,-5416(fp)
 8002eb0:	e0ffe617 	ldw	r3,-104(fp)
 8002eb4:	10c00115 	stw	r3,4(r2)
 8002eb8:	e0ffe717 	ldw	r3,-100(fp)
 8002ebc:	10c00215 	stw	r3,8(r2)

    mouse_t mouse = new_mouse(SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2);
 8002ec0:	e0bfe804 	addi	r2,fp,-96
 8002ec4:	01803c04 	movi	r6,240
 8002ec8:	01405004 	movi	r5,320
 8002ecc:	1009883a 	mov	r4,r2
 8002ed0:	80041280 	call	8004128 <new_mouse>

    fade_t fade = create_fade(0x0000, FADE_FROM);
 8002ed4:	e0bfee04 	addi	r2,fp,-72
 8002ed8:	01800044 	movi	r6,1
 8002edc:	000b883a 	mov	r5,zero
 8002ee0:	1009883a 	mov	r4,r2
 8002ee4:	80004680 	call	8000468 <create_fade>
    start_fade(&fade, 1);
 8002ee8:	e0bfee04 	addi	r2,fp,-72
 8002eec:	014fe034 	movhi	r5,16256
 8002ef0:	1009883a 	mov	r4,r2
 8002ef4:	80004d40 	call	80004d4 <start_fade>

    spawn_ship(&scene, &enemy_cruiser, ENEMY, enemy_planet->pos);
 8002ef8:	e0bab117 	ldw	r2,-5436(fp)
 8002efc:	e13abe04 	addi	r4,fp,-5384
 8002f00:	10c00217 	ldw	r3,8(r2)
 8002f04:	d8c00015 	stw	r3,0(sp)
 8002f08:	11c00117 	ldw	r7,4(r2)
 8002f0c:	01800044 	movi	r6,1
 8002f10:	014200b4 	movhi	r5,2050
 8002f14:	29537804 	addi	r5,r5,19936
 8002f18:	80010c00 	call	80010c0 <spawn_ship>

    fade_t fader = create_fade(0x0F00, FADE_TO);
 8002f1c:	e0bff204 	addi	r2,fp,-56
 8002f20:	000d883a 	mov	r6,zero
 8002f24:	0143c004 	movi	r5,3840
 8002f28:	1009883a 	mov	r4,r2
 8002f2c:	80004680 	call	8000468 <create_fade>
    fade_t fadew = create_fade(0x0FFF, FADE_TO);
 8002f30:	e0bff604 	addi	r2,fp,-40
 8002f34:	000d883a 	mov	r6,zero
 8002f38:	0143ffc4 	movi	r5,4095
 8002f3c:	1009883a 	mov	r4,r2
 8002f40:	80004680 	call	8000468 <create_fade>

    scene.playerplanet.physics.p.x = (float) player_planet->pos.x;
 8002f44:	e0bab017 	ldw	r2,-5440(fp)
 8002f48:	10800117 	ldw	r2,4(r2)
 8002f4c:	1009883a 	mov	r4,r2
 8002f50:	80085980 	call	8008598 <__floatsisf>
 8002f54:	1007883a 	mov	r3,r2
 8002f58:	e0faca15 	stw	r3,-5336(fp)
    scene.playerplanet.physics.p.y = (float) player_planet->pos.y;
 8002f5c:	e0bab017 	ldw	r2,-5440(fp)
 8002f60:	10800217 	ldw	r2,8(r2)
 8002f64:	1009883a 	mov	r4,r2
 8002f68:	80085980 	call	8008598 <__floatsisf>
 8002f6c:	1007883a 	mov	r3,r2
 8002f70:	e0facb15 	stw	r3,-5332(fp)
    scene.playerplanet.hp = 1000;
 8002f74:	0080fa04 	movi	r2,1000
 8002f78:	e0bac315 	stw	r2,-5364(fp)
    scene.playerplanet.hitradius = 100;
 8002f7c:	00801904 	movi	r2,100
 8002f80:	e0bac715 	stw	r2,-5348(fp)
    scene.playerplanet.ptr = player_planet;
 8002f84:	e0bab017 	ldw	r2,-5440(fp)
 8002f88:	e0bac215 	stw	r2,-5368(fp)

    scene.enemyplanet.physics.p.x = (float) enemy_planet->pos.x;
 8002f8c:	e0bab117 	ldw	r2,-5436(fp)
 8002f90:	10800117 	ldw	r2,4(r2)
 8002f94:	1009883a 	mov	r4,r2
 8002f98:	80085980 	call	8008598 <__floatsisf>
 8002f9c:	1007883a 	mov	r3,r2
 8002fa0:	e0fade15 	stw	r3,-5256(fp)
    scene.enemyplanet.physics.p.y = (float) enemy_planet->pos.y;
 8002fa4:	e0bab117 	ldw	r2,-5436(fp)
 8002fa8:	10800217 	ldw	r2,8(r2)
 8002fac:	1009883a 	mov	r4,r2
 8002fb0:	80085980 	call	8008598 <__floatsisf>
 8002fb4:	1007883a 	mov	r3,r2
 8002fb8:	e0fadf15 	stw	r3,-5252(fp)
    scene.enemyplanet.hp = 1000;
 8002fbc:	0080fa04 	movi	r2,1000
 8002fc0:	e0bad715 	stw	r2,-5284(fp)
    scene.enemyplanet.hitradius = 100;
 8002fc4:	00801904 	movi	r2,100
 8002fc8:	e0badb15 	stw	r2,-5268(fp)
    scene.enemyplanet.ptr = enemy_planet;
 8002fcc:	e0bab117 	ldw	r2,-5436(fp)
 8002fd0:	e0bad615 	stw	r2,-5288(fp)

    int win = 0;
 8002fd4:	e03aab15 	stw	zero,-5460(fp)
    int start_fading = 0;
 8002fd8:	e03aac15 	stw	zero,-5456(fp)

    int placing_ship = 0;
 8002fdc:	e03aad15 	stw	zero,-5452(fp)
    
    int running = 1;
 8002fe0:	00800044 	movi	r2,1
 8002fe4:	e0baae15 	stw	r2,-5448(fp)
    while (running) {
 8002fe8:	00015906 	br	8003550 <run_level1+0xccc>
        poll_mouse(&mouse, 0, 1);
 8002fec:	e0bfe804 	addi	r2,fp,-96
 8002ff0:	01800044 	movi	r6,1
 8002ff4:	000b883a 	mov	r5,zero
 8002ff8:	1009883a 	mov	r4,r2
 8002ffc:	80041b00 	call	80041b0 <poll_mouse>

        if (is_ready(&frame_rate)) {
 8003000:	e0babb04 	addi	r2,fp,-5396
 8003004:	1009883a 	mov	r4,r2
 8003008:	80046100 	call	8004610 <is_ready>
 800300c:	10015026 	beq	r2,zero,8003550 <run_level1+0xccc>
            handle_mouse(&mouse, &scene, 1, 0); 
 8003010:	e0fabe04 	addi	r3,fp,-5384
 8003014:	e0bfe804 	addi	r2,fp,-96
 8003018:	000f883a 	mov	r7,zero
 800301c:	01800044 	movi	r6,1
 8003020:	180b883a 	mov	r5,r3
 8003024:	1009883a 	mov	r4,r2
 8003028:	80008dc0 	call	80008dc <handle_mouse>
            cursor->pos = mouse.pos;
 800302c:	e0bab817 	ldw	r2,-5408(fp)
 8003030:	e0ffe817 	ldw	r3,-96(fp)
 8003034:	10c00115 	stw	r3,4(r2)
 8003038:	e0ffe917 	ldw	r3,-92(fp)
 800303c:	10c00215 	stw	r3,8(r2)

            if (!is_fade_done(&fade))
 8003040:	e0bfee04 	addi	r2,fp,-72
 8003044:	1009883a 	mov	r4,r2
 8003048:	80005340 	call	8000534 <is_fade_done>
 800304c:	1000031e 	bne	r2,zero,800305c <run_level1+0x7d8>
                show_fade(&fade);
 8003050:	e0bfee04 	addi	r2,fp,-72
 8003054:	1009883a 	mov	r4,r2
 8003058:	80005a40 	call	80005a4 <show_fade>
            
            background->sprite.start_x = scene.scroll.pos.x / 3;
 800305c:	e0baea17 	ldw	r2,-5208(fp)
 8003060:	014000c4 	movi	r5,3
 8003064:	1009883a 	mov	r4,r2
 8003068:	8006fac0 	call	8006fac <__divsi3>
 800306c:	1007883a 	mov	r3,r2
 8003070:	e0baaf17 	ldw	r2,-5444(fp)
 8003074:	10c00815 	stw	r3,32(r2)
            background->sprite.end_x = background->sprite.start_x + SCREEN_WIDTH;
 8003078:	e0baaf17 	ldw	r2,-5444(fp)
 800307c:	10800817 	ldw	r2,32(r2)
 8003080:	10c0a004 	addi	r3,r2,640
 8003084:	e0baaf17 	ldw	r2,-5444(fp)
 8003088:	10c00a15 	stw	r3,40(r2)

            playerbar->sprite.end_x = (playerbar->sprite.width * scene.playerplanet.hp) / 1000;
 800308c:	e0bab317 	ldw	r2,-5428(fp)
 8003090:	10800417 	ldw	r2,16(r2)
 8003094:	e0fac317 	ldw	r3,-5364(fp)
 8003098:	180b883a 	mov	r5,r3
 800309c:	1009883a 	mov	r4,r2
 80030a0:	80071600 	call	8007160 <__mulsi3>
 80030a4:	0140fa04 	movi	r5,1000
 80030a8:	1009883a 	mov	r4,r2
 80030ac:	8006fac0 	call	8006fac <__divsi3>
 80030b0:	1007883a 	mov	r3,r2
 80030b4:	e0bab317 	ldw	r2,-5428(fp)
 80030b8:	10c00a15 	stw	r3,40(r2)
            enemybar->sprite.end_x = (enemybar->sprite.width * scene.enemyplanet.hp) / 1000;
 80030bc:	e0bab417 	ldw	r2,-5424(fp)
 80030c0:	10800417 	ldw	r2,16(r2)
 80030c4:	e0fad717 	ldw	r3,-5284(fp)
 80030c8:	180b883a 	mov	r5,r3
 80030cc:	1009883a 	mov	r4,r2
 80030d0:	80071600 	call	8007160 <__mulsi3>
 80030d4:	0140fa04 	movi	r5,1000
 80030d8:	1009883a 	mov	r4,r2
 80030dc:	8006fac0 	call	8006fac <__divsi3>
 80030e0:	1007883a 	mov	r3,r2
 80030e4:	e0bab417 	ldw	r2,-5424(fp)
 80030e8:	10c00a15 	stw	r3,40(r2)

            position_t place_pos = mouse_to_game(&scene, &mouse);
 80030ec:	e0ffe804 	addi	r3,fp,-96
 80030f0:	e0babe04 	addi	r2,fp,-5384
 80030f4:	180b883a 	mov	r5,r3
 80030f8:	1009883a 	mov	r4,r2
 80030fc:	80008700 	call	8000870 <mouse_to_game>
 8003100:	1009883a 	mov	r4,r2
 8003104:	180b883a 	mov	r5,r3
 8003108:	e13ffa15 	stw	r4,-24(fp)
 800310c:	e17ffb15 	stw	r5,-20(fp)
            if (place_pos.x > SPAWN_CUTOFF)
 8003110:	e0bffa17 	ldw	r2,-24(fp)
 8003114:	10803ed0 	cmplti	r2,r2,251
 8003118:	1000021e 	bne	r2,zero,8003124 <run_level1+0x8a0>
                place_pos.x = SPAWN_CUTOFF;
 800311c:	00803e84 	movi	r2,250
 8003120:	e0bffa15 	stw	r2,-24(fp)

            if (is_clicked(&mouse, MOUSE_BUTTON_LEFT)) {
 8003124:	e0bfe804 	addi	r2,fp,-96
 8003128:	000b883a 	mov	r5,zero
 800312c:	1009883a 	mov	r4,r2
 8003130:	80043c00 	call	80043c0 <is_clicked>
 8003134:	10004126 	beq	r2,zero,800323c <run_level1+0x9b8>
                switch (placing_ship) {
 8003138:	e0baad17 	ldw	r2,-5452(fp)
 800313c:	10c00060 	cmpeqi	r3,r2,1
 8003140:	1800171e 	bne	r3,zero,80031a0 <run_level1+0x91c>
 8003144:	10c000a0 	cmpeqi	r3,r2,2
 8003148:	1800281e 	bne	r3,zero,80031ec <run_level1+0x968>
 800314c:	10003b1e 	bne	r2,zero,800323c <run_level1+0x9b8>
                    case 0:
                        if (mouse_over_object(&scene, &mouse, spawnship1))
 8003150:	e0ffe804 	addi	r3,fp,-96
 8003154:	e0babe04 	addi	r2,fp,-5384
 8003158:	e1bab517 	ldw	r6,-5420(fp)
 800315c:	180b883a 	mov	r5,r3
 8003160:	1009883a 	mov	r4,r2
 8003164:	80006b80 	call	80006b8 <mouse_over_object>
 8003168:	10000326 	beq	r2,zero,8003178 <run_level1+0x8f4>
                            placing_ship = 1;
 800316c:	00800044 	movi	r2,1
 8003170:	e0baad15 	stw	r2,-5452(fp)
                        else if (mouse_over_object(&scene, &mouse, spawnship2))
                            placing_ship = 2;
                        break;
 8003174:	00003006 	br	8003238 <run_level1+0x9b4>
            if (is_clicked(&mouse, MOUSE_BUTTON_LEFT)) {
                switch (placing_ship) {
                    case 0:
                        if (mouse_over_object(&scene, &mouse, spawnship1))
                            placing_ship = 1;
                        else if (mouse_over_object(&scene, &mouse, spawnship2))
 8003178:	e0ffe804 	addi	r3,fp,-96
 800317c:	e0babe04 	addi	r2,fp,-5384
 8003180:	e1bab617 	ldw	r6,-5416(fp)
 8003184:	180b883a 	mov	r5,r3
 8003188:	1009883a 	mov	r4,r2
 800318c:	80006b80 	call	80006b8 <mouse_over_object>
 8003190:	10002926 	beq	r2,zero,8003238 <run_level1+0x9b4>
                            placing_ship = 2;
 8003194:	00800084 	movi	r2,2
 8003198:	e0baad15 	stw	r2,-5452(fp)
                        break;
 800319c:	00002606 	br	8003238 <run_level1+0x9b4>
                    case 1:
                        spawn_ship(&scene, &player_fighter, PLAYER, place_pos);
 80031a0:	e0fabe04 	addi	r3,fp,-5384
 80031a4:	e0bffb17 	ldw	r2,-20(fp)
 80031a8:	d8800015 	stw	r2,0(sp)
 80031ac:	e1fffa17 	ldw	r7,-24(fp)
 80031b0:	000d883a 	mov	r6,zero
 80031b4:	014200b4 	movhi	r5,2050
 80031b8:	29533c04 	addi	r5,r5,19696
 80031bc:	1809883a 	mov	r4,r3
 80031c0:	80010c00 	call	80010c0 <spawn_ship>
                        spawnship1->pos = spawnship1_default;
 80031c4:	e0bab517 	ldw	r2,-5420(fp)
 80031c8:	e0ffe417 	ldw	r3,-112(fp)
 80031cc:	10c00115 	stw	r3,4(r2)
 80031d0:	e0ffe517 	ldw	r3,-108(fp)
 80031d4:	10c00215 	stw	r3,8(r2)
                        placing_ship = 0;
 80031d8:	e03aad15 	stw	zero,-5452(fp)
                        scene.shipcountf++;
 80031dc:	e0bac017 	ldw	r2,-5376(fp)
 80031e0:	10800044 	addi	r2,r2,1
 80031e4:	e0bac015 	stw	r2,-5376(fp)
                        break;
 80031e8:	00001406 	br	800323c <run_level1+0x9b8>
                    case 2:
                        spawn_ship(&scene, &player_cruiser, PLAYER, place_pos);
 80031ec:	e0fabe04 	addi	r3,fp,-5384
 80031f0:	e0bffb17 	ldw	r2,-20(fp)
 80031f4:	d8800015 	stw	r2,0(sp)
 80031f8:	e1fffa17 	ldw	r7,-24(fp)
 80031fc:	000d883a 	mov	r6,zero
 8003200:	014200b4 	movhi	r5,2050
 8003204:	29535004 	addi	r5,r5,19776
 8003208:	1809883a 	mov	r4,r3
 800320c:	80010c00 	call	80010c0 <spawn_ship>
                        spawnship2->pos = spawnship2_default;
 8003210:	e0bab617 	ldw	r2,-5416(fp)
 8003214:	e0ffe617 	ldw	r3,-104(fp)
 8003218:	10c00115 	stw	r3,4(r2)
 800321c:	e0ffe717 	ldw	r3,-100(fp)
 8003220:	10c00215 	stw	r3,8(r2)
                        placing_ship = 0;
 8003224:	e03aad15 	stw	zero,-5452(fp)
                        scene.shipcountc++;
 8003228:	e0babf17 	ldw	r2,-5380(fp)
 800322c:	10800044 	addi	r2,r2,1
 8003230:	e0babf15 	stw	r2,-5380(fp)
                        break;
 8003234:	00000106 	br	800323c <run_level1+0x9b8>
                    case 0:
                        if (mouse_over_object(&scene, &mouse, spawnship1))
                            placing_ship = 1;
                        else if (mouse_over_object(&scene, &mouse, spawnship2))
                            placing_ship = 2;
                        break;
 8003238:	0001883a 	nop
                        scene.shipcountc++;
                        break;
                }
            }

            position_t warn_pos = place_pos;
 800323c:	e0bffa17 	ldw	r2,-24(fp)
 8003240:	e0bffc15 	stw	r2,-16(fp)
 8003244:	e0bffb17 	ldw	r2,-20(fp)
 8003248:	e0bffd15 	stw	r2,-12(fp)
            warn_pos.x -= scene.scroll.pos.x;
 800324c:	e0fffc17 	ldw	r3,-16(fp)
 8003250:	e0baea17 	ldw	r2,-5208(fp)
 8003254:	1885c83a 	sub	r2,r3,r2
 8003258:	e0bffc15 	stw	r2,-16(fp)
            if (warn_pos.x < spawnwarning->sprite.width / 2)
 800325c:	e0fffc17 	ldw	r3,-16(fp)
 8003260:	e0bab717 	ldw	r2,-5412(fp)
 8003264:	10800417 	ldw	r2,16(r2)
 8003268:	1008d7fa 	srli	r4,r2,31
 800326c:	2085883a 	add	r2,r4,r2
 8003270:	1005d07a 	srai	r2,r2,1
 8003274:	1880060e 	bge	r3,r2,8003290 <run_level1+0xa0c>
                warn_pos.x = spawnwarning->sprite.width / 2;
 8003278:	e0bab717 	ldw	r2,-5412(fp)
 800327c:	10800417 	ldw	r2,16(r2)
 8003280:	1006d7fa 	srli	r3,r2,31
 8003284:	1885883a 	add	r2,r3,r2
 8003288:	1005d07a 	srai	r2,r2,1
 800328c:	e0bffc15 	stw	r2,-16(fp)

            if (placing_ship && warn_pos.x >= SPAWN_CUTOFF + scene.scroll.pos.x) {
 8003290:	e0baad17 	ldw	r2,-5452(fp)
 8003294:	10000f26 	beq	r2,zero,80032d4 <run_level1+0xa50>
 8003298:	e0fffc17 	ldw	r3,-16(fp)
 800329c:	e0baea17 	ldw	r2,-5208(fp)
 80032a0:	10803e84 	addi	r2,r2,250
 80032a4:	18800b16 	blt	r3,r2,80032d4 <run_level1+0xa50>
                spawnwarning->flags |= VISABLE;
 80032a8:	e0bab717 	ldw	r2,-5412(fp)
 80032ac:	10800017 	ldw	r2,0(r2)
 80032b0:	10c00094 	ori	r3,r2,2
 80032b4:	e0bab717 	ldw	r2,-5412(fp)
 80032b8:	10c00015 	stw	r3,0(r2)
                spawnwarning->pos   = warn_pos;
 80032bc:	e0bab717 	ldw	r2,-5412(fp)
 80032c0:	e0fffc17 	ldw	r3,-16(fp)
 80032c4:	10c00115 	stw	r3,4(r2)
 80032c8:	e0fffd17 	ldw	r3,-12(fp)
 80032cc:	10c00215 	stw	r3,8(r2)
 80032d0:	00000606 	br	80032ec <run_level1+0xa68>
            } else
                spawnwarning->flags &= ~VISABLE;
 80032d4:	e0bab717 	ldw	r2,-5412(fp)
 80032d8:	10c00017 	ldw	r3,0(r2)
 80032dc:	00bfff44 	movi	r2,-3
 80032e0:	1886703a 	and	r3,r3,r2
 80032e4:	e0bab717 	ldw	r2,-5412(fp)
 80032e8:	10c00015 	stw	r3,0(r2)

            switch (placing_ship) {
 80032ec:	e0baad17 	ldw	r2,-5452(fp)
 80032f0:	10c00060 	cmpeqi	r3,r2,1
 80032f4:	1800031e 	bne	r3,zero,8003304 <run_level1+0xa80>
 80032f8:	108000a0 	cmpeqi	r2,r2,2
 80032fc:	1000071e 	bne	r2,zero,800331c <run_level1+0xa98>
 8003300:	00000c06 	br	8003334 <run_level1+0xab0>
                case 1:
                    spawnship1->pos = mouse.pos;
 8003304:	e0bab517 	ldw	r2,-5420(fp)
 8003308:	e0ffe817 	ldw	r3,-96(fp)
 800330c:	10c00115 	stw	r3,4(r2)
 8003310:	e0ffe917 	ldw	r3,-92(fp)
 8003314:	10c00215 	stw	r3,8(r2)
                    break;
 8003318:	00000606 	br	8003334 <run_level1+0xab0>
                case 2:
                    spawnship2->pos = mouse.pos;
 800331c:	e0bab617 	ldw	r2,-5416(fp)
 8003320:	e0ffe817 	ldw	r3,-96(fp)
 8003324:	10c00115 	stw	r3,4(r2)
 8003328:	e0ffe917 	ldw	r3,-92(fp)
 800332c:	10c00215 	stw	r3,8(r2)
                    break;
 8003330:	0001883a 	nop
            }

            int r = rand() % 4;
 8003334:	800a9b80 	call	800a9b8 <rand>
 8003338:	1007883a 	mov	r3,r2
 800333c:	00a00034 	movhi	r2,32768
 8003340:	108000c4 	addi	r2,r2,3
 8003344:	1884703a 	and	r2,r3,r2
 8003348:	1000040e 	bge	r2,zero,800335c <run_level1+0xad8>
 800334c:	10bfffc4 	addi	r2,r2,-1
 8003350:	00ffff04 	movi	r3,-4
 8003354:	10c4b03a 	or	r2,r2,r3
 8003358:	10800044 	addi	r2,r2,1
 800335c:	e0bab915 	stw	r2,-5404(fp)
            int yr = ((rand() % 400));
 8003360:	800a9b80 	call	800a9b8 <rand>
 8003364:	01406404 	movi	r5,400
 8003368:	1009883a 	mov	r4,r2
 800336c:	80070300 	call	8007030 <__modsi3>
 8003370:	e0baba15 	stw	r2,-5400(fp)
            if ((scene.eshipcount <= 1 + scene.shipcountc + scene.shipcountf) || scene.enemyplanet.hp <= 150) {
 8003374:	e0bac117 	ldw	r2,-5372(fp)
 8003378:	e0fabf17 	ldw	r3,-5380(fp)
 800337c:	19000044 	addi	r4,r3,1
 8003380:	e0fac017 	ldw	r3,-5376(fp)
 8003384:	20c7883a 	add	r3,r4,r3
 8003388:	1880030e 	bge	r3,r2,8003398 <run_level1+0xb14>
 800338c:	e0bad717 	ldw	r2,-5284(fp)
 8003390:	108025c8 	cmpgei	r2,r2,151
 8003394:	1000421e 	bne	r2,zero,80034a0 <run_level1+0xc1c>
                position_t epos;
                epos.y = yr;
 8003398:	e0baba17 	ldw	r2,-5400(fp)
 800339c:	e0bfff15 	stw	r2,-4(fp)
                epos.x = 1200;
 80033a0:	00812c04 	movi	r2,1200
 80033a4:	e0bffe15 	stw	r2,-8(fp)

                switch(r)  {
 80033a8:	e0bab917 	ldw	r2,-5404(fp)
 80033ac:	10c00060 	cmpeqi	r3,r2,1
 80033b0:	1800161e 	bne	r3,zero,800340c <run_level1+0xb88>
 80033b4:	10c00088 	cmpgei	r3,r2,2
 80033b8:	1800021e 	bne	r3,zero,80033c4 <run_level1+0xb40>
 80033bc:	10000626 	beq	r2,zero,80033d8 <run_level1+0xb54>
 80033c0:	00003706 	br	80034a0 <run_level1+0xc1c>
 80033c4:	10c000a0 	cmpeqi	r3,r2,2
 80033c8:	1800341e 	bne	r3,zero,800349c <run_level1+0xc18>
 80033cc:	108000e0 	cmpeqi	r2,r2,3
 80033d0:	10001b1e 	bne	r2,zero,8003440 <run_level1+0xbbc>
 80033d4:	00003206 	br	80034a0 <run_level1+0xc1c>
                    case 0:
                        spawn_ship(&scene, &enemy_cruiser, ENEMY, epos);
 80033d8:	e0fabe04 	addi	r3,fp,-5384
 80033dc:	e0bfff17 	ldw	r2,-4(fp)
 80033e0:	d8800015 	stw	r2,0(sp)
 80033e4:	e1fffe17 	ldw	r7,-8(fp)
 80033e8:	01800044 	movi	r6,1
 80033ec:	014200b4 	movhi	r5,2050
 80033f0:	29537804 	addi	r5,r5,19936
 80033f4:	1809883a 	mov	r4,r3
 80033f8:	80010c00 	call	80010c0 <spawn_ship>
                        scene.eshipcount++;
 80033fc:	e0bac117 	ldw	r2,-5372(fp)
 8003400:	10800044 	addi	r2,r2,1
 8003404:	e0bac115 	stw	r2,-5372(fp)
                        break;
 8003408:	00002506 	br	80034a0 <run_level1+0xc1c>

                    case 1:
                        spawn_ship(&scene, &enemy_fighter, ENEMY, epos);
 800340c:	e0fabe04 	addi	r3,fp,-5384
 8003410:	e0bfff17 	ldw	r2,-4(fp)
 8003414:	d8800015 	stw	r2,0(sp)
 8003418:	e1fffe17 	ldw	r7,-8(fp)
 800341c:	01800044 	movi	r6,1
 8003420:	014200b4 	movhi	r5,2050
 8003424:	29536404 	addi	r5,r5,19856
 8003428:	1809883a 	mov	r4,r3
 800342c:	80010c00 	call	80010c0 <spawn_ship>
                        scene.eshipcount++;
 8003430:	e0bac117 	ldw	r2,-5372(fp)
 8003434:	10800044 	addi	r2,r2,1
 8003438:	e0bac115 	stw	r2,-5372(fp)
                        break;
 800343c:	00001806 	br	80034a0 <run_level1+0xc1c>

                    case 2:
                        break;

                    case 3:
                        spawn_ship(&scene, &enemy_fighter, ENEMY, epos);
 8003440:	e0fabe04 	addi	r3,fp,-5384
 8003444:	e0bfff17 	ldw	r2,-4(fp)
 8003448:	d8800015 	stw	r2,0(sp)
 800344c:	e1fffe17 	ldw	r7,-8(fp)
 8003450:	01800044 	movi	r6,1
 8003454:	014200b4 	movhi	r5,2050
 8003458:	29536404 	addi	r5,r5,19856
 800345c:	1809883a 	mov	r4,r3
 8003460:	80010c00 	call	80010c0 <spawn_ship>
                        spawn_ship(&scene, &enemy_cruiser, ENEMY, epos);
 8003464:	e0fabe04 	addi	r3,fp,-5384
 8003468:	e0bfff17 	ldw	r2,-4(fp)
 800346c:	d8800015 	stw	r2,0(sp)
 8003470:	e1fffe17 	ldw	r7,-8(fp)
 8003474:	01800044 	movi	r6,1
 8003478:	014200b4 	movhi	r5,2050
 800347c:	29537804 	addi	r5,r5,19936
 8003480:	1809883a 	mov	r4,r3
 8003484:	80010c00 	call	80010c0 <spawn_ship>
                        scene.eshipcount += 2;
 8003488:	e0bac117 	ldw	r2,-5372(fp)
 800348c:	10800084 	addi	r2,r2,2
 8003490:	e0bac115 	stw	r2,-5372(fp)
                        break;
 8003494:	0001883a 	nop
 8003498:	00000106 	br	80034a0 <run_level1+0xc1c>
                        spawn_ship(&scene, &enemy_fighter, ENEMY, epos);
                        scene.eshipcount++;
                        break;

                    case 2:
                        break;
 800349c:	0001883a 	nop
                        scene.eshipcount += 2;
                        break;
                }
            }

            if (scene.enemyplanet.hp <= 0) {
 80034a0:	e0bad717 	ldw	r2,-5284(fp)
 80034a4:	00800e16 	blt	zero,r2,80034e0 <run_level1+0xc5c>
                if (!start_fading) {
 80034a8:	e0baac17 	ldw	r2,-5456(fp)
 80034ac:	1000061e 	bne	r2,zero,80034c8 <run_level1+0xc44>
                    start_fade(&fadew, 1);
 80034b0:	e0bff604 	addi	r2,fp,-40
 80034b4:	014fe034 	movhi	r5,16256
 80034b8:	1009883a 	mov	r4,r2
 80034bc:	80004d40 	call	80004d4 <start_fade>
                    start_fading = 1;
 80034c0:	00800044 	movi	r2,1
 80034c4:	e0baac15 	stw	r2,-5456(fp)
                }
                running =  !show_fade(&fadew);
 80034c8:	e0bff604 	addi	r2,fp,-40
 80034cc:	1009883a 	mov	r4,r2
 80034d0:	80005a40 	call	80005a4 <show_fade>
 80034d4:	1005003a 	cmpeq	r2,r2,zero
 80034d8:	10803fcc 	andi	r2,r2,255
 80034dc:	e0baae15 	stw	r2,-5448(fp)
            }


            if (scene.playerplanet.hp <= 0) {
 80034e0:	e0bac317 	ldw	r2,-5364(fp)
 80034e4:	00801016 	blt	zero,r2,8003528 <run_level1+0xca4>
                if (!start_fading) {
 80034e8:	e0baac17 	ldw	r2,-5456(fp)
 80034ec:	1000081e 	bne	r2,zero,8003510 <run_level1+0xc8c>
                    start_fade(&fader, 1);
 80034f0:	e0bff204 	addi	r2,fp,-56
 80034f4:	014fe034 	movhi	r5,16256
 80034f8:	1009883a 	mov	r4,r2
 80034fc:	80004d40 	call	80004d4 <start_fade>
                    start_fading = 1;
 8003500:	00800044 	movi	r2,1
 8003504:	e0baac15 	stw	r2,-5456(fp)
                    win= 1;
 8003508:	00800044 	movi	r2,1
 800350c:	e0baab15 	stw	r2,-5460(fp)
                }
                running = !show_fade(&fader);
 8003510:	e0bff204 	addi	r2,fp,-56
 8003514:	1009883a 	mov	r4,r2
 8003518:	80005a40 	call	80005a4 <show_fade>
 800351c:	1005003a 	cmpeq	r2,r2,zero
 8003520:	10803fcc 	andi	r2,r2,255
 8003524:	e0baae15 	stw	r2,-5448(fp)
            }



            update_game(&scene);
 8003528:	e0babe04 	addi	r2,fp,-5384
 800352c:	1009883a 	mov	r4,r2
 8003530:	80025640 	call	8002564 <update_game>

            while (gdu_is_running());
 8003534:	0001883a 	nop
 8003538:	80026400 	call	8002640 <gdu_is_running>
 800353c:	103ffe1e 	bne	r2,zero,8003538 <__alt_data_end+0xfc003538>
            push_scene(&scene);
 8003540:	e0babe04 	addi	r2,fp,-5384
 8003544:	1009883a 	mov	r4,r2
 8003548:	8000cc00 	call	8000cc0 <push_scene>
            start_render();
 800354c:	80003b00 	call	80003b0 <start_render>
    int start_fading = 0;

    int placing_ship = 0;
    
    int running = 1;
    while (running) {
 8003550:	e0baae17 	ldw	r2,-5448(fp)
 8003554:	103ea51e 	bne	r2,zero,8002fec <__alt_data_end+0xfc002fec>

        }
    }


    if (win)
 8003558:	e0baab17 	ldw	r2,-5460(fp)
 800355c:	10000226 	beq	r2,zero,8003568 <run_level1+0xce4>
    return 0;
 8003560:	0005883a 	mov	r2,zero
 8003564:	00000106 	br	800356c <run_level1+0xce8>
    else
    return 1;
 8003568:	00800044 	movi	r2,1
}
 800356c:	e037883a 	mov	sp,fp
 8003570:	dfc00117 	ldw	ra,4(sp)
 8003574:	df000017 	ldw	fp,0(sp)
 8003578:	dec00204 	addi	sp,sp,8
 800357c:	f800283a 	ret

08003580 <run_lose>:
#include "../game.h"
#include "../display.h"
#include "../vga.h"
#include "../sprites/cursor.h"

void run_lose()	{
 8003580:	defad204 	addi	sp,sp,-5304
 8003584:	dfc52d15 	stw	ra,5300(sp)
 8003588:	df052c15 	stw	fp,5296(sp)
 800358c:	df052c04 	addi	fp,sp,5296

    scene_t scene;
    clear_scene(&scene);
 8003590:	e0bad604 	addi	r2,fp,-5288
 8003594:	1009883a 	mov	r4,r2
 8003598:	8000ea00 	call	8000ea0 <clear_scene>


    game_object_t* background               = allocate_object(&scene, BACKGROUND,   USED | VISABLE);
 800359c:	e0bad604 	addi	r2,fp,-5288
 80035a0:	018000c4 	movi	r6,3
 80035a4:	000b883a 	mov	r5,zero
 80035a8:	1009883a 	mov	r4,r2
 80035ac:	8000ac80 	call	8000ac8 <allocate_object>
 80035b0:	e0bad415 	stw	r2,-5296(fp)
    background->sprite              = lightspeed_background_sprite; 	//to be added
 80035b4:	e0fad417 	ldw	r3,-5296(fp)
 80035b8:	008205f4 	movhi	r2,2071
 80035bc:	10987e04 	addi	r2,r2,25080
 80035c0:	18800315 	stw	r2,12(r3)
 80035c4:	e0bad417 	ldw	r2,-5296(fp)
 80035c8:	00c19004 	movi	r3,1600
 80035cc:	10c00415 	stw	r3,16(r2)
 80035d0:	e0bad417 	ldw	r2,-5296(fp)
 80035d4:	00c07804 	movi	r3,480
 80035d8:	10c00515 	stw	r3,20(r2)
 80035dc:	e0bad417 	ldw	r2,-5296(fp)
 80035e0:	10000615 	stw	zero,24(r2)
 80035e4:	e0bad417 	ldw	r2,-5296(fp)
 80035e8:	10000715 	stw	zero,28(r2)
 80035ec:	e0bad417 	ldw	r2,-5296(fp)
 80035f0:	10000815 	stw	zero,32(r2)
 80035f4:	e0bad417 	ldw	r2,-5296(fp)
 80035f8:	10000915 	stw	zero,36(r2)
 80035fc:	e0bad417 	ldw	r2,-5296(fp)
 8003600:	00c19004 	movi	r3,1600
 8003604:	10c00a15 	stw	r3,40(r2)
 8003608:	e0bad417 	ldw	r2,-5296(fp)
 800360c:	00c07804 	movi	r3,480
 8003610:	10c00b15 	stw	r3,44(r2)

    scene.max.x = SCREEN_WIDTH;
 8003614:	0080a004 	movi	r2,640
 8003618:	e0bb0615 	stw	r2,-5096(fp)
    scene.max.y = SCREEN_HEIGHT;
 800361c:	00807804 	movi	r2,480
 8003620:	e0bb0715 	stw	r2,-5092(fp)

    fade_t fader = create_fade(0xFFFF, FADE_FROM);
 8003624:	e0bffc04 	addi	r2,fp,-16
 8003628:	01800044 	movi	r6,1
 800362c:	017fffd4 	movui	r5,65535
 8003630:	1009883a 	mov	r4,r2
 8003634:	80004680 	call	8000468 <create_fade>
        start_fade(&fader, 3);
 8003638:	e0bffc04 	addi	r2,fp,-16
 800363c:	01501034 	movhi	r5,16448
 8003640:	1009883a 	mov	r4,r2
 8003644:	80004d40 	call	80004d4 <start_fade>

        int running = 1;
 8003648:	00800044 	movi	r2,1
 800364c:	e0bad515 	stw	r2,-5292(fp)
    while(running){
 8003650:	00000e06 	br	800368c <run_lose+0x10c>

    if (!is_fade_done(&fader))
 8003654:	e0bffc04 	addi	r2,fp,-16
 8003658:	1009883a 	mov	r4,r2
 800365c:	80005340 	call	8000534 <is_fade_done>
 8003660:	1000031e 	bne	r2,zero,8003670 <run_lose+0xf0>
        show_fade(&fader);
 8003664:	e0bffc04 	addi	r2,fp,-16
 8003668:	1009883a 	mov	r4,r2
 800366c:	80005a40 	call	80005a4 <show_fade>

    while (gdu_is_running());
 8003670:	0001883a 	nop
 8003674:	80026400 	call	8002640 <gdu_is_running>
 8003678:	103ffe1e 	bne	r2,zero,8003674 <__alt_data_end+0xfc003674>
                push_scene(&scene);
 800367c:	e0bad604 	addi	r2,fp,-5288
 8003680:	1009883a 	mov	r4,r2
 8003684:	8000cc00 	call	8000cc0 <push_scene>
                start_render();
 8003688:	80003b00 	call	80003b0 <start_render>

    fade_t fader = create_fade(0xFFFF, FADE_FROM);
        start_fade(&fader, 3);

        int running = 1;
    while(running){
 800368c:	e0bad517 	ldw	r2,-5292(fp)
 8003690:	103ff01e 	bne	r2,zero,8003654 <__alt_data_end+0xfc003654>
    while (gdu_is_running());
                push_scene(&scene);
                start_render();

    }
}
 8003694:	0001883a 	nop
 8003698:	e037883a 	mov	sp,fp
 800369c:	dfc00117 	ldw	ra,4(sp)
 80036a0:	df000017 	ldw	fp,0(sp)
 80036a4:	dec00204 	addi	sp,sp,8
 80036a8:	f800283a 	ret

080036ac <run_title_screen>:
#include "../sprites/WAR_STARS_II.h"
#include "../sprites/start_button_unpressed.h"
#include "../sprites/start_button_pressed.h"
#include "../sprites/cursor.h"

void run_title_screen() {
 80036ac:	defabf04 	addi	sp,sp,-5380
 80036b0:	dfc54015 	stw	ra,5376(sp)
 80036b4:	df053f15 	stw	fp,5372(sp)
 80036b8:	df053f04 	addi	fp,sp,5372
    rate_t frame_rate = create_rate(20);
 80036bc:	e0bacd04 	addi	r2,fp,-5324
 80036c0:	01506834 	movhi	r5,16800
 80036c4:	1009883a 	mov	r4,r2
 80036c8:	80045540 	call	8004554 <create_rate>
    scene_t scene;
    clear_scene(&scene);
 80036cc:	e0bad004 	addi	r2,fp,-5312
 80036d0:	1009883a 	mov	r4,r2
 80036d4:	8000ea00 	call	8000ea0 <clear_scene>

    scene.max.x = SCREEN_WIDTH;
 80036d8:	0080a004 	movi	r2,640
 80036dc:	e0bb0015 	stw	r2,-5120(fp)
    scene.max.y = SCREEN_HEIGHT;
 80036e0:	00807804 	movi	r2,480
 80036e4:	e0bb0115 	stw	r2,-5116(fp)
    
    game_object_t* background               = allocate_object(&scene, BACKGROUND,   USED | VISABLE);
 80036e8:	e0bad004 	addi	r2,fp,-5312
 80036ec:	018000c4 	movi	r6,3
 80036f0:	000b883a 	mov	r5,zero
 80036f4:	1009883a 	mov	r4,r2
 80036f8:	8000ac80 	call	8000ac8 <allocate_object>
 80036fc:	e0bac615 	stw	r2,-5352(fp)
    game_object_t* ship                     = allocate_object(&scene, EFFECTS,      USED | VISABLE | CENTERED);
 8003700:	e0bad004 	addi	r2,fp,-5312
 8003704:	018002c4 	movi	r6,11
 8003708:	01400084 	movi	r5,2
 800370c:	1009883a 	mov	r4,r2
 8003710:	8000ac80 	call	8000ac8 <allocate_object>
 8003714:	e0bac715 	stw	r2,-5348(fp)
    game_object_t* title_text               = allocate_object(&scene, EFFECTS,      USED | VISABLE);
 8003718:	e0bad004 	addi	r2,fp,-5312
 800371c:	018000c4 	movi	r6,3
 8003720:	01400084 	movi	r5,2
 8003724:	1009883a 	mov	r4,r2
 8003728:	8000ac80 	call	8000ac8 <allocate_object>
 800372c:	e0bac815 	stw	r2,-5344(fp)
    game_object_t* start_button_unpressed   = allocate_object(&scene, SHIPS,        USED | VISABLE);
 8003730:	e0bad004 	addi	r2,fp,-5312
 8003734:	018000c4 	movi	r6,3
 8003738:	01400044 	movi	r5,1
 800373c:	1009883a 	mov	r4,r2
 8003740:	8000ac80 	call	8000ac8 <allocate_object>
 8003744:	e0bac915 	stw	r2,-5340(fp)
    game_object_t* start_button_pressed     = allocate_object(&scene, SHIPS,        USED);
 8003748:	e0bad004 	addi	r2,fp,-5312
 800374c:	01800044 	movi	r6,1
 8003750:	01400044 	movi	r5,1
 8003754:	1009883a 	mov	r4,r2
 8003758:	8000ac80 	call	8000ac8 <allocate_object>
 800375c:	e0baca15 	stw	r2,-5336(fp)
    game_object_t* cursor                   = allocate_object(&scene, CURSOR,       USED | VISABLE);
 8003760:	e0bad004 	addi	r2,fp,-5312
 8003764:	018000c4 	movi	r6,3
 8003768:	014000c4 	movi	r5,3
 800376c:	1009883a 	mov	r4,r2
 8003770:	8000ac80 	call	8000ac8 <allocate_object>
 8003774:	e0bacb15 	stw	r2,-5332(fp)
    
    background->sprite              = lightspeed_background_sprite;
 8003778:	e0fac617 	ldw	r3,-5352(fp)
 800377c:	00820bf4 	movhi	r2,2095
 8003780:	10985e04 	addi	r2,r2,24952
 8003784:	18800315 	stw	r2,12(r3)
 8003788:	e0bac617 	ldw	r2,-5352(fp)
 800378c:	00c19004 	movi	r3,1600
 8003790:	10c00415 	stw	r3,16(r2)
 8003794:	e0bac617 	ldw	r2,-5352(fp)
 8003798:	00c07804 	movi	r3,480
 800379c:	10c00515 	stw	r3,20(r2)
 80037a0:	e0bac617 	ldw	r2,-5352(fp)
 80037a4:	10000615 	stw	zero,24(r2)
 80037a8:	e0bac617 	ldw	r2,-5352(fp)
 80037ac:	10000715 	stw	zero,28(r2)
 80037b0:	e0bac617 	ldw	r2,-5352(fp)
 80037b4:	10000815 	stw	zero,32(r2)
 80037b8:	e0bac617 	ldw	r2,-5352(fp)
 80037bc:	10000915 	stw	zero,36(r2)
 80037c0:	e0bac617 	ldw	r2,-5352(fp)
 80037c4:	00c19004 	movi	r3,1600
 80037c8:	10c00a15 	stw	r3,40(r2)
 80037cc:	e0bac617 	ldw	r2,-5352(fp)
 80037d0:	00c07804 	movi	r3,480
 80037d4:	10c00b15 	stw	r3,44(r2)
    ship->sprite                    = title_screen_ship_sprite;
 80037d8:	e0fac717 	ldw	r3,-5348(fp)
 80037dc:	008211f4 	movhi	r2,2119
 80037e0:	10b46704 	addi	r2,r2,-11876
 80037e4:	18800315 	stw	r2,12(r3)
 80037e8:	e0bac717 	ldw	r2,-5348(fp)
 80037ec:	00c03204 	movi	r3,200
 80037f0:	10c00415 	stw	r3,16(r2)
 80037f4:	e0bac717 	ldw	r2,-5348(fp)
 80037f8:	00c01cc4 	movi	r3,115
 80037fc:	10c00515 	stw	r3,20(r2)
 8003800:	e0bac717 	ldw	r2,-5348(fp)
 8003804:	10000615 	stw	zero,24(r2)
 8003808:	e0bac717 	ldw	r2,-5348(fp)
 800380c:	10000715 	stw	zero,28(r2)
 8003810:	e0bac717 	ldw	r2,-5348(fp)
 8003814:	10000815 	stw	zero,32(r2)
 8003818:	e0bac717 	ldw	r2,-5348(fp)
 800381c:	10000915 	stw	zero,36(r2)
 8003820:	e0bac717 	ldw	r2,-5348(fp)
 8003824:	00c03204 	movi	r3,200
 8003828:	10c00a15 	stw	r3,40(r2)
 800382c:	e0bac717 	ldw	r2,-5348(fp)
 8003830:	00c01cc4 	movi	r3,115
 8003834:	10c00b15 	stw	r3,44(r2)
    title_text->sprite              = WAR_STARS_II_sprite;
 8003838:	e0fac817 	ldw	r3,-5344(fp)
 800383c:	00821234 	movhi	r2,2120
 8003840:	10a15c04 	addi	r2,r2,-31376
 8003844:	18800315 	stw	r2,12(r3)
 8003848:	e0bac817 	ldw	r2,-5344(fp)
 800384c:	00c08584 	movi	r3,534
 8003850:	10c00415 	stw	r3,16(r2)
 8003854:	e0bac817 	ldw	r2,-5344(fp)
 8003858:	00c00d04 	movi	r3,52
 800385c:	10c00515 	stw	r3,20(r2)
 8003860:	e0bac817 	ldw	r2,-5344(fp)
 8003864:	10000615 	stw	zero,24(r2)
 8003868:	e0bac817 	ldw	r2,-5344(fp)
 800386c:	10000715 	stw	zero,28(r2)
 8003870:	e0bac817 	ldw	r2,-5344(fp)
 8003874:	10000815 	stw	zero,32(r2)
 8003878:	e0bac817 	ldw	r2,-5344(fp)
 800387c:	10000915 	stw	zero,36(r2)
 8003880:	e0bac817 	ldw	r2,-5344(fp)
 8003884:	00c08584 	movi	r3,534
 8003888:	10c00a15 	stw	r3,40(r2)
 800388c:	e0bac817 	ldw	r2,-5344(fp)
 8003890:	00c00d04 	movi	r3,52
 8003894:	10c00b15 	stw	r3,44(r2)
    start_button_unpressed->sprite  = start_button_unpressed_sprite;
 8003898:	e0fac917 	ldw	r3,-5340(fp)
 800389c:	00821234 	movhi	r2,2120
 80038a0:	1097a104 	addi	r2,r2,24196
 80038a4:	18800315 	stw	r2,12(r3)
 80038a8:	e0bac917 	ldw	r2,-5340(fp)
 80038ac:	00c03204 	movi	r3,200
 80038b0:	10c00415 	stw	r3,16(r2)
 80038b4:	e0bac917 	ldw	r2,-5340(fp)
 80038b8:	00c018c4 	movi	r3,99
 80038bc:	10c00515 	stw	r3,20(r2)
 80038c0:	e0bac917 	ldw	r2,-5340(fp)
 80038c4:	10000615 	stw	zero,24(r2)
 80038c8:	e0bac917 	ldw	r2,-5340(fp)
 80038cc:	10000715 	stw	zero,28(r2)
 80038d0:	e0bac917 	ldw	r2,-5340(fp)
 80038d4:	10000815 	stw	zero,32(r2)
 80038d8:	e0bac917 	ldw	r2,-5340(fp)
 80038dc:	10000915 	stw	zero,36(r2)
 80038e0:	e0bac917 	ldw	r2,-5340(fp)
 80038e4:	00c03204 	movi	r3,200
 80038e8:	10c00a15 	stw	r3,40(r2)
 80038ec:	e0bac917 	ldw	r2,-5340(fp)
 80038f0:	00c018c4 	movi	r3,99
 80038f4:	10c00b15 	stw	r3,44(r2)
    start_button_pressed ->sprite   = start_button_pressed_sprite;
 80038f8:	e0faca17 	ldw	r3,-5336(fp)
 80038fc:	00821274 	movhi	r2,2121
 8003900:	10be5604 	addi	r2,r2,-1704
 8003904:	18800315 	stw	r2,12(r3)
 8003908:	e0baca17 	ldw	r2,-5336(fp)
 800390c:	00c03204 	movi	r3,200
 8003910:	10c00415 	stw	r3,16(r2)
 8003914:	e0baca17 	ldw	r2,-5336(fp)
 8003918:	00c018c4 	movi	r3,99
 800391c:	10c00515 	stw	r3,20(r2)
 8003920:	e0baca17 	ldw	r2,-5336(fp)
 8003924:	10000615 	stw	zero,24(r2)
 8003928:	e0baca17 	ldw	r2,-5336(fp)
 800392c:	10000715 	stw	zero,28(r2)
 8003930:	e0baca17 	ldw	r2,-5336(fp)
 8003934:	10000815 	stw	zero,32(r2)
 8003938:	e0baca17 	ldw	r2,-5336(fp)
 800393c:	10000915 	stw	zero,36(r2)
 8003940:	e0baca17 	ldw	r2,-5336(fp)
 8003944:	00c03204 	movi	r3,200
 8003948:	10c00a15 	stw	r3,40(r2)
 800394c:	e0baca17 	ldw	r2,-5336(fp)
 8003950:	00c018c4 	movi	r3,99
 8003954:	10c00b15 	stw	r3,44(r2)
    cursor->sprite                  = cursor_sprite;
 8003958:	e0facb17 	ldw	r3,-5332(fp)
 800395c:	008212b4 	movhi	r2,2122
 8003960:	10a50b04 	addi	r2,r2,-27604
 8003964:	18800315 	stw	r2,12(r3)
 8003968:	e0bacb17 	ldw	r2,-5332(fp)
 800396c:	00c00584 	movi	r3,22
 8003970:	10c00415 	stw	r3,16(r2)
 8003974:	e0bacb17 	ldw	r2,-5332(fp)
 8003978:	00c00604 	movi	r3,24
 800397c:	10c00515 	stw	r3,20(r2)
 8003980:	e0bacb17 	ldw	r2,-5332(fp)
 8003984:	10000615 	stw	zero,24(r2)
 8003988:	e0bacb17 	ldw	r2,-5332(fp)
 800398c:	10000715 	stw	zero,28(r2)
 8003990:	e0bacb17 	ldw	r2,-5332(fp)
 8003994:	10000815 	stw	zero,32(r2)
 8003998:	e0bacb17 	ldw	r2,-5332(fp)
 800399c:	10000915 	stw	zero,36(r2)
 80039a0:	e0bacb17 	ldw	r2,-5332(fp)
 80039a4:	00c00584 	movi	r3,22
 80039a8:	10c00a15 	stw	r3,40(r2)
 80039ac:	e0bacb17 	ldw	r2,-5332(fp)
 80039b0:	00c00604 	movi	r3,24
 80039b4:	10c00b15 	stw	r3,44(r2)

    ship->pos.x = 100;
 80039b8:	e0bac717 	ldw	r2,-5348(fp)
 80039bc:	00c01904 	movi	r3,100
 80039c0:	10c00115 	stw	r3,4(r2)
    ship->pos.y = scene.max.y / 2;
 80039c4:	e0bb0117 	ldw	r2,-5116(fp)
 80039c8:	1006d7fa 	srli	r3,r2,31
 80039cc:	1885883a 	add	r2,r3,r2
 80039d0:	1005d07a 	srai	r2,r2,1
 80039d4:	1007883a 	mov	r3,r2
 80039d8:	e0bac717 	ldw	r2,-5348(fp)
 80039dc:	10c00215 	stw	r3,8(r2)

    title_text->pos.x = (scene.max.x - title_text->sprite.width) / 2;
 80039e0:	e0fb0017 	ldw	r3,-5120(fp)
 80039e4:	e0bac817 	ldw	r2,-5344(fp)
 80039e8:	10800417 	ldw	r2,16(r2)
 80039ec:	1885c83a 	sub	r2,r3,r2
 80039f0:	1006d7fa 	srli	r3,r2,31
 80039f4:	1885883a 	add	r2,r3,r2
 80039f8:	1005d07a 	srai	r2,r2,1
 80039fc:	1007883a 	mov	r3,r2
 8003a00:	e0bac817 	ldw	r2,-5344(fp)
 8003a04:	10c00115 	stw	r3,4(r2)
    title_text->pos.y = 100;
 8003a08:	e0bac817 	ldw	r2,-5344(fp)
 8003a0c:	00c01904 	movi	r3,100
 8003a10:	10c00215 	stw	r3,8(r2)

    start_button_unpressed->pos.x = 3 * scene.max.x / 4 - start_button_unpressed->sprite.width / 2;
 8003a14:	e0fb0017 	ldw	r3,-5120(fp)
 8003a18:	1805883a 	mov	r2,r3
 8003a1c:	1085883a 	add	r2,r2,r2
 8003a20:	10c5883a 	add	r2,r2,r3
 8003a24:	1000010e 	bge	r2,zero,8003a2c <run_title_screen+0x380>
 8003a28:	108000c4 	addi	r2,r2,3
 8003a2c:	1005d0ba 	srai	r2,r2,2
 8003a30:	1009883a 	mov	r4,r2
 8003a34:	e0bac917 	ldw	r2,-5340(fp)
 8003a38:	10800417 	ldw	r2,16(r2)
 8003a3c:	1006d7fa 	srli	r3,r2,31
 8003a40:	1885883a 	add	r2,r3,r2
 8003a44:	1005d07a 	srai	r2,r2,1
 8003a48:	2087c83a 	sub	r3,r4,r2
 8003a4c:	e0bac917 	ldw	r2,-5340(fp)
 8003a50:	10c00115 	stw	r3,4(r2)
    start_button_unpressed->pos.y = scene.max.y - start_button_unpressed->sprite.height - 50;
 8003a54:	e0fb0117 	ldw	r3,-5116(fp)
 8003a58:	e0bac917 	ldw	r2,-5340(fp)
 8003a5c:	10800517 	ldw	r2,20(r2)
 8003a60:	1885c83a 	sub	r2,r3,r2
 8003a64:	10fff384 	addi	r3,r2,-50
 8003a68:	e0bac917 	ldw	r2,-5340(fp)
 8003a6c:	10c00215 	stw	r3,8(r2)

    start_button_pressed->pos = start_button_unpressed->pos;
 8003a70:	e0baca17 	ldw	r2,-5336(fp)
 8003a74:	e0fac917 	ldw	r3,-5340(fp)
 8003a78:	19000117 	ldw	r4,4(r3)
 8003a7c:	11000115 	stw	r4,4(r2)
 8003a80:	18c00217 	ldw	r3,8(r3)
 8003a84:	10c00215 	stw	r3,8(r2)

    float dx = 0;
 8003a88:	e03ac115 	stw	zero,-5372(fp)
    float x = ship->pos.x;
 8003a8c:	e0bac717 	ldw	r2,-5348(fp)
 8003a90:	10800117 	ldw	r2,4(r2)
 8003a94:	1009883a 	mov	r4,r2
 8003a98:	80085980 	call	8008598 <__floatsisf>
 8003a9c:	1007883a 	mov	r3,r2
 8003aa0:	e0fac215 	stw	r3,-5368(fp)

    int start_fading = 0;
 8003aa4:	e03ac315 	stw	zero,-5364(fp)
    int fading = 0;
 8003aa8:	e03acc15 	stw	zero,-5328(fp)
    int exiting = 0;
 8003aac:	e03ac415 	stw	zero,-5360(fp)

    fade_t fade = create_fade(0x0000, FADE_TO);
 8003ab0:	e0bff604 	addi	r2,fp,-40
 8003ab4:	000d883a 	mov	r6,zero
 8003ab8:	000b883a 	mov	r5,zero
 8003abc:	1009883a 	mov	r4,r2
 8003ac0:	80004680 	call	8000468 <create_fade>

    mouse_t mouse = new_mouse(scene.max.x / 2, scene.max.y / 2);
 8003ac4:	e0bb0017 	ldw	r2,-5120(fp)
 8003ac8:	1006d7fa 	srli	r3,r2,31
 8003acc:	1885883a 	add	r2,r3,r2
 8003ad0:	1005d07a 	srai	r2,r2,1
 8003ad4:	1009883a 	mov	r4,r2
 8003ad8:	e0bb0117 	ldw	r2,-5116(fp)
 8003adc:	1006d7fa 	srli	r3,r2,31
 8003ae0:	1885883a 	add	r2,r3,r2
 8003ae4:	1005d07a 	srai	r2,r2,1
 8003ae8:	1007883a 	mov	r3,r2
 8003aec:	e0bffa04 	addi	r2,fp,-24
 8003af0:	180d883a 	mov	r6,r3
 8003af4:	200b883a 	mov	r5,r4
 8003af8:	1009883a 	mov	r4,r2
 8003afc:	80041280 	call	8004128 <new_mouse>

    int running = 1;
 8003b00:	00800044 	movi	r2,1
 8003b04:	e0bac515 	stw	r2,-5356(fp)
    while (running) {
 8003b08:	00007206 	br	8003cd4 <run_title_screen+0x628>
        poll_mouse(&mouse, 0, 1);
 8003b0c:	e0bffa04 	addi	r2,fp,-24
 8003b10:	01800044 	movi	r6,1
 8003b14:	000b883a 	mov	r5,zero
 8003b18:	1009883a 	mov	r4,r2
 8003b1c:	80041b00 	call	80041b0 <poll_mouse>

        if (is_ready(&frame_rate)) {
 8003b20:	e0bacd04 	addi	r2,fp,-5324
 8003b24:	1009883a 	mov	r4,r2
 8003b28:	80046100 	call	8004610 <is_ready>
 8003b2c:	10006926 	beq	r2,zero,8003cd4 <run_title_screen+0x628>
            handle_mouse(&mouse, &scene, 0, 0); 
 8003b30:	e0fad004 	addi	r3,fp,-5312
 8003b34:	e0bffa04 	addi	r2,fp,-24
 8003b38:	000f883a 	mov	r7,zero
 8003b3c:	000d883a 	mov	r6,zero
 8003b40:	180b883a 	mov	r5,r3
 8003b44:	1009883a 	mov	r4,r2
 8003b48:	80008dc0 	call	80008dc <handle_mouse>
            cursor->pos = mouse.pos;
 8003b4c:	e0bacb17 	ldw	r2,-5332(fp)
 8003b50:	e0fffa17 	ldw	r3,-24(fp)
 8003b54:	10c00115 	stw	r3,4(r2)
 8003b58:	e0fffb17 	ldw	r3,-20(fp)
 8003b5c:	10c00215 	stw	r3,8(r2)

            background->sprite.start_x += 2;
 8003b60:	e0bac617 	ldw	r2,-5352(fp)
 8003b64:	10800817 	ldw	r2,32(r2)
 8003b68:	10c00084 	addi	r3,r2,2
 8003b6c:	e0bac617 	ldw	r2,-5352(fp)
 8003b70:	10c00815 	stw	r3,32(r2)
            if (background->sprite.start_x >= background->sprite.width - SCREEN_WIDTH)
 8003b74:	e0bac617 	ldw	r2,-5352(fp)
 8003b78:	10c00817 	ldw	r3,32(r2)
 8003b7c:	e0bac617 	ldw	r2,-5352(fp)
 8003b80:	10800417 	ldw	r2,16(r2)
 8003b84:	10bf6004 	addi	r2,r2,-640
 8003b88:	18800216 	blt	r3,r2,8003b94 <run_title_screen+0x4e8>
                background->sprite.start_x = 0;
 8003b8c:	e0bac617 	ldw	r2,-5352(fp)
 8003b90:	10000815 	stw	zero,32(r2)
            background->sprite.end_x = background->sprite.start_x + SCREEN_WIDTH;
 8003b94:	e0bac617 	ldw	r2,-5352(fp)
 8003b98:	10800817 	ldw	r2,32(r2)
 8003b9c:	10c0a004 	addi	r3,r2,640
 8003ba0:	e0bac617 	ldw	r2,-5352(fp)
 8003ba4:	10c00a15 	stw	r3,40(r2)

            if (is_clicked(&mouse, MOUSE_BUTTON_LEFT)) {
 8003ba8:	e0bffa04 	addi	r2,fp,-24
 8003bac:	000b883a 	mov	r5,zero
 8003bb0:	1009883a 	mov	r4,r2
 8003bb4:	80043c00 	call	80043c0 <is_clicked>
 8003bb8:	10001426 	beq	r2,zero,8003c0c <run_title_screen+0x560>
                if (mouse_over_object(&scene, &mouse, start_button_unpressed)) {
 8003bbc:	e0fffa04 	addi	r3,fp,-24
 8003bc0:	e0bad004 	addi	r2,fp,-5312
 8003bc4:	e1bac917 	ldw	r6,-5340(fp)
 8003bc8:	180b883a 	mov	r5,r3
 8003bcc:	1009883a 	mov	r4,r2
 8003bd0:	80006b80 	call	80006b8 <mouse_over_object>
 8003bd4:	10000d26 	beq	r2,zero,8003c0c <run_title_screen+0x560>
                    start_button_unpressed->flags &= ~VISABLE;
 8003bd8:	e0bac917 	ldw	r2,-5340(fp)
 8003bdc:	10c00017 	ldw	r3,0(r2)
 8003be0:	00bfff44 	movi	r2,-3
 8003be4:	1886703a 	and	r3,r3,r2
 8003be8:	e0bac917 	ldw	r2,-5340(fp)
 8003bec:	10c00015 	stw	r3,0(r2)
                    start_button_pressed ->flags |= VISABLE;
 8003bf0:	e0baca17 	ldw	r2,-5336(fp)
 8003bf4:	10800017 	ldw	r2,0(r2)
 8003bf8:	10c00094 	ori	r3,r2,2
 8003bfc:	e0baca17 	ldw	r2,-5336(fp)
 8003c00:	10c00015 	stw	r3,0(r2)
                    exiting = 1;
 8003c04:	00800044 	movi	r2,1
 8003c08:	e0bac415 	stw	r2,-5360(fp)
                }
            }

            if (exiting) {
 8003c0c:	e0bac417 	ldw	r2,-5360(fp)
 8003c10:	10001026 	beq	r2,zero,8003c54 <run_title_screen+0x5a8>
                dx += 0.35f;
 8003c14:	014facf4 	movhi	r5,16051
 8003c18:	294cccc4 	addi	r5,r5,13107
 8003c1c:	e13ac117 	ldw	r4,-5372(fp)
 8003c20:	80071880 	call	8007188 <__addsf3>
 8003c24:	1007883a 	mov	r3,r2
 8003c28:	e0fac115 	stw	r3,-5372(fp)
                x += dx;
 8003c2c:	e17ac117 	ldw	r5,-5372(fp)
 8003c30:	e13ac217 	ldw	r4,-5368(fp)
 8003c34:	80071880 	call	8007188 <__addsf3>
 8003c38:	1007883a 	mov	r3,r2
 8003c3c:	e0fac215 	stw	r3,-5368(fp)
                ship->pos.x = x;
 8003c40:	e13ac217 	ldw	r4,-5368(fp)
 8003c44:	80085280 	call	8008528 <__fixsfsi>
 8003c48:	1007883a 	mov	r3,r2
 8003c4c:	e0bac717 	ldw	r2,-5348(fp)
 8003c50:	10c00115 	stw	r3,4(r2)
            }

            fading = ship->pos.x + ship->sprite.width > scene.max.x;
 8003c54:	e0bac717 	ldw	r2,-5348(fp)
 8003c58:	10c00117 	ldw	r3,4(r2)
 8003c5c:	e0bac717 	ldw	r2,-5348(fp)
 8003c60:	10800417 	ldw	r2,16(r2)
 8003c64:	1885883a 	add	r2,r3,r2
 8003c68:	e0fb0017 	ldw	r3,-5120(fp)
 8003c6c:	1884803a 	cmplt	r2,r3,r2
 8003c70:	10803fcc 	andi	r2,r2,255
 8003c74:	e0bacc15 	stw	r2,-5328(fp)

            if (fading) {
 8003c78:	e0bacc17 	ldw	r2,-5328(fp)
 8003c7c:	10000e26 	beq	r2,zero,8003cb8 <run_title_screen+0x60c>
                if (!start_fading) {
 8003c80:	e0bac317 	ldw	r2,-5364(fp)
 8003c84:	1000061e 	bne	r2,zero,8003ca0 <run_title_screen+0x5f4>
                    start_fade(&fade, 1);
 8003c88:	e0bff604 	addi	r2,fp,-40
 8003c8c:	014fe034 	movhi	r5,16256
 8003c90:	1009883a 	mov	r4,r2
 8003c94:	80004d40 	call	80004d4 <start_fade>
                    start_fading = 1;
 8003c98:	00800044 	movi	r2,1
 8003c9c:	e0bac315 	stw	r2,-5364(fp)
                }
                running = !show_fade(&fade);
 8003ca0:	e0bff604 	addi	r2,fp,-40
 8003ca4:	1009883a 	mov	r4,r2
 8003ca8:	80005a40 	call	80005a4 <show_fade>
 8003cac:	1005003a 	cmpeq	r2,r2,zero
 8003cb0:	10803fcc 	andi	r2,r2,255
 8003cb4:	e0bac515 	stw	r2,-5356(fp)
            }
            
            while (gdu_is_running());
 8003cb8:	0001883a 	nop
 8003cbc:	80026400 	call	8002640 <gdu_is_running>
 8003cc0:	103ffe1e 	bne	r2,zero,8003cbc <__alt_data_end+0xfc003cbc>
            push_scene(&scene);
 8003cc4:	e0bad004 	addi	r2,fp,-5312
 8003cc8:	1009883a 	mov	r4,r2
 8003ccc:	8000cc00 	call	8000cc0 <push_scene>
            start_render();
 8003cd0:	80003b00 	call	80003b0 <start_render>
    fade_t fade = create_fade(0x0000, FADE_TO);

    mouse_t mouse = new_mouse(scene.max.x / 2, scene.max.y / 2);

    int running = 1;
    while (running) {
 8003cd4:	e0bac517 	ldw	r2,-5356(fp)
 8003cd8:	103f8c1e 	bne	r2,zero,8003b0c <__alt_data_end+0xfc003b0c>
            while (gdu_is_running());
            push_scene(&scene);
            start_render();
        }
    }
}
 8003cdc:	0001883a 	nop
 8003ce0:	e037883a 	mov	sp,fp
 8003ce4:	dfc00117 	ldw	ra,4(sp)
 8003ce8:	df000017 	ldw	fp,0(sp)
 8003cec:	dec00204 	addi	sp,sp,8
 8003cf0:	f800283a 	ret

08003cf4 <run_win>:
#include "../game.h"
#include "../display.h"
#include "../vga.h"
#include "../sprites/cursor.h"

void run_win() {
 8003cf4:	defad204 	addi	sp,sp,-5304
 8003cf8:	dfc52d15 	stw	ra,5300(sp)
 8003cfc:	df052c15 	stw	fp,5296(sp)
 8003d00:	df052c04 	addi	fp,sp,5296

    scene_t scene;
    clear_scene(&scene);
 8003d04:	e0bad604 	addi	r2,fp,-5288
 8003d08:	1009883a 	mov	r4,r2
 8003d0c:	8000ea00 	call	8000ea0 <clear_scene>


    game_object_t* background               = allocate_object(&scene, BACKGROUND,   USED | VISABLE);
 8003d10:	e0bad604 	addi	r2,fp,-5288
 8003d14:	018000c4 	movi	r6,3
 8003d18:	000b883a 	mov	r5,zero
 8003d1c:	1009883a 	mov	r4,r2
 8003d20:	8000ac80 	call	8000ac8 <allocate_object>
 8003d24:	e0bad415 	stw	r2,-5296(fp)
    background->sprite              = lightspeed_background_sprite; 	//to be added, add winner sprite
 8003d28:	e0fad417 	ldw	r3,-5296(fp)
 8003d2c:	008212b4 	movhi	r2,2122
 8003d30:	10a61c04 	addi	r2,r2,-26512
 8003d34:	18800315 	stw	r2,12(r3)
 8003d38:	e0bad417 	ldw	r2,-5296(fp)
 8003d3c:	00c19004 	movi	r3,1600
 8003d40:	10c00415 	stw	r3,16(r2)
 8003d44:	e0bad417 	ldw	r2,-5296(fp)
 8003d48:	00c07804 	movi	r3,480
 8003d4c:	10c00515 	stw	r3,20(r2)
 8003d50:	e0bad417 	ldw	r2,-5296(fp)
 8003d54:	10000615 	stw	zero,24(r2)
 8003d58:	e0bad417 	ldw	r2,-5296(fp)
 8003d5c:	10000715 	stw	zero,28(r2)
 8003d60:	e0bad417 	ldw	r2,-5296(fp)
 8003d64:	10000815 	stw	zero,32(r2)
 8003d68:	e0bad417 	ldw	r2,-5296(fp)
 8003d6c:	10000915 	stw	zero,36(r2)
 8003d70:	e0bad417 	ldw	r2,-5296(fp)
 8003d74:	00c19004 	movi	r3,1600
 8003d78:	10c00a15 	stw	r3,40(r2)
 8003d7c:	e0bad417 	ldw	r2,-5296(fp)
 8003d80:	00c07804 	movi	r3,480
 8003d84:	10c00b15 	stw	r3,44(r2)

    scene.max.x = SCREEN_WIDTH;
 8003d88:	0080a004 	movi	r2,640
 8003d8c:	e0bb0615 	stw	r2,-5096(fp)
    scene.max.y = SCREEN_HEIGHT;
 8003d90:	00807804 	movi	r2,480
 8003d94:	e0bb0715 	stw	r2,-5092(fp)

    fade_t fader = create_fade(0xFF00, FADE_FROM);
 8003d98:	e0bffc04 	addi	r2,fp,-16
 8003d9c:	01800044 	movi	r6,1
 8003da0:	017fc014 	movui	r5,65280
 8003da4:	1009883a 	mov	r4,r2
 8003da8:	80004680 	call	8000468 <create_fade>
        start_fade(&fader, 3);
 8003dac:	e0bffc04 	addi	r2,fp,-16
 8003db0:	01501034 	movhi	r5,16448
 8003db4:	1009883a 	mov	r4,r2
 8003db8:	80004d40 	call	80004d4 <start_fade>


        int running = 1;
 8003dbc:	00800044 	movi	r2,1
 8003dc0:	e0bad515 	stw	r2,-5292(fp)
    while(running){
 8003dc4:	00000e06 	br	8003e00 <run_win+0x10c>

    if (!is_fade_done(&fader))
 8003dc8:	e0bffc04 	addi	r2,fp,-16
 8003dcc:	1009883a 	mov	r4,r2
 8003dd0:	80005340 	call	8000534 <is_fade_done>
 8003dd4:	1000031e 	bne	r2,zero,8003de4 <run_win+0xf0>
        show_fade(&fader);
 8003dd8:	e0bffc04 	addi	r2,fp,-16
 8003ddc:	1009883a 	mov	r4,r2
 8003de0:	80005a40 	call	80005a4 <show_fade>


    while (gdu_is_running());
 8003de4:	0001883a 	nop
 8003de8:	80026400 	call	8002640 <gdu_is_running>
 8003dec:	103ffe1e 	bne	r2,zero,8003de8 <__alt_data_end+0xfc003de8>
                push_scene(&scene);
 8003df0:	e0bad604 	addi	r2,fp,-5288
 8003df4:	1009883a 	mov	r4,r2
 8003df8:	8000cc00 	call	8000cc0 <push_scene>
                start_render();
 8003dfc:	80003b00 	call	80003b0 <start_render>
    fade_t fader = create_fade(0xFF00, FADE_FROM);
        start_fade(&fader, 3);


        int running = 1;
    while(running){
 8003e00:	e0bad517 	ldw	r2,-5292(fp)
 8003e04:	103ff01e 	bne	r2,zero,8003dc8 <__alt_data_end+0xfc003dc8>

    while (gdu_is_running());
                push_scene(&scene);
                start_render();
    }
}
 8003e08:	0001883a 	nop
 8003e0c:	e037883a 	mov	sp,fp
 8003e10:	dfc00117 	ldw	ra,4(sp)
 8003e14:	df000017 	ldw	fp,0(sp)
 8003e18:	dec00204 	addi	sp,sp,8
 8003e1c:	f800283a 	ret

08003e20 <main>:
#include "levels/title_screen.h"
#include "levels/level1.h"
#include "levels/end.h"
#include "sprites/mouse.h"

int main() {
 8003e20:	deffef04 	addi	sp,sp,-68
 8003e24:	dfc01015 	stw	ra,64(sp)
 8003e28:	df000f15 	stw	fp,60(sp)
 8003e2c:	df000f04 	addi	fp,sp,60
    printf("Running War Stars 2: Defense of the Homes!\n");
 8003e30:	01021974 	movhi	r4,2149
 8003e34:	21369d04 	addi	r4,r4,-9612
 8003e38:	800a98c0 	call	800a98c <puts>
    disable_master_timer();
 8003e3c:	800446c0 	call	800446c <disable_master_timer>
    usleep(1000);
 8003e40:	0100fa04 	movi	r4,1000
 8003e44:	8015c600 	call	8015c60 <usleep>
    enable_master_timer();
 8003e48:	80044400 	call	8004440 <enable_master_timer>
    
    vga_init();
 8003e4c:	80065f80 	call	80065f8 <vga_init>
    gdu_reset();
 8003e50:	80026640 	call	8002664 <gdu_reset>

    sprite_t mouse_s = mouse_sprite;
 8003e54:	008218b4 	movhi	r2,2146
 8003e58:	10a5fc04 	addi	r2,r2,-26640
 8003e5c:	e0bff115 	stw	r2,-60(fp)
 8003e60:	00806404 	movi	r2,400
 8003e64:	e0bff215 	stw	r2,-56(fp)
 8003e68:	008042c4 	movi	r2,267
 8003e6c:	e0bff315 	stw	r2,-52(fp)
 8003e70:	e03ff415 	stw	zero,-48(fp)
 8003e74:	e03ff515 	stw	zero,-44(fp)
 8003e78:	e03ff615 	stw	zero,-40(fp)
 8003e7c:	e03ff715 	stw	zero,-36(fp)
 8003e80:	00806404 	movi	r2,400
 8003e84:	e0bff815 	stw	r2,-32(fp)
 8003e88:	008042c4 	movi	r2,267
 8003e8c:	e0bff915 	stw	r2,-28(fp)
    mouse_s.screen_x = (SCREEN_WIDTH - mouse_s.width) / 2;
 8003e90:	e0bff217 	ldw	r2,-56(fp)
 8003e94:	00c0a004 	movi	r3,640
 8003e98:	1885c83a 	sub	r2,r3,r2
 8003e9c:	1006d7fa 	srli	r3,r2,31
 8003ea0:	1885883a 	add	r2,r3,r2
 8003ea4:	1005d07a 	srai	r2,r2,1
 8003ea8:	e0bff415 	stw	r2,-48(fp)
    mouse_s.screen_y = (SCREEN_HEIGHT - mouse_s.height) / 2;
 8003eac:	e0bff317 	ldw	r2,-52(fp)
 8003eb0:	00c07804 	movi	r3,480
 8003eb4:	1885c83a 	sub	r2,r3,r2
 8003eb8:	1006d7fa 	srli	r3,r2,31
 8003ebc:	1885883a 	add	r2,r3,r2
 8003ec0:	1005d07a 	srai	r2,r2,1
 8003ec4:	e0bff515 	stw	r2,-44(fp)
    push_sprite(&mouse_s, 0);
 8003ec8:	000b883a 	mov	r5,zero
 8003ecc:	e13ff104 	addi	r4,fp,-60
 8003ed0:	80027ac0 	call	80027ac <push_sprite>
    double_render();
 8003ed4:	80004200 	call	8000420 <double_render>
    pop_sprite(0);
 8003ed8:	0009883a 	mov	r4,zero
 8003edc:	800281c0 	call	800281c <pop_sprite>
    
    init_mouse();
 8003ee0:	80040f80 	call	80040f8 <init_mouse>
    mouse_t mouse;
    while (!poll_mouse(&mouse, 0, 0));
 8003ee4:	0001883a 	nop
 8003ee8:	e0bffa04 	addi	r2,fp,-24
 8003eec:	000d883a 	mov	r6,zero
 8003ef0:	000b883a 	mov	r5,zero
 8003ef4:	1009883a 	mov	r4,r2
 8003ef8:	80041b00 	call	80041b0 <poll_mouse>
 8003efc:	103ffa26 	beq	r2,zero,8003ee8 <__alt_data_end+0xfc003ee8>
    
    run_title_screen();
 8003f00:	80036ac0 	call	80036ac <run_title_screen>
   if(run_level1())
 8003f04:	80028840 	call	8002884 <run_level1>
 8003f08:	10000226 	beq	r2,zero,8003f14 <main+0xf4>
    run_lose();
 8003f0c:	80035800 	call	8003580 <run_lose>
 8003f10:	00000106 	br	8003f18 <main+0xf8>
   else
	run_win();
 8003f14:	8003cf40 	call	8003cf4 <run_win>
    
    printf("Done!\n");
 8003f18:	01021974 	movhi	r4,2149
 8003f1c:	2136a804 	addi	r4,r4,-9568
 8003f20:	800a98c0 	call	800a98c <puts>
    return 0;
 8003f24:	0005883a 	mov	r2,zero
}
 8003f28:	e037883a 	mov	sp,fp
 8003f2c:	dfc00117 	ldw	ra,4(sp)
 8003f30:	df000017 	ldw	fp,0(sp)
 8003f34:	dec00204 	addi	sp,sp,8
 8003f38:	f800283a 	ret

08003f3c <GetDriverandReport>:
#include "timer.h"

extern HID_DEVICE hid_device;
static BYTE addr = 1;

BYTE GetDriverandReport() {
 8003f3c:	defff604 	addi	sp,sp,-40
 8003f40:	dfc00915 	stw	ra,36(sp)
 8003f44:	df000815 	stw	fp,32(sp)
 8003f48:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 8003f4c:	00bfffc4 	movi	r2,-1
 8003f50:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8003f54:	01021974 	movhi	r4,2149
 8003f58:	2136aa04 	addi	r4,r4,-9560
 8003f5c:	800a98c0 	call	800a98c <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8003f60:	00800044 	movi	r2,1
 8003f64:	e0bffd05 	stb	r2,-12(fp)
 8003f68:	00001206 	br	8003fb4 <GetDriverandReport+0x78>
		tpl_ptr = GetDevtable(i);
 8003f6c:	e0bffd03 	ldbu	r2,-12(fp)
 8003f70:	1009883a 	mov	r4,r2
 8003f74:	800653c0 	call	800653c <GetDevtable>
 8003f78:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 8003f7c:	e0bffe17 	ldw	r2,-8(fp)
 8003f80:	10800017 	ldw	r2,0(r2)
 8003f84:	10000826 	beq	r2,zero,8003fa8 <GetDriverandReport+0x6c>
			printf("Device: %d", i);
 8003f88:	e0bffd03 	ldbu	r2,-12(fp)
 8003f8c:	100b883a 	mov	r5,r2
 8003f90:	01021974 	movhi	r4,2149
 8003f94:	2136b304 	addi	r4,r4,-9524
 8003f98:	800a8900 	call	800a890 <printf>
			device = tpl_ptr->devclass;
 8003f9c:	e0bffe17 	ldw	r2,-8(fp)
 8003fa0:	10800103 	ldbu	r2,4(r2)
 8003fa4:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8003fa8:	e0bffd03 	ldbu	r2,-12(fp)
 8003fac:	10800044 	addi	r2,r2,1
 8003fb0:	e0bffd05 	stb	r2,-12(fp)
 8003fb4:	e0bffd03 	ldbu	r2,-12(fp)
 8003fb8:	10800230 	cmpltui	r2,r2,8
 8003fbc:	103feb1e 	bne	r2,zero,8003f6c <__alt_data_end+0xfc003f6c>
			printf("Device: %d", i);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8003fc0:	d0a00103 	ldbu	r2,-32764(gp)
 8003fc4:	11003fcc 	andi	r4,r2,255
 8003fc8:	d0a6e6c3 	ldbu	r2,-25701(gp)
 8003fcc:	10803fcc 	andi	r2,r2,255
 8003fd0:	e0ffff44 	addi	r3,fp,-3
 8003fd4:	d8c00415 	stw	r3,16(sp)
 8003fd8:	00c00044 	movi	r3,1
 8003fdc:	d8c00315 	stw	r3,12(sp)
 8003fe0:	d8800215 	stw	r2,8(sp)
 8003fe4:	d8000115 	stw	zero,4(sp)
 8003fe8:	d8000015 	stw	zero,0(sp)
 8003fec:	01c00084 	movi	r7,2
 8003ff0:	01802844 	movi	r6,161
 8003ff4:	000b883a 	mov	r5,zero
 8003ff8:	80057600 	call	8005760 <XferCtrlReq>
 8003ffc:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 8004000:	e0bfff03 	ldbu	r2,-4(fp)
 8004004:	10000926 	beq	r2,zero,800402c <GetDriverandReport+0xf0>
		printf("GetIdle Error. Error code: ");
 8004008:	01021974 	movhi	r4,2149
 800400c:	2136b604 	addi	r4,r4,-9512
 8004010:	800a8900 	call	800a890 <printf>
		printf("%x \n", rcode);
 8004014:	e0bfff03 	ldbu	r2,-4(fp)
 8004018:	100b883a 	mov	r5,r2
 800401c:	01021974 	movhi	r4,2149
 8004020:	2136bd04 	addi	r4,r4,-9484
 8004024:	800a8900 	call	800a890 <printf>
 8004028:	00000906 	br	8004050 <GetDriverandReport+0x114>
	} else {
		printf("Update rate: ");
 800402c:	01021974 	movhi	r4,2149
 8004030:	2136bf04 	addi	r4,r4,-9476
 8004034:	800a8900 	call	800a890 <printf>
		printf("%x \n", tmpbyte);
 8004038:	e0bfff43 	ldbu	r2,-3(fp)
 800403c:	10803fcc 	andi	r2,r2,255
 8004040:	100b883a 	mov	r5,r2
 8004044:	01021974 	movhi	r4,2149
 8004048:	2136bd04 	addi	r4,r4,-9484
 800404c:	800a8900 	call	800a890 <printf>
	}
	printf("Protocol: ");
 8004050:	01021974 	movhi	r4,2149
 8004054:	2136c304 	addi	r4,r4,-9460
 8004058:	800a8900 	call	800a890 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 800405c:	d0a00103 	ldbu	r2,-32764(gp)
 8004060:	11003fcc 	andi	r4,r2,255
 8004064:	d0a6e6c3 	ldbu	r2,-25701(gp)
 8004068:	10803fcc 	andi	r2,r2,255
 800406c:	e0ffff44 	addi	r3,fp,-3
 8004070:	d8c00415 	stw	r3,16(sp)
 8004074:	00c00044 	movi	r3,1
 8004078:	d8c00315 	stw	r3,12(sp)
 800407c:	d8800215 	stw	r2,8(sp)
 8004080:	d8000115 	stw	zero,4(sp)
 8004084:	d8000015 	stw	zero,0(sp)
 8004088:	01c000c4 	movi	r7,3
 800408c:	01802844 	movi	r6,161
 8004090:	000b883a 	mov	r5,zero
 8004094:	80057600 	call	8005760 <XferCtrlReq>
 8004098:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 800409c:	e0bfff03 	ldbu	r2,-4(fp)
 80040a0:	10000926 	beq	r2,zero,80040c8 <GetDriverandReport+0x18c>
		printf("GetProto Error. Error code ");
 80040a4:	01021974 	movhi	r4,2149
 80040a8:	2136c604 	addi	r4,r4,-9448
 80040ac:	800a8900 	call	800a890 <printf>
		printf("%x \n", rcode);
 80040b0:	e0bfff03 	ldbu	r2,-4(fp)
 80040b4:	100b883a 	mov	r5,r2
 80040b8:	01021974 	movhi	r4,2149
 80040bc:	2136bd04 	addi	r4,r4,-9484
 80040c0:	800a8900 	call	800a890 <printf>
 80040c4:	00000606 	br	80040e0 <GetDriverandReport+0x1a4>
	} else {
		printf("%d \n", tmpbyte);
 80040c8:	e0bfff43 	ldbu	r2,-3(fp)
 80040cc:	10803fcc 	andi	r2,r2,255
 80040d0:	100b883a 	mov	r5,r2
 80040d4:	01021974 	movhi	r4,2149
 80040d8:	2136cd04 	addi	r4,r4,-9420
 80040dc:	800a8900 	call	800a890 <printf>
	}
	return device;
 80040e0:	e0bffd43 	ldbu	r2,-11(fp)
}
 80040e4:	e037883a 	mov	sp,fp
 80040e8:	dfc00117 	ldw	ra,4(sp)
 80040ec:	df000017 	ldw	fp,0(sp)
 80040f0:	dec00204 	addi	sp,sp,8
 80040f4:	f800283a 	ret

080040f8 <init_mouse>:


void init_mouse() {
 80040f8:	defffe04 	addi	sp,sp,-8
 80040fc:	dfc00115 	stw	ra,4(sp)
 8004100:	df000015 	stw	fp,0(sp)
 8004104:	d839883a 	mov	fp,sp
    MAX3421E_init();
 8004108:	80055680 	call	8005568 <MAX3421E_init>
    USB_init();
 800410c:	8005d140 	call	8005d14 <USB_init>
}
 8004110:	0001883a 	nop
 8004114:	e037883a 	mov	sp,fp
 8004118:	dfc00117 	ldw	ra,4(sp)
 800411c:	df000017 	ldw	fp,0(sp)
 8004120:	dec00204 	addi	sp,sp,8
 8004124:	f800283a 	ret

08004128 <new_mouse>:

mouse_t new_mouse(int x, int y) {
 8004128:	defff604 	addi	sp,sp,-40
 800412c:	df000915 	stw	fp,36(sp)
 8004130:	df000904 	addi	fp,sp,36
 8004134:	e13ffd15 	stw	r4,-12(fp)
 8004138:	e17ffe15 	stw	r5,-8(fp)
 800413c:	e1bfff15 	stw	r6,-4(fp)
    mouse_t mouse = {
 8004140:	e03ff715 	stw	zero,-36(fp)
 8004144:	e03ff815 	stw	zero,-32(fp)
 8004148:	e03ff915 	stw	zero,-28(fp)
 800414c:	e03ffa15 	stw	zero,-24(fp)
 8004150:	e03ffb15 	stw	zero,-20(fp)
 8004154:	e03ffc15 	stw	zero,-16(fp)
 8004158:	e0bffe17 	ldw	r2,-8(fp)
 800415c:	e0bff715 	stw	r2,-36(fp)
 8004160:	e0bfff17 	ldw	r2,-4(fp)
 8004164:	e0bff815 	stw	r2,-32(fp)
        {x, y},
        {0, 0}
    };
    return mouse;
 8004168:	e0bffd17 	ldw	r2,-12(fp)
 800416c:	e0fff717 	ldw	r3,-36(fp)
 8004170:	10c00015 	stw	r3,0(r2)
 8004174:	e0fff817 	ldw	r3,-32(fp)
 8004178:	10c00115 	stw	r3,4(r2)
 800417c:	e0fff917 	ldw	r3,-28(fp)
 8004180:	10c00215 	stw	r3,8(r2)
 8004184:	e0fffa17 	ldw	r3,-24(fp)
 8004188:	10c00315 	stw	r3,12(r2)
 800418c:	e0fffb17 	ldw	r3,-20(fp)
 8004190:	10c00415 	stw	r3,16(r2)
 8004194:	e0fffc17 	ldw	r3,-16(fp)
 8004198:	10c00515 	stw	r3,20(r2)
}
 800419c:	e0bffd17 	ldw	r2,-12(fp)
 80041a0:	e037883a 	mov	sp,fp
 80041a4:	df000017 	ldw	fp,0(sp)
 80041a8:	dec00104 	addi	sp,sp,4
 80041ac:	f800283a 	ret

080041b0 <poll_mouse>:

int poll_mouse(mouse_t* mouse, int reverse_x, int reverse_y) {
 80041b0:	defff804 	addi	sp,sp,-32
 80041b4:	dfc00715 	stw	ra,28(sp)
 80041b8:	df000615 	stw	fp,24(sp)
 80041bc:	df000604 	addi	fp,sp,24
 80041c0:	e13ffd15 	stw	r4,-12(fp)
 80041c4:	e17ffe15 	stw	r5,-8(fp)
 80041c8:	e1bfff15 	stw	r6,-4(fp)
    static BOOT_MOUSE_REPORT buf;
    static BYTE device;
    static BYTE runningdebugflag = 0;

    MAX3421E_Task();
 80041cc:	80055fc0 	call	80055fc <MAX3421E_Task>
    USB_Task();
 80041d0:	8005dac0 	call	8005dac <USB_Task>

    if (GetUsbTaskState() == USB_STATE_RUNNING) {
 80041d4:	800651c0 	call	800651c <GetUsbTaskState>
 80041d8:	10803fcc 	andi	r2,r2,255
 80041dc:	10801018 	cmpnei	r2,r2,64
 80041e0:	1000691e 	bne	r2,zero,8004388 <poll_mouse+0x1d8>
        if (!runningdebugflag) {
 80041e4:	d0a6e403 	ldbu	r2,-25712(gp)
 80041e8:	10803fcc 	andi	r2,r2,255
 80041ec:	1000051e 	bne	r2,zero,8004204 <poll_mouse+0x54>
            runningdebugflag = 1;
 80041f0:	00800044 	movi	r2,1
 80041f4:	d0a6e405 	stb	r2,-25712(gp)
            device = GetDriverandReport();
 80041f8:	8003f3c0 	call	8003f3c <GetDriverandReport>
 80041fc:	d0a6e445 	stb	r2,-25711(gp)
 8004200:	00006906 	br	80043a8 <poll_mouse+0x1f8>
        } else if (device == 2) {
 8004204:	d0a6e443 	ldbu	r2,-25711(gp)
 8004208:	10803fcc 	andi	r2,r2,255
 800420c:	10800098 	cmpnei	r2,r2,2
 8004210:	1000651e 	bne	r2,zero,80043a8 <poll_mouse+0x1f8>
            BYTE rcode = mousePoll(&buf);
 8004214:	d126e484 	addi	r4,gp,-25710
 8004218:	8004f380 	call	8004f38 <mousePoll>
 800421c:	e0bffa05 	stb	r2,-24(fp)
            if (rcode == hrNAK) {
 8004220:	e0bffa03 	ldbu	r2,-24(fp)
 8004224:	10800118 	cmpnei	r2,r2,4
 8004228:	1000021e 	bne	r2,zero,8004234 <poll_mouse+0x84>
                //NAK means no new data
                return 0;
 800422c:	0005883a 	mov	r2,zero
 8004230:	00005e06 	br	80043ac <poll_mouse+0x1fc>
            } else if (rcode) {
 8004234:	e0bffa03 	ldbu	r2,-24(fp)
 8004238:	10000a26 	beq	r2,zero,8004264 <poll_mouse+0xb4>
                printf("Rcode: ");
 800423c:	01021974 	movhi	r4,2149
 8004240:	2136cf04 	addi	r4,r4,-9412
 8004244:	800a8900 	call	800a890 <printf>
                printf("%x \n", rcode);
 8004248:	e0bffa03 	ldbu	r2,-24(fp)
 800424c:	100b883a 	mov	r5,r2
 8004250:	01021974 	movhi	r4,2149
 8004254:	2136bd04 	addi	r4,r4,-9484
 8004258:	800a8900 	call	800a890 <printf>
                return 0;
 800425c:	0005883a 	mov	r2,zero
 8004260:	00005206 	br	80043ac <poll_mouse+0x1fc>
            }

            if (reverse_x)
 8004264:	e0bffe17 	ldw	r2,-8(fp)
 8004268:	10000a26 	beq	r2,zero,8004294 <poll_mouse+0xe4>
                mouse->pos.x -= (signed char) buf.x;
 800426c:	e0bffd17 	ldw	r2,-12(fp)
 8004270:	10c00017 	ldw	r3,0(r2)
 8004274:	d0a6e503 	ldbu	r2,-25708(gp)
 8004278:	10803fcc 	andi	r2,r2,255
 800427c:	1080201c 	xori	r2,r2,128
 8004280:	10bfe004 	addi	r2,r2,-128
 8004284:	1887c83a 	sub	r3,r3,r2
 8004288:	e0bffd17 	ldw	r2,-12(fp)
 800428c:	10c00015 	stw	r3,0(r2)
 8004290:	00000906 	br	80042b8 <poll_mouse+0x108>
            else
                mouse->pos.x += (signed char) buf.x;
 8004294:	e0bffd17 	ldw	r2,-12(fp)
 8004298:	10c00017 	ldw	r3,0(r2)
 800429c:	d0a6e503 	ldbu	r2,-25708(gp)
 80042a0:	10803fcc 	andi	r2,r2,255
 80042a4:	1080201c 	xori	r2,r2,128
 80042a8:	10bfe004 	addi	r2,r2,-128
 80042ac:	1887883a 	add	r3,r3,r2
 80042b0:	e0bffd17 	ldw	r2,-12(fp)
 80042b4:	10c00015 	stw	r3,0(r2)
            if (reverse_y)
 80042b8:	e0bfff17 	ldw	r2,-4(fp)
 80042bc:	10000a26 	beq	r2,zero,80042e8 <poll_mouse+0x138>
                mouse->pos.y -= (signed char) buf.y;
 80042c0:	e0bffd17 	ldw	r2,-12(fp)
 80042c4:	10c00117 	ldw	r3,4(r2)
 80042c8:	d0a6e583 	ldbu	r2,-25706(gp)
 80042cc:	10803fcc 	andi	r2,r2,255
 80042d0:	1080201c 	xori	r2,r2,128
 80042d4:	10bfe004 	addi	r2,r2,-128
 80042d8:	1887c83a 	sub	r3,r3,r2
 80042dc:	e0bffd17 	ldw	r2,-12(fp)
 80042e0:	10c00115 	stw	r3,4(r2)
 80042e4:	00000906 	br	800430c <poll_mouse+0x15c>
            else
                mouse->pos.y += (signed char) buf.y;
 80042e8:	e0bffd17 	ldw	r2,-12(fp)
 80042ec:	10c00117 	ldw	r3,4(r2)
 80042f0:	d0a6e583 	ldbu	r2,-25706(gp)
 80042f4:	10803fcc 	andi	r2,r2,255
 80042f8:	1080201c 	xori	r2,r2,128
 80042fc:	10bfe004 	addi	r2,r2,-128
 8004300:	1887883a 	add	r3,r3,r2
 8004304:	e0bffd17 	ldw	r2,-12(fp)
 8004308:	10c00115 	stw	r3,4(r2)

            mouse_buttons_t buttons;
            buttons.left    = buf.button & 0x01;
 800430c:	d0a6e483 	ldbu	r2,-25710(gp)
 8004310:	10803fcc 	andi	r2,r2,255
 8004314:	1080004c 	andi	r2,r2,1
 8004318:	e0bffb15 	stw	r2,-20(fp)
            buttons.right   = buf.button & 0x02;
 800431c:	d0a6e483 	ldbu	r2,-25710(gp)
 8004320:	10803fcc 	andi	r2,r2,255
 8004324:	1080008c 	andi	r2,r2,2
 8004328:	e0bffc15 	stw	r2,-16(fp)

            if (mouse->buttons.left && !buttons.left)
 800432c:	e0bffd17 	ldw	r2,-12(fp)
 8004330:	10800217 	ldw	r2,8(r2)
 8004334:	10000526 	beq	r2,zero,800434c <poll_mouse+0x19c>
 8004338:	e0bffb17 	ldw	r2,-20(fp)
 800433c:	1000031e 	bne	r2,zero,800434c <poll_mouse+0x19c>
                mouse->clicked.left = 1;
 8004340:	e0bffd17 	ldw	r2,-12(fp)
 8004344:	00c00044 	movi	r3,1
 8004348:	10c00415 	stw	r3,16(r2)
            if (mouse->buttons.right && !buttons.right)
 800434c:	e0bffd17 	ldw	r2,-12(fp)
 8004350:	10800317 	ldw	r2,12(r2)
 8004354:	10000526 	beq	r2,zero,800436c <poll_mouse+0x1bc>
 8004358:	e0bffc17 	ldw	r2,-16(fp)
 800435c:	1000031e 	bne	r2,zero,800436c <poll_mouse+0x1bc>
                mouse->clicked.right = 1;
 8004360:	e0bffd17 	ldw	r2,-12(fp)
 8004364:	00c00044 	movi	r3,1
 8004368:	10c00515 	stw	r3,20(r2)
            
            mouse->buttons = buttons;
 800436c:	e0bffd17 	ldw	r2,-12(fp)
 8004370:	e0fffb17 	ldw	r3,-20(fp)
 8004374:	10c00215 	stw	r3,8(r2)
 8004378:	e0fffc17 	ldw	r3,-16(fp)
 800437c:	10c00315 	stw	r3,12(r2)
            return 1;
 8004380:	00800044 	movi	r2,1
 8004384:	00000906 	br	80043ac <poll_mouse+0x1fc>
        }
    } else {
        if (runningdebugflag) {
 8004388:	d0a6e403 	ldbu	r2,-25712(gp)
 800438c:	10803fcc 	andi	r2,r2,255
 8004390:	10000526 	beq	r2,zero,80043a8 <poll_mouse+0x1f8>
            runningdebugflag = 0;
 8004394:	d026e405 	stb	zero,-25712(gp)
            printf("initing\n");
 8004398:	01021974 	movhi	r4,2149
 800439c:	2136d104 	addi	r4,r4,-9404
 80043a0:	800a98c0 	call	800a98c <puts>
            init_mouse();
 80043a4:	80040f80 	call	80040f8 <init_mouse>
        }
    }
    
    return 0;
 80043a8:	0005883a 	mov	r2,zero
}
 80043ac:	e037883a 	mov	sp,fp
 80043b0:	dfc00117 	ldw	ra,4(sp)
 80043b4:	df000017 	ldw	fp,0(sp)
 80043b8:	dec00204 	addi	sp,sp,8
 80043bc:	f800283a 	ret

080043c0 <is_clicked>:

int is_clicked(mouse_t* mouse, int button) {
 80043c0:	defffd04 	addi	sp,sp,-12
 80043c4:	df000215 	stw	fp,8(sp)
 80043c8:	df000204 	addi	fp,sp,8
 80043cc:	e13ffe15 	stw	r4,-8(fp)
 80043d0:	e17fff15 	stw	r5,-4(fp)
    switch (button) {
 80043d4:	e0bfff17 	ldw	r2,-4(fp)
 80043d8:	10000326 	beq	r2,zero,80043e8 <is_clicked+0x28>
 80043dc:	10800060 	cmpeqi	r2,r2,1
 80043e0:	1000081e 	bne	r2,zero,8004404 <is_clicked+0x44>
 80043e4:	00001106 	br	800442c <is_clicked+0x6c>
        case MOUSE_BUTTON_LEFT:
            if (mouse->clicked.left) {
 80043e8:	e0bffe17 	ldw	r2,-8(fp)
 80043ec:	10800417 	ldw	r2,16(r2)
 80043f0:	10000b26 	beq	r2,zero,8004420 <is_clicked+0x60>
                mouse->clicked.left = 0;
 80043f4:	e0bffe17 	ldw	r2,-8(fp)
 80043f8:	10000415 	stw	zero,16(r2)
                return 1;
 80043fc:	00800044 	movi	r2,1
 8004400:	00000b06 	br	8004430 <is_clicked+0x70>
            }
            break;
        case MOUSE_BUTTON_RIGHT:
            if (mouse->clicked.right) {
 8004404:	e0bffe17 	ldw	r2,-8(fp)
 8004408:	10800517 	ldw	r2,20(r2)
 800440c:	10000626 	beq	r2,zero,8004428 <is_clicked+0x68>
                mouse->clicked.right = 0;
 8004410:	e0bffe17 	ldw	r2,-8(fp)
 8004414:	10000515 	stw	zero,20(r2)
                return 1;
 8004418:	00800044 	movi	r2,1
 800441c:	00000406 	br	8004430 <is_clicked+0x70>
        case MOUSE_BUTTON_LEFT:
            if (mouse->clicked.left) {
                mouse->clicked.left = 0;
                return 1;
            }
            break;
 8004420:	0001883a 	nop
 8004424:	00000106 	br	800442c <is_clicked+0x6c>
        case MOUSE_BUTTON_RIGHT:
            if (mouse->clicked.right) {
                mouse->clicked.right = 0;
                return 1;
            }
            break;
 8004428:	0001883a 	nop
    }
    return 0;
 800442c:	0005883a 	mov	r2,zero
 8004430:	e037883a 	mov	sp,fp
 8004434:	df000017 	ldw	fp,0(sp)
 8004438:	dec00104 	addi	sp,sp,4
 800443c:	f800283a 	ret

08004440 <enable_master_timer>:
    uint64_t time;
} timer_regs_t;

timer_regs_t* timer_regs = (timer_regs_t*) TIMER_MEM_LOCATION;

void enable_master_timer() { timer_regs->enabled = 1; }
 8004440:	deffff04 	addi	sp,sp,-4
 8004444:	df000015 	stw	fp,0(sp)
 8004448:	d839883a 	mov	fp,sp
 800444c:	d0a00217 	ldw	r2,-32760(gp)
 8004450:	00c00044 	movi	r3,1
 8004454:	10c00015 	stw	r3,0(r2)
 8004458:	0001883a 	nop
 800445c:	e037883a 	mov	sp,fp
 8004460:	df000017 	ldw	fp,0(sp)
 8004464:	dec00104 	addi	sp,sp,4
 8004468:	f800283a 	ret

0800446c <disable_master_timer>:

void disable_master_timer() { timer_regs->enabled = 0; }
 800446c:	deffff04 	addi	sp,sp,-4
 8004470:	df000015 	stw	fp,0(sp)
 8004474:	d839883a 	mov	fp,sp
 8004478:	d0a00217 	ldw	r2,-32760(gp)
 800447c:	10000015 	stw	zero,0(r2)
 8004480:	0001883a 	nop
 8004484:	e037883a 	mov	sp,fp
 8004488:	df000017 	ldw	fp,0(sp)
 800448c:	dec00104 	addi	sp,sp,4
 8004490:	f800283a 	ret

08004494 <get_time>:

float get_time() { return timer_regs->time / (float) 1e7; }
 8004494:	defffe04 	addi	sp,sp,-8
 8004498:	dfc00115 	stw	ra,4(sp)
 800449c:	df000015 	stw	fp,0(sp)
 80044a0:	d839883a 	mov	fp,sp
 80044a4:	d1200217 	ldw	r4,-32760(gp)
 80044a8:	20800117 	ldw	r2,4(r4)
 80044ac:	20c00217 	ldw	r3,8(r4)
 80044b0:	1009883a 	mov	r4,r2
 80044b4:	180b883a 	mov	r5,r3
 80044b8:	80069140 	call	8006914 <__floatundisf>
 80044bc:	1007883a 	mov	r3,r2
 80044c0:	0152c674 	movhi	r5,19225
 80044c4:	2965a004 	addi	r5,r5,-27008
 80044c8:	1809883a 	mov	r4,r3
 80044cc:	80076500 	call	8007650 <__divsf3>
 80044d0:	1009883a 	mov	r4,r2
 80044d4:	2007883a 	mov	r3,r4
 80044d8:	1805883a 	mov	r2,r3
 80044dc:	e037883a 	mov	sp,fp
 80044e0:	dfc00117 	ldw	ra,4(sp)
 80044e4:	df000017 	ldw	fp,0(sp)
 80044e8:	dec00204 	addi	sp,sp,8
 80044ec:	f800283a 	ret

080044f0 <get_micros>:

uint64_t get_micros() { return timer_regs->time / 10; }
 80044f0:	defffe04 	addi	sp,sp,-8
 80044f4:	dfc00115 	stw	ra,4(sp)
 80044f8:	df000015 	stw	fp,0(sp)
 80044fc:	d839883a 	mov	fp,sp
 8004500:	d1200217 	ldw	r4,-32760(gp)
 8004504:	20800117 	ldw	r2,4(r4)
 8004508:	20c00217 	ldw	r3,8(r4)
 800450c:	01800284 	movi	r6,10
 8004510:	000f883a 	mov	r7,zero
 8004514:	1009883a 	mov	r4,r2
 8004518:	180b883a 	mov	r5,r3
 800451c:	80069b00 	call	80069b0 <__udivdi3>
 8004520:	100f883a 	mov	r7,r2
 8004524:	1811883a 	mov	r8,r3
 8004528:	380b883a 	mov	r5,r7
 800452c:	400d883a 	mov	r6,r8
 8004530:	2807883a 	mov	r3,r5
 8004534:	3009883a 	mov	r4,r6
 8004538:	1805883a 	mov	r2,r3
 800453c:	2007883a 	mov	r3,r4
 8004540:	e037883a 	mov	sp,fp
 8004544:	dfc00117 	ldw	ra,4(sp)
 8004548:	df000017 	ldw	fp,0(sp)
 800454c:	dec00204 	addi	sp,sp,8
 8004550:	f800283a 	ret

08004554 <create_rate>:

rate_t create_rate(float hz) {
 8004554:	defff904 	addi	sp,sp,-28
 8004558:	dfc00615 	stw	ra,24(sp)
 800455c:	df000515 	stw	fp,20(sp)
 8004560:	df000504 	addi	fp,sp,20
 8004564:	e13ffe15 	stw	r4,-8(fp)
 8004568:	e17fff15 	stw	r5,-4(fp)
    rate_t rate = {
        timer_regs->time,
 800456c:	d1200217 	ldw	r4,-32760(gp)
 8004570:	20800117 	ldw	r2,4(r4)
 8004574:	20c00217 	ldw	r3,8(r4)
float get_time() { return timer_regs->time / (float) 1e7; }

uint64_t get_micros() { return timer_regs->time / 10; }

rate_t create_rate(float hz) {
    rate_t rate = {
 8004578:	e0bffb15 	stw	r2,-20(fp)
 800457c:	e0fffc15 	stw	r3,-16(fp)
        timer_regs->time,
        (uint32_t) ((1 / hz) * 1e7)
 8004580:	e17fff17 	ldw	r5,-4(fp)
 8004584:	010fe034 	movhi	r4,16256
 8004588:	80076500 	call	8007650 <__divsf3>
 800458c:	1007883a 	mov	r3,r2
 8004590:	1805883a 	mov	r2,r3
 8004594:	1009883a 	mov	r4,r2
 8004598:	800a2d40 	call	800a2d4 <__extendsfdf2>
 800459c:	1011883a 	mov	r8,r2
 80045a0:	1813883a 	mov	r9,r3
 80045a4:	000d883a 	mov	r6,zero
 80045a8:	01d058f4 	movhi	r7,16739
 80045ac:	39c4b404 	addi	r7,r7,4816
 80045b0:	4009883a 	mov	r4,r8
 80045b4:	480b883a 	mov	r5,r9
 80045b8:	80090440 	call	8009044 <__muldf3>
 80045bc:	1009883a 	mov	r4,r2
 80045c0:	180b883a 	mov	r5,r3
 80045c4:	2005883a 	mov	r2,r4
 80045c8:	2807883a 	mov	r3,r5
 80045cc:	1009883a 	mov	r4,r2
 80045d0:	180b883a 	mov	r5,r3
 80045d4:	80068a00 	call	80068a0 <__fixunsdfsi>
float get_time() { return timer_regs->time / (float) 1e7; }

uint64_t get_micros() { return timer_regs->time / 10; }

rate_t create_rate(float hz) {
    rate_t rate = {
 80045d8:	e0bffd15 	stw	r2,-12(fp)
        timer_regs->time,
        (uint32_t) ((1 / hz) * 1e7)
    };
    return rate;
 80045dc:	e0bffe17 	ldw	r2,-8(fp)
 80045e0:	e0fffb17 	ldw	r3,-20(fp)
 80045e4:	10c00015 	stw	r3,0(r2)
 80045e8:	e0fffc17 	ldw	r3,-16(fp)
 80045ec:	10c00115 	stw	r3,4(r2)
 80045f0:	e0fffd17 	ldw	r3,-12(fp)
 80045f4:	10c00215 	stw	r3,8(r2)
}
 80045f8:	e0bffe17 	ldw	r2,-8(fp)
 80045fc:	e037883a 	mov	sp,fp
 8004600:	dfc00117 	ldw	ra,4(sp)
 8004604:	df000017 	ldw	fp,0(sp)
 8004608:	dec00204 	addi	sp,sp,8
 800460c:	f800283a 	ret

08004610 <is_ready>:

int is_ready(rate_t* rate) {
 8004610:	defffb04 	addi	sp,sp,-20
 8004614:	df000415 	stw	fp,16(sp)
 8004618:	df000404 	addi	fp,sp,16
 800461c:	e13fff15 	stw	r4,-4(fp)
    uint64_t time = timer_regs->time;
 8004620:	d0a00217 	ldw	r2,-32760(gp)
 8004624:	10c00117 	ldw	r3,4(r2)
 8004628:	e0fffc15 	stw	r3,-16(fp)
 800462c:	10800217 	ldw	r2,8(r2)
 8004630:	e0bffd15 	stw	r2,-12(fp)
    int diff = time - (rate->last_time + rate->inv_rate);
 8004634:	e17ffc17 	ldw	r5,-16(fp)
 8004638:	e13fff17 	ldw	r4,-4(fp)
 800463c:	20800017 	ldw	r2,0(r4)
 8004640:	20c00117 	ldw	r3,4(r4)
 8004644:	1007883a 	mov	r3,r2
 8004648:	e0bfff17 	ldw	r2,-4(fp)
 800464c:	10800217 	ldw	r2,8(r2)
 8004650:	1885883a 	add	r2,r3,r2
 8004654:	2885c83a 	sub	r2,r5,r2
 8004658:	e0bffe15 	stw	r2,-8(fp)
    if (diff >= 0) {
 800465c:	e0bffe17 	ldw	r2,-8(fp)
 8004660:	10001c16 	blt	r2,zero,80046d4 <is_ready+0xc4>
        if (diff >= rate->inv_rate)
 8004664:	e0bfff17 	ldw	r2,-4(fp)
 8004668:	10800217 	ldw	r2,8(r2)
 800466c:	e0fffe17 	ldw	r3,-8(fp)
 8004670:	18800636 	bltu	r3,r2,800468c <is_ready+0x7c>
            rate->last_time = time;
 8004674:	e0bfff17 	ldw	r2,-4(fp)
 8004678:	e0fffc17 	ldw	r3,-16(fp)
 800467c:	10c00015 	stw	r3,0(r2)
 8004680:	e0fffd17 	ldw	r3,-12(fp)
 8004684:	10c00115 	stw	r3,4(r2)
 8004688:	00001006 	br	80046cc <is_ready+0xbc>
        else
            rate->last_time = time + diff;
 800468c:	e0bffe17 	ldw	r2,-8(fp)
 8004690:	100d883a 	mov	r6,r2
 8004694:	1005d7fa 	srai	r2,r2,31
 8004698:	100f883a 	mov	r7,r2
 800469c:	e13ffc17 	ldw	r4,-16(fp)
 80046a0:	e17ffd17 	ldw	r5,-12(fp)
 80046a4:	3105883a 	add	r2,r6,r4
 80046a8:	1191803a 	cmpltu	r8,r2,r6
 80046ac:	3947883a 	add	r3,r7,r5
 80046b0:	40c9883a 	add	r4,r8,r3
 80046b4:	2007883a 	mov	r3,r4
 80046b8:	1009883a 	mov	r4,r2
 80046bc:	180b883a 	mov	r5,r3
 80046c0:	e0bfff17 	ldw	r2,-4(fp)
 80046c4:	11000015 	stw	r4,0(r2)
 80046c8:	11400115 	stw	r5,4(r2)
        return 1;
 80046cc:	00800044 	movi	r2,1
 80046d0:	00000106 	br	80046d8 <is_ready+0xc8>
    }
    return 0;
 80046d4:	0005883a 	mov	r2,zero
}
 80046d8:	e037883a 	mov	sp,fp
 80046dc:	df000017 	ldw	fp,0(sp)
 80046e0:	dec00104 	addi	sp,sp,4
 80046e4:	f800283a 	ret

080046e8 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 80046e8:	defff204 	addi	sp,sp,-56
 80046ec:	dfc00d15 	stw	ra,52(sp)
 80046f0:	df000c15 	stw	fp,48(sp)
 80046f4:	df000c04 	addi	fp,sp,48
 80046f8:	2005883a 	mov	r2,r4
 80046fc:	e17fff15 	stw	r5,-4(fp)
 8004700:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8004704:	00821e34 	movhi	r2,2168
 8004708:	10b57f04 	addi	r2,r2,-10756
 800470c:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8004710:	00821e34 	movhi	r2,2168
 8004714:	10b57f04 	addi	r2,r2,-10756
 8004718:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 800471c:	e0fffe03 	ldbu	r3,-8(fp)
 8004720:	00821e34 	movhi	r2,2168
 8004724:	10b57f04 	addi	r2,r2,-10756
 8004728:	d8800415 	stw	r2,16(sp)
 800472c:	00800244 	movi	r2,9
 8004730:	d8800315 	stw	r2,12(sp)
 8004734:	d8000215 	stw	zero,8(sp)
 8004738:	00800084 	movi	r2,2
 800473c:	d8800115 	stw	r2,4(sp)
 8004740:	d8000015 	stw	zero,0(sp)
 8004744:	01c00184 	movi	r7,6
 8004748:	01802004 	movi	r6,128
 800474c:	000b883a 	mov	r5,zero
 8004750:	1809883a 	mov	r4,r3
 8004754:	80057600 	call	8005760 <XferCtrlReq>
 8004758:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 800475c:	e0bffc03 	ldbu	r2,-16(fp)
 8004760:	10000226 	beq	r2,zero,800476c <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 8004764:	0005883a 	mov	r2,zero
 8004768:	0000dc06 	br	8004adc <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 800476c:	e0bffa17 	ldw	r2,-24(fp)
 8004770:	1080008b 	ldhu	r2,2(r2)
 8004774:	10bfffcc 	andi	r2,r2,65535
 8004778:	10804070 	cmpltui	r2,r2,257
 800477c:	1000031e 	bne	r2,zero,800478c <HIDMProbe+0xa4>
		total_length = 256;
 8004780:	00804004 	movi	r2,256
 8004784:	e0bff90d 	sth	r2,-28(fp)
 8004788:	00000306 	br	8004798 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 800478c:	e0bffa17 	ldw	r2,-24(fp)
 8004790:	1080008b 	ldhu	r2,2(r2)
 8004794:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8004798:	e13ffe03 	ldbu	r4,-8(fp)
 800479c:	e0fff90b 	ldhu	r3,-28(fp)
 80047a0:	00821e34 	movhi	r2,2168
 80047a4:	10b57f04 	addi	r2,r2,-10756
 80047a8:	d8800415 	stw	r2,16(sp)
 80047ac:	d8c00315 	stw	r3,12(sp)
 80047b0:	d8000215 	stw	zero,8(sp)
 80047b4:	00800084 	movi	r2,2
 80047b8:	d8800115 	stw	r2,4(sp)
 80047bc:	d8000015 	stw	zero,0(sp)
 80047c0:	01c00184 	movi	r7,6
 80047c4:	01802004 	movi	r6,128
 80047c8:	000b883a 	mov	r5,zero
 80047cc:	80057600 	call	8005760 <XferCtrlReq>
 80047d0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 80047d4:	e0bffc03 	ldbu	r2,-16(fp)
 80047d8:	10000226 	beq	r2,zero,80047e4 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 80047dc:	0005883a 	mov	r2,zero
 80047e0:	0000be06 	br	8004adc <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 80047e4:	e0bffa17 	ldw	r2,-24(fp)
 80047e8:	10800143 	ldbu	r2,5(r2)
 80047ec:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 80047f0:	0000b306 	br	8004ac0 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 80047f4:	e0bffa17 	ldw	r2,-24(fp)
 80047f8:	10800043 	ldbu	r2,1(r2)
 80047fc:	10803fcc 	andi	r2,r2,255
 8004800:	10800120 	cmpeqi	r2,r2,4
 8004804:	1000091e 	bne	r2,zero,800482c <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8004808:	e0bffa17 	ldw	r2,-24(fp)
 800480c:	10800003 	ldbu	r2,0(r2)
 8004810:	10803fcc 	andi	r2,r2,255
 8004814:	e0fffb17 	ldw	r3,-20(fp)
 8004818:	1885883a 	add	r2,r3,r2
 800481c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8004820:	e0bffb17 	ldw	r2,-20(fp)
 8004824:	e0bffa15 	stw	r2,-24(fp)
 8004828:	0000a506 	br	8004ac0 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 800482c:	e0bffa17 	ldw	r2,-24(fp)
 8004830:	10800143 	ldbu	r2,5(r2)
 8004834:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8004838:	e0bffa17 	ldw	r2,-24(fp)
 800483c:	10800183 	ldbu	r2,6(r2)
 8004840:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8004844:	e0bffa17 	ldw	r2,-24(fp)
 8004848:	108001c3 	ldbu	r2,7(r2)
 800484c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8004850:	e0bffc83 	ldbu	r2,-14(fp)
 8004854:	108000d8 	cmpnei	r2,r2,3
 8004858:	1000971e 	bne	r2,zero,8004ab8 <HIDMProbe+0x3d0>
 800485c:	e0bffcc3 	ldbu	r2,-13(fp)
 8004860:	10800058 	cmpnei	r2,r2,1
 8004864:	1000941e 	bne	r2,zero,8004ab8 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8004868:	e0bffd03 	ldbu	r2,-12(fp)
 800486c:	10800098 	cmpnei	r2,r2,2
 8004870:	1000911e 	bne	r2,zero,8004ab8 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8004874:	e0fffe03 	ldbu	r3,-8(fp)
 8004878:	00821e34 	movhi	r2,2168
 800487c:	10b5bf04 	addi	r2,r2,-10500
 8004880:	180690fa 	slli	r3,r3,3
 8004884:	10c5883a 	add	r2,r2,r3
 8004888:	10800104 	addi	r2,r2,4
 800488c:	00c00084 	movi	r3,2
 8004890:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8004894:	e0fffe03 	ldbu	r3,-8(fp)
 8004898:	00821e34 	movhi	r2,2168
 800489c:	10b5bf04 	addi	r2,r2,-10500
 80048a0:	180690fa 	slli	r3,r3,3
 80048a4:	10c5883a 	add	r2,r2,r3
 80048a8:	10800017 	ldw	r2,0(r2)
 80048ac:	1080008b 	ldhu	r2,2(r2)
 80048b0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 80048b4:	8004ef80 	call	8004ef8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 80048b8:	e0fffe03 	ldbu	r3,-8(fp)
 80048bc:	00821e34 	movhi	r2,2168
 80048c0:	10b5bf04 	addi	r2,r2,-10500
 80048c4:	180690fa 	slli	r3,r3,3
 80048c8:	10c7883a 	add	r3,r2,r3
 80048cc:	00821974 	movhi	r2,2149
 80048d0:	10856b04 	addi	r2,r2,5548
 80048d4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 80048d8:	e0fffe03 	ldbu	r3,-8(fp)
 80048dc:	00821e34 	movhi	r2,2168
 80048e0:	10b5bf04 	addi	r2,r2,-10500
 80048e4:	180690fa 	slli	r3,r3,3
 80048e8:	10c5883a 	add	r2,r2,r3
 80048ec:	10800017 	ldw	r2,0(r2)
 80048f0:	e0fffd43 	ldbu	r3,-11(fp)
 80048f4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 80048f8:	e0bffa17 	ldw	r2,-24(fp)
 80048fc:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 8004900:	d0a6e6c5 	stb	r2,-25701(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 8004904:	e0bffe03 	ldbu	r2,-8(fp)
 8004908:	d0a6e685 	stb	r2,-25702(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 800490c:	e0bffa17 	ldw	r2,-24(fp)
 8004910:	10800003 	ldbu	r2,0(r2)
 8004914:	10803fcc 	andi	r2,r2,255
 8004918:	e0fffb17 	ldw	r3,-20(fp)
 800491c:	1885883a 	add	r2,r3,r2
 8004920:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8004924:	e0bffb17 	ldw	r2,-20(fp)
 8004928:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 800492c:	00005b06 	br	8004a9c <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8004930:	e0bffa17 	ldw	r2,-24(fp)
 8004934:	10800043 	ldbu	r2,1(r2)
 8004938:	10803fcc 	andi	r2,r2,255
 800493c:	10800160 	cmpeqi	r2,r2,5
 8004940:	1000091e 	bne	r2,zero,8004968 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8004944:	e0bffa17 	ldw	r2,-24(fp)
 8004948:	10800003 	ldbu	r2,0(r2)
 800494c:	10803fcc 	andi	r2,r2,255
 8004950:	e0fffb17 	ldw	r3,-20(fp)
 8004954:	1885883a 	add	r2,r3,r2
 8004958:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 800495c:	e0bffb17 	ldw	r2,-20(fp)
 8004960:	e0bffa15 	stw	r2,-24(fp)
 8004964:	00004d06 	br	8004a9c <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8004968:	e0fffe03 	ldbu	r3,-8(fp)
 800496c:	00821e34 	movhi	r2,2168
 8004970:	10b5bf04 	addi	r2,r2,-10500
 8004974:	180690fa 	slli	r3,r3,3
 8004978:	10c5883a 	add	r2,r2,r3
 800497c:	10800017 	ldw	r2,0(r2)
 8004980:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8004984:	e0fffa17 	ldw	r3,-24(fp)
 8004988:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 800498c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8004990:	e0fffe03 	ldbu	r3,-8(fp)
 8004994:	00821e34 	movhi	r2,2168
 8004998:	10b5bf04 	addi	r2,r2,-10500
 800499c:	180690fa 	slli	r3,r3,3
 80049a0:	10c5883a 	add	r2,r2,r3
 80049a4:	10800017 	ldw	r2,0(r2)
 80049a8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 80049ac:	e0fffa17 	ldw	r3,-24(fp)
 80049b0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 80049b4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80049b8:	e0fffe03 	ldbu	r3,-8(fp)
 80049bc:	00821e34 	movhi	r2,2168
 80049c0:	10b5bf04 	addi	r2,r2,-10500
 80049c4:	180690fa 	slli	r3,r3,3
 80049c8:	10c5883a 	add	r2,r2,r3
 80049cc:	10800017 	ldw	r2,0(r2)
 80049d0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 80049d4:	e0fffa17 	ldw	r3,-24(fp)
 80049d8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 80049dc:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 80049e0:	e0fffe03 	ldbu	r3,-8(fp)
 80049e4:	00821e34 	movhi	r2,2168
 80049e8:	10b5bf04 	addi	r2,r2,-10500
 80049ec:	180690fa 	slli	r3,r3,3
 80049f0:	10c5883a 	add	r2,r2,r3
 80049f4:	10800017 	ldw	r2,0(r2)
 80049f8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 80049fc:	e0fffa17 	ldw	r3,-24(fp)
 8004a00:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8004a04:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8004a08:	e0fffe03 	ldbu	r3,-8(fp)
 8004a0c:	e0bffc43 	ldbu	r2,-15(fp)
 8004a10:	d8000415 	stw	zero,16(sp)
 8004a14:	d8000315 	stw	zero,12(sp)
 8004a18:	d8000215 	stw	zero,8(sp)
 8004a1c:	d8000115 	stw	zero,4(sp)
 8004a20:	d8800015 	stw	r2,0(sp)
 8004a24:	01c00244 	movi	r7,9
 8004a28:	000d883a 	mov	r6,zero
 8004a2c:	000b883a 	mov	r5,zero
 8004a30:	1809883a 	mov	r4,r3
 8004a34:	80057600 	call	8005760 <XferCtrlReq>
 8004a38:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8004a3c:	e0bffc03 	ldbu	r2,-16(fp)
 8004a40:	10000226 	beq	r2,zero,8004a4c <HIDMProbe+0x364>
							return (FALSE);
 8004a44:	0005883a 	mov	r2,zero
 8004a48:	00002406 	br	8004adc <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8004a4c:	e0fffe03 	ldbu	r3,-8(fp)
 8004a50:	d0a6e6c3 	ldbu	r2,-25701(gp)
 8004a54:	10803fcc 	andi	r2,r2,255
 8004a58:	d8000415 	stw	zero,16(sp)
 8004a5c:	d8000315 	stw	zero,12(sp)
 8004a60:	d8800215 	stw	r2,8(sp)
 8004a64:	d8000115 	stw	zero,4(sp)
 8004a68:	d8000015 	stw	zero,0(sp)
 8004a6c:	01c002c4 	movi	r7,11
 8004a70:	01800844 	movi	r6,33
 8004a74:	000b883a 	mov	r5,zero
 8004a78:	1809883a 	mov	r4,r3
 8004a7c:	80057600 	call	8005760 <XferCtrlReq>
 8004a80:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8004a84:	e0bffc03 	ldbu	r2,-16(fp)
 8004a88:	10000226 	beq	r2,zero,8004a94 <HIDMProbe+0x3ac>
							return (FALSE);
 8004a8c:	0005883a 	mov	r2,zero
 8004a90:	00001206 	br	8004adc <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 8004a94:	00800044 	movi	r2,1
 8004a98:	00001006 	br	8004adc <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8004a9c:	e0fff90b 	ldhu	r3,-28(fp)
 8004aa0:	00821e34 	movhi	r2,2168
 8004aa4:	10b57f04 	addi	r2,r2,-10756
 8004aa8:	1885883a 	add	r2,r3,r2
 8004aac:	e0fffb17 	ldw	r3,-20(fp)
 8004ab0:	18bf9f36 	bltu	r3,r2,8004930 <__alt_data_end+0xfc004930>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8004ab4:	00000206 	br	8004ac0 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8004ab8:	0005883a 	mov	r2,zero
 8004abc:	00000706 	br	8004adc <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8004ac0:	e0fff90b 	ldhu	r3,-28(fp)
 8004ac4:	00821e34 	movhi	r2,2168
 8004ac8:	10b57f04 	addi	r2,r2,-10756
 8004acc:	1885883a 	add	r2,r3,r2
 8004ad0:	e0fffb17 	ldw	r3,-20(fp)
 8004ad4:	18bf4736 	bltu	r3,r2,80047f4 <__alt_data_end+0xfc0047f4>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8004ad8:	0005883a 	mov	r2,zero
}
 8004adc:	e037883a 	mov	sp,fp
 8004ae0:	dfc00117 	ldw	ra,4(sp)
 8004ae4:	df000017 	ldw	fp,0(sp)
 8004ae8:	dec00204 	addi	sp,sp,8
 8004aec:	f800283a 	ret

08004af0 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8004af0:	defff204 	addi	sp,sp,-56
 8004af4:	dfc00d15 	stw	ra,52(sp)
 8004af8:	df000c15 	stw	fp,48(sp)
 8004afc:	df000c04 	addi	fp,sp,48
 8004b00:	2005883a 	mov	r2,r4
 8004b04:	e17fff15 	stw	r5,-4(fp)
 8004b08:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8004b0c:	00821e34 	movhi	r2,2168
 8004b10:	10b57f04 	addi	r2,r2,-10756
 8004b14:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 8004b18:	00821e34 	movhi	r2,2168
 8004b1c:	10b57f04 	addi	r2,r2,-10756
 8004b20:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8004b24:	e0fffe03 	ldbu	r3,-8(fp)
 8004b28:	00821e34 	movhi	r2,2168
 8004b2c:	10b57f04 	addi	r2,r2,-10756
 8004b30:	d8800415 	stw	r2,16(sp)
 8004b34:	00800244 	movi	r2,9
 8004b38:	d8800315 	stw	r2,12(sp)
 8004b3c:	d8000215 	stw	zero,8(sp)
 8004b40:	00800084 	movi	r2,2
 8004b44:	d8800115 	stw	r2,4(sp)
 8004b48:	d8000015 	stw	zero,0(sp)
 8004b4c:	01c00184 	movi	r7,6
 8004b50:	01802004 	movi	r6,128
 8004b54:	000b883a 	mov	r5,zero
 8004b58:	1809883a 	mov	r4,r3
 8004b5c:	80057600 	call	8005760 <XferCtrlReq>
 8004b60:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 8004b64:	e0bffc03 	ldbu	r2,-16(fp)
 8004b68:	10000226 	beq	r2,zero,8004b74 <HIDKProbe+0x84>
		return (FALSE);
 8004b6c:	0005883a 	mov	r2,zero
 8004b70:	0000dc06 	br	8004ee4 <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8004b74:	e0bffa17 	ldw	r2,-24(fp)
 8004b78:	1080008b 	ldhu	r2,2(r2)
 8004b7c:	10bfffcc 	andi	r2,r2,65535
 8004b80:	10804070 	cmpltui	r2,r2,257
 8004b84:	1000031e 	bne	r2,zero,8004b94 <HIDKProbe+0xa4>
		total_length = 256;
 8004b88:	00804004 	movi	r2,256
 8004b8c:	e0bff90d 	sth	r2,-28(fp)
 8004b90:	00000306 	br	8004ba0 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8004b94:	e0bffa17 	ldw	r2,-24(fp)
 8004b98:	1080008b 	ldhu	r2,2(r2)
 8004b9c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8004ba0:	e13ffe03 	ldbu	r4,-8(fp)
 8004ba4:	e0fff90b 	ldhu	r3,-28(fp)
 8004ba8:	00821e34 	movhi	r2,2168
 8004bac:	10b57f04 	addi	r2,r2,-10756
 8004bb0:	d8800415 	stw	r2,16(sp)
 8004bb4:	d8c00315 	stw	r3,12(sp)
 8004bb8:	d8000215 	stw	zero,8(sp)
 8004bbc:	00800084 	movi	r2,2
 8004bc0:	d8800115 	stw	r2,4(sp)
 8004bc4:	d8000015 	stw	zero,0(sp)
 8004bc8:	01c00184 	movi	r7,6
 8004bcc:	01802004 	movi	r6,128
 8004bd0:	000b883a 	mov	r5,zero
 8004bd4:	80057600 	call	8005760 <XferCtrlReq>
 8004bd8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 8004bdc:	e0bffc03 	ldbu	r2,-16(fp)
 8004be0:	10000226 	beq	r2,zero,8004bec <HIDKProbe+0xfc>
		return (FALSE);
 8004be4:	0005883a 	mov	r2,zero
 8004be8:	0000be06 	br	8004ee4 <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8004bec:	e0bffa17 	ldw	r2,-24(fp)
 8004bf0:	10800143 	ldbu	r2,5(r2)
 8004bf4:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8004bf8:	0000b306 	br	8004ec8 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8004bfc:	e0bffa17 	ldw	r2,-24(fp)
 8004c00:	10800043 	ldbu	r2,1(r2)
 8004c04:	10803fcc 	andi	r2,r2,255
 8004c08:	10800120 	cmpeqi	r2,r2,4
 8004c0c:	1000091e 	bne	r2,zero,8004c34 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8004c10:	e0bffa17 	ldw	r2,-24(fp)
 8004c14:	10800003 	ldbu	r2,0(r2)
 8004c18:	10803fcc 	andi	r2,r2,255
 8004c1c:	e0fffb17 	ldw	r3,-20(fp)
 8004c20:	1885883a 	add	r2,r3,r2
 8004c24:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8004c28:	e0bffb17 	ldw	r2,-20(fp)
 8004c2c:	e0bffa15 	stw	r2,-24(fp)
 8004c30:	0000a506 	br	8004ec8 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8004c34:	e0bffa17 	ldw	r2,-24(fp)
 8004c38:	10800143 	ldbu	r2,5(r2)
 8004c3c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8004c40:	e0bffa17 	ldw	r2,-24(fp)
 8004c44:	10800183 	ldbu	r2,6(r2)
 8004c48:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8004c4c:	e0bffa17 	ldw	r2,-24(fp)
 8004c50:	108001c3 	ldbu	r2,7(r2)
 8004c54:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8004c58:	e0bffc83 	ldbu	r2,-14(fp)
 8004c5c:	108000d8 	cmpnei	r2,r2,3
 8004c60:	1000971e 	bne	r2,zero,8004ec0 <HIDKProbe+0x3d0>
 8004c64:	e0bffcc3 	ldbu	r2,-13(fp)
 8004c68:	10800058 	cmpnei	r2,r2,1
 8004c6c:	1000941e 	bne	r2,zero,8004ec0 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8004c70:	e0bffd03 	ldbu	r2,-12(fp)
 8004c74:	10800058 	cmpnei	r2,r2,1
 8004c78:	1000911e 	bne	r2,zero,8004ec0 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8004c7c:	e0fffe03 	ldbu	r3,-8(fp)
 8004c80:	00821e34 	movhi	r2,2168
 8004c84:	10b5bf04 	addi	r2,r2,-10500
 8004c88:	180690fa 	slli	r3,r3,3
 8004c8c:	10c5883a 	add	r2,r2,r3
 8004c90:	10800104 	addi	r2,r2,4
 8004c94:	00c00044 	movi	r3,1
 8004c98:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8004c9c:	e0fffe03 	ldbu	r3,-8(fp)
 8004ca0:	00821e34 	movhi	r2,2168
 8004ca4:	10b5bf04 	addi	r2,r2,-10500
 8004ca8:	180690fa 	slli	r3,r3,3
 8004cac:	10c5883a 	add	r2,r2,r3
 8004cb0:	10800017 	ldw	r2,0(r2)
 8004cb4:	1080008b 	ldhu	r2,2(r2)
 8004cb8:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 8004cbc:	8004ef80 	call	8004ef8 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8004cc0:	e0fffe03 	ldbu	r3,-8(fp)
 8004cc4:	00821e34 	movhi	r2,2168
 8004cc8:	10b5bf04 	addi	r2,r2,-10500
 8004ccc:	180690fa 	slli	r3,r3,3
 8004cd0:	10c7883a 	add	r3,r2,r3
 8004cd4:	00821974 	movhi	r2,2149
 8004cd8:	10856b04 	addi	r2,r2,5548
 8004cdc:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8004ce0:	e0fffe03 	ldbu	r3,-8(fp)
 8004ce4:	00821e34 	movhi	r2,2168
 8004ce8:	10b5bf04 	addi	r2,r2,-10500
 8004cec:	180690fa 	slli	r3,r3,3
 8004cf0:	10c5883a 	add	r2,r2,r3
 8004cf4:	10800017 	ldw	r2,0(r2)
 8004cf8:	e0fffd43 	ldbu	r3,-11(fp)
 8004cfc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8004d00:	e0bffa17 	ldw	r2,-24(fp)
 8004d04:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 8004d08:	d0a6e6c5 	stb	r2,-25701(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 8004d0c:	e0bffe03 	ldbu	r2,-8(fp)
 8004d10:	d0a6e685 	stb	r2,-25702(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8004d14:	e0bffa17 	ldw	r2,-24(fp)
 8004d18:	10800003 	ldbu	r2,0(r2)
 8004d1c:	10803fcc 	andi	r2,r2,255
 8004d20:	e0fffb17 	ldw	r3,-20(fp)
 8004d24:	1885883a 	add	r2,r3,r2
 8004d28:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8004d2c:	e0bffb17 	ldw	r2,-20(fp)
 8004d30:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 8004d34:	00005b06 	br	8004ea4 <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 8004d38:	e0bffa17 	ldw	r2,-24(fp)
 8004d3c:	10800043 	ldbu	r2,1(r2)
 8004d40:	10803fcc 	andi	r2,r2,255
 8004d44:	10800160 	cmpeqi	r2,r2,5
 8004d48:	1000091e 	bne	r2,zero,8004d70 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8004d4c:	e0bffa17 	ldw	r2,-24(fp)
 8004d50:	10800003 	ldbu	r2,0(r2)
 8004d54:	10803fcc 	andi	r2,r2,255
 8004d58:	e0fffb17 	ldw	r3,-20(fp)
 8004d5c:	1885883a 	add	r2,r3,r2
 8004d60:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8004d64:	e0bffb17 	ldw	r2,-20(fp)
 8004d68:	e0bffa15 	stw	r2,-24(fp)
 8004d6c:	00004d06 	br	8004ea4 <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8004d70:	e0fffe03 	ldbu	r3,-8(fp)
 8004d74:	00821e34 	movhi	r2,2168
 8004d78:	10b5bf04 	addi	r2,r2,-10500
 8004d7c:	180690fa 	slli	r3,r3,3
 8004d80:	10c5883a 	add	r2,r2,r3
 8004d84:	10800017 	ldw	r2,0(r2)
 8004d88:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8004d8c:	e0fffa17 	ldw	r3,-24(fp)
 8004d90:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8004d94:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8004d98:	e0fffe03 	ldbu	r3,-8(fp)
 8004d9c:	00821e34 	movhi	r2,2168
 8004da0:	10b5bf04 	addi	r2,r2,-10500
 8004da4:	180690fa 	slli	r3,r3,3
 8004da8:	10c5883a 	add	r2,r2,r3
 8004dac:	10800017 	ldw	r2,0(r2)
 8004db0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8004db4:	e0fffa17 	ldw	r3,-24(fp)
 8004db8:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 8004dbc:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8004dc0:	e0fffe03 	ldbu	r3,-8(fp)
 8004dc4:	00821e34 	movhi	r2,2168
 8004dc8:	10b5bf04 	addi	r2,r2,-10500
 8004dcc:	180690fa 	slli	r3,r3,3
 8004dd0:	10c5883a 	add	r2,r2,r3
 8004dd4:	10800017 	ldw	r2,0(r2)
 8004dd8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8004ddc:	e0fffa17 	ldw	r3,-24(fp)
 8004de0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 8004de4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8004de8:	e0fffe03 	ldbu	r3,-8(fp)
 8004dec:	00821e34 	movhi	r2,2168
 8004df0:	10b5bf04 	addi	r2,r2,-10500
 8004df4:	180690fa 	slli	r3,r3,3
 8004df8:	10c5883a 	add	r2,r2,r3
 8004dfc:	10800017 	ldw	r2,0(r2)
 8004e00:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8004e04:	e0fffa17 	ldw	r3,-24(fp)
 8004e08:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 8004e0c:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8004e10:	e0fffe03 	ldbu	r3,-8(fp)
 8004e14:	e0bffc43 	ldbu	r2,-15(fp)
 8004e18:	d8000415 	stw	zero,16(sp)
 8004e1c:	d8000315 	stw	zero,12(sp)
 8004e20:	d8000215 	stw	zero,8(sp)
 8004e24:	d8000115 	stw	zero,4(sp)
 8004e28:	d8800015 	stw	r2,0(sp)
 8004e2c:	01c00244 	movi	r7,9
 8004e30:	000d883a 	mov	r6,zero
 8004e34:	000b883a 	mov	r5,zero
 8004e38:	1809883a 	mov	r4,r3
 8004e3c:	80057600 	call	8005760 <XferCtrlReq>
 8004e40:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 8004e44:	e0bffc03 	ldbu	r2,-16(fp)
 8004e48:	10000226 	beq	r2,zero,8004e54 <HIDKProbe+0x364>
							return (FALSE);
 8004e4c:	0005883a 	mov	r2,zero
 8004e50:	00002406 	br	8004ee4 <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8004e54:	e0fffe03 	ldbu	r3,-8(fp)
 8004e58:	d0a6e6c3 	ldbu	r2,-25701(gp)
 8004e5c:	10803fcc 	andi	r2,r2,255
 8004e60:	d8000415 	stw	zero,16(sp)
 8004e64:	d8000315 	stw	zero,12(sp)
 8004e68:	d8800215 	stw	r2,8(sp)
 8004e6c:	d8000115 	stw	zero,4(sp)
 8004e70:	d8000015 	stw	zero,0(sp)
 8004e74:	01c002c4 	movi	r7,11
 8004e78:	01800844 	movi	r6,33
 8004e7c:	000b883a 	mov	r5,zero
 8004e80:	1809883a 	mov	r4,r3
 8004e84:	80057600 	call	8005760 <XferCtrlReq>
 8004e88:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8004e8c:	e0bffc03 	ldbu	r2,-16(fp)
 8004e90:	10000226 	beq	r2,zero,8004e9c <HIDKProbe+0x3ac>
							return (FALSE);
 8004e94:	0005883a 	mov	r2,zero
 8004e98:	00001206 	br	8004ee4 <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 8004e9c:	00800044 	movi	r2,1
 8004ea0:	00001006 	br	8004ee4 <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 8004ea4:	e0fff90b 	ldhu	r3,-28(fp)
 8004ea8:	00821e34 	movhi	r2,2168
 8004eac:	10b57f04 	addi	r2,r2,-10756
 8004eb0:	1885883a 	add	r2,r3,r2
 8004eb4:	e0fffb17 	ldw	r3,-20(fp)
 8004eb8:	18bf9f36 	bltu	r3,r2,8004d38 <__alt_data_end+0xfc004d38>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8004ebc:	00000206 	br	8004ec8 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8004ec0:	0005883a 	mov	r2,zero
 8004ec4:	00000706 	br	8004ee4 <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8004ec8:	e0fff90b 	ldhu	r3,-28(fp)
 8004ecc:	00821e34 	movhi	r2,2168
 8004ed0:	10b57f04 	addi	r2,r2,-10756
 8004ed4:	1885883a 	add	r2,r3,r2
 8004ed8:	e0fffb17 	ldw	r3,-20(fp)
 8004edc:	18bf4736 	bltu	r3,r2,8004bfc <__alt_data_end+0xfc004bfc>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8004ee0:	0005883a 	mov	r2,zero
}
 8004ee4:	e037883a 	mov	sp,fp
 8004ee8:	dfc00117 	ldw	ra,4(sp)
 8004eec:	df000017 	ldw	fp,0(sp)
 8004ef0:	dec00204 	addi	sp,sp,8
 8004ef4:	f800283a 	ret

08004ef8 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8004ef8:	deffff04 	addi	sp,sp,-4
 8004efc:	df000015 	stw	fp,0(sp)
 8004f00:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8004f04:	00821974 	movhi	r2,2149
 8004f08:	10856b04 	addi	r2,r2,5548
 8004f0c:	00c01004 	movi	r3,64
 8004f10:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8004f14:	00821974 	movhi	r2,2149
 8004f18:	10856b04 	addi	r2,r2,5548
 8004f1c:	00c00404 	movi	r3,16
 8004f20:	10c00385 	stb	r3,14(r2)
}
 8004f24:	0001883a 	nop
 8004f28:	e037883a 	mov	sp,fp
 8004f2c:	df000017 	ldw	fp,0(sp)
 8004f30:	dec00104 	addi	sp,sp,4
 8004f34:	f800283a 	ret

08004f38 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 8004f38:	defffb04 	addi	sp,sp,-20
 8004f3c:	dfc00415 	stw	ra,16(sp)
 8004f40:	df000315 	stw	fp,12(sp)
 8004f44:	df000304 	addi	fp,sp,12
 8004f48:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8004f4c:	d0a6e683 	ldbu	r2,-25702(gp)
 8004f50:	10803fcc 	andi	r2,r2,255
 8004f54:	100b883a 	mov	r5,r2
 8004f58:	01003804 	movi	r4,224
 8004f5c:	800512c0 	call	800512c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 5, (BYTE*) buf,
 8004f60:	d0a6e683 	ldbu	r2,-25702(gp)
 8004f64:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8004f68:	d0a6e683 	ldbu	r2,-25702(gp)
 8004f6c:	10c03fcc 	andi	r3,r2,255
 8004f70:	00821e34 	movhi	r2,2168
 8004f74:	10b5bf04 	addi	r2,r2,-10500
 8004f78:	180690fa 	slli	r3,r3,3
 8004f7c:	10c5883a 	add	r2,r2,r3
 8004f80:	10800017 	ldw	r2,0(r2)
 8004f84:	10800204 	addi	r2,r2,8
 8004f88:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 5, (BYTE*) buf,
 8004f8c:	10803fcc 	andi	r2,r2,255
 8004f90:	d8800015 	stw	r2,0(sp)
 8004f94:	e1ffff17 	ldw	r7,-4(fp)
 8004f98:	01800144 	movi	r6,5
 8004f9c:	01400044 	movi	r5,1
 8004fa0:	8005b840 	call	8005b84 <XferInTransfer>
 8004fa4:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	buf->y = -buf->y;
 8004fa8:	e0bfff17 	ldw	r2,-4(fp)
 8004fac:	10800103 	ldbu	r2,4(r2)
 8004fb0:	0085c83a 	sub	r2,zero,r2
 8004fb4:	1007883a 	mov	r3,r2
 8004fb8:	e0bfff17 	ldw	r2,-4(fp)
 8004fbc:	10c00105 	stb	r3,4(r2)
	return (rcode);
 8004fc0:	e0bffe03 	ldbu	r2,-8(fp)
}
 8004fc4:	e037883a 	mov	sp,fp
 8004fc8:	dfc00117 	ldw	ra,4(sp)
 8004fcc:	df000017 	ldw	fp,0(sp)
 8004fd0:	dec00204 	addi	sp,sp,8
 8004fd4:	f800283a 	ret

08004fd8 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8004fd8:	defffb04 	addi	sp,sp,-20
 8004fdc:	dfc00415 	stw	ra,16(sp)
 8004fe0:	df000315 	stw	fp,12(sp)
 8004fe4:	df000304 	addi	fp,sp,12
 8004fe8:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8004fec:	d0a6e683 	ldbu	r2,-25702(gp)
 8004ff0:	10803fcc 	andi	r2,r2,255
 8004ff4:	100b883a 	mov	r5,r2
 8004ff8:	01003804 	movi	r4,224
 8004ffc:	800512c0 	call	800512c <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8005000:	d0a6e683 	ldbu	r2,-25702(gp)
 8005004:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8005008:	d0a6e683 	ldbu	r2,-25702(gp)
 800500c:	10c03fcc 	andi	r3,r2,255
 8005010:	00821e34 	movhi	r2,2168
 8005014:	10b5bf04 	addi	r2,r2,-10500
 8005018:	180690fa 	slli	r3,r3,3
 800501c:	10c5883a 	add	r2,r2,r3
 8005020:	10800017 	ldw	r2,0(r2)
 8005024:	10800204 	addi	r2,r2,8
 8005028:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 800502c:	10803fcc 	andi	r2,r2,255
 8005030:	d8800015 	stw	r2,0(sp)
 8005034:	e1ffff17 	ldw	r7,-4(fp)
 8005038:	01800204 	movi	r6,8
 800503c:	01400044 	movi	r5,1
 8005040:	8005b840 	call	8005b84 <XferInTransfer>
 8005044:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 8005048:	e0bffe03 	ldbu	r2,-8(fp)
}
 800504c:	e037883a 	mov	sp,fp
 8005050:	dfc00117 	ldw	ra,4(sp)
 8005054:	df000017 	ldw	fp,0(sp)
 8005058:	dec00204 	addi	sp,sp,8
 800505c:	f800283a 	ret

08005060 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8005060:	defffb04 	addi	sp,sp,-20
 8005064:	df000415 	stw	fp,16(sp)
 8005068:	df000404 	addi	fp,sp,16
 800506c:	2007883a 	mov	r3,r4
 8005070:	2805883a 	mov	r2,r5
 8005074:	e1bffe15 	stw	r6,-8(fp)
 8005078:	e1ffff15 	stw	r7,-4(fp)
 800507c:	e0fffc05 	stb	r3,-16(fp)
 8005080:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 8005084:	0005883a 	mov	r2,zero
}
 8005088:	e037883a 	mov	sp,fp
 800508c:	df000017 	ldw	fp,0(sp)
 8005090:	dec00104 	addi	sp,sp,4
 8005094:	f800283a 	ret

08005098 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 8005098:	defffb04 	addi	sp,sp,-20
 800509c:	df000415 	stw	fp,16(sp)
 80050a0:	df000404 	addi	fp,sp,16
 80050a4:	2007883a 	mov	r3,r4
 80050a8:	2805883a 	mov	r2,r5
 80050ac:	e1bffe15 	stw	r6,-8(fp)
 80050b0:	e1ffff15 	stw	r7,-4(fp)
 80050b4:	e0fffc05 	stb	r3,-16(fp)
 80050b8:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 80050bc:	0005883a 	mov	r2,zero
}
 80050c0:	e037883a 	mov	sp,fp
 80050c4:	df000017 	ldw	fp,0(sp)
 80050c8:	dec00104 	addi	sp,sp,4
 80050cc:	f800283a 	ret

080050d0 <SPI_init>:

#define SPI_BASE 	0x20c0
#define MAX_SLAVE	0x00

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 80050d0:	defffc04 	addi	sp,sp,-16
 80050d4:	df000315 	stw	fp,12(sp)
 80050d8:	df000304 	addi	fp,sp,12
 80050dc:	2807883a 	mov	r3,r5
 80050e0:	3005883a 	mov	r2,r6
 80050e4:	e13ffd05 	stb	r4,-12(fp)
 80050e8:	e0fffe05 	stb	r3,-8(fp)
 80050ec:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 80050f0:	0001883a 	nop
 80050f4:	e037883a 	mov	sp,fp
 80050f8:	df000017 	ldw	fp,0(sp)
 80050fc:	dec00104 	addi	sp,sp,4
 8005100:	f800283a 	ret

08005104 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8005104:	defffe04 	addi	sp,sp,-8
 8005108:	df000115 	stw	fp,4(sp)
 800510c:	df000104 	addi	fp,sp,4
 8005110:	2005883a 	mov	r2,r4
 8005114:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
	return 0;
 8005118:	0005883a 	mov	r2,zero
}
 800511c:	e037883a 	mov	sp,fp
 8005120:	df000017 	ldw	fp,0(sp)
 8005124:	dec00104 	addi	sp,sp,4
 8005128:	f800283a 	ret

0800512c <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 800512c:	defff804 	addi	sp,sp,-32
 8005130:	dfc00715 	stw	ra,28(sp)
 8005134:	df000615 	stw	fp,24(sp)
 8005138:	df000604 	addi	fp,sp,24
 800513c:	2007883a 	mov	r3,r4
 8005140:	2805883a 	mov	r2,r5
 8005144:	e0fffe05 	stb	r3,-8(fp)
 8005148:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE data[2] = {reg + 2, val};
 800514c:	e0bffe03 	ldbu	r2,-8(fp)
 8005150:	10800084 	addi	r2,r2,2
 8005154:	e0bffd05 	stb	r2,-12(fp)
 8005158:	e0bfff03 	ldbu	r2,-4(fp)
 800515c:	e0bffd45 	stb	r2,-11(fp)
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 2, data, 0, NULL, 0);
 8005160:	d8000215 	stw	zero,8(sp)
 8005164:	d8000115 	stw	zero,4(sp)
 8005168:	d8000015 	stw	zero,0(sp)
 800516c:	e1fffd04 	addi	r7,fp,-12
 8005170:	01800084 	movi	r6,2
 8005174:	000b883a 	mov	r5,zero
 8005178:	01083004 	movi	r4,8384
 800517c:	80169040 	call	8016904 <alt_avalon_spi_command>
}
 8005180:	0001883a 	nop
 8005184:	e037883a 	mov	sp,fp
 8005188:	dfc00117 	ldw	ra,4(sp)
 800518c:	df000017 	ldw	fp,0(sp)
 8005190:	dec00204 	addi	sp,sp,8
 8005194:	f800283a 	ret

08005198 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8005198:	defff704 	addi	sp,sp,-36
 800519c:	dfc00815 	stw	ra,32(sp)
 80051a0:	df000715 	stw	fp,28(sp)
 80051a4:	df000704 	addi	fp,sp,28
 80051a8:	2007883a 	mov	r3,r4
 80051ac:	2805883a 	mov	r2,r5
 80051b0:	e1bfff15 	stw	r6,-4(fp)
 80051b4:	e0fffd05 	stb	r3,-12(fp)
 80051b8:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	BYTE tmp = reg + 2;
 80051bc:	e0bffd03 	ldbu	r2,-12(fp)
 80051c0:	10800084 	addi	r2,r2,2
 80051c4:	e0bffc05 	stb	r2,-16(fp)
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &tmp, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 80051c8:	00800044 	movi	r2,1
 80051cc:	d8800215 	stw	r2,8(sp)
 80051d0:	d8000115 	stw	zero,4(sp)
 80051d4:	d8000015 	stw	zero,0(sp)
 80051d8:	e1fffc04 	addi	r7,fp,-16
 80051dc:	01800044 	movi	r6,1
 80051e0:	000b883a 	mov	r5,zero
 80051e4:	01083004 	movi	r4,8384
 80051e8:	80169040 	call	8016904 <alt_avalon_spi_command>
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, nbytes, data, 0, NULL, 0);
 80051ec:	e0bffe03 	ldbu	r2,-8(fp)
 80051f0:	d8000215 	stw	zero,8(sp)
 80051f4:	d8000115 	stw	zero,4(sp)
 80051f8:	d8000015 	stw	zero,0(sp)
 80051fc:	e1ffff17 	ldw	r7,-4(fp)
 8005200:	100d883a 	mov	r6,r2
 8005204:	000b883a 	mov	r5,zero
 8005208:	01083004 	movi	r4,8384
 800520c:	80169040 	call	8016904 <alt_avalon_spi_command>
	return (data + nbytes);
 8005210:	e0bffe03 	ldbu	r2,-8(fp)
 8005214:	e0ffff17 	ldw	r3,-4(fp)
 8005218:	1885883a 	add	r2,r3,r2
}
 800521c:	e037883a 	mov	sp,fp
 8005220:	dfc00117 	ldw	ra,4(sp)
 8005224:	df000017 	ldw	fp,0(sp)
 8005228:	dec00204 	addi	sp,sp,8
 800522c:	f800283a 	ret

08005230 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8005230:	defff904 	addi	sp,sp,-28
 8005234:	dfc00615 	stw	ra,24(sp)
 8005238:	df000515 	stw	fp,20(sp)
 800523c:	df000504 	addi	fp,sp,20
 8005240:	2005883a 	mov	r2,r4
 8005244:	e0bfff05 	stb	r2,-4(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val

	BYTE read;
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &reg, 1, &read, 0);
 8005248:	e0ffff04 	addi	r3,fp,-4
 800524c:	d8000215 	stw	zero,8(sp)
 8005250:	e0bffe04 	addi	r2,fp,-8
 8005254:	d8800115 	stw	r2,4(sp)
 8005258:	00800044 	movi	r2,1
 800525c:	d8800015 	stw	r2,0(sp)
 8005260:	180f883a 	mov	r7,r3
 8005264:	01800044 	movi	r6,1
 8005268:	000b883a 	mov	r5,zero
 800526c:	01083004 	movi	r4,8384
 8005270:	80169040 	call	8016904 <alt_avalon_spi_command>
	return read;
 8005274:	e0bffe03 	ldbu	r2,-8(fp)
}
 8005278:	e037883a 	mov	sp,fp
 800527c:	dfc00117 	ldw	ra,4(sp)
 8005280:	df000017 	ldw	fp,0(sp)
 8005284:	dec00204 	addi	sp,sp,8
 8005288:	f800283a 	ret

0800528c <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 800528c:	defff804 	addi	sp,sp,-32
 8005290:	dfc00715 	stw	ra,28(sp)
 8005294:	df000615 	stw	fp,24(sp)
 8005298:	df000604 	addi	fp,sp,24
 800529c:	2007883a 	mov	r3,r4
 80052a0:	2805883a 	mov	r2,r5
 80052a4:	e1bfff15 	stw	r6,-4(fp)
 80052a8:	e0fffd05 	stb	r3,-12(fp)
 80052ac:	e0bffe05 	stb	r2,-8(fp)
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);

	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 80052b0:	00800044 	movi	r2,1
 80052b4:	d8800215 	stw	r2,8(sp)
 80052b8:	d8000115 	stw	zero,4(sp)
 80052bc:	d8000015 	stw	zero,0(sp)
 80052c0:	e1fffd04 	addi	r7,fp,-12
 80052c4:	01800044 	movi	r6,1
 80052c8:	000b883a 	mov	r5,zero
 80052cc:	01083004 	movi	r4,8384
 80052d0:	80169040 	call	8016904 <alt_avalon_spi_command>
	alt_avalon_spi_command(SPI_BASE, MAX_SLAVE, 0, NULL, nbytes, data, 0);
 80052d4:	e0bffe03 	ldbu	r2,-8(fp)
 80052d8:	d8000215 	stw	zero,8(sp)
 80052dc:	e0ffff17 	ldw	r3,-4(fp)
 80052e0:	d8c00115 	stw	r3,4(sp)
 80052e4:	d8800015 	stw	r2,0(sp)
 80052e8:	000f883a 	mov	r7,zero
 80052ec:	000d883a 	mov	r6,zero
 80052f0:	000b883a 	mov	r5,zero
 80052f4:	01083004 	movi	r4,8384
 80052f8:	80169040 	call	8016904 <alt_avalon_spi_command>
	return (data + nbytes);
 80052fc:	e0bffe03 	ldbu	r2,-8(fp)
 8005300:	e0ffff17 	ldw	r3,-4(fp)
 8005304:	1885883a 	add	r2,r3,r2
}
 8005308:	e037883a 	mov	sp,fp
 800530c:	dfc00117 	ldw	ra,4(sp)
 8005310:	df000017 	ldw	fp,0(sp)
 8005314:	dec00204 	addi	sp,sp,8
 8005318:	f800283a 	ret

0800531c <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 800531c:	defffd04 	addi	sp,sp,-12
 8005320:	dfc00215 	stw	ra,8(sp)
 8005324:	df000115 	stw	fp,4(sp)
 8005328:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 800532c:	0007883a 	mov	r3,zero
 8005330:	00884c04 	movi	r2,8496
 8005334:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 8005338:	010003f4 	movhi	r4,15
 800533c:	21109004 	addi	r4,r4,16960
 8005340:	8015c600 	call	8015c60 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8005344:	00c00044 	movi	r3,1
 8005348:	00884c04 	movi	r2,8496
 800534c:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 8005350:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8005354:	01400804 	movi	r5,32
 8005358:	01001e04 	movi	r4,120
 800535c:	800512c0 	call	800512c <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8005360:	000b883a 	mov	r5,zero
 8005364:	01001e04 	movi	r4,120
 8005368:	800512c0 	call	800512c <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 800536c:	00000806 	br	8005390 <MAX3421E_reset+0x74>
		tmp++;                                      //timeout after 256 attempts
 8005370:	e0bfff03 	ldbu	r2,-4(fp)
 8005374:	10800044 	addi	r2,r2,1
 8005378:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 800537c:	e0bfff03 	ldbu	r2,-4(fp)
 8005380:	1000031e 	bne	r2,zero,8005390 <MAX3421E_reset+0x74>
			printf("reset timeout!");
 8005384:	01021974 	movhi	r4,2149
 8005388:	2136d304 	addi	r4,r4,-9396
 800538c:	800a8900 	call	800a890 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8005390:	01001a04 	movi	r4,104
 8005394:	80052300 	call	8005230 <MAXreg_rd>
 8005398:	10803fcc 	andi	r2,r2,255
 800539c:	1080004c 	andi	r2,r2,1
 80053a0:	103ff326 	beq	r2,zero,8005370 <__alt_data_end+0xfc005370>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 80053a4:	0001883a 	nop
 80053a8:	e037883a 	mov	sp,fp
 80053ac:	dfc00117 	ldw	ra,4(sp)
 80053b0:	df000017 	ldw	fp,0(sp)
 80053b4:	dec00204 	addi	sp,sp,8
 80053b8:	f800283a 	ret

080053bc <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 80053bc:	defffe04 	addi	sp,sp,-8
 80053c0:	df000115 	stw	fp,4(sp)
 80053c4:	df000104 	addi	fp,sp,4
 80053c8:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 80053cc:	00800044 	movi	r2,1
}
 80053d0:	e037883a 	mov	sp,fp
 80053d4:	df000017 	ldw	fp,0(sp)
 80053d8:	dec00104 	addi	sp,sp,4
 80053dc:	f800283a 	ret

080053e0 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 80053e0:	defffd04 	addi	sp,sp,-12
 80053e4:	dfc00215 	stw	ra,8(sp)
 80053e8:	df000115 	stw	fp,4(sp)
 80053ec:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 80053f0:	01003e04 	movi	r4,248
 80053f4:	80052300 	call	8005230 <MAXreg_rd>
 80053f8:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 80053fc:	e0ffff03 	ldbu	r3,-4(fp)
 8005400:	00bff004 	movi	r2,-64
 8005404:	1884703a 	and	r2,r3,r2
 8005408:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 800540c:	e0bfff03 	ldbu	r2,-4(fp)
 8005410:	10c01020 	cmpeqi	r3,r2,64
 8005414:	1800221e 	bne	r3,zero,80054a0 <MAX_busprobe+0xc0>
 8005418:	10c01048 	cmpgei	r3,r2,65
 800541c:	1800021e 	bne	r3,zero,8005428 <MAX_busprobe+0x48>
 8005420:	10003b26 	beq	r2,zero,8005510 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8005424:	00004a06 	br	8005550 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 8005428:	10c02020 	cmpeqi	r3,r2,128
 800542c:	1800031e 	bne	r3,zero,800543c <MAX_busprobe+0x5c>
 8005430:	10803020 	cmpeqi	r2,r2,192
 8005434:	1000331e 	bne	r2,zero,8005504 <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8005438:	00004506 	br	8005550 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 800543c:	d0a00503 	ldbu	r2,-32748(gp)
 8005440:	10803fcc 	andi	r2,r2,255
 8005444:	108004e0 	cmpeqi	r2,r2,19
 8005448:	10003e1e 	bne	r2,zero,8005544 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 800544c:	01003604 	movi	r4,216
 8005450:	80052300 	call	8005230 <MAXreg_rd>
 8005454:	10803fcc 	andi	r2,r2,255
 8005458:	1080008c 	andi	r2,r2,2
 800545c:	1000071e 	bne	r2,zero,800547c <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8005460:	01403244 	movi	r5,201
 8005464:	01003604 	movi	r4,216
 8005468:	800512c0 	call	800512c <MAXreg_wr>
				printf("Starting in full speed\n");
 800546c:	01021974 	movhi	r4,2149
 8005470:	2136d704 	addi	r4,r4,-9380
 8005474:	800a98c0 	call	800a98c <puts>
 8005478:	00000606 	br	8005494 <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 800547c:	014032c4 	movi	r5,203
 8005480:	01003604 	movi	r4,216
 8005484:	800512c0 	call	800512c <MAXreg_wr>
				printf("Starting in low speed\n");
 8005488:	01021974 	movhi	r4,2149
 800548c:	2136dd04 	addi	r4,r4,-9356
 8005490:	800a98c0 	call	800a98c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8005494:	00800404 	movi	r2,16
 8005498:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 800549c:	00002906 	br	8005544 <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80054a0:	d0a00503 	ldbu	r2,-32748(gp)
 80054a4:	10803fcc 	andi	r2,r2,255
 80054a8:	108004e0 	cmpeqi	r2,r2,19
 80054ac:	1000271e 	bne	r2,zero,800554c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80054b0:	01003604 	movi	r4,216
 80054b4:	80052300 	call	8005230 <MAXreg_rd>
 80054b8:	10803fcc 	andi	r2,r2,255
 80054bc:	1080008c 	andi	r2,r2,2
 80054c0:	1000071e 	bne	r2,zero,80054e0 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 80054c4:	014032c4 	movi	r5,203
 80054c8:	01003604 	movi	r4,216
 80054cc:	800512c0 	call	800512c <MAXreg_wr>
				printf("Starting in low speed\n");
 80054d0:	01021974 	movhi	r4,2149
 80054d4:	2136dd04 	addi	r4,r4,-9356
 80054d8:	800a98c0 	call	800a98c <puts>
 80054dc:	00000606 	br	80054f8 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80054e0:	01403244 	movi	r5,201
 80054e4:	01003604 	movi	r4,216
 80054e8:	800512c0 	call	800512c <MAXreg_wr>
				printf("Starting in full speed\n");
 80054ec:	01021974 	movhi	r4,2149
 80054f0:	2136d704 	addi	r4,r4,-9380
 80054f4:	800a98c0 	call	800a98c <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80054f8:	00800404 	movi	r2,16
 80054fc:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8005500:	00001206 	br	800554c <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 8005504:	00800104 	movi	r2,4
 8005508:	d0a00505 	stb	r2,-32748(gp)
		break;
 800550c:	00001006 	br	8005550 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 8005510:	d0a00503 	ldbu	r2,-32748(gp)
 8005514:	10803fcc 	andi	r2,r2,255
 8005518:	10803c0c 	andi	r2,r2,240
 800551c:	10000326 	beq	r2,zero,800552c <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8005520:	00800044 	movi	r2,1
 8005524:	d0a00505 	stb	r2,-32748(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 8005528:	00000906 	br	8005550 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 800552c:	01403244 	movi	r5,201
 8005530:	01003604 	movi	r4,216
 8005534:	800512c0 	call	800512c <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8005538:	008000c4 	movi	r2,3
 800553c:	d0a00505 	stb	r2,-32748(gp)
		}
		break;
 8005540:	00000306 	br	8005550 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 8005544:	0001883a 	nop
 8005548:	00000106 	br	8005550 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 800554c:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8005550:	0001883a 	nop
 8005554:	e037883a 	mov	sp,fp
 8005558:	dfc00117 	ldw	ra,4(sp)
 800555c:	df000017 	ldw	fp,0(sp)
 8005560:	dec00204 	addi	sp,sp,8
 8005564:	f800283a 	ret

08005568 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8005568:	defffe04 	addi	sp,sp,-8
 800556c:	dfc00115 	stw	ra,4(sp)
 8005570:	df000015 	stw	fp,0(sp)
 8005574:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8005578:	01400684 	movi	r5,26
 800557c:	01002204 	movi	r4,136
 8005580:	800512c0 	call	800512c <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8005584:	800531c0 	call	800531c <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8005588:	0009883a 	mov	r4,zero
 800558c:	80053bc0 	call	80053bc <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8005590:	01402004 	movi	r5,128
 8005594:	01002e04 	movi	r4,184
 8005598:	800512c0 	call	800512c <MAXreg_wr>
	Vbus_power( ON);
 800559c:	01000044 	movi	r4,1
 80055a0:	80053bc0 	call	80053bc <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 80055a4:	01403444 	movi	r5,209
 80055a8:	01003604 	movi	r4,216
 80055ac:	800512c0 	call	800512c <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 80055b0:	01400804 	movi	r5,32
 80055b4:	01003404 	movi	r4,208
 80055b8:	800512c0 	call	800512c <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 80055bc:	01400104 	movi	r5,4
 80055c0:	01003a04 	movi	r4,232
 80055c4:	800512c0 	call	800512c <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 80055c8:	80053e00 	call	80053e0 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 80055cc:	01400804 	movi	r5,32
 80055d0:	01003204 	movi	r4,200
 80055d4:	800512c0 	call	800512c <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 80055d8:	01400044 	movi	r5,1
 80055dc:	01002004 	movi	r4,128
 80055e0:	800512c0 	call	800512c <MAXreg_wr>
}
 80055e4:	0001883a 	nop
 80055e8:	e037883a 	mov	sp,fp
 80055ec:	dfc00117 	ldw	ra,4(sp)
 80055f0:	df000017 	ldw	fp,0(sp)
 80055f4:	dec00204 	addi	sp,sp,8
 80055f8:	f800283a 	ret

080055fc <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 80055fc:	defffe04 	addi	sp,sp,-8
 8005600:	dfc00115 	stw	ra,4(sp)
 8005604:	df000015 	stw	fp,0(sp)
 8005608:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 800560c:	00885404 	movi	r2,8528
 8005610:	10800037 	ldwio	r2,0(r2)
 8005614:	1000041e 	bne	r2,zero,8005628 <MAX3421E_Task+0x2c>
		printf("MAX interrupt\n\r");
 8005618:	01021974 	movhi	r4,2149
 800561c:	2136e304 	addi	r4,r4,-9332
 8005620:	800a8900 	call	800a890 <printf>
		MaxIntHandler();
 8005624:	80056600 	call	8005660 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8005628:	00885004 	movi	r2,8512
 800562c:	10800037 	ldwio	r2,0(r2)
 8005630:	10800058 	cmpnei	r2,r2,1
 8005634:	1000041e 	bne	r2,zero,8005648 <MAX3421E_Task+0x4c>
		printf("GPX interrupt\n\r");
 8005638:	01021974 	movhi	r4,2149
 800563c:	2136e704 	addi	r4,r4,-9316
 8005640:	800a8900 	call	800a890 <printf>
		MaxGpxHandler();
 8005644:	800572c0 	call	800572c <MaxGpxHandler>
	}
}
 8005648:	0001883a 	nop
 800564c:	e037883a 	mov	sp,fp
 8005650:	dfc00117 	ldw	ra,4(sp)
 8005654:	df000017 	ldw	fp,0(sp)
 8005658:	dec00204 	addi	sp,sp,8
 800565c:	f800283a 	ret

08005660 <MaxIntHandler>:

void MaxIntHandler(void) {
 8005660:	defffd04 	addi	sp,sp,-12
 8005664:	dfc00215 	stw	ra,8(sp)
 8005668:	df000115 	stw	fp,4(sp)
 800566c:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8005670:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8005674:	01003204 	movi	r4,200
 8005678:	80052300 	call	8005230 <MAXreg_rd>
 800567c:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 8005680:	e0bfff43 	ldbu	r2,-3(fp)
 8005684:	100b883a 	mov	r5,r2
 8005688:	01021974 	movhi	r4,2149
 800568c:	2136eb04 	addi	r4,r4,-9300
 8005690:	800a8900 	call	800a890 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8005694:	e0bfff43 	ldbu	r2,-3(fp)
 8005698:	1080100c 	andi	r2,r2,64
 800569c:	10000326 	beq	r2,zero,80056ac <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 80056a0:	e0bfff03 	ldbu	r2,-4(fp)
 80056a4:	10801014 	ori	r2,r2,64
 80056a8:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 80056ac:	e0bfff43 	ldbu	r2,-3(fp)
 80056b0:	1080080c 	andi	r2,r2,32
 80056b4:	10000426 	beq	r2,zero,80056c8 <MaxIntHandler+0x68>
		MAX_busprobe();
 80056b8:	80053e00 	call	80053e0 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 80056bc:	e0bfff03 	ldbu	r2,-4(fp)
 80056c0:	10800814 	ori	r2,r2,32
 80056c4:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 80056c8:	e0bfff43 	ldbu	r2,-3(fp)
 80056cc:	1080020c 	andi	r2,r2,8
 80056d0:	10000326 	beq	r2,zero,80056e0 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 80056d4:	000b883a 	mov	r5,zero
 80056d8:	01000e04 	movi	r4,56
 80056dc:	800512c0 	call	800512c <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 80056e0:	e0bfff43 	ldbu	r2,-3(fp)
 80056e4:	1080004c 	andi	r2,r2,1
 80056e8:	10000626 	beq	r2,zero,8005704 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 80056ec:	d0a00503 	ldbu	r2,-32748(gp)
 80056f0:	10800044 	addi	r2,r2,1
 80056f4:	d0a00505 	stb	r2,-32748(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 80056f8:	e0bfff03 	ldbu	r2,-4(fp)
 80056fc:	10800054 	ori	r2,r2,1
 8005700:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8005704:	e0bfff03 	ldbu	r2,-4(fp)
 8005708:	100b883a 	mov	r5,r2
 800570c:	01003204 	movi	r4,200
 8005710:	800512c0 	call	800512c <MAXreg_wr>
}
 8005714:	0001883a 	nop
 8005718:	e037883a 	mov	sp,fp
 800571c:	dfc00117 	ldw	ra,4(sp)
 8005720:	df000017 	ldw	fp,0(sp)
 8005724:	dec00204 	addi	sp,sp,8
 8005728:	f800283a 	ret

0800572c <MaxGpxHandler>:

void MaxGpxHandler(void) {
 800572c:	defffd04 	addi	sp,sp,-12
 8005730:	dfc00215 	stw	ra,8(sp)
 8005734:	df000115 	stw	fp,4(sp)
 8005738:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 800573c:	01002c04 	movi	r4,176
 8005740:	80052300 	call	8005230 <MAXreg_rd>
 8005744:	e0bfff05 	stb	r2,-4(fp)
}
 8005748:	0001883a 	nop
 800574c:	e037883a 	mov	sp,fp
 8005750:	dfc00117 	ldw	ra,4(sp)
 8005754:	df000017 	ldw	fp,0(sp)
 8005758:	dec00204 	addi	sp,sp,8
 800575c:	f800283a 	ret

08005760 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8005760:	defff104 	addi	sp,sp,-60
 8005764:	dfc00e15 	stw	ra,56(sp)
 8005768:	df000d15 	stw	fp,52(sp)
 800576c:	df000d04 	addi	fp,sp,52
 8005770:	2015883a 	mov	r10,r4
 8005774:	2813883a 	mov	r9,r5
 8005778:	3011883a 	mov	r8,r6
 800577c:	380d883a 	mov	r6,r7
 8005780:	e1400217 	ldw	r5,8(fp)
 8005784:	e1000317 	ldw	r4,12(fp)
 8005788:	e0c00417 	ldw	r3,16(fp)
 800578c:	e0800517 	ldw	r2,20(fp)
 8005790:	e2bff805 	stb	r10,-32(fp)
 8005794:	e27ff905 	stb	r9,-28(fp)
 8005798:	e23ffa05 	stb	r8,-24(fp)
 800579c:	e1bffb05 	stb	r6,-20(fp)
 80057a0:	e17ffc05 	stb	r5,-16(fp)
 80057a4:	e13ffd05 	stb	r4,-12(fp)
 80057a8:	e0fffe0d 	sth	r3,-8(fp)
 80057ac:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 80057b0:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 80057b4:	00800044 	movi	r2,1
 80057b8:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 80057bc:	e0800617 	ldw	r2,24(fp)
 80057c0:	1000011e 	bne	r2,zero,80057c8 <XferCtrlReq+0x68>
        datastage = 0;
 80057c4:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 80057c8:	e0bff803 	ldbu	r2,-32(fp)
 80057cc:	100b883a 	mov	r5,r2
 80057d0:	01003804 	movi	r4,224
 80057d4:	800512c0 	call	800512c <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 80057d8:	e0bffa03 	ldbu	r2,-24(fp)
 80057dc:	10803fcc 	andi	r2,r2,255
 80057e0:	1080201c 	xori	r2,r2,128
 80057e4:	10bfe004 	addi	r2,r2,-128
 80057e8:	1000020e 	bge	r2,zero,80057f4 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 80057ec:	00800044 	movi	r2,1
 80057f0:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 80057f4:	e0bffa03 	ldbu	r2,-24(fp)
 80057f8:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 80057fc:	e0bffb03 	ldbu	r2,-20(fp)
 8005800:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8005804:	e0bffc03 	ldbu	r2,-16(fp)
 8005808:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 800580c:	e0bffd03 	ldbu	r2,-12(fp)
 8005810:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 8005814:	e0bffe0b 	ldhu	r2,-8(fp)
 8005818:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 800581c:	e0bfff0b 	ldhu	r2,-4(fp)
 8005820:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8005824:	e0bff584 	addi	r2,fp,-42
 8005828:	100d883a 	mov	r6,r2
 800582c:	01400204 	movi	r5,8
 8005830:	01000804 	movi	r4,32
 8005834:	80051980 	call	8005198 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8005838:	e0bff903 	ldbu	r2,-28(fp)
 800583c:	100b883a 	mov	r5,r2
 8005840:	01000404 	movi	r4,16
 8005844:	8005a080 	call	8005a08 <XferDispatchPkt>
 8005848:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 800584c:	e0bff543 	ldbu	r2,-43(fp)
 8005850:	10000226 	beq	r2,zero,800585c <XferCtrlReq+0xfc>
        return( rcode );
 8005854:	e0bff543 	ldbu	r2,-43(fp)
 8005858:	00000f06 	br	8005898 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 800585c:	e0bff503 	ldbu	r2,-44(fp)
 8005860:	1085883a 	add	r2,r2,r2
 8005864:	1087883a 	add	r3,r2,r2
 8005868:	d0a00304 	addi	r2,gp,-32756
 800586c:	1885883a 	add	r2,r3,r2
 8005870:	10800017 	ldw	r2,0(r2)
 8005874:	e13ff803 	ldbu	r4,-32(fp)
 8005878:	e17ff903 	ldbu	r5,-28(fp)
 800587c:	e1bfff0b 	ldhu	r6,-4(fp)
 8005880:	e0fff417 	ldw	r3,-48(fp)
 8005884:	d8c00015 	stw	r3,0(sp)
 8005888:	e1c00617 	ldw	r7,24(fp)
 800588c:	103ee83a 	callr	r2
 8005890:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 8005894:	e0bff543 	ldbu	r2,-43(fp)
}
 8005898:	e037883a 	mov	sp,fp
 800589c:	dfc00117 	ldw	ra,4(sp)
 80058a0:	df000017 	ldw	fp,0(sp)
 80058a4:	dec00204 	addi	sp,sp,8
 80058a8:	f800283a 	ret

080058ac <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 80058ac:	defff804 	addi	sp,sp,-32
 80058b0:	dfc00715 	stw	ra,28(sp)
 80058b4:	df000615 	stw	fp,24(sp)
 80058b8:	df000604 	addi	fp,sp,24
 80058bc:	2807883a 	mov	r3,r5
 80058c0:	3005883a 	mov	r2,r6
 80058c4:	e1ffff15 	stw	r7,-4(fp)
 80058c8:	e13ffc05 	stb	r4,-16(fp)
 80058cc:	e0fffd05 	stb	r3,-12(fp)
 80058d0:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 80058d4:	e0800217 	ldw	r2,8(fp)
 80058d8:	10002826 	beq	r2,zero,800597c <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 80058dc:	e0fffc03 	ldbu	r3,-16(fp)
 80058e0:	00821e34 	movhi	r2,2168
 80058e4:	10b5bf04 	addi	r2,r2,-10500
 80058e8:	180690fa 	slli	r3,r3,3
 80058ec:	10c5883a 	add	r2,r2,r3
 80058f0:	10c00017 	ldw	r3,0(r2)
 80058f4:	e0bffd03 	ldbu	r2,-12(fp)
 80058f8:	100490fa 	slli	r2,r2,3
 80058fc:	1885883a 	add	r2,r3,r2
 8005900:	00c00804 	movi	r3,32
 8005904:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize);
 8005908:	e13ffc03 	ldbu	r4,-16(fp)
 800590c:	e17ffd03 	ldbu	r5,-12(fp)
 8005910:	e1bffe0b 	ldhu	r6,-8(fp)
 8005914:	e0fffc03 	ldbu	r3,-16(fp)
 8005918:	00821e34 	movhi	r2,2168
 800591c:	10b5bf04 	addi	r2,r2,-10500
 8005920:	180690fa 	slli	r3,r3,3
 8005924:	10c5883a 	add	r2,r2,r3
 8005928:	10c00017 	ldw	r3,0(r2)
 800592c:	e0bffd03 	ldbu	r2,-12(fp)
 8005930:	100490fa 	slli	r2,r2,3
 8005934:	1885883a 	add	r2,r3,r2
 8005938:	1080008b 	ldhu	r2,2(r2)
 800593c:	10803fcc 	andi	r2,r2,255
 8005940:	d8800015 	stw	r2,0(sp)
 8005944:	e1ffff17 	ldw	r7,-4(fp)
 8005948:	8005b840 	call	8005b84 <XferInTransfer>
 800594c:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 8005950:	e0bffb03 	ldbu	r2,-20(fp)
 8005954:	10000226 	beq	r2,zero,8005960 <XferCtrlData+0xb4>
        return( rcode );
 8005958:	e0bffb03 	ldbu	r2,-20(fp)
 800595c:	00000806 	br	8005980 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8005960:	e0bffd03 	ldbu	r2,-12(fp)
 8005964:	100b883a 	mov	r5,r2
 8005968:	01002804 	movi	r4,160
 800596c:	8005a080 	call	8005a08 <XferDispatchPkt>
 8005970:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 8005974:	e0bffb03 	ldbu	r2,-20(fp)
 8005978:	00000106 	br	8005980 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 800597c:	00bfffc4 	movi	r2,-1
    }
}
 8005980:	e037883a 	mov	sp,fp
 8005984:	dfc00117 	ldw	ra,4(sp)
 8005988:	df000017 	ldw	fp,0(sp)
 800598c:	dec00204 	addi	sp,sp,8
 8005990:	f800283a 	ret

08005994 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8005994:	defff904 	addi	sp,sp,-28
 8005998:	dfc00615 	stw	ra,24(sp)
 800599c:	df000515 	stw	fp,20(sp)
 80059a0:	df000504 	addi	fp,sp,20
 80059a4:	2807883a 	mov	r3,r5
 80059a8:	3005883a 	mov	r2,r6
 80059ac:	e1ffff15 	stw	r7,-4(fp)
 80059b0:	e13ffc05 	stb	r4,-16(fp)
 80059b4:	e0fffd05 	stb	r3,-12(fp)
 80059b8:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 80059bc:	e0800217 	ldw	r2,8(fp)
 80059c0:	10000626 	beq	r2,zero,80059dc <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 80059c4:	e0bffd03 	ldbu	r2,-12(fp)
 80059c8:	100b883a 	mov	r5,r2
 80059cc:	01002804 	movi	r4,160
 80059d0:	8005a080 	call	8005a08 <XferDispatchPkt>
 80059d4:	e0bffb05 	stb	r2,-20(fp)
 80059d8:	00000506 	br	80059f0 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 80059dc:	e0bffd03 	ldbu	r2,-12(fp)
 80059e0:	100b883a 	mov	r5,r2
 80059e4:	01002004 	movi	r4,128
 80059e8:	8005a080 	call	8005a08 <XferDispatchPkt>
 80059ec:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 80059f0:	e0bffb03 	ldbu	r2,-20(fp)
}
 80059f4:	e037883a 	mov	sp,fp
 80059f8:	dfc00117 	ldw	ra,4(sp)
 80059fc:	df000017 	ldw	fp,0(sp)
 8005a00:	dec00204 	addi	sp,sp,8
 8005a04:	f800283a 	ret

08005a08 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8005a08:	defff904 	addi	sp,sp,-28
 8005a0c:	dfc00615 	stw	ra,24(sp)
 8005a10:	df000515 	stw	fp,20(sp)
 8005a14:	df000504 	addi	fp,sp,20
 8005a18:	2007883a 	mov	r3,r4
 8005a1c:	2805883a 	mov	r2,r5
 8005a20:	e0fffe05 	stb	r3,-8(fp)
 8005a24:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005a28:	d0a6f717 	ldw	r2,-25636(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8005a2c:	0140fa04 	movi	r5,1000
 8005a30:	1009883a 	mov	r4,r2
 8005a34:	80071600 	call	8007160 <__mulsi3>
 8005a38:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005a3c:	d0a6f617 	ldw	r2,-25640(gp)
 8005a40:	100b883a 	mov	r5,r2
 8005a44:	1809883a 	mov	r4,r3
 8005a48:	80070a40 	call	80070a4 <__udivsi3>
 8005a4c:	1084e204 	addi	r2,r2,5000
 8005a50:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8005a54:	e03ffb45 	stb	zero,-19(fp)
 BYTE nak_count = 0;
 8005a58:	e03ffb85 	stb	zero,-18(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8005a5c:	e0fffe03 	ldbu	r3,-8(fp)
 8005a60:	e0bfff03 	ldbu	r2,-4(fp)
 8005a64:	1884b03a 	or	r2,r3,r2
 8005a68:	10803fcc 	andi	r2,r2,255
 8005a6c:	100b883a 	mov	r5,r2
 8005a70:	01003c04 	movi	r4,240
 8005a74:	800512c0 	call	800512c <MAXreg_wr>
        rcode = 0xff;
 8005a78:	00bfffc4 	movi	r2,-1
 8005a7c:	e0bffb05 	stb	r2,-20(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout) {
 8005a80:	00000d06 	br	8005ab8 <XferDispatchPkt+0xb0>
            tmpdata = MAXreg_rd( rHIRQ );
 8005a84:	01003204 	movi	r4,200
 8005a88:	80052300 	call	8005230 <MAXreg_rd>
 8005a8c:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8005a90:	e0bffd03 	ldbu	r2,-12(fp)
 8005a94:	10803fcc 	andi	r2,r2,255
 8005a98:	1080201c 	xori	r2,r2,128
 8005a9c:	10bfe004 	addi	r2,r2,-128
 8005aa0:	1000050e 	bge	r2,zero,8005ab8 <XferDispatchPkt+0xb0>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8005aa4:	01402004 	movi	r5,128
 8005aa8:	01003204 	movi	r4,200
 8005aac:	800512c0 	call	800512c <MAXreg_wr>
                rcode = 0x00;
 8005ab0:	e03ffb05 	stb	zero,-20(fp)
                break;
 8005ab4:	00000c06 	br	8005ae8 <XferDispatchPkt+0xe0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005ab8:	d0a6f717 	ldw	r2,-25636(gp)
 BYTE nak_count = 0;

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout) {
 8005abc:	0140fa04 	movi	r5,1000
 8005ac0:	1009883a 	mov	r4,r2
 8005ac4:	80071600 	call	8007160 <__mulsi3>
 8005ac8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005acc:	d0a6f617 	ldw	r2,-25640(gp)
 8005ad0:	100b883a 	mov	r5,r2
 8005ad4:	1809883a 	mov	r4,r3
 8005ad8:	80070a40 	call	80070a4 <__udivsi3>
 8005adc:	1007883a 	mov	r3,r2
 8005ae0:	e0bffc17 	ldw	r2,-16(fp)
 8005ae4:	18bfe736 	bltu	r3,r2,8005a84 <__alt_data_end+0xfc005a84>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8005ae8:	e0bffb03 	ldbu	r2,-20(fp)
 8005aec:	10000226 	beq	r2,zero,8005af8 <XferDispatchPkt+0xf0>
            return( rcode );
 8005af0:	e0bffb03 	ldbu	r2,-20(fp)
 8005af4:	00001e06 	br	8005b70 <XferDispatchPkt+0x168>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8005af8:	01003e04 	movi	r4,248
 8005afc:	80052300 	call	8005230 <MAXreg_rd>
 8005b00:	108003cc 	andi	r2,r2,15
 8005b04:	e0bffb05 	stb	r2,-20(fp)
        if( rcode == hrNAK ) {
 8005b08:	e0bffb03 	ldbu	r2,-20(fp)
 8005b0c:	10800118 	cmpnei	r2,r2,4
 8005b10:	1000071e 	bne	r2,zero,8005b30 <XferDispatchPkt+0x128>
            nak_count++;
 8005b14:	e0bffb83 	ldbu	r2,-18(fp)
 8005b18:	10800044 	addi	r2,r2,1
 8005b1c:	e0bffb85 	stb	r2,-18(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8005b20:	e0bffb83 	ldbu	r2,-18(fp)
 8005b24:	10800158 	cmpnei	r2,r2,5
 8005b28:	10000b1e 	bne	r2,zero,8005b58 <XferDispatchPkt+0x150>
                break;
 8005b2c:	00000f06 	br	8005b6c <XferDispatchPkt+0x164>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8005b30:	e0bffb03 	ldbu	r2,-20(fp)
 8005b34:	10800398 	cmpnei	r2,r2,14
 8005b38:	1000091e 	bne	r2,zero,8005b60 <XferDispatchPkt+0x158>
            retry_count++;
 8005b3c:	e0bffb43 	ldbu	r2,-19(fp)
 8005b40:	10800044 	addi	r2,r2,1
 8005b44:	e0bffb45 	stb	r2,-19(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8005b48:	e0bffb47 	ldb	r2,-19(fp)
 8005b4c:	108000d8 	cmpnei	r2,r2,3
 8005b50:	10000526 	beq	r2,zero,8005b68 <XferDispatchPkt+0x160>
                break;
            }
            else {
                continue;
 8005b54:	00000106 	br	8005b5c <XferDispatchPkt+0x154>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 8005b58:	0001883a 	nop
            else {
                continue;
            }
        }
        else break;
    }//while( 1 )
 8005b5c:	003fbf06 	br	8005a5c <__alt_data_end+0xfc005a5c>
            }
            else {
                continue;
            }
        }
        else break;
 8005b60:	0001883a 	nop
 8005b64:	00000106 	br	8005b6c <XferDispatchPkt+0x164>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 8005b68:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 8005b6c:	e0bffb03 	ldbu	r2,-20(fp)
}
 8005b70:	e037883a 	mov	sp,fp
 8005b74:	dfc00117 	ldw	ra,4(sp)
 8005b78:	df000017 	ldw	fp,0(sp)
 8005b7c:	dec00204 	addi	sp,sp,8
 8005b80:	f800283a 	ret

08005b84 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize)
{
 8005b84:	defff804 	addi	sp,sp,-32
 8005b88:	dfc00715 	stw	ra,28(sp)
 8005b8c:	df000615 	stw	fp,24(sp)
 8005b90:	df000604 	addi	fp,sp,24
 8005b94:	2011883a 	mov	r8,r4
 8005b98:	2809883a 	mov	r4,r5
 8005b9c:	3007883a 	mov	r3,r6
 8005ba0:	e1fffe15 	stw	r7,-8(fp)
 8005ba4:	e0800217 	ldw	r2,8(fp)
 8005ba8:	e23ffb05 	stb	r8,-20(fp)
 8005bac:	e13ffc05 	stb	r4,-16(fp)
 8005bb0:	e0fffd0d 	sth	r3,-12(fp)
 8005bb4:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8005bb8:	e03ffa0d 	sth	zero,-24(fp)
    
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8005bbc:	e0fffb03 	ldbu	r3,-20(fp)
 8005bc0:	00821e34 	movhi	r2,2168
 8005bc4:	10b5bf04 	addi	r2,r2,-10500
 8005bc8:	180690fa 	slli	r3,r3,3
 8005bcc:	10c5883a 	add	r2,r2,r3
 8005bd0:	10c00017 	ldw	r3,0(r2)
 8005bd4:	e0bffc03 	ldbu	r2,-16(fp)
 8005bd8:	100490fa 	slli	r2,r2,3
 8005bdc:	1885883a 	add	r2,r3,r2
 8005be0:	10800183 	ldbu	r2,6(r2)
 8005be4:	10803fcc 	andi	r2,r2,255
 8005be8:	100b883a 	mov	r5,r2
 8005bec:	01003a04 	movi	r4,232
 8005bf0:	800512c0 	call	800512c <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8005bf4:	e0bffc03 	ldbu	r2,-16(fp)
 8005bf8:	100b883a 	mov	r5,r2
 8005bfc:	0009883a 	mov	r4,zero
 8005c00:	8005a080 	call	8005a08 <XferDispatchPkt>
 8005c04:	e0bffa85 	stb	r2,-22(fp)
        if( rcode ) {
 8005c08:	e0bffa83 	ldbu	r2,-22(fp)
 8005c0c:	10000226 	beq	r2,zero,8005c18 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8005c10:	e0bffa83 	ldbu	r2,-22(fp)
 8005c14:	00003a06 	br	8005d00 <XferInTransfer+0x17c>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8005c18:	01003204 	movi	r4,200
 8005c1c:	80052300 	call	8005230 <MAXreg_rd>
 8005c20:	10803fcc 	andi	r2,r2,255
 8005c24:	1080010c 	andi	r2,r2,4
 8005c28:	1000021e 	bne	r2,zero,8005c34 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8005c2c:	00bffc04 	movi	r2,-16
 8005c30:	00003306 	br	8005d00 <XferInTransfer+0x17c>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8005c34:	01000c04 	movi	r4,48
 8005c38:	80052300 	call	8005230 <MAXreg_rd>
 8005c3c:	e0bffac5 	stb	r2,-21(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8005c40:	e0bffac3 	ldbu	r2,-21(fp)
 8005c44:	e1bffe17 	ldw	r6,-8(fp)
 8005c48:	100b883a 	mov	r5,r2
 8005c4c:	01000204 	movi	r4,8
 8005c50:	800528c0 	call	800528c <MAXbytes_rd>
 8005c54:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8005c58:	01400104 	movi	r5,4
 8005c5c:	01003204 	movi	r4,200
 8005c60:	800512c0 	call	800512c <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8005c64:	e0fffac3 	ldbu	r3,-21(fp)
 8005c68:	e0bffa0b 	ldhu	r2,-24(fp)
 8005c6c:	1885883a 	add	r2,r3,r2
 8005c70:	e0bffa0d 	sth	r2,-24(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8005c74:	e0fffac3 	ldbu	r3,-21(fp)
 8005c78:	e0bfff03 	ldbu	r2,-4(fp)
 8005c7c:	18800336 	bltu	r3,r2,8005c8c <XferInTransfer+0x108>
 8005c80:	e0fffa0b 	ldhu	r3,-24(fp)
 8005c84:	e0bffd0b 	ldhu	r2,-12(fp)
 8005c88:	18bfda36 	bltu	r3,r2,8005bf4 <__alt_data_end+0xfc005bf4>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8005c8c:	01003e04 	movi	r4,248
 8005c90:	80052300 	call	8005230 <MAXreg_rd>
 8005c94:	10803fcc 	andi	r2,r2,255
 8005c98:	1080040c 	andi	r2,r2,16
 8005c9c:	10000c26 	beq	r2,zero,8005cd0 <XferInTransfer+0x14c>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8005ca0:	e0fffb03 	ldbu	r3,-20(fp)
 8005ca4:	00821e34 	movhi	r2,2168
 8005ca8:	10b5bf04 	addi	r2,r2,-10500
 8005cac:	180690fa 	slli	r3,r3,3
 8005cb0:	10c5883a 	add	r2,r2,r3
 8005cb4:	10c00017 	ldw	r3,0(r2)
 8005cb8:	e0bffc03 	ldbu	r2,-16(fp)
 8005cbc:	100490fa 	slli	r2,r2,3
 8005cc0:	1885883a 	add	r2,r3,r2
 8005cc4:	00c00804 	movi	r3,32
 8005cc8:	10c00185 	stb	r3,6(r2)
 8005ccc:	00000b06 	br	8005cfc <XferInTransfer+0x178>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8005cd0:	e0fffb03 	ldbu	r3,-20(fp)
 8005cd4:	00821e34 	movhi	r2,2168
 8005cd8:	10b5bf04 	addi	r2,r2,-10500
 8005cdc:	180690fa 	slli	r3,r3,3
 8005ce0:	10c5883a 	add	r2,r2,r3
 8005ce4:	10c00017 	ldw	r3,0(r2)
 8005ce8:	e0bffc03 	ldbu	r2,-16(fp)
 8005cec:	100490fa 	slli	r2,r2,3
 8005cf0:	1885883a 	add	r2,r3,r2
 8005cf4:	00c00404 	movi	r3,16
 8005cf8:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8005cfc:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8005d00:	e037883a 	mov	sp,fp
 8005d04:	dfc00117 	ldw	ra,4(sp)
 8005d08:	df000017 	ldw	fp,0(sp)
 8005d0c:	dec00204 	addi	sp,sp,8
 8005d10:	f800283a 	ret

08005d14 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8005d14:	defffe04 	addi	sp,sp,-8
 8005d18:	df000115 	stw	fp,4(sp)
 8005d1c:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8005d20:	e03fff05 	stb	zero,-4(fp)
 8005d24:	00001006 	br	8005d68 <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 8005d28:	e0ffff03 	ldbu	r3,-4(fp)
 8005d2c:	00821e34 	movhi	r2,2168
 8005d30:	10b5bf04 	addi	r2,r2,-10500
 8005d34:	180690fa 	slli	r3,r3,3
 8005d38:	10c5883a 	add	r2,r2,r3
 8005d3c:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 8005d40:	e0ffff03 	ldbu	r3,-4(fp)
 8005d44:	00821e34 	movhi	r2,2168
 8005d48:	10b5bf04 	addi	r2,r2,-10500
 8005d4c:	180690fa 	slli	r3,r3,3
 8005d50:	10c5883a 	add	r2,r2,r3
 8005d54:	10800104 	addi	r2,r2,4
 8005d58:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8005d5c:	e0bfff03 	ldbu	r2,-4(fp)
 8005d60:	10800044 	addi	r2,r2,1
 8005d64:	e0bfff05 	stb	r2,-4(fp)
 8005d68:	e0bfff03 	ldbu	r2,-4(fp)
 8005d6c:	10800270 	cmpltui	r2,r2,9
 8005d70:	103fed1e 	bne	r2,zero,8005d28 <__alt_data_end+0xfc005d28>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8005d74:	00821e34 	movhi	r2,2168
 8005d78:	10b5bf04 	addi	r2,r2,-10500
 8005d7c:	d0e6e704 	addi	r3,gp,-25700
 8005d80:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 8005d84:	d026e78d 	sth	zero,-25698(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8005d88:	00801004 	movi	r2,64
 8005d8c:	d0a6e845 	stb	r2,-25695(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8005d90:	00800404 	movi	r2,16
 8005d94:	d0a6e885 	stb	r2,-25694(gp)
}
 8005d98:	0001883a 	nop
 8005d9c:	e037883a 	mov	sp,fp
 8005da0:	df000017 	ldw	fp,0(sp)
 8005da4:	dec00104 	addi	sp,sp,4
 8005da8:	f800283a 	ret

08005dac <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8005dac:	deffb204 	addi	sp,sp,-312
 8005db0:	dfc04d15 	stw	ra,308(sp)
 8005db4:	df004c15 	stw	fp,304(sp)
 8005db8:	dc004b15 	stw	r16,300(sp)
 8005dbc:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8005dc0:	d0a00503 	ldbu	r2,-32748(gp)
 8005dc4:	10803fcc 	andi	r2,r2,255
 8005dc8:	10803c0c 	andi	r2,r2,240
 8005dcc:	10c00820 	cmpeqi	r3,r2,32
 8005dd0:	1801121e 	bne	r3,zero,800621c <USB_Task+0x470>
 8005dd4:	10c00848 	cmpgei	r3,r2,33
 8005dd8:	1800041e 	bne	r3,zero,8005dec <USB_Task+0x40>
 8005ddc:	10000a26 	beq	r2,zero,8005e08 <USB_Task+0x5c>
 8005de0:	10800420 	cmpeqi	r2,r2,16
 8005de4:	10001b1e 	bne	r2,zero,8005e54 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8005de8:	00017a06 	br	80063d4 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8005dec:	10c01020 	cmpeqi	r3,r2,64
 8005df0:	18016f1e 	bne	r3,zero,80063b0 <USB_Task+0x604>
 8005df4:	10c03fe0 	cmpeqi	r3,r2,255
 8005df8:	18016f1e 	bne	r3,zero,80063b8 <USB_Task+0x60c>
 8005dfc:	10800c20 	cmpeqi	r2,r2,48
 8005e00:	1001441e 	bne	r2,zero,8006314 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8005e04:	00017306 	br	80063d4 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 8005e08:	d0a00503 	ldbu	r2,-32748(gp)
 8005e0c:	10803fcc 	andi	r2,r2,255
 8005e10:	10c000e0 	cmpeqi	r3,r2,3
 8005e14:	1800091e 	bne	r3,zero,8005e3c <USB_Task+0x90>
 8005e18:	10c00120 	cmpeqi	r3,r2,4
 8005e1c:	18000b1e 	bne	r3,zero,8005e4c <USB_Task+0xa0>
 8005e20:	10800060 	cmpeqi	r2,r2,1
 8005e24:	1000011e 	bne	r2,zero,8005e2c <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8005e28:	00016a06 	br	80063d4 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 8005e2c:	8005d140 	call	8005d14 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8005e30:	008000c4 	movi	r2,3
 8005e34:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8005e38:	00000506 	br	8005e50 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8005e3c:	01400104 	movi	r5,4
 8005e40:	01003a04 	movi	r4,232
 8005e44:	800512c0 	call	800512c <MAXreg_wr>
                    break;
 8005e48:	00000106 	br	8005e50 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 8005e4c:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 8005e50:	00016006 	br	80063d4 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 8005e54:	d0a00503 	ldbu	r2,-32748(gp)
 8005e58:	10803fcc 	andi	r2,r2,255
 8005e5c:	10bffc04 	addi	r2,r2,-16
 8005e60:	10c001a8 	cmpgeui	r3,r2,6
 8005e64:	1801561e 	bne	r3,zero,80063c0 <USB_Task+0x614>
 8005e68:	100690ba 	slli	r3,r2,2
 8005e6c:	00820034 	movhi	r2,2048
 8005e70:	1097a004 	addi	r2,r2,24192
 8005e74:	1885883a 	add	r2,r3,r2
 8005e78:	10800017 	ldw	r2,0(r2)
 8005e7c:	1000683a 	jmp	r2
 8005e80:	08005e98 	cmpnei	zero,at,378
 8005e84:	08005ed0 	cmplti	zero,at,379
 8005e88:	08005f0c 	andi	zero,at,380
 8005e8c:	08005f30 	cmpltui	zero,at,380
 8005e90:	08005f70 	cmpltui	zero,at,381
 8005e94:	08005f84 	addi	zero,at,382
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005e98:	d0a6f717 	ldw	r2,-25636(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8005e9c:	0140fa04 	movi	r5,1000
 8005ea0:	1009883a 	mov	r4,r2
 8005ea4:	80071600 	call	8007160 <__mulsi3>
 8005ea8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005eac:	d0a6f617 	ldw	r2,-25640(gp)
 8005eb0:	100b883a 	mov	r5,r2
 8005eb4:	1809883a 	mov	r4,r3
 8005eb8:	80070a40 	call	80070a4 <__udivsi3>
 8005ebc:	10803204 	addi	r2,r2,200
 8005ec0:	d0a6ea15 	stw	r2,-25688(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8005ec4:	00800444 	movi	r2,17
 8005ec8:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_STATE_ATTACHED )
 8005ecc:	0000d206 	br	8006218 <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8005ed0:	d0a6f717 	ldw	r2,-25636(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8005ed4:	0140fa04 	movi	r5,1000
 8005ed8:	1009883a 	mov	r4,r2
 8005edc:	80071600 	call	8007160 <__mulsi3>
 8005ee0:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005ee4:	d0a6f617 	ldw	r2,-25640(gp)
 8005ee8:	100b883a 	mov	r5,r2
 8005eec:	1809883a 	mov	r4,r3
 8005ef0:	80070a40 	call	80070a4 <__udivsi3>
 8005ef4:	1007883a 	mov	r3,r2
 8005ef8:	d0a6ea17 	ldw	r2,-25688(gp)
 8005efc:	10c0c32e 	bgeu	r2,r3,800620c <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8005f00:	00800484 	movi	r2,18
 8005f04:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8005f08:	0000c006 	br	800620c <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8005f0c:	01400044 	movi	r5,1
 8005f10:	01003204 	movi	r4,200
 8005f14:	800512c0 	call	800512c <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 8005f18:	01400044 	movi	r5,1
 8005f1c:	01003a04 	movi	r4,232
 8005f20:	800512c0 	call	800512c <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8005f24:	008004c4 	movi	r2,19
 8005f28:	d0a00505 	stb	r2,-32748(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8005f2c:	0000ba06 	br	8006218 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8005f30:	01003a04 	movi	r4,232
 8005f34:	80052300 	call	8005230 <MAXreg_rd>
 8005f38:	10803fcc 	andi	r2,r2,255
 8005f3c:	1080004c 	andi	r2,r2,1
 8005f40:	1000b41e 	bne	r2,zero,8006214 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8005f44:	01003604 	movi	r4,216
 8005f48:	80052300 	call	8005230 <MAXreg_rd>
 8005f4c:	10800214 	ori	r2,r2,8
 8005f50:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8005f54:	e0bfb943 	ldbu	r2,-283(fp)
 8005f58:	100b883a 	mov	r5,r2
 8005f5c:	01003604 	movi	r4,216
 8005f60:	800512c0 	call	800512c <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8005f64:	00800504 	movi	r2,20
 8005f68:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8005f6c:	0000a906 	br	8006214 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8005f70:	01003204 	movi	r4,200
 8005f74:	80052300 	call	8005230 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8005f78:	00800544 	movi	r2,21
 8005f7c:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 8005f80:	0000a506 	br	8006218 <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8005f84:	00821e34 	movhi	r2,2168
 8005f88:	10b5bf04 	addi	r2,r2,-10500
 8005f8c:	10800017 	ldw	r2,0(r2)
 8005f90:	00c00204 	movi	r3,8
 8005f94:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8005f98:	e0bfba04 	addi	r2,fp,-280
 8005f9c:	d8800415 	stw	r2,16(sp)
 8005fa0:	00800204 	movi	r2,8
 8005fa4:	d8800315 	stw	r2,12(sp)
 8005fa8:	d8000215 	stw	zero,8(sp)
 8005fac:	00800044 	movi	r2,1
 8005fb0:	d8800115 	stw	r2,4(sp)
 8005fb4:	d8000015 	stw	zero,0(sp)
 8005fb8:	01c00184 	movi	r7,6
 8005fbc:	01802004 	movi	r6,128
 8005fc0:	000b883a 	mov	r5,zero
 8005fc4:	0009883a 	mov	r4,zero
 8005fc8:	80057600 	call	8005760 <XferCtrlReq>
 8005fcc:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8005fd0:	e0bfb983 	ldbu	r2,-282(fp)
 8005fd4:	1000861e 	bne	r2,zero,80061f0 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8005fd8:	00821e34 	movhi	r2,2168
 8005fdc:	10b5bf04 	addi	r2,r2,-10500
 8005fe0:	10800017 	ldw	r2,0(r2)
 8005fe4:	e0ffbbc3 	ldbu	r3,-273(fp)
 8005fe8:	18c03fcc 	andi	r3,r3,255
 8005fec:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8005ff0:	e0bfba03 	ldbu	r2,-280(fp)
 8005ff4:	10803fcc 	andi	r2,r2,255
 8005ff8:	e0ffba04 	addi	r3,fp,-280
 8005ffc:	d8c00415 	stw	r3,16(sp)
 8006000:	d8800315 	stw	r2,12(sp)
 8006004:	d8000215 	stw	zero,8(sp)
 8006008:	00800044 	movi	r2,1
 800600c:	d8800115 	stw	r2,4(sp)
 8006010:	d8000015 	stw	zero,0(sp)
 8006014:	01c00184 	movi	r7,6
 8006018:	01802004 	movi	r6,128
 800601c:	000b883a 	mov	r5,zero
 8006020:	0009883a 	mov	r4,zero
 8006024:	80057600 	call	8005760 <XferCtrlReq>
 8006028:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 800602c:	e0bfbd83 	ldbu	r2,-266(fp)
 8006030:	10803fcc 	andi	r2,r2,255
 8006034:	10003426 	beq	r2,zero,8006108 <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8006038:	e0bfbd83 	ldbu	r2,-266(fp)
 800603c:	10803fcc 	andi	r2,r2,255
 8006040:	e0ffbe84 	addi	r3,fp,-262
 8006044:	d8c00415 	stw	r3,16(sp)
 8006048:	00c00084 	movi	r3,2
 800604c:	d8c00315 	stw	r3,12(sp)
 8006050:	00c10244 	movi	r3,1033
 8006054:	d8c00215 	stw	r3,8(sp)
 8006058:	00c000c4 	movi	r3,3
 800605c:	d8c00115 	stw	r3,4(sp)
 8006060:	d8800015 	stw	r2,0(sp)
 8006064:	01c00184 	movi	r7,6
 8006068:	01802004 	movi	r6,128
 800606c:	000b883a 	mov	r5,zero
 8006070:	0009883a 	mov	r4,zero
 8006074:	80057600 	call	8005760 <XferCtrlReq>
 8006078:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 800607c:	e0bfbd83 	ldbu	r2,-266(fp)
 8006080:	10803fcc 	andi	r2,r2,255
 8006084:	e0ffbe83 	ldbu	r3,-262(fp)
 8006088:	18c03fcc 	andi	r3,r3,255
 800608c:	e13fbe84 	addi	r4,fp,-262
 8006090:	d9000415 	stw	r4,16(sp)
 8006094:	d8c00315 	stw	r3,12(sp)
 8006098:	00c10244 	movi	r3,1033
 800609c:	d8c00215 	stw	r3,8(sp)
 80060a0:	00c000c4 	movi	r3,3
 80060a4:	d8c00115 	stw	r3,4(sp)
 80060a8:	d8800015 	stw	r2,0(sp)
 80060ac:	01c00184 	movi	r7,6
 80060b0:	01802004 	movi	r6,128
 80060b4:	000b883a 	mov	r5,zero
 80060b8:	0009883a 	mov	r4,zero
 80060bc:	80057600 	call	8005760 <XferCtrlReq>
 80060c0:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80060c4:	e0bfbd83 	ldbu	r2,-266(fp)
 80060c8:	14003fcc 	andi	r16,r2,255
 80060cc:	e0bfbe83 	ldbu	r2,-262(fp)
 80060d0:	10803fcc 	andi	r2,r2,255
 80060d4:	1004d07a 	srli	r2,r2,1
 80060d8:	10bfffc4 	addi	r2,r2,-1
 80060dc:	10c03fcc 	andi	r3,r2,255
 80060e0:	e0bfbe84 	addi	r2,fp,-262
 80060e4:	10800084 	addi	r2,r2,2
 80060e8:	180b883a 	mov	r5,r3
 80060ec:	1009883a 	mov	r4,r2
 80060f0:	80065740 	call	8006574 <ConvUTF8ToStr>
 80060f4:	100d883a 	mov	r6,r2
 80060f8:	800b883a 	mov	r5,r16
 80060fc:	01021974 	movhi	r4,2149
 8006100:	2136ee04 	addi	r4,r4,-9288
 8006104:	800a8900 	call	800a890 <printf>
                		}
                		if (buf.iProduct != 0)
 8006108:	e0bfbdc3 	ldbu	r2,-265(fp)
 800610c:	10803fcc 	andi	r2,r2,255
 8006110:	10003426 	beq	r2,zero,80061e4 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8006114:	e0bfbdc3 	ldbu	r2,-265(fp)
 8006118:	10803fcc 	andi	r2,r2,255
 800611c:	e0ffbe84 	addi	r3,fp,-262
 8006120:	d8c00415 	stw	r3,16(sp)
 8006124:	00c00084 	movi	r3,2
 8006128:	d8c00315 	stw	r3,12(sp)
 800612c:	00c10244 	movi	r3,1033
 8006130:	d8c00215 	stw	r3,8(sp)
 8006134:	00c000c4 	movi	r3,3
 8006138:	d8c00115 	stw	r3,4(sp)
 800613c:	d8800015 	stw	r2,0(sp)
 8006140:	01c00184 	movi	r7,6
 8006144:	01802004 	movi	r6,128
 8006148:	000b883a 	mov	r5,zero
 800614c:	0009883a 	mov	r4,zero
 8006150:	80057600 	call	8005760 <XferCtrlReq>
 8006154:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8006158:	e0bfbdc3 	ldbu	r2,-265(fp)
 800615c:	10803fcc 	andi	r2,r2,255
 8006160:	e0ffbe83 	ldbu	r3,-262(fp)
 8006164:	18c03fcc 	andi	r3,r3,255
 8006168:	e13fbe84 	addi	r4,fp,-262
 800616c:	d9000415 	stw	r4,16(sp)
 8006170:	d8c00315 	stw	r3,12(sp)
 8006174:	00c10244 	movi	r3,1033
 8006178:	d8c00215 	stw	r3,8(sp)
 800617c:	00c000c4 	movi	r3,3
 8006180:	d8c00115 	stw	r3,4(sp)
 8006184:	d8800015 	stw	r2,0(sp)
 8006188:	01c00184 	movi	r7,6
 800618c:	01802004 	movi	r6,128
 8006190:	000b883a 	mov	r5,zero
 8006194:	0009883a 	mov	r4,zero
 8006198:	80057600 	call	8005760 <XferCtrlReq>
 800619c:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80061a0:	e0bfbdc3 	ldbu	r2,-265(fp)
 80061a4:	14003fcc 	andi	r16,r2,255
 80061a8:	e0bfbe83 	ldbu	r2,-262(fp)
 80061ac:	10803fcc 	andi	r2,r2,255
 80061b0:	1004d07a 	srli	r2,r2,1
 80061b4:	10bfffc4 	addi	r2,r2,-1
 80061b8:	10c03fcc 	andi	r3,r2,255
 80061bc:	e0bfbe84 	addi	r2,fp,-262
 80061c0:	10800084 	addi	r2,r2,2
 80061c4:	180b883a 	mov	r5,r3
 80061c8:	1009883a 	mov	r4,r2
 80061cc:	80065740 	call	8006574 <ConvUTF8ToStr>
 80061d0:	100d883a 	mov	r6,r2
 80061d4:	800b883a 	mov	r5,r16
 80061d8:	01021974 	movhi	r4,2149
 80061dc:	2136f404 	addi	r4,r4,-9264
 80061e0:	800a8900 	call	800a890 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 80061e4:	00800804 	movi	r2,32
 80061e8:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 80061ec:	00000a06 	br	8006218 <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 80061f0:	e0bfb983 	ldbu	r2,-282(fp)
 80061f4:	d0a6eb45 	stb	r2,-25683(gp)
                        last_usb_task_state = usb_task_state;
 80061f8:	d0a00503 	ldbu	r2,-32748(gp)
 80061fc:	d0a6e905 	stb	r2,-25692(gp)
                        usb_task_state = USB_STATE_ERROR;
 8006200:	00bfffc4 	movi	r2,-1
 8006204:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8006208:	00000306 	br	8006218 <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 800620c:	0001883a 	nop
 8006210:	00006b06 	br	80063c0 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8006214:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 8006218:	00006906 	br	80063c0 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 800621c:	00800044 	movi	r2,1
 8006220:	e0bfb905 	stb	r2,-284(fp)
 8006224:	00002d06 	br	80062dc <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 8006228:	e0ffb903 	ldbu	r3,-284(fp)
 800622c:	00821e34 	movhi	r2,2168
 8006230:	10b5bf04 	addi	r2,r2,-10500
 8006234:	180690fa 	slli	r3,r3,3
 8006238:	10c5883a 	add	r2,r2,r3
 800623c:	10800017 	ldw	r2,0(r2)
 8006240:	1000231e 	bne	r2,zero,80062d0 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 8006244:	e13fb903 	ldbu	r4,-284(fp)
 8006248:	00821e34 	movhi	r2,2168
 800624c:	10b5bf04 	addi	r2,r2,-10500
 8006250:	10c00017 	ldw	r3,0(r2)
 8006254:	00821e34 	movhi	r2,2168
 8006258:	10b5bf04 	addi	r2,r2,-10500
 800625c:	200890fa 	slli	r4,r4,3
 8006260:	1105883a 	add	r2,r2,r4
 8006264:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 8006268:	e0bfb903 	ldbu	r2,-284(fp)
 800626c:	d8000415 	stw	zero,16(sp)
 8006270:	d8000315 	stw	zero,12(sp)
 8006274:	d8000215 	stw	zero,8(sp)
 8006278:	d8000115 	stw	zero,4(sp)
 800627c:	d8800015 	stw	r2,0(sp)
 8006280:	01c00144 	movi	r7,5
 8006284:	000d883a 	mov	r6,zero
 8006288:	000b883a 	mov	r5,zero
 800628c:	0009883a 	mov	r4,zero
 8006290:	80057600 	call	8005760 <XferCtrlReq>
 8006294:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 8006298:	e0bfb983 	ldbu	r2,-282(fp)
 800629c:	1000051e 	bne	r2,zero,80062b4 <USB_Task+0x508>
                        tmp_addr = i;
 80062a0:	e0bfb903 	ldbu	r2,-284(fp)
 80062a4:	d0a6eb05 	stb	r2,-25684(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 80062a8:	00800c04 	movi	r2,48
 80062ac:	d0a00505 	stb	r2,-32748(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80062b0:	00000d06 	br	80062e8 <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 80062b4:	e0bfb983 	ldbu	r2,-282(fp)
 80062b8:	d0a6eb45 	stb	r2,-25683(gp)
                        last_usb_task_state = usb_task_state;
 80062bc:	d0a00503 	ldbu	r2,-32748(gp)
 80062c0:	d0a6e905 	stb	r2,-25692(gp)
                        usb_task_state = USB_STATE_ERROR;
 80062c4:	00bfffc4 	movi	r2,-1
 80062c8:	d0a00505 	stb	r2,-32748(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 80062cc:	00000606 	br	80062e8 <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80062d0:	e0bfb903 	ldbu	r2,-284(fp)
 80062d4:	10800044 	addi	r2,r2,1
 80062d8:	e0bfb905 	stb	r2,-284(fp)
 80062dc:	e0bfb903 	ldbu	r2,-284(fp)
 80062e0:	10800230 	cmpltui	r2,r2,8
 80062e4:	103fd01e 	bne	r2,zero,8006228 <__alt_data_end+0xfc006228>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 80062e8:	d0a00503 	ldbu	r2,-32748(gp)
 80062ec:	10803fcc 	andi	r2,r2,255
 80062f0:	10800818 	cmpnei	r2,r2,32
 80062f4:	1000341e 	bne	r2,zero,80063c8 <USB_Task+0x61c>
                usb_error = 0xfe;
 80062f8:	00bfff84 	movi	r2,-2
 80062fc:	d0a6eb45 	stb	r2,-25683(gp)
                last_usb_task_state = usb_task_state;
 8006300:	d0a00503 	ldbu	r2,-32748(gp)
 8006304:	d0a6e905 	stb	r2,-25692(gp)
                usb_task_state = USB_STATE_ERROR;
 8006308:	00bfffc4 	movi	r2,-1
 800630c:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 8006310:	00002d06 	br	80063c8 <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8006314:	e03fb905 	stb	zero,-284(fp)
 8006318:	00001706 	br	8006378 <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 800631c:	e0bfb903 	ldbu	r2,-284(fp)
 8006320:	04021974 	movhi	r16,2149
 8006324:	8437ba04 	addi	r16,r16,-8472
 8006328:	01400304 	movi	r5,12
 800632c:	1009883a 	mov	r4,r2
 8006330:	80071600 	call	8007160 <__mulsi3>
 8006334:	8085883a 	add	r2,r16,r2
 8006338:	10800017 	ldw	r2,0(r2)
 800633c:	d0e6eb03 	ldbu	r3,-25684(gp)
 8006340:	18c03fcc 	andi	r3,r3,255
 8006344:	000b883a 	mov	r5,zero
 8006348:	1809883a 	mov	r4,r3
 800634c:	103ee83a 	callr	r2
 8006350:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 8006354:	e0bfb983 	ldbu	r2,-282(fp)
 8006358:	10800058 	cmpnei	r2,r2,1
 800635c:	1000031e 	bne	r2,zero,800636c <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 8006360:	00801004 	movi	r2,64
 8006364:	d0a00505 	stb	r2,-32748(gp)
                    break;
 8006368:	00000606 	br	8006384 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800636c:	e0bfb903 	ldbu	r2,-284(fp)
 8006370:	10800044 	addi	r2,r2,1
 8006374:	e0bfb905 	stb	r2,-284(fp)
 8006378:	e0bfb903 	ldbu	r2,-284(fp)
 800637c:	10800130 	cmpltui	r2,r2,4
 8006380:	103fe61e 	bne	r2,zero,800631c <__alt_data_end+0xfc00631c>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8006384:	d0a00503 	ldbu	r2,-32748(gp)
 8006388:	10803fcc 	andi	r2,r2,255
 800638c:	10800c18 	cmpnei	r2,r2,48
 8006390:	10000f1e 	bne	r2,zero,80063d0 <USB_Task+0x624>
                usb_error = 0xfd;
 8006394:	00bfff44 	movi	r2,-3
 8006398:	d0a6eb45 	stb	r2,-25683(gp)
                last_usb_task_state = usb_task_state;
 800639c:	d0a00503 	ldbu	r2,-32748(gp)
 80063a0:	d0a6e905 	stb	r2,-25692(gp)
                usb_task_state = USB_STATE_ERROR;
 80063a4:	00bfffc4 	movi	r2,-1
 80063a8:	d0a00505 	stb	r2,-32748(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 80063ac:	00000806 	br	80063d0 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 80063b0:	0001883a 	nop
 80063b4:	00000706 	br	80063d4 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 80063b8:	0001883a 	nop
 80063bc:	00000506 	br	80063d4 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 80063c0:	0001883a 	nop
 80063c4:	00000306 	br	80063d4 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 80063c8:	0001883a 	nop
 80063cc:	00000106 	br	80063d4 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 80063d0:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 80063d4:	0001883a 	nop
 80063d8:	e6ffff04 	addi	sp,fp,-4
 80063dc:	dfc00217 	ldw	ra,8(sp)
 80063e0:	df000117 	ldw	fp,4(sp)
 80063e4:	dc000017 	ldw	r16,0(sp)
 80063e8:	dec00304 	addi	sp,sp,12
 80063ec:	f800283a 	ret

080063f0 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 80063f0:	defffd04 	addi	sp,sp,-12
 80063f4:	df000215 	stw	fp,8(sp)
 80063f8:	df000204 	addi	fp,sp,8
 80063fc:	2005883a 	mov	r2,r4
 8006400:	e17fff15 	stw	r5,-4(fp)
 8006404:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 8006408:	0005883a 	mov	r2,zero
}
 800640c:	e037883a 	mov	sp,fp
 8006410:	df000017 	ldw	fp,0(sp)
 8006414:	dec00104 	addi	sp,sp,4
 8006418:	f800283a 	ret

0800641c <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800641c:	defffb04 	addi	sp,sp,-20
 8006420:	df000415 	stw	fp,16(sp)
 8006424:	df000404 	addi	fp,sp,16
 8006428:	2007883a 	mov	r3,r4
 800642c:	2805883a 	mov	r2,r5
 8006430:	e1bffe15 	stw	r6,-8(fp)
 8006434:	e1ffff15 	stw	r7,-4(fp)
 8006438:	e0fffc05 	stb	r3,-16(fp)
 800643c:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 8006440:	0005883a 	mov	r2,zero

}
 8006444:	e037883a 	mov	sp,fp
 8006448:	df000017 	ldw	fp,0(sp)
 800644c:	dec00104 	addi	sp,sp,4
 8006450:	f800283a 	ret

08006454 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 8006454:	defffd04 	addi	sp,sp,-12
 8006458:	df000215 	stw	fp,8(sp)
 800645c:	df000204 	addi	fp,sp,8
 8006460:	2005883a 	mov	r2,r4
 8006464:	e17fff15 	stw	r5,-4(fp)
 8006468:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 800646c:	0005883a 	mov	r2,zero

}
 8006470:	e037883a 	mov	sp,fp
 8006474:	df000017 	ldw	fp,0(sp)
 8006478:	dec00104 	addi	sp,sp,4
 800647c:	f800283a 	ret

08006480 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8006480:	defffb04 	addi	sp,sp,-20
 8006484:	df000415 	stw	fp,16(sp)
 8006488:	df000404 	addi	fp,sp,16
 800648c:	2007883a 	mov	r3,r4
 8006490:	2805883a 	mov	r2,r5
 8006494:	e1bffe15 	stw	r6,-8(fp)
 8006498:	e1ffff15 	stw	r7,-4(fp)
 800649c:	e0fffc05 	stb	r3,-16(fp)
 80064a0:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 80064a4:	0005883a 	mov	r2,zero
}
 80064a8:	e037883a 	mov	sp,fp
 80064ac:	df000017 	ldw	fp,0(sp)
 80064b0:	dec00104 	addi	sp,sp,4
 80064b4:	f800283a 	ret

080064b8 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 80064b8:	defffd04 	addi	sp,sp,-12
 80064bc:	df000215 	stw	fp,8(sp)
 80064c0:	df000204 	addi	fp,sp,8
 80064c4:	2005883a 	mov	r2,r4
 80064c8:	e17fff15 	stw	r5,-4(fp)
 80064cc:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80064d0:	0005883a 	mov	r2,zero
}
 80064d4:	e037883a 	mov	sp,fp
 80064d8:	df000017 	ldw	fp,0(sp)
 80064dc:	dec00104 	addi	sp,sp,4
 80064e0:	f800283a 	ret

080064e4 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 80064e4:	defffb04 	addi	sp,sp,-20
 80064e8:	df000415 	stw	fp,16(sp)
 80064ec:	df000404 	addi	fp,sp,16
 80064f0:	2007883a 	mov	r3,r4
 80064f4:	2805883a 	mov	r2,r5
 80064f8:	e1bffe15 	stw	r6,-8(fp)
 80064fc:	e1ffff15 	stw	r7,-4(fp)
 8006500:	e0fffc05 	stb	r3,-16(fp)
 8006504:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 8006508:	0005883a 	mov	r2,zero
}
 800650c:	e037883a 	mov	sp,fp
 8006510:	df000017 	ldw	fp,0(sp)
 8006514:	dec00104 	addi	sp,sp,4
 8006518:	f800283a 	ret

0800651c <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 800651c:	deffff04 	addi	sp,sp,-4
 8006520:	df000015 	stw	fp,0(sp)
 8006524:	d839883a 	mov	fp,sp
    return( usb_task_state );
 8006528:	d0a00503 	ldbu	r2,-32748(gp)
}
 800652c:	e037883a 	mov	sp,fp
 8006530:	df000017 	ldw	fp,0(sp)
 8006534:	dec00104 	addi	sp,sp,4
 8006538:	f800283a 	ret

0800653c <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 800653c:	defffe04 	addi	sp,sp,-8
 8006540:	df000115 	stw	fp,4(sp)
 8006544:	df000104 	addi	fp,sp,4
 8006548:	2005883a 	mov	r2,r4
 800654c:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 8006550:	e0bfff03 	ldbu	r2,-4(fp)
 8006554:	100690fa 	slli	r3,r2,3
 8006558:	00821e34 	movhi	r2,2168
 800655c:	10b5bf04 	addi	r2,r2,-10500
 8006560:	1885883a 	add	r2,r3,r2
}
 8006564:	e037883a 	mov	sp,fp
 8006568:	df000017 	ldw	fp,0(sp)
 800656c:	dec00104 	addi	sp,sp,4
 8006570:	f800283a 	ret

08006574 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8006574:	defffc04 	addi	sp,sp,-16
 8006578:	df000315 	stw	fp,12(sp)
 800657c:	df000304 	addi	fp,sp,12
 8006580:	e13ffe15 	stw	r4,-8(fp)
 8006584:	2805883a 	mov	r2,r5
 8006588:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 800658c:	e03ffd05 	stb	zero,-12(fp)
 8006590:	00000d06 	br	80065c8 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8006594:	e0bffd03 	ldbu	r2,-12(fp)
 8006598:	e0fffe17 	ldw	r3,-8(fp)
 800659c:	1887883a 	add	r3,r3,r2
 80065a0:	e0bffd03 	ldbu	r2,-12(fp)
 80065a4:	1085883a 	add	r2,r2,r2
 80065a8:	1009883a 	mov	r4,r2
 80065ac:	e0bffe17 	ldw	r2,-8(fp)
 80065b0:	1105883a 	add	r2,r2,r4
 80065b4:	10800003 	ldbu	r2,0(r2)
 80065b8:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 80065bc:	e0bffd03 	ldbu	r2,-12(fp)
 80065c0:	10800044 	addi	r2,r2,1
 80065c4:	e0bffd05 	stb	r2,-12(fp)
 80065c8:	e0fffd03 	ldbu	r3,-12(fp)
 80065cc:	e0bfff03 	ldbu	r2,-4(fp)
 80065d0:	18bff036 	bltu	r3,r2,8006594 <__alt_data_end+0xfc006594>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 80065d4:	e0bfff03 	ldbu	r2,-4(fp)
 80065d8:	e0fffe17 	ldw	r3,-8(fp)
 80065dc:	1885883a 	add	r2,r3,r2
 80065e0:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 80065e4:	e0bffe17 	ldw	r2,-8(fp)
}
 80065e8:	e037883a 	mov	sp,fp
 80065ec:	df000017 	ldw	fp,0(sp)
 80065f0:	dec00104 	addi	sp,sp,4
 80065f4:	f800283a 	ret

080065f8 <vga_init>:
} vga_regs_t;

static vga_memory_t vga_mem;
static volatile vga_regs_t*  vga_regs = (vga_regs_t*) VGA_MEM_LOCATION;

void vga_init() {
 80065f8:	deffff04 	addi	sp,sp,-4
 80065fc:	df000015 	stw	fp,0(sp)
 8006600:	d839883a 	mov	fp,sp
    vga_regs->address       = &vga_mem;
 8006604:	d0e00617 	ldw	r3,-32744(gp)
 8006608:	00821974 	movhi	r2,2149
 800660c:	10857504 	addi	r2,r2,5588
 8006610:	18800015 	stw	r2,0(r3)
    vga_regs->frame         = 0;
 8006614:	d0a00617 	ldw	r2,-32744(gp)
 8006618:	10000115 	stw	zero,4(r2)
    vga_regs->blend_bias    = 0;
 800661c:	d0a00617 	ldw	r2,-32744(gp)
 8006620:	10000315 	stw	zero,12(r2)
}
 8006624:	0001883a 	nop
 8006628:	e037883a 	mov	sp,fp
 800662c:	df000017 	ldw	fp,0(sp)
 8006630:	dec00104 	addi	sp,sp,4
 8006634:	f800283a 	ret

08006638 <set_frame>:

void set_frame(uint32_t frame) {
 8006638:	defffe04 	addi	sp,sp,-8
 800663c:	df000115 	stw	fp,4(sp)
 8006640:	df000104 	addi	fp,sp,4
 8006644:	e13fff15 	stw	r4,-4(fp)
    if (frame < 2)
 8006648:	e0bfff17 	ldw	r2,-4(fp)
 800664c:	108000a8 	cmpgeui	r2,r2,2
 8006650:	1000031e 	bne	r2,zero,8006660 <set_frame+0x28>
        vga_regs->frame = frame;
 8006654:	d0a00617 	ldw	r2,-32744(gp)
 8006658:	e0ffff17 	ldw	r3,-4(fp)
 800665c:	10c00115 	stw	r3,4(r2)
}
 8006660:	0001883a 	nop
 8006664:	e037883a 	mov	sp,fp
 8006668:	df000017 	ldw	fp,0(sp)
 800666c:	dec00104 	addi	sp,sp,4
 8006670:	f800283a 	ret

08006674 <get_frame>:

uint16_t* get_frame(uint32_t frame) {
 8006674:	defffe04 	addi	sp,sp,-8
 8006678:	df000115 	stw	fp,4(sp)
 800667c:	df000104 	addi	fp,sp,4
 8006680:	e13fff15 	stw	r4,-4(fp)
    switch (frame) {
 8006684:	e0bfff17 	ldw	r2,-4(fp)
 8006688:	10000326 	beq	r2,zero,8006698 <get_frame+0x24>
 800668c:	10800060 	cmpeqi	r2,r2,1
 8006690:	1000041e 	bne	r2,zero,80066a4 <get_frame+0x30>
 8006694:	00000606 	br	80066b0 <get_frame+0x3c>
        case 0:
            return vga_mem.frame0;
 8006698:	00821974 	movhi	r2,2149
 800669c:	10857504 	addi	r2,r2,5588
 80066a0:	00000406 	br	80066b4 <get_frame+0x40>
        case 1:
            return vga_mem.frame1;
 80066a4:	00821bb4 	movhi	r2,2158
 80066a8:	109d7504 	addi	r2,r2,30164
 80066ac:	00000106 	br	80066b4 <get_frame+0x40>
    }
    return 0;
 80066b0:	0005883a 	mov	r2,zero
}
 80066b4:	e037883a 	mov	sp,fp
 80066b8:	df000017 	ldw	fp,0(sp)
 80066bc:	dec00104 	addi	sp,sp,4
 80066c0:	f800283a 	ret

080066c4 <is_vblank>:

int is_vblank() { return vga_regs->vblank; }
 80066c4:	deffff04 	addi	sp,sp,-4
 80066c8:	df000015 	stw	fp,0(sp)
 80066cc:	d839883a 	mov	fp,sp
 80066d0:	d0a00617 	ldw	r2,-32744(gp)
 80066d4:	10800417 	ldw	r2,16(r2)
 80066d8:	e037883a 	mov	sp,fp
 80066dc:	df000017 	ldw	fp,0(sp)
 80066e0:	dec00104 	addi	sp,sp,4
 80066e4:	f800283a 	ret

080066e8 <set_aura>:

void set_aura(uint16_t color, uint32_t bias) {
 80066e8:	defffd04 	addi	sp,sp,-12
 80066ec:	df000215 	stw	fp,8(sp)
 80066f0:	df000204 	addi	fp,sp,8
 80066f4:	2005883a 	mov	r2,r4
 80066f8:	e17fff15 	stw	r5,-4(fp)
 80066fc:	e0bffe0d 	sth	r2,-8(fp)
    vga_regs->blend_color   = (uint32_t) color;
 8006700:	d0a00617 	ldw	r2,-32744(gp)
 8006704:	e0fffe0b 	ldhu	r3,-8(fp)
 8006708:	10c00215 	stw	r3,8(r2)
    if (bias > 64)
 800670c:	e0bfff17 	ldw	r2,-4(fp)
 8006710:	10801070 	cmpltui	r2,r2,65
 8006714:	1000021e 	bne	r2,zero,8006720 <set_aura+0x38>
        bias = 64;
 8006718:	00801004 	movi	r2,64
 800671c:	e0bfff15 	stw	r2,-4(fp)
    vga_regs->blend_bias    = bias;
 8006720:	d0a00617 	ldw	r2,-32744(gp)
 8006724:	e0ffff17 	ldw	r3,-4(fp)
 8006728:	10c00315 	stw	r3,12(r2)
}
 800672c:	0001883a 	nop
 8006730:	e037883a 	mov	sp,fp
 8006734:	df000017 	ldw	fp,0(sp)
 8006738:	dec00104 	addi	sp,sp,4
 800673c:	f800283a 	ret

08006740 <setPixel>:

void setPixel(uint16_t* frame, uint32_t x, uint32_t y, uint16_t color) {
 8006740:	defffa04 	addi	sp,sp,-24
 8006744:	dfc00515 	stw	ra,20(sp)
 8006748:	df000415 	stw	fp,16(sp)
 800674c:	df000404 	addi	fp,sp,16
 8006750:	e13ffc15 	stw	r4,-16(fp)
 8006754:	e17ffd15 	stw	r5,-12(fp)
 8006758:	e1bffe15 	stw	r6,-8(fp)
 800675c:	3805883a 	mov	r2,r7
 8006760:	e0bfff0d 	sth	r2,-4(fp)
    if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT)
 8006764:	e0bffd17 	ldw	r2,-12(fp)
 8006768:	1080a028 	cmpgeui	r2,r2,640
 800676c:	10000f1e 	bne	r2,zero,80067ac <setPixel+0x6c>
 8006770:	e0bffe17 	ldw	r2,-8(fp)
 8006774:	10807828 	cmpgeui	r2,r2,480
 8006778:	10000c1e 	bne	r2,zero,80067ac <setPixel+0x6c>
        frame[y * SCREEN_WIDTH + x] = color;
 800677c:	0140a004 	movi	r5,640
 8006780:	e13ffe17 	ldw	r4,-8(fp)
 8006784:	80071600 	call	8007160 <__mulsi3>
 8006788:	1007883a 	mov	r3,r2
 800678c:	e0bffd17 	ldw	r2,-12(fp)
 8006790:	1885883a 	add	r2,r3,r2
 8006794:	1085883a 	add	r2,r2,r2
 8006798:	1007883a 	mov	r3,r2
 800679c:	e0bffc17 	ldw	r2,-16(fp)
 80067a0:	10c5883a 	add	r2,r2,r3
 80067a4:	e0ffff0b 	ldhu	r3,-4(fp)
 80067a8:	10c0000d 	sth	r3,0(r2)
}
 80067ac:	0001883a 	nop
 80067b0:	e037883a 	mov	sp,fp
 80067b4:	dfc00117 	ldw	ra,4(sp)
 80067b8:	df000017 	ldw	fp,0(sp)
 80067bc:	dec00204 	addi	sp,sp,8
 80067c0:	f800283a 	ret

080067c4 <getPixel>:

uint16_t getPixel(uint16_t* frame, uint32_t x, uint32_t y) {
 80067c4:	defffb04 	addi	sp,sp,-20
 80067c8:	dfc00415 	stw	ra,16(sp)
 80067cc:	df000315 	stw	fp,12(sp)
 80067d0:	df000304 	addi	fp,sp,12
 80067d4:	e13ffd15 	stw	r4,-12(fp)
 80067d8:	e17ffe15 	stw	r5,-8(fp)
 80067dc:	e1bfff15 	stw	r6,-4(fp)
    if (x < SCREEN_WIDTH && y < SCREEN_HEIGHT)
 80067e0:	e0bffe17 	ldw	r2,-8(fp)
 80067e4:	1080a028 	cmpgeui	r2,r2,640
 80067e8:	10000f1e 	bne	r2,zero,8006828 <getPixel+0x64>
 80067ec:	e0bfff17 	ldw	r2,-4(fp)
 80067f0:	10807828 	cmpgeui	r2,r2,480
 80067f4:	10000c1e 	bne	r2,zero,8006828 <getPixel+0x64>
        return frame[y * SCREEN_WIDTH + x];
 80067f8:	0140a004 	movi	r5,640
 80067fc:	e13fff17 	ldw	r4,-4(fp)
 8006800:	80071600 	call	8007160 <__mulsi3>
 8006804:	1007883a 	mov	r3,r2
 8006808:	e0bffe17 	ldw	r2,-8(fp)
 800680c:	1885883a 	add	r2,r3,r2
 8006810:	1085883a 	add	r2,r2,r2
 8006814:	1007883a 	mov	r3,r2
 8006818:	e0bffd17 	ldw	r2,-12(fp)
 800681c:	10c5883a 	add	r2,r2,r3
 8006820:	1080000b 	ldhu	r2,0(r2)
 8006824:	00000106 	br	800682c <getPixel+0x68>
    return 0;
 8006828:	0005883a 	mov	r2,zero
}
 800682c:	e037883a 	mov	sp,fp
 8006830:	dfc00117 	ldw	ra,4(sp)
 8006834:	df000017 	ldw	fp,0(sp)
 8006838:	dec00204 	addi	sp,sp,8
 800683c:	f800283a 	ret

08006840 <__fixunssfsi>:
 8006840:	defffd04 	addi	sp,sp,-12
 8006844:	dc000015 	stw	r16,0(sp)
 8006848:	0413c034 	movhi	r16,20224
 800684c:	800b883a 	mov	r5,r16
 8006850:	dc400115 	stw	r17,4(sp)
 8006854:	dfc00215 	stw	ra,8(sp)
 8006858:	2023883a 	mov	r17,r4
 800685c:	8007a900 	call	8007a90 <__gesf2>
 8006860:	1000070e 	bge	r2,zero,8006880 <__fixunssfsi+0x40>
 8006864:	8809883a 	mov	r4,r17
 8006868:	80085280 	call	8008528 <__fixsfsi>
 800686c:	dfc00217 	ldw	ra,8(sp)
 8006870:	dc400117 	ldw	r17,4(sp)
 8006874:	dc000017 	ldw	r16,0(sp)
 8006878:	dec00304 	addi	sp,sp,12
 800687c:	f800283a 	ret
 8006880:	800b883a 	mov	r5,r16
 8006884:	8809883a 	mov	r4,r17
 8006888:	80080440 	call	8008044 <__subsf3>
 800688c:	1009883a 	mov	r4,r2
 8006890:	80085280 	call	8008528 <__fixsfsi>
 8006894:	00e00034 	movhi	r3,32768
 8006898:	10c5883a 	add	r2,r2,r3
 800689c:	003ff306 	br	800686c <__alt_data_end+0xfc00686c>

080068a0 <__fixunsdfsi>:
 80068a0:	defffd04 	addi	sp,sp,-12
 80068a4:	000d883a 	mov	r6,zero
 80068a8:	01d07834 	movhi	r7,16864
 80068ac:	dc400115 	stw	r17,4(sp)
 80068b0:	dc000015 	stw	r16,0(sp)
 80068b4:	dfc00215 	stw	ra,8(sp)
 80068b8:	2023883a 	mov	r17,r4
 80068bc:	2821883a 	mov	r16,r5
 80068c0:	8008f680 	call	8008f68 <__gedf2>
 80068c4:	1000080e 	bge	r2,zero,80068e8 <__fixunsdfsi+0x48>
 80068c8:	8809883a 	mov	r4,r17
 80068cc:	800b883a 	mov	r5,r16
 80068d0:	800a1ac0 	call	800a1ac <__fixdfsi>
 80068d4:	dfc00217 	ldw	ra,8(sp)
 80068d8:	dc400117 	ldw	r17,4(sp)
 80068dc:	dc000017 	ldw	r16,0(sp)
 80068e0:	dec00304 	addi	sp,sp,12
 80068e4:	f800283a 	ret
 80068e8:	000d883a 	mov	r6,zero
 80068ec:	01d07834 	movhi	r7,16864
 80068f0:	8809883a 	mov	r4,r17
 80068f4:	800b883a 	mov	r5,r16
 80068f8:	80098b00 	call	80098b0 <__subdf3>
 80068fc:	180b883a 	mov	r5,r3
 8006900:	1009883a 	mov	r4,r2
 8006904:	800a1ac0 	call	800a1ac <__fixdfsi>
 8006908:	00e00034 	movhi	r3,32768
 800690c:	10c5883a 	add	r2,r2,r3
 8006910:	003ff006 	br	80068d4 <__alt_data_end+0xfc0068d4>

08006914 <__floatundisf>:
 8006914:	defffc04 	addi	sp,sp,-16
 8006918:	00800834 	movhi	r2,32
 800691c:	dc000015 	stw	r16,0(sp)
 8006920:	dfc00315 	stw	ra,12(sp)
 8006924:	dc800215 	stw	r18,8(sp)
 8006928:	dc400115 	stw	r17,4(sp)
 800692c:	10bfffc4 	addi	r2,r2,-1
 8006930:	2021883a 	mov	r16,r4
 8006934:	1140052e 	bgeu	r2,r5,800694c <__floatundisf+0x38>
 8006938:	2081ffcc 	andi	r2,r4,2047
 800693c:	10000326 	beq	r2,zero,800694c <__floatundisf+0x38>
 8006940:	00be0004 	movi	r2,-2048
 8006944:	20a0703a 	and	r16,r4,r2
 8006948:	84020014 	ori	r16,r16,2048
 800694c:	2809883a 	mov	r4,r5
 8006950:	800a22c0 	call	800a22c <__floatunsidf>
 8006954:	000d883a 	mov	r6,zero
 8006958:	01d07c34 	movhi	r7,16880
 800695c:	180b883a 	mov	r5,r3
 8006960:	1009883a 	mov	r4,r2
 8006964:	80090440 	call	8009044 <__muldf3>
 8006968:	8009883a 	mov	r4,r16
 800696c:	1025883a 	mov	r18,r2
 8006970:	1823883a 	mov	r17,r3
 8006974:	800a22c0 	call	800a22c <__floatunsidf>
 8006978:	900d883a 	mov	r6,r18
 800697c:	880f883a 	mov	r7,r17
 8006980:	1009883a 	mov	r4,r2
 8006984:	180b883a 	mov	r5,r3
 8006988:	80086bc0 	call	80086bc <__adddf3>
 800698c:	1009883a 	mov	r4,r2
 8006990:	180b883a 	mov	r5,r3
 8006994:	800a3e40 	call	800a3e4 <__truncdfsf2>
 8006998:	dfc00317 	ldw	ra,12(sp)
 800699c:	dc800217 	ldw	r18,8(sp)
 80069a0:	dc400117 	ldw	r17,4(sp)
 80069a4:	dc000017 	ldw	r16,0(sp)
 80069a8:	dec00404 	addi	sp,sp,16
 80069ac:	f800283a 	ret

080069b0 <__udivdi3>:
 80069b0:	defff404 	addi	sp,sp,-48
 80069b4:	dcc00515 	stw	r19,20(sp)
 80069b8:	dc000215 	stw	r16,8(sp)
 80069bc:	dfc00b15 	stw	ra,44(sp)
 80069c0:	df000a15 	stw	fp,40(sp)
 80069c4:	ddc00915 	stw	r23,36(sp)
 80069c8:	dd800815 	stw	r22,32(sp)
 80069cc:	dd400715 	stw	r21,28(sp)
 80069d0:	dd000615 	stw	r20,24(sp)
 80069d4:	dc800415 	stw	r18,16(sp)
 80069d8:	dc400315 	stw	r17,12(sp)
 80069dc:	2027883a 	mov	r19,r4
 80069e0:	2821883a 	mov	r16,r5
 80069e4:	3800461e 	bne	r7,zero,8006b00 <__udivdi3+0x150>
 80069e8:	3023883a 	mov	r17,r6
 80069ec:	2025883a 	mov	r18,r4
 80069f0:	2980572e 	bgeu	r5,r6,8006b50 <__udivdi3+0x1a0>
 80069f4:	00bfffd4 	movui	r2,65535
 80069f8:	282d883a 	mov	r22,r5
 80069fc:	1180b236 	bltu	r2,r6,8006cc8 <__udivdi3+0x318>
 8006a00:	00803fc4 	movi	r2,255
 8006a04:	1185803a 	cmpltu	r2,r2,r6
 8006a08:	100490fa 	slli	r2,r2,3
 8006a0c:	3086d83a 	srl	r3,r6,r2
 8006a10:	01021974 	movhi	r4,2149
 8006a14:	2136fa04 	addi	r4,r4,-9240
 8006a18:	20c7883a 	add	r3,r4,r3
 8006a1c:	18c00003 	ldbu	r3,0(r3)
 8006a20:	1885883a 	add	r2,r3,r2
 8006a24:	00c00804 	movi	r3,32
 8006a28:	1887c83a 	sub	r3,r3,r2
 8006a2c:	18000526 	beq	r3,zero,8006a44 <__udivdi3+0x94>
 8006a30:	80e0983a 	sll	r16,r16,r3
 8006a34:	9884d83a 	srl	r2,r19,r2
 8006a38:	30e2983a 	sll	r17,r6,r3
 8006a3c:	98e4983a 	sll	r18,r19,r3
 8006a40:	142cb03a 	or	r22,r2,r16
 8006a44:	882ad43a 	srli	r21,r17,16
 8006a48:	b009883a 	mov	r4,r22
 8006a4c:	8d3fffcc 	andi	r20,r17,65535
 8006a50:	a80b883a 	mov	r5,r21
 8006a54:	80071080 	call	8007108 <__umodsi3>
 8006a58:	b009883a 	mov	r4,r22
 8006a5c:	a80b883a 	mov	r5,r21
 8006a60:	1027883a 	mov	r19,r2
 8006a64:	80070a40 	call	80070a4 <__udivsi3>
 8006a68:	100b883a 	mov	r5,r2
 8006a6c:	a009883a 	mov	r4,r20
 8006a70:	102d883a 	mov	r22,r2
 8006a74:	80071600 	call	8007160 <__mulsi3>
 8006a78:	9826943a 	slli	r19,r19,16
 8006a7c:	9006d43a 	srli	r3,r18,16
 8006a80:	1cc6b03a 	or	r3,r3,r19
 8006a84:	1880052e 	bgeu	r3,r2,8006a9c <__udivdi3+0xec>
 8006a88:	1c47883a 	add	r3,r3,r17
 8006a8c:	b13fffc4 	addi	r4,r22,-1
 8006a90:	1c400136 	bltu	r3,r17,8006a98 <__udivdi3+0xe8>
 8006a94:	18814236 	bltu	r3,r2,8006fa0 <__udivdi3+0x5f0>
 8006a98:	202d883a 	mov	r22,r4
 8006a9c:	18a1c83a 	sub	r16,r3,r2
 8006aa0:	8009883a 	mov	r4,r16
 8006aa4:	a80b883a 	mov	r5,r21
 8006aa8:	80071080 	call	8007108 <__umodsi3>
 8006aac:	1027883a 	mov	r19,r2
 8006ab0:	8009883a 	mov	r4,r16
 8006ab4:	a80b883a 	mov	r5,r21
 8006ab8:	9826943a 	slli	r19,r19,16
 8006abc:	80070a40 	call	80070a4 <__udivsi3>
 8006ac0:	100b883a 	mov	r5,r2
 8006ac4:	a009883a 	mov	r4,r20
 8006ac8:	94bfffcc 	andi	r18,r18,65535
 8006acc:	1021883a 	mov	r16,r2
 8006ad0:	94e4b03a 	or	r18,r18,r19
 8006ad4:	80071600 	call	8007160 <__mulsi3>
 8006ad8:	9080052e 	bgeu	r18,r2,8006af0 <__udivdi3+0x140>
 8006adc:	8ca5883a 	add	r18,r17,r18
 8006ae0:	80ffffc4 	addi	r3,r16,-1
 8006ae4:	94410c36 	bltu	r18,r17,8006f18 <__udivdi3+0x568>
 8006ae8:	90810b2e 	bgeu	r18,r2,8006f18 <__udivdi3+0x568>
 8006aec:	843fff84 	addi	r16,r16,-2
 8006af0:	b004943a 	slli	r2,r22,16
 8006af4:	0007883a 	mov	r3,zero
 8006af8:	1404b03a 	or	r2,r2,r16
 8006afc:	00005e06 	br	8006c78 <__udivdi3+0x2c8>
 8006b00:	29c05b36 	bltu	r5,r7,8006c70 <__udivdi3+0x2c0>
 8006b04:	00bfffd4 	movui	r2,65535
 8006b08:	11c0672e 	bgeu	r2,r7,8006ca8 <__udivdi3+0x2f8>
 8006b0c:	00804034 	movhi	r2,256
 8006b10:	10bfffc4 	addi	r2,r2,-1
 8006b14:	11c10a36 	bltu	r2,r7,8006f40 <__udivdi3+0x590>
 8006b18:	00800404 	movi	r2,16
 8006b1c:	3886d83a 	srl	r3,r7,r2
 8006b20:	01021974 	movhi	r4,2149
 8006b24:	2136fa04 	addi	r4,r4,-9240
 8006b28:	20c7883a 	add	r3,r4,r3
 8006b2c:	18c00003 	ldbu	r3,0(r3)
 8006b30:	05c00804 	movi	r23,32
 8006b34:	1885883a 	add	r2,r3,r2
 8006b38:	b8afc83a 	sub	r23,r23,r2
 8006b3c:	b800671e 	bne	r23,zero,8006cdc <__udivdi3+0x32c>
 8006b40:	3c010536 	bltu	r7,r16,8006f58 <__udivdi3+0x5a8>
 8006b44:	9985403a 	cmpgeu	r2,r19,r6
 8006b48:	0007883a 	mov	r3,zero
 8006b4c:	00004a06 	br	8006c78 <__udivdi3+0x2c8>
 8006b50:	3000041e 	bne	r6,zero,8006b64 <__udivdi3+0x1b4>
 8006b54:	000b883a 	mov	r5,zero
 8006b58:	01000044 	movi	r4,1
 8006b5c:	80070a40 	call	80070a4 <__udivsi3>
 8006b60:	1023883a 	mov	r17,r2
 8006b64:	00bfffd4 	movui	r2,65535
 8006b68:	1440532e 	bgeu	r2,r17,8006cb8 <__udivdi3+0x308>
 8006b6c:	00804034 	movhi	r2,256
 8006b70:	10bfffc4 	addi	r2,r2,-1
 8006b74:	1440f436 	bltu	r2,r17,8006f48 <__udivdi3+0x598>
 8006b78:	00800404 	movi	r2,16
 8006b7c:	8886d83a 	srl	r3,r17,r2
 8006b80:	01021974 	movhi	r4,2149
 8006b84:	2136fa04 	addi	r4,r4,-9240
 8006b88:	20c7883a 	add	r3,r4,r3
 8006b8c:	18c00003 	ldbu	r3,0(r3)
 8006b90:	1885883a 	add	r2,r3,r2
 8006b94:	00c00804 	movi	r3,32
 8006b98:	1887c83a 	sub	r3,r3,r2
 8006b9c:	1800a51e 	bne	r3,zero,8006e34 <__udivdi3+0x484>
 8006ba0:	882ad43a 	srli	r21,r17,16
 8006ba4:	8461c83a 	sub	r16,r16,r17
 8006ba8:	8d3fffcc 	andi	r20,r17,65535
 8006bac:	00c00044 	movi	r3,1
 8006bb0:	a80b883a 	mov	r5,r21
 8006bb4:	8009883a 	mov	r4,r16
 8006bb8:	d8c00115 	stw	r3,4(sp)
 8006bbc:	80071080 	call	8007108 <__umodsi3>
 8006bc0:	a80b883a 	mov	r5,r21
 8006bc4:	8009883a 	mov	r4,r16
 8006bc8:	1027883a 	mov	r19,r2
 8006bcc:	80070a40 	call	80070a4 <__udivsi3>
 8006bd0:	a00b883a 	mov	r5,r20
 8006bd4:	1009883a 	mov	r4,r2
 8006bd8:	102d883a 	mov	r22,r2
 8006bdc:	80071600 	call	8007160 <__mulsi3>
 8006be0:	9826943a 	slli	r19,r19,16
 8006be4:	900ed43a 	srli	r7,r18,16
 8006be8:	d8c00117 	ldw	r3,4(sp)
 8006bec:	3cceb03a 	or	r7,r7,r19
 8006bf0:	3880052e 	bgeu	r7,r2,8006c08 <__udivdi3+0x258>
 8006bf4:	3c4f883a 	add	r7,r7,r17
 8006bf8:	b13fffc4 	addi	r4,r22,-1
 8006bfc:	3c400136 	bltu	r7,r17,8006c04 <__udivdi3+0x254>
 8006c00:	3880e436 	bltu	r7,r2,8006f94 <__udivdi3+0x5e4>
 8006c04:	202d883a 	mov	r22,r4
 8006c08:	38a1c83a 	sub	r16,r7,r2
 8006c0c:	8009883a 	mov	r4,r16
 8006c10:	a80b883a 	mov	r5,r21
 8006c14:	d8c00115 	stw	r3,4(sp)
 8006c18:	80071080 	call	8007108 <__umodsi3>
 8006c1c:	1027883a 	mov	r19,r2
 8006c20:	8009883a 	mov	r4,r16
 8006c24:	a80b883a 	mov	r5,r21
 8006c28:	9826943a 	slli	r19,r19,16
 8006c2c:	80070a40 	call	80070a4 <__udivsi3>
 8006c30:	a00b883a 	mov	r5,r20
 8006c34:	1009883a 	mov	r4,r2
 8006c38:	94bfffcc 	andi	r18,r18,65535
 8006c3c:	1021883a 	mov	r16,r2
 8006c40:	94e4b03a 	or	r18,r18,r19
 8006c44:	80071600 	call	8007160 <__mulsi3>
 8006c48:	d8c00117 	ldw	r3,4(sp)
 8006c4c:	9080052e 	bgeu	r18,r2,8006c64 <__udivdi3+0x2b4>
 8006c50:	8ca5883a 	add	r18,r17,r18
 8006c54:	813fffc4 	addi	r4,r16,-1
 8006c58:	9440ad36 	bltu	r18,r17,8006f10 <__udivdi3+0x560>
 8006c5c:	9080ac2e 	bgeu	r18,r2,8006f10 <__udivdi3+0x560>
 8006c60:	843fff84 	addi	r16,r16,-2
 8006c64:	b004943a 	slli	r2,r22,16
 8006c68:	1404b03a 	or	r2,r2,r16
 8006c6c:	00000206 	br	8006c78 <__udivdi3+0x2c8>
 8006c70:	0007883a 	mov	r3,zero
 8006c74:	0005883a 	mov	r2,zero
 8006c78:	dfc00b17 	ldw	ra,44(sp)
 8006c7c:	df000a17 	ldw	fp,40(sp)
 8006c80:	ddc00917 	ldw	r23,36(sp)
 8006c84:	dd800817 	ldw	r22,32(sp)
 8006c88:	dd400717 	ldw	r21,28(sp)
 8006c8c:	dd000617 	ldw	r20,24(sp)
 8006c90:	dcc00517 	ldw	r19,20(sp)
 8006c94:	dc800417 	ldw	r18,16(sp)
 8006c98:	dc400317 	ldw	r17,12(sp)
 8006c9c:	dc000217 	ldw	r16,8(sp)
 8006ca0:	dec00c04 	addi	sp,sp,48
 8006ca4:	f800283a 	ret
 8006ca8:	00803fc4 	movi	r2,255
 8006cac:	11c5803a 	cmpltu	r2,r2,r7
 8006cb0:	100490fa 	slli	r2,r2,3
 8006cb4:	003f9906 	br	8006b1c <__alt_data_end+0xfc006b1c>
 8006cb8:	00803fc4 	movi	r2,255
 8006cbc:	1445803a 	cmpltu	r2,r2,r17
 8006cc0:	100490fa 	slli	r2,r2,3
 8006cc4:	003fad06 	br	8006b7c <__alt_data_end+0xfc006b7c>
 8006cc8:	00804034 	movhi	r2,256
 8006ccc:	10bfffc4 	addi	r2,r2,-1
 8006cd0:	11809f36 	bltu	r2,r6,8006f50 <__udivdi3+0x5a0>
 8006cd4:	00800404 	movi	r2,16
 8006cd8:	003f4c06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006cdc:	3dce983a 	sll	r7,r7,r23
 8006ce0:	30b8d83a 	srl	fp,r6,r2
 8006ce4:	80a2d83a 	srl	r17,r16,r2
 8006ce8:	35cc983a 	sll	r6,r6,r23
 8006cec:	3f38b03a 	or	fp,r7,fp
 8006cf0:	e024d43a 	srli	r18,fp,16
 8006cf4:	9884d83a 	srl	r2,r19,r2
 8006cf8:	85e0983a 	sll	r16,r16,r23
 8006cfc:	8809883a 	mov	r4,r17
 8006d00:	900b883a 	mov	r5,r18
 8006d04:	d9800015 	stw	r6,0(sp)
 8006d08:	1420b03a 	or	r16,r2,r16
 8006d0c:	80071080 	call	8007108 <__umodsi3>
 8006d10:	900b883a 	mov	r5,r18
 8006d14:	8809883a 	mov	r4,r17
 8006d18:	1029883a 	mov	r20,r2
 8006d1c:	e5bfffcc 	andi	r22,fp,65535
 8006d20:	80070a40 	call	80070a4 <__udivsi3>
 8006d24:	100b883a 	mov	r5,r2
 8006d28:	b009883a 	mov	r4,r22
 8006d2c:	102b883a 	mov	r21,r2
 8006d30:	80071600 	call	8007160 <__mulsi3>
 8006d34:	a028943a 	slli	r20,r20,16
 8006d38:	8006d43a 	srli	r3,r16,16
 8006d3c:	1d06b03a 	or	r3,r3,r20
 8006d40:	1880042e 	bgeu	r3,r2,8006d54 <__udivdi3+0x3a4>
 8006d44:	1f07883a 	add	r3,r3,fp
 8006d48:	a93fffc4 	addi	r4,r21,-1
 8006d4c:	1f00892e 	bgeu	r3,fp,8006f74 <__udivdi3+0x5c4>
 8006d50:	202b883a 	mov	r21,r4
 8006d54:	18a3c83a 	sub	r17,r3,r2
 8006d58:	8809883a 	mov	r4,r17
 8006d5c:	900b883a 	mov	r5,r18
 8006d60:	80071080 	call	8007108 <__umodsi3>
 8006d64:	1029883a 	mov	r20,r2
 8006d68:	8809883a 	mov	r4,r17
 8006d6c:	900b883a 	mov	r5,r18
 8006d70:	a028943a 	slli	r20,r20,16
 8006d74:	80070a40 	call	80070a4 <__udivsi3>
 8006d78:	100b883a 	mov	r5,r2
 8006d7c:	b009883a 	mov	r4,r22
 8006d80:	843fffcc 	andi	r16,r16,65535
 8006d84:	1023883a 	mov	r17,r2
 8006d88:	8520b03a 	or	r16,r16,r20
 8006d8c:	80071600 	call	8007160 <__mulsi3>
 8006d90:	8080042e 	bgeu	r16,r2,8006da4 <__udivdi3+0x3f4>
 8006d94:	8721883a 	add	r16,r16,fp
 8006d98:	88ffffc4 	addi	r3,r17,-1
 8006d9c:	8700712e 	bgeu	r16,fp,8006f64 <__udivdi3+0x5b4>
 8006da0:	1823883a 	mov	r17,r3
 8006da4:	a80e943a 	slli	r7,r21,16
 8006da8:	d8c00017 	ldw	r3,0(sp)
 8006dac:	80a1c83a 	sub	r16,r16,r2
 8006db0:	3c64b03a 	or	r18,r7,r17
 8006db4:	1d3fffcc 	andi	r20,r3,65535
 8006db8:	9022d43a 	srli	r17,r18,16
 8006dbc:	95bfffcc 	andi	r22,r18,65535
 8006dc0:	a00b883a 	mov	r5,r20
 8006dc4:	b009883a 	mov	r4,r22
 8006dc8:	182ad43a 	srli	r21,r3,16
 8006dcc:	80071600 	call	8007160 <__mulsi3>
 8006dd0:	a00b883a 	mov	r5,r20
 8006dd4:	8809883a 	mov	r4,r17
 8006dd8:	1039883a 	mov	fp,r2
 8006ddc:	80071600 	call	8007160 <__mulsi3>
 8006de0:	8809883a 	mov	r4,r17
 8006de4:	a80b883a 	mov	r5,r21
 8006de8:	1029883a 	mov	r20,r2
 8006dec:	80071600 	call	8007160 <__mulsi3>
 8006df0:	a80b883a 	mov	r5,r21
 8006df4:	b009883a 	mov	r4,r22
 8006df8:	1023883a 	mov	r17,r2
 8006dfc:	80071600 	call	8007160 <__mulsi3>
 8006e00:	e006d43a 	srli	r3,fp,16
 8006e04:	1505883a 	add	r2,r2,r20
 8006e08:	1887883a 	add	r3,r3,r2
 8006e0c:	1d00022e 	bgeu	r3,r20,8006e18 <__udivdi3+0x468>
 8006e10:	00800074 	movhi	r2,1
 8006e14:	88a3883a 	add	r17,r17,r2
 8006e18:	1804d43a 	srli	r2,r3,16
 8006e1c:	1463883a 	add	r17,r2,r17
 8006e20:	84404436 	bltu	r16,r17,8006f34 <__udivdi3+0x584>
 8006e24:	84403e26 	beq	r16,r17,8006f20 <__udivdi3+0x570>
 8006e28:	9005883a 	mov	r2,r18
 8006e2c:	0007883a 	mov	r3,zero
 8006e30:	003f9106 	br	8006c78 <__alt_data_end+0xfc006c78>
 8006e34:	88e2983a 	sll	r17,r17,r3
 8006e38:	80aed83a 	srl	r23,r16,r2
 8006e3c:	80e0983a 	sll	r16,r16,r3
 8006e40:	882ad43a 	srli	r21,r17,16
 8006e44:	9884d83a 	srl	r2,r19,r2
 8006e48:	b809883a 	mov	r4,r23
 8006e4c:	a80b883a 	mov	r5,r21
 8006e50:	98e4983a 	sll	r18,r19,r3
 8006e54:	142cb03a 	or	r22,r2,r16
 8006e58:	80071080 	call	8007108 <__umodsi3>
 8006e5c:	b809883a 	mov	r4,r23
 8006e60:	a80b883a 	mov	r5,r21
 8006e64:	1027883a 	mov	r19,r2
 8006e68:	8d3fffcc 	andi	r20,r17,65535
 8006e6c:	80070a40 	call	80070a4 <__udivsi3>
 8006e70:	a009883a 	mov	r4,r20
 8006e74:	100b883a 	mov	r5,r2
 8006e78:	102f883a 	mov	r23,r2
 8006e7c:	80071600 	call	8007160 <__mulsi3>
 8006e80:	9826943a 	slli	r19,r19,16
 8006e84:	b008d43a 	srli	r4,r22,16
 8006e88:	24c8b03a 	or	r4,r4,r19
 8006e8c:	2080062e 	bgeu	r4,r2,8006ea8 <__udivdi3+0x4f8>
 8006e90:	2449883a 	add	r4,r4,r17
 8006e94:	b8ffffc4 	addi	r3,r23,-1
 8006e98:	24403c36 	bltu	r4,r17,8006f8c <__udivdi3+0x5dc>
 8006e9c:	20803b2e 	bgeu	r4,r2,8006f8c <__udivdi3+0x5dc>
 8006ea0:	bdffff84 	addi	r23,r23,-2
 8006ea4:	2449883a 	add	r4,r4,r17
 8006ea8:	20a1c83a 	sub	r16,r4,r2
 8006eac:	a80b883a 	mov	r5,r21
 8006eb0:	8009883a 	mov	r4,r16
 8006eb4:	80071080 	call	8007108 <__umodsi3>
 8006eb8:	a80b883a 	mov	r5,r21
 8006ebc:	8009883a 	mov	r4,r16
 8006ec0:	1027883a 	mov	r19,r2
 8006ec4:	80070a40 	call	80070a4 <__udivsi3>
 8006ec8:	a009883a 	mov	r4,r20
 8006ecc:	100b883a 	mov	r5,r2
 8006ed0:	9826943a 	slli	r19,r19,16
 8006ed4:	1039883a 	mov	fp,r2
 8006ed8:	80071600 	call	8007160 <__mulsi3>
 8006edc:	b13fffcc 	andi	r4,r22,65535
 8006ee0:	24c8b03a 	or	r4,r4,r19
 8006ee4:	2080062e 	bgeu	r4,r2,8006f00 <__udivdi3+0x550>
 8006ee8:	2449883a 	add	r4,r4,r17
 8006eec:	e0ffffc4 	addi	r3,fp,-1
 8006ef0:	24402436 	bltu	r4,r17,8006f84 <__udivdi3+0x5d4>
 8006ef4:	2080232e 	bgeu	r4,r2,8006f84 <__udivdi3+0x5d4>
 8006ef8:	e73fff84 	addi	fp,fp,-2
 8006efc:	2449883a 	add	r4,r4,r17
 8006f00:	b82e943a 	slli	r23,r23,16
 8006f04:	20a1c83a 	sub	r16,r4,r2
 8006f08:	bf06b03a 	or	r3,r23,fp
 8006f0c:	003f2806 	br	8006bb0 <__alt_data_end+0xfc006bb0>
 8006f10:	2021883a 	mov	r16,r4
 8006f14:	003f5306 	br	8006c64 <__alt_data_end+0xfc006c64>
 8006f18:	1821883a 	mov	r16,r3
 8006f1c:	003ef406 	br	8006af0 <__alt_data_end+0xfc006af0>
 8006f20:	1806943a 	slli	r3,r3,16
 8006f24:	9de6983a 	sll	r19,r19,r23
 8006f28:	e73fffcc 	andi	fp,fp,65535
 8006f2c:	1f07883a 	add	r3,r3,fp
 8006f30:	98ffbd2e 	bgeu	r19,r3,8006e28 <__alt_data_end+0xfc006e28>
 8006f34:	90bfffc4 	addi	r2,r18,-1
 8006f38:	0007883a 	mov	r3,zero
 8006f3c:	003f4e06 	br	8006c78 <__alt_data_end+0xfc006c78>
 8006f40:	00800604 	movi	r2,24
 8006f44:	003ef506 	br	8006b1c <__alt_data_end+0xfc006b1c>
 8006f48:	00800604 	movi	r2,24
 8006f4c:	003f0b06 	br	8006b7c <__alt_data_end+0xfc006b7c>
 8006f50:	00800604 	movi	r2,24
 8006f54:	003ead06 	br	8006a0c <__alt_data_end+0xfc006a0c>
 8006f58:	0007883a 	mov	r3,zero
 8006f5c:	00800044 	movi	r2,1
 8006f60:	003f4506 	br	8006c78 <__alt_data_end+0xfc006c78>
 8006f64:	80bf8e2e 	bgeu	r16,r2,8006da0 <__alt_data_end+0xfc006da0>
 8006f68:	8c7fff84 	addi	r17,r17,-2
 8006f6c:	8721883a 	add	r16,r16,fp
 8006f70:	003f8c06 	br	8006da4 <__alt_data_end+0xfc006da4>
 8006f74:	18bf762e 	bgeu	r3,r2,8006d50 <__alt_data_end+0xfc006d50>
 8006f78:	ad7fff84 	addi	r21,r21,-2
 8006f7c:	1f07883a 	add	r3,r3,fp
 8006f80:	003f7406 	br	8006d54 <__alt_data_end+0xfc006d54>
 8006f84:	1839883a 	mov	fp,r3
 8006f88:	003fdd06 	br	8006f00 <__alt_data_end+0xfc006f00>
 8006f8c:	182f883a 	mov	r23,r3
 8006f90:	003fc506 	br	8006ea8 <__alt_data_end+0xfc006ea8>
 8006f94:	b5bfff84 	addi	r22,r22,-2
 8006f98:	3c4f883a 	add	r7,r7,r17
 8006f9c:	003f1a06 	br	8006c08 <__alt_data_end+0xfc006c08>
 8006fa0:	b5bfff84 	addi	r22,r22,-2
 8006fa4:	1c47883a 	add	r3,r3,r17
 8006fa8:	003ebc06 	br	8006a9c <__alt_data_end+0xfc006a9c>

08006fac <__divsi3>:
 8006fac:	20001b16 	blt	r4,zero,800701c <__divsi3+0x70>
 8006fb0:	000f883a 	mov	r7,zero
 8006fb4:	28001616 	blt	r5,zero,8007010 <__divsi3+0x64>
 8006fb8:	200d883a 	mov	r6,r4
 8006fbc:	29001a2e 	bgeu	r5,r4,8007028 <__divsi3+0x7c>
 8006fc0:	00800804 	movi	r2,32
 8006fc4:	00c00044 	movi	r3,1
 8006fc8:	00000106 	br	8006fd0 <__divsi3+0x24>
 8006fcc:	10000d26 	beq	r2,zero,8007004 <__divsi3+0x58>
 8006fd0:	294b883a 	add	r5,r5,r5
 8006fd4:	10bfffc4 	addi	r2,r2,-1
 8006fd8:	18c7883a 	add	r3,r3,r3
 8006fdc:	293ffb36 	bltu	r5,r4,8006fcc <__alt_data_end+0xfc006fcc>
 8006fe0:	0005883a 	mov	r2,zero
 8006fe4:	18000726 	beq	r3,zero,8007004 <__divsi3+0x58>
 8006fe8:	0005883a 	mov	r2,zero
 8006fec:	31400236 	bltu	r6,r5,8006ff8 <__divsi3+0x4c>
 8006ff0:	314dc83a 	sub	r6,r6,r5
 8006ff4:	10c4b03a 	or	r2,r2,r3
 8006ff8:	1806d07a 	srli	r3,r3,1
 8006ffc:	280ad07a 	srli	r5,r5,1
 8007000:	183ffa1e 	bne	r3,zero,8006fec <__alt_data_end+0xfc006fec>
 8007004:	38000126 	beq	r7,zero,800700c <__divsi3+0x60>
 8007008:	0085c83a 	sub	r2,zero,r2
 800700c:	f800283a 	ret
 8007010:	014bc83a 	sub	r5,zero,r5
 8007014:	39c0005c 	xori	r7,r7,1
 8007018:	003fe706 	br	8006fb8 <__alt_data_end+0xfc006fb8>
 800701c:	0109c83a 	sub	r4,zero,r4
 8007020:	01c00044 	movi	r7,1
 8007024:	003fe306 	br	8006fb4 <__alt_data_end+0xfc006fb4>
 8007028:	00c00044 	movi	r3,1
 800702c:	003fee06 	br	8006fe8 <__alt_data_end+0xfc006fe8>

08007030 <__modsi3>:
 8007030:	20001716 	blt	r4,zero,8007090 <__modsi3+0x60>
 8007034:	000f883a 	mov	r7,zero
 8007038:	2005883a 	mov	r2,r4
 800703c:	28001216 	blt	r5,zero,8007088 <__modsi3+0x58>
 8007040:	2900162e 	bgeu	r5,r4,800709c <__modsi3+0x6c>
 8007044:	01800804 	movi	r6,32
 8007048:	00c00044 	movi	r3,1
 800704c:	00000106 	br	8007054 <__modsi3+0x24>
 8007050:	30000a26 	beq	r6,zero,800707c <__modsi3+0x4c>
 8007054:	294b883a 	add	r5,r5,r5
 8007058:	31bfffc4 	addi	r6,r6,-1
 800705c:	18c7883a 	add	r3,r3,r3
 8007060:	293ffb36 	bltu	r5,r4,8007050 <__alt_data_end+0xfc007050>
 8007064:	18000526 	beq	r3,zero,800707c <__modsi3+0x4c>
 8007068:	1806d07a 	srli	r3,r3,1
 800706c:	11400136 	bltu	r2,r5,8007074 <__modsi3+0x44>
 8007070:	1145c83a 	sub	r2,r2,r5
 8007074:	280ad07a 	srli	r5,r5,1
 8007078:	183ffb1e 	bne	r3,zero,8007068 <__alt_data_end+0xfc007068>
 800707c:	38000126 	beq	r7,zero,8007084 <__modsi3+0x54>
 8007080:	0085c83a 	sub	r2,zero,r2
 8007084:	f800283a 	ret
 8007088:	014bc83a 	sub	r5,zero,r5
 800708c:	003fec06 	br	8007040 <__alt_data_end+0xfc007040>
 8007090:	0109c83a 	sub	r4,zero,r4
 8007094:	01c00044 	movi	r7,1
 8007098:	003fe706 	br	8007038 <__alt_data_end+0xfc007038>
 800709c:	00c00044 	movi	r3,1
 80070a0:	003ff106 	br	8007068 <__alt_data_end+0xfc007068>

080070a4 <__udivsi3>:
 80070a4:	200d883a 	mov	r6,r4
 80070a8:	2900152e 	bgeu	r5,r4,8007100 <__udivsi3+0x5c>
 80070ac:	28001416 	blt	r5,zero,8007100 <__udivsi3+0x5c>
 80070b0:	00800804 	movi	r2,32
 80070b4:	00c00044 	movi	r3,1
 80070b8:	00000206 	br	80070c4 <__udivsi3+0x20>
 80070bc:	10000e26 	beq	r2,zero,80070f8 <__udivsi3+0x54>
 80070c0:	28000516 	blt	r5,zero,80070d8 <__udivsi3+0x34>
 80070c4:	294b883a 	add	r5,r5,r5
 80070c8:	10bfffc4 	addi	r2,r2,-1
 80070cc:	18c7883a 	add	r3,r3,r3
 80070d0:	293ffa36 	bltu	r5,r4,80070bc <__alt_data_end+0xfc0070bc>
 80070d4:	18000826 	beq	r3,zero,80070f8 <__udivsi3+0x54>
 80070d8:	0005883a 	mov	r2,zero
 80070dc:	31400236 	bltu	r6,r5,80070e8 <__udivsi3+0x44>
 80070e0:	314dc83a 	sub	r6,r6,r5
 80070e4:	10c4b03a 	or	r2,r2,r3
 80070e8:	1806d07a 	srli	r3,r3,1
 80070ec:	280ad07a 	srli	r5,r5,1
 80070f0:	183ffa1e 	bne	r3,zero,80070dc <__alt_data_end+0xfc0070dc>
 80070f4:	f800283a 	ret
 80070f8:	0005883a 	mov	r2,zero
 80070fc:	f800283a 	ret
 8007100:	00c00044 	movi	r3,1
 8007104:	003ff406 	br	80070d8 <__alt_data_end+0xfc0070d8>

08007108 <__umodsi3>:
 8007108:	2005883a 	mov	r2,r4
 800710c:	2900122e 	bgeu	r5,r4,8007158 <__umodsi3+0x50>
 8007110:	28001116 	blt	r5,zero,8007158 <__umodsi3+0x50>
 8007114:	01800804 	movi	r6,32
 8007118:	00c00044 	movi	r3,1
 800711c:	00000206 	br	8007128 <__umodsi3+0x20>
 8007120:	30000c26 	beq	r6,zero,8007154 <__umodsi3+0x4c>
 8007124:	28000516 	blt	r5,zero,800713c <__umodsi3+0x34>
 8007128:	294b883a 	add	r5,r5,r5
 800712c:	31bfffc4 	addi	r6,r6,-1
 8007130:	18c7883a 	add	r3,r3,r3
 8007134:	293ffa36 	bltu	r5,r4,8007120 <__alt_data_end+0xfc007120>
 8007138:	18000626 	beq	r3,zero,8007154 <__umodsi3+0x4c>
 800713c:	1806d07a 	srli	r3,r3,1
 8007140:	11400136 	bltu	r2,r5,8007148 <__umodsi3+0x40>
 8007144:	1145c83a 	sub	r2,r2,r5
 8007148:	280ad07a 	srli	r5,r5,1
 800714c:	183ffb1e 	bne	r3,zero,800713c <__alt_data_end+0xfc00713c>
 8007150:	f800283a 	ret
 8007154:	f800283a 	ret
 8007158:	00c00044 	movi	r3,1
 800715c:	003ff706 	br	800713c <__alt_data_end+0xfc00713c>

08007160 <__mulsi3>:
 8007160:	0005883a 	mov	r2,zero
 8007164:	20000726 	beq	r4,zero,8007184 <__mulsi3+0x24>
 8007168:	20c0004c 	andi	r3,r4,1
 800716c:	2008d07a 	srli	r4,r4,1
 8007170:	18000126 	beq	r3,zero,8007178 <__mulsi3+0x18>
 8007174:	1145883a 	add	r2,r2,r5
 8007178:	294b883a 	add	r5,r5,r5
 800717c:	203ffa1e 	bne	r4,zero,8007168 <__alt_data_end+0xfc007168>
 8007180:	f800283a 	ret
 8007184:	f800283a 	ret

08007188 <__addsf3>:
 8007188:	defffc04 	addi	sp,sp,-16
 800718c:	2004d7fa 	srli	r2,r4,31
 8007190:	280cd5fa 	srli	r6,r5,23
 8007194:	dc000015 	stw	r16,0(sp)
 8007198:	00c02034 	movhi	r3,128
 800719c:	2020d5fa 	srli	r16,r4,23
 80071a0:	280ed7fa 	srli	r7,r5,31
 80071a4:	18ffffc4 	addi	r3,r3,-1
 80071a8:	dc400115 	stw	r17,4(sp)
 80071ac:	1908703a 	and	r4,r3,r4
 80071b0:	194a703a 	and	r5,r3,r5
 80071b4:	dfc00315 	stw	ra,12(sp)
 80071b8:	dc800215 	stw	r18,8(sp)
 80071bc:	14403fcc 	andi	r17,r2,255
 80071c0:	84003fcc 	andi	r16,r16,255
 80071c4:	200890fa 	slli	r4,r4,3
 80071c8:	31803fcc 	andi	r6,r6,255
 80071cc:	280a90fa 	slli	r5,r5,3
 80071d0:	89c05026 	beq	r17,r7,8007314 <__addsf3+0x18c>
 80071d4:	8185c83a 	sub	r2,r16,r6
 80071d8:	00807a0e 	bge	zero,r2,80073c4 <__addsf3+0x23c>
 80071dc:	30001e1e 	bne	r6,zero,8007258 <__addsf3+0xd0>
 80071e0:	28006d1e 	bne	r5,zero,8007398 <__addsf3+0x210>
 80071e4:	208001cc 	andi	r2,r4,7
 80071e8:	10000426 	beq	r2,zero,80071fc <__addsf3+0x74>
 80071ec:	208003cc 	andi	r2,r4,15
 80071f0:	00c00104 	movi	r3,4
 80071f4:	10c00126 	beq	r2,r3,80071fc <__addsf3+0x74>
 80071f8:	20c9883a 	add	r4,r4,r3
 80071fc:	2081002c 	andhi	r2,r4,1024
 8007200:	10003926 	beq	r2,zero,80072e8 <__addsf3+0x160>
 8007204:	84000044 	addi	r16,r16,1
 8007208:	00803fc4 	movi	r2,255
 800720c:	80807826 	beq	r16,r2,80073f0 <__addsf3+0x268>
 8007210:	200891ba 	slli	r4,r4,6
 8007214:	8805883a 	mov	r2,r17
 8007218:	2008d27a 	srli	r4,r4,9
 800721c:	84003fcc 	andi	r16,r16,255
 8007220:	800695fa 	slli	r3,r16,23
 8007224:	10803fcc 	andi	r2,r2,255
 8007228:	04002034 	movhi	r16,128
 800722c:	843fffc4 	addi	r16,r16,-1
 8007230:	100497fa 	slli	r2,r2,31
 8007234:	2408703a 	and	r4,r4,r16
 8007238:	20e0b03a 	or	r16,r4,r3
 800723c:	8084b03a 	or	r2,r16,r2
 8007240:	dfc00317 	ldw	ra,12(sp)
 8007244:	dc800217 	ldw	r18,8(sp)
 8007248:	dc400117 	ldw	r17,4(sp)
 800724c:	dc000017 	ldw	r16,0(sp)
 8007250:	dec00404 	addi	sp,sp,16
 8007254:	f800283a 	ret
 8007258:	00c03fc4 	movi	r3,255
 800725c:	80ffe126 	beq	r16,r3,80071e4 <__alt_data_end+0xfc0071e4>
 8007260:	29410034 	orhi	r5,r5,1024
 8007264:	00c006c4 	movi	r3,27
 8007268:	18807516 	blt	r3,r2,8007440 <__addsf3+0x2b8>
 800726c:	00c00804 	movi	r3,32
 8007270:	1887c83a 	sub	r3,r3,r2
 8007274:	28c6983a 	sll	r3,r5,r3
 8007278:	288ad83a 	srl	r5,r5,r2
 800727c:	1804c03a 	cmpne	r2,r3,zero
 8007280:	288ab03a 	or	r5,r5,r2
 8007284:	2149c83a 	sub	r4,r4,r5
 8007288:	2081002c 	andhi	r2,r4,1024
 800728c:	10001426 	beq	r2,zero,80072e0 <__addsf3+0x158>
 8007290:	04810034 	movhi	r18,1024
 8007294:	94bfffc4 	addi	r18,r18,-1
 8007298:	24a4703a 	and	r18,r4,r18
 800729c:	9009883a 	mov	r4,r18
 80072a0:	800a58c0 	call	800a58c <__clzsi2>
 80072a4:	10bffec4 	addi	r2,r2,-5
 80072a8:	90a4983a 	sll	r18,r18,r2
 80072ac:	14005416 	blt	r2,r16,8007400 <__addsf3+0x278>
 80072b0:	1405c83a 	sub	r2,r2,r16
 80072b4:	11000044 	addi	r4,r2,1
 80072b8:	00800804 	movi	r2,32
 80072bc:	1105c83a 	sub	r2,r2,r4
 80072c0:	9084983a 	sll	r2,r18,r2
 80072c4:	9124d83a 	srl	r18,r18,r4
 80072c8:	0021883a 	mov	r16,zero
 80072cc:	1008c03a 	cmpne	r4,r2,zero
 80072d0:	9108b03a 	or	r4,r18,r4
 80072d4:	003fc306 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80072d8:	1000db26 	beq	r2,zero,8007648 <__addsf3+0x4c0>
 80072dc:	1009883a 	mov	r4,r2
 80072e0:	208001cc 	andi	r2,r4,7
 80072e4:	103fc11e 	bne	r2,zero,80071ec <__alt_data_end+0xfc0071ec>
 80072e8:	2006d0fa 	srli	r3,r4,3
 80072ec:	01003fc4 	movi	r4,255
 80072f0:	8805883a 	mov	r2,r17
 80072f4:	8100241e 	bne	r16,r4,8007388 <__addsf3+0x200>
 80072f8:	18006e26 	beq	r3,zero,80074b4 <__addsf3+0x32c>
 80072fc:	19001034 	orhi	r4,r3,64
 8007300:	00c02034 	movhi	r3,128
 8007304:	18ffffc4 	addi	r3,r3,-1
 8007308:	043fffc4 	movi	r16,-1
 800730c:	20c8703a 	and	r4,r4,r3
 8007310:	003fc206 	br	800721c <__alt_data_end+0xfc00721c>
 8007314:	8187c83a 	sub	r3,r16,r6
 8007318:	00c03e0e 	bge	zero,r3,8007414 <__addsf3+0x28c>
 800731c:	30002326 	beq	r6,zero,80073ac <__addsf3+0x224>
 8007320:	01803fc4 	movi	r6,255
 8007324:	81bfaf26 	beq	r16,r6,80071e4 <__alt_data_end+0xfc0071e4>
 8007328:	29410034 	orhi	r5,r5,1024
 800732c:	018006c4 	movi	r6,27
 8007330:	30c07416 	blt	r6,r3,8007504 <__addsf3+0x37c>
 8007334:	01800804 	movi	r6,32
 8007338:	30cdc83a 	sub	r6,r6,r3
 800733c:	298c983a 	sll	r6,r5,r6
 8007340:	28cad83a 	srl	r5,r5,r3
 8007344:	3006c03a 	cmpne	r3,r6,zero
 8007348:	28cab03a 	or	r5,r5,r3
 800734c:	2149883a 	add	r4,r4,r5
 8007350:	20c1002c 	andhi	r3,r4,1024
 8007354:	183fe226 	beq	r3,zero,80072e0 <__alt_data_end+0xfc0072e0>
 8007358:	84000044 	addi	r16,r16,1
 800735c:	00c03fc4 	movi	r3,255
 8007360:	80c05426 	beq	r16,r3,80074b4 <__addsf3+0x32c>
 8007364:	00bf0034 	movhi	r2,64512
 8007368:	10bfffc4 	addi	r2,r2,-1
 800736c:	20c0004c 	andi	r3,r4,1
 8007370:	2088703a 	and	r4,r4,r2
 8007374:	2008d07a 	srli	r4,r4,1
 8007378:	20c8b03a 	or	r4,r4,r3
 800737c:	003f9906 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007380:	0007883a 	mov	r3,zero
 8007384:	0005883a 	mov	r2,zero
 8007388:	01002034 	movhi	r4,128
 800738c:	213fffc4 	addi	r4,r4,-1
 8007390:	1908703a 	and	r4,r3,r4
 8007394:	003fa106 	br	800721c <__alt_data_end+0xfc00721c>
 8007398:	10bfffc4 	addi	r2,r2,-1
 800739c:	103fb926 	beq	r2,zero,8007284 <__alt_data_end+0xfc007284>
 80073a0:	00c03fc4 	movi	r3,255
 80073a4:	80ffaf1e 	bne	r16,r3,8007264 <__alt_data_end+0xfc007264>
 80073a8:	003f8e06 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80073ac:	283f8d26 	beq	r5,zero,80071e4 <__alt_data_end+0xfc0071e4>
 80073b0:	18ffffc4 	addi	r3,r3,-1
 80073b4:	183fe526 	beq	r3,zero,800734c <__alt_data_end+0xfc00734c>
 80073b8:	01803fc4 	movi	r6,255
 80073bc:	81bfdb1e 	bne	r16,r6,800732c <__alt_data_end+0xfc00732c>
 80073c0:	003f8806 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80073c4:	1000201e 	bne	r2,zero,8007448 <__addsf3+0x2c0>
 80073c8:	80800044 	addi	r2,r16,1
 80073cc:	10803fcc 	andi	r2,r2,255
 80073d0:	01800044 	movi	r6,1
 80073d4:	3080450e 	bge	r6,r2,80074ec <__addsf3+0x364>
 80073d8:	2165c83a 	sub	r18,r4,r5
 80073dc:	90c1002c 	andhi	r3,r18,1024
 80073e0:	18002b26 	beq	r3,zero,8007490 <__addsf3+0x308>
 80073e4:	2925c83a 	sub	r18,r5,r4
 80073e8:	3823883a 	mov	r17,r7
 80073ec:	003fab06 	br	800729c <__alt_data_end+0xfc00729c>
 80073f0:	8805883a 	mov	r2,r17
 80073f4:	043fffc4 	movi	r16,-1
 80073f8:	0009883a 	mov	r4,zero
 80073fc:	003f8706 	br	800721c <__alt_data_end+0xfc00721c>
 8007400:	013f0034 	movhi	r4,64512
 8007404:	213fffc4 	addi	r4,r4,-1
 8007408:	80a1c83a 	sub	r16,r16,r2
 800740c:	9108703a 	and	r4,r18,r4
 8007410:	003f7406 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007414:	1800411e 	bne	r3,zero,800751c <__addsf3+0x394>
 8007418:	80c00044 	addi	r3,r16,1
 800741c:	19c03fcc 	andi	r7,r3,255
 8007420:	01800044 	movi	r6,1
 8007424:	31c0260e 	bge	r6,r7,80074c0 <__addsf3+0x338>
 8007428:	01803fc4 	movi	r6,255
 800742c:	19802126 	beq	r3,r6,80074b4 <__addsf3+0x32c>
 8007430:	2149883a 	add	r4,r4,r5
 8007434:	2008d07a 	srli	r4,r4,1
 8007438:	1821883a 	mov	r16,r3
 800743c:	003f6906 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007440:	01400044 	movi	r5,1
 8007444:	003f8f06 	br	8007284 <__alt_data_end+0xfc007284>
 8007448:	8000151e 	bne	r16,zero,80074a0 <__addsf3+0x318>
 800744c:	20002f26 	beq	r4,zero,800750c <__addsf3+0x384>
 8007450:	0084303a 	nor	r2,zero,r2
 8007454:	10000a26 	beq	r2,zero,8007480 <__addsf3+0x2f8>
 8007458:	00c03fc4 	movi	r3,255
 800745c:	30c02b26 	beq	r6,r3,800750c <__addsf3+0x384>
 8007460:	00c006c4 	movi	r3,27
 8007464:	18806d16 	blt	r3,r2,800761c <__addsf3+0x494>
 8007468:	00c00804 	movi	r3,32
 800746c:	1887c83a 	sub	r3,r3,r2
 8007470:	20c6983a 	sll	r3,r4,r3
 8007474:	2084d83a 	srl	r2,r4,r2
 8007478:	1808c03a 	cmpne	r4,r3,zero
 800747c:	1108b03a 	or	r4,r2,r4
 8007480:	2909c83a 	sub	r4,r5,r4
 8007484:	3021883a 	mov	r16,r6
 8007488:	3823883a 	mov	r17,r7
 800748c:	003f7e06 	br	8007288 <__alt_data_end+0xfc007288>
 8007490:	903f821e 	bne	r18,zero,800729c <__alt_data_end+0xfc00729c>
 8007494:	0005883a 	mov	r2,zero
 8007498:	0021883a 	mov	r16,zero
 800749c:	003fba06 	br	8007388 <__alt_data_end+0xfc007388>
 80074a0:	00c03fc4 	movi	r3,255
 80074a4:	30c01926 	beq	r6,r3,800750c <__addsf3+0x384>
 80074a8:	0085c83a 	sub	r2,zero,r2
 80074ac:	21010034 	orhi	r4,r4,1024
 80074b0:	003feb06 	br	8007460 <__alt_data_end+0xfc007460>
 80074b4:	043fffc4 	movi	r16,-1
 80074b8:	0009883a 	mov	r4,zero
 80074bc:	003f5706 	br	800721c <__alt_data_end+0xfc00721c>
 80074c0:	80004a1e 	bne	r16,zero,80075ec <__addsf3+0x464>
 80074c4:	20005926 	beq	r4,zero,800762c <__addsf3+0x4a4>
 80074c8:	283f4626 	beq	r5,zero,80071e4 <__alt_data_end+0xfc0071e4>
 80074cc:	2149883a 	add	r4,r4,r5
 80074d0:	2081002c 	andhi	r2,r4,1024
 80074d4:	103f8226 	beq	r2,zero,80072e0 <__alt_data_end+0xfc0072e0>
 80074d8:	00bf0034 	movhi	r2,64512
 80074dc:	10bfffc4 	addi	r2,r2,-1
 80074e0:	3021883a 	mov	r16,r6
 80074e4:	2088703a 	and	r4,r4,r2
 80074e8:	003f3e06 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80074ec:	8000121e 	bne	r16,zero,8007538 <__addsf3+0x3b0>
 80074f0:	2000261e 	bne	r4,zero,800758c <__addsf3+0x404>
 80074f4:	283fa226 	beq	r5,zero,8007380 <__alt_data_end+0xfc007380>
 80074f8:	2809883a 	mov	r4,r5
 80074fc:	3823883a 	mov	r17,r7
 8007500:	003f3806 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007504:	01400044 	movi	r5,1
 8007508:	003f9006 	br	800734c <__alt_data_end+0xfc00734c>
 800750c:	2809883a 	mov	r4,r5
 8007510:	3021883a 	mov	r16,r6
 8007514:	3823883a 	mov	r17,r7
 8007518:	003f3206 	br	80071e4 <__alt_data_end+0xfc0071e4>
 800751c:	80000c1e 	bne	r16,zero,8007550 <__addsf3+0x3c8>
 8007520:	20002f26 	beq	r4,zero,80075e0 <__addsf3+0x458>
 8007524:	00c6303a 	nor	r3,zero,r3
 8007528:	18002b1e 	bne	r3,zero,80075d8 <__addsf3+0x450>
 800752c:	2149883a 	add	r4,r4,r5
 8007530:	3021883a 	mov	r16,r6
 8007534:	003f8606 	br	8007350 <__alt_data_end+0xfc007350>
 8007538:	20001b1e 	bne	r4,zero,80075a8 <__addsf3+0x420>
 800753c:	28003926 	beq	r5,zero,8007624 <__addsf3+0x49c>
 8007540:	2809883a 	mov	r4,r5
 8007544:	3823883a 	mov	r17,r7
 8007548:	04003fc4 	movi	r16,255
 800754c:	003f2506 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007550:	01c03fc4 	movi	r7,255
 8007554:	31c02226 	beq	r6,r7,80075e0 <__addsf3+0x458>
 8007558:	00c7c83a 	sub	r3,zero,r3
 800755c:	21010034 	orhi	r4,r4,1024
 8007560:	01c006c4 	movi	r7,27
 8007564:	38c03616 	blt	r7,r3,8007640 <__addsf3+0x4b8>
 8007568:	01c00804 	movi	r7,32
 800756c:	38cfc83a 	sub	r7,r7,r3
 8007570:	21ce983a 	sll	r7,r4,r7
 8007574:	20c6d83a 	srl	r3,r4,r3
 8007578:	3808c03a 	cmpne	r4,r7,zero
 800757c:	1906b03a 	or	r3,r3,r4
 8007580:	1949883a 	add	r4,r3,r5
 8007584:	3021883a 	mov	r16,r6
 8007588:	003f7106 	br	8007350 <__alt_data_end+0xfc007350>
 800758c:	283f1526 	beq	r5,zero,80071e4 <__alt_data_end+0xfc0071e4>
 8007590:	2145c83a 	sub	r2,r4,r5
 8007594:	10c1002c 	andhi	r3,r2,1024
 8007598:	183f4f26 	beq	r3,zero,80072d8 <__alt_data_end+0xfc0072d8>
 800759c:	2909c83a 	sub	r4,r5,r4
 80075a0:	3823883a 	mov	r17,r7
 80075a4:	003f0f06 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80075a8:	28001a26 	beq	r5,zero,8007614 <__addsf3+0x48c>
 80075ac:	2008d0fa 	srli	r4,r4,3
 80075b0:	2080102c 	andhi	r2,r4,64
 80075b4:	10000526 	beq	r2,zero,80075cc <__addsf3+0x444>
 80075b8:	280ad0fa 	srli	r5,r5,3
 80075bc:	2880102c 	andhi	r2,r5,64
 80075c0:	1000021e 	bne	r2,zero,80075cc <__addsf3+0x444>
 80075c4:	2809883a 	mov	r4,r5
 80075c8:	3823883a 	mov	r17,r7
 80075cc:	200890fa 	slli	r4,r4,3
 80075d0:	04003fc4 	movi	r16,255
 80075d4:	003f0306 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80075d8:	01c03fc4 	movi	r7,255
 80075dc:	31ffe01e 	bne	r6,r7,8007560 <__alt_data_end+0xfc007560>
 80075e0:	2809883a 	mov	r4,r5
 80075e4:	3021883a 	mov	r16,r6
 80075e8:	003efe06 	br	80071e4 <__alt_data_end+0xfc0071e4>
 80075ec:	20001126 	beq	r4,zero,8007634 <__addsf3+0x4ac>
 80075f0:	28000826 	beq	r5,zero,8007614 <__addsf3+0x48c>
 80075f4:	2008d0fa 	srli	r4,r4,3
 80075f8:	2080102c 	andhi	r2,r4,64
 80075fc:	103ff326 	beq	r2,zero,80075cc <__alt_data_end+0xfc0075cc>
 8007600:	280ad0fa 	srli	r5,r5,3
 8007604:	2880102c 	andhi	r2,r5,64
 8007608:	103ff01e 	bne	r2,zero,80075cc <__alt_data_end+0xfc0075cc>
 800760c:	2809883a 	mov	r4,r5
 8007610:	003fee06 	br	80075cc <__alt_data_end+0xfc0075cc>
 8007614:	04003fc4 	movi	r16,255
 8007618:	003ef206 	br	80071e4 <__alt_data_end+0xfc0071e4>
 800761c:	01000044 	movi	r4,1
 8007620:	003f9706 	br	8007480 <__alt_data_end+0xfc007480>
 8007624:	0005883a 	mov	r2,zero
 8007628:	003f3406 	br	80072fc <__alt_data_end+0xfc0072fc>
 800762c:	2809883a 	mov	r4,r5
 8007630:	003eec06 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007634:	2809883a 	mov	r4,r5
 8007638:	04003fc4 	movi	r16,255
 800763c:	003ee906 	br	80071e4 <__alt_data_end+0xfc0071e4>
 8007640:	00c00044 	movi	r3,1
 8007644:	003fce06 	br	8007580 <__alt_data_end+0xfc007580>
 8007648:	0005883a 	mov	r2,zero
 800764c:	003f4e06 	br	8007388 <__alt_data_end+0xfc007388>

08007650 <__divsf3>:
 8007650:	defff504 	addi	sp,sp,-44
 8007654:	200cd5fa 	srli	r6,r4,23
 8007658:	dcc00415 	stw	r19,16(sp)
 800765c:	2026d7fa 	srli	r19,r4,31
 8007660:	00c02034 	movhi	r3,128
 8007664:	dd800715 	stw	r22,28(sp)
 8007668:	dd000515 	stw	r20,20(sp)
 800766c:	dc800315 	stw	r18,12(sp)
 8007670:	18ffffc4 	addi	r3,r3,-1
 8007674:	dfc00a15 	stw	ra,40(sp)
 8007678:	df000915 	stw	fp,36(sp)
 800767c:	ddc00815 	stw	r23,32(sp)
 8007680:	dd400615 	stw	r21,24(sp)
 8007684:	dc400215 	stw	r17,8(sp)
 8007688:	dc000115 	stw	r16,4(sp)
 800768c:	35003fcc 	andi	r20,r6,255
 8007690:	1924703a 	and	r18,r3,r4
 8007694:	9d803fcc 	andi	r22,r19,255
 8007698:	a0005226 	beq	r20,zero,80077e4 <__divsf3+0x194>
 800769c:	00803fc4 	movi	r2,255
 80076a0:	a0802e26 	beq	r20,r2,800775c <__divsf3+0x10c>
 80076a4:	91002034 	orhi	r4,r18,128
 80076a8:	202490fa 	slli	r18,r4,3
 80076ac:	a53fe044 	addi	r20,r20,-127
 80076b0:	0021883a 	mov	r16,zero
 80076b4:	002f883a 	mov	r23,zero
 80076b8:	280cd5fa 	srli	r6,r5,23
 80076bc:	282ad7fa 	srli	r21,r5,31
 80076c0:	00c02034 	movhi	r3,128
 80076c4:	18ffffc4 	addi	r3,r3,-1
 80076c8:	31803fcc 	andi	r6,r6,255
 80076cc:	1962703a 	and	r17,r3,r5
 80076d0:	af003fcc 	andi	fp,r21,255
 80076d4:	30004a26 	beq	r6,zero,8007800 <__divsf3+0x1b0>
 80076d8:	00803fc4 	movi	r2,255
 80076dc:	30804526 	beq	r6,r2,80077f4 <__divsf3+0x1a4>
 80076e0:	89402034 	orhi	r5,r17,128
 80076e4:	282290fa 	slli	r17,r5,3
 80076e8:	31bfe044 	addi	r6,r6,-127
 80076ec:	000b883a 	mov	r5,zero
 80076f0:	2c20b03a 	or	r16,r5,r16
 80076f4:	802090ba 	slli	r16,r16,2
 80076f8:	00820034 	movhi	r2,2048
 80076fc:	109dc704 	addi	r2,r2,30492
 8007700:	80a1883a 	add	r16,r16,r2
 8007704:	81000017 	ldw	r4,0(r16)
 8007708:	9d46f03a 	xor	r3,r19,r21
 800770c:	180f883a 	mov	r7,r3
 8007710:	18803fcc 	andi	r2,r3,255
 8007714:	a18dc83a 	sub	r6,r20,r6
 8007718:	2000683a 	jmp	r4
 800771c:	08007900 	call	800790 <__alt_exception_stack_pointer+0x7ff790>
 8007720:	08007784 	addi	zero,at,478
 8007724:	080078f4 	orhi	zero,at,483
 8007728:	08007770 	cmpltui	zero,at,477
 800772c:	080078f4 	orhi	zero,at,483
 8007730:	080078cc 	andi	zero,at,483
 8007734:	080078f4 	orhi	zero,at,483
 8007738:	08007770 	cmpltui	zero,at,477
 800773c:	08007784 	addi	zero,at,478
 8007740:	08007784 	addi	zero,at,478
 8007744:	080078cc 	andi	zero,at,483
 8007748:	08007770 	cmpltui	zero,at,477
 800774c:	080079e0 	cmpeqi	zero,at,487
 8007750:	080079e0 	cmpeqi	zero,at,487
 8007754:	080079e0 	cmpeqi	zero,at,487
 8007758:	08007994 	ori	zero,at,486
 800775c:	9000581e 	bne	r18,zero,80078c0 <__divsf3+0x270>
 8007760:	04000204 	movi	r16,8
 8007764:	05c00084 	movi	r23,2
 8007768:	003fd306 	br	80076b8 <__alt_data_end+0xfc0076b8>
 800776c:	0023883a 	mov	r17,zero
 8007770:	e02d883a 	mov	r22,fp
 8007774:	282f883a 	mov	r23,r5
 8007778:	00800084 	movi	r2,2
 800777c:	b8808f1e 	bne	r23,r2,80079bc <__divsf3+0x36c>
 8007780:	b005883a 	mov	r2,r22
 8007784:	11c0004c 	andi	r7,r2,1
 8007788:	013fffc4 	movi	r4,-1
 800778c:	000d883a 	mov	r6,zero
 8007790:	21003fcc 	andi	r4,r4,255
 8007794:	200895fa 	slli	r4,r4,23
 8007798:	38803fcc 	andi	r2,r7,255
 800779c:	00c02034 	movhi	r3,128
 80077a0:	100497fa 	slli	r2,r2,31
 80077a4:	18ffffc4 	addi	r3,r3,-1
 80077a8:	30c6703a 	and	r3,r6,r3
 80077ac:	1906b03a 	or	r3,r3,r4
 80077b0:	1884b03a 	or	r2,r3,r2
 80077b4:	dfc00a17 	ldw	ra,40(sp)
 80077b8:	df000917 	ldw	fp,36(sp)
 80077bc:	ddc00817 	ldw	r23,32(sp)
 80077c0:	dd800717 	ldw	r22,28(sp)
 80077c4:	dd400617 	ldw	r21,24(sp)
 80077c8:	dd000517 	ldw	r20,20(sp)
 80077cc:	dcc00417 	ldw	r19,16(sp)
 80077d0:	dc800317 	ldw	r18,12(sp)
 80077d4:	dc400217 	ldw	r17,8(sp)
 80077d8:	dc000117 	ldw	r16,4(sp)
 80077dc:	dec00b04 	addi	sp,sp,44
 80077e0:	f800283a 	ret
 80077e4:	90002b1e 	bne	r18,zero,8007894 <__divsf3+0x244>
 80077e8:	04000104 	movi	r16,4
 80077ec:	05c00044 	movi	r23,1
 80077f0:	003fb106 	br	80076b8 <__alt_data_end+0xfc0076b8>
 80077f4:	8800251e 	bne	r17,zero,800788c <__divsf3+0x23c>
 80077f8:	01400084 	movi	r5,2
 80077fc:	00000206 	br	8007808 <__divsf3+0x1b8>
 8007800:	88001a1e 	bne	r17,zero,800786c <__divsf3+0x21c>
 8007804:	01400044 	movi	r5,1
 8007808:	8160b03a 	or	r16,r16,r5
 800780c:	802090ba 	slli	r16,r16,2
 8007810:	00c20034 	movhi	r3,2048
 8007814:	18de0b04 	addi	r3,r3,30764
 8007818:	80e1883a 	add	r16,r16,r3
 800781c:	80c00017 	ldw	r3,0(r16)
 8007820:	9d44f03a 	xor	r2,r19,r21
 8007824:	a18dc83a 	sub	r6,r20,r6
 8007828:	1800683a 	jmp	r3
 800782c:	08007784 	addi	zero,at,478
 8007830:	08007784 	addi	zero,at,478
 8007834:	080079d0 	cmplti	zero,at,487
 8007838:	0800776c 	andhi	zero,at,477
 800783c:	080079d0 	cmplti	zero,at,487
 8007840:	080078cc 	andi	zero,at,483
 8007844:	080079d0 	cmplti	zero,at,487
 8007848:	0800776c 	andhi	zero,at,477
 800784c:	08007784 	addi	zero,at,478
 8007850:	08007784 	addi	zero,at,478
 8007854:	080078cc 	andi	zero,at,483
 8007858:	0800776c 	andhi	zero,at,477
 800785c:	080079e0 	cmpeqi	zero,at,487
 8007860:	080079e0 	cmpeqi	zero,at,487
 8007864:	080079e0 	cmpeqi	zero,at,487
 8007868:	080079f8 	rdprs	zero,at,487
 800786c:	8809883a 	mov	r4,r17
 8007870:	800a58c0 	call	800a58c <__clzsi2>
 8007874:	10fffec4 	addi	r3,r2,-5
 8007878:	10801d84 	addi	r2,r2,118
 800787c:	88e2983a 	sll	r17,r17,r3
 8007880:	008dc83a 	sub	r6,zero,r2
 8007884:	000b883a 	mov	r5,zero
 8007888:	003f9906 	br	80076f0 <__alt_data_end+0xfc0076f0>
 800788c:	014000c4 	movi	r5,3
 8007890:	003f9706 	br	80076f0 <__alt_data_end+0xfc0076f0>
 8007894:	9009883a 	mov	r4,r18
 8007898:	d9400015 	stw	r5,0(sp)
 800789c:	800a58c0 	call	800a58c <__clzsi2>
 80078a0:	10fffec4 	addi	r3,r2,-5
 80078a4:	11801d84 	addi	r6,r2,118
 80078a8:	90e4983a 	sll	r18,r18,r3
 80078ac:	01a9c83a 	sub	r20,zero,r6
 80078b0:	0021883a 	mov	r16,zero
 80078b4:	002f883a 	mov	r23,zero
 80078b8:	d9400017 	ldw	r5,0(sp)
 80078bc:	003f7e06 	br	80076b8 <__alt_data_end+0xfc0076b8>
 80078c0:	04000304 	movi	r16,12
 80078c4:	05c000c4 	movi	r23,3
 80078c8:	003f7b06 	br	80076b8 <__alt_data_end+0xfc0076b8>
 80078cc:	01802034 	movhi	r6,128
 80078d0:	000f883a 	mov	r7,zero
 80078d4:	31bfffc4 	addi	r6,r6,-1
 80078d8:	013fffc4 	movi	r4,-1
 80078dc:	003fac06 	br	8007790 <__alt_data_end+0xfc007790>
 80078e0:	01400044 	movi	r5,1
 80078e4:	2909c83a 	sub	r4,r5,r4
 80078e8:	00c006c4 	movi	r3,27
 80078ec:	19004b0e 	bge	r3,r4,8007a1c <__divsf3+0x3cc>
 80078f0:	114e703a 	and	r7,r2,r5
 80078f4:	0009883a 	mov	r4,zero
 80078f8:	000d883a 	mov	r6,zero
 80078fc:	003fa406 	br	8007790 <__alt_data_end+0xfc007790>
 8007900:	9006917a 	slli	r3,r18,5
 8007904:	8822917a 	slli	r17,r17,5
 8007908:	1c40372e 	bgeu	r3,r17,80079e8 <__divsf3+0x398>
 800790c:	31bfffc4 	addi	r6,r6,-1
 8007910:	010006c4 	movi	r4,27
 8007914:	000b883a 	mov	r5,zero
 8007918:	180f883a 	mov	r7,r3
 800791c:	294b883a 	add	r5,r5,r5
 8007920:	18c7883a 	add	r3,r3,r3
 8007924:	38000116 	blt	r7,zero,800792c <__divsf3+0x2dc>
 8007928:	1c400236 	bltu	r3,r17,8007934 <__divsf3+0x2e4>
 800792c:	1c47c83a 	sub	r3,r3,r17
 8007930:	29400054 	ori	r5,r5,1
 8007934:	213fffc4 	addi	r4,r4,-1
 8007938:	203ff71e 	bne	r4,zero,8007918 <__alt_data_end+0xfc007918>
 800793c:	1806c03a 	cmpne	r3,r3,zero
 8007940:	1962b03a 	or	r17,r3,r5
 8007944:	31001fc4 	addi	r4,r6,127
 8007948:	013fe50e 	bge	zero,r4,80078e0 <__alt_data_end+0xfc0078e0>
 800794c:	88c001cc 	andi	r3,r17,7
 8007950:	18000426 	beq	r3,zero,8007964 <__divsf3+0x314>
 8007954:	88c003cc 	andi	r3,r17,15
 8007958:	01400104 	movi	r5,4
 800795c:	19400126 	beq	r3,r5,8007964 <__divsf3+0x314>
 8007960:	8963883a 	add	r17,r17,r5
 8007964:	88c2002c 	andhi	r3,r17,2048
 8007968:	18000426 	beq	r3,zero,800797c <__divsf3+0x32c>
 800796c:	00fe0034 	movhi	r3,63488
 8007970:	18ffffc4 	addi	r3,r3,-1
 8007974:	31002004 	addi	r4,r6,128
 8007978:	88e2703a 	and	r17,r17,r3
 800797c:	00c03f84 	movi	r3,254
 8007980:	193f8016 	blt	r3,r4,8007784 <__alt_data_end+0xfc007784>
 8007984:	880c91ba 	slli	r6,r17,6
 8007988:	11c0004c 	andi	r7,r2,1
 800798c:	300cd27a 	srli	r6,r6,9
 8007990:	003f7f06 	br	8007790 <__alt_data_end+0xfc007790>
 8007994:	9080102c 	andhi	r2,r18,64
 8007998:	10000226 	beq	r2,zero,80079a4 <__divsf3+0x354>
 800799c:	8880102c 	andhi	r2,r17,64
 80079a0:	10001826 	beq	r2,zero,8007a04 <__divsf3+0x3b4>
 80079a4:	00802034 	movhi	r2,128
 80079a8:	91801034 	orhi	r6,r18,64
 80079ac:	10bfffc4 	addi	r2,r2,-1
 80079b0:	980f883a 	mov	r7,r19
 80079b4:	308c703a 	and	r6,r6,r2
 80079b8:	003fc706 	br	80078d8 <__alt_data_end+0xfc0078d8>
 80079bc:	008000c4 	movi	r2,3
 80079c0:	b8802d26 	beq	r23,r2,8007a78 <__divsf3+0x428>
 80079c4:	00c00044 	movi	r3,1
 80079c8:	b005883a 	mov	r2,r22
 80079cc:	b8ffdd1e 	bne	r23,r3,8007944 <__alt_data_end+0xfc007944>
 80079d0:	11c0004c 	andi	r7,r2,1
 80079d4:	0009883a 	mov	r4,zero
 80079d8:	000d883a 	mov	r6,zero
 80079dc:	003f6c06 	br	8007790 <__alt_data_end+0xfc007790>
 80079e0:	9023883a 	mov	r17,r18
 80079e4:	003f6406 	br	8007778 <__alt_data_end+0xfc007778>
 80079e8:	1c47c83a 	sub	r3,r3,r17
 80079ec:	01000684 	movi	r4,26
 80079f0:	01400044 	movi	r5,1
 80079f4:	003fc806 	br	8007918 <__alt_data_end+0xfc007918>
 80079f8:	9080102c 	andhi	r2,r18,64
 80079fc:	103fe926 	beq	r2,zero,80079a4 <__alt_data_end+0xfc0079a4>
 8007a00:	0023883a 	mov	r17,zero
 8007a04:	00802034 	movhi	r2,128
 8007a08:	89801034 	orhi	r6,r17,64
 8007a0c:	10bfffc4 	addi	r2,r2,-1
 8007a10:	a80f883a 	mov	r7,r21
 8007a14:	308c703a 	and	r6,r6,r2
 8007a18:	003faf06 	br	80078d8 <__alt_data_end+0xfc0078d8>
 8007a1c:	01c00804 	movi	r7,32
 8007a20:	390fc83a 	sub	r7,r7,r4
 8007a24:	89ce983a 	sll	r7,r17,r7
 8007a28:	890ad83a 	srl	r5,r17,r4
 8007a2c:	380ec03a 	cmpne	r7,r7,zero
 8007a30:	29cab03a 	or	r5,r5,r7
 8007a34:	28c001cc 	andi	r3,r5,7
 8007a38:	18000426 	beq	r3,zero,8007a4c <__divsf3+0x3fc>
 8007a3c:	28c003cc 	andi	r3,r5,15
 8007a40:	01000104 	movi	r4,4
 8007a44:	19000126 	beq	r3,r4,8007a4c <__divsf3+0x3fc>
 8007a48:	290b883a 	add	r5,r5,r4
 8007a4c:	28c1002c 	andhi	r3,r5,1024
 8007a50:	18000426 	beq	r3,zero,8007a64 <__divsf3+0x414>
 8007a54:	11c0004c 	andi	r7,r2,1
 8007a58:	01000044 	movi	r4,1
 8007a5c:	000d883a 	mov	r6,zero
 8007a60:	003f4b06 	br	8007790 <__alt_data_end+0xfc007790>
 8007a64:	280a91ba 	slli	r5,r5,6
 8007a68:	11c0004c 	andi	r7,r2,1
 8007a6c:	0009883a 	mov	r4,zero
 8007a70:	280cd27a 	srli	r6,r5,9
 8007a74:	003f4606 	br	8007790 <__alt_data_end+0xfc007790>
 8007a78:	00802034 	movhi	r2,128
 8007a7c:	89801034 	orhi	r6,r17,64
 8007a80:	10bfffc4 	addi	r2,r2,-1
 8007a84:	b00f883a 	mov	r7,r22
 8007a88:	308c703a 	and	r6,r6,r2
 8007a8c:	003f9206 	br	80078d8 <__alt_data_end+0xfc0078d8>

08007a90 <__gesf2>:
 8007a90:	2004d5fa 	srli	r2,r4,23
 8007a94:	2806d5fa 	srli	r3,r5,23
 8007a98:	01802034 	movhi	r6,128
 8007a9c:	31bfffc4 	addi	r6,r6,-1
 8007aa0:	10803fcc 	andi	r2,r2,255
 8007aa4:	01c03fc4 	movi	r7,255
 8007aa8:	3110703a 	and	r8,r6,r4
 8007aac:	18c03fcc 	andi	r3,r3,255
 8007ab0:	314c703a 	and	r6,r6,r5
 8007ab4:	2008d7fa 	srli	r4,r4,31
 8007ab8:	280ad7fa 	srli	r5,r5,31
 8007abc:	11c01926 	beq	r2,r7,8007b24 <__gesf2+0x94>
 8007ac0:	01c03fc4 	movi	r7,255
 8007ac4:	19c00f26 	beq	r3,r7,8007b04 <__gesf2+0x74>
 8007ac8:	1000061e 	bne	r2,zero,8007ae4 <__gesf2+0x54>
 8007acc:	400f003a 	cmpeq	r7,r8,zero
 8007ad0:	1800071e 	bne	r3,zero,8007af0 <__gesf2+0x60>
 8007ad4:	3000061e 	bne	r6,zero,8007af0 <__gesf2+0x60>
 8007ad8:	0005883a 	mov	r2,zero
 8007adc:	40000e1e 	bne	r8,zero,8007b18 <__gesf2+0x88>
 8007ae0:	f800283a 	ret
 8007ae4:	18000a1e 	bne	r3,zero,8007b10 <__gesf2+0x80>
 8007ae8:	30000b26 	beq	r6,zero,8007b18 <__gesf2+0x88>
 8007aec:	000f883a 	mov	r7,zero
 8007af0:	29403fcc 	andi	r5,r5,255
 8007af4:	38000726 	beq	r7,zero,8007b14 <__gesf2+0x84>
 8007af8:	28000826 	beq	r5,zero,8007b1c <__gesf2+0x8c>
 8007afc:	00800044 	movi	r2,1
 8007b00:	f800283a 	ret
 8007b04:	303ff026 	beq	r6,zero,8007ac8 <__alt_data_end+0xfc007ac8>
 8007b08:	00bfff84 	movi	r2,-2
 8007b0c:	f800283a 	ret
 8007b10:	29403fcc 	andi	r5,r5,255
 8007b14:	21400526 	beq	r4,r5,8007b2c <__gesf2+0x9c>
 8007b18:	203ff826 	beq	r4,zero,8007afc <__alt_data_end+0xfc007afc>
 8007b1c:	00bfffc4 	movi	r2,-1
 8007b20:	f800283a 	ret
 8007b24:	403fe626 	beq	r8,zero,8007ac0 <__alt_data_end+0xfc007ac0>
 8007b28:	003ff706 	br	8007b08 <__alt_data_end+0xfc007b08>
 8007b2c:	18bffa16 	blt	r3,r2,8007b18 <__alt_data_end+0xfc007b18>
 8007b30:	10c00216 	blt	r2,r3,8007b3c <__gesf2+0xac>
 8007b34:	323ff836 	bltu	r6,r8,8007b18 <__alt_data_end+0xfc007b18>
 8007b38:	4180022e 	bgeu	r8,r6,8007b44 <__gesf2+0xb4>
 8007b3c:	203fef1e 	bne	r4,zero,8007afc <__alt_data_end+0xfc007afc>
 8007b40:	003ff606 	br	8007b1c <__alt_data_end+0xfc007b1c>
 8007b44:	0005883a 	mov	r2,zero
 8007b48:	f800283a 	ret

08007b4c <__lesf2>:
 8007b4c:	2004d5fa 	srli	r2,r4,23
 8007b50:	280cd5fa 	srli	r6,r5,23
 8007b54:	00c02034 	movhi	r3,128
 8007b58:	18ffffc4 	addi	r3,r3,-1
 8007b5c:	10803fcc 	andi	r2,r2,255
 8007b60:	01c03fc4 	movi	r7,255
 8007b64:	1910703a 	and	r8,r3,r4
 8007b68:	31803fcc 	andi	r6,r6,255
 8007b6c:	1946703a 	and	r3,r3,r5
 8007b70:	2008d7fa 	srli	r4,r4,31
 8007b74:	280ad7fa 	srli	r5,r5,31
 8007b78:	11c01b26 	beq	r2,r7,8007be8 <__lesf2+0x9c>
 8007b7c:	01c03fc4 	movi	r7,255
 8007b80:	31c01126 	beq	r6,r7,8007bc8 <__lesf2+0x7c>
 8007b84:	1000071e 	bne	r2,zero,8007ba4 <__lesf2+0x58>
 8007b88:	400f003a 	cmpeq	r7,r8,zero
 8007b8c:	21003fcc 	andi	r4,r4,255
 8007b90:	3000081e 	bne	r6,zero,8007bb4 <__lesf2+0x68>
 8007b94:	1800071e 	bne	r3,zero,8007bb4 <__lesf2+0x68>
 8007b98:	0005883a 	mov	r2,zero
 8007b9c:	40000f1e 	bne	r8,zero,8007bdc <__lesf2+0x90>
 8007ba0:	f800283a 	ret
 8007ba4:	21003fcc 	andi	r4,r4,255
 8007ba8:	30000a1e 	bne	r6,zero,8007bd4 <__lesf2+0x88>
 8007bac:	18000b26 	beq	r3,zero,8007bdc <__lesf2+0x90>
 8007bb0:	000f883a 	mov	r7,zero
 8007bb4:	29403fcc 	andi	r5,r5,255
 8007bb8:	38000726 	beq	r7,zero,8007bd8 <__lesf2+0x8c>
 8007bbc:	28000826 	beq	r5,zero,8007be0 <__lesf2+0x94>
 8007bc0:	00800044 	movi	r2,1
 8007bc4:	f800283a 	ret
 8007bc8:	183fee26 	beq	r3,zero,8007b84 <__alt_data_end+0xfc007b84>
 8007bcc:	00800084 	movi	r2,2
 8007bd0:	f800283a 	ret
 8007bd4:	29403fcc 	andi	r5,r5,255
 8007bd8:	21400626 	beq	r4,r5,8007bf4 <__lesf2+0xa8>
 8007bdc:	203ff826 	beq	r4,zero,8007bc0 <__alt_data_end+0xfc007bc0>
 8007be0:	00bfffc4 	movi	r2,-1
 8007be4:	f800283a 	ret
 8007be8:	403fe426 	beq	r8,zero,8007b7c <__alt_data_end+0xfc007b7c>
 8007bec:	00800084 	movi	r2,2
 8007bf0:	f800283a 	ret
 8007bf4:	30bff916 	blt	r6,r2,8007bdc <__alt_data_end+0xfc007bdc>
 8007bf8:	11800216 	blt	r2,r6,8007c04 <__lesf2+0xb8>
 8007bfc:	1a3ff736 	bltu	r3,r8,8007bdc <__alt_data_end+0xfc007bdc>
 8007c00:	40c0022e 	bgeu	r8,r3,8007c0c <__lesf2+0xc0>
 8007c04:	203fee1e 	bne	r4,zero,8007bc0 <__alt_data_end+0xfc007bc0>
 8007c08:	003ff506 	br	8007be0 <__alt_data_end+0xfc007be0>
 8007c0c:	0005883a 	mov	r2,zero
 8007c10:	f800283a 	ret

08007c14 <__mulsf3>:
 8007c14:	defff504 	addi	sp,sp,-44
 8007c18:	dc000115 	stw	r16,4(sp)
 8007c1c:	2020d5fa 	srli	r16,r4,23
 8007c20:	dd400615 	stw	r21,24(sp)
 8007c24:	202ad7fa 	srli	r21,r4,31
 8007c28:	dc800315 	stw	r18,12(sp)
 8007c2c:	04802034 	movhi	r18,128
 8007c30:	df000915 	stw	fp,36(sp)
 8007c34:	dd000515 	stw	r20,20(sp)
 8007c38:	94bfffc4 	addi	r18,r18,-1
 8007c3c:	dfc00a15 	stw	ra,40(sp)
 8007c40:	ddc00815 	stw	r23,32(sp)
 8007c44:	dd800715 	stw	r22,28(sp)
 8007c48:	dcc00415 	stw	r19,16(sp)
 8007c4c:	dc400215 	stw	r17,8(sp)
 8007c50:	84003fcc 	andi	r16,r16,255
 8007c54:	9124703a 	and	r18,r18,r4
 8007c58:	a829883a 	mov	r20,r21
 8007c5c:	af003fcc 	andi	fp,r21,255
 8007c60:	80005426 	beq	r16,zero,8007db4 <__mulsf3+0x1a0>
 8007c64:	00803fc4 	movi	r2,255
 8007c68:	80802f26 	beq	r16,r2,8007d28 <__mulsf3+0x114>
 8007c6c:	91002034 	orhi	r4,r18,128
 8007c70:	202490fa 	slli	r18,r4,3
 8007c74:	843fe044 	addi	r16,r16,-127
 8007c78:	0023883a 	mov	r17,zero
 8007c7c:	002f883a 	mov	r23,zero
 8007c80:	2804d5fa 	srli	r2,r5,23
 8007c84:	282cd7fa 	srli	r22,r5,31
 8007c88:	01002034 	movhi	r4,128
 8007c8c:	213fffc4 	addi	r4,r4,-1
 8007c90:	10803fcc 	andi	r2,r2,255
 8007c94:	2166703a 	and	r19,r4,r5
 8007c98:	b1803fcc 	andi	r6,r22,255
 8007c9c:	10004c26 	beq	r2,zero,8007dd0 <__mulsf3+0x1bc>
 8007ca0:	00c03fc4 	movi	r3,255
 8007ca4:	10c04726 	beq	r2,r3,8007dc4 <__mulsf3+0x1b0>
 8007ca8:	99002034 	orhi	r4,r19,128
 8007cac:	202690fa 	slli	r19,r4,3
 8007cb0:	10bfe044 	addi	r2,r2,-127
 8007cb4:	0007883a 	mov	r3,zero
 8007cb8:	80a1883a 	add	r16,r16,r2
 8007cbc:	010003c4 	movi	r4,15
 8007cc0:	1c44b03a 	or	r2,r3,r17
 8007cc4:	b56af03a 	xor	r21,r22,r21
 8007cc8:	81c00044 	addi	r7,r16,1
 8007ccc:	20806b36 	bltu	r4,r2,8007e7c <__mulsf3+0x268>
 8007cd0:	100490ba 	slli	r2,r2,2
 8007cd4:	01020034 	movhi	r4,2048
 8007cd8:	211f3a04 	addi	r4,r4,31976
 8007cdc:	1105883a 	add	r2,r2,r4
 8007ce0:	10800017 	ldw	r2,0(r2)
 8007ce4:	1000683a 	jmp	r2
 8007ce8:	08007e7c 	xorhi	zero,at,505
 8007cec:	08007d3c 	xorhi	zero,at,500
 8007cf0:	08007d3c 	xorhi	zero,at,500
 8007cf4:	08007d38 	rdprs	zero,at,500
 8007cf8:	08007e60 	cmpeqi	zero,at,505
 8007cfc:	08007e60 	cmpeqi	zero,at,505
 8007d00:	08007e4c 	andi	zero,at,505
 8007d04:	08007d38 	rdprs	zero,at,500
 8007d08:	08007e60 	cmpeqi	zero,at,505
 8007d0c:	08007e4c 	andi	zero,at,505
 8007d10:	08007e60 	cmpeqi	zero,at,505
 8007d14:	08007d38 	rdprs	zero,at,500
 8007d18:	08007e6c 	andhi	zero,at,505
 8007d1c:	08007e6c 	andhi	zero,at,505
 8007d20:	08007e6c 	andhi	zero,at,505
 8007d24:	08007f7c 	xorhi	zero,at,509
 8007d28:	90003b1e 	bne	r18,zero,8007e18 <__mulsf3+0x204>
 8007d2c:	04400204 	movi	r17,8
 8007d30:	05c00084 	movi	r23,2
 8007d34:	003fd206 	br	8007c80 <__alt_data_end+0xfc007c80>
 8007d38:	302b883a 	mov	r21,r6
 8007d3c:	00800084 	movi	r2,2
 8007d40:	18802626 	beq	r3,r2,8007ddc <__mulsf3+0x1c8>
 8007d44:	008000c4 	movi	r2,3
 8007d48:	1880b826 	beq	r3,r2,800802c <__mulsf3+0x418>
 8007d4c:	00800044 	movi	r2,1
 8007d50:	1880af1e 	bne	r3,r2,8008010 <__mulsf3+0x3fc>
 8007d54:	a829883a 	mov	r20,r21
 8007d58:	0007883a 	mov	r3,zero
 8007d5c:	0009883a 	mov	r4,zero
 8007d60:	18803fcc 	andi	r2,r3,255
 8007d64:	100695fa 	slli	r3,r2,23
 8007d68:	a0803fcc 	andi	r2,r20,255
 8007d6c:	100a97fa 	slli	r5,r2,31
 8007d70:	00802034 	movhi	r2,128
 8007d74:	10bfffc4 	addi	r2,r2,-1
 8007d78:	2084703a 	and	r2,r4,r2
 8007d7c:	10c4b03a 	or	r2,r2,r3
 8007d80:	1144b03a 	or	r2,r2,r5
 8007d84:	dfc00a17 	ldw	ra,40(sp)
 8007d88:	df000917 	ldw	fp,36(sp)
 8007d8c:	ddc00817 	ldw	r23,32(sp)
 8007d90:	dd800717 	ldw	r22,28(sp)
 8007d94:	dd400617 	ldw	r21,24(sp)
 8007d98:	dd000517 	ldw	r20,20(sp)
 8007d9c:	dcc00417 	ldw	r19,16(sp)
 8007da0:	dc800317 	ldw	r18,12(sp)
 8007da4:	dc400217 	ldw	r17,8(sp)
 8007da8:	dc000117 	ldw	r16,4(sp)
 8007dac:	dec00b04 	addi	sp,sp,44
 8007db0:	f800283a 	ret
 8007db4:	90000d1e 	bne	r18,zero,8007dec <__mulsf3+0x1d8>
 8007db8:	04400104 	movi	r17,4
 8007dbc:	05c00044 	movi	r23,1
 8007dc0:	003faf06 	br	8007c80 <__alt_data_end+0xfc007c80>
 8007dc4:	9806c03a 	cmpne	r3,r19,zero
 8007dc8:	18c00084 	addi	r3,r3,2
 8007dcc:	003fba06 	br	8007cb8 <__alt_data_end+0xfc007cb8>
 8007dd0:	9800141e 	bne	r19,zero,8007e24 <__mulsf3+0x210>
 8007dd4:	00c00044 	movi	r3,1
 8007dd8:	003fb706 	br	8007cb8 <__alt_data_end+0xfc007cb8>
 8007ddc:	a829883a 	mov	r20,r21
 8007de0:	00ffffc4 	movi	r3,-1
 8007de4:	0009883a 	mov	r4,zero
 8007de8:	003fdd06 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007dec:	9009883a 	mov	r4,r18
 8007df0:	d9400015 	stw	r5,0(sp)
 8007df4:	800a58c0 	call	800a58c <__clzsi2>
 8007df8:	10fffec4 	addi	r3,r2,-5
 8007dfc:	10801d84 	addi	r2,r2,118
 8007e00:	90e4983a 	sll	r18,r18,r3
 8007e04:	00a1c83a 	sub	r16,zero,r2
 8007e08:	0023883a 	mov	r17,zero
 8007e0c:	002f883a 	mov	r23,zero
 8007e10:	d9400017 	ldw	r5,0(sp)
 8007e14:	003f9a06 	br	8007c80 <__alt_data_end+0xfc007c80>
 8007e18:	04400304 	movi	r17,12
 8007e1c:	05c000c4 	movi	r23,3
 8007e20:	003f9706 	br	8007c80 <__alt_data_end+0xfc007c80>
 8007e24:	9809883a 	mov	r4,r19
 8007e28:	d9800015 	stw	r6,0(sp)
 8007e2c:	800a58c0 	call	800a58c <__clzsi2>
 8007e30:	10fffec4 	addi	r3,r2,-5
 8007e34:	10801d84 	addi	r2,r2,118
 8007e38:	98e6983a 	sll	r19,r19,r3
 8007e3c:	0085c83a 	sub	r2,zero,r2
 8007e40:	0007883a 	mov	r3,zero
 8007e44:	d9800017 	ldw	r6,0(sp)
 8007e48:	003f9b06 	br	8007cb8 <__alt_data_end+0xfc007cb8>
 8007e4c:	01002034 	movhi	r4,128
 8007e50:	0029883a 	mov	r20,zero
 8007e54:	213fffc4 	addi	r4,r4,-1
 8007e58:	00ffffc4 	movi	r3,-1
 8007e5c:	003fc006 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007e60:	9027883a 	mov	r19,r18
 8007e64:	b807883a 	mov	r3,r23
 8007e68:	003fb406 	br	8007d3c <__alt_data_end+0xfc007d3c>
 8007e6c:	9027883a 	mov	r19,r18
 8007e70:	e02b883a 	mov	r21,fp
 8007e74:	b807883a 	mov	r3,r23
 8007e78:	003fb006 	br	8007d3c <__alt_data_end+0xfc007d3c>
 8007e7c:	9028d43a 	srli	r20,r18,16
 8007e80:	982cd43a 	srli	r22,r19,16
 8007e84:	94bfffcc 	andi	r18,r18,65535
 8007e88:	9cffffcc 	andi	r19,r19,65535
 8007e8c:	980b883a 	mov	r5,r19
 8007e90:	9009883a 	mov	r4,r18
 8007e94:	d9c00015 	stw	r7,0(sp)
 8007e98:	80071600 	call	8007160 <__mulsi3>
 8007e9c:	a00b883a 	mov	r5,r20
 8007ea0:	9809883a 	mov	r4,r19
 8007ea4:	1023883a 	mov	r17,r2
 8007ea8:	80071600 	call	8007160 <__mulsi3>
 8007eac:	a009883a 	mov	r4,r20
 8007eb0:	b00b883a 	mov	r5,r22
 8007eb4:	1027883a 	mov	r19,r2
 8007eb8:	80071600 	call	8007160 <__mulsi3>
 8007ebc:	b00b883a 	mov	r5,r22
 8007ec0:	9009883a 	mov	r4,r18
 8007ec4:	1029883a 	mov	r20,r2
 8007ec8:	80071600 	call	8007160 <__mulsi3>
 8007ecc:	8806d43a 	srli	r3,r17,16
 8007ed0:	14c5883a 	add	r2,r2,r19
 8007ed4:	d9c00017 	ldw	r7,0(sp)
 8007ed8:	1885883a 	add	r2,r3,r2
 8007edc:	14c0022e 	bgeu	r2,r19,8007ee8 <__mulsf3+0x2d4>
 8007ee0:	00c00074 	movhi	r3,1
 8007ee4:	a0e9883a 	add	r20,r20,r3
 8007ee8:	1026943a 	slli	r19,r2,16
 8007eec:	8c7fffcc 	andi	r17,r17,65535
 8007ef0:	1004d43a 	srli	r2,r2,16
 8007ef4:	9c63883a 	add	r17,r19,r17
 8007ef8:	882691ba 	slli	r19,r17,6
 8007efc:	1505883a 	add	r2,r2,r20
 8007f00:	8822d6ba 	srli	r17,r17,26
 8007f04:	100891ba 	slli	r4,r2,6
 8007f08:	9826c03a 	cmpne	r19,r19,zero
 8007f0c:	9c62b03a 	or	r17,r19,r17
 8007f10:	8926b03a 	or	r19,r17,r4
 8007f14:	9882002c 	andhi	r2,r19,2048
 8007f18:	10000426 	beq	r2,zero,8007f2c <__mulsf3+0x318>
 8007f1c:	9804d07a 	srli	r2,r19,1
 8007f20:	9900004c 	andi	r4,r19,1
 8007f24:	3821883a 	mov	r16,r7
 8007f28:	1126b03a 	or	r19,r2,r4
 8007f2c:	80c01fc4 	addi	r3,r16,127
 8007f30:	00c0210e 	bge	zero,r3,8007fb8 <__mulsf3+0x3a4>
 8007f34:	988001cc 	andi	r2,r19,7
 8007f38:	10000426 	beq	r2,zero,8007f4c <__mulsf3+0x338>
 8007f3c:	988003cc 	andi	r2,r19,15
 8007f40:	01000104 	movi	r4,4
 8007f44:	11000126 	beq	r2,r4,8007f4c <__mulsf3+0x338>
 8007f48:	9927883a 	add	r19,r19,r4
 8007f4c:	9882002c 	andhi	r2,r19,2048
 8007f50:	10000426 	beq	r2,zero,8007f64 <__mulsf3+0x350>
 8007f54:	00be0034 	movhi	r2,63488
 8007f58:	10bfffc4 	addi	r2,r2,-1
 8007f5c:	80c02004 	addi	r3,r16,128
 8007f60:	98a6703a 	and	r19,r19,r2
 8007f64:	00803f84 	movi	r2,254
 8007f68:	10ff9c16 	blt	r2,r3,8007ddc <__alt_data_end+0xfc007ddc>
 8007f6c:	980891ba 	slli	r4,r19,6
 8007f70:	a829883a 	mov	r20,r21
 8007f74:	2008d27a 	srli	r4,r4,9
 8007f78:	003f7906 	br	8007d60 <__alt_data_end+0xfc007d60>
 8007f7c:	9080102c 	andhi	r2,r18,64
 8007f80:	10000826 	beq	r2,zero,8007fa4 <__mulsf3+0x390>
 8007f84:	9880102c 	andhi	r2,r19,64
 8007f88:	1000061e 	bne	r2,zero,8007fa4 <__mulsf3+0x390>
 8007f8c:	00802034 	movhi	r2,128
 8007f90:	99001034 	orhi	r4,r19,64
 8007f94:	10bfffc4 	addi	r2,r2,-1
 8007f98:	b029883a 	mov	r20,r22
 8007f9c:	2088703a 	and	r4,r4,r2
 8007fa0:	003fad06 	br	8007e58 <__alt_data_end+0xfc007e58>
 8007fa4:	00802034 	movhi	r2,128
 8007fa8:	91001034 	orhi	r4,r18,64
 8007fac:	10bfffc4 	addi	r2,r2,-1
 8007fb0:	2088703a 	and	r4,r4,r2
 8007fb4:	003fa806 	br	8007e58 <__alt_data_end+0xfc007e58>
 8007fb8:	00800044 	movi	r2,1
 8007fbc:	10c7c83a 	sub	r3,r2,r3
 8007fc0:	008006c4 	movi	r2,27
 8007fc4:	10ff6316 	blt	r2,r3,8007d54 <__alt_data_end+0xfc007d54>
 8007fc8:	00800804 	movi	r2,32
 8007fcc:	10c5c83a 	sub	r2,r2,r3
 8007fd0:	9884983a 	sll	r2,r19,r2
 8007fd4:	98c6d83a 	srl	r3,r19,r3
 8007fd8:	1004c03a 	cmpne	r2,r2,zero
 8007fdc:	1884b03a 	or	r2,r3,r2
 8007fe0:	10c001cc 	andi	r3,r2,7
 8007fe4:	18000426 	beq	r3,zero,8007ff8 <__mulsf3+0x3e4>
 8007fe8:	10c003cc 	andi	r3,r2,15
 8007fec:	01000104 	movi	r4,4
 8007ff0:	19000126 	beq	r3,r4,8007ff8 <__mulsf3+0x3e4>
 8007ff4:	1105883a 	add	r2,r2,r4
 8007ff8:	10c1002c 	andhi	r3,r2,1024
 8007ffc:	18000626 	beq	r3,zero,8008018 <__mulsf3+0x404>
 8008000:	a829883a 	mov	r20,r21
 8008004:	00c00044 	movi	r3,1
 8008008:	0009883a 	mov	r4,zero
 800800c:	003f5406 	br	8007d60 <__alt_data_end+0xfc007d60>
 8008010:	3821883a 	mov	r16,r7
 8008014:	003fc506 	br	8007f2c <__alt_data_end+0xfc007f2c>
 8008018:	100491ba 	slli	r2,r2,6
 800801c:	a829883a 	mov	r20,r21
 8008020:	0007883a 	mov	r3,zero
 8008024:	1008d27a 	srli	r4,r2,9
 8008028:	003f4d06 	br	8007d60 <__alt_data_end+0xfc007d60>
 800802c:	00802034 	movhi	r2,128
 8008030:	99001034 	orhi	r4,r19,64
 8008034:	10bfffc4 	addi	r2,r2,-1
 8008038:	a829883a 	mov	r20,r21
 800803c:	2088703a 	and	r4,r4,r2
 8008040:	003f8506 	br	8007e58 <__alt_data_end+0xfc007e58>

08008044 <__subsf3>:
 8008044:	defffc04 	addi	sp,sp,-16
 8008048:	280cd5fa 	srli	r6,r5,23
 800804c:	dc000015 	stw	r16,0(sp)
 8008050:	01c02034 	movhi	r7,128
 8008054:	2020d5fa 	srli	r16,r4,23
 8008058:	39ffffc4 	addi	r7,r7,-1
 800805c:	3906703a 	and	r3,r7,r4
 8008060:	dc400115 	stw	r17,4(sp)
 8008064:	394e703a 	and	r7,r7,r5
 8008068:	2022d7fa 	srli	r17,r4,31
 800806c:	dfc00315 	stw	ra,12(sp)
 8008070:	dc800215 	stw	r18,8(sp)
 8008074:	31803fcc 	andi	r6,r6,255
 8008078:	01003fc4 	movi	r4,255
 800807c:	84003fcc 	andi	r16,r16,255
 8008080:	180690fa 	slli	r3,r3,3
 8008084:	2804d7fa 	srli	r2,r5,31
 8008088:	380e90fa 	slli	r7,r7,3
 800808c:	31006d26 	beq	r6,r4,8008244 <__subsf3+0x200>
 8008090:	1080005c 	xori	r2,r2,1
 8008094:	8189c83a 	sub	r4,r16,r6
 8008098:	14404f26 	beq	r2,r17,80081d8 <__subsf3+0x194>
 800809c:	0100770e 	bge	zero,r4,800827c <__subsf3+0x238>
 80080a0:	30001e1e 	bne	r6,zero,800811c <__subsf3+0xd8>
 80080a4:	38006a1e 	bne	r7,zero,8008250 <__subsf3+0x20c>
 80080a8:	188001cc 	andi	r2,r3,7
 80080ac:	10000426 	beq	r2,zero,80080c0 <__subsf3+0x7c>
 80080b0:	188003cc 	andi	r2,r3,15
 80080b4:	01000104 	movi	r4,4
 80080b8:	11000126 	beq	r2,r4,80080c0 <__subsf3+0x7c>
 80080bc:	1907883a 	add	r3,r3,r4
 80080c0:	1881002c 	andhi	r2,r3,1024
 80080c4:	10003926 	beq	r2,zero,80081ac <__subsf3+0x168>
 80080c8:	84000044 	addi	r16,r16,1
 80080cc:	00803fc4 	movi	r2,255
 80080d0:	80807526 	beq	r16,r2,80082a8 <__subsf3+0x264>
 80080d4:	180691ba 	slli	r3,r3,6
 80080d8:	8880004c 	andi	r2,r17,1
 80080dc:	180ad27a 	srli	r5,r3,9
 80080e0:	84003fcc 	andi	r16,r16,255
 80080e4:	800695fa 	slli	r3,r16,23
 80080e8:	10803fcc 	andi	r2,r2,255
 80080ec:	01002034 	movhi	r4,128
 80080f0:	213fffc4 	addi	r4,r4,-1
 80080f4:	100497fa 	slli	r2,r2,31
 80080f8:	2920703a 	and	r16,r5,r4
 80080fc:	80e0b03a 	or	r16,r16,r3
 8008100:	8084b03a 	or	r2,r16,r2
 8008104:	dfc00317 	ldw	ra,12(sp)
 8008108:	dc800217 	ldw	r18,8(sp)
 800810c:	dc400117 	ldw	r17,4(sp)
 8008110:	dc000017 	ldw	r16,0(sp)
 8008114:	dec00404 	addi	sp,sp,16
 8008118:	f800283a 	ret
 800811c:	00803fc4 	movi	r2,255
 8008120:	80bfe126 	beq	r16,r2,80080a8 <__alt_data_end+0xfc0080a8>
 8008124:	39c10034 	orhi	r7,r7,1024
 8008128:	008006c4 	movi	r2,27
 800812c:	11007416 	blt	r2,r4,8008300 <__subsf3+0x2bc>
 8008130:	00800804 	movi	r2,32
 8008134:	1105c83a 	sub	r2,r2,r4
 8008138:	3884983a 	sll	r2,r7,r2
 800813c:	390ed83a 	srl	r7,r7,r4
 8008140:	1008c03a 	cmpne	r4,r2,zero
 8008144:	390eb03a 	or	r7,r7,r4
 8008148:	19c7c83a 	sub	r3,r3,r7
 800814c:	1881002c 	andhi	r2,r3,1024
 8008150:	10001426 	beq	r2,zero,80081a4 <__subsf3+0x160>
 8008154:	04810034 	movhi	r18,1024
 8008158:	94bfffc4 	addi	r18,r18,-1
 800815c:	1ca4703a 	and	r18,r3,r18
 8008160:	9009883a 	mov	r4,r18
 8008164:	800a58c0 	call	800a58c <__clzsi2>
 8008168:	10bffec4 	addi	r2,r2,-5
 800816c:	90a4983a 	sll	r18,r18,r2
 8008170:	14005116 	blt	r2,r16,80082b8 <__subsf3+0x274>
 8008174:	1405c83a 	sub	r2,r2,r16
 8008178:	10c00044 	addi	r3,r2,1
 800817c:	00800804 	movi	r2,32
 8008180:	10c5c83a 	sub	r2,r2,r3
 8008184:	9084983a 	sll	r2,r18,r2
 8008188:	90e4d83a 	srl	r18,r18,r3
 800818c:	0021883a 	mov	r16,zero
 8008190:	1006c03a 	cmpne	r3,r2,zero
 8008194:	90c6b03a 	or	r3,r18,r3
 8008198:	003fc306 	br	80080a8 <__alt_data_end+0xfc0080a8>
 800819c:	2000e026 	beq	r4,zero,8008520 <__subsf3+0x4dc>
 80081a0:	2007883a 	mov	r3,r4
 80081a4:	188001cc 	andi	r2,r3,7
 80081a8:	103fc11e 	bne	r2,zero,80080b0 <__alt_data_end+0xfc0080b0>
 80081ac:	180ad0fa 	srli	r5,r3,3
 80081b0:	00c03fc4 	movi	r3,255
 80081b4:	8880004c 	andi	r2,r17,1
 80081b8:	80c0031e 	bne	r16,r3,80081c8 <__subsf3+0x184>
 80081bc:	28006d26 	beq	r5,zero,8008374 <__subsf3+0x330>
 80081c0:	29401034 	orhi	r5,r5,64
 80081c4:	043fffc4 	movi	r16,-1
 80081c8:	00c02034 	movhi	r3,128
 80081cc:	18ffffc4 	addi	r3,r3,-1
 80081d0:	28ca703a 	and	r5,r5,r3
 80081d4:	003fc206 	br	80080e0 <__alt_data_end+0xfc0080e0>
 80081d8:	01003c0e 	bge	zero,r4,80082cc <__subsf3+0x288>
 80081dc:	30002126 	beq	r6,zero,8008264 <__subsf3+0x220>
 80081e0:	01403fc4 	movi	r5,255
 80081e4:	817fb026 	beq	r16,r5,80080a8 <__alt_data_end+0xfc0080a8>
 80081e8:	39c10034 	orhi	r7,r7,1024
 80081ec:	014006c4 	movi	r5,27
 80081f0:	29007416 	blt	r5,r4,80083c4 <__subsf3+0x380>
 80081f4:	01400804 	movi	r5,32
 80081f8:	290bc83a 	sub	r5,r5,r4
 80081fc:	394a983a 	sll	r5,r7,r5
 8008200:	390ed83a 	srl	r7,r7,r4
 8008204:	2808c03a 	cmpne	r4,r5,zero
 8008208:	390eb03a 	or	r7,r7,r4
 800820c:	19c7883a 	add	r3,r3,r7
 8008210:	1901002c 	andhi	r4,r3,1024
 8008214:	20003826 	beq	r4,zero,80082f8 <__subsf3+0x2b4>
 8008218:	84000044 	addi	r16,r16,1
 800821c:	01003fc4 	movi	r4,255
 8008220:	81005426 	beq	r16,r4,8008374 <__subsf3+0x330>
 8008224:	1023883a 	mov	r17,r2
 8008228:	00bf0034 	movhi	r2,64512
 800822c:	10bfffc4 	addi	r2,r2,-1
 8008230:	1900004c 	andi	r4,r3,1
 8008234:	1886703a 	and	r3,r3,r2
 8008238:	1806d07a 	srli	r3,r3,1
 800823c:	1906b03a 	or	r3,r3,r4
 8008240:	003f9906 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008244:	383f9226 	beq	r7,zero,8008090 <__alt_data_end+0xfc008090>
 8008248:	10803fcc 	andi	r2,r2,255
 800824c:	003f9106 	br	8008094 <__alt_data_end+0xfc008094>
 8008250:	213fffc4 	addi	r4,r4,-1
 8008254:	203fbc26 	beq	r4,zero,8008148 <__alt_data_end+0xfc008148>
 8008258:	00803fc4 	movi	r2,255
 800825c:	80bfb21e 	bne	r16,r2,8008128 <__alt_data_end+0xfc008128>
 8008260:	003f9106 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008264:	383f9026 	beq	r7,zero,80080a8 <__alt_data_end+0xfc0080a8>
 8008268:	213fffc4 	addi	r4,r4,-1
 800826c:	203fe726 	beq	r4,zero,800820c <__alt_data_end+0xfc00820c>
 8008270:	01403fc4 	movi	r5,255
 8008274:	817fdd1e 	bne	r16,r5,80081ec <__alt_data_end+0xfc0081ec>
 8008278:	003f8b06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 800827c:	2000221e 	bne	r4,zero,8008308 <__subsf3+0x2c4>
 8008280:	81000044 	addi	r4,r16,1
 8008284:	21003fcc 	andi	r4,r4,255
 8008288:	01400044 	movi	r5,1
 800828c:	2900470e 	bge	r5,r4,80083ac <__subsf3+0x368>
 8008290:	19e5c83a 	sub	r18,r3,r7
 8008294:	9141002c 	andhi	r5,r18,1024
 8008298:	28002d26 	beq	r5,zero,8008350 <__subsf3+0x30c>
 800829c:	38e5c83a 	sub	r18,r7,r3
 80082a0:	1023883a 	mov	r17,r2
 80082a4:	003fae06 	br	8008160 <__alt_data_end+0xfc008160>
 80082a8:	8880004c 	andi	r2,r17,1
 80082ac:	043fffc4 	movi	r16,-1
 80082b0:	000b883a 	mov	r5,zero
 80082b4:	003f8a06 	br	80080e0 <__alt_data_end+0xfc0080e0>
 80082b8:	00ff0034 	movhi	r3,64512
 80082bc:	18ffffc4 	addi	r3,r3,-1
 80082c0:	80a1c83a 	sub	r16,r16,r2
 80082c4:	90c6703a 	and	r3,r18,r3
 80082c8:	003f7706 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80082cc:	2000431e 	bne	r4,zero,80083dc <__subsf3+0x398>
 80082d0:	81000044 	addi	r4,r16,1
 80082d4:	21803fcc 	andi	r6,r4,255
 80082d8:	01400044 	movi	r5,1
 80082dc:	2980280e 	bge	r5,r6,8008380 <__subsf3+0x33c>
 80082e0:	01403fc4 	movi	r5,255
 80082e4:	21402326 	beq	r4,r5,8008374 <__subsf3+0x330>
 80082e8:	19c7883a 	add	r3,r3,r7
 80082ec:	1806d07a 	srli	r3,r3,1
 80082f0:	2021883a 	mov	r16,r4
 80082f4:	003f6c06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80082f8:	1023883a 	mov	r17,r2
 80082fc:	003fa906 	br	80081a4 <__alt_data_end+0xfc0081a4>
 8008300:	01c00044 	movi	r7,1
 8008304:	003f9006 	br	8008148 <__alt_data_end+0xfc008148>
 8008308:	8000151e 	bne	r16,zero,8008360 <__subsf3+0x31c>
 800830c:	18002f26 	beq	r3,zero,80083cc <__subsf3+0x388>
 8008310:	0108303a 	nor	r4,zero,r4
 8008314:	20000a26 	beq	r4,zero,8008340 <__subsf3+0x2fc>
 8008318:	01403fc4 	movi	r5,255
 800831c:	31402b26 	beq	r6,r5,80083cc <__subsf3+0x388>
 8008320:	014006c4 	movi	r5,27
 8008324:	29006e16 	blt	r5,r4,80084e0 <__subsf3+0x49c>
 8008328:	01400804 	movi	r5,32
 800832c:	290bc83a 	sub	r5,r5,r4
 8008330:	194a983a 	sll	r5,r3,r5
 8008334:	1908d83a 	srl	r4,r3,r4
 8008338:	2806c03a 	cmpne	r3,r5,zero
 800833c:	20c6b03a 	or	r3,r4,r3
 8008340:	38c7c83a 	sub	r3,r7,r3
 8008344:	3021883a 	mov	r16,r6
 8008348:	1023883a 	mov	r17,r2
 800834c:	003f7f06 	br	800814c <__alt_data_end+0xfc00814c>
 8008350:	903f831e 	bne	r18,zero,8008160 <__alt_data_end+0xfc008160>
 8008354:	0005883a 	mov	r2,zero
 8008358:	0021883a 	mov	r16,zero
 800835c:	003f9a06 	br	80081c8 <__alt_data_end+0xfc0081c8>
 8008360:	01403fc4 	movi	r5,255
 8008364:	31401926 	beq	r6,r5,80083cc <__subsf3+0x388>
 8008368:	0109c83a 	sub	r4,zero,r4
 800836c:	18c10034 	orhi	r3,r3,1024
 8008370:	003feb06 	br	8008320 <__alt_data_end+0xfc008320>
 8008374:	043fffc4 	movi	r16,-1
 8008378:	000b883a 	mov	r5,zero
 800837c:	003f5806 	br	80080e0 <__alt_data_end+0xfc0080e0>
 8008380:	8000481e 	bne	r16,zero,80084a4 <__subsf3+0x460>
 8008384:	18006226 	beq	r3,zero,8008510 <__subsf3+0x4cc>
 8008388:	383f4726 	beq	r7,zero,80080a8 <__alt_data_end+0xfc0080a8>
 800838c:	19c7883a 	add	r3,r3,r7
 8008390:	1881002c 	andhi	r2,r3,1024
 8008394:	103f8326 	beq	r2,zero,80081a4 <__alt_data_end+0xfc0081a4>
 8008398:	00bf0034 	movhi	r2,64512
 800839c:	10bfffc4 	addi	r2,r2,-1
 80083a0:	2821883a 	mov	r16,r5
 80083a4:	1886703a 	and	r3,r3,r2
 80083a8:	003f3f06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80083ac:	80001c1e 	bne	r16,zero,8008420 <__subsf3+0x3dc>
 80083b0:	1800261e 	bne	r3,zero,800844c <__subsf3+0x408>
 80083b4:	38004c26 	beq	r7,zero,80084e8 <__subsf3+0x4a4>
 80083b8:	3807883a 	mov	r3,r7
 80083bc:	1023883a 	mov	r17,r2
 80083c0:	003f3906 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80083c4:	01c00044 	movi	r7,1
 80083c8:	003f9006 	br	800820c <__alt_data_end+0xfc00820c>
 80083cc:	3807883a 	mov	r3,r7
 80083d0:	3021883a 	mov	r16,r6
 80083d4:	1023883a 	mov	r17,r2
 80083d8:	003f3306 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80083dc:	8000161e 	bne	r16,zero,8008438 <__subsf3+0x3f4>
 80083e0:	18002d26 	beq	r3,zero,8008498 <__subsf3+0x454>
 80083e4:	0108303a 	nor	r4,zero,r4
 80083e8:	20000a26 	beq	r4,zero,8008414 <__subsf3+0x3d0>
 80083ec:	01403fc4 	movi	r5,255
 80083f0:	31402926 	beq	r6,r5,8008498 <__subsf3+0x454>
 80083f4:	014006c4 	movi	r5,27
 80083f8:	29004716 	blt	r5,r4,8008518 <__subsf3+0x4d4>
 80083fc:	01400804 	movi	r5,32
 8008400:	290bc83a 	sub	r5,r5,r4
 8008404:	194a983a 	sll	r5,r3,r5
 8008408:	1908d83a 	srl	r4,r3,r4
 800840c:	2806c03a 	cmpne	r3,r5,zero
 8008410:	20c6b03a 	or	r3,r4,r3
 8008414:	19c7883a 	add	r3,r3,r7
 8008418:	3021883a 	mov	r16,r6
 800841c:	003f7c06 	br	8008210 <__alt_data_end+0xfc008210>
 8008420:	1800111e 	bne	r3,zero,8008468 <__subsf3+0x424>
 8008424:	38003326 	beq	r7,zero,80084f4 <__subsf3+0x4b0>
 8008428:	3807883a 	mov	r3,r7
 800842c:	1023883a 	mov	r17,r2
 8008430:	04003fc4 	movi	r16,255
 8008434:	003f1c06 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008438:	01403fc4 	movi	r5,255
 800843c:	31401626 	beq	r6,r5,8008498 <__subsf3+0x454>
 8008440:	0109c83a 	sub	r4,zero,r4
 8008444:	18c10034 	orhi	r3,r3,1024
 8008448:	003fea06 	br	80083f4 <__alt_data_end+0xfc0083f4>
 800844c:	383f1626 	beq	r7,zero,80080a8 <__alt_data_end+0xfc0080a8>
 8008450:	19c9c83a 	sub	r4,r3,r7
 8008454:	2141002c 	andhi	r5,r4,1024
 8008458:	283f5026 	beq	r5,zero,800819c <__alt_data_end+0xfc00819c>
 800845c:	38c7c83a 	sub	r3,r7,r3
 8008460:	1023883a 	mov	r17,r2
 8008464:	003f1006 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008468:	38001b26 	beq	r7,zero,80084d8 <__subsf3+0x494>
 800846c:	1806d0fa 	srli	r3,r3,3
 8008470:	1900102c 	andhi	r4,r3,64
 8008474:	20000526 	beq	r4,zero,800848c <__subsf3+0x448>
 8008478:	380ed0fa 	srli	r7,r7,3
 800847c:	3900102c 	andhi	r4,r7,64
 8008480:	2000021e 	bne	r4,zero,800848c <__subsf3+0x448>
 8008484:	3807883a 	mov	r3,r7
 8008488:	1023883a 	mov	r17,r2
 800848c:	180690fa 	slli	r3,r3,3
 8008490:	04003fc4 	movi	r16,255
 8008494:	003f0406 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008498:	3807883a 	mov	r3,r7
 800849c:	3021883a 	mov	r16,r6
 80084a0:	003f0106 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80084a4:	18001726 	beq	r3,zero,8008504 <__subsf3+0x4c0>
 80084a8:	38000b26 	beq	r7,zero,80084d8 <__subsf3+0x494>
 80084ac:	1806d0fa 	srli	r3,r3,3
 80084b0:	1900102c 	andhi	r4,r3,64
 80084b4:	20000426 	beq	r4,zero,80084c8 <__subsf3+0x484>
 80084b8:	380ed0fa 	srli	r7,r7,3
 80084bc:	3900102c 	andhi	r4,r7,64
 80084c0:	2000011e 	bne	r4,zero,80084c8 <__subsf3+0x484>
 80084c4:	3807883a 	mov	r3,r7
 80084c8:	180690fa 	slli	r3,r3,3
 80084cc:	1023883a 	mov	r17,r2
 80084d0:	04003fc4 	movi	r16,255
 80084d4:	003ef406 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80084d8:	04003fc4 	movi	r16,255
 80084dc:	003ef206 	br	80080a8 <__alt_data_end+0xfc0080a8>
 80084e0:	00c00044 	movi	r3,1
 80084e4:	003f9606 	br	8008340 <__alt_data_end+0xfc008340>
 80084e8:	000b883a 	mov	r5,zero
 80084ec:	0005883a 	mov	r2,zero
 80084f0:	003f3506 	br	80081c8 <__alt_data_end+0xfc0081c8>
 80084f4:	01402034 	movhi	r5,128
 80084f8:	297fffc4 	addi	r5,r5,-1
 80084fc:	0005883a 	mov	r2,zero
 8008500:	003f2f06 	br	80081c0 <__alt_data_end+0xfc0081c0>
 8008504:	3807883a 	mov	r3,r7
 8008508:	04003fc4 	movi	r16,255
 800850c:	003ee606 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008510:	3807883a 	mov	r3,r7
 8008514:	003ee406 	br	80080a8 <__alt_data_end+0xfc0080a8>
 8008518:	00c00044 	movi	r3,1
 800851c:	003fbd06 	br	8008414 <__alt_data_end+0xfc008414>
 8008520:	0005883a 	mov	r2,zero
 8008524:	003f2806 	br	80081c8 <__alt_data_end+0xfc0081c8>

08008528 <__fixsfsi>:
 8008528:	200ad5fa 	srli	r5,r4,23
 800852c:	00c02034 	movhi	r3,128
 8008530:	18ffffc4 	addi	r3,r3,-1
 8008534:	29403fcc 	andi	r5,r5,255
 8008538:	00801f84 	movi	r2,126
 800853c:	1906703a 	and	r3,r3,r4
 8008540:	2008d7fa 	srli	r4,r4,31
 8008544:	11400e0e 	bge	r2,r5,8008580 <__fixsfsi+0x58>
 8008548:	00802744 	movi	r2,157
 800854c:	11400816 	blt	r2,r5,8008570 <__fixsfsi+0x48>
 8008550:	00802544 	movi	r2,149
 8008554:	18c02034 	orhi	r3,r3,128
 8008558:	11400b0e 	bge	r2,r5,8008588 <__fixsfsi+0x60>
 800855c:	28bfda84 	addi	r2,r5,-150
 8008560:	1884983a 	sll	r2,r3,r2
 8008564:	20000726 	beq	r4,zero,8008584 <__fixsfsi+0x5c>
 8008568:	0085c83a 	sub	r2,zero,r2
 800856c:	f800283a 	ret
 8008570:	00a00034 	movhi	r2,32768
 8008574:	10bfffc4 	addi	r2,r2,-1
 8008578:	2085883a 	add	r2,r4,r2
 800857c:	f800283a 	ret
 8008580:	0005883a 	mov	r2,zero
 8008584:	f800283a 	ret
 8008588:	00802584 	movi	r2,150
 800858c:	1145c83a 	sub	r2,r2,r5
 8008590:	1884d83a 	srl	r2,r3,r2
 8008594:	003ff306 	br	8008564 <__alt_data_end+0xfc008564>

08008598 <__floatsisf>:
 8008598:	defffd04 	addi	sp,sp,-12
 800859c:	dfc00215 	stw	ra,8(sp)
 80085a0:	dc400115 	stw	r17,4(sp)
 80085a4:	dc000015 	stw	r16,0(sp)
 80085a8:	20003526 	beq	r4,zero,8008680 <__floatsisf+0xe8>
 80085ac:	2021883a 	mov	r16,r4
 80085b0:	2022d7fa 	srli	r17,r4,31
 80085b4:	20003616 	blt	r4,zero,8008690 <__floatsisf+0xf8>
 80085b8:	8009883a 	mov	r4,r16
 80085bc:	800a58c0 	call	800a58c <__clzsi2>
 80085c0:	00c02784 	movi	r3,158
 80085c4:	1887c83a 	sub	r3,r3,r2
 80085c8:	01002584 	movi	r4,150
 80085cc:	20c01416 	blt	r4,r3,8008620 <__floatsisf+0x88>
 80085d0:	20c9c83a 	sub	r4,r4,r3
 80085d4:	8120983a 	sll	r16,r16,r4
 80085d8:	00802034 	movhi	r2,128
 80085dc:	10bfffc4 	addi	r2,r2,-1
 80085e0:	8809883a 	mov	r4,r17
 80085e4:	80a0703a 	and	r16,r16,r2
 80085e8:	18803fcc 	andi	r2,r3,255
 80085ec:	100695fa 	slli	r3,r2,23
 80085f0:	20803fcc 	andi	r2,r4,255
 80085f4:	100897fa 	slli	r4,r2,31
 80085f8:	00802034 	movhi	r2,128
 80085fc:	10bfffc4 	addi	r2,r2,-1
 8008600:	8084703a 	and	r2,r16,r2
 8008604:	10c4b03a 	or	r2,r2,r3
 8008608:	1104b03a 	or	r2,r2,r4
 800860c:	dfc00217 	ldw	ra,8(sp)
 8008610:	dc400117 	ldw	r17,4(sp)
 8008614:	dc000017 	ldw	r16,0(sp)
 8008618:	dec00304 	addi	sp,sp,12
 800861c:	f800283a 	ret
 8008620:	01002644 	movi	r4,153
 8008624:	20c01c16 	blt	r4,r3,8008698 <__floatsisf+0x100>
 8008628:	20c9c83a 	sub	r4,r4,r3
 800862c:	8120983a 	sll	r16,r16,r4
 8008630:	013f0034 	movhi	r4,64512
 8008634:	213fffc4 	addi	r4,r4,-1
 8008638:	814001cc 	andi	r5,r16,7
 800863c:	8108703a 	and	r4,r16,r4
 8008640:	28000426 	beq	r5,zero,8008654 <__floatsisf+0xbc>
 8008644:	840003cc 	andi	r16,r16,15
 8008648:	01400104 	movi	r5,4
 800864c:	81400126 	beq	r16,r5,8008654 <__floatsisf+0xbc>
 8008650:	2149883a 	add	r4,r4,r5
 8008654:	2141002c 	andhi	r5,r4,1024
 8008658:	28000526 	beq	r5,zero,8008670 <__floatsisf+0xd8>
 800865c:	00c027c4 	movi	r3,159
 8008660:	1887c83a 	sub	r3,r3,r2
 8008664:	00bf0034 	movhi	r2,64512
 8008668:	10bfffc4 	addi	r2,r2,-1
 800866c:	2088703a 	and	r4,r4,r2
 8008670:	202091ba 	slli	r16,r4,6
 8008674:	8809883a 	mov	r4,r17
 8008678:	8020d27a 	srli	r16,r16,9
 800867c:	003fda06 	br	80085e8 <__alt_data_end+0xfc0085e8>
 8008680:	0009883a 	mov	r4,zero
 8008684:	0007883a 	mov	r3,zero
 8008688:	0021883a 	mov	r16,zero
 800868c:	003fd606 	br	80085e8 <__alt_data_end+0xfc0085e8>
 8008690:	0121c83a 	sub	r16,zero,r4
 8008694:	003fc806 	br	80085b8 <__alt_data_end+0xfc0085b8>
 8008698:	01002e44 	movi	r4,185
 800869c:	20c9c83a 	sub	r4,r4,r3
 80086a0:	01400144 	movi	r5,5
 80086a4:	8108983a 	sll	r4,r16,r4
 80086a8:	288bc83a 	sub	r5,r5,r2
 80086ac:	8160d83a 	srl	r16,r16,r5
 80086b0:	2008c03a 	cmpne	r4,r4,zero
 80086b4:	8120b03a 	or	r16,r16,r4
 80086b8:	003fdd06 	br	8008630 <__alt_data_end+0xfc008630>

080086bc <__adddf3>:
 80086bc:	02c00434 	movhi	r11,16
 80086c0:	5affffc4 	addi	r11,r11,-1
 80086c4:	2806d7fa 	srli	r3,r5,31
 80086c8:	2ad4703a 	and	r10,r5,r11
 80086cc:	3ad2703a 	and	r9,r7,r11
 80086d0:	3804d53a 	srli	r2,r7,20
 80086d4:	3018d77a 	srli	r12,r6,29
 80086d8:	280ad53a 	srli	r5,r5,20
 80086dc:	501490fa 	slli	r10,r10,3
 80086e0:	2010d77a 	srli	r8,r4,29
 80086e4:	481290fa 	slli	r9,r9,3
 80086e8:	380ed7fa 	srli	r7,r7,31
 80086ec:	defffb04 	addi	sp,sp,-20
 80086f0:	dc800215 	stw	r18,8(sp)
 80086f4:	dc400115 	stw	r17,4(sp)
 80086f8:	dc000015 	stw	r16,0(sp)
 80086fc:	dfc00415 	stw	ra,16(sp)
 8008700:	dcc00315 	stw	r19,12(sp)
 8008704:	1c803fcc 	andi	r18,r3,255
 8008708:	2c01ffcc 	andi	r16,r5,2047
 800870c:	5210b03a 	or	r8,r10,r8
 8008710:	202290fa 	slli	r17,r4,3
 8008714:	1081ffcc 	andi	r2,r2,2047
 8008718:	4b12b03a 	or	r9,r9,r12
 800871c:	300c90fa 	slli	r6,r6,3
 8008720:	91c07526 	beq	r18,r7,80088f8 <__adddf3+0x23c>
 8008724:	8087c83a 	sub	r3,r16,r2
 8008728:	00c0ab0e 	bge	zero,r3,80089d8 <__adddf3+0x31c>
 800872c:	10002a1e 	bne	r2,zero,80087d8 <__adddf3+0x11c>
 8008730:	4984b03a 	or	r2,r9,r6
 8008734:	1000961e 	bne	r2,zero,8008990 <__adddf3+0x2d4>
 8008738:	888001cc 	andi	r2,r17,7
 800873c:	10000726 	beq	r2,zero,800875c <__adddf3+0xa0>
 8008740:	888003cc 	andi	r2,r17,15
 8008744:	00c00104 	movi	r3,4
 8008748:	10c00426 	beq	r2,r3,800875c <__adddf3+0xa0>
 800874c:	88c7883a 	add	r3,r17,r3
 8008750:	1c63803a 	cmpltu	r17,r3,r17
 8008754:	4451883a 	add	r8,r8,r17
 8008758:	1823883a 	mov	r17,r3
 800875c:	4080202c 	andhi	r2,r8,128
 8008760:	10005926 	beq	r2,zero,80088c8 <__adddf3+0x20c>
 8008764:	84000044 	addi	r16,r16,1
 8008768:	0081ffc4 	movi	r2,2047
 800876c:	8080ba26 	beq	r16,r2,8008a58 <__adddf3+0x39c>
 8008770:	00bfe034 	movhi	r2,65408
 8008774:	10bfffc4 	addi	r2,r2,-1
 8008778:	4090703a 	and	r8,r8,r2
 800877c:	4004977a 	slli	r2,r8,29
 8008780:	4010927a 	slli	r8,r8,9
 8008784:	8822d0fa 	srli	r17,r17,3
 8008788:	8401ffcc 	andi	r16,r16,2047
 800878c:	4010d33a 	srli	r8,r8,12
 8008790:	9007883a 	mov	r3,r18
 8008794:	1444b03a 	or	r2,r2,r17
 8008798:	8401ffcc 	andi	r16,r16,2047
 800879c:	8020953a 	slli	r16,r16,20
 80087a0:	18c03fcc 	andi	r3,r3,255
 80087a4:	01000434 	movhi	r4,16
 80087a8:	213fffc4 	addi	r4,r4,-1
 80087ac:	180697fa 	slli	r3,r3,31
 80087b0:	4110703a 	and	r8,r8,r4
 80087b4:	4410b03a 	or	r8,r8,r16
 80087b8:	40c6b03a 	or	r3,r8,r3
 80087bc:	dfc00417 	ldw	ra,16(sp)
 80087c0:	dcc00317 	ldw	r19,12(sp)
 80087c4:	dc800217 	ldw	r18,8(sp)
 80087c8:	dc400117 	ldw	r17,4(sp)
 80087cc:	dc000017 	ldw	r16,0(sp)
 80087d0:	dec00504 	addi	sp,sp,20
 80087d4:	f800283a 	ret
 80087d8:	0081ffc4 	movi	r2,2047
 80087dc:	80bfd626 	beq	r16,r2,8008738 <__alt_data_end+0xfc008738>
 80087e0:	4a402034 	orhi	r9,r9,128
 80087e4:	00800e04 	movi	r2,56
 80087e8:	10c09f16 	blt	r2,r3,8008a68 <__adddf3+0x3ac>
 80087ec:	008007c4 	movi	r2,31
 80087f0:	10c0c216 	blt	r2,r3,8008afc <__adddf3+0x440>
 80087f4:	00800804 	movi	r2,32
 80087f8:	10c5c83a 	sub	r2,r2,r3
 80087fc:	488a983a 	sll	r5,r9,r2
 8008800:	30c8d83a 	srl	r4,r6,r3
 8008804:	3084983a 	sll	r2,r6,r2
 8008808:	48c6d83a 	srl	r3,r9,r3
 800880c:	290cb03a 	or	r6,r5,r4
 8008810:	1004c03a 	cmpne	r2,r2,zero
 8008814:	308cb03a 	or	r6,r6,r2
 8008818:	898dc83a 	sub	r6,r17,r6
 800881c:	89a3803a 	cmpltu	r17,r17,r6
 8008820:	40d1c83a 	sub	r8,r8,r3
 8008824:	4451c83a 	sub	r8,r8,r17
 8008828:	3023883a 	mov	r17,r6
 800882c:	4080202c 	andhi	r2,r8,128
 8008830:	10002326 	beq	r2,zero,80088c0 <__adddf3+0x204>
 8008834:	04c02034 	movhi	r19,128
 8008838:	9cffffc4 	addi	r19,r19,-1
 800883c:	44e6703a 	and	r19,r8,r19
 8008840:	98007626 	beq	r19,zero,8008a1c <__adddf3+0x360>
 8008844:	9809883a 	mov	r4,r19
 8008848:	800a58c0 	call	800a58c <__clzsi2>
 800884c:	10fffe04 	addi	r3,r2,-8
 8008850:	010007c4 	movi	r4,31
 8008854:	20c07716 	blt	r4,r3,8008a34 <__adddf3+0x378>
 8008858:	00800804 	movi	r2,32
 800885c:	10c5c83a 	sub	r2,r2,r3
 8008860:	8884d83a 	srl	r2,r17,r2
 8008864:	98d0983a 	sll	r8,r19,r3
 8008868:	88e2983a 	sll	r17,r17,r3
 800886c:	1204b03a 	or	r2,r2,r8
 8008870:	1c007416 	blt	r3,r16,8008a44 <__adddf3+0x388>
 8008874:	1c21c83a 	sub	r16,r3,r16
 8008878:	82000044 	addi	r8,r16,1
 800887c:	00c007c4 	movi	r3,31
 8008880:	1a009116 	blt	r3,r8,8008ac8 <__adddf3+0x40c>
 8008884:	00c00804 	movi	r3,32
 8008888:	1a07c83a 	sub	r3,r3,r8
 800888c:	8a08d83a 	srl	r4,r17,r8
 8008890:	88e2983a 	sll	r17,r17,r3
 8008894:	10c6983a 	sll	r3,r2,r3
 8008898:	1210d83a 	srl	r8,r2,r8
 800889c:	8804c03a 	cmpne	r2,r17,zero
 80088a0:	1906b03a 	or	r3,r3,r4
 80088a4:	18a2b03a 	or	r17,r3,r2
 80088a8:	0021883a 	mov	r16,zero
 80088ac:	003fa206 	br	8008738 <__alt_data_end+0xfc008738>
 80088b0:	1890b03a 	or	r8,r3,r2
 80088b4:	40017d26 	beq	r8,zero,8008eac <__adddf3+0x7f0>
 80088b8:	1011883a 	mov	r8,r2
 80088bc:	1823883a 	mov	r17,r3
 80088c0:	888001cc 	andi	r2,r17,7
 80088c4:	103f9e1e 	bne	r2,zero,8008740 <__alt_data_end+0xfc008740>
 80088c8:	4004977a 	slli	r2,r8,29
 80088cc:	8822d0fa 	srli	r17,r17,3
 80088d0:	4010d0fa 	srli	r8,r8,3
 80088d4:	9007883a 	mov	r3,r18
 80088d8:	1444b03a 	or	r2,r2,r17
 80088dc:	0101ffc4 	movi	r4,2047
 80088e0:	81002426 	beq	r16,r4,8008974 <__adddf3+0x2b8>
 80088e4:	8120703a 	and	r16,r16,r4
 80088e8:	01000434 	movhi	r4,16
 80088ec:	213fffc4 	addi	r4,r4,-1
 80088f0:	4110703a 	and	r8,r8,r4
 80088f4:	003fa806 	br	8008798 <__alt_data_end+0xfc008798>
 80088f8:	8089c83a 	sub	r4,r16,r2
 80088fc:	01005e0e 	bge	zero,r4,8008a78 <__adddf3+0x3bc>
 8008900:	10002b26 	beq	r2,zero,80089b0 <__adddf3+0x2f4>
 8008904:	0081ffc4 	movi	r2,2047
 8008908:	80bf8b26 	beq	r16,r2,8008738 <__alt_data_end+0xfc008738>
 800890c:	4a402034 	orhi	r9,r9,128
 8008910:	00800e04 	movi	r2,56
 8008914:	1100a40e 	bge	r2,r4,8008ba8 <__adddf3+0x4ec>
 8008918:	498cb03a 	or	r6,r9,r6
 800891c:	300ac03a 	cmpne	r5,r6,zero
 8008920:	0013883a 	mov	r9,zero
 8008924:	2c4b883a 	add	r5,r5,r17
 8008928:	2c63803a 	cmpltu	r17,r5,r17
 800892c:	4a11883a 	add	r8,r9,r8
 8008930:	8a11883a 	add	r8,r17,r8
 8008934:	2823883a 	mov	r17,r5
 8008938:	4080202c 	andhi	r2,r8,128
 800893c:	103fe026 	beq	r2,zero,80088c0 <__alt_data_end+0xfc0088c0>
 8008940:	84000044 	addi	r16,r16,1
 8008944:	0081ffc4 	movi	r2,2047
 8008948:	8080d226 	beq	r16,r2,8008c94 <__adddf3+0x5d8>
 800894c:	00bfe034 	movhi	r2,65408
 8008950:	10bfffc4 	addi	r2,r2,-1
 8008954:	4090703a 	and	r8,r8,r2
 8008958:	880ad07a 	srli	r5,r17,1
 800895c:	400897fa 	slli	r4,r8,31
 8008960:	88c0004c 	andi	r3,r17,1
 8008964:	28e2b03a 	or	r17,r5,r3
 8008968:	4010d07a 	srli	r8,r8,1
 800896c:	2462b03a 	or	r17,r4,r17
 8008970:	003f7106 	br	8008738 <__alt_data_end+0xfc008738>
 8008974:	4088b03a 	or	r4,r8,r2
 8008978:	20014526 	beq	r4,zero,8008e90 <__adddf3+0x7d4>
 800897c:	01000434 	movhi	r4,16
 8008980:	42000234 	orhi	r8,r8,8
 8008984:	213fffc4 	addi	r4,r4,-1
 8008988:	4110703a 	and	r8,r8,r4
 800898c:	003f8206 	br	8008798 <__alt_data_end+0xfc008798>
 8008990:	18ffffc4 	addi	r3,r3,-1
 8008994:	1800491e 	bne	r3,zero,8008abc <__adddf3+0x400>
 8008998:	898bc83a 	sub	r5,r17,r6
 800899c:	8963803a 	cmpltu	r17,r17,r5
 80089a0:	4251c83a 	sub	r8,r8,r9
 80089a4:	4451c83a 	sub	r8,r8,r17
 80089a8:	2823883a 	mov	r17,r5
 80089ac:	003f9f06 	br	800882c <__alt_data_end+0xfc00882c>
 80089b0:	4984b03a 	or	r2,r9,r6
 80089b4:	103f6026 	beq	r2,zero,8008738 <__alt_data_end+0xfc008738>
 80089b8:	213fffc4 	addi	r4,r4,-1
 80089bc:	2000931e 	bne	r4,zero,8008c0c <__adddf3+0x550>
 80089c0:	898d883a 	add	r6,r17,r6
 80089c4:	3463803a 	cmpltu	r17,r6,r17
 80089c8:	4251883a 	add	r8,r8,r9
 80089cc:	8a11883a 	add	r8,r17,r8
 80089d0:	3023883a 	mov	r17,r6
 80089d4:	003fd806 	br	8008938 <__alt_data_end+0xfc008938>
 80089d8:	1800541e 	bne	r3,zero,8008b2c <__adddf3+0x470>
 80089dc:	80800044 	addi	r2,r16,1
 80089e0:	1081ffcc 	andi	r2,r2,2047
 80089e4:	00c00044 	movi	r3,1
 80089e8:	1880a00e 	bge	r3,r2,8008c6c <__adddf3+0x5b0>
 80089ec:	8989c83a 	sub	r4,r17,r6
 80089f0:	8905803a 	cmpltu	r2,r17,r4
 80089f4:	4267c83a 	sub	r19,r8,r9
 80089f8:	98a7c83a 	sub	r19,r19,r2
 80089fc:	9880202c 	andhi	r2,r19,128
 8008a00:	10006326 	beq	r2,zero,8008b90 <__adddf3+0x4d4>
 8008a04:	3463c83a 	sub	r17,r6,r17
 8008a08:	4a07c83a 	sub	r3,r9,r8
 8008a0c:	344d803a 	cmpltu	r6,r6,r17
 8008a10:	19a7c83a 	sub	r19,r3,r6
 8008a14:	3825883a 	mov	r18,r7
 8008a18:	983f8a1e 	bne	r19,zero,8008844 <__alt_data_end+0xfc008844>
 8008a1c:	8809883a 	mov	r4,r17
 8008a20:	800a58c0 	call	800a58c <__clzsi2>
 8008a24:	10800804 	addi	r2,r2,32
 8008a28:	10fffe04 	addi	r3,r2,-8
 8008a2c:	010007c4 	movi	r4,31
 8008a30:	20ff890e 	bge	r4,r3,8008858 <__alt_data_end+0xfc008858>
 8008a34:	10bff604 	addi	r2,r2,-40
 8008a38:	8884983a 	sll	r2,r17,r2
 8008a3c:	0023883a 	mov	r17,zero
 8008a40:	1c3f8c0e 	bge	r3,r16,8008874 <__alt_data_end+0xfc008874>
 8008a44:	023fe034 	movhi	r8,65408
 8008a48:	423fffc4 	addi	r8,r8,-1
 8008a4c:	80e1c83a 	sub	r16,r16,r3
 8008a50:	1210703a 	and	r8,r2,r8
 8008a54:	003f3806 	br	8008738 <__alt_data_end+0xfc008738>
 8008a58:	9007883a 	mov	r3,r18
 8008a5c:	0011883a 	mov	r8,zero
 8008a60:	0005883a 	mov	r2,zero
 8008a64:	003f4c06 	br	8008798 <__alt_data_end+0xfc008798>
 8008a68:	498cb03a 	or	r6,r9,r6
 8008a6c:	300cc03a 	cmpne	r6,r6,zero
 8008a70:	0007883a 	mov	r3,zero
 8008a74:	003f6806 	br	8008818 <__alt_data_end+0xfc008818>
 8008a78:	20009c1e 	bne	r4,zero,8008cec <__adddf3+0x630>
 8008a7c:	80800044 	addi	r2,r16,1
 8008a80:	1141ffcc 	andi	r5,r2,2047
 8008a84:	01000044 	movi	r4,1
 8008a88:	2140670e 	bge	r4,r5,8008c28 <__adddf3+0x56c>
 8008a8c:	0101ffc4 	movi	r4,2047
 8008a90:	11007f26 	beq	r2,r4,8008c90 <__adddf3+0x5d4>
 8008a94:	898d883a 	add	r6,r17,r6
 8008a98:	4247883a 	add	r3,r8,r9
 8008a9c:	3451803a 	cmpltu	r8,r6,r17
 8008aa0:	40d1883a 	add	r8,r8,r3
 8008aa4:	402297fa 	slli	r17,r8,31
 8008aa8:	300cd07a 	srli	r6,r6,1
 8008aac:	4010d07a 	srli	r8,r8,1
 8008ab0:	1021883a 	mov	r16,r2
 8008ab4:	89a2b03a 	or	r17,r17,r6
 8008ab8:	003f1f06 	br	8008738 <__alt_data_end+0xfc008738>
 8008abc:	0081ffc4 	movi	r2,2047
 8008ac0:	80bf481e 	bne	r16,r2,80087e4 <__alt_data_end+0xfc0087e4>
 8008ac4:	003f1c06 	br	8008738 <__alt_data_end+0xfc008738>
 8008ac8:	843ff844 	addi	r16,r16,-31
 8008acc:	01000804 	movi	r4,32
 8008ad0:	1406d83a 	srl	r3,r2,r16
 8008ad4:	41005026 	beq	r8,r4,8008c18 <__adddf3+0x55c>
 8008ad8:	01001004 	movi	r4,64
 8008adc:	2211c83a 	sub	r8,r4,r8
 8008ae0:	1204983a 	sll	r2,r2,r8
 8008ae4:	88a2b03a 	or	r17,r17,r2
 8008ae8:	8822c03a 	cmpne	r17,r17,zero
 8008aec:	1c62b03a 	or	r17,r3,r17
 8008af0:	0011883a 	mov	r8,zero
 8008af4:	0021883a 	mov	r16,zero
 8008af8:	003f7106 	br	80088c0 <__alt_data_end+0xfc0088c0>
 8008afc:	193ff804 	addi	r4,r3,-32
 8008b00:	00800804 	movi	r2,32
 8008b04:	4908d83a 	srl	r4,r9,r4
 8008b08:	18804526 	beq	r3,r2,8008c20 <__adddf3+0x564>
 8008b0c:	00801004 	movi	r2,64
 8008b10:	10c5c83a 	sub	r2,r2,r3
 8008b14:	4886983a 	sll	r3,r9,r2
 8008b18:	198cb03a 	or	r6,r3,r6
 8008b1c:	300cc03a 	cmpne	r6,r6,zero
 8008b20:	218cb03a 	or	r6,r4,r6
 8008b24:	0007883a 	mov	r3,zero
 8008b28:	003f3b06 	br	8008818 <__alt_data_end+0xfc008818>
 8008b2c:	80002a26 	beq	r16,zero,8008bd8 <__adddf3+0x51c>
 8008b30:	0101ffc4 	movi	r4,2047
 8008b34:	11006826 	beq	r2,r4,8008cd8 <__adddf3+0x61c>
 8008b38:	00c7c83a 	sub	r3,zero,r3
 8008b3c:	42002034 	orhi	r8,r8,128
 8008b40:	01000e04 	movi	r4,56
 8008b44:	20c07c16 	blt	r4,r3,8008d38 <__adddf3+0x67c>
 8008b48:	010007c4 	movi	r4,31
 8008b4c:	20c0da16 	blt	r4,r3,8008eb8 <__adddf3+0x7fc>
 8008b50:	01000804 	movi	r4,32
 8008b54:	20c9c83a 	sub	r4,r4,r3
 8008b58:	4114983a 	sll	r10,r8,r4
 8008b5c:	88cad83a 	srl	r5,r17,r3
 8008b60:	8908983a 	sll	r4,r17,r4
 8008b64:	40c6d83a 	srl	r3,r8,r3
 8008b68:	5162b03a 	or	r17,r10,r5
 8008b6c:	2008c03a 	cmpne	r4,r4,zero
 8008b70:	8922b03a 	or	r17,r17,r4
 8008b74:	3463c83a 	sub	r17,r6,r17
 8008b78:	48c7c83a 	sub	r3,r9,r3
 8008b7c:	344d803a 	cmpltu	r6,r6,r17
 8008b80:	1991c83a 	sub	r8,r3,r6
 8008b84:	1021883a 	mov	r16,r2
 8008b88:	3825883a 	mov	r18,r7
 8008b8c:	003f2706 	br	800882c <__alt_data_end+0xfc00882c>
 8008b90:	24d0b03a 	or	r8,r4,r19
 8008b94:	40001b1e 	bne	r8,zero,8008c04 <__adddf3+0x548>
 8008b98:	0005883a 	mov	r2,zero
 8008b9c:	0007883a 	mov	r3,zero
 8008ba0:	0021883a 	mov	r16,zero
 8008ba4:	003f4d06 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008ba8:	008007c4 	movi	r2,31
 8008bac:	11003c16 	blt	r2,r4,8008ca0 <__adddf3+0x5e4>
 8008bb0:	00800804 	movi	r2,32
 8008bb4:	1105c83a 	sub	r2,r2,r4
 8008bb8:	488e983a 	sll	r7,r9,r2
 8008bbc:	310ad83a 	srl	r5,r6,r4
 8008bc0:	3084983a 	sll	r2,r6,r2
 8008bc4:	4912d83a 	srl	r9,r9,r4
 8008bc8:	394ab03a 	or	r5,r7,r5
 8008bcc:	1004c03a 	cmpne	r2,r2,zero
 8008bd0:	288ab03a 	or	r5,r5,r2
 8008bd4:	003f5306 	br	8008924 <__alt_data_end+0xfc008924>
 8008bd8:	4448b03a 	or	r4,r8,r17
 8008bdc:	20003e26 	beq	r4,zero,8008cd8 <__adddf3+0x61c>
 8008be0:	00c6303a 	nor	r3,zero,r3
 8008be4:	18003a1e 	bne	r3,zero,8008cd0 <__adddf3+0x614>
 8008be8:	3463c83a 	sub	r17,r6,r17
 8008bec:	4a07c83a 	sub	r3,r9,r8
 8008bf0:	344d803a 	cmpltu	r6,r6,r17
 8008bf4:	1991c83a 	sub	r8,r3,r6
 8008bf8:	1021883a 	mov	r16,r2
 8008bfc:	3825883a 	mov	r18,r7
 8008c00:	003f0a06 	br	800882c <__alt_data_end+0xfc00882c>
 8008c04:	2023883a 	mov	r17,r4
 8008c08:	003f0d06 	br	8008840 <__alt_data_end+0xfc008840>
 8008c0c:	0081ffc4 	movi	r2,2047
 8008c10:	80bf3f1e 	bne	r16,r2,8008910 <__alt_data_end+0xfc008910>
 8008c14:	003ec806 	br	8008738 <__alt_data_end+0xfc008738>
 8008c18:	0005883a 	mov	r2,zero
 8008c1c:	003fb106 	br	8008ae4 <__alt_data_end+0xfc008ae4>
 8008c20:	0007883a 	mov	r3,zero
 8008c24:	003fbc06 	br	8008b18 <__alt_data_end+0xfc008b18>
 8008c28:	4444b03a 	or	r2,r8,r17
 8008c2c:	8000871e 	bne	r16,zero,8008e4c <__adddf3+0x790>
 8008c30:	1000ba26 	beq	r2,zero,8008f1c <__adddf3+0x860>
 8008c34:	4984b03a 	or	r2,r9,r6
 8008c38:	103ebf26 	beq	r2,zero,8008738 <__alt_data_end+0xfc008738>
 8008c3c:	8985883a 	add	r2,r17,r6
 8008c40:	4247883a 	add	r3,r8,r9
 8008c44:	1451803a 	cmpltu	r8,r2,r17
 8008c48:	40d1883a 	add	r8,r8,r3
 8008c4c:	40c0202c 	andhi	r3,r8,128
 8008c50:	1023883a 	mov	r17,r2
 8008c54:	183f1a26 	beq	r3,zero,80088c0 <__alt_data_end+0xfc0088c0>
 8008c58:	00bfe034 	movhi	r2,65408
 8008c5c:	10bfffc4 	addi	r2,r2,-1
 8008c60:	2021883a 	mov	r16,r4
 8008c64:	4090703a 	and	r8,r8,r2
 8008c68:	003eb306 	br	8008738 <__alt_data_end+0xfc008738>
 8008c6c:	4444b03a 	or	r2,r8,r17
 8008c70:	8000291e 	bne	r16,zero,8008d18 <__adddf3+0x65c>
 8008c74:	10004b1e 	bne	r2,zero,8008da4 <__adddf3+0x6e8>
 8008c78:	4990b03a 	or	r8,r9,r6
 8008c7c:	40008b26 	beq	r8,zero,8008eac <__adddf3+0x7f0>
 8008c80:	4811883a 	mov	r8,r9
 8008c84:	3023883a 	mov	r17,r6
 8008c88:	3825883a 	mov	r18,r7
 8008c8c:	003eaa06 	br	8008738 <__alt_data_end+0xfc008738>
 8008c90:	1021883a 	mov	r16,r2
 8008c94:	0011883a 	mov	r8,zero
 8008c98:	0005883a 	mov	r2,zero
 8008c9c:	003f0f06 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008ca0:	217ff804 	addi	r5,r4,-32
 8008ca4:	00800804 	movi	r2,32
 8008ca8:	494ad83a 	srl	r5,r9,r5
 8008cac:	20807d26 	beq	r4,r2,8008ea4 <__adddf3+0x7e8>
 8008cb0:	00801004 	movi	r2,64
 8008cb4:	1109c83a 	sub	r4,r2,r4
 8008cb8:	4912983a 	sll	r9,r9,r4
 8008cbc:	498cb03a 	or	r6,r9,r6
 8008cc0:	300cc03a 	cmpne	r6,r6,zero
 8008cc4:	298ab03a 	or	r5,r5,r6
 8008cc8:	0013883a 	mov	r9,zero
 8008ccc:	003f1506 	br	8008924 <__alt_data_end+0xfc008924>
 8008cd0:	0101ffc4 	movi	r4,2047
 8008cd4:	113f9a1e 	bne	r2,r4,8008b40 <__alt_data_end+0xfc008b40>
 8008cd8:	4811883a 	mov	r8,r9
 8008cdc:	3023883a 	mov	r17,r6
 8008ce0:	1021883a 	mov	r16,r2
 8008ce4:	3825883a 	mov	r18,r7
 8008ce8:	003e9306 	br	8008738 <__alt_data_end+0xfc008738>
 8008cec:	8000161e 	bne	r16,zero,8008d48 <__adddf3+0x68c>
 8008cf0:	444ab03a 	or	r5,r8,r17
 8008cf4:	28005126 	beq	r5,zero,8008e3c <__adddf3+0x780>
 8008cf8:	0108303a 	nor	r4,zero,r4
 8008cfc:	20004d1e 	bne	r4,zero,8008e34 <__adddf3+0x778>
 8008d00:	89a3883a 	add	r17,r17,r6
 8008d04:	4253883a 	add	r9,r8,r9
 8008d08:	898d803a 	cmpltu	r6,r17,r6
 8008d0c:	3251883a 	add	r8,r6,r9
 8008d10:	1021883a 	mov	r16,r2
 8008d14:	003f0806 	br	8008938 <__alt_data_end+0xfc008938>
 8008d18:	1000301e 	bne	r2,zero,8008ddc <__adddf3+0x720>
 8008d1c:	4984b03a 	or	r2,r9,r6
 8008d20:	10007126 	beq	r2,zero,8008ee8 <__adddf3+0x82c>
 8008d24:	4811883a 	mov	r8,r9
 8008d28:	3023883a 	mov	r17,r6
 8008d2c:	3825883a 	mov	r18,r7
 8008d30:	0401ffc4 	movi	r16,2047
 8008d34:	003e8006 	br	8008738 <__alt_data_end+0xfc008738>
 8008d38:	4462b03a 	or	r17,r8,r17
 8008d3c:	8822c03a 	cmpne	r17,r17,zero
 8008d40:	0007883a 	mov	r3,zero
 8008d44:	003f8b06 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008d48:	0141ffc4 	movi	r5,2047
 8008d4c:	11403b26 	beq	r2,r5,8008e3c <__adddf3+0x780>
 8008d50:	0109c83a 	sub	r4,zero,r4
 8008d54:	42002034 	orhi	r8,r8,128
 8008d58:	01400e04 	movi	r5,56
 8008d5c:	29006716 	blt	r5,r4,8008efc <__adddf3+0x840>
 8008d60:	014007c4 	movi	r5,31
 8008d64:	29007016 	blt	r5,r4,8008f28 <__adddf3+0x86c>
 8008d68:	01400804 	movi	r5,32
 8008d6c:	290bc83a 	sub	r5,r5,r4
 8008d70:	4154983a 	sll	r10,r8,r5
 8008d74:	890ed83a 	srl	r7,r17,r4
 8008d78:	894a983a 	sll	r5,r17,r5
 8008d7c:	4108d83a 	srl	r4,r8,r4
 8008d80:	51e2b03a 	or	r17,r10,r7
 8008d84:	280ac03a 	cmpne	r5,r5,zero
 8008d88:	8962b03a 	or	r17,r17,r5
 8008d8c:	89a3883a 	add	r17,r17,r6
 8008d90:	2253883a 	add	r9,r4,r9
 8008d94:	898d803a 	cmpltu	r6,r17,r6
 8008d98:	3251883a 	add	r8,r6,r9
 8008d9c:	1021883a 	mov	r16,r2
 8008da0:	003ee506 	br	8008938 <__alt_data_end+0xfc008938>
 8008da4:	4984b03a 	or	r2,r9,r6
 8008da8:	103e6326 	beq	r2,zero,8008738 <__alt_data_end+0xfc008738>
 8008dac:	8987c83a 	sub	r3,r17,r6
 8008db0:	88c9803a 	cmpltu	r4,r17,r3
 8008db4:	4245c83a 	sub	r2,r8,r9
 8008db8:	1105c83a 	sub	r2,r2,r4
 8008dbc:	1100202c 	andhi	r4,r2,128
 8008dc0:	203ebb26 	beq	r4,zero,80088b0 <__alt_data_end+0xfc0088b0>
 8008dc4:	3463c83a 	sub	r17,r6,r17
 8008dc8:	4a07c83a 	sub	r3,r9,r8
 8008dcc:	344d803a 	cmpltu	r6,r6,r17
 8008dd0:	1991c83a 	sub	r8,r3,r6
 8008dd4:	3825883a 	mov	r18,r7
 8008dd8:	003e5706 	br	8008738 <__alt_data_end+0xfc008738>
 8008ddc:	4984b03a 	or	r2,r9,r6
 8008de0:	10002e26 	beq	r2,zero,8008e9c <__adddf3+0x7e0>
 8008de4:	4004d0fa 	srli	r2,r8,3
 8008de8:	8822d0fa 	srli	r17,r17,3
 8008dec:	4010977a 	slli	r8,r8,29
 8008df0:	10c0022c 	andhi	r3,r2,8
 8008df4:	4462b03a 	or	r17,r8,r17
 8008df8:	18000826 	beq	r3,zero,8008e1c <__adddf3+0x760>
 8008dfc:	4808d0fa 	srli	r4,r9,3
 8008e00:	20c0022c 	andhi	r3,r4,8
 8008e04:	1800051e 	bne	r3,zero,8008e1c <__adddf3+0x760>
 8008e08:	300cd0fa 	srli	r6,r6,3
 8008e0c:	4806977a 	slli	r3,r9,29
 8008e10:	2005883a 	mov	r2,r4
 8008e14:	3825883a 	mov	r18,r7
 8008e18:	19a2b03a 	or	r17,r3,r6
 8008e1c:	8810d77a 	srli	r8,r17,29
 8008e20:	100490fa 	slli	r2,r2,3
 8008e24:	882290fa 	slli	r17,r17,3
 8008e28:	0401ffc4 	movi	r16,2047
 8008e2c:	4090b03a 	or	r8,r8,r2
 8008e30:	003e4106 	br	8008738 <__alt_data_end+0xfc008738>
 8008e34:	0141ffc4 	movi	r5,2047
 8008e38:	117fc71e 	bne	r2,r5,8008d58 <__alt_data_end+0xfc008d58>
 8008e3c:	4811883a 	mov	r8,r9
 8008e40:	3023883a 	mov	r17,r6
 8008e44:	1021883a 	mov	r16,r2
 8008e48:	003e3b06 	br	8008738 <__alt_data_end+0xfc008738>
 8008e4c:	10002f26 	beq	r2,zero,8008f0c <__adddf3+0x850>
 8008e50:	4984b03a 	or	r2,r9,r6
 8008e54:	10001126 	beq	r2,zero,8008e9c <__adddf3+0x7e0>
 8008e58:	4004d0fa 	srli	r2,r8,3
 8008e5c:	8822d0fa 	srli	r17,r17,3
 8008e60:	4010977a 	slli	r8,r8,29
 8008e64:	10c0022c 	andhi	r3,r2,8
 8008e68:	4462b03a 	or	r17,r8,r17
 8008e6c:	183feb26 	beq	r3,zero,8008e1c <__alt_data_end+0xfc008e1c>
 8008e70:	4808d0fa 	srli	r4,r9,3
 8008e74:	20c0022c 	andhi	r3,r4,8
 8008e78:	183fe81e 	bne	r3,zero,8008e1c <__alt_data_end+0xfc008e1c>
 8008e7c:	300cd0fa 	srli	r6,r6,3
 8008e80:	4806977a 	slli	r3,r9,29
 8008e84:	2005883a 	mov	r2,r4
 8008e88:	19a2b03a 	or	r17,r3,r6
 8008e8c:	003fe306 	br	8008e1c <__alt_data_end+0xfc008e1c>
 8008e90:	0011883a 	mov	r8,zero
 8008e94:	0005883a 	mov	r2,zero
 8008e98:	003e3f06 	br	8008798 <__alt_data_end+0xfc008798>
 8008e9c:	0401ffc4 	movi	r16,2047
 8008ea0:	003e2506 	br	8008738 <__alt_data_end+0xfc008738>
 8008ea4:	0013883a 	mov	r9,zero
 8008ea8:	003f8406 	br	8008cbc <__alt_data_end+0xfc008cbc>
 8008eac:	0005883a 	mov	r2,zero
 8008eb0:	0007883a 	mov	r3,zero
 8008eb4:	003e8906 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008eb8:	197ff804 	addi	r5,r3,-32
 8008ebc:	01000804 	movi	r4,32
 8008ec0:	414ad83a 	srl	r5,r8,r5
 8008ec4:	19002426 	beq	r3,r4,8008f58 <__adddf3+0x89c>
 8008ec8:	01001004 	movi	r4,64
 8008ecc:	20c7c83a 	sub	r3,r4,r3
 8008ed0:	40c6983a 	sll	r3,r8,r3
 8008ed4:	1c46b03a 	or	r3,r3,r17
 8008ed8:	1806c03a 	cmpne	r3,r3,zero
 8008edc:	28e2b03a 	or	r17,r5,r3
 8008ee0:	0007883a 	mov	r3,zero
 8008ee4:	003f2306 	br	8008b74 <__alt_data_end+0xfc008b74>
 8008ee8:	0007883a 	mov	r3,zero
 8008eec:	5811883a 	mov	r8,r11
 8008ef0:	00bfffc4 	movi	r2,-1
 8008ef4:	0401ffc4 	movi	r16,2047
 8008ef8:	003e7806 	br	80088dc <__alt_data_end+0xfc0088dc>
 8008efc:	4462b03a 	or	r17,r8,r17
 8008f00:	8822c03a 	cmpne	r17,r17,zero
 8008f04:	0009883a 	mov	r4,zero
 8008f08:	003fa006 	br	8008d8c <__alt_data_end+0xfc008d8c>
 8008f0c:	4811883a 	mov	r8,r9
 8008f10:	3023883a 	mov	r17,r6
 8008f14:	0401ffc4 	movi	r16,2047
 8008f18:	003e0706 	br	8008738 <__alt_data_end+0xfc008738>
 8008f1c:	4811883a 	mov	r8,r9
 8008f20:	3023883a 	mov	r17,r6
 8008f24:	003e0406 	br	8008738 <__alt_data_end+0xfc008738>
 8008f28:	21fff804 	addi	r7,r4,-32
 8008f2c:	01400804 	movi	r5,32
 8008f30:	41ced83a 	srl	r7,r8,r7
 8008f34:	21400a26 	beq	r4,r5,8008f60 <__adddf3+0x8a4>
 8008f38:	01401004 	movi	r5,64
 8008f3c:	2909c83a 	sub	r4,r5,r4
 8008f40:	4108983a 	sll	r4,r8,r4
 8008f44:	2448b03a 	or	r4,r4,r17
 8008f48:	2008c03a 	cmpne	r4,r4,zero
 8008f4c:	3922b03a 	or	r17,r7,r4
 8008f50:	0009883a 	mov	r4,zero
 8008f54:	003f8d06 	br	8008d8c <__alt_data_end+0xfc008d8c>
 8008f58:	0007883a 	mov	r3,zero
 8008f5c:	003fdd06 	br	8008ed4 <__alt_data_end+0xfc008ed4>
 8008f60:	0009883a 	mov	r4,zero
 8008f64:	003ff706 	br	8008f44 <__alt_data_end+0xfc008f44>

08008f68 <__gedf2>:
 8008f68:	2804d53a 	srli	r2,r5,20
 8008f6c:	3806d53a 	srli	r3,r7,20
 8008f70:	02000434 	movhi	r8,16
 8008f74:	423fffc4 	addi	r8,r8,-1
 8008f78:	1081ffcc 	andi	r2,r2,2047
 8008f7c:	0241ffc4 	movi	r9,2047
 8008f80:	2a14703a 	and	r10,r5,r8
 8008f84:	18c1ffcc 	andi	r3,r3,2047
 8008f88:	3a10703a 	and	r8,r7,r8
 8008f8c:	280ad7fa 	srli	r5,r5,31
 8008f90:	380ed7fa 	srli	r7,r7,31
 8008f94:	12401d26 	beq	r2,r9,800900c <__gedf2+0xa4>
 8008f98:	0241ffc4 	movi	r9,2047
 8008f9c:	1a401226 	beq	r3,r9,8008fe8 <__gedf2+0x80>
 8008fa0:	1000081e 	bne	r2,zero,8008fc4 <__gedf2+0x5c>
 8008fa4:	2296b03a 	or	r11,r4,r10
 8008fa8:	5813003a 	cmpeq	r9,r11,zero
 8008fac:	1800091e 	bne	r3,zero,8008fd4 <__gedf2+0x6c>
 8008fb0:	3218b03a 	or	r12,r6,r8
 8008fb4:	6000071e 	bne	r12,zero,8008fd4 <__gedf2+0x6c>
 8008fb8:	0005883a 	mov	r2,zero
 8008fbc:	5800101e 	bne	r11,zero,8009000 <__gedf2+0x98>
 8008fc0:	f800283a 	ret
 8008fc4:	18000c1e 	bne	r3,zero,8008ff8 <__gedf2+0x90>
 8008fc8:	3212b03a 	or	r9,r6,r8
 8008fcc:	48000c26 	beq	r9,zero,8009000 <__gedf2+0x98>
 8008fd0:	0013883a 	mov	r9,zero
 8008fd4:	39c03fcc 	andi	r7,r7,255
 8008fd8:	48000826 	beq	r9,zero,8008ffc <__gedf2+0x94>
 8008fdc:	38000926 	beq	r7,zero,8009004 <__gedf2+0x9c>
 8008fe0:	00800044 	movi	r2,1
 8008fe4:	f800283a 	ret
 8008fe8:	3212b03a 	or	r9,r6,r8
 8008fec:	483fec26 	beq	r9,zero,8008fa0 <__alt_data_end+0xfc008fa0>
 8008ff0:	00bfff84 	movi	r2,-2
 8008ff4:	f800283a 	ret
 8008ff8:	39c03fcc 	andi	r7,r7,255
 8008ffc:	29c00626 	beq	r5,r7,8009018 <__gedf2+0xb0>
 8009000:	283ff726 	beq	r5,zero,8008fe0 <__alt_data_end+0xfc008fe0>
 8009004:	00bfffc4 	movi	r2,-1
 8009008:	f800283a 	ret
 800900c:	2292b03a 	or	r9,r4,r10
 8009010:	483fe126 	beq	r9,zero,8008f98 <__alt_data_end+0xfc008f98>
 8009014:	003ff606 	br	8008ff0 <__alt_data_end+0xfc008ff0>
 8009018:	18bff916 	blt	r3,r2,8009000 <__alt_data_end+0xfc009000>
 800901c:	10c00316 	blt	r2,r3,800902c <__gedf2+0xc4>
 8009020:	42bff736 	bltu	r8,r10,8009000 <__alt_data_end+0xfc009000>
 8009024:	52000326 	beq	r10,r8,8009034 <__gedf2+0xcc>
 8009028:	5200042e 	bgeu	r10,r8,800903c <__gedf2+0xd4>
 800902c:	283fec1e 	bne	r5,zero,8008fe0 <__alt_data_end+0xfc008fe0>
 8009030:	003ff406 	br	8009004 <__alt_data_end+0xfc009004>
 8009034:	313ff236 	bltu	r6,r4,8009000 <__alt_data_end+0xfc009000>
 8009038:	21bffc36 	bltu	r4,r6,800902c <__alt_data_end+0xfc00902c>
 800903c:	0005883a 	mov	r2,zero
 8009040:	f800283a 	ret

08009044 <__muldf3>:
 8009044:	deffee04 	addi	sp,sp,-72
 8009048:	dd000c15 	stw	r20,48(sp)
 800904c:	2828d53a 	srli	r20,r5,20
 8009050:	ddc00f15 	stw	r23,60(sp)
 8009054:	282ed7fa 	srli	r23,r5,31
 8009058:	dc000815 	stw	r16,32(sp)
 800905c:	04000434 	movhi	r16,16
 8009060:	dcc00b15 	stw	r19,44(sp)
 8009064:	843fffc4 	addi	r16,r16,-1
 8009068:	dfc01115 	stw	ra,68(sp)
 800906c:	df001015 	stw	fp,64(sp)
 8009070:	dd800e15 	stw	r22,56(sp)
 8009074:	dd400d15 	stw	r21,52(sp)
 8009078:	dc800a15 	stw	r18,40(sp)
 800907c:	dc400915 	stw	r17,36(sp)
 8009080:	a501ffcc 	andi	r20,r20,2047
 8009084:	2c20703a 	and	r16,r5,r16
 8009088:	b827883a 	mov	r19,r23
 800908c:	ba403fcc 	andi	r9,r23,255
 8009090:	a0006026 	beq	r20,zero,8009214 <__muldf3+0x1d0>
 8009094:	0081ffc4 	movi	r2,2047
 8009098:	202d883a 	mov	r22,r4
 800909c:	a0803626 	beq	r20,r2,8009178 <__muldf3+0x134>
 80090a0:	84000434 	orhi	r16,r16,16
 80090a4:	200ad77a 	srli	r5,r4,29
 80090a8:	800490fa 	slli	r2,r16,3
 80090ac:	202c90fa 	slli	r22,r4,3
 80090b0:	a53f0044 	addi	r20,r20,-1023
 80090b4:	28a0b03a 	or	r16,r5,r2
 80090b8:	002b883a 	mov	r21,zero
 80090bc:	000b883a 	mov	r5,zero
 80090c0:	3804d53a 	srli	r2,r7,20
 80090c4:	3838d7fa 	srli	fp,r7,31
 80090c8:	04400434 	movhi	r17,16
 80090cc:	8c7fffc4 	addi	r17,r17,-1
 80090d0:	1081ffcc 	andi	r2,r2,2047
 80090d4:	3025883a 	mov	r18,r6
 80090d8:	3c62703a 	and	r17,r7,r17
 80090dc:	e2803fcc 	andi	r10,fp,255
 80090e0:	10006d26 	beq	r2,zero,8009298 <__muldf3+0x254>
 80090e4:	00c1ffc4 	movi	r3,2047
 80090e8:	10c06526 	beq	r2,r3,8009280 <__muldf3+0x23c>
 80090ec:	8c400434 	orhi	r17,r17,16
 80090f0:	300ed77a 	srli	r7,r6,29
 80090f4:	880690fa 	slli	r3,r17,3
 80090f8:	302490fa 	slli	r18,r6,3
 80090fc:	10bf0044 	addi	r2,r2,-1023
 8009100:	38e2b03a 	or	r17,r7,r3
 8009104:	000f883a 	mov	r7,zero
 8009108:	a087883a 	add	r3,r20,r2
 800910c:	010003c4 	movi	r4,15
 8009110:	3d44b03a 	or	r2,r7,r21
 8009114:	e5ccf03a 	xor	r6,fp,r23
 8009118:	1a000044 	addi	r8,r3,1
 800911c:	20809b36 	bltu	r4,r2,800938c <__muldf3+0x348>
 8009120:	100490ba 	slli	r2,r2,2
 8009124:	01020074 	movhi	r4,2049
 8009128:	21244e04 	addi	r4,r4,-28360
 800912c:	1105883a 	add	r2,r2,r4
 8009130:	10800017 	ldw	r2,0(r2)
 8009134:	1000683a 	jmp	r2
 8009138:	0800938c 	andi	zero,at,590
 800913c:	08009198 	cmpnei	zero,at,582
 8009140:	08009198 	cmpnei	zero,at,582
 8009144:	08009194 	ori	zero,at,582
 8009148:	08009368 	cmpgeui	zero,at,589
 800914c:	08009368 	cmpgeui	zero,at,589
 8009150:	08009350 	cmplti	zero,at,589
 8009154:	08009194 	ori	zero,at,582
 8009158:	08009368 	cmpgeui	zero,at,589
 800915c:	08009350 	cmplti	zero,at,589
 8009160:	08009368 	cmpgeui	zero,at,589
 8009164:	08009194 	ori	zero,at,582
 8009168:	08009378 	rdprs	zero,at,589
 800916c:	08009378 	rdprs	zero,at,589
 8009170:	08009378 	rdprs	zero,at,589
 8009174:	080096d8 	cmpnei	zero,at,603
 8009178:	2404b03a 	or	r2,r4,r16
 800917c:	1000711e 	bne	r2,zero,8009344 <__muldf3+0x300>
 8009180:	05400204 	movi	r21,8
 8009184:	0021883a 	mov	r16,zero
 8009188:	002d883a 	mov	r22,zero
 800918c:	01400084 	movi	r5,2
 8009190:	003fcb06 	br	80090c0 <__alt_data_end+0xfc0090c0>
 8009194:	500d883a 	mov	r6,r10
 8009198:	00800084 	movi	r2,2
 800919c:	38805926 	beq	r7,r2,8009304 <__muldf3+0x2c0>
 80091a0:	008000c4 	movi	r2,3
 80091a4:	3881bb26 	beq	r7,r2,8009894 <__muldf3+0x850>
 80091a8:	00800044 	movi	r2,1
 80091ac:	3881961e 	bne	r7,r2,8009808 <__muldf3+0x7c4>
 80091b0:	3027883a 	mov	r19,r6
 80091b4:	0005883a 	mov	r2,zero
 80091b8:	0021883a 	mov	r16,zero
 80091bc:	002d883a 	mov	r22,zero
 80091c0:	1004953a 	slli	r2,r2,20
 80091c4:	98c03fcc 	andi	r3,r19,255
 80091c8:	04400434 	movhi	r17,16
 80091cc:	8c7fffc4 	addi	r17,r17,-1
 80091d0:	180697fa 	slli	r3,r3,31
 80091d4:	8460703a 	and	r16,r16,r17
 80091d8:	80a0b03a 	or	r16,r16,r2
 80091dc:	80c6b03a 	or	r3,r16,r3
 80091e0:	b005883a 	mov	r2,r22
 80091e4:	dfc01117 	ldw	ra,68(sp)
 80091e8:	df001017 	ldw	fp,64(sp)
 80091ec:	ddc00f17 	ldw	r23,60(sp)
 80091f0:	dd800e17 	ldw	r22,56(sp)
 80091f4:	dd400d17 	ldw	r21,52(sp)
 80091f8:	dd000c17 	ldw	r20,48(sp)
 80091fc:	dcc00b17 	ldw	r19,44(sp)
 8009200:	dc800a17 	ldw	r18,40(sp)
 8009204:	dc400917 	ldw	r17,36(sp)
 8009208:	dc000817 	ldw	r16,32(sp)
 800920c:	dec01204 	addi	sp,sp,72
 8009210:	f800283a 	ret
 8009214:	2404b03a 	or	r2,r4,r16
 8009218:	202b883a 	mov	r21,r4
 800921c:	10004426 	beq	r2,zero,8009330 <__muldf3+0x2ec>
 8009220:	80015126 	beq	r16,zero,8009768 <__muldf3+0x724>
 8009224:	8009883a 	mov	r4,r16
 8009228:	d9800715 	stw	r6,28(sp)
 800922c:	d9c00215 	stw	r7,8(sp)
 8009230:	da400415 	stw	r9,16(sp)
 8009234:	800a58c0 	call	800a58c <__clzsi2>
 8009238:	d9800717 	ldw	r6,28(sp)
 800923c:	d9c00217 	ldw	r7,8(sp)
 8009240:	da400417 	ldw	r9,16(sp)
 8009244:	113ffd44 	addi	r4,r2,-11
 8009248:	00c00704 	movi	r3,28
 800924c:	19014216 	blt	r3,r4,8009758 <__muldf3+0x714>
 8009250:	00c00744 	movi	r3,29
 8009254:	15bffe04 	addi	r22,r2,-8
 8009258:	1907c83a 	sub	r3,r3,r4
 800925c:	85a0983a 	sll	r16,r16,r22
 8009260:	a8c6d83a 	srl	r3,r21,r3
 8009264:	adac983a 	sll	r22,r21,r22
 8009268:	1c20b03a 	or	r16,r3,r16
 800926c:	1080fcc4 	addi	r2,r2,1011
 8009270:	00a9c83a 	sub	r20,zero,r2
 8009274:	002b883a 	mov	r21,zero
 8009278:	000b883a 	mov	r5,zero
 800927c:	003f9006 	br	80090c0 <__alt_data_end+0xfc0090c0>
 8009280:	3446b03a 	or	r3,r6,r17
 8009284:	1800281e 	bne	r3,zero,8009328 <__muldf3+0x2e4>
 8009288:	0023883a 	mov	r17,zero
 800928c:	0025883a 	mov	r18,zero
 8009290:	01c00084 	movi	r7,2
 8009294:	003f9c06 	br	8009108 <__alt_data_end+0xfc009108>
 8009298:	3446b03a 	or	r3,r6,r17
 800929c:	18001e26 	beq	r3,zero,8009318 <__muldf3+0x2d4>
 80092a0:	88012126 	beq	r17,zero,8009728 <__muldf3+0x6e4>
 80092a4:	8809883a 	mov	r4,r17
 80092a8:	d9400215 	stw	r5,8(sp)
 80092ac:	d9800715 	stw	r6,28(sp)
 80092b0:	da400415 	stw	r9,16(sp)
 80092b4:	da800315 	stw	r10,12(sp)
 80092b8:	800a58c0 	call	800a58c <__clzsi2>
 80092bc:	d9400217 	ldw	r5,8(sp)
 80092c0:	d9800717 	ldw	r6,28(sp)
 80092c4:	da400417 	ldw	r9,16(sp)
 80092c8:	da800317 	ldw	r10,12(sp)
 80092cc:	113ffd44 	addi	r4,r2,-11
 80092d0:	00c00704 	movi	r3,28
 80092d4:	19011016 	blt	r3,r4,8009718 <__muldf3+0x6d4>
 80092d8:	00c00744 	movi	r3,29
 80092dc:	14bffe04 	addi	r18,r2,-8
 80092e0:	1907c83a 	sub	r3,r3,r4
 80092e4:	8ca2983a 	sll	r17,r17,r18
 80092e8:	30c6d83a 	srl	r3,r6,r3
 80092ec:	34a4983a 	sll	r18,r6,r18
 80092f0:	1c62b03a 	or	r17,r3,r17
 80092f4:	1080fcc4 	addi	r2,r2,1011
 80092f8:	0085c83a 	sub	r2,zero,r2
 80092fc:	000f883a 	mov	r7,zero
 8009300:	003f8106 	br	8009108 <__alt_data_end+0xfc009108>
 8009304:	3027883a 	mov	r19,r6
 8009308:	0081ffc4 	movi	r2,2047
 800930c:	0021883a 	mov	r16,zero
 8009310:	002d883a 	mov	r22,zero
 8009314:	003faa06 	br	80091c0 <__alt_data_end+0xfc0091c0>
 8009318:	0023883a 	mov	r17,zero
 800931c:	0025883a 	mov	r18,zero
 8009320:	01c00044 	movi	r7,1
 8009324:	003f7806 	br	8009108 <__alt_data_end+0xfc009108>
 8009328:	01c000c4 	movi	r7,3
 800932c:	003f7606 	br	8009108 <__alt_data_end+0xfc009108>
 8009330:	05400104 	movi	r21,4
 8009334:	0021883a 	mov	r16,zero
 8009338:	002d883a 	mov	r22,zero
 800933c:	01400044 	movi	r5,1
 8009340:	003f5f06 	br	80090c0 <__alt_data_end+0xfc0090c0>
 8009344:	05400304 	movi	r21,12
 8009348:	014000c4 	movi	r5,3
 800934c:	003f5c06 	br	80090c0 <__alt_data_end+0xfc0090c0>
 8009350:	04000434 	movhi	r16,16
 8009354:	0027883a 	mov	r19,zero
 8009358:	843fffc4 	addi	r16,r16,-1
 800935c:	05bfffc4 	movi	r22,-1
 8009360:	0081ffc4 	movi	r2,2047
 8009364:	003f9606 	br	80091c0 <__alt_data_end+0xfc0091c0>
 8009368:	8023883a 	mov	r17,r16
 800936c:	b025883a 	mov	r18,r22
 8009370:	280f883a 	mov	r7,r5
 8009374:	003f8806 	br	8009198 <__alt_data_end+0xfc009198>
 8009378:	8023883a 	mov	r17,r16
 800937c:	b025883a 	mov	r18,r22
 8009380:	480d883a 	mov	r6,r9
 8009384:	280f883a 	mov	r7,r5
 8009388:	003f8306 	br	8009198 <__alt_data_end+0xfc009198>
 800938c:	b026d43a 	srli	r19,r22,16
 8009390:	902ed43a 	srli	r23,r18,16
 8009394:	b5bfffcc 	andi	r22,r22,65535
 8009398:	94bfffcc 	andi	r18,r18,65535
 800939c:	b00b883a 	mov	r5,r22
 80093a0:	9009883a 	mov	r4,r18
 80093a4:	d8c00515 	stw	r3,20(sp)
 80093a8:	d9800715 	stw	r6,28(sp)
 80093ac:	da000615 	stw	r8,24(sp)
 80093b0:	80071600 	call	8007160 <__mulsi3>
 80093b4:	980b883a 	mov	r5,r19
 80093b8:	9009883a 	mov	r4,r18
 80093bc:	1029883a 	mov	r20,r2
 80093c0:	80071600 	call	8007160 <__mulsi3>
 80093c4:	b80b883a 	mov	r5,r23
 80093c8:	9809883a 	mov	r4,r19
 80093cc:	102b883a 	mov	r21,r2
 80093d0:	80071600 	call	8007160 <__mulsi3>
 80093d4:	b809883a 	mov	r4,r23
 80093d8:	b00b883a 	mov	r5,r22
 80093dc:	1039883a 	mov	fp,r2
 80093e0:	80071600 	call	8007160 <__mulsi3>
 80093e4:	a008d43a 	srli	r4,r20,16
 80093e8:	1545883a 	add	r2,r2,r21
 80093ec:	d8c00517 	ldw	r3,20(sp)
 80093f0:	2085883a 	add	r2,r4,r2
 80093f4:	d9800717 	ldw	r6,28(sp)
 80093f8:	da000617 	ldw	r8,24(sp)
 80093fc:	1540022e 	bgeu	r2,r21,8009408 <__muldf3+0x3c4>
 8009400:	01000074 	movhi	r4,1
 8009404:	e139883a 	add	fp,fp,r4
 8009408:	100e943a 	slli	r7,r2,16
 800940c:	1004d43a 	srli	r2,r2,16
 8009410:	882ad43a 	srli	r21,r17,16
 8009414:	a53fffcc 	andi	r20,r20,65535
 8009418:	8c7fffcc 	andi	r17,r17,65535
 800941c:	3d29883a 	add	r20,r7,r20
 8009420:	b00b883a 	mov	r5,r22
 8009424:	8809883a 	mov	r4,r17
 8009428:	d8c00515 	stw	r3,20(sp)
 800942c:	d9800715 	stw	r6,28(sp)
 8009430:	da000615 	stw	r8,24(sp)
 8009434:	dd000115 	stw	r20,4(sp)
 8009438:	d8800015 	stw	r2,0(sp)
 800943c:	80071600 	call	8007160 <__mulsi3>
 8009440:	980b883a 	mov	r5,r19
 8009444:	8809883a 	mov	r4,r17
 8009448:	d8800215 	stw	r2,8(sp)
 800944c:	80071600 	call	8007160 <__mulsi3>
 8009450:	9809883a 	mov	r4,r19
 8009454:	a80b883a 	mov	r5,r21
 8009458:	1029883a 	mov	r20,r2
 800945c:	80071600 	call	8007160 <__mulsi3>
 8009460:	b00b883a 	mov	r5,r22
 8009464:	a809883a 	mov	r4,r21
 8009468:	d8800415 	stw	r2,16(sp)
 800946c:	80071600 	call	8007160 <__mulsi3>
 8009470:	d9c00217 	ldw	r7,8(sp)
 8009474:	1505883a 	add	r2,r2,r20
 8009478:	d8c00517 	ldw	r3,20(sp)
 800947c:	3826d43a 	srli	r19,r7,16
 8009480:	d9800717 	ldw	r6,28(sp)
 8009484:	da000617 	ldw	r8,24(sp)
 8009488:	9885883a 	add	r2,r19,r2
 800948c:	da400417 	ldw	r9,16(sp)
 8009490:	1500022e 	bgeu	r2,r20,800949c <__muldf3+0x458>
 8009494:	01000074 	movhi	r4,1
 8009498:	4913883a 	add	r9,r9,r4
 800949c:	1028d43a 	srli	r20,r2,16
 80094a0:	1004943a 	slli	r2,r2,16
 80094a4:	802cd43a 	srli	r22,r16,16
 80094a8:	843fffcc 	andi	r16,r16,65535
 80094ac:	3cffffcc 	andi	r19,r7,65535
 80094b0:	9009883a 	mov	r4,r18
 80094b4:	800b883a 	mov	r5,r16
 80094b8:	a269883a 	add	r20,r20,r9
 80094bc:	d8c00515 	stw	r3,20(sp)
 80094c0:	d9800715 	stw	r6,28(sp)
 80094c4:	da000615 	stw	r8,24(sp)
 80094c8:	14e7883a 	add	r19,r2,r19
 80094cc:	80071600 	call	8007160 <__mulsi3>
 80094d0:	9009883a 	mov	r4,r18
 80094d4:	b00b883a 	mov	r5,r22
 80094d8:	d8800315 	stw	r2,12(sp)
 80094dc:	80071600 	call	8007160 <__mulsi3>
 80094e0:	b809883a 	mov	r4,r23
 80094e4:	b00b883a 	mov	r5,r22
 80094e8:	d8800215 	stw	r2,8(sp)
 80094ec:	80071600 	call	8007160 <__mulsi3>
 80094f0:	b80b883a 	mov	r5,r23
 80094f4:	8009883a 	mov	r4,r16
 80094f8:	d8800415 	stw	r2,16(sp)
 80094fc:	80071600 	call	8007160 <__mulsi3>
 8009500:	da800317 	ldw	r10,12(sp)
 8009504:	d9c00217 	ldw	r7,8(sp)
 8009508:	d9000017 	ldw	r4,0(sp)
 800950c:	502ed43a 	srli	r23,r10,16
 8009510:	11c5883a 	add	r2,r2,r7
 8009514:	24e5883a 	add	r18,r4,r19
 8009518:	b885883a 	add	r2,r23,r2
 800951c:	d8c00517 	ldw	r3,20(sp)
 8009520:	d9800717 	ldw	r6,28(sp)
 8009524:	da000617 	ldw	r8,24(sp)
 8009528:	da400417 	ldw	r9,16(sp)
 800952c:	11c0022e 	bgeu	r2,r7,8009538 <__muldf3+0x4f4>
 8009530:	01000074 	movhi	r4,1
 8009534:	4913883a 	add	r9,r9,r4
 8009538:	100ed43a 	srli	r7,r2,16
 800953c:	1004943a 	slli	r2,r2,16
 8009540:	55ffffcc 	andi	r23,r10,65535
 8009544:	3a53883a 	add	r9,r7,r9
 8009548:	8809883a 	mov	r4,r17
 800954c:	800b883a 	mov	r5,r16
 8009550:	d8c00515 	stw	r3,20(sp)
 8009554:	d9800715 	stw	r6,28(sp)
 8009558:	da000615 	stw	r8,24(sp)
 800955c:	da400415 	stw	r9,16(sp)
 8009560:	15ef883a 	add	r23,r2,r23
 8009564:	80071600 	call	8007160 <__mulsi3>
 8009568:	8809883a 	mov	r4,r17
 800956c:	b00b883a 	mov	r5,r22
 8009570:	d8800215 	stw	r2,8(sp)
 8009574:	80071600 	call	8007160 <__mulsi3>
 8009578:	b00b883a 	mov	r5,r22
 800957c:	a809883a 	mov	r4,r21
 8009580:	d8800315 	stw	r2,12(sp)
 8009584:	80071600 	call	8007160 <__mulsi3>
 8009588:	8009883a 	mov	r4,r16
 800958c:	a80b883a 	mov	r5,r21
 8009590:	1023883a 	mov	r17,r2
 8009594:	80071600 	call	8007160 <__mulsi3>
 8009598:	d9c00217 	ldw	r7,8(sp)
 800959c:	da800317 	ldw	r10,12(sp)
 80095a0:	d8c00517 	ldw	r3,20(sp)
 80095a4:	3808d43a 	srli	r4,r7,16
 80095a8:	1285883a 	add	r2,r2,r10
 80095ac:	d9800717 	ldw	r6,28(sp)
 80095b0:	2085883a 	add	r2,r4,r2
 80095b4:	da000617 	ldw	r8,24(sp)
 80095b8:	da400417 	ldw	r9,16(sp)
 80095bc:	1280022e 	bgeu	r2,r10,80095c8 <__muldf3+0x584>
 80095c0:	01000074 	movhi	r4,1
 80095c4:	8923883a 	add	r17,r17,r4
 80095c8:	1008943a 	slli	r4,r2,16
 80095cc:	39ffffcc 	andi	r7,r7,65535
 80095d0:	e4b9883a 	add	fp,fp,r18
 80095d4:	21cf883a 	add	r7,r4,r7
 80095d8:	e4e7803a 	cmpltu	r19,fp,r19
 80095dc:	3d0f883a 	add	r7,r7,r20
 80095e0:	bf39883a 	add	fp,r23,fp
 80095e4:	99c9883a 	add	r4,r19,r7
 80095e8:	e5ef803a 	cmpltu	r23,fp,r23
 80095ec:	490b883a 	add	r5,r9,r4
 80095f0:	1004d43a 	srli	r2,r2,16
 80095f4:	b965883a 	add	r18,r23,r5
 80095f8:	24c9803a 	cmpltu	r4,r4,r19
 80095fc:	3d29803a 	cmpltu	r20,r7,r20
 8009600:	a128b03a 	or	r20,r20,r4
 8009604:	95ef803a 	cmpltu	r23,r18,r23
 8009608:	2a53803a 	cmpltu	r9,r5,r9
 800960c:	a0a9883a 	add	r20,r20,r2
 8009610:	4deeb03a 	or	r23,r9,r23
 8009614:	a5ef883a 	add	r23,r20,r23
 8009618:	bc63883a 	add	r17,r23,r17
 800961c:	e004927a 	slli	r2,fp,9
 8009620:	d9000117 	ldw	r4,4(sp)
 8009624:	882e927a 	slli	r23,r17,9
 8009628:	9022d5fa 	srli	r17,r18,23
 800962c:	e038d5fa 	srli	fp,fp,23
 8009630:	1104b03a 	or	r2,r2,r4
 8009634:	9024927a 	slli	r18,r18,9
 8009638:	1004c03a 	cmpne	r2,r2,zero
 800963c:	bc62b03a 	or	r17,r23,r17
 8009640:	1738b03a 	or	fp,r2,fp
 8009644:	8880402c 	andhi	r2,r17,256
 8009648:	e4a4b03a 	or	r18,fp,r18
 800964c:	10000726 	beq	r2,zero,800966c <__muldf3+0x628>
 8009650:	9006d07a 	srli	r3,r18,1
 8009654:	880497fa 	slli	r2,r17,31
 8009658:	9480004c 	andi	r18,r18,1
 800965c:	8822d07a 	srli	r17,r17,1
 8009660:	1ca4b03a 	or	r18,r3,r18
 8009664:	14a4b03a 	or	r18,r2,r18
 8009668:	4007883a 	mov	r3,r8
 800966c:	1880ffc4 	addi	r2,r3,1023
 8009670:	0080460e 	bge	zero,r2,800978c <__muldf3+0x748>
 8009674:	910001cc 	andi	r4,r18,7
 8009678:	20000726 	beq	r4,zero,8009698 <__muldf3+0x654>
 800967c:	910003cc 	andi	r4,r18,15
 8009680:	01400104 	movi	r5,4
 8009684:	21400426 	beq	r4,r5,8009698 <__muldf3+0x654>
 8009688:	9149883a 	add	r4,r18,r5
 800968c:	24a5803a 	cmpltu	r18,r4,r18
 8009690:	8ca3883a 	add	r17,r17,r18
 8009694:	2025883a 	mov	r18,r4
 8009698:	8900402c 	andhi	r4,r17,256
 800969c:	20000426 	beq	r4,zero,80096b0 <__muldf3+0x66c>
 80096a0:	18810004 	addi	r2,r3,1024
 80096a4:	00ffc034 	movhi	r3,65280
 80096a8:	18ffffc4 	addi	r3,r3,-1
 80096ac:	88e2703a 	and	r17,r17,r3
 80096b0:	00c1ff84 	movi	r3,2046
 80096b4:	18bf1316 	blt	r3,r2,8009304 <__alt_data_end+0xfc009304>
 80096b8:	882c977a 	slli	r22,r17,29
 80096bc:	9024d0fa 	srli	r18,r18,3
 80096c0:	8822927a 	slli	r17,r17,9
 80096c4:	1081ffcc 	andi	r2,r2,2047
 80096c8:	b4acb03a 	or	r22,r22,r18
 80096cc:	8820d33a 	srli	r16,r17,12
 80096d0:	3027883a 	mov	r19,r6
 80096d4:	003eba06 	br	80091c0 <__alt_data_end+0xfc0091c0>
 80096d8:	8080022c 	andhi	r2,r16,8
 80096dc:	10000926 	beq	r2,zero,8009704 <__muldf3+0x6c0>
 80096e0:	8880022c 	andhi	r2,r17,8
 80096e4:	1000071e 	bne	r2,zero,8009704 <__muldf3+0x6c0>
 80096e8:	00800434 	movhi	r2,16
 80096ec:	8c000234 	orhi	r16,r17,8
 80096f0:	10bfffc4 	addi	r2,r2,-1
 80096f4:	e027883a 	mov	r19,fp
 80096f8:	80a0703a 	and	r16,r16,r2
 80096fc:	902d883a 	mov	r22,r18
 8009700:	003f1706 	br	8009360 <__alt_data_end+0xfc009360>
 8009704:	00800434 	movhi	r2,16
 8009708:	84000234 	orhi	r16,r16,8
 800970c:	10bfffc4 	addi	r2,r2,-1
 8009710:	80a0703a 	and	r16,r16,r2
 8009714:	003f1206 	br	8009360 <__alt_data_end+0xfc009360>
 8009718:	147ff604 	addi	r17,r2,-40
 800971c:	3462983a 	sll	r17,r6,r17
 8009720:	0025883a 	mov	r18,zero
 8009724:	003ef306 	br	80092f4 <__alt_data_end+0xfc0092f4>
 8009728:	3009883a 	mov	r4,r6
 800972c:	d9400215 	stw	r5,8(sp)
 8009730:	d9800715 	stw	r6,28(sp)
 8009734:	da400415 	stw	r9,16(sp)
 8009738:	da800315 	stw	r10,12(sp)
 800973c:	800a58c0 	call	800a58c <__clzsi2>
 8009740:	10800804 	addi	r2,r2,32
 8009744:	da800317 	ldw	r10,12(sp)
 8009748:	da400417 	ldw	r9,16(sp)
 800974c:	d9800717 	ldw	r6,28(sp)
 8009750:	d9400217 	ldw	r5,8(sp)
 8009754:	003edd06 	br	80092cc <__alt_data_end+0xfc0092cc>
 8009758:	143ff604 	addi	r16,r2,-40
 800975c:	ac20983a 	sll	r16,r21,r16
 8009760:	002d883a 	mov	r22,zero
 8009764:	003ec106 	br	800926c <__alt_data_end+0xfc00926c>
 8009768:	d9800715 	stw	r6,28(sp)
 800976c:	d9c00215 	stw	r7,8(sp)
 8009770:	da400415 	stw	r9,16(sp)
 8009774:	800a58c0 	call	800a58c <__clzsi2>
 8009778:	10800804 	addi	r2,r2,32
 800977c:	da400417 	ldw	r9,16(sp)
 8009780:	d9c00217 	ldw	r7,8(sp)
 8009784:	d9800717 	ldw	r6,28(sp)
 8009788:	003eae06 	br	8009244 <__alt_data_end+0xfc009244>
 800978c:	00c00044 	movi	r3,1
 8009790:	1887c83a 	sub	r3,r3,r2
 8009794:	01000e04 	movi	r4,56
 8009798:	20fe8516 	blt	r4,r3,80091b0 <__alt_data_end+0xfc0091b0>
 800979c:	010007c4 	movi	r4,31
 80097a0:	20c01b16 	blt	r4,r3,8009810 <__muldf3+0x7cc>
 80097a4:	00800804 	movi	r2,32
 80097a8:	10c5c83a 	sub	r2,r2,r3
 80097ac:	888a983a 	sll	r5,r17,r2
 80097b0:	90c8d83a 	srl	r4,r18,r3
 80097b4:	9084983a 	sll	r2,r18,r2
 80097b8:	88e2d83a 	srl	r17,r17,r3
 80097bc:	2906b03a 	or	r3,r5,r4
 80097c0:	1004c03a 	cmpne	r2,r2,zero
 80097c4:	1886b03a 	or	r3,r3,r2
 80097c8:	188001cc 	andi	r2,r3,7
 80097cc:	10000726 	beq	r2,zero,80097ec <__muldf3+0x7a8>
 80097d0:	188003cc 	andi	r2,r3,15
 80097d4:	01000104 	movi	r4,4
 80097d8:	11000426 	beq	r2,r4,80097ec <__muldf3+0x7a8>
 80097dc:	1805883a 	mov	r2,r3
 80097e0:	10c00104 	addi	r3,r2,4
 80097e4:	1885803a 	cmpltu	r2,r3,r2
 80097e8:	88a3883a 	add	r17,r17,r2
 80097ec:	8880202c 	andhi	r2,r17,128
 80097f0:	10001c26 	beq	r2,zero,8009864 <__muldf3+0x820>
 80097f4:	3027883a 	mov	r19,r6
 80097f8:	00800044 	movi	r2,1
 80097fc:	0021883a 	mov	r16,zero
 8009800:	002d883a 	mov	r22,zero
 8009804:	003e6e06 	br	80091c0 <__alt_data_end+0xfc0091c0>
 8009808:	4007883a 	mov	r3,r8
 800980c:	003f9706 	br	800966c <__alt_data_end+0xfc00966c>
 8009810:	017ff844 	movi	r5,-31
 8009814:	2885c83a 	sub	r2,r5,r2
 8009818:	888ad83a 	srl	r5,r17,r2
 800981c:	00800804 	movi	r2,32
 8009820:	18801a26 	beq	r3,r2,800988c <__muldf3+0x848>
 8009824:	01001004 	movi	r4,64
 8009828:	20c7c83a 	sub	r3,r4,r3
 800982c:	88e2983a 	sll	r17,r17,r3
 8009830:	8ca4b03a 	or	r18,r17,r18
 8009834:	9004c03a 	cmpne	r2,r18,zero
 8009838:	2884b03a 	or	r2,r5,r2
 800983c:	144001cc 	andi	r17,r2,7
 8009840:	88000d1e 	bne	r17,zero,8009878 <__muldf3+0x834>
 8009844:	0021883a 	mov	r16,zero
 8009848:	102cd0fa 	srli	r22,r2,3
 800984c:	3027883a 	mov	r19,r6
 8009850:	0005883a 	mov	r2,zero
 8009854:	b46cb03a 	or	r22,r22,r17
 8009858:	003e5906 	br	80091c0 <__alt_data_end+0xfc0091c0>
 800985c:	1007883a 	mov	r3,r2
 8009860:	0023883a 	mov	r17,zero
 8009864:	8820927a 	slli	r16,r17,9
 8009868:	1805883a 	mov	r2,r3
 800986c:	8822977a 	slli	r17,r17,29
 8009870:	8020d33a 	srli	r16,r16,12
 8009874:	003ff406 	br	8009848 <__alt_data_end+0xfc009848>
 8009878:	10c003cc 	andi	r3,r2,15
 800987c:	01000104 	movi	r4,4
 8009880:	193ff626 	beq	r3,r4,800985c <__alt_data_end+0xfc00985c>
 8009884:	0023883a 	mov	r17,zero
 8009888:	003fd506 	br	80097e0 <__alt_data_end+0xfc0097e0>
 800988c:	0023883a 	mov	r17,zero
 8009890:	003fe706 	br	8009830 <__alt_data_end+0xfc009830>
 8009894:	00800434 	movhi	r2,16
 8009898:	8c000234 	orhi	r16,r17,8
 800989c:	10bfffc4 	addi	r2,r2,-1
 80098a0:	3027883a 	mov	r19,r6
 80098a4:	80a0703a 	and	r16,r16,r2
 80098a8:	902d883a 	mov	r22,r18
 80098ac:	003eac06 	br	8009360 <__alt_data_end+0xfc009360>

080098b0 <__subdf3>:
 80098b0:	02000434 	movhi	r8,16
 80098b4:	423fffc4 	addi	r8,r8,-1
 80098b8:	defffb04 	addi	sp,sp,-20
 80098bc:	2a14703a 	and	r10,r5,r8
 80098c0:	3812d53a 	srli	r9,r7,20
 80098c4:	3a10703a 	and	r8,r7,r8
 80098c8:	2006d77a 	srli	r3,r4,29
 80098cc:	3004d77a 	srli	r2,r6,29
 80098d0:	dc000015 	stw	r16,0(sp)
 80098d4:	501490fa 	slli	r10,r10,3
 80098d8:	2820d53a 	srli	r16,r5,20
 80098dc:	401090fa 	slli	r8,r8,3
 80098e0:	dc800215 	stw	r18,8(sp)
 80098e4:	dc400115 	stw	r17,4(sp)
 80098e8:	dfc00415 	stw	ra,16(sp)
 80098ec:	202290fa 	slli	r17,r4,3
 80098f0:	dcc00315 	stw	r19,12(sp)
 80098f4:	4a41ffcc 	andi	r9,r9,2047
 80098f8:	0101ffc4 	movi	r4,2047
 80098fc:	2824d7fa 	srli	r18,r5,31
 8009900:	8401ffcc 	andi	r16,r16,2047
 8009904:	50c6b03a 	or	r3,r10,r3
 8009908:	380ed7fa 	srli	r7,r7,31
 800990c:	408ab03a 	or	r5,r8,r2
 8009910:	300c90fa 	slli	r6,r6,3
 8009914:	49009626 	beq	r9,r4,8009b70 <__subdf3+0x2c0>
 8009918:	39c0005c 	xori	r7,r7,1
 800991c:	8245c83a 	sub	r2,r16,r9
 8009920:	3c807426 	beq	r7,r18,8009af4 <__subdf3+0x244>
 8009924:	0080af0e 	bge	zero,r2,8009be4 <__subdf3+0x334>
 8009928:	48002a1e 	bne	r9,zero,80099d4 <__subdf3+0x124>
 800992c:	2988b03a 	or	r4,r5,r6
 8009930:	20009a1e 	bne	r4,zero,8009b9c <__subdf3+0x2ec>
 8009934:	888001cc 	andi	r2,r17,7
 8009938:	10000726 	beq	r2,zero,8009958 <__subdf3+0xa8>
 800993c:	888003cc 	andi	r2,r17,15
 8009940:	01000104 	movi	r4,4
 8009944:	11000426 	beq	r2,r4,8009958 <__subdf3+0xa8>
 8009948:	890b883a 	add	r5,r17,r4
 800994c:	2c63803a 	cmpltu	r17,r5,r17
 8009950:	1c47883a 	add	r3,r3,r17
 8009954:	2823883a 	mov	r17,r5
 8009958:	1880202c 	andhi	r2,r3,128
 800995c:	10005926 	beq	r2,zero,8009ac4 <__subdf3+0x214>
 8009960:	84000044 	addi	r16,r16,1
 8009964:	0081ffc4 	movi	r2,2047
 8009968:	8080be26 	beq	r16,r2,8009c64 <__subdf3+0x3b4>
 800996c:	017fe034 	movhi	r5,65408
 8009970:	297fffc4 	addi	r5,r5,-1
 8009974:	1946703a 	and	r3,r3,r5
 8009978:	1804977a 	slli	r2,r3,29
 800997c:	1806927a 	slli	r3,r3,9
 8009980:	8822d0fa 	srli	r17,r17,3
 8009984:	8401ffcc 	andi	r16,r16,2047
 8009988:	180ad33a 	srli	r5,r3,12
 800998c:	9100004c 	andi	r4,r18,1
 8009990:	1444b03a 	or	r2,r2,r17
 8009994:	80c1ffcc 	andi	r3,r16,2047
 8009998:	1820953a 	slli	r16,r3,20
 800999c:	20c03fcc 	andi	r3,r4,255
 80099a0:	180897fa 	slli	r4,r3,31
 80099a4:	00c00434 	movhi	r3,16
 80099a8:	18ffffc4 	addi	r3,r3,-1
 80099ac:	28c6703a 	and	r3,r5,r3
 80099b0:	1c06b03a 	or	r3,r3,r16
 80099b4:	1906b03a 	or	r3,r3,r4
 80099b8:	dfc00417 	ldw	ra,16(sp)
 80099bc:	dcc00317 	ldw	r19,12(sp)
 80099c0:	dc800217 	ldw	r18,8(sp)
 80099c4:	dc400117 	ldw	r17,4(sp)
 80099c8:	dc000017 	ldw	r16,0(sp)
 80099cc:	dec00504 	addi	sp,sp,20
 80099d0:	f800283a 	ret
 80099d4:	0101ffc4 	movi	r4,2047
 80099d8:	813fd626 	beq	r16,r4,8009934 <__alt_data_end+0xfc009934>
 80099dc:	29402034 	orhi	r5,r5,128
 80099e0:	01000e04 	movi	r4,56
 80099e4:	2080a316 	blt	r4,r2,8009c74 <__subdf3+0x3c4>
 80099e8:	010007c4 	movi	r4,31
 80099ec:	2080c616 	blt	r4,r2,8009d08 <__subdf3+0x458>
 80099f0:	01000804 	movi	r4,32
 80099f4:	2089c83a 	sub	r4,r4,r2
 80099f8:	2910983a 	sll	r8,r5,r4
 80099fc:	308ed83a 	srl	r7,r6,r2
 8009a00:	3108983a 	sll	r4,r6,r4
 8009a04:	2884d83a 	srl	r2,r5,r2
 8009a08:	41ccb03a 	or	r6,r8,r7
 8009a0c:	2008c03a 	cmpne	r4,r4,zero
 8009a10:	310cb03a 	or	r6,r6,r4
 8009a14:	898dc83a 	sub	r6,r17,r6
 8009a18:	89a3803a 	cmpltu	r17,r17,r6
 8009a1c:	1887c83a 	sub	r3,r3,r2
 8009a20:	1c47c83a 	sub	r3,r3,r17
 8009a24:	3023883a 	mov	r17,r6
 8009a28:	1880202c 	andhi	r2,r3,128
 8009a2c:	10002326 	beq	r2,zero,8009abc <__subdf3+0x20c>
 8009a30:	04c02034 	movhi	r19,128
 8009a34:	9cffffc4 	addi	r19,r19,-1
 8009a38:	1ce6703a 	and	r19,r3,r19
 8009a3c:	98007a26 	beq	r19,zero,8009c28 <__subdf3+0x378>
 8009a40:	9809883a 	mov	r4,r19
 8009a44:	800a58c0 	call	800a58c <__clzsi2>
 8009a48:	113ffe04 	addi	r4,r2,-8
 8009a4c:	00c007c4 	movi	r3,31
 8009a50:	19007b16 	blt	r3,r4,8009c40 <__subdf3+0x390>
 8009a54:	00800804 	movi	r2,32
 8009a58:	1105c83a 	sub	r2,r2,r4
 8009a5c:	8884d83a 	srl	r2,r17,r2
 8009a60:	9906983a 	sll	r3,r19,r4
 8009a64:	8922983a 	sll	r17,r17,r4
 8009a68:	10c4b03a 	or	r2,r2,r3
 8009a6c:	24007816 	blt	r4,r16,8009c50 <__subdf3+0x3a0>
 8009a70:	2421c83a 	sub	r16,r4,r16
 8009a74:	80c00044 	addi	r3,r16,1
 8009a78:	010007c4 	movi	r4,31
 8009a7c:	20c09516 	blt	r4,r3,8009cd4 <__subdf3+0x424>
 8009a80:	01400804 	movi	r5,32
 8009a84:	28cbc83a 	sub	r5,r5,r3
 8009a88:	88c8d83a 	srl	r4,r17,r3
 8009a8c:	8962983a 	sll	r17,r17,r5
 8009a90:	114a983a 	sll	r5,r2,r5
 8009a94:	10c6d83a 	srl	r3,r2,r3
 8009a98:	8804c03a 	cmpne	r2,r17,zero
 8009a9c:	290ab03a 	or	r5,r5,r4
 8009aa0:	28a2b03a 	or	r17,r5,r2
 8009aa4:	0021883a 	mov	r16,zero
 8009aa8:	003fa206 	br	8009934 <__alt_data_end+0xfc009934>
 8009aac:	2090b03a 	or	r8,r4,r2
 8009ab0:	40018e26 	beq	r8,zero,800a0ec <__subdf3+0x83c>
 8009ab4:	1007883a 	mov	r3,r2
 8009ab8:	2023883a 	mov	r17,r4
 8009abc:	888001cc 	andi	r2,r17,7
 8009ac0:	103f9e1e 	bne	r2,zero,800993c <__alt_data_end+0xfc00993c>
 8009ac4:	1804977a 	slli	r2,r3,29
 8009ac8:	8822d0fa 	srli	r17,r17,3
 8009acc:	1810d0fa 	srli	r8,r3,3
 8009ad0:	9100004c 	andi	r4,r18,1
 8009ad4:	1444b03a 	or	r2,r2,r17
 8009ad8:	00c1ffc4 	movi	r3,2047
 8009adc:	80c02826 	beq	r16,r3,8009b80 <__subdf3+0x2d0>
 8009ae0:	01400434 	movhi	r5,16
 8009ae4:	297fffc4 	addi	r5,r5,-1
 8009ae8:	80e0703a 	and	r16,r16,r3
 8009aec:	414a703a 	and	r5,r8,r5
 8009af0:	003fa806 	br	8009994 <__alt_data_end+0xfc009994>
 8009af4:	0080630e 	bge	zero,r2,8009c84 <__subdf3+0x3d4>
 8009af8:	48003026 	beq	r9,zero,8009bbc <__subdf3+0x30c>
 8009afc:	0101ffc4 	movi	r4,2047
 8009b00:	813f8c26 	beq	r16,r4,8009934 <__alt_data_end+0xfc009934>
 8009b04:	29402034 	orhi	r5,r5,128
 8009b08:	01000e04 	movi	r4,56
 8009b0c:	2080a90e 	bge	r4,r2,8009db4 <__subdf3+0x504>
 8009b10:	298cb03a 	or	r6,r5,r6
 8009b14:	3012c03a 	cmpne	r9,r6,zero
 8009b18:	0005883a 	mov	r2,zero
 8009b1c:	4c53883a 	add	r9,r9,r17
 8009b20:	4c63803a 	cmpltu	r17,r9,r17
 8009b24:	10c7883a 	add	r3,r2,r3
 8009b28:	88c7883a 	add	r3,r17,r3
 8009b2c:	4823883a 	mov	r17,r9
 8009b30:	1880202c 	andhi	r2,r3,128
 8009b34:	1000d026 	beq	r2,zero,8009e78 <__subdf3+0x5c8>
 8009b38:	84000044 	addi	r16,r16,1
 8009b3c:	0081ffc4 	movi	r2,2047
 8009b40:	8080fe26 	beq	r16,r2,8009f3c <__subdf3+0x68c>
 8009b44:	00bfe034 	movhi	r2,65408
 8009b48:	10bfffc4 	addi	r2,r2,-1
 8009b4c:	1886703a 	and	r3,r3,r2
 8009b50:	880ad07a 	srli	r5,r17,1
 8009b54:	180497fa 	slli	r2,r3,31
 8009b58:	8900004c 	andi	r4,r17,1
 8009b5c:	2922b03a 	or	r17,r5,r4
 8009b60:	1806d07a 	srli	r3,r3,1
 8009b64:	1462b03a 	or	r17,r2,r17
 8009b68:	3825883a 	mov	r18,r7
 8009b6c:	003f7106 	br	8009934 <__alt_data_end+0xfc009934>
 8009b70:	2984b03a 	or	r2,r5,r6
 8009b74:	103f6826 	beq	r2,zero,8009918 <__alt_data_end+0xfc009918>
 8009b78:	39c03fcc 	andi	r7,r7,255
 8009b7c:	003f6706 	br	800991c <__alt_data_end+0xfc00991c>
 8009b80:	4086b03a 	or	r3,r8,r2
 8009b84:	18015226 	beq	r3,zero,800a0d0 <__subdf3+0x820>
 8009b88:	00c00434 	movhi	r3,16
 8009b8c:	41400234 	orhi	r5,r8,8
 8009b90:	18ffffc4 	addi	r3,r3,-1
 8009b94:	28ca703a 	and	r5,r5,r3
 8009b98:	003f7e06 	br	8009994 <__alt_data_end+0xfc009994>
 8009b9c:	10bfffc4 	addi	r2,r2,-1
 8009ba0:	1000491e 	bne	r2,zero,8009cc8 <__subdf3+0x418>
 8009ba4:	898fc83a 	sub	r7,r17,r6
 8009ba8:	89e3803a 	cmpltu	r17,r17,r7
 8009bac:	1947c83a 	sub	r3,r3,r5
 8009bb0:	1c47c83a 	sub	r3,r3,r17
 8009bb4:	3823883a 	mov	r17,r7
 8009bb8:	003f9b06 	br	8009a28 <__alt_data_end+0xfc009a28>
 8009bbc:	2988b03a 	or	r4,r5,r6
 8009bc0:	203f5c26 	beq	r4,zero,8009934 <__alt_data_end+0xfc009934>
 8009bc4:	10bfffc4 	addi	r2,r2,-1
 8009bc8:	1000931e 	bne	r2,zero,8009e18 <__subdf3+0x568>
 8009bcc:	898d883a 	add	r6,r17,r6
 8009bd0:	3463803a 	cmpltu	r17,r6,r17
 8009bd4:	1947883a 	add	r3,r3,r5
 8009bd8:	88c7883a 	add	r3,r17,r3
 8009bdc:	3023883a 	mov	r17,r6
 8009be0:	003fd306 	br	8009b30 <__alt_data_end+0xfc009b30>
 8009be4:	1000541e 	bne	r2,zero,8009d38 <__subdf3+0x488>
 8009be8:	80800044 	addi	r2,r16,1
 8009bec:	1081ffcc 	andi	r2,r2,2047
 8009bf0:	01000044 	movi	r4,1
 8009bf4:	2080a20e 	bge	r4,r2,8009e80 <__subdf3+0x5d0>
 8009bf8:	8989c83a 	sub	r4,r17,r6
 8009bfc:	8905803a 	cmpltu	r2,r17,r4
 8009c00:	1967c83a 	sub	r19,r3,r5
 8009c04:	98a7c83a 	sub	r19,r19,r2
 8009c08:	9880202c 	andhi	r2,r19,128
 8009c0c:	10006326 	beq	r2,zero,8009d9c <__subdf3+0x4ec>
 8009c10:	3463c83a 	sub	r17,r6,r17
 8009c14:	28c7c83a 	sub	r3,r5,r3
 8009c18:	344d803a 	cmpltu	r6,r6,r17
 8009c1c:	19a7c83a 	sub	r19,r3,r6
 8009c20:	3825883a 	mov	r18,r7
 8009c24:	983f861e 	bne	r19,zero,8009a40 <__alt_data_end+0xfc009a40>
 8009c28:	8809883a 	mov	r4,r17
 8009c2c:	800a58c0 	call	800a58c <__clzsi2>
 8009c30:	10800804 	addi	r2,r2,32
 8009c34:	113ffe04 	addi	r4,r2,-8
 8009c38:	00c007c4 	movi	r3,31
 8009c3c:	193f850e 	bge	r3,r4,8009a54 <__alt_data_end+0xfc009a54>
 8009c40:	10bff604 	addi	r2,r2,-40
 8009c44:	8884983a 	sll	r2,r17,r2
 8009c48:	0023883a 	mov	r17,zero
 8009c4c:	243f880e 	bge	r4,r16,8009a70 <__alt_data_end+0xfc009a70>
 8009c50:	00ffe034 	movhi	r3,65408
 8009c54:	18ffffc4 	addi	r3,r3,-1
 8009c58:	8121c83a 	sub	r16,r16,r4
 8009c5c:	10c6703a 	and	r3,r2,r3
 8009c60:	003f3406 	br	8009934 <__alt_data_end+0xfc009934>
 8009c64:	9100004c 	andi	r4,r18,1
 8009c68:	000b883a 	mov	r5,zero
 8009c6c:	0005883a 	mov	r2,zero
 8009c70:	003f4806 	br	8009994 <__alt_data_end+0xfc009994>
 8009c74:	298cb03a 	or	r6,r5,r6
 8009c78:	300cc03a 	cmpne	r6,r6,zero
 8009c7c:	0005883a 	mov	r2,zero
 8009c80:	003f6406 	br	8009a14 <__alt_data_end+0xfc009a14>
 8009c84:	10009a1e 	bne	r2,zero,8009ef0 <__subdf3+0x640>
 8009c88:	82400044 	addi	r9,r16,1
 8009c8c:	4881ffcc 	andi	r2,r9,2047
 8009c90:	02800044 	movi	r10,1
 8009c94:	5080670e 	bge	r10,r2,8009e34 <__subdf3+0x584>
 8009c98:	0081ffc4 	movi	r2,2047
 8009c9c:	4880af26 	beq	r9,r2,8009f5c <__subdf3+0x6ac>
 8009ca0:	898d883a 	add	r6,r17,r6
 8009ca4:	1945883a 	add	r2,r3,r5
 8009ca8:	3447803a 	cmpltu	r3,r6,r17
 8009cac:	1887883a 	add	r3,r3,r2
 8009cb0:	182297fa 	slli	r17,r3,31
 8009cb4:	300cd07a 	srli	r6,r6,1
 8009cb8:	1806d07a 	srli	r3,r3,1
 8009cbc:	4821883a 	mov	r16,r9
 8009cc0:	89a2b03a 	or	r17,r17,r6
 8009cc4:	003f1b06 	br	8009934 <__alt_data_end+0xfc009934>
 8009cc8:	0101ffc4 	movi	r4,2047
 8009ccc:	813f441e 	bne	r16,r4,80099e0 <__alt_data_end+0xfc0099e0>
 8009cd0:	003f1806 	br	8009934 <__alt_data_end+0xfc009934>
 8009cd4:	843ff844 	addi	r16,r16,-31
 8009cd8:	01400804 	movi	r5,32
 8009cdc:	1408d83a 	srl	r4,r2,r16
 8009ce0:	19405026 	beq	r3,r5,8009e24 <__subdf3+0x574>
 8009ce4:	01401004 	movi	r5,64
 8009ce8:	28c7c83a 	sub	r3,r5,r3
 8009cec:	10c4983a 	sll	r2,r2,r3
 8009cf0:	88a2b03a 	or	r17,r17,r2
 8009cf4:	8822c03a 	cmpne	r17,r17,zero
 8009cf8:	2462b03a 	or	r17,r4,r17
 8009cfc:	0007883a 	mov	r3,zero
 8009d00:	0021883a 	mov	r16,zero
 8009d04:	003f6d06 	br	8009abc <__alt_data_end+0xfc009abc>
 8009d08:	11fff804 	addi	r7,r2,-32
 8009d0c:	01000804 	movi	r4,32
 8009d10:	29ced83a 	srl	r7,r5,r7
 8009d14:	11004526 	beq	r2,r4,8009e2c <__subdf3+0x57c>
 8009d18:	01001004 	movi	r4,64
 8009d1c:	2089c83a 	sub	r4,r4,r2
 8009d20:	2904983a 	sll	r2,r5,r4
 8009d24:	118cb03a 	or	r6,r2,r6
 8009d28:	300cc03a 	cmpne	r6,r6,zero
 8009d2c:	398cb03a 	or	r6,r7,r6
 8009d30:	0005883a 	mov	r2,zero
 8009d34:	003f3706 	br	8009a14 <__alt_data_end+0xfc009a14>
 8009d38:	80002a26 	beq	r16,zero,8009de4 <__subdf3+0x534>
 8009d3c:	0101ffc4 	movi	r4,2047
 8009d40:	49006626 	beq	r9,r4,8009edc <__subdf3+0x62c>
 8009d44:	0085c83a 	sub	r2,zero,r2
 8009d48:	18c02034 	orhi	r3,r3,128
 8009d4c:	01000e04 	movi	r4,56
 8009d50:	20807e16 	blt	r4,r2,8009f4c <__subdf3+0x69c>
 8009d54:	010007c4 	movi	r4,31
 8009d58:	2080e716 	blt	r4,r2,800a0f8 <__subdf3+0x848>
 8009d5c:	01000804 	movi	r4,32
 8009d60:	2089c83a 	sub	r4,r4,r2
 8009d64:	1914983a 	sll	r10,r3,r4
 8009d68:	8890d83a 	srl	r8,r17,r2
 8009d6c:	8908983a 	sll	r4,r17,r4
 8009d70:	1884d83a 	srl	r2,r3,r2
 8009d74:	5222b03a 	or	r17,r10,r8
 8009d78:	2006c03a 	cmpne	r3,r4,zero
 8009d7c:	88e2b03a 	or	r17,r17,r3
 8009d80:	3463c83a 	sub	r17,r6,r17
 8009d84:	2885c83a 	sub	r2,r5,r2
 8009d88:	344d803a 	cmpltu	r6,r6,r17
 8009d8c:	1187c83a 	sub	r3,r2,r6
 8009d90:	4821883a 	mov	r16,r9
 8009d94:	3825883a 	mov	r18,r7
 8009d98:	003f2306 	br	8009a28 <__alt_data_end+0xfc009a28>
 8009d9c:	24d0b03a 	or	r8,r4,r19
 8009da0:	40001b1e 	bne	r8,zero,8009e10 <__subdf3+0x560>
 8009da4:	0005883a 	mov	r2,zero
 8009da8:	0009883a 	mov	r4,zero
 8009dac:	0021883a 	mov	r16,zero
 8009db0:	003f4906 	br	8009ad8 <__alt_data_end+0xfc009ad8>
 8009db4:	010007c4 	movi	r4,31
 8009db8:	20803a16 	blt	r4,r2,8009ea4 <__subdf3+0x5f4>
 8009dbc:	01000804 	movi	r4,32
 8009dc0:	2089c83a 	sub	r4,r4,r2
 8009dc4:	2912983a 	sll	r9,r5,r4
 8009dc8:	3090d83a 	srl	r8,r6,r2
 8009dcc:	3108983a 	sll	r4,r6,r4
 8009dd0:	2884d83a 	srl	r2,r5,r2
 8009dd4:	4a12b03a 	or	r9,r9,r8
 8009dd8:	2008c03a 	cmpne	r4,r4,zero
 8009ddc:	4912b03a 	or	r9,r9,r4
 8009de0:	003f4e06 	br	8009b1c <__alt_data_end+0xfc009b1c>
 8009de4:	1c48b03a 	or	r4,r3,r17
 8009de8:	20003c26 	beq	r4,zero,8009edc <__subdf3+0x62c>
 8009dec:	0084303a 	nor	r2,zero,r2
 8009df0:	1000381e 	bne	r2,zero,8009ed4 <__subdf3+0x624>
 8009df4:	3463c83a 	sub	r17,r6,r17
 8009df8:	28c5c83a 	sub	r2,r5,r3
 8009dfc:	344d803a 	cmpltu	r6,r6,r17
 8009e00:	1187c83a 	sub	r3,r2,r6
 8009e04:	4821883a 	mov	r16,r9
 8009e08:	3825883a 	mov	r18,r7
 8009e0c:	003f0606 	br	8009a28 <__alt_data_end+0xfc009a28>
 8009e10:	2023883a 	mov	r17,r4
 8009e14:	003f0906 	br	8009a3c <__alt_data_end+0xfc009a3c>
 8009e18:	0101ffc4 	movi	r4,2047
 8009e1c:	813f3a1e 	bne	r16,r4,8009b08 <__alt_data_end+0xfc009b08>
 8009e20:	003ec406 	br	8009934 <__alt_data_end+0xfc009934>
 8009e24:	0005883a 	mov	r2,zero
 8009e28:	003fb106 	br	8009cf0 <__alt_data_end+0xfc009cf0>
 8009e2c:	0005883a 	mov	r2,zero
 8009e30:	003fbc06 	br	8009d24 <__alt_data_end+0xfc009d24>
 8009e34:	1c44b03a 	or	r2,r3,r17
 8009e38:	80008e1e 	bne	r16,zero,800a074 <__subdf3+0x7c4>
 8009e3c:	1000c826 	beq	r2,zero,800a160 <__subdf3+0x8b0>
 8009e40:	2984b03a 	or	r2,r5,r6
 8009e44:	103ebb26 	beq	r2,zero,8009934 <__alt_data_end+0xfc009934>
 8009e48:	8989883a 	add	r4,r17,r6
 8009e4c:	1945883a 	add	r2,r3,r5
 8009e50:	2447803a 	cmpltu	r3,r4,r17
 8009e54:	1887883a 	add	r3,r3,r2
 8009e58:	1880202c 	andhi	r2,r3,128
 8009e5c:	2023883a 	mov	r17,r4
 8009e60:	103f1626 	beq	r2,zero,8009abc <__alt_data_end+0xfc009abc>
 8009e64:	00bfe034 	movhi	r2,65408
 8009e68:	10bfffc4 	addi	r2,r2,-1
 8009e6c:	5021883a 	mov	r16,r10
 8009e70:	1886703a 	and	r3,r3,r2
 8009e74:	003eaf06 	br	8009934 <__alt_data_end+0xfc009934>
 8009e78:	3825883a 	mov	r18,r7
 8009e7c:	003f0f06 	br	8009abc <__alt_data_end+0xfc009abc>
 8009e80:	1c44b03a 	or	r2,r3,r17
 8009e84:	8000251e 	bne	r16,zero,8009f1c <__subdf3+0x66c>
 8009e88:	1000661e 	bne	r2,zero,800a024 <__subdf3+0x774>
 8009e8c:	2990b03a 	or	r8,r5,r6
 8009e90:	40009626 	beq	r8,zero,800a0ec <__subdf3+0x83c>
 8009e94:	2807883a 	mov	r3,r5
 8009e98:	3023883a 	mov	r17,r6
 8009e9c:	3825883a 	mov	r18,r7
 8009ea0:	003ea406 	br	8009934 <__alt_data_end+0xfc009934>
 8009ea4:	127ff804 	addi	r9,r2,-32
 8009ea8:	01000804 	movi	r4,32
 8009eac:	2a52d83a 	srl	r9,r5,r9
 8009eb0:	11008c26 	beq	r2,r4,800a0e4 <__subdf3+0x834>
 8009eb4:	01001004 	movi	r4,64
 8009eb8:	2085c83a 	sub	r2,r4,r2
 8009ebc:	2884983a 	sll	r2,r5,r2
 8009ec0:	118cb03a 	or	r6,r2,r6
 8009ec4:	300cc03a 	cmpne	r6,r6,zero
 8009ec8:	4992b03a 	or	r9,r9,r6
 8009ecc:	0005883a 	mov	r2,zero
 8009ed0:	003f1206 	br	8009b1c <__alt_data_end+0xfc009b1c>
 8009ed4:	0101ffc4 	movi	r4,2047
 8009ed8:	493f9c1e 	bne	r9,r4,8009d4c <__alt_data_end+0xfc009d4c>
 8009edc:	2807883a 	mov	r3,r5
 8009ee0:	3023883a 	mov	r17,r6
 8009ee4:	4821883a 	mov	r16,r9
 8009ee8:	3825883a 	mov	r18,r7
 8009eec:	003e9106 	br	8009934 <__alt_data_end+0xfc009934>
 8009ef0:	80001f1e 	bne	r16,zero,8009f70 <__subdf3+0x6c0>
 8009ef4:	1c48b03a 	or	r4,r3,r17
 8009ef8:	20005a26 	beq	r4,zero,800a064 <__subdf3+0x7b4>
 8009efc:	0084303a 	nor	r2,zero,r2
 8009f00:	1000561e 	bne	r2,zero,800a05c <__subdf3+0x7ac>
 8009f04:	89a3883a 	add	r17,r17,r6
 8009f08:	1945883a 	add	r2,r3,r5
 8009f0c:	898d803a 	cmpltu	r6,r17,r6
 8009f10:	3087883a 	add	r3,r6,r2
 8009f14:	4821883a 	mov	r16,r9
 8009f18:	003f0506 	br	8009b30 <__alt_data_end+0xfc009b30>
 8009f1c:	10002b1e 	bne	r2,zero,8009fcc <__subdf3+0x71c>
 8009f20:	2984b03a 	or	r2,r5,r6
 8009f24:	10008026 	beq	r2,zero,800a128 <__subdf3+0x878>
 8009f28:	2807883a 	mov	r3,r5
 8009f2c:	3023883a 	mov	r17,r6
 8009f30:	3825883a 	mov	r18,r7
 8009f34:	0401ffc4 	movi	r16,2047
 8009f38:	003e7e06 	br	8009934 <__alt_data_end+0xfc009934>
 8009f3c:	3809883a 	mov	r4,r7
 8009f40:	0011883a 	mov	r8,zero
 8009f44:	0005883a 	mov	r2,zero
 8009f48:	003ee306 	br	8009ad8 <__alt_data_end+0xfc009ad8>
 8009f4c:	1c62b03a 	or	r17,r3,r17
 8009f50:	8822c03a 	cmpne	r17,r17,zero
 8009f54:	0005883a 	mov	r2,zero
 8009f58:	003f8906 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009f5c:	3809883a 	mov	r4,r7
 8009f60:	4821883a 	mov	r16,r9
 8009f64:	0011883a 	mov	r8,zero
 8009f68:	0005883a 	mov	r2,zero
 8009f6c:	003eda06 	br	8009ad8 <__alt_data_end+0xfc009ad8>
 8009f70:	0101ffc4 	movi	r4,2047
 8009f74:	49003b26 	beq	r9,r4,800a064 <__subdf3+0x7b4>
 8009f78:	0085c83a 	sub	r2,zero,r2
 8009f7c:	18c02034 	orhi	r3,r3,128
 8009f80:	01000e04 	movi	r4,56
 8009f84:	20806e16 	blt	r4,r2,800a140 <__subdf3+0x890>
 8009f88:	010007c4 	movi	r4,31
 8009f8c:	20807716 	blt	r4,r2,800a16c <__subdf3+0x8bc>
 8009f90:	01000804 	movi	r4,32
 8009f94:	2089c83a 	sub	r4,r4,r2
 8009f98:	1914983a 	sll	r10,r3,r4
 8009f9c:	8890d83a 	srl	r8,r17,r2
 8009fa0:	8908983a 	sll	r4,r17,r4
 8009fa4:	1884d83a 	srl	r2,r3,r2
 8009fa8:	5222b03a 	or	r17,r10,r8
 8009fac:	2006c03a 	cmpne	r3,r4,zero
 8009fb0:	88e2b03a 	or	r17,r17,r3
 8009fb4:	89a3883a 	add	r17,r17,r6
 8009fb8:	1145883a 	add	r2,r2,r5
 8009fbc:	898d803a 	cmpltu	r6,r17,r6
 8009fc0:	3087883a 	add	r3,r6,r2
 8009fc4:	4821883a 	mov	r16,r9
 8009fc8:	003ed906 	br	8009b30 <__alt_data_end+0xfc009b30>
 8009fcc:	2984b03a 	or	r2,r5,r6
 8009fd0:	10004226 	beq	r2,zero,800a0dc <__subdf3+0x82c>
 8009fd4:	1808d0fa 	srli	r4,r3,3
 8009fd8:	8822d0fa 	srli	r17,r17,3
 8009fdc:	1806977a 	slli	r3,r3,29
 8009fe0:	2080022c 	andhi	r2,r4,8
 8009fe4:	1c62b03a 	or	r17,r3,r17
 8009fe8:	10000826 	beq	r2,zero,800a00c <__subdf3+0x75c>
 8009fec:	2812d0fa 	srli	r9,r5,3
 8009ff0:	4880022c 	andhi	r2,r9,8
 8009ff4:	1000051e 	bne	r2,zero,800a00c <__subdf3+0x75c>
 8009ff8:	300cd0fa 	srli	r6,r6,3
 8009ffc:	2804977a 	slli	r2,r5,29
 800a000:	4809883a 	mov	r4,r9
 800a004:	3825883a 	mov	r18,r7
 800a008:	11a2b03a 	or	r17,r2,r6
 800a00c:	8806d77a 	srli	r3,r17,29
 800a010:	200890fa 	slli	r4,r4,3
 800a014:	882290fa 	slli	r17,r17,3
 800a018:	0401ffc4 	movi	r16,2047
 800a01c:	1906b03a 	or	r3,r3,r4
 800a020:	003e4406 	br	8009934 <__alt_data_end+0xfc009934>
 800a024:	2984b03a 	or	r2,r5,r6
 800a028:	103e4226 	beq	r2,zero,8009934 <__alt_data_end+0xfc009934>
 800a02c:	8989c83a 	sub	r4,r17,r6
 800a030:	8911803a 	cmpltu	r8,r17,r4
 800a034:	1945c83a 	sub	r2,r3,r5
 800a038:	1205c83a 	sub	r2,r2,r8
 800a03c:	1200202c 	andhi	r8,r2,128
 800a040:	403e9a26 	beq	r8,zero,8009aac <__alt_data_end+0xfc009aac>
 800a044:	3463c83a 	sub	r17,r6,r17
 800a048:	28c5c83a 	sub	r2,r5,r3
 800a04c:	344d803a 	cmpltu	r6,r6,r17
 800a050:	1187c83a 	sub	r3,r2,r6
 800a054:	3825883a 	mov	r18,r7
 800a058:	003e3606 	br	8009934 <__alt_data_end+0xfc009934>
 800a05c:	0101ffc4 	movi	r4,2047
 800a060:	493fc71e 	bne	r9,r4,8009f80 <__alt_data_end+0xfc009f80>
 800a064:	2807883a 	mov	r3,r5
 800a068:	3023883a 	mov	r17,r6
 800a06c:	4821883a 	mov	r16,r9
 800a070:	003e3006 	br	8009934 <__alt_data_end+0xfc009934>
 800a074:	10003626 	beq	r2,zero,800a150 <__subdf3+0x8a0>
 800a078:	2984b03a 	or	r2,r5,r6
 800a07c:	10001726 	beq	r2,zero,800a0dc <__subdf3+0x82c>
 800a080:	1808d0fa 	srli	r4,r3,3
 800a084:	8822d0fa 	srli	r17,r17,3
 800a088:	1806977a 	slli	r3,r3,29
 800a08c:	2080022c 	andhi	r2,r4,8
 800a090:	1c62b03a 	or	r17,r3,r17
 800a094:	10000726 	beq	r2,zero,800a0b4 <__subdf3+0x804>
 800a098:	2812d0fa 	srli	r9,r5,3
 800a09c:	4880022c 	andhi	r2,r9,8
 800a0a0:	1000041e 	bne	r2,zero,800a0b4 <__subdf3+0x804>
 800a0a4:	300cd0fa 	srli	r6,r6,3
 800a0a8:	2804977a 	slli	r2,r5,29
 800a0ac:	4809883a 	mov	r4,r9
 800a0b0:	11a2b03a 	or	r17,r2,r6
 800a0b4:	8806d77a 	srli	r3,r17,29
 800a0b8:	200890fa 	slli	r4,r4,3
 800a0bc:	882290fa 	slli	r17,r17,3
 800a0c0:	3825883a 	mov	r18,r7
 800a0c4:	1906b03a 	or	r3,r3,r4
 800a0c8:	0401ffc4 	movi	r16,2047
 800a0cc:	003e1906 	br	8009934 <__alt_data_end+0xfc009934>
 800a0d0:	000b883a 	mov	r5,zero
 800a0d4:	0005883a 	mov	r2,zero
 800a0d8:	003e2e06 	br	8009994 <__alt_data_end+0xfc009994>
 800a0dc:	0401ffc4 	movi	r16,2047
 800a0e0:	003e1406 	br	8009934 <__alt_data_end+0xfc009934>
 800a0e4:	0005883a 	mov	r2,zero
 800a0e8:	003f7506 	br	8009ec0 <__alt_data_end+0xfc009ec0>
 800a0ec:	0005883a 	mov	r2,zero
 800a0f0:	0009883a 	mov	r4,zero
 800a0f4:	003e7806 	br	8009ad8 <__alt_data_end+0xfc009ad8>
 800a0f8:	123ff804 	addi	r8,r2,-32
 800a0fc:	01000804 	movi	r4,32
 800a100:	1a10d83a 	srl	r8,r3,r8
 800a104:	11002526 	beq	r2,r4,800a19c <__subdf3+0x8ec>
 800a108:	01001004 	movi	r4,64
 800a10c:	2085c83a 	sub	r2,r4,r2
 800a110:	1884983a 	sll	r2,r3,r2
 800a114:	1444b03a 	or	r2,r2,r17
 800a118:	1004c03a 	cmpne	r2,r2,zero
 800a11c:	40a2b03a 	or	r17,r8,r2
 800a120:	0005883a 	mov	r2,zero
 800a124:	003f1606 	br	8009d80 <__alt_data_end+0xfc009d80>
 800a128:	02000434 	movhi	r8,16
 800a12c:	0009883a 	mov	r4,zero
 800a130:	423fffc4 	addi	r8,r8,-1
 800a134:	00bfffc4 	movi	r2,-1
 800a138:	0401ffc4 	movi	r16,2047
 800a13c:	003e6606 	br	8009ad8 <__alt_data_end+0xfc009ad8>
 800a140:	1c62b03a 	or	r17,r3,r17
 800a144:	8822c03a 	cmpne	r17,r17,zero
 800a148:	0005883a 	mov	r2,zero
 800a14c:	003f9906 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a150:	2807883a 	mov	r3,r5
 800a154:	3023883a 	mov	r17,r6
 800a158:	0401ffc4 	movi	r16,2047
 800a15c:	003df506 	br	8009934 <__alt_data_end+0xfc009934>
 800a160:	2807883a 	mov	r3,r5
 800a164:	3023883a 	mov	r17,r6
 800a168:	003df206 	br	8009934 <__alt_data_end+0xfc009934>
 800a16c:	123ff804 	addi	r8,r2,-32
 800a170:	01000804 	movi	r4,32
 800a174:	1a10d83a 	srl	r8,r3,r8
 800a178:	11000a26 	beq	r2,r4,800a1a4 <__subdf3+0x8f4>
 800a17c:	01001004 	movi	r4,64
 800a180:	2085c83a 	sub	r2,r4,r2
 800a184:	1884983a 	sll	r2,r3,r2
 800a188:	1444b03a 	or	r2,r2,r17
 800a18c:	1004c03a 	cmpne	r2,r2,zero
 800a190:	40a2b03a 	or	r17,r8,r2
 800a194:	0005883a 	mov	r2,zero
 800a198:	003f8606 	br	8009fb4 <__alt_data_end+0xfc009fb4>
 800a19c:	0005883a 	mov	r2,zero
 800a1a0:	003fdc06 	br	800a114 <__alt_data_end+0xfc00a114>
 800a1a4:	0005883a 	mov	r2,zero
 800a1a8:	003ff706 	br	800a188 <__alt_data_end+0xfc00a188>

0800a1ac <__fixdfsi>:
 800a1ac:	280cd53a 	srli	r6,r5,20
 800a1b0:	00c00434 	movhi	r3,16
 800a1b4:	18ffffc4 	addi	r3,r3,-1
 800a1b8:	3181ffcc 	andi	r6,r6,2047
 800a1bc:	01c0ff84 	movi	r7,1022
 800a1c0:	28c6703a 	and	r3,r5,r3
 800a1c4:	280ad7fa 	srli	r5,r5,31
 800a1c8:	3980120e 	bge	r7,r6,800a214 <__fixdfsi+0x68>
 800a1cc:	00810744 	movi	r2,1053
 800a1d0:	11800c16 	blt	r2,r6,800a204 <__fixdfsi+0x58>
 800a1d4:	00810cc4 	movi	r2,1075
 800a1d8:	1185c83a 	sub	r2,r2,r6
 800a1dc:	01c007c4 	movi	r7,31
 800a1e0:	18c00434 	orhi	r3,r3,16
 800a1e4:	38800d16 	blt	r7,r2,800a21c <__fixdfsi+0x70>
 800a1e8:	31befb44 	addi	r6,r6,-1043
 800a1ec:	2084d83a 	srl	r2,r4,r2
 800a1f0:	1986983a 	sll	r3,r3,r6
 800a1f4:	1884b03a 	or	r2,r3,r2
 800a1f8:	28000726 	beq	r5,zero,800a218 <__fixdfsi+0x6c>
 800a1fc:	0085c83a 	sub	r2,zero,r2
 800a200:	f800283a 	ret
 800a204:	00a00034 	movhi	r2,32768
 800a208:	10bfffc4 	addi	r2,r2,-1
 800a20c:	2885883a 	add	r2,r5,r2
 800a210:	f800283a 	ret
 800a214:	0005883a 	mov	r2,zero
 800a218:	f800283a 	ret
 800a21c:	008104c4 	movi	r2,1043
 800a220:	1185c83a 	sub	r2,r2,r6
 800a224:	1884d83a 	srl	r2,r3,r2
 800a228:	003ff306 	br	800a1f8 <__alt_data_end+0xfc00a1f8>

0800a22c <__floatunsidf>:
 800a22c:	defffe04 	addi	sp,sp,-8
 800a230:	dc000015 	stw	r16,0(sp)
 800a234:	dfc00115 	stw	ra,4(sp)
 800a238:	2021883a 	mov	r16,r4
 800a23c:	20002226 	beq	r4,zero,800a2c8 <__floatunsidf+0x9c>
 800a240:	800a58c0 	call	800a58c <__clzsi2>
 800a244:	01010784 	movi	r4,1054
 800a248:	2089c83a 	sub	r4,r4,r2
 800a24c:	01810cc4 	movi	r6,1075
 800a250:	310dc83a 	sub	r6,r6,r4
 800a254:	00c007c4 	movi	r3,31
 800a258:	1980120e 	bge	r3,r6,800a2a4 <__floatunsidf+0x78>
 800a25c:	00c104c4 	movi	r3,1043
 800a260:	1907c83a 	sub	r3,r3,r4
 800a264:	80ca983a 	sll	r5,r16,r3
 800a268:	00800434 	movhi	r2,16
 800a26c:	10bfffc4 	addi	r2,r2,-1
 800a270:	2101ffcc 	andi	r4,r4,2047
 800a274:	0021883a 	mov	r16,zero
 800a278:	288a703a 	and	r5,r5,r2
 800a27c:	2008953a 	slli	r4,r4,20
 800a280:	00c00434 	movhi	r3,16
 800a284:	18ffffc4 	addi	r3,r3,-1
 800a288:	28c6703a 	and	r3,r5,r3
 800a28c:	8005883a 	mov	r2,r16
 800a290:	1906b03a 	or	r3,r3,r4
 800a294:	dfc00117 	ldw	ra,4(sp)
 800a298:	dc000017 	ldw	r16,0(sp)
 800a29c:	dec00204 	addi	sp,sp,8
 800a2a0:	f800283a 	ret
 800a2a4:	00c002c4 	movi	r3,11
 800a2a8:	188bc83a 	sub	r5,r3,r2
 800a2ac:	814ad83a 	srl	r5,r16,r5
 800a2b0:	00c00434 	movhi	r3,16
 800a2b4:	18ffffc4 	addi	r3,r3,-1
 800a2b8:	81a0983a 	sll	r16,r16,r6
 800a2bc:	2101ffcc 	andi	r4,r4,2047
 800a2c0:	28ca703a 	and	r5,r5,r3
 800a2c4:	003fed06 	br	800a27c <__alt_data_end+0xfc00a27c>
 800a2c8:	0009883a 	mov	r4,zero
 800a2cc:	000b883a 	mov	r5,zero
 800a2d0:	003fea06 	br	800a27c <__alt_data_end+0xfc00a27c>

0800a2d4 <__extendsfdf2>:
 800a2d4:	200ad5fa 	srli	r5,r4,23
 800a2d8:	defffd04 	addi	sp,sp,-12
 800a2dc:	dc400115 	stw	r17,4(sp)
 800a2e0:	29403fcc 	andi	r5,r5,255
 800a2e4:	29800044 	addi	r6,r5,1
 800a2e8:	04402034 	movhi	r17,128
 800a2ec:	dc000015 	stw	r16,0(sp)
 800a2f0:	8c7fffc4 	addi	r17,r17,-1
 800a2f4:	dfc00215 	stw	ra,8(sp)
 800a2f8:	31803fcc 	andi	r6,r6,255
 800a2fc:	00800044 	movi	r2,1
 800a300:	8922703a 	and	r17,r17,r4
 800a304:	2020d7fa 	srli	r16,r4,31
 800a308:	1180110e 	bge	r2,r6,800a350 <__extendsfdf2+0x7c>
 800a30c:	880cd0fa 	srli	r6,r17,3
 800a310:	8822977a 	slli	r17,r17,29
 800a314:	2940e004 	addi	r5,r5,896
 800a318:	2941ffcc 	andi	r5,r5,2047
 800a31c:	2804953a 	slli	r2,r5,20
 800a320:	01400434 	movhi	r5,16
 800a324:	800697fa 	slli	r3,r16,31
 800a328:	297fffc4 	addi	r5,r5,-1
 800a32c:	314a703a 	and	r5,r6,r5
 800a330:	288ab03a 	or	r5,r5,r2
 800a334:	28c6b03a 	or	r3,r5,r3
 800a338:	8805883a 	mov	r2,r17
 800a33c:	dfc00217 	ldw	ra,8(sp)
 800a340:	dc400117 	ldw	r17,4(sp)
 800a344:	dc000017 	ldw	r16,0(sp)
 800a348:	dec00304 	addi	sp,sp,12
 800a34c:	f800283a 	ret
 800a350:	2800111e 	bne	r5,zero,800a398 <__extendsfdf2+0xc4>
 800a354:	88001c26 	beq	r17,zero,800a3c8 <__extendsfdf2+0xf4>
 800a358:	8809883a 	mov	r4,r17
 800a35c:	800a58c0 	call	800a58c <__clzsi2>
 800a360:	00c00284 	movi	r3,10
 800a364:	18801b16 	blt	r3,r2,800a3d4 <__extendsfdf2+0x100>
 800a368:	018002c4 	movi	r6,11
 800a36c:	308dc83a 	sub	r6,r6,r2
 800a370:	11000544 	addi	r4,r2,21
 800a374:	8986d83a 	srl	r3,r17,r6
 800a378:	8922983a 	sll	r17,r17,r4
 800a37c:	0180e244 	movi	r6,905
 800a380:	01400434 	movhi	r5,16
 800a384:	3085c83a 	sub	r2,r6,r2
 800a388:	297fffc4 	addi	r5,r5,-1
 800a38c:	194c703a 	and	r6,r3,r5
 800a390:	1141ffcc 	andi	r5,r2,2047
 800a394:	003fe006 	br	800a318 <__alt_data_end+0xfc00a318>
 800a398:	88000826 	beq	r17,zero,800a3bc <__extendsfdf2+0xe8>
 800a39c:	880cd0fa 	srli	r6,r17,3
 800a3a0:	00800434 	movhi	r2,16
 800a3a4:	10bfffc4 	addi	r2,r2,-1
 800a3a8:	31800234 	orhi	r6,r6,8
 800a3ac:	8822977a 	slli	r17,r17,29
 800a3b0:	308c703a 	and	r6,r6,r2
 800a3b4:	0141ffc4 	movi	r5,2047
 800a3b8:	003fd706 	br	800a318 <__alt_data_end+0xfc00a318>
 800a3bc:	0141ffc4 	movi	r5,2047
 800a3c0:	000d883a 	mov	r6,zero
 800a3c4:	003fd406 	br	800a318 <__alt_data_end+0xfc00a318>
 800a3c8:	000b883a 	mov	r5,zero
 800a3cc:	000d883a 	mov	r6,zero
 800a3d0:	003fd106 	br	800a318 <__alt_data_end+0xfc00a318>
 800a3d4:	11bffd44 	addi	r6,r2,-11
 800a3d8:	8986983a 	sll	r3,r17,r6
 800a3dc:	0023883a 	mov	r17,zero
 800a3e0:	003fe606 	br	800a37c <__alt_data_end+0xfc00a37c>

0800a3e4 <__truncdfsf2>:
 800a3e4:	2810d53a 	srli	r8,r5,20
 800a3e8:	01c00434 	movhi	r7,16
 800a3ec:	39ffffc4 	addi	r7,r7,-1
 800a3f0:	29ce703a 	and	r7,r5,r7
 800a3f4:	4201ffcc 	andi	r8,r8,2047
 800a3f8:	380e90fa 	slli	r7,r7,3
 800a3fc:	200cd77a 	srli	r6,r4,29
 800a400:	42400044 	addi	r9,r8,1
 800a404:	4a41ffcc 	andi	r9,r9,2047
 800a408:	00c00044 	movi	r3,1
 800a40c:	280ad7fa 	srli	r5,r5,31
 800a410:	31ceb03a 	or	r7,r6,r7
 800a414:	200490fa 	slli	r2,r4,3
 800a418:	1a40230e 	bge	r3,r9,800a4a8 <__truncdfsf2+0xc4>
 800a41c:	40ff2004 	addi	r3,r8,-896
 800a420:	01803f84 	movi	r6,254
 800a424:	30c01516 	blt	r6,r3,800a47c <__truncdfsf2+0x98>
 800a428:	00c0380e 	bge	zero,r3,800a50c <__truncdfsf2+0x128>
 800a42c:	200c91ba 	slli	r6,r4,6
 800a430:	380e90fa 	slli	r7,r7,3
 800a434:	1004d77a 	srli	r2,r2,29
 800a438:	300cc03a 	cmpne	r6,r6,zero
 800a43c:	31ccb03a 	or	r6,r6,r7
 800a440:	308cb03a 	or	r6,r6,r2
 800a444:	308001cc 	andi	r2,r6,7
 800a448:	10000426 	beq	r2,zero,800a45c <__truncdfsf2+0x78>
 800a44c:	308003cc 	andi	r2,r6,15
 800a450:	01000104 	movi	r4,4
 800a454:	11000126 	beq	r2,r4,800a45c <__truncdfsf2+0x78>
 800a458:	31800104 	addi	r6,r6,4
 800a45c:	3081002c 	andhi	r2,r6,1024
 800a460:	10001626 	beq	r2,zero,800a4bc <__truncdfsf2+0xd8>
 800a464:	18c00044 	addi	r3,r3,1
 800a468:	00803fc4 	movi	r2,255
 800a46c:	18800326 	beq	r3,r2,800a47c <__truncdfsf2+0x98>
 800a470:	300c91ba 	slli	r6,r6,6
 800a474:	300cd27a 	srli	r6,r6,9
 800a478:	00000206 	br	800a484 <__truncdfsf2+0xa0>
 800a47c:	00ffffc4 	movi	r3,-1
 800a480:	000d883a 	mov	r6,zero
 800a484:	18c03fcc 	andi	r3,r3,255
 800a488:	180895fa 	slli	r4,r3,23
 800a48c:	00c02034 	movhi	r3,128
 800a490:	280a97fa 	slli	r5,r5,31
 800a494:	18ffffc4 	addi	r3,r3,-1
 800a498:	30c6703a 	and	r3,r6,r3
 800a49c:	1906b03a 	or	r3,r3,r4
 800a4a0:	1944b03a 	or	r2,r3,r5
 800a4a4:	f800283a 	ret
 800a4a8:	40000b1e 	bne	r8,zero,800a4d8 <__truncdfsf2+0xf4>
 800a4ac:	388cb03a 	or	r6,r7,r2
 800a4b0:	0007883a 	mov	r3,zero
 800a4b4:	30000426 	beq	r6,zero,800a4c8 <__truncdfsf2+0xe4>
 800a4b8:	01800144 	movi	r6,5
 800a4bc:	00803fc4 	movi	r2,255
 800a4c0:	300cd0fa 	srli	r6,r6,3
 800a4c4:	18800a26 	beq	r3,r2,800a4f0 <__truncdfsf2+0x10c>
 800a4c8:	00802034 	movhi	r2,128
 800a4cc:	10bfffc4 	addi	r2,r2,-1
 800a4d0:	308c703a 	and	r6,r6,r2
 800a4d4:	003feb06 	br	800a484 <__alt_data_end+0xfc00a484>
 800a4d8:	3888b03a 	or	r4,r7,r2
 800a4dc:	203fe726 	beq	r4,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a4e0:	380c90fa 	slli	r6,r7,3
 800a4e4:	00c03fc4 	movi	r3,255
 800a4e8:	31808034 	orhi	r6,r6,512
 800a4ec:	003fd506 	br	800a444 <__alt_data_end+0xfc00a444>
 800a4f0:	303fe226 	beq	r6,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a4f4:	00802034 	movhi	r2,128
 800a4f8:	31801034 	orhi	r6,r6,64
 800a4fc:	10bfffc4 	addi	r2,r2,-1
 800a500:	00ffffc4 	movi	r3,-1
 800a504:	308c703a 	and	r6,r6,r2
 800a508:	003fde06 	br	800a484 <__alt_data_end+0xfc00a484>
 800a50c:	013ffa44 	movi	r4,-23
 800a510:	19000e16 	blt	r3,r4,800a54c <__truncdfsf2+0x168>
 800a514:	01000784 	movi	r4,30
 800a518:	20c9c83a 	sub	r4,r4,r3
 800a51c:	018007c4 	movi	r6,31
 800a520:	39c02034 	orhi	r7,r7,128
 800a524:	31000b16 	blt	r6,r4,800a554 <__truncdfsf2+0x170>
 800a528:	423f2084 	addi	r8,r8,-894
 800a52c:	120c983a 	sll	r6,r2,r8
 800a530:	3a0e983a 	sll	r7,r7,r8
 800a534:	1104d83a 	srl	r2,r2,r4
 800a538:	300cc03a 	cmpne	r6,r6,zero
 800a53c:	31ceb03a 	or	r7,r6,r7
 800a540:	388cb03a 	or	r6,r7,r2
 800a544:	0007883a 	mov	r3,zero
 800a548:	003fbe06 	br	800a444 <__alt_data_end+0xfc00a444>
 800a54c:	0007883a 	mov	r3,zero
 800a550:	003fd906 	br	800a4b8 <__alt_data_end+0xfc00a4b8>
 800a554:	01bfff84 	movi	r6,-2
 800a558:	30cdc83a 	sub	r6,r6,r3
 800a55c:	00c00804 	movi	r3,32
 800a560:	398cd83a 	srl	r6,r7,r6
 800a564:	20c00726 	beq	r4,r3,800a584 <__truncdfsf2+0x1a0>
 800a568:	423f2884 	addi	r8,r8,-862
 800a56c:	3a0e983a 	sll	r7,r7,r8
 800a570:	3884b03a 	or	r2,r7,r2
 800a574:	1004c03a 	cmpne	r2,r2,zero
 800a578:	118cb03a 	or	r6,r2,r6
 800a57c:	0007883a 	mov	r3,zero
 800a580:	003fb006 	br	800a444 <__alt_data_end+0xfc00a444>
 800a584:	000f883a 	mov	r7,zero
 800a588:	003ff906 	br	800a570 <__alt_data_end+0xfc00a570>

0800a58c <__clzsi2>:
 800a58c:	00bfffd4 	movui	r2,65535
 800a590:	11000536 	bltu	r2,r4,800a5a8 <__clzsi2+0x1c>
 800a594:	00803fc4 	movi	r2,255
 800a598:	11000f36 	bltu	r2,r4,800a5d8 <__clzsi2+0x4c>
 800a59c:	00800804 	movi	r2,32
 800a5a0:	0007883a 	mov	r3,zero
 800a5a4:	00000506 	br	800a5bc <__clzsi2+0x30>
 800a5a8:	00804034 	movhi	r2,256
 800a5ac:	10bfffc4 	addi	r2,r2,-1
 800a5b0:	11000c2e 	bgeu	r2,r4,800a5e4 <__clzsi2+0x58>
 800a5b4:	00800204 	movi	r2,8
 800a5b8:	00c00604 	movi	r3,24
 800a5bc:	20c8d83a 	srl	r4,r4,r3
 800a5c0:	00c21974 	movhi	r3,2149
 800a5c4:	18f6fa04 	addi	r3,r3,-9240
 800a5c8:	1909883a 	add	r4,r3,r4
 800a5cc:	20c00003 	ldbu	r3,0(r4)
 800a5d0:	10c5c83a 	sub	r2,r2,r3
 800a5d4:	f800283a 	ret
 800a5d8:	00800604 	movi	r2,24
 800a5dc:	00c00204 	movi	r3,8
 800a5e0:	003ff606 	br	800a5bc <__alt_data_end+0xfc00a5bc>
 800a5e4:	00800404 	movi	r2,16
 800a5e8:	1007883a 	mov	r3,r2
 800a5ec:	003ff306 	br	800a5bc <__alt_data_end+0xfc00a5bc>

0800a5f0 <memcpy>:
 800a5f0:	defffd04 	addi	sp,sp,-12
 800a5f4:	dfc00215 	stw	ra,8(sp)
 800a5f8:	dc400115 	stw	r17,4(sp)
 800a5fc:	dc000015 	stw	r16,0(sp)
 800a600:	00c003c4 	movi	r3,15
 800a604:	2005883a 	mov	r2,r4
 800a608:	1980452e 	bgeu	r3,r6,800a720 <memcpy+0x130>
 800a60c:	2906b03a 	or	r3,r5,r4
 800a610:	18c000cc 	andi	r3,r3,3
 800a614:	1800441e 	bne	r3,zero,800a728 <memcpy+0x138>
 800a618:	347ffc04 	addi	r17,r6,-16
 800a61c:	8822d13a 	srli	r17,r17,4
 800a620:	28c00104 	addi	r3,r5,4
 800a624:	23400104 	addi	r13,r4,4
 800a628:	8820913a 	slli	r16,r17,4
 800a62c:	2b000204 	addi	r12,r5,8
 800a630:	22c00204 	addi	r11,r4,8
 800a634:	84000504 	addi	r16,r16,20
 800a638:	2a800304 	addi	r10,r5,12
 800a63c:	22400304 	addi	r9,r4,12
 800a640:	2c21883a 	add	r16,r5,r16
 800a644:	2811883a 	mov	r8,r5
 800a648:	200f883a 	mov	r7,r4
 800a64c:	41000017 	ldw	r4,0(r8)
 800a650:	1fc00017 	ldw	ra,0(r3)
 800a654:	63c00017 	ldw	r15,0(r12)
 800a658:	39000015 	stw	r4,0(r7)
 800a65c:	53800017 	ldw	r14,0(r10)
 800a660:	6fc00015 	stw	ra,0(r13)
 800a664:	5bc00015 	stw	r15,0(r11)
 800a668:	4b800015 	stw	r14,0(r9)
 800a66c:	18c00404 	addi	r3,r3,16
 800a670:	39c00404 	addi	r7,r7,16
 800a674:	42000404 	addi	r8,r8,16
 800a678:	6b400404 	addi	r13,r13,16
 800a67c:	63000404 	addi	r12,r12,16
 800a680:	5ac00404 	addi	r11,r11,16
 800a684:	52800404 	addi	r10,r10,16
 800a688:	4a400404 	addi	r9,r9,16
 800a68c:	1c3fef1e 	bne	r3,r16,800a64c <__alt_data_end+0xfc00a64c>
 800a690:	89c00044 	addi	r7,r17,1
 800a694:	380e913a 	slli	r7,r7,4
 800a698:	310003cc 	andi	r4,r6,15
 800a69c:	02c000c4 	movi	r11,3
 800a6a0:	11c7883a 	add	r3,r2,r7
 800a6a4:	29cb883a 	add	r5,r5,r7
 800a6a8:	5900212e 	bgeu	r11,r4,800a730 <memcpy+0x140>
 800a6ac:	1813883a 	mov	r9,r3
 800a6b0:	2811883a 	mov	r8,r5
 800a6b4:	200f883a 	mov	r7,r4
 800a6b8:	42800017 	ldw	r10,0(r8)
 800a6bc:	4a400104 	addi	r9,r9,4
 800a6c0:	39ffff04 	addi	r7,r7,-4
 800a6c4:	4abfff15 	stw	r10,-4(r9)
 800a6c8:	42000104 	addi	r8,r8,4
 800a6cc:	59fffa36 	bltu	r11,r7,800a6b8 <__alt_data_end+0xfc00a6b8>
 800a6d0:	213fff04 	addi	r4,r4,-4
 800a6d4:	2008d0ba 	srli	r4,r4,2
 800a6d8:	318000cc 	andi	r6,r6,3
 800a6dc:	21000044 	addi	r4,r4,1
 800a6e0:	2109883a 	add	r4,r4,r4
 800a6e4:	2109883a 	add	r4,r4,r4
 800a6e8:	1907883a 	add	r3,r3,r4
 800a6ec:	290b883a 	add	r5,r5,r4
 800a6f0:	30000626 	beq	r6,zero,800a70c <memcpy+0x11c>
 800a6f4:	198d883a 	add	r6,r3,r6
 800a6f8:	29c00003 	ldbu	r7,0(r5)
 800a6fc:	18c00044 	addi	r3,r3,1
 800a700:	29400044 	addi	r5,r5,1
 800a704:	19ffffc5 	stb	r7,-1(r3)
 800a708:	19bffb1e 	bne	r3,r6,800a6f8 <__alt_data_end+0xfc00a6f8>
 800a70c:	dfc00217 	ldw	ra,8(sp)
 800a710:	dc400117 	ldw	r17,4(sp)
 800a714:	dc000017 	ldw	r16,0(sp)
 800a718:	dec00304 	addi	sp,sp,12
 800a71c:	f800283a 	ret
 800a720:	2007883a 	mov	r3,r4
 800a724:	003ff206 	br	800a6f0 <__alt_data_end+0xfc00a6f0>
 800a728:	2007883a 	mov	r3,r4
 800a72c:	003ff106 	br	800a6f4 <__alt_data_end+0xfc00a6f4>
 800a730:	200d883a 	mov	r6,r4
 800a734:	003fee06 	br	800a6f0 <__alt_data_end+0xfc00a6f0>

0800a738 <memset>:
 800a738:	20c000cc 	andi	r3,r4,3
 800a73c:	2005883a 	mov	r2,r4
 800a740:	18004426 	beq	r3,zero,800a854 <memset+0x11c>
 800a744:	31ffffc4 	addi	r7,r6,-1
 800a748:	30004026 	beq	r6,zero,800a84c <memset+0x114>
 800a74c:	2813883a 	mov	r9,r5
 800a750:	200d883a 	mov	r6,r4
 800a754:	2007883a 	mov	r3,r4
 800a758:	00000406 	br	800a76c <memset+0x34>
 800a75c:	3a3fffc4 	addi	r8,r7,-1
 800a760:	31800044 	addi	r6,r6,1
 800a764:	38003926 	beq	r7,zero,800a84c <memset+0x114>
 800a768:	400f883a 	mov	r7,r8
 800a76c:	18c00044 	addi	r3,r3,1
 800a770:	32400005 	stb	r9,0(r6)
 800a774:	1a0000cc 	andi	r8,r3,3
 800a778:	403ff81e 	bne	r8,zero,800a75c <__alt_data_end+0xfc00a75c>
 800a77c:	010000c4 	movi	r4,3
 800a780:	21c02d2e 	bgeu	r4,r7,800a838 <memset+0x100>
 800a784:	29003fcc 	andi	r4,r5,255
 800a788:	200c923a 	slli	r6,r4,8
 800a78c:	3108b03a 	or	r4,r6,r4
 800a790:	200c943a 	slli	r6,r4,16
 800a794:	218cb03a 	or	r6,r4,r6
 800a798:	010003c4 	movi	r4,15
 800a79c:	21c0182e 	bgeu	r4,r7,800a800 <memset+0xc8>
 800a7a0:	3b3ffc04 	addi	r12,r7,-16
 800a7a4:	6018d13a 	srli	r12,r12,4
 800a7a8:	1a000104 	addi	r8,r3,4
 800a7ac:	1ac00204 	addi	r11,r3,8
 800a7b0:	6008913a 	slli	r4,r12,4
 800a7b4:	1a800304 	addi	r10,r3,12
 800a7b8:	1813883a 	mov	r9,r3
 800a7bc:	21000504 	addi	r4,r4,20
 800a7c0:	1909883a 	add	r4,r3,r4
 800a7c4:	49800015 	stw	r6,0(r9)
 800a7c8:	41800015 	stw	r6,0(r8)
 800a7cc:	59800015 	stw	r6,0(r11)
 800a7d0:	51800015 	stw	r6,0(r10)
 800a7d4:	42000404 	addi	r8,r8,16
 800a7d8:	4a400404 	addi	r9,r9,16
 800a7dc:	5ac00404 	addi	r11,r11,16
 800a7e0:	52800404 	addi	r10,r10,16
 800a7e4:	413ff71e 	bne	r8,r4,800a7c4 <__alt_data_end+0xfc00a7c4>
 800a7e8:	63000044 	addi	r12,r12,1
 800a7ec:	6018913a 	slli	r12,r12,4
 800a7f0:	39c003cc 	andi	r7,r7,15
 800a7f4:	010000c4 	movi	r4,3
 800a7f8:	1b07883a 	add	r3,r3,r12
 800a7fc:	21c00e2e 	bgeu	r4,r7,800a838 <memset+0x100>
 800a800:	1813883a 	mov	r9,r3
 800a804:	3811883a 	mov	r8,r7
 800a808:	010000c4 	movi	r4,3
 800a80c:	49800015 	stw	r6,0(r9)
 800a810:	423fff04 	addi	r8,r8,-4
 800a814:	4a400104 	addi	r9,r9,4
 800a818:	223ffc36 	bltu	r4,r8,800a80c <__alt_data_end+0xfc00a80c>
 800a81c:	393fff04 	addi	r4,r7,-4
 800a820:	2008d0ba 	srli	r4,r4,2
 800a824:	39c000cc 	andi	r7,r7,3
 800a828:	21000044 	addi	r4,r4,1
 800a82c:	2109883a 	add	r4,r4,r4
 800a830:	2109883a 	add	r4,r4,r4
 800a834:	1907883a 	add	r3,r3,r4
 800a838:	38000526 	beq	r7,zero,800a850 <memset+0x118>
 800a83c:	19cf883a 	add	r7,r3,r7
 800a840:	19400005 	stb	r5,0(r3)
 800a844:	18c00044 	addi	r3,r3,1
 800a848:	38fffd1e 	bne	r7,r3,800a840 <__alt_data_end+0xfc00a840>
 800a84c:	f800283a 	ret
 800a850:	f800283a 	ret
 800a854:	2007883a 	mov	r3,r4
 800a858:	300f883a 	mov	r7,r6
 800a85c:	003fc706 	br	800a77c <__alt_data_end+0xfc00a77c>

0800a860 <_printf_r>:
 800a860:	defffd04 	addi	sp,sp,-12
 800a864:	2805883a 	mov	r2,r5
 800a868:	dfc00015 	stw	ra,0(sp)
 800a86c:	d9800115 	stw	r6,4(sp)
 800a870:	d9c00215 	stw	r7,8(sp)
 800a874:	21400217 	ldw	r5,8(r4)
 800a878:	d9c00104 	addi	r7,sp,4
 800a87c:	100d883a 	mov	r6,r2
 800a880:	800aab40 	call	800aab4 <___vfprintf_internal_r>
 800a884:	dfc00017 	ldw	ra,0(sp)
 800a888:	dec00304 	addi	sp,sp,12
 800a88c:	f800283a 	ret

0800a890 <printf>:
 800a890:	defffc04 	addi	sp,sp,-16
 800a894:	dfc00015 	stw	ra,0(sp)
 800a898:	d9400115 	stw	r5,4(sp)
 800a89c:	d9800215 	stw	r6,8(sp)
 800a8a0:	d9c00315 	stw	r7,12(sp)
 800a8a4:	00821974 	movhi	r2,2149
 800a8a8:	10be7904 	addi	r2,r2,-1564
 800a8ac:	10800017 	ldw	r2,0(r2)
 800a8b0:	200b883a 	mov	r5,r4
 800a8b4:	d9800104 	addi	r6,sp,4
 800a8b8:	11000217 	ldw	r4,8(r2)
 800a8bc:	800cd900 	call	800cd90 <__vfprintf_internal>
 800a8c0:	dfc00017 	ldw	ra,0(sp)
 800a8c4:	dec00404 	addi	sp,sp,16
 800a8c8:	f800283a 	ret

0800a8cc <_puts_r>:
 800a8cc:	defff604 	addi	sp,sp,-40
 800a8d0:	dc000715 	stw	r16,28(sp)
 800a8d4:	2021883a 	mov	r16,r4
 800a8d8:	2809883a 	mov	r4,r5
 800a8dc:	dc400815 	stw	r17,32(sp)
 800a8e0:	dfc00915 	stw	ra,36(sp)
 800a8e4:	2823883a 	mov	r17,r5
 800a8e8:	800aa1c0 	call	800aa1c <strlen>
 800a8ec:	10c00044 	addi	r3,r2,1
 800a8f0:	d8800115 	stw	r2,4(sp)
 800a8f4:	00821974 	movhi	r2,2149
 800a8f8:	10b73a04 	addi	r2,r2,-8984
 800a8fc:	d8800215 	stw	r2,8(sp)
 800a900:	00800044 	movi	r2,1
 800a904:	d8800315 	stw	r2,12(sp)
 800a908:	00800084 	movi	r2,2
 800a90c:	dc400015 	stw	r17,0(sp)
 800a910:	d8c00615 	stw	r3,24(sp)
 800a914:	dec00415 	stw	sp,16(sp)
 800a918:	d8800515 	stw	r2,20(sp)
 800a91c:	80000226 	beq	r16,zero,800a928 <_puts_r+0x5c>
 800a920:	80800e17 	ldw	r2,56(r16)
 800a924:	10001426 	beq	r2,zero,800a978 <_puts_r+0xac>
 800a928:	81400217 	ldw	r5,8(r16)
 800a92c:	2880030b 	ldhu	r2,12(r5)
 800a930:	10c8000c 	andi	r3,r2,8192
 800a934:	1800061e 	bne	r3,zero,800a950 <_puts_r+0x84>
 800a938:	29001917 	ldw	r4,100(r5)
 800a93c:	00f7ffc4 	movi	r3,-8193
 800a940:	10880014 	ori	r2,r2,8192
 800a944:	20c6703a 	and	r3,r4,r3
 800a948:	2880030d 	sth	r2,12(r5)
 800a94c:	28c01915 	stw	r3,100(r5)
 800a950:	d9800404 	addi	r6,sp,16
 800a954:	8009883a 	mov	r4,r16
 800a958:	800f2f80 	call	800f2f8 <__sfvwrite_r>
 800a95c:	1000091e 	bne	r2,zero,800a984 <_puts_r+0xb8>
 800a960:	00800284 	movi	r2,10
 800a964:	dfc00917 	ldw	ra,36(sp)
 800a968:	dc400817 	ldw	r17,32(sp)
 800a96c:	dc000717 	ldw	r16,28(sp)
 800a970:	dec00a04 	addi	sp,sp,40
 800a974:	f800283a 	ret
 800a978:	8009883a 	mov	r4,r16
 800a97c:	800ee740 	call	800ee74 <__sinit>
 800a980:	003fe906 	br	800a928 <__alt_data_end+0xfc00a928>
 800a984:	00bfffc4 	movi	r2,-1
 800a988:	003ff606 	br	800a964 <__alt_data_end+0xfc00a964>

0800a98c <puts>:
 800a98c:	00821974 	movhi	r2,2149
 800a990:	10be7904 	addi	r2,r2,-1564
 800a994:	200b883a 	mov	r5,r4
 800a998:	11000017 	ldw	r4,0(r2)
 800a99c:	800a8cc1 	jmpi	800a8cc <_puts_r>

0800a9a0 <srand>:
 800a9a0:	00821974 	movhi	r2,2149
 800a9a4:	10be7904 	addi	r2,r2,-1564
 800a9a8:	10800017 	ldw	r2,0(r2)
 800a9ac:	11002915 	stw	r4,164(r2)
 800a9b0:	10002a15 	stw	zero,168(r2)
 800a9b4:	f800283a 	ret

0800a9b8 <rand>:
 800a9b8:	00821974 	movhi	r2,2149
 800a9bc:	defffe04 	addi	sp,sp,-8
 800a9c0:	10be7904 	addi	r2,r2,-1564
 800a9c4:	dc000015 	stw	r16,0(sp)
 800a9c8:	14000017 	ldw	r16,0(r2)
 800a9cc:	dfc00115 	stw	ra,4(sp)
 800a9d0:	01932574 	movhi	r6,19605
 800a9d4:	81002917 	ldw	r4,164(r16)
 800a9d8:	81402a17 	ldw	r5,168(r16)
 800a9dc:	01d614b4 	movhi	r7,22610
 800a9e0:	319fcb44 	addi	r6,r6,32557
 800a9e4:	39fd0b44 	addi	r7,r7,-3027
 800a9e8:	8013f6c0 	call	8013f6c <__muldi3>
 800a9ec:	11000044 	addi	r4,r2,1
 800a9f0:	2085803a 	cmpltu	r2,r4,r2
 800a9f4:	10c7883a 	add	r3,r2,r3
 800a9f8:	00a00034 	movhi	r2,32768
 800a9fc:	10bfffc4 	addi	r2,r2,-1
 800aa00:	1884703a 	and	r2,r3,r2
 800aa04:	81002915 	stw	r4,164(r16)
 800aa08:	80c02a15 	stw	r3,168(r16)
 800aa0c:	dfc00117 	ldw	ra,4(sp)
 800aa10:	dc000017 	ldw	r16,0(sp)
 800aa14:	dec00204 	addi	sp,sp,8
 800aa18:	f800283a 	ret

0800aa1c <strlen>:
 800aa1c:	208000cc 	andi	r2,r4,3
 800aa20:	10002026 	beq	r2,zero,800aaa4 <strlen+0x88>
 800aa24:	20800007 	ldb	r2,0(r4)
 800aa28:	10002026 	beq	r2,zero,800aaac <strlen+0x90>
 800aa2c:	2005883a 	mov	r2,r4
 800aa30:	00000206 	br	800aa3c <strlen+0x20>
 800aa34:	10c00007 	ldb	r3,0(r2)
 800aa38:	18001826 	beq	r3,zero,800aa9c <strlen+0x80>
 800aa3c:	10800044 	addi	r2,r2,1
 800aa40:	10c000cc 	andi	r3,r2,3
 800aa44:	183ffb1e 	bne	r3,zero,800aa34 <__alt_data_end+0xfc00aa34>
 800aa48:	10c00017 	ldw	r3,0(r2)
 800aa4c:	01ffbff4 	movhi	r7,65279
 800aa50:	39ffbfc4 	addi	r7,r7,-257
 800aa54:	00ca303a 	nor	r5,zero,r3
 800aa58:	01a02074 	movhi	r6,32897
 800aa5c:	19c7883a 	add	r3,r3,r7
 800aa60:	31a02004 	addi	r6,r6,-32640
 800aa64:	1946703a 	and	r3,r3,r5
 800aa68:	1986703a 	and	r3,r3,r6
 800aa6c:	1800091e 	bne	r3,zero,800aa94 <strlen+0x78>
 800aa70:	10800104 	addi	r2,r2,4
 800aa74:	10c00017 	ldw	r3,0(r2)
 800aa78:	19cb883a 	add	r5,r3,r7
 800aa7c:	00c6303a 	nor	r3,zero,r3
 800aa80:	28c6703a 	and	r3,r5,r3
 800aa84:	1986703a 	and	r3,r3,r6
 800aa88:	183ff926 	beq	r3,zero,800aa70 <__alt_data_end+0xfc00aa70>
 800aa8c:	00000106 	br	800aa94 <strlen+0x78>
 800aa90:	10800044 	addi	r2,r2,1
 800aa94:	10c00007 	ldb	r3,0(r2)
 800aa98:	183ffd1e 	bne	r3,zero,800aa90 <__alt_data_end+0xfc00aa90>
 800aa9c:	1105c83a 	sub	r2,r2,r4
 800aaa0:	f800283a 	ret
 800aaa4:	2005883a 	mov	r2,r4
 800aaa8:	003fe706 	br	800aa48 <__alt_data_end+0xfc00aa48>
 800aaac:	0005883a 	mov	r2,zero
 800aab0:	f800283a 	ret

0800aab4 <___vfprintf_internal_r>:
 800aab4:	deffb804 	addi	sp,sp,-288
 800aab8:	dfc04715 	stw	ra,284(sp)
 800aabc:	ddc04515 	stw	r23,276(sp)
 800aac0:	dd404315 	stw	r21,268(sp)
 800aac4:	d9002d15 	stw	r4,180(sp)
 800aac8:	282f883a 	mov	r23,r5
 800aacc:	302b883a 	mov	r21,r6
 800aad0:	d9c02e15 	stw	r7,184(sp)
 800aad4:	df004615 	stw	fp,280(sp)
 800aad8:	dd804415 	stw	r22,272(sp)
 800aadc:	dd004215 	stw	r20,264(sp)
 800aae0:	dcc04115 	stw	r19,260(sp)
 800aae4:	dc804015 	stw	r18,256(sp)
 800aae8:	dc403f15 	stw	r17,252(sp)
 800aaec:	dc003e15 	stw	r16,248(sp)
 800aaf0:	800f9f40 	call	800f9f4 <_localeconv_r>
 800aaf4:	10800017 	ldw	r2,0(r2)
 800aaf8:	1009883a 	mov	r4,r2
 800aafc:	d8803415 	stw	r2,208(sp)
 800ab00:	800aa1c0 	call	800aa1c <strlen>
 800ab04:	d8803715 	stw	r2,220(sp)
 800ab08:	d8802d17 	ldw	r2,180(sp)
 800ab0c:	10000226 	beq	r2,zero,800ab18 <___vfprintf_internal_r+0x64>
 800ab10:	10800e17 	ldw	r2,56(r2)
 800ab14:	1000fb26 	beq	r2,zero,800af04 <___vfprintf_internal_r+0x450>
 800ab18:	b880030b 	ldhu	r2,12(r23)
 800ab1c:	10c8000c 	andi	r3,r2,8192
 800ab20:	1800061e 	bne	r3,zero,800ab3c <___vfprintf_internal_r+0x88>
 800ab24:	b9001917 	ldw	r4,100(r23)
 800ab28:	00f7ffc4 	movi	r3,-8193
 800ab2c:	10880014 	ori	r2,r2,8192
 800ab30:	20c6703a 	and	r3,r4,r3
 800ab34:	b880030d 	sth	r2,12(r23)
 800ab38:	b8c01915 	stw	r3,100(r23)
 800ab3c:	10c0020c 	andi	r3,r2,8
 800ab40:	1800c326 	beq	r3,zero,800ae50 <___vfprintf_internal_r+0x39c>
 800ab44:	b8c00417 	ldw	r3,16(r23)
 800ab48:	1800c126 	beq	r3,zero,800ae50 <___vfprintf_internal_r+0x39c>
 800ab4c:	1080068c 	andi	r2,r2,26
 800ab50:	00c00284 	movi	r3,10
 800ab54:	10c0c626 	beq	r2,r3,800ae70 <___vfprintf_internal_r+0x3bc>
 800ab58:	d8c00404 	addi	r3,sp,16
 800ab5c:	05021974 	movhi	r20,2149
 800ab60:	d9001e04 	addi	r4,sp,120
 800ab64:	a5374b84 	addi	r20,r20,-8914
 800ab68:	d8c01e15 	stw	r3,120(sp)
 800ab6c:	d8002015 	stw	zero,128(sp)
 800ab70:	d8001f15 	stw	zero,124(sp)
 800ab74:	d8003315 	stw	zero,204(sp)
 800ab78:	d8003615 	stw	zero,216(sp)
 800ab7c:	d8003815 	stw	zero,224(sp)
 800ab80:	1811883a 	mov	r8,r3
 800ab84:	d8003915 	stw	zero,228(sp)
 800ab88:	d8003a15 	stw	zero,232(sp)
 800ab8c:	d8002f15 	stw	zero,188(sp)
 800ab90:	d9002815 	stw	r4,160(sp)
 800ab94:	a8800007 	ldb	r2,0(r21)
 800ab98:	10028b26 	beq	r2,zero,800b5c8 <___vfprintf_internal_r+0xb14>
 800ab9c:	00c00944 	movi	r3,37
 800aba0:	a823883a 	mov	r17,r21
 800aba4:	10c0021e 	bne	r2,r3,800abb0 <___vfprintf_internal_r+0xfc>
 800aba8:	00001406 	br	800abfc <___vfprintf_internal_r+0x148>
 800abac:	10c00326 	beq	r2,r3,800abbc <___vfprintf_internal_r+0x108>
 800abb0:	8c400044 	addi	r17,r17,1
 800abb4:	88800007 	ldb	r2,0(r17)
 800abb8:	103ffc1e 	bne	r2,zero,800abac <__alt_data_end+0xfc00abac>
 800abbc:	8d61c83a 	sub	r16,r17,r21
 800abc0:	80000e26 	beq	r16,zero,800abfc <___vfprintf_internal_r+0x148>
 800abc4:	d8c02017 	ldw	r3,128(sp)
 800abc8:	d8801f17 	ldw	r2,124(sp)
 800abcc:	45400015 	stw	r21,0(r8)
 800abd0:	1c07883a 	add	r3,r3,r16
 800abd4:	10800044 	addi	r2,r2,1
 800abd8:	d8c02015 	stw	r3,128(sp)
 800abdc:	44000115 	stw	r16,4(r8)
 800abe0:	d8801f15 	stw	r2,124(sp)
 800abe4:	00c001c4 	movi	r3,7
 800abe8:	1880a916 	blt	r3,r2,800ae90 <___vfprintf_internal_r+0x3dc>
 800abec:	42000204 	addi	r8,r8,8
 800abf0:	d9402f17 	ldw	r5,188(sp)
 800abf4:	2c0b883a 	add	r5,r5,r16
 800abf8:	d9402f15 	stw	r5,188(sp)
 800abfc:	88800007 	ldb	r2,0(r17)
 800ac00:	1000aa26 	beq	r2,zero,800aeac <___vfprintf_internal_r+0x3f8>
 800ac04:	8d400044 	addi	r21,r17,1
 800ac08:	8c400047 	ldb	r17,1(r17)
 800ac0c:	0021883a 	mov	r16,zero
 800ac10:	00bfffc4 	movi	r2,-1
 800ac14:	0025883a 	mov	r18,zero
 800ac18:	dc002905 	stb	r16,164(sp)
 800ac1c:	d8002785 	stb	zero,158(sp)
 800ac20:	d8002b05 	stb	zero,172(sp)
 800ac24:	d8802a15 	stw	r2,168(sp)
 800ac28:	d8003115 	stw	zero,196(sp)
 800ac2c:	04c01604 	movi	r19,88
 800ac30:	05800244 	movi	r22,9
 800ac34:	9021883a 	mov	r16,r18
 800ac38:	4039883a 	mov	fp,r8
 800ac3c:	ad400044 	addi	r21,r21,1
 800ac40:	88bff804 	addi	r2,r17,-32
 800ac44:	98833236 	bltu	r19,r2,800b910 <___vfprintf_internal_r+0xe5c>
 800ac48:	100490ba 	slli	r2,r2,2
 800ac4c:	00c20074 	movhi	r3,2049
 800ac50:	18eb1804 	addi	r3,r3,-21408
 800ac54:	10c5883a 	add	r2,r2,r3
 800ac58:	10800017 	ldw	r2,0(r2)
 800ac5c:	1000683a 	jmp	r2
 800ac60:	0800b808 	cmpgei	zero,at,736
 800ac64:	0800b910 	cmplti	zero,at,740
 800ac68:	0800b910 	cmplti	zero,at,740
 800ac6c:	0800b828 	cmpgeui	zero,at,736
 800ac70:	0800b910 	cmplti	zero,at,740
 800ac74:	0800b910 	cmplti	zero,at,740
 800ac78:	0800b910 	cmplti	zero,at,740
 800ac7c:	0800b910 	cmplti	zero,at,740
 800ac80:	0800b910 	cmplti	zero,at,740
 800ac84:	0800b910 	cmplti	zero,at,740
 800ac88:	0800af10 	cmplti	zero,at,700
 800ac8c:	0800b718 	cmpnei	zero,at,732
 800ac90:	0800b910 	cmplti	zero,at,740
 800ac94:	0800add4 	ori	zero,at,695
 800ac98:	0800af34 	orhi	zero,at,700
 800ac9c:	0800b910 	cmplti	zero,at,740
 800aca0:	0800af84 	addi	zero,at,702
 800aca4:	0800af90 	cmplti	zero,at,702
 800aca8:	0800af90 	cmplti	zero,at,702
 800acac:	0800af90 	cmplti	zero,at,702
 800acb0:	0800af90 	cmplti	zero,at,702
 800acb4:	0800af90 	cmplti	zero,at,702
 800acb8:	0800af90 	cmplti	zero,at,702
 800acbc:	0800af90 	cmplti	zero,at,702
 800acc0:	0800af90 	cmplti	zero,at,702
 800acc4:	0800af90 	cmplti	zero,at,702
 800acc8:	0800b910 	cmplti	zero,at,740
 800accc:	0800b910 	cmplti	zero,at,740
 800acd0:	0800b910 	cmplti	zero,at,740
 800acd4:	0800b910 	cmplti	zero,at,740
 800acd8:	0800b910 	cmplti	zero,at,740
 800acdc:	0800b910 	cmplti	zero,at,740
 800ace0:	0800b910 	cmplti	zero,at,740
 800ace4:	0800b910 	cmplti	zero,at,740
 800ace8:	0800b910 	cmplti	zero,at,740
 800acec:	0800b910 	cmplti	zero,at,740
 800acf0:	0800afcc 	andi	zero,at,703
 800acf4:	0800b094 	ori	zero,at,706
 800acf8:	0800b910 	cmplti	zero,at,740
 800acfc:	0800b094 	ori	zero,at,706
 800ad00:	0800b910 	cmplti	zero,at,740
 800ad04:	0800b910 	cmplti	zero,at,740
 800ad08:	0800b910 	cmplti	zero,at,740
 800ad0c:	0800b910 	cmplti	zero,at,740
 800ad10:	0800b140 	call	800b14 <__alt_exception_stack_pointer+0x7ffb14>
 800ad14:	0800b910 	cmplti	zero,at,740
 800ad18:	0800b910 	cmplti	zero,at,740
 800ad1c:	0800b14c 	andi	zero,at,709
 800ad20:	0800b910 	cmplti	zero,at,740
 800ad24:	0800b910 	cmplti	zero,at,740
 800ad28:	0800b910 	cmplti	zero,at,740
 800ad2c:	0800b910 	cmplti	zero,at,740
 800ad30:	0800b910 	cmplti	zero,at,740
 800ad34:	0800b5d0 	cmplti	zero,at,727
 800ad38:	0800b910 	cmplti	zero,at,740
 800ad3c:	0800b910 	cmplti	zero,at,740
 800ad40:	0800b63c 	xorhi	zero,at,728
 800ad44:	0800b910 	cmplti	zero,at,740
 800ad48:	0800b910 	cmplti	zero,at,740
 800ad4c:	0800b910 	cmplti	zero,at,740
 800ad50:	0800b910 	cmplti	zero,at,740
 800ad54:	0800b910 	cmplti	zero,at,740
 800ad58:	0800b910 	cmplti	zero,at,740
 800ad5c:	0800b910 	cmplti	zero,at,740
 800ad60:	0800b910 	cmplti	zero,at,740
 800ad64:	0800b910 	cmplti	zero,at,740
 800ad68:	0800b910 	cmplti	zero,at,740
 800ad6c:	0800b8b4 	orhi	zero,at,738
 800ad70:	0800b834 	orhi	zero,at,736
 800ad74:	0800b094 	ori	zero,at,706
 800ad78:	0800b094 	ori	zero,at,706
 800ad7c:	0800b094 	ori	zero,at,706
 800ad80:	0800b854 	ori	zero,at,737
 800ad84:	0800b834 	orhi	zero,at,736
 800ad88:	0800b910 	cmplti	zero,at,740
 800ad8c:	0800b910 	cmplti	zero,at,740
 800ad90:	0800b860 	cmpeqi	zero,at,737
 800ad94:	0800b910 	cmplti	zero,at,740
 800ad98:	0800b874 	orhi	zero,at,737
 800ad9c:	0800b6f8 	rdprs	zero,at,731
 800ada0:	0800ade0 	cmpeqi	zero,at,695
 800ada4:	0800b730 	cmpltui	zero,at,732
 800ada8:	0800b910 	cmplti	zero,at,740
 800adac:	0800b73c 	xorhi	zero,at,732
 800adb0:	0800b910 	cmplti	zero,at,740
 800adb4:	0800b7a0 	cmpeqi	zero,at,734
 800adb8:	0800b910 	cmplti	zero,at,740
 800adbc:	0800b910 	cmplti	zero,at,740
 800adc0:	0800b7c0 	call	800b7c <__alt_exception_stack_pointer+0x7ffb7c>
 800adc4:	d8c03117 	ldw	r3,196(sp)
 800adc8:	d8802e15 	stw	r2,184(sp)
 800adcc:	00c7c83a 	sub	r3,zero,r3
 800add0:	d8c03115 	stw	r3,196(sp)
 800add4:	84000114 	ori	r16,r16,4
 800add8:	ac400007 	ldb	r17,0(r21)
 800addc:	003f9706 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800ade0:	00800c04 	movi	r2,48
 800ade4:	d8802705 	stb	r2,156(sp)
 800ade8:	00801e04 	movi	r2,120
 800adec:	d8802745 	stb	r2,157(sp)
 800adf0:	d9002a17 	ldw	r4,168(sp)
 800adf4:	d8802e17 	ldw	r2,184(sp)
 800adf8:	d8002785 	stb	zero,158(sp)
 800adfc:	e011883a 	mov	r8,fp
 800ae00:	10c00104 	addi	r3,r2,4
 800ae04:	14c00017 	ldw	r19,0(r2)
 800ae08:	002d883a 	mov	r22,zero
 800ae0c:	80800094 	ori	r2,r16,2
 800ae10:	2002ca16 	blt	r4,zero,800b93c <___vfprintf_internal_r+0xe88>
 800ae14:	00bfdfc4 	movi	r2,-129
 800ae18:	80a4703a 	and	r18,r16,r2
 800ae1c:	d8c02e15 	stw	r3,184(sp)
 800ae20:	94800094 	ori	r18,r18,2
 800ae24:	9802b41e 	bne	r19,zero,800b8f8 <___vfprintf_internal_r+0xe44>
 800ae28:	01421974 	movhi	r5,2149
 800ae2c:	29774404 	addi	r5,r5,-8944
 800ae30:	d9403915 	stw	r5,228(sp)
 800ae34:	04401e04 	movi	r17,120
 800ae38:	d8802a17 	ldw	r2,168(sp)
 800ae3c:	0039883a 	mov	fp,zero
 800ae40:	1001fa26 	beq	r2,zero,800b62c <___vfprintf_internal_r+0xb78>
 800ae44:	0027883a 	mov	r19,zero
 800ae48:	002d883a 	mov	r22,zero
 800ae4c:	00021906 	br	800b6b4 <___vfprintf_internal_r+0xc00>
 800ae50:	d9002d17 	ldw	r4,180(sp)
 800ae54:	b80b883a 	mov	r5,r23
 800ae58:	800ce680 	call	800ce68 <__swsetup_r>
 800ae5c:	1005dc1e 	bne	r2,zero,800c5d0 <___vfprintf_internal_r+0x1b1c>
 800ae60:	b880030b 	ldhu	r2,12(r23)
 800ae64:	00c00284 	movi	r3,10
 800ae68:	1080068c 	andi	r2,r2,26
 800ae6c:	10ff3a1e 	bne	r2,r3,800ab58 <__alt_data_end+0xfc00ab58>
 800ae70:	b880038f 	ldh	r2,14(r23)
 800ae74:	103f3816 	blt	r2,zero,800ab58 <__alt_data_end+0xfc00ab58>
 800ae78:	d9c02e17 	ldw	r7,184(sp)
 800ae7c:	d9002d17 	ldw	r4,180(sp)
 800ae80:	a80d883a 	mov	r6,r21
 800ae84:	b80b883a 	mov	r5,r23
 800ae88:	800cdac0 	call	800cdac <__sbprintf>
 800ae8c:	00001106 	br	800aed4 <___vfprintf_internal_r+0x420>
 800ae90:	d9002d17 	ldw	r4,180(sp)
 800ae94:	d9801e04 	addi	r6,sp,120
 800ae98:	b80b883a 	mov	r5,r23
 800ae9c:	80120240 	call	8012024 <__sprint_r>
 800aea0:	1000081e 	bne	r2,zero,800aec4 <___vfprintf_internal_r+0x410>
 800aea4:	da000404 	addi	r8,sp,16
 800aea8:	003f5106 	br	800abf0 <__alt_data_end+0xfc00abf0>
 800aeac:	d8802017 	ldw	r2,128(sp)
 800aeb0:	10000426 	beq	r2,zero,800aec4 <___vfprintf_internal_r+0x410>
 800aeb4:	d9002d17 	ldw	r4,180(sp)
 800aeb8:	d9801e04 	addi	r6,sp,120
 800aebc:	b80b883a 	mov	r5,r23
 800aec0:	80120240 	call	8012024 <__sprint_r>
 800aec4:	b880030b 	ldhu	r2,12(r23)
 800aec8:	1080100c 	andi	r2,r2,64
 800aecc:	1005c01e 	bne	r2,zero,800c5d0 <___vfprintf_internal_r+0x1b1c>
 800aed0:	d8802f17 	ldw	r2,188(sp)
 800aed4:	dfc04717 	ldw	ra,284(sp)
 800aed8:	df004617 	ldw	fp,280(sp)
 800aedc:	ddc04517 	ldw	r23,276(sp)
 800aee0:	dd804417 	ldw	r22,272(sp)
 800aee4:	dd404317 	ldw	r21,268(sp)
 800aee8:	dd004217 	ldw	r20,264(sp)
 800aeec:	dcc04117 	ldw	r19,260(sp)
 800aef0:	dc804017 	ldw	r18,256(sp)
 800aef4:	dc403f17 	ldw	r17,252(sp)
 800aef8:	dc003e17 	ldw	r16,248(sp)
 800aefc:	dec04804 	addi	sp,sp,288
 800af00:	f800283a 	ret
 800af04:	d9002d17 	ldw	r4,180(sp)
 800af08:	800ee740 	call	800ee74 <__sinit>
 800af0c:	003f0206 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800af10:	d9002e17 	ldw	r4,184(sp)
 800af14:	d9402e17 	ldw	r5,184(sp)
 800af18:	21000017 	ldw	r4,0(r4)
 800af1c:	28800104 	addi	r2,r5,4
 800af20:	d9003115 	stw	r4,196(sp)
 800af24:	203fa716 	blt	r4,zero,800adc4 <__alt_data_end+0xfc00adc4>
 800af28:	d8802e15 	stw	r2,184(sp)
 800af2c:	ac400007 	ldb	r17,0(r21)
 800af30:	003f4206 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800af34:	ac400007 	ldb	r17,0(r21)
 800af38:	01000a84 	movi	r4,42
 800af3c:	a8c00044 	addi	r3,r21,1
 800af40:	89075826 	beq	r17,r4,800cca4 <___vfprintf_internal_r+0x21f0>
 800af44:	8cbff404 	addi	r18,r17,-48
 800af48:	b486ae36 	bltu	r22,r18,800ca04 <___vfprintf_internal_r+0x1f50>
 800af4c:	0009883a 	mov	r4,zero
 800af50:	1823883a 	mov	r17,r3
 800af54:	01400284 	movi	r5,10
 800af58:	80071600 	call	8007160 <__mulsi3>
 800af5c:	88c00007 	ldb	r3,0(r17)
 800af60:	1489883a 	add	r4,r2,r18
 800af64:	8d400044 	addi	r21,r17,1
 800af68:	1cbff404 	addi	r18,r3,-48
 800af6c:	a823883a 	mov	r17,r21
 800af70:	b4bff82e 	bgeu	r22,r18,800af54 <__alt_data_end+0xfc00af54>
 800af74:	1823883a 	mov	r17,r3
 800af78:	2005f616 	blt	r4,zero,800c754 <___vfprintf_internal_r+0x1ca0>
 800af7c:	d9002a15 	stw	r4,168(sp)
 800af80:	003f2f06 	br	800ac40 <__alt_data_end+0xfc00ac40>
 800af84:	84002014 	ori	r16,r16,128
 800af88:	ac400007 	ldb	r17,0(r21)
 800af8c:	003f2b06 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800af90:	8cbff404 	addi	r18,r17,-48
 800af94:	d8003115 	stw	zero,196(sp)
 800af98:	0009883a 	mov	r4,zero
 800af9c:	a823883a 	mov	r17,r21
 800afa0:	01400284 	movi	r5,10
 800afa4:	80071600 	call	8007160 <__mulsi3>
 800afa8:	88c00007 	ldb	r3,0(r17)
 800afac:	9089883a 	add	r4,r18,r2
 800afb0:	ad400044 	addi	r21,r21,1
 800afb4:	1cbff404 	addi	r18,r3,-48
 800afb8:	a823883a 	mov	r17,r21
 800afbc:	b4bff82e 	bgeu	r22,r18,800afa0 <__alt_data_end+0xfc00afa0>
 800afc0:	1823883a 	mov	r17,r3
 800afc4:	d9003115 	stw	r4,196(sp)
 800afc8:	003f1d06 	br	800ac40 <__alt_data_end+0xfc00ac40>
 800afcc:	8025883a 	mov	r18,r16
 800afd0:	dc002903 	ldbu	r16,164(sp)
 800afd4:	e011883a 	mov	r8,fp
 800afd8:	84003fcc 	andi	r16,r16,255
 800afdc:	8007531e 	bne	r16,zero,800cd2c <___vfprintf_internal_r+0x2278>
 800afe0:	94800414 	ori	r18,r18,16
 800afe4:	9080080c 	andi	r2,r18,32
 800afe8:	1003a326 	beq	r2,zero,800be78 <___vfprintf_internal_r+0x13c4>
 800afec:	d9002e17 	ldw	r4,184(sp)
 800aff0:	20800117 	ldw	r2,4(r4)
 800aff4:	24c00017 	ldw	r19,0(r4)
 800aff8:	21000204 	addi	r4,r4,8
 800affc:	d9002e15 	stw	r4,184(sp)
 800b000:	102d883a 	mov	r22,r2
 800b004:	10047316 	blt	r2,zero,800c1d4 <___vfprintf_internal_r+0x1720>
 800b008:	d9002a17 	ldw	r4,168(sp)
 800b00c:	df002783 	ldbu	fp,158(sp)
 800b010:	2003e416 	blt	r4,zero,800bfa4 <___vfprintf_internal_r+0x14f0>
 800b014:	00ffdfc4 	movi	r3,-129
 800b018:	9d84b03a 	or	r2,r19,r22
 800b01c:	90e4703a 	and	r18,r18,r3
 800b020:	10018026 	beq	r2,zero,800b624 <___vfprintf_internal_r+0xb70>
 800b024:	b003ab26 	beq	r22,zero,800bed4 <___vfprintf_internal_r+0x1420>
 800b028:	dc402915 	stw	r17,164(sp)
 800b02c:	dc001e04 	addi	r16,sp,120
 800b030:	b023883a 	mov	r17,r22
 800b034:	402d883a 	mov	r22,r8
 800b038:	9809883a 	mov	r4,r19
 800b03c:	880b883a 	mov	r5,r17
 800b040:	01800284 	movi	r6,10
 800b044:	000f883a 	mov	r7,zero
 800b048:	80140780 	call	8014078 <__umoddi3>
 800b04c:	10800c04 	addi	r2,r2,48
 800b050:	843fffc4 	addi	r16,r16,-1
 800b054:	9809883a 	mov	r4,r19
 800b058:	880b883a 	mov	r5,r17
 800b05c:	80800005 	stb	r2,0(r16)
 800b060:	01800284 	movi	r6,10
 800b064:	000f883a 	mov	r7,zero
 800b068:	80069b00 	call	80069b0 <__udivdi3>
 800b06c:	1027883a 	mov	r19,r2
 800b070:	10c4b03a 	or	r2,r2,r3
 800b074:	1823883a 	mov	r17,r3
 800b078:	103fef1e 	bne	r2,zero,800b038 <__alt_data_end+0xfc00b038>
 800b07c:	d8c02817 	ldw	r3,160(sp)
 800b080:	dc402917 	ldw	r17,164(sp)
 800b084:	b011883a 	mov	r8,r22
 800b088:	1c07c83a 	sub	r3,r3,r16
 800b08c:	d8c02b15 	stw	r3,172(sp)
 800b090:	00005f06 	br	800b210 <___vfprintf_internal_r+0x75c>
 800b094:	8025883a 	mov	r18,r16
 800b098:	dc002903 	ldbu	r16,164(sp)
 800b09c:	e011883a 	mov	r8,fp
 800b0a0:	84003fcc 	andi	r16,r16,255
 800b0a4:	80071e1e 	bne	r16,zero,800cd20 <___vfprintf_internal_r+0x226c>
 800b0a8:	9080020c 	andi	r2,r18,8
 800b0ac:	1004af26 	beq	r2,zero,800c36c <___vfprintf_internal_r+0x18b8>
 800b0b0:	d9002e17 	ldw	r4,184(sp)
 800b0b4:	d9402e17 	ldw	r5,184(sp)
 800b0b8:	d8802e17 	ldw	r2,184(sp)
 800b0bc:	21000017 	ldw	r4,0(r4)
 800b0c0:	29400117 	ldw	r5,4(r5)
 800b0c4:	10800204 	addi	r2,r2,8
 800b0c8:	d9003615 	stw	r4,216(sp)
 800b0cc:	d9403815 	stw	r5,224(sp)
 800b0d0:	d8802e15 	stw	r2,184(sp)
 800b0d4:	d9003617 	ldw	r4,216(sp)
 800b0d8:	d9403817 	ldw	r5,224(sp)
 800b0dc:	da003d15 	stw	r8,244(sp)
 800b0e0:	04000044 	movi	r16,1
 800b0e4:	8011c480 	call	8011c48 <__fpclassifyd>
 800b0e8:	da003d17 	ldw	r8,244(sp)
 800b0ec:	1404441e 	bne	r2,r16,800c200 <___vfprintf_internal_r+0x174c>
 800b0f0:	d9003617 	ldw	r4,216(sp)
 800b0f4:	d9403817 	ldw	r5,224(sp)
 800b0f8:	000d883a 	mov	r6,zero
 800b0fc:	000f883a 	mov	r7,zero
 800b100:	80150940 	call	8015094 <__ledf2>
 800b104:	da003d17 	ldw	r8,244(sp)
 800b108:	1005e316 	blt	r2,zero,800c898 <___vfprintf_internal_r+0x1de4>
 800b10c:	df002783 	ldbu	fp,158(sp)
 800b110:	008011c4 	movi	r2,71
 800b114:	1445580e 	bge	r2,r17,800c678 <___vfprintf_internal_r+0x1bc4>
 800b118:	04021974 	movhi	r16,2149
 800b11c:	84373c04 	addi	r16,r16,-8976
 800b120:	00c000c4 	movi	r3,3
 800b124:	00bfdfc4 	movi	r2,-129
 800b128:	d8c02915 	stw	r3,164(sp)
 800b12c:	90a4703a 	and	r18,r18,r2
 800b130:	d8c02b15 	stw	r3,172(sp)
 800b134:	d8002a15 	stw	zero,168(sp)
 800b138:	d8003215 	stw	zero,200(sp)
 800b13c:	00003a06 	br	800b228 <___vfprintf_internal_r+0x774>
 800b140:	84000214 	ori	r16,r16,8
 800b144:	ac400007 	ldb	r17,0(r21)
 800b148:	003ebc06 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b14c:	8025883a 	mov	r18,r16
 800b150:	dc002903 	ldbu	r16,164(sp)
 800b154:	e011883a 	mov	r8,fp
 800b158:	84003fcc 	andi	r16,r16,255
 800b15c:	8007001e 	bne	r16,zero,800cd60 <___vfprintf_internal_r+0x22ac>
 800b160:	94800414 	ori	r18,r18,16
 800b164:	9080080c 	andi	r2,r18,32
 800b168:	1002fa26 	beq	r2,zero,800bd54 <___vfprintf_internal_r+0x12a0>
 800b16c:	d9002e17 	ldw	r4,184(sp)
 800b170:	d9402a17 	ldw	r5,168(sp)
 800b174:	d8002785 	stb	zero,158(sp)
 800b178:	20800204 	addi	r2,r4,8
 800b17c:	24c00017 	ldw	r19,0(r4)
 800b180:	25800117 	ldw	r22,4(r4)
 800b184:	2804b116 	blt	r5,zero,800c44c <___vfprintf_internal_r+0x1998>
 800b188:	013fdfc4 	movi	r4,-129
 800b18c:	9d86b03a 	or	r3,r19,r22
 800b190:	d8802e15 	stw	r2,184(sp)
 800b194:	9124703a 	and	r18,r18,r4
 800b198:	1802fb1e 	bne	r3,zero,800bd88 <___vfprintf_internal_r+0x12d4>
 800b19c:	d8c02a17 	ldw	r3,168(sp)
 800b1a0:	0039883a 	mov	fp,zero
 800b1a4:	1805e526 	beq	r3,zero,800c93c <___vfprintf_internal_r+0x1e88>
 800b1a8:	0027883a 	mov	r19,zero
 800b1ac:	002d883a 	mov	r22,zero
 800b1b0:	dc001e04 	addi	r16,sp,120
 800b1b4:	9806d0fa 	srli	r3,r19,3
 800b1b8:	b008977a 	slli	r4,r22,29
 800b1bc:	b02cd0fa 	srli	r22,r22,3
 800b1c0:	9cc001cc 	andi	r19,r19,7
 800b1c4:	98800c04 	addi	r2,r19,48
 800b1c8:	843fffc4 	addi	r16,r16,-1
 800b1cc:	20e6b03a 	or	r19,r4,r3
 800b1d0:	80800005 	stb	r2,0(r16)
 800b1d4:	9d86b03a 	or	r3,r19,r22
 800b1d8:	183ff61e 	bne	r3,zero,800b1b4 <__alt_data_end+0xfc00b1b4>
 800b1dc:	90c0004c 	andi	r3,r18,1
 800b1e0:	18014126 	beq	r3,zero,800b6e8 <___vfprintf_internal_r+0xc34>
 800b1e4:	10803fcc 	andi	r2,r2,255
 800b1e8:	1080201c 	xori	r2,r2,128
 800b1ec:	10bfe004 	addi	r2,r2,-128
 800b1f0:	00c00c04 	movi	r3,48
 800b1f4:	10c13c26 	beq	r2,r3,800b6e8 <___vfprintf_internal_r+0xc34>
 800b1f8:	80ffffc5 	stb	r3,-1(r16)
 800b1fc:	d8c02817 	ldw	r3,160(sp)
 800b200:	80bfffc4 	addi	r2,r16,-1
 800b204:	1021883a 	mov	r16,r2
 800b208:	1887c83a 	sub	r3,r3,r2
 800b20c:	d8c02b15 	stw	r3,172(sp)
 800b210:	d8802b17 	ldw	r2,172(sp)
 800b214:	d9002a17 	ldw	r4,168(sp)
 800b218:	1100010e 	bge	r2,r4,800b220 <___vfprintf_internal_r+0x76c>
 800b21c:	2005883a 	mov	r2,r4
 800b220:	d8802915 	stw	r2,164(sp)
 800b224:	d8003215 	stw	zero,200(sp)
 800b228:	e7003fcc 	andi	fp,fp,255
 800b22c:	e700201c 	xori	fp,fp,128
 800b230:	e73fe004 	addi	fp,fp,-128
 800b234:	e0000326 	beq	fp,zero,800b244 <___vfprintf_internal_r+0x790>
 800b238:	d8c02917 	ldw	r3,164(sp)
 800b23c:	18c00044 	addi	r3,r3,1
 800b240:	d8c02915 	stw	r3,164(sp)
 800b244:	90c0008c 	andi	r3,r18,2
 800b248:	d8c02c15 	stw	r3,176(sp)
 800b24c:	18000326 	beq	r3,zero,800b25c <___vfprintf_internal_r+0x7a8>
 800b250:	d8c02917 	ldw	r3,164(sp)
 800b254:	18c00084 	addi	r3,r3,2
 800b258:	d8c02915 	stw	r3,164(sp)
 800b25c:	90c0210c 	andi	r3,r18,132
 800b260:	d8c03015 	stw	r3,192(sp)
 800b264:	1801c51e 	bne	r3,zero,800b97c <___vfprintf_internal_r+0xec8>
 800b268:	d9003117 	ldw	r4,196(sp)
 800b26c:	d8c02917 	ldw	r3,164(sp)
 800b270:	20e7c83a 	sub	r19,r4,r3
 800b274:	04c1c10e 	bge	zero,r19,800b97c <___vfprintf_internal_r+0xec8>
 800b278:	02400404 	movi	r9,16
 800b27c:	d8c02017 	ldw	r3,128(sp)
 800b280:	d8801f17 	ldw	r2,124(sp)
 800b284:	4cc52f0e 	bge	r9,r19,800c744 <___vfprintf_internal_r+0x1c90>
 800b288:	01421974 	movhi	r5,2149
 800b28c:	29774f84 	addi	r5,r5,-8898
 800b290:	dc403b15 	stw	r17,236(sp)
 800b294:	d9403515 	stw	r5,212(sp)
 800b298:	9823883a 	mov	r17,r19
 800b29c:	482d883a 	mov	r22,r9
 800b2a0:	9027883a 	mov	r19,r18
 800b2a4:	070001c4 	movi	fp,7
 800b2a8:	8025883a 	mov	r18,r16
 800b2ac:	dc002d17 	ldw	r16,180(sp)
 800b2b0:	00000306 	br	800b2c0 <___vfprintf_internal_r+0x80c>
 800b2b4:	8c7ffc04 	addi	r17,r17,-16
 800b2b8:	42000204 	addi	r8,r8,8
 800b2bc:	b440130e 	bge	r22,r17,800b30c <___vfprintf_internal_r+0x858>
 800b2c0:	01021974 	movhi	r4,2149
 800b2c4:	18c00404 	addi	r3,r3,16
 800b2c8:	10800044 	addi	r2,r2,1
 800b2cc:	21374f84 	addi	r4,r4,-8898
 800b2d0:	41000015 	stw	r4,0(r8)
 800b2d4:	45800115 	stw	r22,4(r8)
 800b2d8:	d8c02015 	stw	r3,128(sp)
 800b2dc:	d8801f15 	stw	r2,124(sp)
 800b2e0:	e0bff40e 	bge	fp,r2,800b2b4 <__alt_data_end+0xfc00b2b4>
 800b2e4:	d9801e04 	addi	r6,sp,120
 800b2e8:	b80b883a 	mov	r5,r23
 800b2ec:	8009883a 	mov	r4,r16
 800b2f0:	80120240 	call	8012024 <__sprint_r>
 800b2f4:	103ef31e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800b2f8:	8c7ffc04 	addi	r17,r17,-16
 800b2fc:	d8c02017 	ldw	r3,128(sp)
 800b300:	d8801f17 	ldw	r2,124(sp)
 800b304:	da000404 	addi	r8,sp,16
 800b308:	b47fed16 	blt	r22,r17,800b2c0 <__alt_data_end+0xfc00b2c0>
 800b30c:	9021883a 	mov	r16,r18
 800b310:	9825883a 	mov	r18,r19
 800b314:	8827883a 	mov	r19,r17
 800b318:	dc403b17 	ldw	r17,236(sp)
 800b31c:	d9403517 	ldw	r5,212(sp)
 800b320:	98c7883a 	add	r3,r19,r3
 800b324:	10800044 	addi	r2,r2,1
 800b328:	41400015 	stw	r5,0(r8)
 800b32c:	44c00115 	stw	r19,4(r8)
 800b330:	d8c02015 	stw	r3,128(sp)
 800b334:	d8801f15 	stw	r2,124(sp)
 800b338:	010001c4 	movi	r4,7
 800b33c:	2082c516 	blt	r4,r2,800be54 <___vfprintf_internal_r+0x13a0>
 800b340:	df002787 	ldb	fp,158(sp)
 800b344:	42000204 	addi	r8,r8,8
 800b348:	e0000c26 	beq	fp,zero,800b37c <___vfprintf_internal_r+0x8c8>
 800b34c:	d8801f17 	ldw	r2,124(sp)
 800b350:	d9002784 	addi	r4,sp,158
 800b354:	18c00044 	addi	r3,r3,1
 800b358:	10800044 	addi	r2,r2,1
 800b35c:	41000015 	stw	r4,0(r8)
 800b360:	01000044 	movi	r4,1
 800b364:	41000115 	stw	r4,4(r8)
 800b368:	d8c02015 	stw	r3,128(sp)
 800b36c:	d8801f15 	stw	r2,124(sp)
 800b370:	010001c4 	movi	r4,7
 800b374:	20825e16 	blt	r4,r2,800bcf0 <___vfprintf_internal_r+0x123c>
 800b378:	42000204 	addi	r8,r8,8
 800b37c:	d8802c17 	ldw	r2,176(sp)
 800b380:	10000c26 	beq	r2,zero,800b3b4 <___vfprintf_internal_r+0x900>
 800b384:	d8801f17 	ldw	r2,124(sp)
 800b388:	d9002704 	addi	r4,sp,156
 800b38c:	18c00084 	addi	r3,r3,2
 800b390:	10800044 	addi	r2,r2,1
 800b394:	41000015 	stw	r4,0(r8)
 800b398:	01000084 	movi	r4,2
 800b39c:	41000115 	stw	r4,4(r8)
 800b3a0:	d8c02015 	stw	r3,128(sp)
 800b3a4:	d8801f15 	stw	r2,124(sp)
 800b3a8:	010001c4 	movi	r4,7
 800b3ac:	20825816 	blt	r4,r2,800bd10 <___vfprintf_internal_r+0x125c>
 800b3b0:	42000204 	addi	r8,r8,8
 800b3b4:	d9003017 	ldw	r4,192(sp)
 800b3b8:	00802004 	movi	r2,128
 800b3bc:	2081bb26 	beq	r4,r2,800baac <___vfprintf_internal_r+0xff8>
 800b3c0:	d9402a17 	ldw	r5,168(sp)
 800b3c4:	d8802b17 	ldw	r2,172(sp)
 800b3c8:	28adc83a 	sub	r22,r5,r2
 800b3cc:	0580310e 	bge	zero,r22,800b494 <___vfprintf_internal_r+0x9e0>
 800b3d0:	07000404 	movi	fp,16
 800b3d4:	d8801f17 	ldw	r2,124(sp)
 800b3d8:	e584360e 	bge	fp,r22,800c4b4 <___vfprintf_internal_r+0x1a00>
 800b3dc:	01421974 	movhi	r5,2149
 800b3e0:	29774b84 	addi	r5,r5,-8914
 800b3e4:	dc402a15 	stw	r17,168(sp)
 800b3e8:	d9402c15 	stw	r5,176(sp)
 800b3ec:	b023883a 	mov	r17,r22
 800b3f0:	04c001c4 	movi	r19,7
 800b3f4:	a82d883a 	mov	r22,r21
 800b3f8:	902b883a 	mov	r21,r18
 800b3fc:	8025883a 	mov	r18,r16
 800b400:	dc002d17 	ldw	r16,180(sp)
 800b404:	00000306 	br	800b414 <___vfprintf_internal_r+0x960>
 800b408:	8c7ffc04 	addi	r17,r17,-16
 800b40c:	42000204 	addi	r8,r8,8
 800b410:	e440110e 	bge	fp,r17,800b458 <___vfprintf_internal_r+0x9a4>
 800b414:	18c00404 	addi	r3,r3,16
 800b418:	10800044 	addi	r2,r2,1
 800b41c:	45000015 	stw	r20,0(r8)
 800b420:	47000115 	stw	fp,4(r8)
 800b424:	d8c02015 	stw	r3,128(sp)
 800b428:	d8801f15 	stw	r2,124(sp)
 800b42c:	98bff60e 	bge	r19,r2,800b408 <__alt_data_end+0xfc00b408>
 800b430:	d9801e04 	addi	r6,sp,120
 800b434:	b80b883a 	mov	r5,r23
 800b438:	8009883a 	mov	r4,r16
 800b43c:	80120240 	call	8012024 <__sprint_r>
 800b440:	103ea01e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800b444:	8c7ffc04 	addi	r17,r17,-16
 800b448:	d8c02017 	ldw	r3,128(sp)
 800b44c:	d8801f17 	ldw	r2,124(sp)
 800b450:	da000404 	addi	r8,sp,16
 800b454:	e47fef16 	blt	fp,r17,800b414 <__alt_data_end+0xfc00b414>
 800b458:	9021883a 	mov	r16,r18
 800b45c:	a825883a 	mov	r18,r21
 800b460:	b02b883a 	mov	r21,r22
 800b464:	882d883a 	mov	r22,r17
 800b468:	dc402a17 	ldw	r17,168(sp)
 800b46c:	d9002c17 	ldw	r4,176(sp)
 800b470:	1d87883a 	add	r3,r3,r22
 800b474:	10800044 	addi	r2,r2,1
 800b478:	41000015 	stw	r4,0(r8)
 800b47c:	45800115 	stw	r22,4(r8)
 800b480:	d8c02015 	stw	r3,128(sp)
 800b484:	d8801f15 	stw	r2,124(sp)
 800b488:	010001c4 	movi	r4,7
 800b48c:	20821016 	blt	r4,r2,800bcd0 <___vfprintf_internal_r+0x121c>
 800b490:	42000204 	addi	r8,r8,8
 800b494:	9080400c 	andi	r2,r18,256
 800b498:	10013a1e 	bne	r2,zero,800b984 <___vfprintf_internal_r+0xed0>
 800b49c:	d9402b17 	ldw	r5,172(sp)
 800b4a0:	d8801f17 	ldw	r2,124(sp)
 800b4a4:	44000015 	stw	r16,0(r8)
 800b4a8:	1947883a 	add	r3,r3,r5
 800b4ac:	10800044 	addi	r2,r2,1
 800b4b0:	41400115 	stw	r5,4(r8)
 800b4b4:	d8c02015 	stw	r3,128(sp)
 800b4b8:	d8801f15 	stw	r2,124(sp)
 800b4bc:	010001c4 	movi	r4,7
 800b4c0:	2081f516 	blt	r4,r2,800bc98 <___vfprintf_internal_r+0x11e4>
 800b4c4:	42000204 	addi	r8,r8,8
 800b4c8:	9480010c 	andi	r18,r18,4
 800b4cc:	90003226 	beq	r18,zero,800b598 <___vfprintf_internal_r+0xae4>
 800b4d0:	d9403117 	ldw	r5,196(sp)
 800b4d4:	d8802917 	ldw	r2,164(sp)
 800b4d8:	28a1c83a 	sub	r16,r5,r2
 800b4dc:	04002e0e 	bge	zero,r16,800b598 <___vfprintf_internal_r+0xae4>
 800b4e0:	04400404 	movi	r17,16
 800b4e4:	d8801f17 	ldw	r2,124(sp)
 800b4e8:	8c04c40e 	bge	r17,r16,800c7fc <___vfprintf_internal_r+0x1d48>
 800b4ec:	01421974 	movhi	r5,2149
 800b4f0:	29774f84 	addi	r5,r5,-8898
 800b4f4:	d9403515 	stw	r5,212(sp)
 800b4f8:	048001c4 	movi	r18,7
 800b4fc:	dcc02d17 	ldw	r19,180(sp)
 800b500:	00000306 	br	800b510 <___vfprintf_internal_r+0xa5c>
 800b504:	843ffc04 	addi	r16,r16,-16
 800b508:	42000204 	addi	r8,r8,8
 800b50c:	8c00130e 	bge	r17,r16,800b55c <___vfprintf_internal_r+0xaa8>
 800b510:	01021974 	movhi	r4,2149
 800b514:	18c00404 	addi	r3,r3,16
 800b518:	10800044 	addi	r2,r2,1
 800b51c:	21374f84 	addi	r4,r4,-8898
 800b520:	41000015 	stw	r4,0(r8)
 800b524:	44400115 	stw	r17,4(r8)
 800b528:	d8c02015 	stw	r3,128(sp)
 800b52c:	d8801f15 	stw	r2,124(sp)
 800b530:	90bff40e 	bge	r18,r2,800b504 <__alt_data_end+0xfc00b504>
 800b534:	d9801e04 	addi	r6,sp,120
 800b538:	b80b883a 	mov	r5,r23
 800b53c:	9809883a 	mov	r4,r19
 800b540:	80120240 	call	8012024 <__sprint_r>
 800b544:	103e5f1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800b548:	843ffc04 	addi	r16,r16,-16
 800b54c:	d8c02017 	ldw	r3,128(sp)
 800b550:	d8801f17 	ldw	r2,124(sp)
 800b554:	da000404 	addi	r8,sp,16
 800b558:	8c3fed16 	blt	r17,r16,800b510 <__alt_data_end+0xfc00b510>
 800b55c:	d9403517 	ldw	r5,212(sp)
 800b560:	1c07883a 	add	r3,r3,r16
 800b564:	10800044 	addi	r2,r2,1
 800b568:	41400015 	stw	r5,0(r8)
 800b56c:	44000115 	stw	r16,4(r8)
 800b570:	d8c02015 	stw	r3,128(sp)
 800b574:	d8801f15 	stw	r2,124(sp)
 800b578:	010001c4 	movi	r4,7
 800b57c:	2080060e 	bge	r4,r2,800b598 <___vfprintf_internal_r+0xae4>
 800b580:	d9002d17 	ldw	r4,180(sp)
 800b584:	d9801e04 	addi	r6,sp,120
 800b588:	b80b883a 	mov	r5,r23
 800b58c:	80120240 	call	8012024 <__sprint_r>
 800b590:	103e4c1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800b594:	d8c02017 	ldw	r3,128(sp)
 800b598:	d8803117 	ldw	r2,196(sp)
 800b59c:	d9002917 	ldw	r4,164(sp)
 800b5a0:	1100010e 	bge	r2,r4,800b5a8 <___vfprintf_internal_r+0xaf4>
 800b5a4:	2005883a 	mov	r2,r4
 800b5a8:	d9402f17 	ldw	r5,188(sp)
 800b5ac:	288b883a 	add	r5,r5,r2
 800b5b0:	d9402f15 	stw	r5,188(sp)
 800b5b4:	1801c01e 	bne	r3,zero,800bcb8 <___vfprintf_internal_r+0x1204>
 800b5b8:	a8800007 	ldb	r2,0(r21)
 800b5bc:	d8001f15 	stw	zero,124(sp)
 800b5c0:	da000404 	addi	r8,sp,16
 800b5c4:	103d751e 	bne	r2,zero,800ab9c <__alt_data_end+0xfc00ab9c>
 800b5c8:	a823883a 	mov	r17,r21
 800b5cc:	003d8b06 	br	800abfc <__alt_data_end+0xfc00abfc>
 800b5d0:	8025883a 	mov	r18,r16
 800b5d4:	dc002903 	ldbu	r16,164(sp)
 800b5d8:	e011883a 	mov	r8,fp
 800b5dc:	84003fcc 	andi	r16,r16,255
 800b5e0:	8005e51e 	bne	r16,zero,800cd78 <___vfprintf_internal_r+0x22c4>
 800b5e4:	94800414 	ori	r18,r18,16
 800b5e8:	9080080c 	andi	r2,r18,32
 800b5ec:	10022b26 	beq	r2,zero,800be9c <___vfprintf_internal_r+0x13e8>
 800b5f0:	d9002e17 	ldw	r4,184(sp)
 800b5f4:	d9402a17 	ldw	r5,168(sp)
 800b5f8:	d8002785 	stb	zero,158(sp)
 800b5fc:	20c00204 	addi	r3,r4,8
 800b600:	24c00017 	ldw	r19,0(r4)
 800b604:	25800117 	ldw	r22,4(r4)
 800b608:	28042e16 	blt	r5,zero,800c6c4 <___vfprintf_internal_r+0x1c10>
 800b60c:	013fdfc4 	movi	r4,-129
 800b610:	9d84b03a 	or	r2,r19,r22
 800b614:	d8c02e15 	stw	r3,184(sp)
 800b618:	9124703a 	and	r18,r18,r4
 800b61c:	0039883a 	mov	fp,zero
 800b620:	103e801e 	bne	r2,zero,800b024 <__alt_data_end+0xfc00b024>
 800b624:	d9002a17 	ldw	r4,168(sp)
 800b628:	2002e01e 	bne	r4,zero,800c1ac <___vfprintf_internal_r+0x16f8>
 800b62c:	d8002a15 	stw	zero,168(sp)
 800b630:	d8002b15 	stw	zero,172(sp)
 800b634:	dc001e04 	addi	r16,sp,120
 800b638:	003ef506 	br	800b210 <__alt_data_end+0xfc00b210>
 800b63c:	8025883a 	mov	r18,r16
 800b640:	dc002903 	ldbu	r16,164(sp)
 800b644:	e011883a 	mov	r8,fp
 800b648:	84003fcc 	andi	r16,r16,255
 800b64c:	8005ba1e 	bne	r16,zero,800cd38 <___vfprintf_internal_r+0x2284>
 800b650:	01021974 	movhi	r4,2149
 800b654:	21373f04 	addi	r4,r4,-8964
 800b658:	d9003915 	stw	r4,228(sp)
 800b65c:	9080080c 	andi	r2,r18,32
 800b660:	10006126 	beq	r2,zero,800b7e8 <___vfprintf_internal_r+0xd34>
 800b664:	d9402e17 	ldw	r5,184(sp)
 800b668:	2cc00017 	ldw	r19,0(r5)
 800b66c:	2d800117 	ldw	r22,4(r5)
 800b670:	29400204 	addi	r5,r5,8
 800b674:	d9402e15 	stw	r5,184(sp)
 800b678:	9080004c 	andi	r2,r18,1
 800b67c:	1001ac26 	beq	r2,zero,800bd30 <___vfprintf_internal_r+0x127c>
 800b680:	9d84b03a 	or	r2,r19,r22
 800b684:	10038526 	beq	r2,zero,800c49c <___vfprintf_internal_r+0x19e8>
 800b688:	d8c02a17 	ldw	r3,168(sp)
 800b68c:	00800c04 	movi	r2,48
 800b690:	d8802705 	stb	r2,156(sp)
 800b694:	dc402745 	stb	r17,157(sp)
 800b698:	d8002785 	stb	zero,158(sp)
 800b69c:	90800094 	ori	r2,r18,2
 800b6a0:	18047916 	blt	r3,zero,800c888 <___vfprintf_internal_r+0x1dd4>
 800b6a4:	00bfdfc4 	movi	r2,-129
 800b6a8:	90a4703a 	and	r18,r18,r2
 800b6ac:	94800094 	ori	r18,r18,2
 800b6b0:	0039883a 	mov	fp,zero
 800b6b4:	d9003917 	ldw	r4,228(sp)
 800b6b8:	dc001e04 	addi	r16,sp,120
 800b6bc:	988003cc 	andi	r2,r19,15
 800b6c0:	b006973a 	slli	r3,r22,28
 800b6c4:	2085883a 	add	r2,r4,r2
 800b6c8:	9826d13a 	srli	r19,r19,4
 800b6cc:	10800003 	ldbu	r2,0(r2)
 800b6d0:	b02cd13a 	srli	r22,r22,4
 800b6d4:	843fffc4 	addi	r16,r16,-1
 800b6d8:	1ce6b03a 	or	r19,r3,r19
 800b6dc:	80800005 	stb	r2,0(r16)
 800b6e0:	9d84b03a 	or	r2,r19,r22
 800b6e4:	103ff51e 	bne	r2,zero,800b6bc <__alt_data_end+0xfc00b6bc>
 800b6e8:	d8c02817 	ldw	r3,160(sp)
 800b6ec:	1c07c83a 	sub	r3,r3,r16
 800b6f0:	d8c02b15 	stw	r3,172(sp)
 800b6f4:	003ec606 	br	800b210 <__alt_data_end+0xfc00b210>
 800b6f8:	8025883a 	mov	r18,r16
 800b6fc:	dc002903 	ldbu	r16,164(sp)
 800b700:	e011883a 	mov	r8,fp
 800b704:	84003fcc 	andi	r16,r16,255
 800b708:	803e9626 	beq	r16,zero,800b164 <__alt_data_end+0xfc00b164>
 800b70c:	d8c02b03 	ldbu	r3,172(sp)
 800b710:	d8c02785 	stb	r3,158(sp)
 800b714:	003e9306 	br	800b164 <__alt_data_end+0xfc00b164>
 800b718:	00c00044 	movi	r3,1
 800b71c:	d8c02905 	stb	r3,164(sp)
 800b720:	00c00ac4 	movi	r3,43
 800b724:	d8c02b05 	stb	r3,172(sp)
 800b728:	ac400007 	ldb	r17,0(r21)
 800b72c:	003d4306 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b730:	84000814 	ori	r16,r16,32
 800b734:	ac400007 	ldb	r17,0(r21)
 800b738:	003d4006 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b73c:	d8802e17 	ldw	r2,184(sp)
 800b740:	8025883a 	mov	r18,r16
 800b744:	d8002785 	stb	zero,158(sp)
 800b748:	14000017 	ldw	r16,0(r2)
 800b74c:	e011883a 	mov	r8,fp
 800b750:	14c00104 	addi	r19,r2,4
 800b754:	80042d26 	beq	r16,zero,800c80c <___vfprintf_internal_r+0x1d58>
 800b758:	d8c02a17 	ldw	r3,168(sp)
 800b75c:	1803e416 	blt	r3,zero,800c6f0 <___vfprintf_internal_r+0x1c3c>
 800b760:	180d883a 	mov	r6,r3
 800b764:	000b883a 	mov	r5,zero
 800b768:	8009883a 	mov	r4,r16
 800b76c:	df003d15 	stw	fp,244(sp)
 800b770:	80103ec0 	call	80103ec <memchr>
 800b774:	da003d17 	ldw	r8,244(sp)
 800b778:	10046826 	beq	r2,zero,800c91c <___vfprintf_internal_r+0x1e68>
 800b77c:	1405c83a 	sub	r2,r2,r16
 800b780:	d8802b15 	stw	r2,172(sp)
 800b784:	1003e016 	blt	r2,zero,800c708 <___vfprintf_internal_r+0x1c54>
 800b788:	df002783 	ldbu	fp,158(sp)
 800b78c:	d8802915 	stw	r2,164(sp)
 800b790:	dcc02e15 	stw	r19,184(sp)
 800b794:	d8002a15 	stw	zero,168(sp)
 800b798:	d8003215 	stw	zero,200(sp)
 800b79c:	003ea206 	br	800b228 <__alt_data_end+0xfc00b228>
 800b7a0:	8025883a 	mov	r18,r16
 800b7a4:	dc002903 	ldbu	r16,164(sp)
 800b7a8:	e011883a 	mov	r8,fp
 800b7ac:	84003fcc 	andi	r16,r16,255
 800b7b0:	803f8d26 	beq	r16,zero,800b5e8 <__alt_data_end+0xfc00b5e8>
 800b7b4:	d8c02b03 	ldbu	r3,172(sp)
 800b7b8:	d8c02785 	stb	r3,158(sp)
 800b7bc:	003f8a06 	br	800b5e8 <__alt_data_end+0xfc00b5e8>
 800b7c0:	8025883a 	mov	r18,r16
 800b7c4:	dc002903 	ldbu	r16,164(sp)
 800b7c8:	e011883a 	mov	r8,fp
 800b7cc:	84003fcc 	andi	r16,r16,255
 800b7d0:	8005661e 	bne	r16,zero,800cd6c <___vfprintf_internal_r+0x22b8>
 800b7d4:	01021974 	movhi	r4,2149
 800b7d8:	21374404 	addi	r4,r4,-8944
 800b7dc:	d9003915 	stw	r4,228(sp)
 800b7e0:	9080080c 	andi	r2,r18,32
 800b7e4:	103f9f1e 	bne	r2,zero,800b664 <__alt_data_end+0xfc00b664>
 800b7e8:	9080040c 	andi	r2,r18,16
 800b7ec:	1002eb26 	beq	r2,zero,800c39c <___vfprintf_internal_r+0x18e8>
 800b7f0:	d8802e17 	ldw	r2,184(sp)
 800b7f4:	002d883a 	mov	r22,zero
 800b7f8:	14c00017 	ldw	r19,0(r2)
 800b7fc:	10800104 	addi	r2,r2,4
 800b800:	d8802e15 	stw	r2,184(sp)
 800b804:	003f9c06 	br	800b678 <__alt_data_end+0xfc00b678>
 800b808:	d8802b07 	ldb	r2,172(sp)
 800b80c:	1002e11e 	bne	r2,zero,800c394 <___vfprintf_internal_r+0x18e0>
 800b810:	00c00044 	movi	r3,1
 800b814:	d8c02905 	stb	r3,164(sp)
 800b818:	00c00804 	movi	r3,32
 800b81c:	d8c02b05 	stb	r3,172(sp)
 800b820:	ac400007 	ldb	r17,0(r21)
 800b824:	003d0506 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b828:	84000054 	ori	r16,r16,1
 800b82c:	ac400007 	ldb	r17,0(r21)
 800b830:	003d0206 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b834:	8025883a 	mov	r18,r16
 800b838:	dc002903 	ldbu	r16,164(sp)
 800b83c:	e011883a 	mov	r8,fp
 800b840:	84003fcc 	andi	r16,r16,255
 800b844:	803de726 	beq	r16,zero,800afe4 <__alt_data_end+0xfc00afe4>
 800b848:	d8c02b03 	ldbu	r3,172(sp)
 800b84c:	d8c02785 	stb	r3,158(sp)
 800b850:	003de406 	br	800afe4 <__alt_data_end+0xfc00afe4>
 800b854:	84001014 	ori	r16,r16,64
 800b858:	ac400007 	ldb	r17,0(r21)
 800b85c:	003cf706 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b860:	ac400007 	ldb	r17,0(r21)
 800b864:	00801b04 	movi	r2,108
 800b868:	88838f26 	beq	r17,r2,800c6a8 <___vfprintf_internal_r+0x1bf4>
 800b86c:	84000414 	ori	r16,r16,16
 800b870:	003cf206 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800b874:	8025883a 	mov	r18,r16
 800b878:	dc002903 	ldbu	r16,164(sp)
 800b87c:	e011883a 	mov	r8,fp
 800b880:	84003fcc 	andi	r16,r16,255
 800b884:	80053f1e 	bne	r16,zero,800cd84 <___vfprintf_internal_r+0x22d0>
 800b888:	9080080c 	andi	r2,r18,32
 800b88c:	1002d226 	beq	r2,zero,800c3d8 <___vfprintf_internal_r+0x1924>
 800b890:	d9002e17 	ldw	r4,184(sp)
 800b894:	d9402f17 	ldw	r5,188(sp)
 800b898:	20800017 	ldw	r2,0(r4)
 800b89c:	2807d7fa 	srai	r3,r5,31
 800b8a0:	21000104 	addi	r4,r4,4
 800b8a4:	d9002e15 	stw	r4,184(sp)
 800b8a8:	11400015 	stw	r5,0(r2)
 800b8ac:	10c00115 	stw	r3,4(r2)
 800b8b0:	003cb806 	br	800ab94 <__alt_data_end+0xfc00ab94>
 800b8b4:	d8c02e17 	ldw	r3,184(sp)
 800b8b8:	d9002e17 	ldw	r4,184(sp)
 800b8bc:	8025883a 	mov	r18,r16
 800b8c0:	18800017 	ldw	r2,0(r3)
 800b8c4:	21000104 	addi	r4,r4,4
 800b8c8:	00c00044 	movi	r3,1
 800b8cc:	e011883a 	mov	r8,fp
 800b8d0:	d8c02915 	stw	r3,164(sp)
 800b8d4:	d8002785 	stb	zero,158(sp)
 800b8d8:	d8801405 	stb	r2,80(sp)
 800b8dc:	d9002e15 	stw	r4,184(sp)
 800b8e0:	d8c02b15 	stw	r3,172(sp)
 800b8e4:	d8002a15 	stw	zero,168(sp)
 800b8e8:	d8003215 	stw	zero,200(sp)
 800b8ec:	dc001404 	addi	r16,sp,80
 800b8f0:	0039883a 	mov	fp,zero
 800b8f4:	003e5306 	br	800b244 <__alt_data_end+0xfc00b244>
 800b8f8:	01021974 	movhi	r4,2149
 800b8fc:	21374404 	addi	r4,r4,-8944
 800b900:	0039883a 	mov	fp,zero
 800b904:	d9003915 	stw	r4,228(sp)
 800b908:	04401e04 	movi	r17,120
 800b90c:	003f6906 	br	800b6b4 <__alt_data_end+0xfc00b6b4>
 800b910:	8025883a 	mov	r18,r16
 800b914:	dc002903 	ldbu	r16,164(sp)
 800b918:	e011883a 	mov	r8,fp
 800b91c:	84003fcc 	andi	r16,r16,255
 800b920:	8005081e 	bne	r16,zero,800cd44 <___vfprintf_internal_r+0x2290>
 800b924:	883d6126 	beq	r17,zero,800aeac <__alt_data_end+0xfc00aeac>
 800b928:	00c00044 	movi	r3,1
 800b92c:	d8c02915 	stw	r3,164(sp)
 800b930:	dc401405 	stb	r17,80(sp)
 800b934:	d8002785 	stb	zero,158(sp)
 800b938:	003fe906 	br	800b8e0 <__alt_data_end+0xfc00b8e0>
 800b93c:	01421974 	movhi	r5,2149
 800b940:	29774404 	addi	r5,r5,-8944
 800b944:	d9403915 	stw	r5,228(sp)
 800b948:	d8c02e15 	stw	r3,184(sp)
 800b94c:	1025883a 	mov	r18,r2
 800b950:	04401e04 	movi	r17,120
 800b954:	9d84b03a 	or	r2,r19,r22
 800b958:	1000fc1e 	bne	r2,zero,800bd4c <___vfprintf_internal_r+0x1298>
 800b95c:	0039883a 	mov	fp,zero
 800b960:	00800084 	movi	r2,2
 800b964:	10803fcc 	andi	r2,r2,255
 800b968:	00c00044 	movi	r3,1
 800b96c:	10c20f26 	beq	r2,r3,800c1ac <___vfprintf_internal_r+0x16f8>
 800b970:	00c00084 	movi	r3,2
 800b974:	10fd3326 	beq	r2,r3,800ae44 <__alt_data_end+0xfc00ae44>
 800b978:	003e0b06 	br	800b1a8 <__alt_data_end+0xfc00b1a8>
 800b97c:	d8c02017 	ldw	r3,128(sp)
 800b980:	003e7106 	br	800b348 <__alt_data_end+0xfc00b348>
 800b984:	00801944 	movi	r2,101
 800b988:	14407e0e 	bge	r2,r17,800bb84 <___vfprintf_internal_r+0x10d0>
 800b98c:	d9003617 	ldw	r4,216(sp)
 800b990:	d9403817 	ldw	r5,224(sp)
 800b994:	000d883a 	mov	r6,zero
 800b998:	000f883a 	mov	r7,zero
 800b99c:	d8c03c15 	stw	r3,240(sp)
 800b9a0:	da003d15 	stw	r8,244(sp)
 800b9a4:	801500c0 	call	801500c <__eqdf2>
 800b9a8:	d8c03c17 	ldw	r3,240(sp)
 800b9ac:	da003d17 	ldw	r8,244(sp)
 800b9b0:	1000f71e 	bne	r2,zero,800bd90 <___vfprintf_internal_r+0x12dc>
 800b9b4:	d8801f17 	ldw	r2,124(sp)
 800b9b8:	01021974 	movhi	r4,2149
 800b9bc:	21374b04 	addi	r4,r4,-8916
 800b9c0:	18c00044 	addi	r3,r3,1
 800b9c4:	10800044 	addi	r2,r2,1
 800b9c8:	41000015 	stw	r4,0(r8)
 800b9cc:	01000044 	movi	r4,1
 800b9d0:	41000115 	stw	r4,4(r8)
 800b9d4:	d8c02015 	stw	r3,128(sp)
 800b9d8:	d8801f15 	stw	r2,124(sp)
 800b9dc:	010001c4 	movi	r4,7
 800b9e0:	2082b816 	blt	r4,r2,800c4c4 <___vfprintf_internal_r+0x1a10>
 800b9e4:	42000204 	addi	r8,r8,8
 800b9e8:	d8802617 	ldw	r2,152(sp)
 800b9ec:	d9403317 	ldw	r5,204(sp)
 800b9f0:	11400216 	blt	r2,r5,800b9fc <___vfprintf_internal_r+0xf48>
 800b9f4:	9080004c 	andi	r2,r18,1
 800b9f8:	103eb326 	beq	r2,zero,800b4c8 <__alt_data_end+0xfc00b4c8>
 800b9fc:	d8803717 	ldw	r2,220(sp)
 800ba00:	d9003417 	ldw	r4,208(sp)
 800ba04:	d9403717 	ldw	r5,220(sp)
 800ba08:	1887883a 	add	r3,r3,r2
 800ba0c:	d8801f17 	ldw	r2,124(sp)
 800ba10:	41000015 	stw	r4,0(r8)
 800ba14:	41400115 	stw	r5,4(r8)
 800ba18:	10800044 	addi	r2,r2,1
 800ba1c:	d8c02015 	stw	r3,128(sp)
 800ba20:	d8801f15 	stw	r2,124(sp)
 800ba24:	010001c4 	movi	r4,7
 800ba28:	20832916 	blt	r4,r2,800c6d0 <___vfprintf_internal_r+0x1c1c>
 800ba2c:	42000204 	addi	r8,r8,8
 800ba30:	d8803317 	ldw	r2,204(sp)
 800ba34:	143fffc4 	addi	r16,r2,-1
 800ba38:	043ea30e 	bge	zero,r16,800b4c8 <__alt_data_end+0xfc00b4c8>
 800ba3c:	04400404 	movi	r17,16
 800ba40:	d8801f17 	ldw	r2,124(sp)
 800ba44:	8c00880e 	bge	r17,r16,800bc68 <___vfprintf_internal_r+0x11b4>
 800ba48:	01421974 	movhi	r5,2149
 800ba4c:	29774b84 	addi	r5,r5,-8914
 800ba50:	d9402c15 	stw	r5,176(sp)
 800ba54:	058001c4 	movi	r22,7
 800ba58:	dcc02d17 	ldw	r19,180(sp)
 800ba5c:	00000306 	br	800ba6c <___vfprintf_internal_r+0xfb8>
 800ba60:	42000204 	addi	r8,r8,8
 800ba64:	843ffc04 	addi	r16,r16,-16
 800ba68:	8c00820e 	bge	r17,r16,800bc74 <___vfprintf_internal_r+0x11c0>
 800ba6c:	18c00404 	addi	r3,r3,16
 800ba70:	10800044 	addi	r2,r2,1
 800ba74:	45000015 	stw	r20,0(r8)
 800ba78:	44400115 	stw	r17,4(r8)
 800ba7c:	d8c02015 	stw	r3,128(sp)
 800ba80:	d8801f15 	stw	r2,124(sp)
 800ba84:	b0bff60e 	bge	r22,r2,800ba60 <__alt_data_end+0xfc00ba60>
 800ba88:	d9801e04 	addi	r6,sp,120
 800ba8c:	b80b883a 	mov	r5,r23
 800ba90:	9809883a 	mov	r4,r19
 800ba94:	80120240 	call	8012024 <__sprint_r>
 800ba98:	103d0a1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800ba9c:	d8c02017 	ldw	r3,128(sp)
 800baa0:	d8801f17 	ldw	r2,124(sp)
 800baa4:	da000404 	addi	r8,sp,16
 800baa8:	003fee06 	br	800ba64 <__alt_data_end+0xfc00ba64>
 800baac:	d9403117 	ldw	r5,196(sp)
 800bab0:	d8802917 	ldw	r2,164(sp)
 800bab4:	28adc83a 	sub	r22,r5,r2
 800bab8:	05be410e 	bge	zero,r22,800b3c0 <__alt_data_end+0xfc00b3c0>
 800babc:	07000404 	movi	fp,16
 800bac0:	d8801f17 	ldw	r2,124(sp)
 800bac4:	e5838f0e 	bge	fp,r22,800c904 <___vfprintf_internal_r+0x1e50>
 800bac8:	01421974 	movhi	r5,2149
 800bacc:	29774b84 	addi	r5,r5,-8914
 800bad0:	dc403015 	stw	r17,192(sp)
 800bad4:	d9402c15 	stw	r5,176(sp)
 800bad8:	b023883a 	mov	r17,r22
 800badc:	04c001c4 	movi	r19,7
 800bae0:	a82d883a 	mov	r22,r21
 800bae4:	902b883a 	mov	r21,r18
 800bae8:	8025883a 	mov	r18,r16
 800baec:	dc002d17 	ldw	r16,180(sp)
 800baf0:	00000306 	br	800bb00 <___vfprintf_internal_r+0x104c>
 800baf4:	8c7ffc04 	addi	r17,r17,-16
 800baf8:	42000204 	addi	r8,r8,8
 800bafc:	e440110e 	bge	fp,r17,800bb44 <___vfprintf_internal_r+0x1090>
 800bb00:	18c00404 	addi	r3,r3,16
 800bb04:	10800044 	addi	r2,r2,1
 800bb08:	45000015 	stw	r20,0(r8)
 800bb0c:	47000115 	stw	fp,4(r8)
 800bb10:	d8c02015 	stw	r3,128(sp)
 800bb14:	d8801f15 	stw	r2,124(sp)
 800bb18:	98bff60e 	bge	r19,r2,800baf4 <__alt_data_end+0xfc00baf4>
 800bb1c:	d9801e04 	addi	r6,sp,120
 800bb20:	b80b883a 	mov	r5,r23
 800bb24:	8009883a 	mov	r4,r16
 800bb28:	80120240 	call	8012024 <__sprint_r>
 800bb2c:	103ce51e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bb30:	8c7ffc04 	addi	r17,r17,-16
 800bb34:	d8c02017 	ldw	r3,128(sp)
 800bb38:	d8801f17 	ldw	r2,124(sp)
 800bb3c:	da000404 	addi	r8,sp,16
 800bb40:	e47fef16 	blt	fp,r17,800bb00 <__alt_data_end+0xfc00bb00>
 800bb44:	9021883a 	mov	r16,r18
 800bb48:	a825883a 	mov	r18,r21
 800bb4c:	b02b883a 	mov	r21,r22
 800bb50:	882d883a 	mov	r22,r17
 800bb54:	dc403017 	ldw	r17,192(sp)
 800bb58:	d9002c17 	ldw	r4,176(sp)
 800bb5c:	1d87883a 	add	r3,r3,r22
 800bb60:	10800044 	addi	r2,r2,1
 800bb64:	41000015 	stw	r4,0(r8)
 800bb68:	45800115 	stw	r22,4(r8)
 800bb6c:	d8c02015 	stw	r3,128(sp)
 800bb70:	d8801f15 	stw	r2,124(sp)
 800bb74:	010001c4 	movi	r4,7
 800bb78:	20818e16 	blt	r4,r2,800c1b4 <___vfprintf_internal_r+0x1700>
 800bb7c:	42000204 	addi	r8,r8,8
 800bb80:	003e0f06 	br	800b3c0 <__alt_data_end+0xfc00b3c0>
 800bb84:	d9403317 	ldw	r5,204(sp)
 800bb88:	00800044 	movi	r2,1
 800bb8c:	18c00044 	addi	r3,r3,1
 800bb90:	1141530e 	bge	r2,r5,800c0e0 <___vfprintf_internal_r+0x162c>
 800bb94:	dc401f17 	ldw	r17,124(sp)
 800bb98:	00800044 	movi	r2,1
 800bb9c:	40800115 	stw	r2,4(r8)
 800bba0:	8c400044 	addi	r17,r17,1
 800bba4:	44000015 	stw	r16,0(r8)
 800bba8:	d8c02015 	stw	r3,128(sp)
 800bbac:	dc401f15 	stw	r17,124(sp)
 800bbb0:	008001c4 	movi	r2,7
 800bbb4:	14416b16 	blt	r2,r17,800c164 <___vfprintf_internal_r+0x16b0>
 800bbb8:	42000204 	addi	r8,r8,8
 800bbbc:	d8803717 	ldw	r2,220(sp)
 800bbc0:	d9003417 	ldw	r4,208(sp)
 800bbc4:	8c400044 	addi	r17,r17,1
 800bbc8:	10c7883a 	add	r3,r2,r3
 800bbcc:	40800115 	stw	r2,4(r8)
 800bbd0:	41000015 	stw	r4,0(r8)
 800bbd4:	d8c02015 	stw	r3,128(sp)
 800bbd8:	dc401f15 	stw	r17,124(sp)
 800bbdc:	008001c4 	movi	r2,7
 800bbe0:	14416916 	blt	r2,r17,800c188 <___vfprintf_internal_r+0x16d4>
 800bbe4:	45800204 	addi	r22,r8,8
 800bbe8:	d9003617 	ldw	r4,216(sp)
 800bbec:	d9403817 	ldw	r5,224(sp)
 800bbf0:	000d883a 	mov	r6,zero
 800bbf4:	000f883a 	mov	r7,zero
 800bbf8:	d8c03c15 	stw	r3,240(sp)
 800bbfc:	801500c0 	call	801500c <__eqdf2>
 800bc00:	d8c03c17 	ldw	r3,240(sp)
 800bc04:	1000bc26 	beq	r2,zero,800bef8 <___vfprintf_internal_r+0x1444>
 800bc08:	d9403317 	ldw	r5,204(sp)
 800bc0c:	84000044 	addi	r16,r16,1
 800bc10:	8c400044 	addi	r17,r17,1
 800bc14:	28bfffc4 	addi	r2,r5,-1
 800bc18:	1887883a 	add	r3,r3,r2
 800bc1c:	b0800115 	stw	r2,4(r22)
 800bc20:	b4000015 	stw	r16,0(r22)
 800bc24:	d8c02015 	stw	r3,128(sp)
 800bc28:	dc401f15 	stw	r17,124(sp)
 800bc2c:	008001c4 	movi	r2,7
 800bc30:	14414316 	blt	r2,r17,800c140 <___vfprintf_internal_r+0x168c>
 800bc34:	b5800204 	addi	r22,r22,8
 800bc38:	d9003a17 	ldw	r4,232(sp)
 800bc3c:	df0022c4 	addi	fp,sp,139
 800bc40:	8c400044 	addi	r17,r17,1
 800bc44:	20c7883a 	add	r3,r4,r3
 800bc48:	b7000015 	stw	fp,0(r22)
 800bc4c:	b1000115 	stw	r4,4(r22)
 800bc50:	d8c02015 	stw	r3,128(sp)
 800bc54:	dc401f15 	stw	r17,124(sp)
 800bc58:	008001c4 	movi	r2,7
 800bc5c:	14400e16 	blt	r2,r17,800bc98 <___vfprintf_internal_r+0x11e4>
 800bc60:	b2000204 	addi	r8,r22,8
 800bc64:	003e1806 	br	800b4c8 <__alt_data_end+0xfc00b4c8>
 800bc68:	01021974 	movhi	r4,2149
 800bc6c:	21374b84 	addi	r4,r4,-8914
 800bc70:	d9002c15 	stw	r4,176(sp)
 800bc74:	d9002c17 	ldw	r4,176(sp)
 800bc78:	1c07883a 	add	r3,r3,r16
 800bc7c:	44000115 	stw	r16,4(r8)
 800bc80:	41000015 	stw	r4,0(r8)
 800bc84:	10800044 	addi	r2,r2,1
 800bc88:	d8c02015 	stw	r3,128(sp)
 800bc8c:	d8801f15 	stw	r2,124(sp)
 800bc90:	010001c4 	movi	r4,7
 800bc94:	20be0b0e 	bge	r4,r2,800b4c4 <__alt_data_end+0xfc00b4c4>
 800bc98:	d9002d17 	ldw	r4,180(sp)
 800bc9c:	d9801e04 	addi	r6,sp,120
 800bca0:	b80b883a 	mov	r5,r23
 800bca4:	80120240 	call	8012024 <__sprint_r>
 800bca8:	103c861e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bcac:	d8c02017 	ldw	r3,128(sp)
 800bcb0:	da000404 	addi	r8,sp,16
 800bcb4:	003e0406 	br	800b4c8 <__alt_data_end+0xfc00b4c8>
 800bcb8:	d9002d17 	ldw	r4,180(sp)
 800bcbc:	d9801e04 	addi	r6,sp,120
 800bcc0:	b80b883a 	mov	r5,r23
 800bcc4:	80120240 	call	8012024 <__sprint_r>
 800bcc8:	103e3b26 	beq	r2,zero,800b5b8 <__alt_data_end+0xfc00b5b8>
 800bccc:	003c7d06 	br	800aec4 <__alt_data_end+0xfc00aec4>
 800bcd0:	d9002d17 	ldw	r4,180(sp)
 800bcd4:	d9801e04 	addi	r6,sp,120
 800bcd8:	b80b883a 	mov	r5,r23
 800bcdc:	80120240 	call	8012024 <__sprint_r>
 800bce0:	103c781e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bce4:	d8c02017 	ldw	r3,128(sp)
 800bce8:	da000404 	addi	r8,sp,16
 800bcec:	003de906 	br	800b494 <__alt_data_end+0xfc00b494>
 800bcf0:	d9002d17 	ldw	r4,180(sp)
 800bcf4:	d9801e04 	addi	r6,sp,120
 800bcf8:	b80b883a 	mov	r5,r23
 800bcfc:	80120240 	call	8012024 <__sprint_r>
 800bd00:	103c701e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bd04:	d8c02017 	ldw	r3,128(sp)
 800bd08:	da000404 	addi	r8,sp,16
 800bd0c:	003d9b06 	br	800b37c <__alt_data_end+0xfc00b37c>
 800bd10:	d9002d17 	ldw	r4,180(sp)
 800bd14:	d9801e04 	addi	r6,sp,120
 800bd18:	b80b883a 	mov	r5,r23
 800bd1c:	80120240 	call	8012024 <__sprint_r>
 800bd20:	103c681e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bd24:	d8c02017 	ldw	r3,128(sp)
 800bd28:	da000404 	addi	r8,sp,16
 800bd2c:	003da106 	br	800b3b4 <__alt_data_end+0xfc00b3b4>
 800bd30:	d9402a17 	ldw	r5,168(sp)
 800bd34:	d8002785 	stb	zero,158(sp)
 800bd38:	283f0616 	blt	r5,zero,800b954 <__alt_data_end+0xfc00b954>
 800bd3c:	00ffdfc4 	movi	r3,-129
 800bd40:	9d84b03a 	or	r2,r19,r22
 800bd44:	90e4703a 	and	r18,r18,r3
 800bd48:	103c3b26 	beq	r2,zero,800ae38 <__alt_data_end+0xfc00ae38>
 800bd4c:	0039883a 	mov	fp,zero
 800bd50:	003e5806 	br	800b6b4 <__alt_data_end+0xfc00b6b4>
 800bd54:	9080040c 	andi	r2,r18,16
 800bd58:	1001b326 	beq	r2,zero,800c428 <___vfprintf_internal_r+0x1974>
 800bd5c:	d8c02e17 	ldw	r3,184(sp)
 800bd60:	d9002a17 	ldw	r4,168(sp)
 800bd64:	d8002785 	stb	zero,158(sp)
 800bd68:	18800104 	addi	r2,r3,4
 800bd6c:	1cc00017 	ldw	r19,0(r3)
 800bd70:	002d883a 	mov	r22,zero
 800bd74:	2001b516 	blt	r4,zero,800c44c <___vfprintf_internal_r+0x1998>
 800bd78:	00ffdfc4 	movi	r3,-129
 800bd7c:	d8802e15 	stw	r2,184(sp)
 800bd80:	90e4703a 	and	r18,r18,r3
 800bd84:	983d0526 	beq	r19,zero,800b19c <__alt_data_end+0xfc00b19c>
 800bd88:	0039883a 	mov	fp,zero
 800bd8c:	003d0806 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800bd90:	dc402617 	ldw	r17,152(sp)
 800bd94:	0441d30e 	bge	zero,r17,800c4e4 <___vfprintf_internal_r+0x1a30>
 800bd98:	dc403217 	ldw	r17,200(sp)
 800bd9c:	d8803317 	ldw	r2,204(sp)
 800bda0:	1440010e 	bge	r2,r17,800bda8 <___vfprintf_internal_r+0x12f4>
 800bda4:	1023883a 	mov	r17,r2
 800bda8:	04400a0e 	bge	zero,r17,800bdd4 <___vfprintf_internal_r+0x1320>
 800bdac:	d8801f17 	ldw	r2,124(sp)
 800bdb0:	1c47883a 	add	r3,r3,r17
 800bdb4:	44000015 	stw	r16,0(r8)
 800bdb8:	10800044 	addi	r2,r2,1
 800bdbc:	44400115 	stw	r17,4(r8)
 800bdc0:	d8c02015 	stw	r3,128(sp)
 800bdc4:	d8801f15 	stw	r2,124(sp)
 800bdc8:	010001c4 	movi	r4,7
 800bdcc:	20826516 	blt	r4,r2,800c764 <___vfprintf_internal_r+0x1cb0>
 800bdd0:	42000204 	addi	r8,r8,8
 800bdd4:	88026116 	blt	r17,zero,800c75c <___vfprintf_internal_r+0x1ca8>
 800bdd8:	d9003217 	ldw	r4,200(sp)
 800bddc:	2463c83a 	sub	r17,r4,r17
 800bde0:	04407b0e 	bge	zero,r17,800bfd0 <___vfprintf_internal_r+0x151c>
 800bde4:	05800404 	movi	r22,16
 800bde8:	d8801f17 	ldw	r2,124(sp)
 800bdec:	b4419d0e 	bge	r22,r17,800c464 <___vfprintf_internal_r+0x19b0>
 800bdf0:	01021974 	movhi	r4,2149
 800bdf4:	21374b84 	addi	r4,r4,-8914
 800bdf8:	d9002c15 	stw	r4,176(sp)
 800bdfc:	070001c4 	movi	fp,7
 800be00:	dcc02d17 	ldw	r19,180(sp)
 800be04:	00000306 	br	800be14 <___vfprintf_internal_r+0x1360>
 800be08:	42000204 	addi	r8,r8,8
 800be0c:	8c7ffc04 	addi	r17,r17,-16
 800be10:	b441970e 	bge	r22,r17,800c470 <___vfprintf_internal_r+0x19bc>
 800be14:	18c00404 	addi	r3,r3,16
 800be18:	10800044 	addi	r2,r2,1
 800be1c:	45000015 	stw	r20,0(r8)
 800be20:	45800115 	stw	r22,4(r8)
 800be24:	d8c02015 	stw	r3,128(sp)
 800be28:	d8801f15 	stw	r2,124(sp)
 800be2c:	e0bff60e 	bge	fp,r2,800be08 <__alt_data_end+0xfc00be08>
 800be30:	d9801e04 	addi	r6,sp,120
 800be34:	b80b883a 	mov	r5,r23
 800be38:	9809883a 	mov	r4,r19
 800be3c:	80120240 	call	8012024 <__sprint_r>
 800be40:	103c201e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800be44:	d8c02017 	ldw	r3,128(sp)
 800be48:	d8801f17 	ldw	r2,124(sp)
 800be4c:	da000404 	addi	r8,sp,16
 800be50:	003fee06 	br	800be0c <__alt_data_end+0xfc00be0c>
 800be54:	d9002d17 	ldw	r4,180(sp)
 800be58:	d9801e04 	addi	r6,sp,120
 800be5c:	b80b883a 	mov	r5,r23
 800be60:	80120240 	call	8012024 <__sprint_r>
 800be64:	103c171e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800be68:	d8c02017 	ldw	r3,128(sp)
 800be6c:	df002787 	ldb	fp,158(sp)
 800be70:	da000404 	addi	r8,sp,16
 800be74:	003d3406 	br	800b348 <__alt_data_end+0xfc00b348>
 800be78:	9080040c 	andi	r2,r18,16
 800be7c:	10016126 	beq	r2,zero,800c404 <___vfprintf_internal_r+0x1950>
 800be80:	d9402e17 	ldw	r5,184(sp)
 800be84:	2cc00017 	ldw	r19,0(r5)
 800be88:	29400104 	addi	r5,r5,4
 800be8c:	d9402e15 	stw	r5,184(sp)
 800be90:	982dd7fa 	srai	r22,r19,31
 800be94:	b005883a 	mov	r2,r22
 800be98:	003c5a06 	br	800b004 <__alt_data_end+0xfc00b004>
 800be9c:	9080040c 	andi	r2,r18,16
 800bea0:	10003526 	beq	r2,zero,800bf78 <___vfprintf_internal_r+0x14c4>
 800bea4:	d8c02e17 	ldw	r3,184(sp)
 800bea8:	d9002a17 	ldw	r4,168(sp)
 800beac:	d8002785 	stb	zero,158(sp)
 800beb0:	18800104 	addi	r2,r3,4
 800beb4:	1cc00017 	ldw	r19,0(r3)
 800beb8:	002d883a 	mov	r22,zero
 800bebc:	20003716 	blt	r4,zero,800bf9c <___vfprintf_internal_r+0x14e8>
 800bec0:	00ffdfc4 	movi	r3,-129
 800bec4:	d8802e15 	stw	r2,184(sp)
 800bec8:	90e4703a 	and	r18,r18,r3
 800becc:	0039883a 	mov	fp,zero
 800bed0:	983dd426 	beq	r19,zero,800b624 <__alt_data_end+0xfc00b624>
 800bed4:	00800244 	movi	r2,9
 800bed8:	14fc5336 	bltu	r2,r19,800b028 <__alt_data_end+0xfc00b028>
 800bedc:	d8c02817 	ldw	r3,160(sp)
 800bee0:	dc001dc4 	addi	r16,sp,119
 800bee4:	9cc00c04 	addi	r19,r19,48
 800bee8:	1c07c83a 	sub	r3,r3,r16
 800beec:	dcc01dc5 	stb	r19,119(sp)
 800bef0:	d8c02b15 	stw	r3,172(sp)
 800bef4:	003cc606 	br	800b210 <__alt_data_end+0xfc00b210>
 800bef8:	d8803317 	ldw	r2,204(sp)
 800befc:	143fffc4 	addi	r16,r2,-1
 800bf00:	043f4d0e 	bge	zero,r16,800bc38 <__alt_data_end+0xfc00bc38>
 800bf04:	07000404 	movi	fp,16
 800bf08:	e400810e 	bge	fp,r16,800c110 <___vfprintf_internal_r+0x165c>
 800bf0c:	01421974 	movhi	r5,2149
 800bf10:	29774b84 	addi	r5,r5,-8914
 800bf14:	d9402c15 	stw	r5,176(sp)
 800bf18:	01c001c4 	movi	r7,7
 800bf1c:	dcc02d17 	ldw	r19,180(sp)
 800bf20:	00000306 	br	800bf30 <___vfprintf_internal_r+0x147c>
 800bf24:	b5800204 	addi	r22,r22,8
 800bf28:	843ffc04 	addi	r16,r16,-16
 800bf2c:	e4007b0e 	bge	fp,r16,800c11c <___vfprintf_internal_r+0x1668>
 800bf30:	18c00404 	addi	r3,r3,16
 800bf34:	8c400044 	addi	r17,r17,1
 800bf38:	b5000015 	stw	r20,0(r22)
 800bf3c:	b7000115 	stw	fp,4(r22)
 800bf40:	d8c02015 	stw	r3,128(sp)
 800bf44:	dc401f15 	stw	r17,124(sp)
 800bf48:	3c7ff60e 	bge	r7,r17,800bf24 <__alt_data_end+0xfc00bf24>
 800bf4c:	d9801e04 	addi	r6,sp,120
 800bf50:	b80b883a 	mov	r5,r23
 800bf54:	9809883a 	mov	r4,r19
 800bf58:	d9c03c15 	stw	r7,240(sp)
 800bf5c:	80120240 	call	8012024 <__sprint_r>
 800bf60:	d9c03c17 	ldw	r7,240(sp)
 800bf64:	103bd71e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bf68:	d8c02017 	ldw	r3,128(sp)
 800bf6c:	dc401f17 	ldw	r17,124(sp)
 800bf70:	dd800404 	addi	r22,sp,16
 800bf74:	003fec06 	br	800bf28 <__alt_data_end+0xfc00bf28>
 800bf78:	9080100c 	andi	r2,r18,64
 800bf7c:	d8002785 	stb	zero,158(sp)
 800bf80:	10010e26 	beq	r2,zero,800c3bc <___vfprintf_internal_r+0x1908>
 800bf84:	d9402e17 	ldw	r5,184(sp)
 800bf88:	d8c02a17 	ldw	r3,168(sp)
 800bf8c:	002d883a 	mov	r22,zero
 800bf90:	28800104 	addi	r2,r5,4
 800bf94:	2cc0000b 	ldhu	r19,0(r5)
 800bf98:	183fc90e 	bge	r3,zero,800bec0 <__alt_data_end+0xfc00bec0>
 800bf9c:	d8802e15 	stw	r2,184(sp)
 800bfa0:	0039883a 	mov	fp,zero
 800bfa4:	9d84b03a 	or	r2,r19,r22
 800bfa8:	103c1e1e 	bne	r2,zero,800b024 <__alt_data_end+0xfc00b024>
 800bfac:	00800044 	movi	r2,1
 800bfb0:	003e6c06 	br	800b964 <__alt_data_end+0xfc00b964>
 800bfb4:	d9002d17 	ldw	r4,180(sp)
 800bfb8:	d9801e04 	addi	r6,sp,120
 800bfbc:	b80b883a 	mov	r5,r23
 800bfc0:	80120240 	call	8012024 <__sprint_r>
 800bfc4:	103bbf1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800bfc8:	d8c02017 	ldw	r3,128(sp)
 800bfcc:	da000404 	addi	r8,sp,16
 800bfd0:	d9003217 	ldw	r4,200(sp)
 800bfd4:	d8802617 	ldw	r2,152(sp)
 800bfd8:	d9403317 	ldw	r5,204(sp)
 800bfdc:	8123883a 	add	r17,r16,r4
 800bfe0:	11400216 	blt	r2,r5,800bfec <___vfprintf_internal_r+0x1538>
 800bfe4:	9100004c 	andi	r4,r18,1
 800bfe8:	20000d26 	beq	r4,zero,800c020 <___vfprintf_internal_r+0x156c>
 800bfec:	d9003717 	ldw	r4,220(sp)
 800bff0:	d9403417 	ldw	r5,208(sp)
 800bff4:	1907883a 	add	r3,r3,r4
 800bff8:	d9001f17 	ldw	r4,124(sp)
 800bffc:	41400015 	stw	r5,0(r8)
 800c000:	d9403717 	ldw	r5,220(sp)
 800c004:	21000044 	addi	r4,r4,1
 800c008:	d8c02015 	stw	r3,128(sp)
 800c00c:	41400115 	stw	r5,4(r8)
 800c010:	d9001f15 	stw	r4,124(sp)
 800c014:	014001c4 	movi	r5,7
 800c018:	2901e816 	blt	r5,r4,800c7bc <___vfprintf_internal_r+0x1d08>
 800c01c:	42000204 	addi	r8,r8,8
 800c020:	d9003317 	ldw	r4,204(sp)
 800c024:	8121883a 	add	r16,r16,r4
 800c028:	2085c83a 	sub	r2,r4,r2
 800c02c:	8461c83a 	sub	r16,r16,r17
 800c030:	1400010e 	bge	r2,r16,800c038 <___vfprintf_internal_r+0x1584>
 800c034:	1021883a 	mov	r16,r2
 800c038:	04000a0e 	bge	zero,r16,800c064 <___vfprintf_internal_r+0x15b0>
 800c03c:	d9001f17 	ldw	r4,124(sp)
 800c040:	1c07883a 	add	r3,r3,r16
 800c044:	44400015 	stw	r17,0(r8)
 800c048:	21000044 	addi	r4,r4,1
 800c04c:	44000115 	stw	r16,4(r8)
 800c050:	d8c02015 	stw	r3,128(sp)
 800c054:	d9001f15 	stw	r4,124(sp)
 800c058:	014001c4 	movi	r5,7
 800c05c:	2901fb16 	blt	r5,r4,800c84c <___vfprintf_internal_r+0x1d98>
 800c060:	42000204 	addi	r8,r8,8
 800c064:	8001f716 	blt	r16,zero,800c844 <___vfprintf_internal_r+0x1d90>
 800c068:	1421c83a 	sub	r16,r2,r16
 800c06c:	043d160e 	bge	zero,r16,800b4c8 <__alt_data_end+0xfc00b4c8>
 800c070:	04400404 	movi	r17,16
 800c074:	d8801f17 	ldw	r2,124(sp)
 800c078:	8c3efb0e 	bge	r17,r16,800bc68 <__alt_data_end+0xfc00bc68>
 800c07c:	01421974 	movhi	r5,2149
 800c080:	29774b84 	addi	r5,r5,-8914
 800c084:	d9402c15 	stw	r5,176(sp)
 800c088:	058001c4 	movi	r22,7
 800c08c:	dcc02d17 	ldw	r19,180(sp)
 800c090:	00000306 	br	800c0a0 <___vfprintf_internal_r+0x15ec>
 800c094:	42000204 	addi	r8,r8,8
 800c098:	843ffc04 	addi	r16,r16,-16
 800c09c:	8c3ef50e 	bge	r17,r16,800bc74 <__alt_data_end+0xfc00bc74>
 800c0a0:	18c00404 	addi	r3,r3,16
 800c0a4:	10800044 	addi	r2,r2,1
 800c0a8:	45000015 	stw	r20,0(r8)
 800c0ac:	44400115 	stw	r17,4(r8)
 800c0b0:	d8c02015 	stw	r3,128(sp)
 800c0b4:	d8801f15 	stw	r2,124(sp)
 800c0b8:	b0bff60e 	bge	r22,r2,800c094 <__alt_data_end+0xfc00c094>
 800c0bc:	d9801e04 	addi	r6,sp,120
 800c0c0:	b80b883a 	mov	r5,r23
 800c0c4:	9809883a 	mov	r4,r19
 800c0c8:	80120240 	call	8012024 <__sprint_r>
 800c0cc:	103b7d1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c0d0:	d8c02017 	ldw	r3,128(sp)
 800c0d4:	d8801f17 	ldw	r2,124(sp)
 800c0d8:	da000404 	addi	r8,sp,16
 800c0dc:	003fee06 	br	800c098 <__alt_data_end+0xfc00c098>
 800c0e0:	9088703a 	and	r4,r18,r2
 800c0e4:	203eab1e 	bne	r4,zero,800bb94 <__alt_data_end+0xfc00bb94>
 800c0e8:	dc401f17 	ldw	r17,124(sp)
 800c0ec:	40800115 	stw	r2,4(r8)
 800c0f0:	44000015 	stw	r16,0(r8)
 800c0f4:	8c400044 	addi	r17,r17,1
 800c0f8:	d8c02015 	stw	r3,128(sp)
 800c0fc:	dc401f15 	stw	r17,124(sp)
 800c100:	008001c4 	movi	r2,7
 800c104:	14400e16 	blt	r2,r17,800c140 <___vfprintf_internal_r+0x168c>
 800c108:	45800204 	addi	r22,r8,8
 800c10c:	003eca06 	br	800bc38 <__alt_data_end+0xfc00bc38>
 800c110:	01021974 	movhi	r4,2149
 800c114:	21374b84 	addi	r4,r4,-8914
 800c118:	d9002c15 	stw	r4,176(sp)
 800c11c:	d8802c17 	ldw	r2,176(sp)
 800c120:	1c07883a 	add	r3,r3,r16
 800c124:	8c400044 	addi	r17,r17,1
 800c128:	b0800015 	stw	r2,0(r22)
 800c12c:	b4000115 	stw	r16,4(r22)
 800c130:	d8c02015 	stw	r3,128(sp)
 800c134:	dc401f15 	stw	r17,124(sp)
 800c138:	008001c4 	movi	r2,7
 800c13c:	147ebd0e 	bge	r2,r17,800bc34 <__alt_data_end+0xfc00bc34>
 800c140:	d9002d17 	ldw	r4,180(sp)
 800c144:	d9801e04 	addi	r6,sp,120
 800c148:	b80b883a 	mov	r5,r23
 800c14c:	80120240 	call	8012024 <__sprint_r>
 800c150:	103b5c1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c154:	d8c02017 	ldw	r3,128(sp)
 800c158:	dc401f17 	ldw	r17,124(sp)
 800c15c:	dd800404 	addi	r22,sp,16
 800c160:	003eb506 	br	800bc38 <__alt_data_end+0xfc00bc38>
 800c164:	d9002d17 	ldw	r4,180(sp)
 800c168:	d9801e04 	addi	r6,sp,120
 800c16c:	b80b883a 	mov	r5,r23
 800c170:	80120240 	call	8012024 <__sprint_r>
 800c174:	103b531e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c178:	d8c02017 	ldw	r3,128(sp)
 800c17c:	dc401f17 	ldw	r17,124(sp)
 800c180:	da000404 	addi	r8,sp,16
 800c184:	003e8d06 	br	800bbbc <__alt_data_end+0xfc00bbbc>
 800c188:	d9002d17 	ldw	r4,180(sp)
 800c18c:	d9801e04 	addi	r6,sp,120
 800c190:	b80b883a 	mov	r5,r23
 800c194:	80120240 	call	8012024 <__sprint_r>
 800c198:	103b4a1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c19c:	d8c02017 	ldw	r3,128(sp)
 800c1a0:	dc401f17 	ldw	r17,124(sp)
 800c1a4:	dd800404 	addi	r22,sp,16
 800c1a8:	003e8f06 	br	800bbe8 <__alt_data_end+0xfc00bbe8>
 800c1ac:	0027883a 	mov	r19,zero
 800c1b0:	003f4a06 	br	800bedc <__alt_data_end+0xfc00bedc>
 800c1b4:	d9002d17 	ldw	r4,180(sp)
 800c1b8:	d9801e04 	addi	r6,sp,120
 800c1bc:	b80b883a 	mov	r5,r23
 800c1c0:	80120240 	call	8012024 <__sprint_r>
 800c1c4:	103b3f1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c1c8:	d8c02017 	ldw	r3,128(sp)
 800c1cc:	da000404 	addi	r8,sp,16
 800c1d0:	003c7b06 	br	800b3c0 <__alt_data_end+0xfc00b3c0>
 800c1d4:	d9402a17 	ldw	r5,168(sp)
 800c1d8:	04e7c83a 	sub	r19,zero,r19
 800c1dc:	07000b44 	movi	fp,45
 800c1e0:	9804c03a 	cmpne	r2,r19,zero
 800c1e4:	05adc83a 	sub	r22,zero,r22
 800c1e8:	df002785 	stb	fp,158(sp)
 800c1ec:	b0adc83a 	sub	r22,r22,r2
 800c1f0:	28017b16 	blt	r5,zero,800c7e0 <___vfprintf_internal_r+0x1d2c>
 800c1f4:	00bfdfc4 	movi	r2,-129
 800c1f8:	90a4703a 	and	r18,r18,r2
 800c1fc:	003b8906 	br	800b024 <__alt_data_end+0xfc00b024>
 800c200:	d9003617 	ldw	r4,216(sp)
 800c204:	d9403817 	ldw	r5,224(sp)
 800c208:	da003d15 	stw	r8,244(sp)
 800c20c:	8011c480 	call	8011c48 <__fpclassifyd>
 800c210:	da003d17 	ldw	r8,244(sp)
 800c214:	1000f026 	beq	r2,zero,800c5d8 <___vfprintf_internal_r+0x1b24>
 800c218:	d9002a17 	ldw	r4,168(sp)
 800c21c:	05bff7c4 	movi	r22,-33
 800c220:	00bfffc4 	movi	r2,-1
 800c224:	8dac703a 	and	r22,r17,r22
 800c228:	20820026 	beq	r4,r2,800ca2c <___vfprintf_internal_r+0x1f78>
 800c22c:	008011c4 	movi	r2,71
 800c230:	b081f726 	beq	r22,r2,800ca10 <___vfprintf_internal_r+0x1f5c>
 800c234:	d9003817 	ldw	r4,224(sp)
 800c238:	90c04014 	ori	r3,r18,256
 800c23c:	d8c02c15 	stw	r3,176(sp)
 800c240:	20021516 	blt	r4,zero,800ca98 <___vfprintf_internal_r+0x1fe4>
 800c244:	dcc03817 	ldw	r19,224(sp)
 800c248:	d8002905 	stb	zero,164(sp)
 800c24c:	00801984 	movi	r2,102
 800c250:	8881f926 	beq	r17,r2,800ca38 <___vfprintf_internal_r+0x1f84>
 800c254:	00801184 	movi	r2,70
 800c258:	88821c26 	beq	r17,r2,800cacc <___vfprintf_internal_r+0x2018>
 800c25c:	00801144 	movi	r2,69
 800c260:	b081ef26 	beq	r22,r2,800ca20 <___vfprintf_internal_r+0x1f6c>
 800c264:	d8c02a17 	ldw	r3,168(sp)
 800c268:	d8802104 	addi	r2,sp,132
 800c26c:	d8800315 	stw	r2,12(sp)
 800c270:	d9403617 	ldw	r5,216(sp)
 800c274:	d8802504 	addi	r2,sp,148
 800c278:	d9002d17 	ldw	r4,180(sp)
 800c27c:	d8800215 	stw	r2,8(sp)
 800c280:	d8802604 	addi	r2,sp,152
 800c284:	d8c00015 	stw	r3,0(sp)
 800c288:	d8800115 	stw	r2,4(sp)
 800c28c:	01c00084 	movi	r7,2
 800c290:	980d883a 	mov	r6,r19
 800c294:	d8c03c15 	stw	r3,240(sp)
 800c298:	da003d15 	stw	r8,244(sp)
 800c29c:	800d1e40 	call	800d1e4 <_dtoa_r>
 800c2a0:	1021883a 	mov	r16,r2
 800c2a4:	008019c4 	movi	r2,103
 800c2a8:	d8c03c17 	ldw	r3,240(sp)
 800c2ac:	da003d17 	ldw	r8,244(sp)
 800c2b0:	88817126 	beq	r17,r2,800c878 <___vfprintf_internal_r+0x1dc4>
 800c2b4:	008011c4 	movi	r2,71
 800c2b8:	88829126 	beq	r17,r2,800cd00 <___vfprintf_internal_r+0x224c>
 800c2bc:	80f9883a 	add	fp,r16,r3
 800c2c0:	d9003617 	ldw	r4,216(sp)
 800c2c4:	000d883a 	mov	r6,zero
 800c2c8:	000f883a 	mov	r7,zero
 800c2cc:	980b883a 	mov	r5,r19
 800c2d0:	da003d15 	stw	r8,244(sp)
 800c2d4:	801500c0 	call	801500c <__eqdf2>
 800c2d8:	da003d17 	ldw	r8,244(sp)
 800c2dc:	10018d26 	beq	r2,zero,800c914 <___vfprintf_internal_r+0x1e60>
 800c2e0:	d8802117 	ldw	r2,132(sp)
 800c2e4:	1700062e 	bgeu	r2,fp,800c300 <___vfprintf_internal_r+0x184c>
 800c2e8:	01000c04 	movi	r4,48
 800c2ec:	10c00044 	addi	r3,r2,1
 800c2f0:	d8c02115 	stw	r3,132(sp)
 800c2f4:	11000005 	stb	r4,0(r2)
 800c2f8:	d8802117 	ldw	r2,132(sp)
 800c2fc:	173ffb36 	bltu	r2,fp,800c2ec <__alt_data_end+0xfc00c2ec>
 800c300:	1405c83a 	sub	r2,r2,r16
 800c304:	d8803315 	stw	r2,204(sp)
 800c308:	008011c4 	movi	r2,71
 800c30c:	b0817626 	beq	r22,r2,800c8e8 <___vfprintf_internal_r+0x1e34>
 800c310:	00801944 	movi	r2,101
 800c314:	1442800e 	bge	r2,r17,800cd18 <___vfprintf_internal_r+0x2264>
 800c318:	d8c02617 	ldw	r3,152(sp)
 800c31c:	00801984 	movi	r2,102
 800c320:	d8c03215 	stw	r3,200(sp)
 800c324:	8881fe26 	beq	r17,r2,800cb20 <___vfprintf_internal_r+0x206c>
 800c328:	d8c03217 	ldw	r3,200(sp)
 800c32c:	d9003317 	ldw	r4,204(sp)
 800c330:	1901dd16 	blt	r3,r4,800caa8 <___vfprintf_internal_r+0x1ff4>
 800c334:	9480004c 	andi	r18,r18,1
 800c338:	90022b1e 	bne	r18,zero,800cbe8 <___vfprintf_internal_r+0x2134>
 800c33c:	1805883a 	mov	r2,r3
 800c340:	18028316 	blt	r3,zero,800cd50 <___vfprintf_internal_r+0x229c>
 800c344:	d8c03217 	ldw	r3,200(sp)
 800c348:	044019c4 	movi	r17,103
 800c34c:	d8c02b15 	stw	r3,172(sp)
 800c350:	df002907 	ldb	fp,164(sp)
 800c354:	e001531e 	bne	fp,zero,800c8a4 <___vfprintf_internal_r+0x1df0>
 800c358:	df002783 	ldbu	fp,158(sp)
 800c35c:	d8802915 	stw	r2,164(sp)
 800c360:	dc802c17 	ldw	r18,176(sp)
 800c364:	d8002a15 	stw	zero,168(sp)
 800c368:	003baf06 	br	800b228 <__alt_data_end+0xfc00b228>
 800c36c:	d8c02e17 	ldw	r3,184(sp)
 800c370:	d9002e17 	ldw	r4,184(sp)
 800c374:	d9402e17 	ldw	r5,184(sp)
 800c378:	18c00017 	ldw	r3,0(r3)
 800c37c:	21000117 	ldw	r4,4(r4)
 800c380:	29400204 	addi	r5,r5,8
 800c384:	d8c03615 	stw	r3,216(sp)
 800c388:	d9003815 	stw	r4,224(sp)
 800c38c:	d9402e15 	stw	r5,184(sp)
 800c390:	003b5006 	br	800b0d4 <__alt_data_end+0xfc00b0d4>
 800c394:	ac400007 	ldb	r17,0(r21)
 800c398:	003a2806 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800c39c:	9080100c 	andi	r2,r18,64
 800c3a0:	1000a826 	beq	r2,zero,800c644 <___vfprintf_internal_r+0x1b90>
 800c3a4:	d8c02e17 	ldw	r3,184(sp)
 800c3a8:	002d883a 	mov	r22,zero
 800c3ac:	1cc0000b 	ldhu	r19,0(r3)
 800c3b0:	18c00104 	addi	r3,r3,4
 800c3b4:	d8c02e15 	stw	r3,184(sp)
 800c3b8:	003caf06 	br	800b678 <__alt_data_end+0xfc00b678>
 800c3bc:	d9002e17 	ldw	r4,184(sp)
 800c3c0:	d9402a17 	ldw	r5,168(sp)
 800c3c4:	002d883a 	mov	r22,zero
 800c3c8:	20800104 	addi	r2,r4,4
 800c3cc:	24c00017 	ldw	r19,0(r4)
 800c3d0:	283ebb0e 	bge	r5,zero,800bec0 <__alt_data_end+0xfc00bec0>
 800c3d4:	003ef106 	br	800bf9c <__alt_data_end+0xfc00bf9c>
 800c3d8:	9080040c 	andi	r2,r18,16
 800c3dc:	1000921e 	bne	r2,zero,800c628 <___vfprintf_internal_r+0x1b74>
 800c3e0:	9480100c 	andi	r18,r18,64
 800c3e4:	90013926 	beq	r18,zero,800c8cc <___vfprintf_internal_r+0x1e18>
 800c3e8:	d9402e17 	ldw	r5,184(sp)
 800c3ec:	d8c02f17 	ldw	r3,188(sp)
 800c3f0:	28800017 	ldw	r2,0(r5)
 800c3f4:	29400104 	addi	r5,r5,4
 800c3f8:	d9402e15 	stw	r5,184(sp)
 800c3fc:	10c0000d 	sth	r3,0(r2)
 800c400:	0039e406 	br	800ab94 <__alt_data_end+0xfc00ab94>
 800c404:	9080100c 	andi	r2,r18,64
 800c408:	10008026 	beq	r2,zero,800c60c <___vfprintf_internal_r+0x1b58>
 800c40c:	d8802e17 	ldw	r2,184(sp)
 800c410:	14c0000f 	ldh	r19,0(r2)
 800c414:	10800104 	addi	r2,r2,4
 800c418:	d8802e15 	stw	r2,184(sp)
 800c41c:	982dd7fa 	srai	r22,r19,31
 800c420:	b005883a 	mov	r2,r22
 800c424:	003af706 	br	800b004 <__alt_data_end+0xfc00b004>
 800c428:	9080100c 	andi	r2,r18,64
 800c42c:	d8002785 	stb	zero,158(sp)
 800c430:	10008a1e 	bne	r2,zero,800c65c <___vfprintf_internal_r+0x1ba8>
 800c434:	d9002e17 	ldw	r4,184(sp)
 800c438:	d9402a17 	ldw	r5,168(sp)
 800c43c:	002d883a 	mov	r22,zero
 800c440:	20800104 	addi	r2,r4,4
 800c444:	24c00017 	ldw	r19,0(r4)
 800c448:	283e4b0e 	bge	r5,zero,800bd78 <__alt_data_end+0xfc00bd78>
 800c44c:	9d86b03a 	or	r3,r19,r22
 800c450:	d8802e15 	stw	r2,184(sp)
 800c454:	183e4c1e 	bne	r3,zero,800bd88 <__alt_data_end+0xfc00bd88>
 800c458:	0039883a 	mov	fp,zero
 800c45c:	0005883a 	mov	r2,zero
 800c460:	003d4006 	br	800b964 <__alt_data_end+0xfc00b964>
 800c464:	01421974 	movhi	r5,2149
 800c468:	29774b84 	addi	r5,r5,-8914
 800c46c:	d9402c15 	stw	r5,176(sp)
 800c470:	d9402c17 	ldw	r5,176(sp)
 800c474:	1c47883a 	add	r3,r3,r17
 800c478:	10800044 	addi	r2,r2,1
 800c47c:	41400015 	stw	r5,0(r8)
 800c480:	44400115 	stw	r17,4(r8)
 800c484:	d8c02015 	stw	r3,128(sp)
 800c488:	d8801f15 	stw	r2,124(sp)
 800c48c:	010001c4 	movi	r4,7
 800c490:	20bec816 	blt	r4,r2,800bfb4 <__alt_data_end+0xfc00bfb4>
 800c494:	42000204 	addi	r8,r8,8
 800c498:	003ecd06 	br	800bfd0 <__alt_data_end+0xfc00bfd0>
 800c49c:	d9002a17 	ldw	r4,168(sp)
 800c4a0:	d8002785 	stb	zero,158(sp)
 800c4a4:	203d2d16 	blt	r4,zero,800b95c <__alt_data_end+0xfc00b95c>
 800c4a8:	00bfdfc4 	movi	r2,-129
 800c4ac:	90a4703a 	and	r18,r18,r2
 800c4b0:	003a6106 	br	800ae38 <__alt_data_end+0xfc00ae38>
 800c4b4:	01021974 	movhi	r4,2149
 800c4b8:	21374b84 	addi	r4,r4,-8914
 800c4bc:	d9002c15 	stw	r4,176(sp)
 800c4c0:	003bea06 	br	800b46c <__alt_data_end+0xfc00b46c>
 800c4c4:	d9002d17 	ldw	r4,180(sp)
 800c4c8:	d9801e04 	addi	r6,sp,120
 800c4cc:	b80b883a 	mov	r5,r23
 800c4d0:	80120240 	call	8012024 <__sprint_r>
 800c4d4:	103a7b1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c4d8:	d8c02017 	ldw	r3,128(sp)
 800c4dc:	da000404 	addi	r8,sp,16
 800c4e0:	003d4106 	br	800b9e8 <__alt_data_end+0xfc00b9e8>
 800c4e4:	d8801f17 	ldw	r2,124(sp)
 800c4e8:	01421974 	movhi	r5,2149
 800c4ec:	01000044 	movi	r4,1
 800c4f0:	18c00044 	addi	r3,r3,1
 800c4f4:	10800044 	addi	r2,r2,1
 800c4f8:	29774b04 	addi	r5,r5,-8916
 800c4fc:	41000115 	stw	r4,4(r8)
 800c500:	41400015 	stw	r5,0(r8)
 800c504:	d8c02015 	stw	r3,128(sp)
 800c508:	d8801f15 	stw	r2,124(sp)
 800c50c:	010001c4 	movi	r4,7
 800c510:	20805c16 	blt	r4,r2,800c684 <___vfprintf_internal_r+0x1bd0>
 800c514:	42000204 	addi	r8,r8,8
 800c518:	8800041e 	bne	r17,zero,800c52c <___vfprintf_internal_r+0x1a78>
 800c51c:	d8803317 	ldw	r2,204(sp)
 800c520:	1000021e 	bne	r2,zero,800c52c <___vfprintf_internal_r+0x1a78>
 800c524:	9080004c 	andi	r2,r18,1
 800c528:	103be726 	beq	r2,zero,800b4c8 <__alt_data_end+0xfc00b4c8>
 800c52c:	d9003717 	ldw	r4,220(sp)
 800c530:	d8801f17 	ldw	r2,124(sp)
 800c534:	d9403417 	ldw	r5,208(sp)
 800c538:	20c7883a 	add	r3,r4,r3
 800c53c:	10800044 	addi	r2,r2,1
 800c540:	41000115 	stw	r4,4(r8)
 800c544:	41400015 	stw	r5,0(r8)
 800c548:	d8c02015 	stw	r3,128(sp)
 800c54c:	d8801f15 	stw	r2,124(sp)
 800c550:	010001c4 	movi	r4,7
 800c554:	20812116 	blt	r4,r2,800c9dc <___vfprintf_internal_r+0x1f28>
 800c558:	42000204 	addi	r8,r8,8
 800c55c:	0463c83a 	sub	r17,zero,r17
 800c560:	0440730e 	bge	zero,r17,800c730 <___vfprintf_internal_r+0x1c7c>
 800c564:	05800404 	movi	r22,16
 800c568:	b440860e 	bge	r22,r17,800c784 <___vfprintf_internal_r+0x1cd0>
 800c56c:	01421974 	movhi	r5,2149
 800c570:	29774b84 	addi	r5,r5,-8914
 800c574:	d9402c15 	stw	r5,176(sp)
 800c578:	070001c4 	movi	fp,7
 800c57c:	dcc02d17 	ldw	r19,180(sp)
 800c580:	00000306 	br	800c590 <___vfprintf_internal_r+0x1adc>
 800c584:	42000204 	addi	r8,r8,8
 800c588:	8c7ffc04 	addi	r17,r17,-16
 800c58c:	b440800e 	bge	r22,r17,800c790 <___vfprintf_internal_r+0x1cdc>
 800c590:	18c00404 	addi	r3,r3,16
 800c594:	10800044 	addi	r2,r2,1
 800c598:	45000015 	stw	r20,0(r8)
 800c59c:	45800115 	stw	r22,4(r8)
 800c5a0:	d8c02015 	stw	r3,128(sp)
 800c5a4:	d8801f15 	stw	r2,124(sp)
 800c5a8:	e0bff60e 	bge	fp,r2,800c584 <__alt_data_end+0xfc00c584>
 800c5ac:	d9801e04 	addi	r6,sp,120
 800c5b0:	b80b883a 	mov	r5,r23
 800c5b4:	9809883a 	mov	r4,r19
 800c5b8:	80120240 	call	8012024 <__sprint_r>
 800c5bc:	103a411e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c5c0:	d8c02017 	ldw	r3,128(sp)
 800c5c4:	d8801f17 	ldw	r2,124(sp)
 800c5c8:	da000404 	addi	r8,sp,16
 800c5cc:	003fee06 	br	800c588 <__alt_data_end+0xfc00c588>
 800c5d0:	00bfffc4 	movi	r2,-1
 800c5d4:	003a3f06 	br	800aed4 <__alt_data_end+0xfc00aed4>
 800c5d8:	008011c4 	movi	r2,71
 800c5dc:	1440b816 	blt	r2,r17,800c8c0 <___vfprintf_internal_r+0x1e0c>
 800c5e0:	04021974 	movhi	r16,2149
 800c5e4:	84373d04 	addi	r16,r16,-8972
 800c5e8:	00c000c4 	movi	r3,3
 800c5ec:	00bfdfc4 	movi	r2,-129
 800c5f0:	d8c02915 	stw	r3,164(sp)
 800c5f4:	90a4703a 	and	r18,r18,r2
 800c5f8:	df002783 	ldbu	fp,158(sp)
 800c5fc:	d8c02b15 	stw	r3,172(sp)
 800c600:	d8002a15 	stw	zero,168(sp)
 800c604:	d8003215 	stw	zero,200(sp)
 800c608:	003b0706 	br	800b228 <__alt_data_end+0xfc00b228>
 800c60c:	d8c02e17 	ldw	r3,184(sp)
 800c610:	1cc00017 	ldw	r19,0(r3)
 800c614:	18c00104 	addi	r3,r3,4
 800c618:	d8c02e15 	stw	r3,184(sp)
 800c61c:	982dd7fa 	srai	r22,r19,31
 800c620:	b005883a 	mov	r2,r22
 800c624:	003a7706 	br	800b004 <__alt_data_end+0xfc00b004>
 800c628:	d8c02e17 	ldw	r3,184(sp)
 800c62c:	d9002f17 	ldw	r4,188(sp)
 800c630:	18800017 	ldw	r2,0(r3)
 800c634:	18c00104 	addi	r3,r3,4
 800c638:	d8c02e15 	stw	r3,184(sp)
 800c63c:	11000015 	stw	r4,0(r2)
 800c640:	00395406 	br	800ab94 <__alt_data_end+0xfc00ab94>
 800c644:	d9002e17 	ldw	r4,184(sp)
 800c648:	002d883a 	mov	r22,zero
 800c64c:	24c00017 	ldw	r19,0(r4)
 800c650:	21000104 	addi	r4,r4,4
 800c654:	d9002e15 	stw	r4,184(sp)
 800c658:	003c0706 	br	800b678 <__alt_data_end+0xfc00b678>
 800c65c:	d9402e17 	ldw	r5,184(sp)
 800c660:	d8c02a17 	ldw	r3,168(sp)
 800c664:	002d883a 	mov	r22,zero
 800c668:	28800104 	addi	r2,r5,4
 800c66c:	2cc0000b 	ldhu	r19,0(r5)
 800c670:	183dc10e 	bge	r3,zero,800bd78 <__alt_data_end+0xfc00bd78>
 800c674:	003f7506 	br	800c44c <__alt_data_end+0xfc00c44c>
 800c678:	04021974 	movhi	r16,2149
 800c67c:	84373b04 	addi	r16,r16,-8980
 800c680:	003aa706 	br	800b120 <__alt_data_end+0xfc00b120>
 800c684:	d9002d17 	ldw	r4,180(sp)
 800c688:	d9801e04 	addi	r6,sp,120
 800c68c:	b80b883a 	mov	r5,r23
 800c690:	80120240 	call	8012024 <__sprint_r>
 800c694:	103a0b1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c698:	dc402617 	ldw	r17,152(sp)
 800c69c:	d8c02017 	ldw	r3,128(sp)
 800c6a0:	da000404 	addi	r8,sp,16
 800c6a4:	003f9c06 	br	800c518 <__alt_data_end+0xfc00c518>
 800c6a8:	ac400043 	ldbu	r17,1(r21)
 800c6ac:	84000814 	ori	r16,r16,32
 800c6b0:	ad400044 	addi	r21,r21,1
 800c6b4:	8c403fcc 	andi	r17,r17,255
 800c6b8:	8c40201c 	xori	r17,r17,128
 800c6bc:	8c7fe004 	addi	r17,r17,-128
 800c6c0:	00395e06 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800c6c4:	d8c02e15 	stw	r3,184(sp)
 800c6c8:	0039883a 	mov	fp,zero
 800c6cc:	003e3506 	br	800bfa4 <__alt_data_end+0xfc00bfa4>
 800c6d0:	d9002d17 	ldw	r4,180(sp)
 800c6d4:	d9801e04 	addi	r6,sp,120
 800c6d8:	b80b883a 	mov	r5,r23
 800c6dc:	80120240 	call	8012024 <__sprint_r>
 800c6e0:	1039f81e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c6e4:	d8c02017 	ldw	r3,128(sp)
 800c6e8:	da000404 	addi	r8,sp,16
 800c6ec:	003cd006 	br	800ba30 <__alt_data_end+0xfc00ba30>
 800c6f0:	8009883a 	mov	r4,r16
 800c6f4:	df003d15 	stw	fp,244(sp)
 800c6f8:	800aa1c0 	call	800aa1c <strlen>
 800c6fc:	d8802b15 	stw	r2,172(sp)
 800c700:	da003d17 	ldw	r8,244(sp)
 800c704:	103c200e 	bge	r2,zero,800b788 <__alt_data_end+0xfc00b788>
 800c708:	0005883a 	mov	r2,zero
 800c70c:	003c1e06 	br	800b788 <__alt_data_end+0xfc00b788>
 800c710:	d9002d17 	ldw	r4,180(sp)
 800c714:	d9801e04 	addi	r6,sp,120
 800c718:	b80b883a 	mov	r5,r23
 800c71c:	80120240 	call	8012024 <__sprint_r>
 800c720:	1039e81e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c724:	d8c02017 	ldw	r3,128(sp)
 800c728:	d8801f17 	ldw	r2,124(sp)
 800c72c:	da000404 	addi	r8,sp,16
 800c730:	d9403317 	ldw	r5,204(sp)
 800c734:	10800044 	addi	r2,r2,1
 800c738:	44000015 	stw	r16,0(r8)
 800c73c:	28c7883a 	add	r3,r5,r3
 800c740:	003b5b06 	br	800b4b0 <__alt_data_end+0xfc00b4b0>
 800c744:	01021974 	movhi	r4,2149
 800c748:	21374f84 	addi	r4,r4,-8898
 800c74c:	d9003515 	stw	r4,212(sp)
 800c750:	003af206 	br	800b31c <__alt_data_end+0xfc00b31c>
 800c754:	013fffc4 	movi	r4,-1
 800c758:	003a0806 	br	800af7c <__alt_data_end+0xfc00af7c>
 800c75c:	0023883a 	mov	r17,zero
 800c760:	003d9d06 	br	800bdd8 <__alt_data_end+0xfc00bdd8>
 800c764:	d9002d17 	ldw	r4,180(sp)
 800c768:	d9801e04 	addi	r6,sp,120
 800c76c:	b80b883a 	mov	r5,r23
 800c770:	80120240 	call	8012024 <__sprint_r>
 800c774:	1039d31e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c778:	d8c02017 	ldw	r3,128(sp)
 800c77c:	da000404 	addi	r8,sp,16
 800c780:	003d9406 	br	800bdd4 <__alt_data_end+0xfc00bdd4>
 800c784:	01021974 	movhi	r4,2149
 800c788:	21374b84 	addi	r4,r4,-8914
 800c78c:	d9002c15 	stw	r4,176(sp)
 800c790:	d9002c17 	ldw	r4,176(sp)
 800c794:	1c47883a 	add	r3,r3,r17
 800c798:	10800044 	addi	r2,r2,1
 800c79c:	41000015 	stw	r4,0(r8)
 800c7a0:	44400115 	stw	r17,4(r8)
 800c7a4:	d8c02015 	stw	r3,128(sp)
 800c7a8:	d8801f15 	stw	r2,124(sp)
 800c7ac:	010001c4 	movi	r4,7
 800c7b0:	20bfd716 	blt	r4,r2,800c710 <__alt_data_end+0xfc00c710>
 800c7b4:	42000204 	addi	r8,r8,8
 800c7b8:	003fdd06 	br	800c730 <__alt_data_end+0xfc00c730>
 800c7bc:	d9002d17 	ldw	r4,180(sp)
 800c7c0:	d9801e04 	addi	r6,sp,120
 800c7c4:	b80b883a 	mov	r5,r23
 800c7c8:	80120240 	call	8012024 <__sprint_r>
 800c7cc:	1039bd1e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c7d0:	d8802617 	ldw	r2,152(sp)
 800c7d4:	d8c02017 	ldw	r3,128(sp)
 800c7d8:	da000404 	addi	r8,sp,16
 800c7dc:	003e1006 	br	800c020 <__alt_data_end+0xfc00c020>
 800c7e0:	00800044 	movi	r2,1
 800c7e4:	10803fcc 	andi	r2,r2,255
 800c7e8:	00c00044 	movi	r3,1
 800c7ec:	10fa0d26 	beq	r2,r3,800b024 <__alt_data_end+0xfc00b024>
 800c7f0:	00c00084 	movi	r3,2
 800c7f4:	10fbaf26 	beq	r2,r3,800b6b4 <__alt_data_end+0xfc00b6b4>
 800c7f8:	003a6d06 	br	800b1b0 <__alt_data_end+0xfc00b1b0>
 800c7fc:	01021974 	movhi	r4,2149
 800c800:	21374f84 	addi	r4,r4,-8898
 800c804:	d9003515 	stw	r4,212(sp)
 800c808:	003b5406 	br	800b55c <__alt_data_end+0xfc00b55c>
 800c80c:	d8802a17 	ldw	r2,168(sp)
 800c810:	00c00184 	movi	r3,6
 800c814:	1880012e 	bgeu	r3,r2,800c81c <___vfprintf_internal_r+0x1d68>
 800c818:	1805883a 	mov	r2,r3
 800c81c:	d8802b15 	stw	r2,172(sp)
 800c820:	1000ef16 	blt	r2,zero,800cbe0 <___vfprintf_internal_r+0x212c>
 800c824:	04021974 	movhi	r16,2149
 800c828:	d8802915 	stw	r2,164(sp)
 800c82c:	dcc02e15 	stw	r19,184(sp)
 800c830:	d8002a15 	stw	zero,168(sp)
 800c834:	d8003215 	stw	zero,200(sp)
 800c838:	84374904 	addi	r16,r16,-8924
 800c83c:	0039883a 	mov	fp,zero
 800c840:	003a8006 	br	800b244 <__alt_data_end+0xfc00b244>
 800c844:	0021883a 	mov	r16,zero
 800c848:	003e0706 	br	800c068 <__alt_data_end+0xfc00c068>
 800c84c:	d9002d17 	ldw	r4,180(sp)
 800c850:	d9801e04 	addi	r6,sp,120
 800c854:	b80b883a 	mov	r5,r23
 800c858:	80120240 	call	8012024 <__sprint_r>
 800c85c:	1039991e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c860:	d8802617 	ldw	r2,152(sp)
 800c864:	d9403317 	ldw	r5,204(sp)
 800c868:	d8c02017 	ldw	r3,128(sp)
 800c86c:	da000404 	addi	r8,sp,16
 800c870:	2885c83a 	sub	r2,r5,r2
 800c874:	003dfb06 	br	800c064 <__alt_data_end+0xfc00c064>
 800c878:	9080004c 	andi	r2,r18,1
 800c87c:	103e8f1e 	bne	r2,zero,800c2bc <__alt_data_end+0xfc00c2bc>
 800c880:	d8802117 	ldw	r2,132(sp)
 800c884:	003e9e06 	br	800c300 <__alt_data_end+0xfc00c300>
 800c888:	1025883a 	mov	r18,r2
 800c88c:	0039883a 	mov	fp,zero
 800c890:	00800084 	movi	r2,2
 800c894:	003fd306 	br	800c7e4 <__alt_data_end+0xfc00c7e4>
 800c898:	07000b44 	movi	fp,45
 800c89c:	df002785 	stb	fp,158(sp)
 800c8a0:	003a1b06 	br	800b110 <__alt_data_end+0xfc00b110>
 800c8a4:	00c00b44 	movi	r3,45
 800c8a8:	d8c02785 	stb	r3,158(sp)
 800c8ac:	d8802915 	stw	r2,164(sp)
 800c8b0:	dc802c17 	ldw	r18,176(sp)
 800c8b4:	d8002a15 	stw	zero,168(sp)
 800c8b8:	07000b44 	movi	fp,45
 800c8bc:	003a5e06 	br	800b238 <__alt_data_end+0xfc00b238>
 800c8c0:	04021974 	movhi	r16,2149
 800c8c4:	84373e04 	addi	r16,r16,-8968
 800c8c8:	003f4706 	br	800c5e8 <__alt_data_end+0xfc00c5e8>
 800c8cc:	d9002e17 	ldw	r4,184(sp)
 800c8d0:	d9402f17 	ldw	r5,188(sp)
 800c8d4:	20800017 	ldw	r2,0(r4)
 800c8d8:	21000104 	addi	r4,r4,4
 800c8dc:	d9002e15 	stw	r4,184(sp)
 800c8e0:	11400015 	stw	r5,0(r2)
 800c8e4:	0038ab06 	br	800ab94 <__alt_data_end+0xfc00ab94>
 800c8e8:	dd802617 	ldw	r22,152(sp)
 800c8ec:	00bfff44 	movi	r2,-3
 800c8f0:	b0801c16 	blt	r22,r2,800c964 <___vfprintf_internal_r+0x1eb0>
 800c8f4:	d9402a17 	ldw	r5,168(sp)
 800c8f8:	2d801a16 	blt	r5,r22,800c964 <___vfprintf_internal_r+0x1eb0>
 800c8fc:	dd803215 	stw	r22,200(sp)
 800c900:	003e8906 	br	800c328 <__alt_data_end+0xfc00c328>
 800c904:	01021974 	movhi	r4,2149
 800c908:	21374b84 	addi	r4,r4,-8914
 800c90c:	d9002c15 	stw	r4,176(sp)
 800c910:	003c9106 	br	800bb58 <__alt_data_end+0xfc00bb58>
 800c914:	e005883a 	mov	r2,fp
 800c918:	003e7906 	br	800c300 <__alt_data_end+0xfc00c300>
 800c91c:	d9002a17 	ldw	r4,168(sp)
 800c920:	df002783 	ldbu	fp,158(sp)
 800c924:	dcc02e15 	stw	r19,184(sp)
 800c928:	d9002915 	stw	r4,164(sp)
 800c92c:	d9002b15 	stw	r4,172(sp)
 800c930:	d8002a15 	stw	zero,168(sp)
 800c934:	d8003215 	stw	zero,200(sp)
 800c938:	003a3b06 	br	800b228 <__alt_data_end+0xfc00b228>
 800c93c:	9080004c 	andi	r2,r18,1
 800c940:	0039883a 	mov	fp,zero
 800c944:	10000426 	beq	r2,zero,800c958 <___vfprintf_internal_r+0x1ea4>
 800c948:	00800c04 	movi	r2,48
 800c94c:	dc001dc4 	addi	r16,sp,119
 800c950:	d8801dc5 	stb	r2,119(sp)
 800c954:	003b6406 	br	800b6e8 <__alt_data_end+0xfc00b6e8>
 800c958:	d8002b15 	stw	zero,172(sp)
 800c95c:	dc001e04 	addi	r16,sp,120
 800c960:	003a2b06 	br	800b210 <__alt_data_end+0xfc00b210>
 800c964:	8c7fff84 	addi	r17,r17,-2
 800c968:	b5bfffc4 	addi	r22,r22,-1
 800c96c:	dd802615 	stw	r22,152(sp)
 800c970:	dc4022c5 	stb	r17,139(sp)
 800c974:	b000bf16 	blt	r22,zero,800cc74 <___vfprintf_internal_r+0x21c0>
 800c978:	00800ac4 	movi	r2,43
 800c97c:	d8802305 	stb	r2,140(sp)
 800c980:	00800244 	movi	r2,9
 800c984:	15807016 	blt	r2,r22,800cb48 <___vfprintf_internal_r+0x2094>
 800c988:	00800c04 	movi	r2,48
 800c98c:	b5800c04 	addi	r22,r22,48
 800c990:	d8802345 	stb	r2,141(sp)
 800c994:	dd802385 	stb	r22,142(sp)
 800c998:	d88023c4 	addi	r2,sp,143
 800c99c:	df0022c4 	addi	fp,sp,139
 800c9a0:	d8c03317 	ldw	r3,204(sp)
 800c9a4:	1739c83a 	sub	fp,r2,fp
 800c9a8:	d9003317 	ldw	r4,204(sp)
 800c9ac:	e0c7883a 	add	r3,fp,r3
 800c9b0:	df003a15 	stw	fp,232(sp)
 800c9b4:	d8c02b15 	stw	r3,172(sp)
 800c9b8:	00800044 	movi	r2,1
 800c9bc:	1100b30e 	bge	r2,r4,800cc8c <___vfprintf_internal_r+0x21d8>
 800c9c0:	d8c02b17 	ldw	r3,172(sp)
 800c9c4:	18c00044 	addi	r3,r3,1
 800c9c8:	d8c02b15 	stw	r3,172(sp)
 800c9cc:	1805883a 	mov	r2,r3
 800c9d0:	1800ac16 	blt	r3,zero,800cc84 <___vfprintf_internal_r+0x21d0>
 800c9d4:	d8003215 	stw	zero,200(sp)
 800c9d8:	003e5d06 	br	800c350 <__alt_data_end+0xfc00c350>
 800c9dc:	d9002d17 	ldw	r4,180(sp)
 800c9e0:	d9801e04 	addi	r6,sp,120
 800c9e4:	b80b883a 	mov	r5,r23
 800c9e8:	80120240 	call	8012024 <__sprint_r>
 800c9ec:	1039351e 	bne	r2,zero,800aec4 <__alt_data_end+0xfc00aec4>
 800c9f0:	dc402617 	ldw	r17,152(sp)
 800c9f4:	d8c02017 	ldw	r3,128(sp)
 800c9f8:	d8801f17 	ldw	r2,124(sp)
 800c9fc:	da000404 	addi	r8,sp,16
 800ca00:	003ed606 	br	800c55c <__alt_data_end+0xfc00c55c>
 800ca04:	182b883a 	mov	r21,r3
 800ca08:	d8002a15 	stw	zero,168(sp)
 800ca0c:	00388c06 	br	800ac40 <__alt_data_end+0xfc00ac40>
 800ca10:	d8802a17 	ldw	r2,168(sp)
 800ca14:	103e071e 	bne	r2,zero,800c234 <__alt_data_end+0xfc00c234>
 800ca18:	dc002a15 	stw	r16,168(sp)
 800ca1c:	003e0506 	br	800c234 <__alt_data_end+0xfc00c234>
 800ca20:	d9002a17 	ldw	r4,168(sp)
 800ca24:	20c00044 	addi	r3,r4,1
 800ca28:	003e0f06 	br	800c268 <__alt_data_end+0xfc00c268>
 800ca2c:	01400184 	movi	r5,6
 800ca30:	d9402a15 	stw	r5,168(sp)
 800ca34:	003dff06 	br	800c234 <__alt_data_end+0xfc00c234>
 800ca38:	d8802104 	addi	r2,sp,132
 800ca3c:	d8800315 	stw	r2,12(sp)
 800ca40:	d8802504 	addi	r2,sp,148
 800ca44:	d8800215 	stw	r2,8(sp)
 800ca48:	d8802604 	addi	r2,sp,152
 800ca4c:	d8800115 	stw	r2,4(sp)
 800ca50:	d8802a17 	ldw	r2,168(sp)
 800ca54:	d9403617 	ldw	r5,216(sp)
 800ca58:	d9002d17 	ldw	r4,180(sp)
 800ca5c:	d8800015 	stw	r2,0(sp)
 800ca60:	01c000c4 	movi	r7,3
 800ca64:	980d883a 	mov	r6,r19
 800ca68:	da003d15 	stw	r8,244(sp)
 800ca6c:	800d1e40 	call	800d1e4 <_dtoa_r>
 800ca70:	d8c02a17 	ldw	r3,168(sp)
 800ca74:	da003d17 	ldw	r8,244(sp)
 800ca78:	1021883a 	mov	r16,r2
 800ca7c:	10f9883a 	add	fp,r2,r3
 800ca80:	81000007 	ldb	r4,0(r16)
 800ca84:	00800c04 	movi	r2,48
 800ca88:	20805e26 	beq	r4,r2,800cc04 <___vfprintf_internal_r+0x2150>
 800ca8c:	d8c02617 	ldw	r3,152(sp)
 800ca90:	e0f9883a 	add	fp,fp,r3
 800ca94:	003e0a06 	br	800c2c0 <__alt_data_end+0xfc00c2c0>
 800ca98:	00c00b44 	movi	r3,45
 800ca9c:	24e0003c 	xorhi	r19,r4,32768
 800caa0:	d8c02905 	stb	r3,164(sp)
 800caa4:	003de906 	br	800c24c <__alt_data_end+0xfc00c24c>
 800caa8:	d8c03217 	ldw	r3,200(sp)
 800caac:	00c07a0e 	bge	zero,r3,800cc98 <___vfprintf_internal_r+0x21e4>
 800cab0:	00800044 	movi	r2,1
 800cab4:	d9003317 	ldw	r4,204(sp)
 800cab8:	1105883a 	add	r2,r2,r4
 800cabc:	d8802b15 	stw	r2,172(sp)
 800cac0:	10004e16 	blt	r2,zero,800cbfc <___vfprintf_internal_r+0x2148>
 800cac4:	044019c4 	movi	r17,103
 800cac8:	003e2106 	br	800c350 <__alt_data_end+0xfc00c350>
 800cacc:	d9002a17 	ldw	r4,168(sp)
 800cad0:	d8802104 	addi	r2,sp,132
 800cad4:	d8800315 	stw	r2,12(sp)
 800cad8:	d9000015 	stw	r4,0(sp)
 800cadc:	d8802504 	addi	r2,sp,148
 800cae0:	d9403617 	ldw	r5,216(sp)
 800cae4:	d9002d17 	ldw	r4,180(sp)
 800cae8:	d8800215 	stw	r2,8(sp)
 800caec:	d8802604 	addi	r2,sp,152
 800caf0:	d8800115 	stw	r2,4(sp)
 800caf4:	01c000c4 	movi	r7,3
 800caf8:	980d883a 	mov	r6,r19
 800cafc:	da003d15 	stw	r8,244(sp)
 800cb00:	800d1e40 	call	800d1e4 <_dtoa_r>
 800cb04:	d8c02a17 	ldw	r3,168(sp)
 800cb08:	da003d17 	ldw	r8,244(sp)
 800cb0c:	1021883a 	mov	r16,r2
 800cb10:	00801184 	movi	r2,70
 800cb14:	80f9883a 	add	fp,r16,r3
 800cb18:	88bfd926 	beq	r17,r2,800ca80 <__alt_data_end+0xfc00ca80>
 800cb1c:	003de806 	br	800c2c0 <__alt_data_end+0xfc00c2c0>
 800cb20:	d9002a17 	ldw	r4,168(sp)
 800cb24:	00c04d0e 	bge	zero,r3,800cc5c <___vfprintf_internal_r+0x21a8>
 800cb28:	2000441e 	bne	r4,zero,800cc3c <___vfprintf_internal_r+0x2188>
 800cb2c:	9480004c 	andi	r18,r18,1
 800cb30:	9000421e 	bne	r18,zero,800cc3c <___vfprintf_internal_r+0x2188>
 800cb34:	1805883a 	mov	r2,r3
 800cb38:	18006f16 	blt	r3,zero,800ccf8 <___vfprintf_internal_r+0x2244>
 800cb3c:	d8c03217 	ldw	r3,200(sp)
 800cb40:	d8c02b15 	stw	r3,172(sp)
 800cb44:	003e0206 	br	800c350 <__alt_data_end+0xfc00c350>
 800cb48:	df0022c4 	addi	fp,sp,139
 800cb4c:	dc002a15 	stw	r16,168(sp)
 800cb50:	4027883a 	mov	r19,r8
 800cb54:	e021883a 	mov	r16,fp
 800cb58:	b009883a 	mov	r4,r22
 800cb5c:	01400284 	movi	r5,10
 800cb60:	80070300 	call	8007030 <__modsi3>
 800cb64:	10800c04 	addi	r2,r2,48
 800cb68:	843fffc4 	addi	r16,r16,-1
 800cb6c:	b009883a 	mov	r4,r22
 800cb70:	01400284 	movi	r5,10
 800cb74:	80800005 	stb	r2,0(r16)
 800cb78:	8006fac0 	call	8006fac <__divsi3>
 800cb7c:	102d883a 	mov	r22,r2
 800cb80:	00800244 	movi	r2,9
 800cb84:	15bff416 	blt	r2,r22,800cb58 <__alt_data_end+0xfc00cb58>
 800cb88:	9811883a 	mov	r8,r19
 800cb8c:	b0800c04 	addi	r2,r22,48
 800cb90:	8027883a 	mov	r19,r16
 800cb94:	997fffc4 	addi	r5,r19,-1
 800cb98:	98bfffc5 	stb	r2,-1(r19)
 800cb9c:	dc002a17 	ldw	r16,168(sp)
 800cba0:	2f006d2e 	bgeu	r5,fp,800cd58 <___vfprintf_internal_r+0x22a4>
 800cba4:	d9c02384 	addi	r7,sp,142
 800cba8:	3ccfc83a 	sub	r7,r7,r19
 800cbac:	d9002344 	addi	r4,sp,141
 800cbb0:	e1cf883a 	add	r7,fp,r7
 800cbb4:	00000106 	br	800cbbc <___vfprintf_internal_r+0x2108>
 800cbb8:	28800003 	ldbu	r2,0(r5)
 800cbbc:	20800005 	stb	r2,0(r4)
 800cbc0:	21000044 	addi	r4,r4,1
 800cbc4:	29400044 	addi	r5,r5,1
 800cbc8:	393ffb1e 	bne	r7,r4,800cbb8 <__alt_data_end+0xfc00cbb8>
 800cbcc:	d8802304 	addi	r2,sp,140
 800cbd0:	14c5c83a 	sub	r2,r2,r19
 800cbd4:	d8c02344 	addi	r3,sp,141
 800cbd8:	1885883a 	add	r2,r3,r2
 800cbdc:	003f7006 	br	800c9a0 <__alt_data_end+0xfc00c9a0>
 800cbe0:	0005883a 	mov	r2,zero
 800cbe4:	003f0f06 	br	800c824 <__alt_data_end+0xfc00c824>
 800cbe8:	d8c03217 	ldw	r3,200(sp)
 800cbec:	18c00044 	addi	r3,r3,1
 800cbf0:	d8c02b15 	stw	r3,172(sp)
 800cbf4:	1805883a 	mov	r2,r3
 800cbf8:	183fb20e 	bge	r3,zero,800cac4 <__alt_data_end+0xfc00cac4>
 800cbfc:	0005883a 	mov	r2,zero
 800cc00:	003fb006 	br	800cac4 <__alt_data_end+0xfc00cac4>
 800cc04:	d9003617 	ldw	r4,216(sp)
 800cc08:	000d883a 	mov	r6,zero
 800cc0c:	000f883a 	mov	r7,zero
 800cc10:	980b883a 	mov	r5,r19
 800cc14:	d8c03c15 	stw	r3,240(sp)
 800cc18:	da003d15 	stw	r8,244(sp)
 800cc1c:	801500c0 	call	801500c <__eqdf2>
 800cc20:	d8c03c17 	ldw	r3,240(sp)
 800cc24:	da003d17 	ldw	r8,244(sp)
 800cc28:	103f9826 	beq	r2,zero,800ca8c <__alt_data_end+0xfc00ca8c>
 800cc2c:	00800044 	movi	r2,1
 800cc30:	10c7c83a 	sub	r3,r2,r3
 800cc34:	d8c02615 	stw	r3,152(sp)
 800cc38:	003f9506 	br	800ca90 <__alt_data_end+0xfc00ca90>
 800cc3c:	d9002a17 	ldw	r4,168(sp)
 800cc40:	d8c03217 	ldw	r3,200(sp)
 800cc44:	20800044 	addi	r2,r4,1
 800cc48:	1885883a 	add	r2,r3,r2
 800cc4c:	d8802b15 	stw	r2,172(sp)
 800cc50:	103dbf0e 	bge	r2,zero,800c350 <__alt_data_end+0xfc00c350>
 800cc54:	0005883a 	mov	r2,zero
 800cc58:	003dbd06 	br	800c350 <__alt_data_end+0xfc00c350>
 800cc5c:	2000201e 	bne	r4,zero,800cce0 <___vfprintf_internal_r+0x222c>
 800cc60:	9480004c 	andi	r18,r18,1
 800cc64:	90001e1e 	bne	r18,zero,800cce0 <___vfprintf_internal_r+0x222c>
 800cc68:	00800044 	movi	r2,1
 800cc6c:	d8802b15 	stw	r2,172(sp)
 800cc70:	003db706 	br	800c350 <__alt_data_end+0xfc00c350>
 800cc74:	00800b44 	movi	r2,45
 800cc78:	05adc83a 	sub	r22,zero,r22
 800cc7c:	d8802305 	stb	r2,140(sp)
 800cc80:	003f3f06 	br	800c980 <__alt_data_end+0xfc00c980>
 800cc84:	0005883a 	mov	r2,zero
 800cc88:	003f5206 	br	800c9d4 <__alt_data_end+0xfc00c9d4>
 800cc8c:	90a4703a 	and	r18,r18,r2
 800cc90:	903f4e26 	beq	r18,zero,800c9cc <__alt_data_end+0xfc00c9cc>
 800cc94:	003f4a06 	br	800c9c0 <__alt_data_end+0xfc00c9c0>
 800cc98:	00800084 	movi	r2,2
 800cc9c:	10c5c83a 	sub	r2,r2,r3
 800cca0:	003f8406 	br	800cab4 <__alt_data_end+0xfc00cab4>
 800cca4:	d9402e17 	ldw	r5,184(sp)
 800cca8:	d9002e17 	ldw	r4,184(sp)
 800ccac:	ac400043 	ldbu	r17,1(r21)
 800ccb0:	29400017 	ldw	r5,0(r5)
 800ccb4:	20800104 	addi	r2,r4,4
 800ccb8:	d8802e15 	stw	r2,184(sp)
 800ccbc:	d9402a15 	stw	r5,168(sp)
 800ccc0:	182b883a 	mov	r21,r3
 800ccc4:	283e7b0e 	bge	r5,zero,800c6b4 <__alt_data_end+0xfc00c6b4>
 800ccc8:	8c403fcc 	andi	r17,r17,255
 800cccc:	017fffc4 	movi	r5,-1
 800ccd0:	8c40201c 	xori	r17,r17,128
 800ccd4:	d9402a15 	stw	r5,168(sp)
 800ccd8:	8c7fe004 	addi	r17,r17,-128
 800ccdc:	0037d706 	br	800ac3c <__alt_data_end+0xfc00ac3c>
 800cce0:	d8c02a17 	ldw	r3,168(sp)
 800cce4:	18c00084 	addi	r3,r3,2
 800cce8:	d8c02b15 	stw	r3,172(sp)
 800ccec:	1805883a 	mov	r2,r3
 800ccf0:	183d970e 	bge	r3,zero,800c350 <__alt_data_end+0xfc00c350>
 800ccf4:	003fd706 	br	800cc54 <__alt_data_end+0xfc00cc54>
 800ccf8:	0005883a 	mov	r2,zero
 800ccfc:	003f8f06 	br	800cb3c <__alt_data_end+0xfc00cb3c>
 800cd00:	9080004c 	andi	r2,r18,1
 800cd04:	103f821e 	bne	r2,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800cd08:	d8802117 	ldw	r2,132(sp)
 800cd0c:	1405c83a 	sub	r2,r2,r16
 800cd10:	d8803315 	stw	r2,204(sp)
 800cd14:	b47ef426 	beq	r22,r17,800c8e8 <__alt_data_end+0xfc00c8e8>
 800cd18:	dd802617 	ldw	r22,152(sp)
 800cd1c:	003f1206 	br	800c968 <__alt_data_end+0xfc00c968>
 800cd20:	d8c02b03 	ldbu	r3,172(sp)
 800cd24:	d8c02785 	stb	r3,158(sp)
 800cd28:	0038df06 	br	800b0a8 <__alt_data_end+0xfc00b0a8>
 800cd2c:	d8c02b03 	ldbu	r3,172(sp)
 800cd30:	d8c02785 	stb	r3,158(sp)
 800cd34:	0038aa06 	br	800afe0 <__alt_data_end+0xfc00afe0>
 800cd38:	d8c02b03 	ldbu	r3,172(sp)
 800cd3c:	d8c02785 	stb	r3,158(sp)
 800cd40:	003a4306 	br	800b650 <__alt_data_end+0xfc00b650>
 800cd44:	d8c02b03 	ldbu	r3,172(sp)
 800cd48:	d8c02785 	stb	r3,158(sp)
 800cd4c:	003af506 	br	800b924 <__alt_data_end+0xfc00b924>
 800cd50:	0005883a 	mov	r2,zero
 800cd54:	003d7b06 	br	800c344 <__alt_data_end+0xfc00c344>
 800cd58:	d8802344 	addi	r2,sp,141
 800cd5c:	003f1006 	br	800c9a0 <__alt_data_end+0xfc00c9a0>
 800cd60:	d8c02b03 	ldbu	r3,172(sp)
 800cd64:	d8c02785 	stb	r3,158(sp)
 800cd68:	0038fd06 	br	800b160 <__alt_data_end+0xfc00b160>
 800cd6c:	d8c02b03 	ldbu	r3,172(sp)
 800cd70:	d8c02785 	stb	r3,158(sp)
 800cd74:	003a9706 	br	800b7d4 <__alt_data_end+0xfc00b7d4>
 800cd78:	d8c02b03 	ldbu	r3,172(sp)
 800cd7c:	d8c02785 	stb	r3,158(sp)
 800cd80:	003a1806 	br	800b5e4 <__alt_data_end+0xfc00b5e4>
 800cd84:	d8c02b03 	ldbu	r3,172(sp)
 800cd88:	d8c02785 	stb	r3,158(sp)
 800cd8c:	003abe06 	br	800b888 <__alt_data_end+0xfc00b888>

0800cd90 <__vfprintf_internal>:
 800cd90:	00821974 	movhi	r2,2149
 800cd94:	10be7904 	addi	r2,r2,-1564
 800cd98:	300f883a 	mov	r7,r6
 800cd9c:	280d883a 	mov	r6,r5
 800cda0:	200b883a 	mov	r5,r4
 800cda4:	11000017 	ldw	r4,0(r2)
 800cda8:	800aab41 	jmpi	800aab4 <___vfprintf_internal_r>

0800cdac <__sbprintf>:
 800cdac:	2880030b 	ldhu	r2,12(r5)
 800cdb0:	2ac01917 	ldw	r11,100(r5)
 800cdb4:	2a80038b 	ldhu	r10,14(r5)
 800cdb8:	2a400717 	ldw	r9,28(r5)
 800cdbc:	2a000917 	ldw	r8,36(r5)
 800cdc0:	defee204 	addi	sp,sp,-1144
 800cdc4:	00c10004 	movi	r3,1024
 800cdc8:	dc011a15 	stw	r16,1128(sp)
 800cdcc:	10bfff4c 	andi	r2,r2,65533
 800cdd0:	2821883a 	mov	r16,r5
 800cdd4:	d8cb883a 	add	r5,sp,r3
 800cdd8:	dc811c15 	stw	r18,1136(sp)
 800cddc:	dc411b15 	stw	r17,1132(sp)
 800cde0:	dfc11d15 	stw	ra,1140(sp)
 800cde4:	2025883a 	mov	r18,r4
 800cde8:	d881030d 	sth	r2,1036(sp)
 800cdec:	dac11915 	stw	r11,1124(sp)
 800cdf0:	da81038d 	sth	r10,1038(sp)
 800cdf4:	da410715 	stw	r9,1052(sp)
 800cdf8:	da010915 	stw	r8,1060(sp)
 800cdfc:	dec10015 	stw	sp,1024(sp)
 800ce00:	dec10415 	stw	sp,1040(sp)
 800ce04:	d8c10215 	stw	r3,1032(sp)
 800ce08:	d8c10515 	stw	r3,1044(sp)
 800ce0c:	d8010615 	stw	zero,1048(sp)
 800ce10:	800aab40 	call	800aab4 <___vfprintf_internal_r>
 800ce14:	1023883a 	mov	r17,r2
 800ce18:	10000416 	blt	r2,zero,800ce2c <__sbprintf+0x80>
 800ce1c:	d9410004 	addi	r5,sp,1024
 800ce20:	9009883a 	mov	r4,r18
 800ce24:	800ea880 	call	800ea88 <_fflush_r>
 800ce28:	10000d1e 	bne	r2,zero,800ce60 <__sbprintf+0xb4>
 800ce2c:	d881030b 	ldhu	r2,1036(sp)
 800ce30:	1080100c 	andi	r2,r2,64
 800ce34:	10000326 	beq	r2,zero,800ce44 <__sbprintf+0x98>
 800ce38:	8080030b 	ldhu	r2,12(r16)
 800ce3c:	10801014 	ori	r2,r2,64
 800ce40:	8080030d 	sth	r2,12(r16)
 800ce44:	8805883a 	mov	r2,r17
 800ce48:	dfc11d17 	ldw	ra,1140(sp)
 800ce4c:	dc811c17 	ldw	r18,1136(sp)
 800ce50:	dc411b17 	ldw	r17,1132(sp)
 800ce54:	dc011a17 	ldw	r16,1128(sp)
 800ce58:	dec11e04 	addi	sp,sp,1144
 800ce5c:	f800283a 	ret
 800ce60:	047fffc4 	movi	r17,-1
 800ce64:	003ff106 	br	800ce2c <__alt_data_end+0xfc00ce2c>

0800ce68 <__swsetup_r>:
 800ce68:	00821974 	movhi	r2,2149
 800ce6c:	defffd04 	addi	sp,sp,-12
 800ce70:	10be7904 	addi	r2,r2,-1564
 800ce74:	dc400115 	stw	r17,4(sp)
 800ce78:	2023883a 	mov	r17,r4
 800ce7c:	11000017 	ldw	r4,0(r2)
 800ce80:	dc000015 	stw	r16,0(sp)
 800ce84:	dfc00215 	stw	ra,8(sp)
 800ce88:	2821883a 	mov	r16,r5
 800ce8c:	20000226 	beq	r4,zero,800ce98 <__swsetup_r+0x30>
 800ce90:	20800e17 	ldw	r2,56(r4)
 800ce94:	10003126 	beq	r2,zero,800cf5c <__swsetup_r+0xf4>
 800ce98:	8080030b 	ldhu	r2,12(r16)
 800ce9c:	10c0020c 	andi	r3,r2,8
 800cea0:	1009883a 	mov	r4,r2
 800cea4:	18000f26 	beq	r3,zero,800cee4 <__swsetup_r+0x7c>
 800cea8:	80c00417 	ldw	r3,16(r16)
 800ceac:	18001526 	beq	r3,zero,800cf04 <__swsetup_r+0x9c>
 800ceb0:	1100004c 	andi	r4,r2,1
 800ceb4:	20001c1e 	bne	r4,zero,800cf28 <__swsetup_r+0xc0>
 800ceb8:	1080008c 	andi	r2,r2,2
 800cebc:	1000291e 	bne	r2,zero,800cf64 <__swsetup_r+0xfc>
 800cec0:	80800517 	ldw	r2,20(r16)
 800cec4:	80800215 	stw	r2,8(r16)
 800cec8:	18001c26 	beq	r3,zero,800cf3c <__swsetup_r+0xd4>
 800cecc:	0005883a 	mov	r2,zero
 800ced0:	dfc00217 	ldw	ra,8(sp)
 800ced4:	dc400117 	ldw	r17,4(sp)
 800ced8:	dc000017 	ldw	r16,0(sp)
 800cedc:	dec00304 	addi	sp,sp,12
 800cee0:	f800283a 	ret
 800cee4:	2080040c 	andi	r2,r4,16
 800cee8:	10002e26 	beq	r2,zero,800cfa4 <__swsetup_r+0x13c>
 800ceec:	2080010c 	andi	r2,r4,4
 800cef0:	10001e1e 	bne	r2,zero,800cf6c <__swsetup_r+0x104>
 800cef4:	80c00417 	ldw	r3,16(r16)
 800cef8:	20800214 	ori	r2,r4,8
 800cefc:	8080030d 	sth	r2,12(r16)
 800cf00:	183feb1e 	bne	r3,zero,800ceb0 <__alt_data_end+0xfc00ceb0>
 800cf04:	1100a00c 	andi	r4,r2,640
 800cf08:	01408004 	movi	r5,512
 800cf0c:	217fe826 	beq	r4,r5,800ceb0 <__alt_data_end+0xfc00ceb0>
 800cf10:	800b883a 	mov	r5,r16
 800cf14:	8809883a 	mov	r4,r17
 800cf18:	800fa240 	call	800fa24 <__smakebuf_r>
 800cf1c:	8080030b 	ldhu	r2,12(r16)
 800cf20:	80c00417 	ldw	r3,16(r16)
 800cf24:	003fe206 	br	800ceb0 <__alt_data_end+0xfc00ceb0>
 800cf28:	80800517 	ldw	r2,20(r16)
 800cf2c:	80000215 	stw	zero,8(r16)
 800cf30:	0085c83a 	sub	r2,zero,r2
 800cf34:	80800615 	stw	r2,24(r16)
 800cf38:	183fe41e 	bne	r3,zero,800cecc <__alt_data_end+0xfc00cecc>
 800cf3c:	80c0030b 	ldhu	r3,12(r16)
 800cf40:	0005883a 	mov	r2,zero
 800cf44:	1900200c 	andi	r4,r3,128
 800cf48:	203fe126 	beq	r4,zero,800ced0 <__alt_data_end+0xfc00ced0>
 800cf4c:	18c01014 	ori	r3,r3,64
 800cf50:	80c0030d 	sth	r3,12(r16)
 800cf54:	00bfffc4 	movi	r2,-1
 800cf58:	003fdd06 	br	800ced0 <__alt_data_end+0xfc00ced0>
 800cf5c:	800ee740 	call	800ee74 <__sinit>
 800cf60:	003fcd06 	br	800ce98 <__alt_data_end+0xfc00ce98>
 800cf64:	0005883a 	mov	r2,zero
 800cf68:	003fd606 	br	800cec4 <__alt_data_end+0xfc00cec4>
 800cf6c:	81400c17 	ldw	r5,48(r16)
 800cf70:	28000626 	beq	r5,zero,800cf8c <__swsetup_r+0x124>
 800cf74:	80801004 	addi	r2,r16,64
 800cf78:	28800326 	beq	r5,r2,800cf88 <__swsetup_r+0x120>
 800cf7c:	8809883a 	mov	r4,r17
 800cf80:	800efe80 	call	800efe8 <_free_r>
 800cf84:	8100030b 	ldhu	r4,12(r16)
 800cf88:	80000c15 	stw	zero,48(r16)
 800cf8c:	80c00417 	ldw	r3,16(r16)
 800cf90:	00bff6c4 	movi	r2,-37
 800cf94:	1108703a 	and	r4,r2,r4
 800cf98:	80000115 	stw	zero,4(r16)
 800cf9c:	80c00015 	stw	r3,0(r16)
 800cfa0:	003fd506 	br	800cef8 <__alt_data_end+0xfc00cef8>
 800cfa4:	00800244 	movi	r2,9
 800cfa8:	88800015 	stw	r2,0(r17)
 800cfac:	20801014 	ori	r2,r4,64
 800cfb0:	8080030d 	sth	r2,12(r16)
 800cfb4:	00bfffc4 	movi	r2,-1
 800cfb8:	003fc506 	br	800ced0 <__alt_data_end+0xfc00ced0>

0800cfbc <quorem>:
 800cfbc:	defff204 	addi	sp,sp,-56
 800cfc0:	ddc00b15 	stw	r23,44(sp)
 800cfc4:	20800417 	ldw	r2,16(r4)
 800cfc8:	2dc00417 	ldw	r23,16(r5)
 800cfcc:	dfc00d15 	stw	ra,52(sp)
 800cfd0:	df000c15 	stw	fp,48(sp)
 800cfd4:	dd800a15 	stw	r22,40(sp)
 800cfd8:	dd400915 	stw	r21,36(sp)
 800cfdc:	dd000815 	stw	r20,32(sp)
 800cfe0:	dcc00715 	stw	r19,28(sp)
 800cfe4:	dc800615 	stw	r18,24(sp)
 800cfe8:	dc400515 	stw	r17,20(sp)
 800cfec:	dc000415 	stw	r16,16(sp)
 800cff0:	15c07a16 	blt	r2,r23,800d1dc <quorem+0x220>
 800cff4:	bdffffc4 	addi	r23,r23,-1
 800cff8:	bde9883a 	add	r20,r23,r23
 800cffc:	28c00504 	addi	r3,r5,20
 800d000:	a529883a 	add	r20,r20,r20
 800d004:	1d39883a 	add	fp,r3,r20
 800d008:	24c00504 	addi	r19,r4,20
 800d00c:	d9400215 	stw	r5,8(sp)
 800d010:	9d29883a 	add	r20,r19,r20
 800d014:	e1400017 	ldw	r5,0(fp)
 800d018:	d9000015 	stw	r4,0(sp)
 800d01c:	a1000017 	ldw	r4,0(r20)
 800d020:	29400044 	addi	r5,r5,1
 800d024:	d8c00115 	stw	r3,4(sp)
 800d028:	dd000315 	stw	r20,12(sp)
 800d02c:	80070a40 	call	80070a4 <__udivsi3>
 800d030:	1025883a 	mov	r18,r2
 800d034:	10003026 	beq	r2,zero,800d0f8 <quorem+0x13c>
 800d038:	dc400117 	ldw	r17,4(sp)
 800d03c:	9829883a 	mov	r20,r19
 800d040:	002d883a 	mov	r22,zero
 800d044:	0021883a 	mov	r16,zero
 800d048:	8d400017 	ldw	r21,0(r17)
 800d04c:	900b883a 	mov	r5,r18
 800d050:	8c400104 	addi	r17,r17,4
 800d054:	a93fffcc 	andi	r4,r21,65535
 800d058:	80071600 	call	8007160 <__mulsi3>
 800d05c:	a808d43a 	srli	r4,r21,16
 800d060:	900b883a 	mov	r5,r18
 800d064:	15ad883a 	add	r22,r2,r22
 800d068:	80071600 	call	8007160 <__mulsi3>
 800d06c:	a1000017 	ldw	r4,0(r20)
 800d070:	b00cd43a 	srli	r6,r22,16
 800d074:	b0ffffcc 	andi	r3,r22,65535
 800d078:	217fffcc 	andi	r5,r4,65535
 800d07c:	2c21883a 	add	r16,r5,r16
 800d080:	80c7c83a 	sub	r3,r16,r3
 800d084:	2008d43a 	srli	r4,r4,16
 800d088:	1185883a 	add	r2,r2,r6
 800d08c:	1821d43a 	srai	r16,r3,16
 800d090:	117fffcc 	andi	r5,r2,65535
 800d094:	2149c83a 	sub	r4,r4,r5
 800d098:	2421883a 	add	r16,r4,r16
 800d09c:	8008943a 	slli	r4,r16,16
 800d0a0:	18ffffcc 	andi	r3,r3,65535
 800d0a4:	102cd43a 	srli	r22,r2,16
 800d0a8:	20c8b03a 	or	r4,r4,r3
 800d0ac:	a1000015 	stw	r4,0(r20)
 800d0b0:	8021d43a 	srai	r16,r16,16
 800d0b4:	a5000104 	addi	r20,r20,4
 800d0b8:	e47fe32e 	bgeu	fp,r17,800d048 <__alt_data_end+0xfc00d048>
 800d0bc:	d8c00317 	ldw	r3,12(sp)
 800d0c0:	18800017 	ldw	r2,0(r3)
 800d0c4:	10000c1e 	bne	r2,zero,800d0f8 <quorem+0x13c>
 800d0c8:	18bfff04 	addi	r2,r3,-4
 800d0cc:	9880082e 	bgeu	r19,r2,800d0f0 <quorem+0x134>
 800d0d0:	18ffff17 	ldw	r3,-4(r3)
 800d0d4:	18000326 	beq	r3,zero,800d0e4 <quorem+0x128>
 800d0d8:	00000506 	br	800d0f0 <quorem+0x134>
 800d0dc:	10c00017 	ldw	r3,0(r2)
 800d0e0:	1800031e 	bne	r3,zero,800d0f0 <quorem+0x134>
 800d0e4:	10bfff04 	addi	r2,r2,-4
 800d0e8:	bdffffc4 	addi	r23,r23,-1
 800d0ec:	98bffb36 	bltu	r19,r2,800d0dc <__alt_data_end+0xfc00d0dc>
 800d0f0:	d8c00017 	ldw	r3,0(sp)
 800d0f4:	1dc00415 	stw	r23,16(r3)
 800d0f8:	d9400217 	ldw	r5,8(sp)
 800d0fc:	d9000017 	ldw	r4,0(sp)
 800d100:	8010fb00 	call	8010fb0 <__mcmp>
 800d104:	10002816 	blt	r2,zero,800d1a8 <quorem+0x1ec>
 800d108:	dc400117 	ldw	r17,4(sp)
 800d10c:	94800044 	addi	r18,r18,1
 800d110:	980d883a 	mov	r6,r19
 800d114:	0007883a 	mov	r3,zero
 800d118:	31000017 	ldw	r4,0(r6)
 800d11c:	89400017 	ldw	r5,0(r17)
 800d120:	31800104 	addi	r6,r6,4
 800d124:	20bfffcc 	andi	r2,r4,65535
 800d128:	10c7883a 	add	r3,r2,r3
 800d12c:	28bfffcc 	andi	r2,r5,65535
 800d130:	1885c83a 	sub	r2,r3,r2
 800d134:	280ad43a 	srli	r5,r5,16
 800d138:	2008d43a 	srli	r4,r4,16
 800d13c:	1007d43a 	srai	r3,r2,16
 800d140:	10bfffcc 	andi	r2,r2,65535
 800d144:	2149c83a 	sub	r4,r4,r5
 800d148:	20c9883a 	add	r4,r4,r3
 800d14c:	200a943a 	slli	r5,r4,16
 800d150:	8c400104 	addi	r17,r17,4
 800d154:	2007d43a 	srai	r3,r4,16
 800d158:	2884b03a 	or	r2,r5,r2
 800d15c:	30bfff15 	stw	r2,-4(r6)
 800d160:	e47fed2e 	bgeu	fp,r17,800d118 <__alt_data_end+0xfc00d118>
 800d164:	bdc5883a 	add	r2,r23,r23
 800d168:	1085883a 	add	r2,r2,r2
 800d16c:	9887883a 	add	r3,r19,r2
 800d170:	18800017 	ldw	r2,0(r3)
 800d174:	10000c1e 	bne	r2,zero,800d1a8 <quorem+0x1ec>
 800d178:	18bfff04 	addi	r2,r3,-4
 800d17c:	9880082e 	bgeu	r19,r2,800d1a0 <quorem+0x1e4>
 800d180:	18ffff17 	ldw	r3,-4(r3)
 800d184:	18000326 	beq	r3,zero,800d194 <quorem+0x1d8>
 800d188:	00000506 	br	800d1a0 <quorem+0x1e4>
 800d18c:	10c00017 	ldw	r3,0(r2)
 800d190:	1800031e 	bne	r3,zero,800d1a0 <quorem+0x1e4>
 800d194:	10bfff04 	addi	r2,r2,-4
 800d198:	bdffffc4 	addi	r23,r23,-1
 800d19c:	98bffb36 	bltu	r19,r2,800d18c <__alt_data_end+0xfc00d18c>
 800d1a0:	d8c00017 	ldw	r3,0(sp)
 800d1a4:	1dc00415 	stw	r23,16(r3)
 800d1a8:	9005883a 	mov	r2,r18
 800d1ac:	dfc00d17 	ldw	ra,52(sp)
 800d1b0:	df000c17 	ldw	fp,48(sp)
 800d1b4:	ddc00b17 	ldw	r23,44(sp)
 800d1b8:	dd800a17 	ldw	r22,40(sp)
 800d1bc:	dd400917 	ldw	r21,36(sp)
 800d1c0:	dd000817 	ldw	r20,32(sp)
 800d1c4:	dcc00717 	ldw	r19,28(sp)
 800d1c8:	dc800617 	ldw	r18,24(sp)
 800d1cc:	dc400517 	ldw	r17,20(sp)
 800d1d0:	dc000417 	ldw	r16,16(sp)
 800d1d4:	dec00e04 	addi	sp,sp,56
 800d1d8:	f800283a 	ret
 800d1dc:	0005883a 	mov	r2,zero
 800d1e0:	003ff206 	br	800d1ac <__alt_data_end+0xfc00d1ac>

0800d1e4 <_dtoa_r>:
 800d1e4:	20801017 	ldw	r2,64(r4)
 800d1e8:	deffde04 	addi	sp,sp,-136
 800d1ec:	df002015 	stw	fp,128(sp)
 800d1f0:	dcc01b15 	stw	r19,108(sp)
 800d1f4:	dc801a15 	stw	r18,104(sp)
 800d1f8:	dc401915 	stw	r17,100(sp)
 800d1fc:	dc001815 	stw	r16,96(sp)
 800d200:	dfc02115 	stw	ra,132(sp)
 800d204:	ddc01f15 	stw	r23,124(sp)
 800d208:	dd801e15 	stw	r22,120(sp)
 800d20c:	dd401d15 	stw	r21,116(sp)
 800d210:	dd001c15 	stw	r20,112(sp)
 800d214:	d9c00315 	stw	r7,12(sp)
 800d218:	2039883a 	mov	fp,r4
 800d21c:	3023883a 	mov	r17,r6
 800d220:	2825883a 	mov	r18,r5
 800d224:	dc002417 	ldw	r16,144(sp)
 800d228:	3027883a 	mov	r19,r6
 800d22c:	10000826 	beq	r2,zero,800d250 <_dtoa_r+0x6c>
 800d230:	21801117 	ldw	r6,68(r4)
 800d234:	00c00044 	movi	r3,1
 800d238:	100b883a 	mov	r5,r2
 800d23c:	1986983a 	sll	r3,r3,r6
 800d240:	11800115 	stw	r6,4(r2)
 800d244:	10c00215 	stw	r3,8(r2)
 800d248:	80106d40 	call	80106d4 <_Bfree>
 800d24c:	e0001015 	stw	zero,64(fp)
 800d250:	88002e16 	blt	r17,zero,800d30c <_dtoa_r+0x128>
 800d254:	80000015 	stw	zero,0(r16)
 800d258:	889ffc2c 	andhi	r2,r17,32752
 800d25c:	00dffc34 	movhi	r3,32752
 800d260:	10c01c26 	beq	r2,r3,800d2d4 <_dtoa_r+0xf0>
 800d264:	000d883a 	mov	r6,zero
 800d268:	000f883a 	mov	r7,zero
 800d26c:	9009883a 	mov	r4,r18
 800d270:	980b883a 	mov	r5,r19
 800d274:	801500c0 	call	801500c <__eqdf2>
 800d278:	10002b1e 	bne	r2,zero,800d328 <_dtoa_r+0x144>
 800d27c:	d9c02317 	ldw	r7,140(sp)
 800d280:	00800044 	movi	r2,1
 800d284:	38800015 	stw	r2,0(r7)
 800d288:	d8802517 	ldw	r2,148(sp)
 800d28c:	10019e26 	beq	r2,zero,800d908 <_dtoa_r+0x724>
 800d290:	d8c02517 	ldw	r3,148(sp)
 800d294:	00821974 	movhi	r2,2149
 800d298:	10b74b44 	addi	r2,r2,-8915
 800d29c:	18800015 	stw	r2,0(r3)
 800d2a0:	10bfffc4 	addi	r2,r2,-1
 800d2a4:	dfc02117 	ldw	ra,132(sp)
 800d2a8:	df002017 	ldw	fp,128(sp)
 800d2ac:	ddc01f17 	ldw	r23,124(sp)
 800d2b0:	dd801e17 	ldw	r22,120(sp)
 800d2b4:	dd401d17 	ldw	r21,116(sp)
 800d2b8:	dd001c17 	ldw	r20,112(sp)
 800d2bc:	dcc01b17 	ldw	r19,108(sp)
 800d2c0:	dc801a17 	ldw	r18,104(sp)
 800d2c4:	dc401917 	ldw	r17,100(sp)
 800d2c8:	dc001817 	ldw	r16,96(sp)
 800d2cc:	dec02204 	addi	sp,sp,136
 800d2d0:	f800283a 	ret
 800d2d4:	d8c02317 	ldw	r3,140(sp)
 800d2d8:	0089c3c4 	movi	r2,9999
 800d2dc:	18800015 	stw	r2,0(r3)
 800d2e0:	90017726 	beq	r18,zero,800d8c0 <_dtoa_r+0x6dc>
 800d2e4:	00821974 	movhi	r2,2149
 800d2e8:	10b75704 	addi	r2,r2,-8868
 800d2ec:	d9002517 	ldw	r4,148(sp)
 800d2f0:	203fec26 	beq	r4,zero,800d2a4 <__alt_data_end+0xfc00d2a4>
 800d2f4:	10c000c7 	ldb	r3,3(r2)
 800d2f8:	1801781e 	bne	r3,zero,800d8dc <_dtoa_r+0x6f8>
 800d2fc:	10c000c4 	addi	r3,r2,3
 800d300:	d9802517 	ldw	r6,148(sp)
 800d304:	30c00015 	stw	r3,0(r6)
 800d308:	003fe606 	br	800d2a4 <__alt_data_end+0xfc00d2a4>
 800d30c:	04e00034 	movhi	r19,32768
 800d310:	9cffffc4 	addi	r19,r19,-1
 800d314:	00800044 	movi	r2,1
 800d318:	8ce6703a 	and	r19,r17,r19
 800d31c:	80800015 	stw	r2,0(r16)
 800d320:	9823883a 	mov	r17,r19
 800d324:	003fcc06 	br	800d258 <__alt_data_end+0xfc00d258>
 800d328:	d8800204 	addi	r2,sp,8
 800d32c:	d8800015 	stw	r2,0(sp)
 800d330:	d9c00104 	addi	r7,sp,4
 800d334:	900b883a 	mov	r5,r18
 800d338:	980d883a 	mov	r6,r19
 800d33c:	e009883a 	mov	r4,fp
 800d340:	8820d53a 	srli	r16,r17,20
 800d344:	801137c0 	call	801137c <__d2b>
 800d348:	d8800915 	stw	r2,36(sp)
 800d34c:	8001651e 	bne	r16,zero,800d8e4 <_dtoa_r+0x700>
 800d350:	dd800217 	ldw	r22,8(sp)
 800d354:	dc000117 	ldw	r16,4(sp)
 800d358:	00800804 	movi	r2,32
 800d35c:	b421883a 	add	r16,r22,r16
 800d360:	80c10c84 	addi	r3,r16,1074
 800d364:	10c2d10e 	bge	r2,r3,800deac <_dtoa_r+0xcc8>
 800d368:	00801004 	movi	r2,64
 800d36c:	81010484 	addi	r4,r16,1042
 800d370:	10c7c83a 	sub	r3,r2,r3
 800d374:	9108d83a 	srl	r4,r18,r4
 800d378:	88e2983a 	sll	r17,r17,r3
 800d37c:	2448b03a 	or	r4,r4,r17
 800d380:	800a22c0 	call	800a22c <__floatunsidf>
 800d384:	017f8434 	movhi	r5,65040
 800d388:	01800044 	movi	r6,1
 800d38c:	1009883a 	mov	r4,r2
 800d390:	194b883a 	add	r5,r3,r5
 800d394:	843fffc4 	addi	r16,r16,-1
 800d398:	d9801115 	stw	r6,68(sp)
 800d39c:	000d883a 	mov	r6,zero
 800d3a0:	01cffe34 	movhi	r7,16376
 800d3a4:	80098b00 	call	80098b0 <__subdf3>
 800d3a8:	0198dbf4 	movhi	r6,25455
 800d3ac:	01cff4f4 	movhi	r7,16339
 800d3b0:	3190d844 	addi	r6,r6,17249
 800d3b4:	39e1e9c4 	addi	r7,r7,-30809
 800d3b8:	1009883a 	mov	r4,r2
 800d3bc:	180b883a 	mov	r5,r3
 800d3c0:	80090440 	call	8009044 <__muldf3>
 800d3c4:	01a2d874 	movhi	r6,35681
 800d3c8:	01cff1f4 	movhi	r7,16327
 800d3cc:	31b22cc4 	addi	r6,r6,-14157
 800d3d0:	39e28a04 	addi	r7,r7,-30168
 800d3d4:	180b883a 	mov	r5,r3
 800d3d8:	1009883a 	mov	r4,r2
 800d3dc:	80086bc0 	call	80086bc <__adddf3>
 800d3e0:	8009883a 	mov	r4,r16
 800d3e4:	1029883a 	mov	r20,r2
 800d3e8:	1823883a 	mov	r17,r3
 800d3ec:	80151880 	call	8015188 <__floatsidf>
 800d3f0:	019427f4 	movhi	r6,20639
 800d3f4:	01cff4f4 	movhi	r7,16339
 800d3f8:	319e7ec4 	addi	r6,r6,31227
 800d3fc:	39d104c4 	addi	r7,r7,17427
 800d400:	1009883a 	mov	r4,r2
 800d404:	180b883a 	mov	r5,r3
 800d408:	80090440 	call	8009044 <__muldf3>
 800d40c:	100d883a 	mov	r6,r2
 800d410:	180f883a 	mov	r7,r3
 800d414:	a009883a 	mov	r4,r20
 800d418:	880b883a 	mov	r5,r17
 800d41c:	80086bc0 	call	80086bc <__adddf3>
 800d420:	1009883a 	mov	r4,r2
 800d424:	180b883a 	mov	r5,r3
 800d428:	1029883a 	mov	r20,r2
 800d42c:	1823883a 	mov	r17,r3
 800d430:	800a1ac0 	call	800a1ac <__fixdfsi>
 800d434:	000d883a 	mov	r6,zero
 800d438:	000f883a 	mov	r7,zero
 800d43c:	a009883a 	mov	r4,r20
 800d440:	880b883a 	mov	r5,r17
 800d444:	d8800515 	stw	r2,20(sp)
 800d448:	80150940 	call	8015094 <__ledf2>
 800d44c:	10028716 	blt	r2,zero,800de6c <_dtoa_r+0xc88>
 800d450:	d8c00517 	ldw	r3,20(sp)
 800d454:	00800584 	movi	r2,22
 800d458:	10c27536 	bltu	r2,r3,800de30 <_dtoa_r+0xc4c>
 800d45c:	180490fa 	slli	r2,r3,3
 800d460:	00c21974 	movhi	r3,2149
 800d464:	18f77304 	addi	r3,r3,-8756
 800d468:	1885883a 	add	r2,r3,r2
 800d46c:	11000017 	ldw	r4,0(r2)
 800d470:	11400117 	ldw	r5,4(r2)
 800d474:	900d883a 	mov	r6,r18
 800d478:	980f883a 	mov	r7,r19
 800d47c:	8008f680 	call	8008f68 <__gedf2>
 800d480:	00828d0e 	bge	zero,r2,800deb8 <_dtoa_r+0xcd4>
 800d484:	d9000517 	ldw	r4,20(sp)
 800d488:	d8000e15 	stw	zero,56(sp)
 800d48c:	213fffc4 	addi	r4,r4,-1
 800d490:	d9000515 	stw	r4,20(sp)
 800d494:	b42dc83a 	sub	r22,r22,r16
 800d498:	b5bfffc4 	addi	r22,r22,-1
 800d49c:	b0026f16 	blt	r22,zero,800de5c <_dtoa_r+0xc78>
 800d4a0:	d8000815 	stw	zero,32(sp)
 800d4a4:	d9c00517 	ldw	r7,20(sp)
 800d4a8:	38026416 	blt	r7,zero,800de3c <_dtoa_r+0xc58>
 800d4ac:	b1ed883a 	add	r22,r22,r7
 800d4b0:	d9c00d15 	stw	r7,52(sp)
 800d4b4:	d8000a15 	stw	zero,40(sp)
 800d4b8:	d9800317 	ldw	r6,12(sp)
 800d4bc:	00800244 	movi	r2,9
 800d4c0:	11811436 	bltu	r2,r6,800d914 <_dtoa_r+0x730>
 800d4c4:	00800144 	movi	r2,5
 800d4c8:	1184e10e 	bge	r2,r6,800e850 <_dtoa_r+0x166c>
 800d4cc:	31bfff04 	addi	r6,r6,-4
 800d4d0:	d9800315 	stw	r6,12(sp)
 800d4d4:	0023883a 	mov	r17,zero
 800d4d8:	d9800317 	ldw	r6,12(sp)
 800d4dc:	008000c4 	movi	r2,3
 800d4e0:	30836726 	beq	r6,r2,800e280 <_dtoa_r+0x109c>
 800d4e4:	1183410e 	bge	r2,r6,800e1ec <_dtoa_r+0x1008>
 800d4e8:	d9c00317 	ldw	r7,12(sp)
 800d4ec:	00800104 	movi	r2,4
 800d4f0:	38827c26 	beq	r7,r2,800dee4 <_dtoa_r+0xd00>
 800d4f4:	00800144 	movi	r2,5
 800d4f8:	3884c41e 	bne	r7,r2,800e80c <_dtoa_r+0x1628>
 800d4fc:	00800044 	movi	r2,1
 800d500:	d8800b15 	stw	r2,44(sp)
 800d504:	d8c00517 	ldw	r3,20(sp)
 800d508:	d9002217 	ldw	r4,136(sp)
 800d50c:	1907883a 	add	r3,r3,r4
 800d510:	19800044 	addi	r6,r3,1
 800d514:	d8c00c15 	stw	r3,48(sp)
 800d518:	d9800615 	stw	r6,24(sp)
 800d51c:	0183a40e 	bge	zero,r6,800e3b0 <_dtoa_r+0x11cc>
 800d520:	d9800617 	ldw	r6,24(sp)
 800d524:	3021883a 	mov	r16,r6
 800d528:	e0001115 	stw	zero,68(fp)
 800d52c:	008005c4 	movi	r2,23
 800d530:	1184c92e 	bgeu	r2,r6,800e858 <_dtoa_r+0x1674>
 800d534:	00c00044 	movi	r3,1
 800d538:	00800104 	movi	r2,4
 800d53c:	1085883a 	add	r2,r2,r2
 800d540:	11000504 	addi	r4,r2,20
 800d544:	180b883a 	mov	r5,r3
 800d548:	18c00044 	addi	r3,r3,1
 800d54c:	313ffb2e 	bgeu	r6,r4,800d53c <__alt_data_end+0xfc00d53c>
 800d550:	e1401115 	stw	r5,68(fp)
 800d554:	e009883a 	mov	r4,fp
 800d558:	801062c0 	call	801062c <_Balloc>
 800d55c:	d8800715 	stw	r2,28(sp)
 800d560:	e0801015 	stw	r2,64(fp)
 800d564:	00800384 	movi	r2,14
 800d568:	1400f736 	bltu	r2,r16,800d948 <_dtoa_r+0x764>
 800d56c:	8800f626 	beq	r17,zero,800d948 <_dtoa_r+0x764>
 800d570:	d9c00517 	ldw	r7,20(sp)
 800d574:	01c39a0e 	bge	zero,r7,800e3e0 <_dtoa_r+0x11fc>
 800d578:	388003cc 	andi	r2,r7,15
 800d57c:	100490fa 	slli	r2,r2,3
 800d580:	382bd13a 	srai	r21,r7,4
 800d584:	00c21974 	movhi	r3,2149
 800d588:	18f77304 	addi	r3,r3,-8756
 800d58c:	1885883a 	add	r2,r3,r2
 800d590:	a8c0040c 	andi	r3,r21,16
 800d594:	12400017 	ldw	r9,0(r2)
 800d598:	12000117 	ldw	r8,4(r2)
 800d59c:	18037926 	beq	r3,zero,800e384 <_dtoa_r+0x11a0>
 800d5a0:	00821974 	movhi	r2,2149
 800d5a4:	10b76904 	addi	r2,r2,-8796
 800d5a8:	11800817 	ldw	r6,32(r2)
 800d5ac:	11c00917 	ldw	r7,36(r2)
 800d5b0:	9009883a 	mov	r4,r18
 800d5b4:	980b883a 	mov	r5,r19
 800d5b8:	da001715 	stw	r8,92(sp)
 800d5bc:	da401615 	stw	r9,88(sp)
 800d5c0:	801463c0 	call	801463c <__divdf3>
 800d5c4:	da001717 	ldw	r8,92(sp)
 800d5c8:	da401617 	ldw	r9,88(sp)
 800d5cc:	ad4003cc 	andi	r21,r21,15
 800d5d0:	040000c4 	movi	r16,3
 800d5d4:	1023883a 	mov	r17,r2
 800d5d8:	1829883a 	mov	r20,r3
 800d5dc:	a8001126 	beq	r21,zero,800d624 <_dtoa_r+0x440>
 800d5e0:	05c21974 	movhi	r23,2149
 800d5e4:	bdf76904 	addi	r23,r23,-8796
 800d5e8:	4805883a 	mov	r2,r9
 800d5ec:	4007883a 	mov	r3,r8
 800d5f0:	a980004c 	andi	r6,r21,1
 800d5f4:	1009883a 	mov	r4,r2
 800d5f8:	a82bd07a 	srai	r21,r21,1
 800d5fc:	180b883a 	mov	r5,r3
 800d600:	30000426 	beq	r6,zero,800d614 <_dtoa_r+0x430>
 800d604:	b9800017 	ldw	r6,0(r23)
 800d608:	b9c00117 	ldw	r7,4(r23)
 800d60c:	84000044 	addi	r16,r16,1
 800d610:	80090440 	call	8009044 <__muldf3>
 800d614:	bdc00204 	addi	r23,r23,8
 800d618:	a83ff51e 	bne	r21,zero,800d5f0 <__alt_data_end+0xfc00d5f0>
 800d61c:	1013883a 	mov	r9,r2
 800d620:	1811883a 	mov	r8,r3
 800d624:	480d883a 	mov	r6,r9
 800d628:	400f883a 	mov	r7,r8
 800d62c:	8809883a 	mov	r4,r17
 800d630:	a00b883a 	mov	r5,r20
 800d634:	801463c0 	call	801463c <__divdf3>
 800d638:	d8800f15 	stw	r2,60(sp)
 800d63c:	d8c01015 	stw	r3,64(sp)
 800d640:	d8c00e17 	ldw	r3,56(sp)
 800d644:	18000626 	beq	r3,zero,800d660 <_dtoa_r+0x47c>
 800d648:	d9000f17 	ldw	r4,60(sp)
 800d64c:	d9401017 	ldw	r5,64(sp)
 800d650:	000d883a 	mov	r6,zero
 800d654:	01cffc34 	movhi	r7,16368
 800d658:	80150940 	call	8015094 <__ledf2>
 800d65c:	10040b16 	blt	r2,zero,800e68c <_dtoa_r+0x14a8>
 800d660:	8009883a 	mov	r4,r16
 800d664:	80151880 	call	8015188 <__floatsidf>
 800d668:	d9800f17 	ldw	r6,60(sp)
 800d66c:	d9c01017 	ldw	r7,64(sp)
 800d670:	1009883a 	mov	r4,r2
 800d674:	180b883a 	mov	r5,r3
 800d678:	80090440 	call	8009044 <__muldf3>
 800d67c:	000d883a 	mov	r6,zero
 800d680:	01d00734 	movhi	r7,16412
 800d684:	1009883a 	mov	r4,r2
 800d688:	180b883a 	mov	r5,r3
 800d68c:	80086bc0 	call	80086bc <__adddf3>
 800d690:	1021883a 	mov	r16,r2
 800d694:	d8800617 	ldw	r2,24(sp)
 800d698:	047f3034 	movhi	r17,64704
 800d69c:	1c63883a 	add	r17,r3,r17
 800d6a0:	10031826 	beq	r2,zero,800e304 <_dtoa_r+0x1120>
 800d6a4:	d8c00517 	ldw	r3,20(sp)
 800d6a8:	db000617 	ldw	r12,24(sp)
 800d6ac:	d8c01315 	stw	r3,76(sp)
 800d6b0:	d9000b17 	ldw	r4,44(sp)
 800d6b4:	20038f26 	beq	r4,zero,800e4f4 <_dtoa_r+0x1310>
 800d6b8:	60bfffc4 	addi	r2,r12,-1
 800d6bc:	100490fa 	slli	r2,r2,3
 800d6c0:	00c21974 	movhi	r3,2149
 800d6c4:	18f77304 	addi	r3,r3,-8756
 800d6c8:	1885883a 	add	r2,r3,r2
 800d6cc:	11800017 	ldw	r6,0(r2)
 800d6d0:	11c00117 	ldw	r7,4(r2)
 800d6d4:	d8800717 	ldw	r2,28(sp)
 800d6d8:	0009883a 	mov	r4,zero
 800d6dc:	014ff834 	movhi	r5,16352
 800d6e0:	db001615 	stw	r12,88(sp)
 800d6e4:	15c00044 	addi	r23,r2,1
 800d6e8:	801463c0 	call	801463c <__divdf3>
 800d6ec:	800d883a 	mov	r6,r16
 800d6f0:	880f883a 	mov	r7,r17
 800d6f4:	1009883a 	mov	r4,r2
 800d6f8:	180b883a 	mov	r5,r3
 800d6fc:	80098b00 	call	80098b0 <__subdf3>
 800d700:	d9401017 	ldw	r5,64(sp)
 800d704:	d9000f17 	ldw	r4,60(sp)
 800d708:	102b883a 	mov	r21,r2
 800d70c:	d8c01215 	stw	r3,72(sp)
 800d710:	800a1ac0 	call	800a1ac <__fixdfsi>
 800d714:	1009883a 	mov	r4,r2
 800d718:	1029883a 	mov	r20,r2
 800d71c:	80151880 	call	8015188 <__floatsidf>
 800d720:	d9000f17 	ldw	r4,60(sp)
 800d724:	d9401017 	ldw	r5,64(sp)
 800d728:	100d883a 	mov	r6,r2
 800d72c:	180f883a 	mov	r7,r3
 800d730:	80098b00 	call	80098b0 <__subdf3>
 800d734:	1823883a 	mov	r17,r3
 800d738:	d8c00717 	ldw	r3,28(sp)
 800d73c:	d9401217 	ldw	r5,72(sp)
 800d740:	a2000c04 	addi	r8,r20,48
 800d744:	1021883a 	mov	r16,r2
 800d748:	1a000005 	stb	r8,0(r3)
 800d74c:	800d883a 	mov	r6,r16
 800d750:	880f883a 	mov	r7,r17
 800d754:	a809883a 	mov	r4,r21
 800d758:	4029883a 	mov	r20,r8
 800d75c:	8008f680 	call	8008f68 <__gedf2>
 800d760:	00841d16 	blt	zero,r2,800e7d8 <_dtoa_r+0x15f4>
 800d764:	800d883a 	mov	r6,r16
 800d768:	880f883a 	mov	r7,r17
 800d76c:	0009883a 	mov	r4,zero
 800d770:	014ffc34 	movhi	r5,16368
 800d774:	80098b00 	call	80098b0 <__subdf3>
 800d778:	d9401217 	ldw	r5,72(sp)
 800d77c:	100d883a 	mov	r6,r2
 800d780:	180f883a 	mov	r7,r3
 800d784:	a809883a 	mov	r4,r21
 800d788:	8008f680 	call	8008f68 <__gedf2>
 800d78c:	db001617 	ldw	r12,88(sp)
 800d790:	00840e16 	blt	zero,r2,800e7cc <_dtoa_r+0x15e8>
 800d794:	00800044 	movi	r2,1
 800d798:	13006b0e 	bge	r2,r12,800d948 <_dtoa_r+0x764>
 800d79c:	d9000717 	ldw	r4,28(sp)
 800d7a0:	dd800f15 	stw	r22,60(sp)
 800d7a4:	dcc01015 	stw	r19,64(sp)
 800d7a8:	2319883a 	add	r12,r4,r12
 800d7ac:	dcc01217 	ldw	r19,72(sp)
 800d7b0:	602d883a 	mov	r22,r12
 800d7b4:	dc801215 	stw	r18,72(sp)
 800d7b8:	b825883a 	mov	r18,r23
 800d7bc:	00000906 	br	800d7e4 <_dtoa_r+0x600>
 800d7c0:	80098b00 	call	80098b0 <__subdf3>
 800d7c4:	a80d883a 	mov	r6,r21
 800d7c8:	980f883a 	mov	r7,r19
 800d7cc:	1009883a 	mov	r4,r2
 800d7d0:	180b883a 	mov	r5,r3
 800d7d4:	80150940 	call	8015094 <__ledf2>
 800d7d8:	1003e816 	blt	r2,zero,800e77c <_dtoa_r+0x1598>
 800d7dc:	b825883a 	mov	r18,r23
 800d7e0:	bd83e926 	beq	r23,r22,800e788 <_dtoa_r+0x15a4>
 800d7e4:	a809883a 	mov	r4,r21
 800d7e8:	980b883a 	mov	r5,r19
 800d7ec:	000d883a 	mov	r6,zero
 800d7f0:	01d00934 	movhi	r7,16420
 800d7f4:	80090440 	call	8009044 <__muldf3>
 800d7f8:	000d883a 	mov	r6,zero
 800d7fc:	01d00934 	movhi	r7,16420
 800d800:	8009883a 	mov	r4,r16
 800d804:	880b883a 	mov	r5,r17
 800d808:	102b883a 	mov	r21,r2
 800d80c:	1827883a 	mov	r19,r3
 800d810:	80090440 	call	8009044 <__muldf3>
 800d814:	180b883a 	mov	r5,r3
 800d818:	1009883a 	mov	r4,r2
 800d81c:	1821883a 	mov	r16,r3
 800d820:	1023883a 	mov	r17,r2
 800d824:	800a1ac0 	call	800a1ac <__fixdfsi>
 800d828:	1009883a 	mov	r4,r2
 800d82c:	1029883a 	mov	r20,r2
 800d830:	80151880 	call	8015188 <__floatsidf>
 800d834:	8809883a 	mov	r4,r17
 800d838:	800b883a 	mov	r5,r16
 800d83c:	100d883a 	mov	r6,r2
 800d840:	180f883a 	mov	r7,r3
 800d844:	80098b00 	call	80098b0 <__subdf3>
 800d848:	a5000c04 	addi	r20,r20,48
 800d84c:	a80d883a 	mov	r6,r21
 800d850:	980f883a 	mov	r7,r19
 800d854:	1009883a 	mov	r4,r2
 800d858:	180b883a 	mov	r5,r3
 800d85c:	95000005 	stb	r20,0(r18)
 800d860:	1021883a 	mov	r16,r2
 800d864:	1823883a 	mov	r17,r3
 800d868:	80150940 	call	8015094 <__ledf2>
 800d86c:	bdc00044 	addi	r23,r23,1
 800d870:	800d883a 	mov	r6,r16
 800d874:	880f883a 	mov	r7,r17
 800d878:	0009883a 	mov	r4,zero
 800d87c:	014ffc34 	movhi	r5,16368
 800d880:	103fcf0e 	bge	r2,zero,800d7c0 <__alt_data_end+0xfc00d7c0>
 800d884:	d8c01317 	ldw	r3,76(sp)
 800d888:	d8c00515 	stw	r3,20(sp)
 800d88c:	d9400917 	ldw	r5,36(sp)
 800d890:	e009883a 	mov	r4,fp
 800d894:	80106d40 	call	80106d4 <_Bfree>
 800d898:	d9000517 	ldw	r4,20(sp)
 800d89c:	d9802317 	ldw	r6,140(sp)
 800d8a0:	d9c02517 	ldw	r7,148(sp)
 800d8a4:	b8000005 	stb	zero,0(r23)
 800d8a8:	20800044 	addi	r2,r4,1
 800d8ac:	30800015 	stw	r2,0(r6)
 800d8b0:	3802aa26 	beq	r7,zero,800e35c <_dtoa_r+0x1178>
 800d8b4:	3dc00015 	stw	r23,0(r7)
 800d8b8:	d8800717 	ldw	r2,28(sp)
 800d8bc:	003e7906 	br	800d2a4 <__alt_data_end+0xfc00d2a4>
 800d8c0:	00800434 	movhi	r2,16
 800d8c4:	10bfffc4 	addi	r2,r2,-1
 800d8c8:	88a2703a 	and	r17,r17,r2
 800d8cc:	883e851e 	bne	r17,zero,800d2e4 <__alt_data_end+0xfc00d2e4>
 800d8d0:	00821974 	movhi	r2,2149
 800d8d4:	10b75404 	addi	r2,r2,-8880
 800d8d8:	003e8406 	br	800d2ec <__alt_data_end+0xfc00d2ec>
 800d8dc:	10c00204 	addi	r3,r2,8
 800d8e0:	003e8706 	br	800d300 <__alt_data_end+0xfc00d300>
 800d8e4:	01400434 	movhi	r5,16
 800d8e8:	297fffc4 	addi	r5,r5,-1
 800d8ec:	994a703a 	and	r5,r19,r5
 800d8f0:	9009883a 	mov	r4,r18
 800d8f4:	843f0044 	addi	r16,r16,-1023
 800d8f8:	294ffc34 	orhi	r5,r5,16368
 800d8fc:	dd800217 	ldw	r22,8(sp)
 800d900:	d8001115 	stw	zero,68(sp)
 800d904:	003ea506 	br	800d39c <__alt_data_end+0xfc00d39c>
 800d908:	00821974 	movhi	r2,2149
 800d90c:	10b74b04 	addi	r2,r2,-8916
 800d910:	003e6406 	br	800d2a4 <__alt_data_end+0xfc00d2a4>
 800d914:	e0001115 	stw	zero,68(fp)
 800d918:	000b883a 	mov	r5,zero
 800d91c:	e009883a 	mov	r4,fp
 800d920:	801062c0 	call	801062c <_Balloc>
 800d924:	01bfffc4 	movi	r6,-1
 800d928:	01c00044 	movi	r7,1
 800d92c:	d8800715 	stw	r2,28(sp)
 800d930:	d9800c15 	stw	r6,48(sp)
 800d934:	e0801015 	stw	r2,64(fp)
 800d938:	d8000315 	stw	zero,12(sp)
 800d93c:	d9c00b15 	stw	r7,44(sp)
 800d940:	d9800615 	stw	r6,24(sp)
 800d944:	d8002215 	stw	zero,136(sp)
 800d948:	d8800117 	ldw	r2,4(sp)
 800d94c:	10008916 	blt	r2,zero,800db74 <_dtoa_r+0x990>
 800d950:	d9000517 	ldw	r4,20(sp)
 800d954:	00c00384 	movi	r3,14
 800d958:	19008616 	blt	r3,r4,800db74 <_dtoa_r+0x990>
 800d95c:	200490fa 	slli	r2,r4,3
 800d960:	00c21974 	movhi	r3,2149
 800d964:	d9802217 	ldw	r6,136(sp)
 800d968:	18f77304 	addi	r3,r3,-8756
 800d96c:	1885883a 	add	r2,r3,r2
 800d970:	14000017 	ldw	r16,0(r2)
 800d974:	14400117 	ldw	r17,4(r2)
 800d978:	30016316 	blt	r6,zero,800df08 <_dtoa_r+0xd24>
 800d97c:	800d883a 	mov	r6,r16
 800d980:	880f883a 	mov	r7,r17
 800d984:	9009883a 	mov	r4,r18
 800d988:	980b883a 	mov	r5,r19
 800d98c:	801463c0 	call	801463c <__divdf3>
 800d990:	180b883a 	mov	r5,r3
 800d994:	1009883a 	mov	r4,r2
 800d998:	800a1ac0 	call	800a1ac <__fixdfsi>
 800d99c:	1009883a 	mov	r4,r2
 800d9a0:	102b883a 	mov	r21,r2
 800d9a4:	80151880 	call	8015188 <__floatsidf>
 800d9a8:	800d883a 	mov	r6,r16
 800d9ac:	880f883a 	mov	r7,r17
 800d9b0:	1009883a 	mov	r4,r2
 800d9b4:	180b883a 	mov	r5,r3
 800d9b8:	80090440 	call	8009044 <__muldf3>
 800d9bc:	100d883a 	mov	r6,r2
 800d9c0:	180f883a 	mov	r7,r3
 800d9c4:	9009883a 	mov	r4,r18
 800d9c8:	980b883a 	mov	r5,r19
 800d9cc:	80098b00 	call	80098b0 <__subdf3>
 800d9d0:	d9c00717 	ldw	r7,28(sp)
 800d9d4:	1009883a 	mov	r4,r2
 800d9d8:	a8800c04 	addi	r2,r21,48
 800d9dc:	38800005 	stb	r2,0(r7)
 800d9e0:	3dc00044 	addi	r23,r7,1
 800d9e4:	d9c00617 	ldw	r7,24(sp)
 800d9e8:	01800044 	movi	r6,1
 800d9ec:	180b883a 	mov	r5,r3
 800d9f0:	2005883a 	mov	r2,r4
 800d9f4:	39803826 	beq	r7,r6,800dad8 <_dtoa_r+0x8f4>
 800d9f8:	000d883a 	mov	r6,zero
 800d9fc:	01d00934 	movhi	r7,16420
 800da00:	80090440 	call	8009044 <__muldf3>
 800da04:	000d883a 	mov	r6,zero
 800da08:	000f883a 	mov	r7,zero
 800da0c:	1009883a 	mov	r4,r2
 800da10:	180b883a 	mov	r5,r3
 800da14:	1025883a 	mov	r18,r2
 800da18:	1827883a 	mov	r19,r3
 800da1c:	801500c0 	call	801500c <__eqdf2>
 800da20:	103f9a26 	beq	r2,zero,800d88c <__alt_data_end+0xfc00d88c>
 800da24:	d9c00617 	ldw	r7,24(sp)
 800da28:	d8c00717 	ldw	r3,28(sp)
 800da2c:	b829883a 	mov	r20,r23
 800da30:	38bfffc4 	addi	r2,r7,-1
 800da34:	18ad883a 	add	r22,r3,r2
 800da38:	00000a06 	br	800da64 <_dtoa_r+0x880>
 800da3c:	80090440 	call	8009044 <__muldf3>
 800da40:	000d883a 	mov	r6,zero
 800da44:	000f883a 	mov	r7,zero
 800da48:	1009883a 	mov	r4,r2
 800da4c:	180b883a 	mov	r5,r3
 800da50:	1025883a 	mov	r18,r2
 800da54:	1827883a 	mov	r19,r3
 800da58:	b829883a 	mov	r20,r23
 800da5c:	801500c0 	call	801500c <__eqdf2>
 800da60:	103f8a26 	beq	r2,zero,800d88c <__alt_data_end+0xfc00d88c>
 800da64:	800d883a 	mov	r6,r16
 800da68:	880f883a 	mov	r7,r17
 800da6c:	9009883a 	mov	r4,r18
 800da70:	980b883a 	mov	r5,r19
 800da74:	801463c0 	call	801463c <__divdf3>
 800da78:	180b883a 	mov	r5,r3
 800da7c:	1009883a 	mov	r4,r2
 800da80:	800a1ac0 	call	800a1ac <__fixdfsi>
 800da84:	1009883a 	mov	r4,r2
 800da88:	102b883a 	mov	r21,r2
 800da8c:	80151880 	call	8015188 <__floatsidf>
 800da90:	800d883a 	mov	r6,r16
 800da94:	880f883a 	mov	r7,r17
 800da98:	1009883a 	mov	r4,r2
 800da9c:	180b883a 	mov	r5,r3
 800daa0:	80090440 	call	8009044 <__muldf3>
 800daa4:	100d883a 	mov	r6,r2
 800daa8:	180f883a 	mov	r7,r3
 800daac:	9009883a 	mov	r4,r18
 800dab0:	980b883a 	mov	r5,r19
 800dab4:	80098b00 	call	80098b0 <__subdf3>
 800dab8:	aa000c04 	addi	r8,r21,48
 800dabc:	a2000005 	stb	r8,0(r20)
 800dac0:	000d883a 	mov	r6,zero
 800dac4:	01d00934 	movhi	r7,16420
 800dac8:	1009883a 	mov	r4,r2
 800dacc:	180b883a 	mov	r5,r3
 800dad0:	a5c00044 	addi	r23,r20,1
 800dad4:	b53fd91e 	bne	r22,r20,800da3c <__alt_data_end+0xfc00da3c>
 800dad8:	100d883a 	mov	r6,r2
 800dadc:	180f883a 	mov	r7,r3
 800dae0:	1009883a 	mov	r4,r2
 800dae4:	180b883a 	mov	r5,r3
 800dae8:	80086bc0 	call	80086bc <__adddf3>
 800daec:	100d883a 	mov	r6,r2
 800daf0:	180f883a 	mov	r7,r3
 800daf4:	8009883a 	mov	r4,r16
 800daf8:	880b883a 	mov	r5,r17
 800dafc:	1027883a 	mov	r19,r2
 800db00:	1825883a 	mov	r18,r3
 800db04:	80150940 	call	8015094 <__ledf2>
 800db08:	10000816 	blt	r2,zero,800db2c <_dtoa_r+0x948>
 800db0c:	980d883a 	mov	r6,r19
 800db10:	900f883a 	mov	r7,r18
 800db14:	8009883a 	mov	r4,r16
 800db18:	880b883a 	mov	r5,r17
 800db1c:	801500c0 	call	801500c <__eqdf2>
 800db20:	103f5a1e 	bne	r2,zero,800d88c <__alt_data_end+0xfc00d88c>
 800db24:	ad40004c 	andi	r21,r21,1
 800db28:	a83f5826 	beq	r21,zero,800d88c <__alt_data_end+0xfc00d88c>
 800db2c:	bd3fffc3 	ldbu	r20,-1(r23)
 800db30:	b8bfffc4 	addi	r2,r23,-1
 800db34:	1007883a 	mov	r3,r2
 800db38:	01400e44 	movi	r5,57
 800db3c:	d9800717 	ldw	r6,28(sp)
 800db40:	00000506 	br	800db58 <_dtoa_r+0x974>
 800db44:	18ffffc4 	addi	r3,r3,-1
 800db48:	11824726 	beq	r2,r6,800e468 <_dtoa_r+0x1284>
 800db4c:	1d000003 	ldbu	r20,0(r3)
 800db50:	102f883a 	mov	r23,r2
 800db54:	10bfffc4 	addi	r2,r2,-1
 800db58:	a1003fcc 	andi	r4,r20,255
 800db5c:	2100201c 	xori	r4,r4,128
 800db60:	213fe004 	addi	r4,r4,-128
 800db64:	217ff726 	beq	r4,r5,800db44 <__alt_data_end+0xfc00db44>
 800db68:	a2000044 	addi	r8,r20,1
 800db6c:	12000005 	stb	r8,0(r2)
 800db70:	003f4606 	br	800d88c <__alt_data_end+0xfc00d88c>
 800db74:	d9000b17 	ldw	r4,44(sp)
 800db78:	2000c826 	beq	r4,zero,800de9c <_dtoa_r+0xcb8>
 800db7c:	d9800317 	ldw	r6,12(sp)
 800db80:	00c00044 	movi	r3,1
 800db84:	1980f90e 	bge	r3,r6,800df6c <_dtoa_r+0xd88>
 800db88:	d8800617 	ldw	r2,24(sp)
 800db8c:	d8c00a17 	ldw	r3,40(sp)
 800db90:	157fffc4 	addi	r21,r2,-1
 800db94:	1d41f316 	blt	r3,r21,800e364 <_dtoa_r+0x1180>
 800db98:	1d6bc83a 	sub	r21,r3,r21
 800db9c:	d9c00617 	ldw	r7,24(sp)
 800dba0:	3802aa16 	blt	r7,zero,800e64c <_dtoa_r+0x1468>
 800dba4:	dd000817 	ldw	r20,32(sp)
 800dba8:	d8800617 	ldw	r2,24(sp)
 800dbac:	d8c00817 	ldw	r3,32(sp)
 800dbb0:	01400044 	movi	r5,1
 800dbb4:	e009883a 	mov	r4,fp
 800dbb8:	1887883a 	add	r3,r3,r2
 800dbbc:	d8c00815 	stw	r3,32(sp)
 800dbc0:	b0ad883a 	add	r22,r22,r2
 800dbc4:	8010a600 	call	8010a60 <__i2b>
 800dbc8:	1023883a 	mov	r17,r2
 800dbcc:	a0000826 	beq	r20,zero,800dbf0 <_dtoa_r+0xa0c>
 800dbd0:	0580070e 	bge	zero,r22,800dbf0 <_dtoa_r+0xa0c>
 800dbd4:	a005883a 	mov	r2,r20
 800dbd8:	b500b916 	blt	r22,r20,800dec0 <_dtoa_r+0xcdc>
 800dbdc:	d9000817 	ldw	r4,32(sp)
 800dbe0:	a0a9c83a 	sub	r20,r20,r2
 800dbe4:	b0adc83a 	sub	r22,r22,r2
 800dbe8:	2089c83a 	sub	r4,r4,r2
 800dbec:	d9000815 	stw	r4,32(sp)
 800dbf0:	d9800a17 	ldw	r6,40(sp)
 800dbf4:	0181810e 	bge	zero,r6,800e1fc <_dtoa_r+0x1018>
 800dbf8:	d9c00b17 	ldw	r7,44(sp)
 800dbfc:	3800b326 	beq	r7,zero,800decc <_dtoa_r+0xce8>
 800dc00:	a800b226 	beq	r21,zero,800decc <_dtoa_r+0xce8>
 800dc04:	880b883a 	mov	r5,r17
 800dc08:	a80d883a 	mov	r6,r21
 800dc0c:	e009883a 	mov	r4,fp
 800dc10:	8010d280 	call	8010d28 <__pow5mult>
 800dc14:	d9800917 	ldw	r6,36(sp)
 800dc18:	100b883a 	mov	r5,r2
 800dc1c:	e009883a 	mov	r4,fp
 800dc20:	1023883a 	mov	r17,r2
 800dc24:	8010a9c0 	call	8010a9c <__multiply>
 800dc28:	1021883a 	mov	r16,r2
 800dc2c:	d8800a17 	ldw	r2,40(sp)
 800dc30:	d9400917 	ldw	r5,36(sp)
 800dc34:	e009883a 	mov	r4,fp
 800dc38:	1545c83a 	sub	r2,r2,r21
 800dc3c:	d8800a15 	stw	r2,40(sp)
 800dc40:	80106d40 	call	80106d4 <_Bfree>
 800dc44:	d8c00a17 	ldw	r3,40(sp)
 800dc48:	18009f1e 	bne	r3,zero,800dec8 <_dtoa_r+0xce4>
 800dc4c:	05c00044 	movi	r23,1
 800dc50:	e009883a 	mov	r4,fp
 800dc54:	b80b883a 	mov	r5,r23
 800dc58:	8010a600 	call	8010a60 <__i2b>
 800dc5c:	d9000d17 	ldw	r4,52(sp)
 800dc60:	102b883a 	mov	r21,r2
 800dc64:	2000ce26 	beq	r4,zero,800dfa0 <_dtoa_r+0xdbc>
 800dc68:	200d883a 	mov	r6,r4
 800dc6c:	100b883a 	mov	r5,r2
 800dc70:	e009883a 	mov	r4,fp
 800dc74:	8010d280 	call	8010d28 <__pow5mult>
 800dc78:	d9800317 	ldw	r6,12(sp)
 800dc7c:	102b883a 	mov	r21,r2
 800dc80:	b981810e 	bge	r23,r6,800e288 <_dtoa_r+0x10a4>
 800dc84:	0027883a 	mov	r19,zero
 800dc88:	a8800417 	ldw	r2,16(r21)
 800dc8c:	05c00804 	movi	r23,32
 800dc90:	10800104 	addi	r2,r2,4
 800dc94:	1085883a 	add	r2,r2,r2
 800dc98:	1085883a 	add	r2,r2,r2
 800dc9c:	a885883a 	add	r2,r21,r2
 800dca0:	11000017 	ldw	r4,0(r2)
 800dca4:	80109480 	call	8010948 <__hi0bits>
 800dca8:	b885c83a 	sub	r2,r23,r2
 800dcac:	1585883a 	add	r2,r2,r22
 800dcb0:	108007cc 	andi	r2,r2,31
 800dcb4:	1000b326 	beq	r2,zero,800df84 <_dtoa_r+0xda0>
 800dcb8:	00c00804 	movi	r3,32
 800dcbc:	1887c83a 	sub	r3,r3,r2
 800dcc0:	01000104 	movi	r4,4
 800dcc4:	20c2cd0e 	bge	r4,r3,800e7fc <_dtoa_r+0x1618>
 800dcc8:	00c00704 	movi	r3,28
 800dccc:	1885c83a 	sub	r2,r3,r2
 800dcd0:	d8c00817 	ldw	r3,32(sp)
 800dcd4:	a0a9883a 	add	r20,r20,r2
 800dcd8:	b0ad883a 	add	r22,r22,r2
 800dcdc:	1887883a 	add	r3,r3,r2
 800dce0:	d8c00815 	stw	r3,32(sp)
 800dce4:	d9800817 	ldw	r6,32(sp)
 800dce8:	0180040e 	bge	zero,r6,800dcfc <_dtoa_r+0xb18>
 800dcec:	800b883a 	mov	r5,r16
 800dcf0:	e009883a 	mov	r4,fp
 800dcf4:	8010e680 	call	8010e68 <__lshift>
 800dcf8:	1021883a 	mov	r16,r2
 800dcfc:	0580050e 	bge	zero,r22,800dd14 <_dtoa_r+0xb30>
 800dd00:	a80b883a 	mov	r5,r21
 800dd04:	b00d883a 	mov	r6,r22
 800dd08:	e009883a 	mov	r4,fp
 800dd0c:	8010e680 	call	8010e68 <__lshift>
 800dd10:	102b883a 	mov	r21,r2
 800dd14:	d9c00e17 	ldw	r7,56(sp)
 800dd18:	3801211e 	bne	r7,zero,800e1a0 <_dtoa_r+0xfbc>
 800dd1c:	d9800617 	ldw	r6,24(sp)
 800dd20:	0181380e 	bge	zero,r6,800e204 <_dtoa_r+0x1020>
 800dd24:	d8c00b17 	ldw	r3,44(sp)
 800dd28:	1800ab1e 	bne	r3,zero,800dfd8 <_dtoa_r+0xdf4>
 800dd2c:	dc800717 	ldw	r18,28(sp)
 800dd30:	dcc00617 	ldw	r19,24(sp)
 800dd34:	9029883a 	mov	r20,r18
 800dd38:	00000206 	br	800dd44 <_dtoa_r+0xb60>
 800dd3c:	80106fc0 	call	80106fc <__multadd>
 800dd40:	1021883a 	mov	r16,r2
 800dd44:	a80b883a 	mov	r5,r21
 800dd48:	8009883a 	mov	r4,r16
 800dd4c:	800cfbc0 	call	800cfbc <quorem>
 800dd50:	10800c04 	addi	r2,r2,48
 800dd54:	90800005 	stb	r2,0(r18)
 800dd58:	94800044 	addi	r18,r18,1
 800dd5c:	9507c83a 	sub	r3,r18,r20
 800dd60:	000f883a 	mov	r7,zero
 800dd64:	01800284 	movi	r6,10
 800dd68:	800b883a 	mov	r5,r16
 800dd6c:	e009883a 	mov	r4,fp
 800dd70:	1cfff216 	blt	r3,r19,800dd3c <__alt_data_end+0xfc00dd3c>
 800dd74:	1011883a 	mov	r8,r2
 800dd78:	d8800617 	ldw	r2,24(sp)
 800dd7c:	0082370e 	bge	zero,r2,800e65c <_dtoa_r+0x1478>
 800dd80:	d9000717 	ldw	r4,28(sp)
 800dd84:	0025883a 	mov	r18,zero
 800dd88:	20af883a 	add	r23,r4,r2
 800dd8c:	01800044 	movi	r6,1
 800dd90:	800b883a 	mov	r5,r16
 800dd94:	e009883a 	mov	r4,fp
 800dd98:	da001715 	stw	r8,92(sp)
 800dd9c:	8010e680 	call	8010e68 <__lshift>
 800dda0:	a80b883a 	mov	r5,r21
 800dda4:	1009883a 	mov	r4,r2
 800dda8:	d8800915 	stw	r2,36(sp)
 800ddac:	8010fb00 	call	8010fb0 <__mcmp>
 800ddb0:	da001717 	ldw	r8,92(sp)
 800ddb4:	0081800e 	bge	zero,r2,800e3b8 <_dtoa_r+0x11d4>
 800ddb8:	b93fffc3 	ldbu	r4,-1(r23)
 800ddbc:	b8bfffc4 	addi	r2,r23,-1
 800ddc0:	1007883a 	mov	r3,r2
 800ddc4:	01800e44 	movi	r6,57
 800ddc8:	d9c00717 	ldw	r7,28(sp)
 800ddcc:	00000506 	br	800dde4 <_dtoa_r+0xc00>
 800ddd0:	18ffffc4 	addi	r3,r3,-1
 800ddd4:	11c12326 	beq	r2,r7,800e264 <_dtoa_r+0x1080>
 800ddd8:	19000003 	ldbu	r4,0(r3)
 800dddc:	102f883a 	mov	r23,r2
 800dde0:	10bfffc4 	addi	r2,r2,-1
 800dde4:	21403fcc 	andi	r5,r4,255
 800dde8:	2940201c 	xori	r5,r5,128
 800ddec:	297fe004 	addi	r5,r5,-128
 800ddf0:	29bff726 	beq	r5,r6,800ddd0 <__alt_data_end+0xfc00ddd0>
 800ddf4:	21000044 	addi	r4,r4,1
 800ddf8:	11000005 	stb	r4,0(r2)
 800ddfc:	a80b883a 	mov	r5,r21
 800de00:	e009883a 	mov	r4,fp
 800de04:	80106d40 	call	80106d4 <_Bfree>
 800de08:	883ea026 	beq	r17,zero,800d88c <__alt_data_end+0xfc00d88c>
 800de0c:	90000426 	beq	r18,zero,800de20 <_dtoa_r+0xc3c>
 800de10:	94400326 	beq	r18,r17,800de20 <_dtoa_r+0xc3c>
 800de14:	900b883a 	mov	r5,r18
 800de18:	e009883a 	mov	r4,fp
 800de1c:	80106d40 	call	80106d4 <_Bfree>
 800de20:	880b883a 	mov	r5,r17
 800de24:	e009883a 	mov	r4,fp
 800de28:	80106d40 	call	80106d4 <_Bfree>
 800de2c:	003e9706 	br	800d88c <__alt_data_end+0xfc00d88c>
 800de30:	01800044 	movi	r6,1
 800de34:	d9800e15 	stw	r6,56(sp)
 800de38:	003d9606 	br	800d494 <__alt_data_end+0xfc00d494>
 800de3c:	d8800817 	ldw	r2,32(sp)
 800de40:	d8c00517 	ldw	r3,20(sp)
 800de44:	d8000d15 	stw	zero,52(sp)
 800de48:	10c5c83a 	sub	r2,r2,r3
 800de4c:	00c9c83a 	sub	r4,zero,r3
 800de50:	d8800815 	stw	r2,32(sp)
 800de54:	d9000a15 	stw	r4,40(sp)
 800de58:	003d9706 	br	800d4b8 <__alt_data_end+0xfc00d4b8>
 800de5c:	05adc83a 	sub	r22,zero,r22
 800de60:	dd800815 	stw	r22,32(sp)
 800de64:	002d883a 	mov	r22,zero
 800de68:	003d8e06 	br	800d4a4 <__alt_data_end+0xfc00d4a4>
 800de6c:	d9000517 	ldw	r4,20(sp)
 800de70:	80151880 	call	8015188 <__floatsidf>
 800de74:	100d883a 	mov	r6,r2
 800de78:	180f883a 	mov	r7,r3
 800de7c:	a009883a 	mov	r4,r20
 800de80:	880b883a 	mov	r5,r17
 800de84:	801500c0 	call	801500c <__eqdf2>
 800de88:	103d7126 	beq	r2,zero,800d450 <__alt_data_end+0xfc00d450>
 800de8c:	d9c00517 	ldw	r7,20(sp)
 800de90:	39ffffc4 	addi	r7,r7,-1
 800de94:	d9c00515 	stw	r7,20(sp)
 800de98:	003d6d06 	br	800d450 <__alt_data_end+0xfc00d450>
 800de9c:	dd400a17 	ldw	r21,40(sp)
 800dea0:	dd000817 	ldw	r20,32(sp)
 800dea4:	0023883a 	mov	r17,zero
 800dea8:	003f4806 	br	800dbcc <__alt_data_end+0xfc00dbcc>
 800deac:	10e3c83a 	sub	r17,r2,r3
 800deb0:	9448983a 	sll	r4,r18,r17
 800deb4:	003d3206 	br	800d380 <__alt_data_end+0xfc00d380>
 800deb8:	d8000e15 	stw	zero,56(sp)
 800debc:	003d7506 	br	800d494 <__alt_data_end+0xfc00d494>
 800dec0:	b005883a 	mov	r2,r22
 800dec4:	003f4506 	br	800dbdc <__alt_data_end+0xfc00dbdc>
 800dec8:	dc000915 	stw	r16,36(sp)
 800decc:	d9800a17 	ldw	r6,40(sp)
 800ded0:	d9400917 	ldw	r5,36(sp)
 800ded4:	e009883a 	mov	r4,fp
 800ded8:	8010d280 	call	8010d28 <__pow5mult>
 800dedc:	1021883a 	mov	r16,r2
 800dee0:	003f5a06 	br	800dc4c <__alt_data_end+0xfc00dc4c>
 800dee4:	01c00044 	movi	r7,1
 800dee8:	d9c00b15 	stw	r7,44(sp)
 800deec:	d8802217 	ldw	r2,136(sp)
 800def0:	0081280e 	bge	zero,r2,800e394 <_dtoa_r+0x11b0>
 800def4:	100d883a 	mov	r6,r2
 800def8:	1021883a 	mov	r16,r2
 800defc:	d8800c15 	stw	r2,48(sp)
 800df00:	d8800615 	stw	r2,24(sp)
 800df04:	003d8806 	br	800d528 <__alt_data_end+0xfc00d528>
 800df08:	d8800617 	ldw	r2,24(sp)
 800df0c:	00be9b16 	blt	zero,r2,800d97c <__alt_data_end+0xfc00d97c>
 800df10:	10010f1e 	bne	r2,zero,800e350 <_dtoa_r+0x116c>
 800df14:	880b883a 	mov	r5,r17
 800df18:	000d883a 	mov	r6,zero
 800df1c:	01d00534 	movhi	r7,16404
 800df20:	8009883a 	mov	r4,r16
 800df24:	80090440 	call	8009044 <__muldf3>
 800df28:	900d883a 	mov	r6,r18
 800df2c:	980f883a 	mov	r7,r19
 800df30:	1009883a 	mov	r4,r2
 800df34:	180b883a 	mov	r5,r3
 800df38:	8008f680 	call	8008f68 <__gedf2>
 800df3c:	002b883a 	mov	r21,zero
 800df40:	0023883a 	mov	r17,zero
 800df44:	1000bf16 	blt	r2,zero,800e244 <_dtoa_r+0x1060>
 800df48:	d9802217 	ldw	r6,136(sp)
 800df4c:	ddc00717 	ldw	r23,28(sp)
 800df50:	018c303a 	nor	r6,zero,r6
 800df54:	d9800515 	stw	r6,20(sp)
 800df58:	a80b883a 	mov	r5,r21
 800df5c:	e009883a 	mov	r4,fp
 800df60:	80106d40 	call	80106d4 <_Bfree>
 800df64:	883e4926 	beq	r17,zero,800d88c <__alt_data_end+0xfc00d88c>
 800df68:	003fad06 	br	800de20 <__alt_data_end+0xfc00de20>
 800df6c:	d9c01117 	ldw	r7,68(sp)
 800df70:	3801bc26 	beq	r7,zero,800e664 <_dtoa_r+0x1480>
 800df74:	10810cc4 	addi	r2,r2,1075
 800df78:	dd400a17 	ldw	r21,40(sp)
 800df7c:	dd000817 	ldw	r20,32(sp)
 800df80:	003f0a06 	br	800dbac <__alt_data_end+0xfc00dbac>
 800df84:	00800704 	movi	r2,28
 800df88:	d9000817 	ldw	r4,32(sp)
 800df8c:	a0a9883a 	add	r20,r20,r2
 800df90:	b0ad883a 	add	r22,r22,r2
 800df94:	2089883a 	add	r4,r4,r2
 800df98:	d9000815 	stw	r4,32(sp)
 800df9c:	003f5106 	br	800dce4 <__alt_data_end+0xfc00dce4>
 800dfa0:	d8c00317 	ldw	r3,12(sp)
 800dfa4:	b8c1fc0e 	bge	r23,r3,800e798 <_dtoa_r+0x15b4>
 800dfa8:	0027883a 	mov	r19,zero
 800dfac:	b805883a 	mov	r2,r23
 800dfb0:	003f3e06 	br	800dcac <__alt_data_end+0xfc00dcac>
 800dfb4:	880b883a 	mov	r5,r17
 800dfb8:	e009883a 	mov	r4,fp
 800dfbc:	000f883a 	mov	r7,zero
 800dfc0:	01800284 	movi	r6,10
 800dfc4:	80106fc0 	call	80106fc <__multadd>
 800dfc8:	d9000c17 	ldw	r4,48(sp)
 800dfcc:	1023883a 	mov	r17,r2
 800dfd0:	0102040e 	bge	zero,r4,800e7e4 <_dtoa_r+0x1600>
 800dfd4:	d9000615 	stw	r4,24(sp)
 800dfd8:	0500050e 	bge	zero,r20,800dff0 <_dtoa_r+0xe0c>
 800dfdc:	880b883a 	mov	r5,r17
 800dfe0:	a00d883a 	mov	r6,r20
 800dfe4:	e009883a 	mov	r4,fp
 800dfe8:	8010e680 	call	8010e68 <__lshift>
 800dfec:	1023883a 	mov	r17,r2
 800dff0:	9801241e 	bne	r19,zero,800e484 <_dtoa_r+0x12a0>
 800dff4:	8829883a 	mov	r20,r17
 800dff8:	d9000617 	ldw	r4,24(sp)
 800dffc:	dcc00717 	ldw	r19,28(sp)
 800e000:	9480004c 	andi	r18,r18,1
 800e004:	20bfffc4 	addi	r2,r4,-1
 800e008:	9885883a 	add	r2,r19,r2
 800e00c:	d8800415 	stw	r2,16(sp)
 800e010:	dc800615 	stw	r18,24(sp)
 800e014:	a80b883a 	mov	r5,r21
 800e018:	8009883a 	mov	r4,r16
 800e01c:	800cfbc0 	call	800cfbc <quorem>
 800e020:	880b883a 	mov	r5,r17
 800e024:	8009883a 	mov	r4,r16
 800e028:	102f883a 	mov	r23,r2
 800e02c:	8010fb00 	call	8010fb0 <__mcmp>
 800e030:	a80b883a 	mov	r5,r21
 800e034:	a00d883a 	mov	r6,r20
 800e038:	e009883a 	mov	r4,fp
 800e03c:	102d883a 	mov	r22,r2
 800e040:	80110100 	call	8011010 <__mdiff>
 800e044:	1007883a 	mov	r3,r2
 800e048:	10800317 	ldw	r2,12(r2)
 800e04c:	bc800c04 	addi	r18,r23,48
 800e050:	180b883a 	mov	r5,r3
 800e054:	10004e1e 	bne	r2,zero,800e190 <_dtoa_r+0xfac>
 800e058:	8009883a 	mov	r4,r16
 800e05c:	d8c01615 	stw	r3,88(sp)
 800e060:	8010fb00 	call	8010fb0 <__mcmp>
 800e064:	d8c01617 	ldw	r3,88(sp)
 800e068:	e009883a 	mov	r4,fp
 800e06c:	d8801615 	stw	r2,88(sp)
 800e070:	180b883a 	mov	r5,r3
 800e074:	80106d40 	call	80106d4 <_Bfree>
 800e078:	d8801617 	ldw	r2,88(sp)
 800e07c:	1000041e 	bne	r2,zero,800e090 <_dtoa_r+0xeac>
 800e080:	d9800317 	ldw	r6,12(sp)
 800e084:	3000021e 	bne	r6,zero,800e090 <_dtoa_r+0xeac>
 800e088:	d8c00617 	ldw	r3,24(sp)
 800e08c:	18003726 	beq	r3,zero,800e16c <_dtoa_r+0xf88>
 800e090:	b0002016 	blt	r22,zero,800e114 <_dtoa_r+0xf30>
 800e094:	b000041e 	bne	r22,zero,800e0a8 <_dtoa_r+0xec4>
 800e098:	d9000317 	ldw	r4,12(sp)
 800e09c:	2000021e 	bne	r4,zero,800e0a8 <_dtoa_r+0xec4>
 800e0a0:	d8c00617 	ldw	r3,24(sp)
 800e0a4:	18001b26 	beq	r3,zero,800e114 <_dtoa_r+0xf30>
 800e0a8:	00810716 	blt	zero,r2,800e4c8 <_dtoa_r+0x12e4>
 800e0ac:	d8c00417 	ldw	r3,16(sp)
 800e0b0:	9d800044 	addi	r22,r19,1
 800e0b4:	9c800005 	stb	r18,0(r19)
 800e0b8:	b02f883a 	mov	r23,r22
 800e0bc:	98c10626 	beq	r19,r3,800e4d8 <_dtoa_r+0x12f4>
 800e0c0:	800b883a 	mov	r5,r16
 800e0c4:	000f883a 	mov	r7,zero
 800e0c8:	01800284 	movi	r6,10
 800e0cc:	e009883a 	mov	r4,fp
 800e0d0:	80106fc0 	call	80106fc <__multadd>
 800e0d4:	1021883a 	mov	r16,r2
 800e0d8:	000f883a 	mov	r7,zero
 800e0dc:	01800284 	movi	r6,10
 800e0e0:	880b883a 	mov	r5,r17
 800e0e4:	e009883a 	mov	r4,fp
 800e0e8:	8d002526 	beq	r17,r20,800e180 <_dtoa_r+0xf9c>
 800e0ec:	80106fc0 	call	80106fc <__multadd>
 800e0f0:	a00b883a 	mov	r5,r20
 800e0f4:	000f883a 	mov	r7,zero
 800e0f8:	01800284 	movi	r6,10
 800e0fc:	e009883a 	mov	r4,fp
 800e100:	1023883a 	mov	r17,r2
 800e104:	80106fc0 	call	80106fc <__multadd>
 800e108:	1029883a 	mov	r20,r2
 800e10c:	b027883a 	mov	r19,r22
 800e110:	003fc006 	br	800e014 <__alt_data_end+0xfc00e014>
 800e114:	9011883a 	mov	r8,r18
 800e118:	00800e0e 	bge	zero,r2,800e154 <_dtoa_r+0xf70>
 800e11c:	800b883a 	mov	r5,r16
 800e120:	01800044 	movi	r6,1
 800e124:	e009883a 	mov	r4,fp
 800e128:	da001715 	stw	r8,92(sp)
 800e12c:	8010e680 	call	8010e68 <__lshift>
 800e130:	a80b883a 	mov	r5,r21
 800e134:	1009883a 	mov	r4,r2
 800e138:	1021883a 	mov	r16,r2
 800e13c:	8010fb00 	call	8010fb0 <__mcmp>
 800e140:	da001717 	ldw	r8,92(sp)
 800e144:	0081960e 	bge	zero,r2,800e7a0 <_dtoa_r+0x15bc>
 800e148:	00800e44 	movi	r2,57
 800e14c:	40817026 	beq	r8,r2,800e710 <_dtoa_r+0x152c>
 800e150:	ba000c44 	addi	r8,r23,49
 800e154:	8825883a 	mov	r18,r17
 800e158:	9dc00044 	addi	r23,r19,1
 800e15c:	9a000005 	stb	r8,0(r19)
 800e160:	a023883a 	mov	r17,r20
 800e164:	dc000915 	stw	r16,36(sp)
 800e168:	003f2406 	br	800ddfc <__alt_data_end+0xfc00ddfc>
 800e16c:	00800e44 	movi	r2,57
 800e170:	9011883a 	mov	r8,r18
 800e174:	90816626 	beq	r18,r2,800e710 <_dtoa_r+0x152c>
 800e178:	05bff516 	blt	zero,r22,800e150 <__alt_data_end+0xfc00e150>
 800e17c:	003ff506 	br	800e154 <__alt_data_end+0xfc00e154>
 800e180:	80106fc0 	call	80106fc <__multadd>
 800e184:	1023883a 	mov	r17,r2
 800e188:	1029883a 	mov	r20,r2
 800e18c:	003fdf06 	br	800e10c <__alt_data_end+0xfc00e10c>
 800e190:	e009883a 	mov	r4,fp
 800e194:	80106d40 	call	80106d4 <_Bfree>
 800e198:	00800044 	movi	r2,1
 800e19c:	003fbc06 	br	800e090 <__alt_data_end+0xfc00e090>
 800e1a0:	a80b883a 	mov	r5,r21
 800e1a4:	8009883a 	mov	r4,r16
 800e1a8:	8010fb00 	call	8010fb0 <__mcmp>
 800e1ac:	103edb0e 	bge	r2,zero,800dd1c <__alt_data_end+0xfc00dd1c>
 800e1b0:	800b883a 	mov	r5,r16
 800e1b4:	000f883a 	mov	r7,zero
 800e1b8:	01800284 	movi	r6,10
 800e1bc:	e009883a 	mov	r4,fp
 800e1c0:	80106fc0 	call	80106fc <__multadd>
 800e1c4:	1021883a 	mov	r16,r2
 800e1c8:	d8800517 	ldw	r2,20(sp)
 800e1cc:	d8c00b17 	ldw	r3,44(sp)
 800e1d0:	10bfffc4 	addi	r2,r2,-1
 800e1d4:	d8800515 	stw	r2,20(sp)
 800e1d8:	183f761e 	bne	r3,zero,800dfb4 <__alt_data_end+0xfc00dfb4>
 800e1dc:	d9000c17 	ldw	r4,48(sp)
 800e1e0:	0101730e 	bge	zero,r4,800e7b0 <_dtoa_r+0x15cc>
 800e1e4:	d9000615 	stw	r4,24(sp)
 800e1e8:	003ed006 	br	800dd2c <__alt_data_end+0xfc00dd2c>
 800e1ec:	00800084 	movi	r2,2
 800e1f0:	3081861e 	bne	r6,r2,800e80c <_dtoa_r+0x1628>
 800e1f4:	d8000b15 	stw	zero,44(sp)
 800e1f8:	003f3c06 	br	800deec <__alt_data_end+0xfc00deec>
 800e1fc:	dc000917 	ldw	r16,36(sp)
 800e200:	003e9206 	br	800dc4c <__alt_data_end+0xfc00dc4c>
 800e204:	d9c00317 	ldw	r7,12(sp)
 800e208:	00800084 	movi	r2,2
 800e20c:	11fec50e 	bge	r2,r7,800dd24 <__alt_data_end+0xfc00dd24>
 800e210:	d9000617 	ldw	r4,24(sp)
 800e214:	20013c1e 	bne	r4,zero,800e708 <_dtoa_r+0x1524>
 800e218:	a80b883a 	mov	r5,r21
 800e21c:	000f883a 	mov	r7,zero
 800e220:	01800144 	movi	r6,5
 800e224:	e009883a 	mov	r4,fp
 800e228:	80106fc0 	call	80106fc <__multadd>
 800e22c:	100b883a 	mov	r5,r2
 800e230:	8009883a 	mov	r4,r16
 800e234:	102b883a 	mov	r21,r2
 800e238:	8010fb00 	call	8010fb0 <__mcmp>
 800e23c:	dc000915 	stw	r16,36(sp)
 800e240:	00bf410e 	bge	zero,r2,800df48 <__alt_data_end+0xfc00df48>
 800e244:	d9c00717 	ldw	r7,28(sp)
 800e248:	00800c44 	movi	r2,49
 800e24c:	38800005 	stb	r2,0(r7)
 800e250:	d8800517 	ldw	r2,20(sp)
 800e254:	3dc00044 	addi	r23,r7,1
 800e258:	10800044 	addi	r2,r2,1
 800e25c:	d8800515 	stw	r2,20(sp)
 800e260:	003f3d06 	br	800df58 <__alt_data_end+0xfc00df58>
 800e264:	d9800517 	ldw	r6,20(sp)
 800e268:	d9c00717 	ldw	r7,28(sp)
 800e26c:	00800c44 	movi	r2,49
 800e270:	31800044 	addi	r6,r6,1
 800e274:	d9800515 	stw	r6,20(sp)
 800e278:	38800005 	stb	r2,0(r7)
 800e27c:	003edf06 	br	800ddfc <__alt_data_end+0xfc00ddfc>
 800e280:	d8000b15 	stw	zero,44(sp)
 800e284:	003c9f06 	br	800d504 <__alt_data_end+0xfc00d504>
 800e288:	903e7e1e 	bne	r18,zero,800dc84 <__alt_data_end+0xfc00dc84>
 800e28c:	00800434 	movhi	r2,16
 800e290:	10bfffc4 	addi	r2,r2,-1
 800e294:	9884703a 	and	r2,r19,r2
 800e298:	1000ea1e 	bne	r2,zero,800e644 <_dtoa_r+0x1460>
 800e29c:	9cdffc2c 	andhi	r19,r19,32752
 800e2a0:	9800e826 	beq	r19,zero,800e644 <_dtoa_r+0x1460>
 800e2a4:	d9c00817 	ldw	r7,32(sp)
 800e2a8:	b5800044 	addi	r22,r22,1
 800e2ac:	04c00044 	movi	r19,1
 800e2b0:	39c00044 	addi	r7,r7,1
 800e2b4:	d9c00815 	stw	r7,32(sp)
 800e2b8:	d8800d17 	ldw	r2,52(sp)
 800e2bc:	103e721e 	bne	r2,zero,800dc88 <__alt_data_end+0xfc00dc88>
 800e2c0:	00800044 	movi	r2,1
 800e2c4:	003e7906 	br	800dcac <__alt_data_end+0xfc00dcac>
 800e2c8:	8009883a 	mov	r4,r16
 800e2cc:	80151880 	call	8015188 <__floatsidf>
 800e2d0:	d9800f17 	ldw	r6,60(sp)
 800e2d4:	d9c01017 	ldw	r7,64(sp)
 800e2d8:	1009883a 	mov	r4,r2
 800e2dc:	180b883a 	mov	r5,r3
 800e2e0:	80090440 	call	8009044 <__muldf3>
 800e2e4:	000d883a 	mov	r6,zero
 800e2e8:	01d00734 	movhi	r7,16412
 800e2ec:	1009883a 	mov	r4,r2
 800e2f0:	180b883a 	mov	r5,r3
 800e2f4:	80086bc0 	call	80086bc <__adddf3>
 800e2f8:	047f3034 	movhi	r17,64704
 800e2fc:	1021883a 	mov	r16,r2
 800e300:	1c63883a 	add	r17,r3,r17
 800e304:	d9000f17 	ldw	r4,60(sp)
 800e308:	d9401017 	ldw	r5,64(sp)
 800e30c:	000d883a 	mov	r6,zero
 800e310:	01d00534 	movhi	r7,16404
 800e314:	80098b00 	call	80098b0 <__subdf3>
 800e318:	800d883a 	mov	r6,r16
 800e31c:	880f883a 	mov	r7,r17
 800e320:	1009883a 	mov	r4,r2
 800e324:	180b883a 	mov	r5,r3
 800e328:	102b883a 	mov	r21,r2
 800e32c:	1829883a 	mov	r20,r3
 800e330:	8008f680 	call	8008f68 <__gedf2>
 800e334:	00806c16 	blt	zero,r2,800e4e8 <_dtoa_r+0x1304>
 800e338:	89e0003c 	xorhi	r7,r17,32768
 800e33c:	800d883a 	mov	r6,r16
 800e340:	a809883a 	mov	r4,r21
 800e344:	a00b883a 	mov	r5,r20
 800e348:	80150940 	call	8015094 <__ledf2>
 800e34c:	103d7e0e 	bge	r2,zero,800d948 <__alt_data_end+0xfc00d948>
 800e350:	002b883a 	mov	r21,zero
 800e354:	0023883a 	mov	r17,zero
 800e358:	003efb06 	br	800df48 <__alt_data_end+0xfc00df48>
 800e35c:	d8800717 	ldw	r2,28(sp)
 800e360:	003bd006 	br	800d2a4 <__alt_data_end+0xfc00d2a4>
 800e364:	d9000a17 	ldw	r4,40(sp)
 800e368:	d9800d17 	ldw	r6,52(sp)
 800e36c:	dd400a15 	stw	r21,40(sp)
 800e370:	a905c83a 	sub	r2,r21,r4
 800e374:	308d883a 	add	r6,r6,r2
 800e378:	d9800d15 	stw	r6,52(sp)
 800e37c:	002b883a 	mov	r21,zero
 800e380:	003e0606 	br	800db9c <__alt_data_end+0xfc00db9c>
 800e384:	9023883a 	mov	r17,r18
 800e388:	9829883a 	mov	r20,r19
 800e38c:	04000084 	movi	r16,2
 800e390:	003c9206 	br	800d5dc <__alt_data_end+0xfc00d5dc>
 800e394:	04000044 	movi	r16,1
 800e398:	dc000c15 	stw	r16,48(sp)
 800e39c:	dc000615 	stw	r16,24(sp)
 800e3a0:	dc002215 	stw	r16,136(sp)
 800e3a4:	e0001115 	stw	zero,68(fp)
 800e3a8:	000b883a 	mov	r5,zero
 800e3ac:	003c6906 	br	800d554 <__alt_data_end+0xfc00d554>
 800e3b0:	3021883a 	mov	r16,r6
 800e3b4:	003ffb06 	br	800e3a4 <__alt_data_end+0xfc00e3a4>
 800e3b8:	1000021e 	bne	r2,zero,800e3c4 <_dtoa_r+0x11e0>
 800e3bc:	4200004c 	andi	r8,r8,1
 800e3c0:	403e7d1e 	bne	r8,zero,800ddb8 <__alt_data_end+0xfc00ddb8>
 800e3c4:	01000c04 	movi	r4,48
 800e3c8:	00000106 	br	800e3d0 <_dtoa_r+0x11ec>
 800e3cc:	102f883a 	mov	r23,r2
 800e3d0:	b8bfffc4 	addi	r2,r23,-1
 800e3d4:	10c00007 	ldb	r3,0(r2)
 800e3d8:	193ffc26 	beq	r3,r4,800e3cc <__alt_data_end+0xfc00e3cc>
 800e3dc:	003e8706 	br	800ddfc <__alt_data_end+0xfc00ddfc>
 800e3e0:	d8800517 	ldw	r2,20(sp)
 800e3e4:	00a3c83a 	sub	r17,zero,r2
 800e3e8:	8800a426 	beq	r17,zero,800e67c <_dtoa_r+0x1498>
 800e3ec:	888003cc 	andi	r2,r17,15
 800e3f0:	100490fa 	slli	r2,r2,3
 800e3f4:	00c21974 	movhi	r3,2149
 800e3f8:	18f77304 	addi	r3,r3,-8756
 800e3fc:	1885883a 	add	r2,r3,r2
 800e400:	11800017 	ldw	r6,0(r2)
 800e404:	11c00117 	ldw	r7,4(r2)
 800e408:	9009883a 	mov	r4,r18
 800e40c:	980b883a 	mov	r5,r19
 800e410:	8823d13a 	srai	r17,r17,4
 800e414:	80090440 	call	8009044 <__muldf3>
 800e418:	d8800f15 	stw	r2,60(sp)
 800e41c:	d8c01015 	stw	r3,64(sp)
 800e420:	8800e826 	beq	r17,zero,800e7c4 <_dtoa_r+0x15e0>
 800e424:	05021974 	movhi	r20,2149
 800e428:	a5376904 	addi	r20,r20,-8796
 800e42c:	04000084 	movi	r16,2
 800e430:	8980004c 	andi	r6,r17,1
 800e434:	1009883a 	mov	r4,r2
 800e438:	8823d07a 	srai	r17,r17,1
 800e43c:	180b883a 	mov	r5,r3
 800e440:	30000426 	beq	r6,zero,800e454 <_dtoa_r+0x1270>
 800e444:	a1800017 	ldw	r6,0(r20)
 800e448:	a1c00117 	ldw	r7,4(r20)
 800e44c:	84000044 	addi	r16,r16,1
 800e450:	80090440 	call	8009044 <__muldf3>
 800e454:	a5000204 	addi	r20,r20,8
 800e458:	883ff51e 	bne	r17,zero,800e430 <__alt_data_end+0xfc00e430>
 800e45c:	d8800f15 	stw	r2,60(sp)
 800e460:	d8c01015 	stw	r3,64(sp)
 800e464:	003c7606 	br	800d640 <__alt_data_end+0xfc00d640>
 800e468:	00c00c04 	movi	r3,48
 800e46c:	10c00005 	stb	r3,0(r2)
 800e470:	d8c00517 	ldw	r3,20(sp)
 800e474:	bd3fffc3 	ldbu	r20,-1(r23)
 800e478:	18c00044 	addi	r3,r3,1
 800e47c:	d8c00515 	stw	r3,20(sp)
 800e480:	003db906 	br	800db68 <__alt_data_end+0xfc00db68>
 800e484:	89400117 	ldw	r5,4(r17)
 800e488:	e009883a 	mov	r4,fp
 800e48c:	801062c0 	call	801062c <_Balloc>
 800e490:	89800417 	ldw	r6,16(r17)
 800e494:	89400304 	addi	r5,r17,12
 800e498:	11000304 	addi	r4,r2,12
 800e49c:	31800084 	addi	r6,r6,2
 800e4a0:	318d883a 	add	r6,r6,r6
 800e4a4:	318d883a 	add	r6,r6,r6
 800e4a8:	1027883a 	mov	r19,r2
 800e4ac:	800a5f00 	call	800a5f0 <memcpy>
 800e4b0:	01800044 	movi	r6,1
 800e4b4:	980b883a 	mov	r5,r19
 800e4b8:	e009883a 	mov	r4,fp
 800e4bc:	8010e680 	call	8010e68 <__lshift>
 800e4c0:	1029883a 	mov	r20,r2
 800e4c4:	003ecc06 	br	800dff8 <__alt_data_end+0xfc00dff8>
 800e4c8:	00800e44 	movi	r2,57
 800e4cc:	90809026 	beq	r18,r2,800e710 <_dtoa_r+0x152c>
 800e4d0:	92000044 	addi	r8,r18,1
 800e4d4:	003f1f06 	br	800e154 <__alt_data_end+0xfc00e154>
 800e4d8:	9011883a 	mov	r8,r18
 800e4dc:	8825883a 	mov	r18,r17
 800e4e0:	a023883a 	mov	r17,r20
 800e4e4:	003e2906 	br	800dd8c <__alt_data_end+0xfc00dd8c>
 800e4e8:	002b883a 	mov	r21,zero
 800e4ec:	0023883a 	mov	r17,zero
 800e4f0:	003f5406 	br	800e244 <__alt_data_end+0xfc00e244>
 800e4f4:	61bfffc4 	addi	r6,r12,-1
 800e4f8:	300490fa 	slli	r2,r6,3
 800e4fc:	00c21974 	movhi	r3,2149
 800e500:	18f77304 	addi	r3,r3,-8756
 800e504:	1885883a 	add	r2,r3,r2
 800e508:	11000017 	ldw	r4,0(r2)
 800e50c:	11400117 	ldw	r5,4(r2)
 800e510:	d8800717 	ldw	r2,28(sp)
 800e514:	880f883a 	mov	r7,r17
 800e518:	d9801215 	stw	r6,72(sp)
 800e51c:	800d883a 	mov	r6,r16
 800e520:	db001615 	stw	r12,88(sp)
 800e524:	15c00044 	addi	r23,r2,1
 800e528:	80090440 	call	8009044 <__muldf3>
 800e52c:	d9401017 	ldw	r5,64(sp)
 800e530:	d9000f17 	ldw	r4,60(sp)
 800e534:	d8c01515 	stw	r3,84(sp)
 800e538:	d8801415 	stw	r2,80(sp)
 800e53c:	800a1ac0 	call	800a1ac <__fixdfsi>
 800e540:	1009883a 	mov	r4,r2
 800e544:	1021883a 	mov	r16,r2
 800e548:	80151880 	call	8015188 <__floatsidf>
 800e54c:	d9000f17 	ldw	r4,60(sp)
 800e550:	d9401017 	ldw	r5,64(sp)
 800e554:	100d883a 	mov	r6,r2
 800e558:	180f883a 	mov	r7,r3
 800e55c:	80098b00 	call	80098b0 <__subdf3>
 800e560:	1829883a 	mov	r20,r3
 800e564:	d8c00717 	ldw	r3,28(sp)
 800e568:	84000c04 	addi	r16,r16,48
 800e56c:	1023883a 	mov	r17,r2
 800e570:	1c000005 	stb	r16,0(r3)
 800e574:	db001617 	ldw	r12,88(sp)
 800e578:	00800044 	movi	r2,1
 800e57c:	60802226 	beq	r12,r2,800e608 <_dtoa_r+0x1424>
 800e580:	d9c00717 	ldw	r7,28(sp)
 800e584:	8805883a 	mov	r2,r17
 800e588:	b82b883a 	mov	r21,r23
 800e58c:	3b19883a 	add	r12,r7,r12
 800e590:	6023883a 	mov	r17,r12
 800e594:	a007883a 	mov	r3,r20
 800e598:	dc800f15 	stw	r18,60(sp)
 800e59c:	000d883a 	mov	r6,zero
 800e5a0:	01d00934 	movhi	r7,16420
 800e5a4:	1009883a 	mov	r4,r2
 800e5a8:	180b883a 	mov	r5,r3
 800e5ac:	80090440 	call	8009044 <__muldf3>
 800e5b0:	180b883a 	mov	r5,r3
 800e5b4:	1009883a 	mov	r4,r2
 800e5b8:	1829883a 	mov	r20,r3
 800e5bc:	1025883a 	mov	r18,r2
 800e5c0:	800a1ac0 	call	800a1ac <__fixdfsi>
 800e5c4:	1009883a 	mov	r4,r2
 800e5c8:	1021883a 	mov	r16,r2
 800e5cc:	80151880 	call	8015188 <__floatsidf>
 800e5d0:	100d883a 	mov	r6,r2
 800e5d4:	180f883a 	mov	r7,r3
 800e5d8:	9009883a 	mov	r4,r18
 800e5dc:	a00b883a 	mov	r5,r20
 800e5e0:	84000c04 	addi	r16,r16,48
 800e5e4:	80098b00 	call	80098b0 <__subdf3>
 800e5e8:	ad400044 	addi	r21,r21,1
 800e5ec:	ac3fffc5 	stb	r16,-1(r21)
 800e5f0:	ac7fea1e 	bne	r21,r17,800e59c <__alt_data_end+0xfc00e59c>
 800e5f4:	1023883a 	mov	r17,r2
 800e5f8:	d8801217 	ldw	r2,72(sp)
 800e5fc:	dc800f17 	ldw	r18,60(sp)
 800e600:	1829883a 	mov	r20,r3
 800e604:	b8af883a 	add	r23,r23,r2
 800e608:	d9001417 	ldw	r4,80(sp)
 800e60c:	d9401517 	ldw	r5,84(sp)
 800e610:	000d883a 	mov	r6,zero
 800e614:	01cff834 	movhi	r7,16352
 800e618:	80086bc0 	call	80086bc <__adddf3>
 800e61c:	880d883a 	mov	r6,r17
 800e620:	a00f883a 	mov	r7,r20
 800e624:	1009883a 	mov	r4,r2
 800e628:	180b883a 	mov	r5,r3
 800e62c:	80150940 	call	8015094 <__ledf2>
 800e630:	10003e0e 	bge	r2,zero,800e72c <_dtoa_r+0x1548>
 800e634:	d9001317 	ldw	r4,76(sp)
 800e638:	bd3fffc3 	ldbu	r20,-1(r23)
 800e63c:	d9000515 	stw	r4,20(sp)
 800e640:	003d3b06 	br	800db30 <__alt_data_end+0xfc00db30>
 800e644:	0027883a 	mov	r19,zero
 800e648:	003f1b06 	br	800e2b8 <__alt_data_end+0xfc00e2b8>
 800e64c:	d8800817 	ldw	r2,32(sp)
 800e650:	11e9c83a 	sub	r20,r2,r7
 800e654:	0005883a 	mov	r2,zero
 800e658:	003d5406 	br	800dbac <__alt_data_end+0xfc00dbac>
 800e65c:	00800044 	movi	r2,1
 800e660:	003dc706 	br	800dd80 <__alt_data_end+0xfc00dd80>
 800e664:	d8c00217 	ldw	r3,8(sp)
 800e668:	00800d84 	movi	r2,54
 800e66c:	dd400a17 	ldw	r21,40(sp)
 800e670:	10c5c83a 	sub	r2,r2,r3
 800e674:	dd000817 	ldw	r20,32(sp)
 800e678:	003d4c06 	br	800dbac <__alt_data_end+0xfc00dbac>
 800e67c:	dc800f15 	stw	r18,60(sp)
 800e680:	dcc01015 	stw	r19,64(sp)
 800e684:	04000084 	movi	r16,2
 800e688:	003bed06 	br	800d640 <__alt_data_end+0xfc00d640>
 800e68c:	d9000617 	ldw	r4,24(sp)
 800e690:	203f0d26 	beq	r4,zero,800e2c8 <__alt_data_end+0xfc00e2c8>
 800e694:	d9800c17 	ldw	r6,48(sp)
 800e698:	01bcab0e 	bge	zero,r6,800d948 <__alt_data_end+0xfc00d948>
 800e69c:	d9401017 	ldw	r5,64(sp)
 800e6a0:	d9000f17 	ldw	r4,60(sp)
 800e6a4:	000d883a 	mov	r6,zero
 800e6a8:	01d00934 	movhi	r7,16420
 800e6ac:	80090440 	call	8009044 <__muldf3>
 800e6b0:	81000044 	addi	r4,r16,1
 800e6b4:	d8800f15 	stw	r2,60(sp)
 800e6b8:	d8c01015 	stw	r3,64(sp)
 800e6bc:	80151880 	call	8015188 <__floatsidf>
 800e6c0:	d9800f17 	ldw	r6,60(sp)
 800e6c4:	d9c01017 	ldw	r7,64(sp)
 800e6c8:	1009883a 	mov	r4,r2
 800e6cc:	180b883a 	mov	r5,r3
 800e6d0:	80090440 	call	8009044 <__muldf3>
 800e6d4:	01d00734 	movhi	r7,16412
 800e6d8:	000d883a 	mov	r6,zero
 800e6dc:	1009883a 	mov	r4,r2
 800e6e0:	180b883a 	mov	r5,r3
 800e6e4:	80086bc0 	call	80086bc <__adddf3>
 800e6e8:	d9c00517 	ldw	r7,20(sp)
 800e6ec:	047f3034 	movhi	r17,64704
 800e6f0:	1021883a 	mov	r16,r2
 800e6f4:	39ffffc4 	addi	r7,r7,-1
 800e6f8:	d9c01315 	stw	r7,76(sp)
 800e6fc:	1c63883a 	add	r17,r3,r17
 800e700:	db000c17 	ldw	r12,48(sp)
 800e704:	003bea06 	br	800d6b0 <__alt_data_end+0xfc00d6b0>
 800e708:	dc000915 	stw	r16,36(sp)
 800e70c:	003e0e06 	br	800df48 <__alt_data_end+0xfc00df48>
 800e710:	01000e44 	movi	r4,57
 800e714:	8825883a 	mov	r18,r17
 800e718:	9dc00044 	addi	r23,r19,1
 800e71c:	99000005 	stb	r4,0(r19)
 800e720:	a023883a 	mov	r17,r20
 800e724:	dc000915 	stw	r16,36(sp)
 800e728:	003da406 	br	800ddbc <__alt_data_end+0xfc00ddbc>
 800e72c:	d9801417 	ldw	r6,80(sp)
 800e730:	d9c01517 	ldw	r7,84(sp)
 800e734:	0009883a 	mov	r4,zero
 800e738:	014ff834 	movhi	r5,16352
 800e73c:	80098b00 	call	80098b0 <__subdf3>
 800e740:	880d883a 	mov	r6,r17
 800e744:	a00f883a 	mov	r7,r20
 800e748:	1009883a 	mov	r4,r2
 800e74c:	180b883a 	mov	r5,r3
 800e750:	8008f680 	call	8008f68 <__gedf2>
 800e754:	00bc7c0e 	bge	zero,r2,800d948 <__alt_data_end+0xfc00d948>
 800e758:	01000c04 	movi	r4,48
 800e75c:	00000106 	br	800e764 <_dtoa_r+0x1580>
 800e760:	102f883a 	mov	r23,r2
 800e764:	b8bfffc4 	addi	r2,r23,-1
 800e768:	10c00007 	ldb	r3,0(r2)
 800e76c:	193ffc26 	beq	r3,r4,800e760 <__alt_data_end+0xfc00e760>
 800e770:	d9801317 	ldw	r6,76(sp)
 800e774:	d9800515 	stw	r6,20(sp)
 800e778:	003c4406 	br	800d88c <__alt_data_end+0xfc00d88c>
 800e77c:	d9801317 	ldw	r6,76(sp)
 800e780:	d9800515 	stw	r6,20(sp)
 800e784:	003cea06 	br	800db30 <__alt_data_end+0xfc00db30>
 800e788:	dd800f17 	ldw	r22,60(sp)
 800e78c:	dcc01017 	ldw	r19,64(sp)
 800e790:	dc801217 	ldw	r18,72(sp)
 800e794:	003c6c06 	br	800d948 <__alt_data_end+0xfc00d948>
 800e798:	903e031e 	bne	r18,zero,800dfa8 <__alt_data_end+0xfc00dfa8>
 800e79c:	003ebb06 	br	800e28c <__alt_data_end+0xfc00e28c>
 800e7a0:	103e6c1e 	bne	r2,zero,800e154 <__alt_data_end+0xfc00e154>
 800e7a4:	4080004c 	andi	r2,r8,1
 800e7a8:	103e6a26 	beq	r2,zero,800e154 <__alt_data_end+0xfc00e154>
 800e7ac:	003e6606 	br	800e148 <__alt_data_end+0xfc00e148>
 800e7b0:	d8c00317 	ldw	r3,12(sp)
 800e7b4:	00800084 	movi	r2,2
 800e7b8:	10c02916 	blt	r2,r3,800e860 <_dtoa_r+0x167c>
 800e7bc:	d9000c17 	ldw	r4,48(sp)
 800e7c0:	003e8806 	br	800e1e4 <__alt_data_end+0xfc00e1e4>
 800e7c4:	04000084 	movi	r16,2
 800e7c8:	003b9d06 	br	800d640 <__alt_data_end+0xfc00d640>
 800e7cc:	d9001317 	ldw	r4,76(sp)
 800e7d0:	d9000515 	stw	r4,20(sp)
 800e7d4:	003cd606 	br	800db30 <__alt_data_end+0xfc00db30>
 800e7d8:	d8801317 	ldw	r2,76(sp)
 800e7dc:	d8800515 	stw	r2,20(sp)
 800e7e0:	003c2a06 	br	800d88c <__alt_data_end+0xfc00d88c>
 800e7e4:	d9800317 	ldw	r6,12(sp)
 800e7e8:	00800084 	movi	r2,2
 800e7ec:	11801516 	blt	r2,r6,800e844 <_dtoa_r+0x1660>
 800e7f0:	d9c00c17 	ldw	r7,48(sp)
 800e7f4:	d9c00615 	stw	r7,24(sp)
 800e7f8:	003df706 	br	800dfd8 <__alt_data_end+0xfc00dfd8>
 800e7fc:	193d3926 	beq	r3,r4,800dce4 <__alt_data_end+0xfc00dce4>
 800e800:	00c00f04 	movi	r3,60
 800e804:	1885c83a 	sub	r2,r3,r2
 800e808:	003ddf06 	br	800df88 <__alt_data_end+0xfc00df88>
 800e80c:	e009883a 	mov	r4,fp
 800e810:	e0001115 	stw	zero,68(fp)
 800e814:	000b883a 	mov	r5,zero
 800e818:	801062c0 	call	801062c <_Balloc>
 800e81c:	d8800715 	stw	r2,28(sp)
 800e820:	d8c00717 	ldw	r3,28(sp)
 800e824:	00bfffc4 	movi	r2,-1
 800e828:	01000044 	movi	r4,1
 800e82c:	d8800c15 	stw	r2,48(sp)
 800e830:	e0c01015 	stw	r3,64(fp)
 800e834:	d9000b15 	stw	r4,44(sp)
 800e838:	d8800615 	stw	r2,24(sp)
 800e83c:	d8002215 	stw	zero,136(sp)
 800e840:	003c4106 	br	800d948 <__alt_data_end+0xfc00d948>
 800e844:	d8c00c17 	ldw	r3,48(sp)
 800e848:	d8c00615 	stw	r3,24(sp)
 800e84c:	003e7006 	br	800e210 <__alt_data_end+0xfc00e210>
 800e850:	04400044 	movi	r17,1
 800e854:	003b2006 	br	800d4d8 <__alt_data_end+0xfc00d4d8>
 800e858:	000b883a 	mov	r5,zero
 800e85c:	003b3d06 	br	800d554 <__alt_data_end+0xfc00d554>
 800e860:	d8800c17 	ldw	r2,48(sp)
 800e864:	d8800615 	stw	r2,24(sp)
 800e868:	003e6906 	br	800e210 <__alt_data_end+0xfc00e210>

0800e86c <__sflush_r>:
 800e86c:	2880030b 	ldhu	r2,12(r5)
 800e870:	defffb04 	addi	sp,sp,-20
 800e874:	dcc00315 	stw	r19,12(sp)
 800e878:	dc400115 	stw	r17,4(sp)
 800e87c:	dfc00415 	stw	ra,16(sp)
 800e880:	dc800215 	stw	r18,8(sp)
 800e884:	dc000015 	stw	r16,0(sp)
 800e888:	10c0020c 	andi	r3,r2,8
 800e88c:	2823883a 	mov	r17,r5
 800e890:	2027883a 	mov	r19,r4
 800e894:	1800311e 	bne	r3,zero,800e95c <__sflush_r+0xf0>
 800e898:	28c00117 	ldw	r3,4(r5)
 800e89c:	10820014 	ori	r2,r2,2048
 800e8a0:	2880030d 	sth	r2,12(r5)
 800e8a4:	00c04b0e 	bge	zero,r3,800e9d4 <__sflush_r+0x168>
 800e8a8:	8a000a17 	ldw	r8,40(r17)
 800e8ac:	40002326 	beq	r8,zero,800e93c <__sflush_r+0xd0>
 800e8b0:	9c000017 	ldw	r16,0(r19)
 800e8b4:	10c4000c 	andi	r3,r2,4096
 800e8b8:	98000015 	stw	zero,0(r19)
 800e8bc:	18004826 	beq	r3,zero,800e9e0 <__sflush_r+0x174>
 800e8c0:	89801417 	ldw	r6,80(r17)
 800e8c4:	10c0010c 	andi	r3,r2,4
 800e8c8:	18000626 	beq	r3,zero,800e8e4 <__sflush_r+0x78>
 800e8cc:	88c00117 	ldw	r3,4(r17)
 800e8d0:	88800c17 	ldw	r2,48(r17)
 800e8d4:	30cdc83a 	sub	r6,r6,r3
 800e8d8:	10000226 	beq	r2,zero,800e8e4 <__sflush_r+0x78>
 800e8dc:	88800f17 	ldw	r2,60(r17)
 800e8e0:	308dc83a 	sub	r6,r6,r2
 800e8e4:	89400717 	ldw	r5,28(r17)
 800e8e8:	000f883a 	mov	r7,zero
 800e8ec:	9809883a 	mov	r4,r19
 800e8f0:	403ee83a 	callr	r8
 800e8f4:	00ffffc4 	movi	r3,-1
 800e8f8:	10c04426 	beq	r2,r3,800ea0c <__sflush_r+0x1a0>
 800e8fc:	88c0030b 	ldhu	r3,12(r17)
 800e900:	89000417 	ldw	r4,16(r17)
 800e904:	88000115 	stw	zero,4(r17)
 800e908:	197dffcc 	andi	r5,r3,63487
 800e90c:	8940030d 	sth	r5,12(r17)
 800e910:	89000015 	stw	r4,0(r17)
 800e914:	18c4000c 	andi	r3,r3,4096
 800e918:	18002c1e 	bne	r3,zero,800e9cc <__sflush_r+0x160>
 800e91c:	89400c17 	ldw	r5,48(r17)
 800e920:	9c000015 	stw	r16,0(r19)
 800e924:	28000526 	beq	r5,zero,800e93c <__sflush_r+0xd0>
 800e928:	88801004 	addi	r2,r17,64
 800e92c:	28800226 	beq	r5,r2,800e938 <__sflush_r+0xcc>
 800e930:	9809883a 	mov	r4,r19
 800e934:	800efe80 	call	800efe8 <_free_r>
 800e938:	88000c15 	stw	zero,48(r17)
 800e93c:	0005883a 	mov	r2,zero
 800e940:	dfc00417 	ldw	ra,16(sp)
 800e944:	dcc00317 	ldw	r19,12(sp)
 800e948:	dc800217 	ldw	r18,8(sp)
 800e94c:	dc400117 	ldw	r17,4(sp)
 800e950:	dc000017 	ldw	r16,0(sp)
 800e954:	dec00504 	addi	sp,sp,20
 800e958:	f800283a 	ret
 800e95c:	2c800417 	ldw	r18,16(r5)
 800e960:	903ff626 	beq	r18,zero,800e93c <__alt_data_end+0xfc00e93c>
 800e964:	2c000017 	ldw	r16,0(r5)
 800e968:	108000cc 	andi	r2,r2,3
 800e96c:	2c800015 	stw	r18,0(r5)
 800e970:	84a1c83a 	sub	r16,r16,r18
 800e974:	1000131e 	bne	r2,zero,800e9c4 <__sflush_r+0x158>
 800e978:	28800517 	ldw	r2,20(r5)
 800e97c:	88800215 	stw	r2,8(r17)
 800e980:	04000316 	blt	zero,r16,800e990 <__sflush_r+0x124>
 800e984:	003fed06 	br	800e93c <__alt_data_end+0xfc00e93c>
 800e988:	90a5883a 	add	r18,r18,r2
 800e98c:	043feb0e 	bge	zero,r16,800e93c <__alt_data_end+0xfc00e93c>
 800e990:	88800917 	ldw	r2,36(r17)
 800e994:	89400717 	ldw	r5,28(r17)
 800e998:	800f883a 	mov	r7,r16
 800e99c:	900d883a 	mov	r6,r18
 800e9a0:	9809883a 	mov	r4,r19
 800e9a4:	103ee83a 	callr	r2
 800e9a8:	80a1c83a 	sub	r16,r16,r2
 800e9ac:	00bff616 	blt	zero,r2,800e988 <__alt_data_end+0xfc00e988>
 800e9b0:	88c0030b 	ldhu	r3,12(r17)
 800e9b4:	00bfffc4 	movi	r2,-1
 800e9b8:	18c01014 	ori	r3,r3,64
 800e9bc:	88c0030d 	sth	r3,12(r17)
 800e9c0:	003fdf06 	br	800e940 <__alt_data_end+0xfc00e940>
 800e9c4:	0005883a 	mov	r2,zero
 800e9c8:	003fec06 	br	800e97c <__alt_data_end+0xfc00e97c>
 800e9cc:	88801415 	stw	r2,80(r17)
 800e9d0:	003fd206 	br	800e91c <__alt_data_end+0xfc00e91c>
 800e9d4:	28c00f17 	ldw	r3,60(r5)
 800e9d8:	00ffb316 	blt	zero,r3,800e8a8 <__alt_data_end+0xfc00e8a8>
 800e9dc:	003fd706 	br	800e93c <__alt_data_end+0xfc00e93c>
 800e9e0:	89400717 	ldw	r5,28(r17)
 800e9e4:	000d883a 	mov	r6,zero
 800e9e8:	01c00044 	movi	r7,1
 800e9ec:	9809883a 	mov	r4,r19
 800e9f0:	403ee83a 	callr	r8
 800e9f4:	100d883a 	mov	r6,r2
 800e9f8:	00bfffc4 	movi	r2,-1
 800e9fc:	30801426 	beq	r6,r2,800ea50 <__sflush_r+0x1e4>
 800ea00:	8880030b 	ldhu	r2,12(r17)
 800ea04:	8a000a17 	ldw	r8,40(r17)
 800ea08:	003fae06 	br	800e8c4 <__alt_data_end+0xfc00e8c4>
 800ea0c:	98c00017 	ldw	r3,0(r19)
 800ea10:	183fba26 	beq	r3,zero,800e8fc <__alt_data_end+0xfc00e8fc>
 800ea14:	01000744 	movi	r4,29
 800ea18:	19000626 	beq	r3,r4,800ea34 <__sflush_r+0x1c8>
 800ea1c:	01000584 	movi	r4,22
 800ea20:	19000426 	beq	r3,r4,800ea34 <__sflush_r+0x1c8>
 800ea24:	88c0030b 	ldhu	r3,12(r17)
 800ea28:	18c01014 	ori	r3,r3,64
 800ea2c:	88c0030d 	sth	r3,12(r17)
 800ea30:	003fc306 	br	800e940 <__alt_data_end+0xfc00e940>
 800ea34:	8880030b 	ldhu	r2,12(r17)
 800ea38:	88c00417 	ldw	r3,16(r17)
 800ea3c:	88000115 	stw	zero,4(r17)
 800ea40:	10bdffcc 	andi	r2,r2,63487
 800ea44:	8880030d 	sth	r2,12(r17)
 800ea48:	88c00015 	stw	r3,0(r17)
 800ea4c:	003fb306 	br	800e91c <__alt_data_end+0xfc00e91c>
 800ea50:	98800017 	ldw	r2,0(r19)
 800ea54:	103fea26 	beq	r2,zero,800ea00 <__alt_data_end+0xfc00ea00>
 800ea58:	00c00744 	movi	r3,29
 800ea5c:	10c00226 	beq	r2,r3,800ea68 <__sflush_r+0x1fc>
 800ea60:	00c00584 	movi	r3,22
 800ea64:	10c0031e 	bne	r2,r3,800ea74 <__sflush_r+0x208>
 800ea68:	9c000015 	stw	r16,0(r19)
 800ea6c:	0005883a 	mov	r2,zero
 800ea70:	003fb306 	br	800e940 <__alt_data_end+0xfc00e940>
 800ea74:	88c0030b 	ldhu	r3,12(r17)
 800ea78:	3005883a 	mov	r2,r6
 800ea7c:	18c01014 	ori	r3,r3,64
 800ea80:	88c0030d 	sth	r3,12(r17)
 800ea84:	003fae06 	br	800e940 <__alt_data_end+0xfc00e940>

0800ea88 <_fflush_r>:
 800ea88:	defffd04 	addi	sp,sp,-12
 800ea8c:	dc000115 	stw	r16,4(sp)
 800ea90:	dfc00215 	stw	ra,8(sp)
 800ea94:	2021883a 	mov	r16,r4
 800ea98:	20000226 	beq	r4,zero,800eaa4 <_fflush_r+0x1c>
 800ea9c:	20800e17 	ldw	r2,56(r4)
 800eaa0:	10000c26 	beq	r2,zero,800ead4 <_fflush_r+0x4c>
 800eaa4:	2880030f 	ldh	r2,12(r5)
 800eaa8:	1000051e 	bne	r2,zero,800eac0 <_fflush_r+0x38>
 800eaac:	0005883a 	mov	r2,zero
 800eab0:	dfc00217 	ldw	ra,8(sp)
 800eab4:	dc000117 	ldw	r16,4(sp)
 800eab8:	dec00304 	addi	sp,sp,12
 800eabc:	f800283a 	ret
 800eac0:	8009883a 	mov	r4,r16
 800eac4:	dfc00217 	ldw	ra,8(sp)
 800eac8:	dc000117 	ldw	r16,4(sp)
 800eacc:	dec00304 	addi	sp,sp,12
 800ead0:	800e86c1 	jmpi	800e86c <__sflush_r>
 800ead4:	d9400015 	stw	r5,0(sp)
 800ead8:	800ee740 	call	800ee74 <__sinit>
 800eadc:	d9400017 	ldw	r5,0(sp)
 800eae0:	003ff006 	br	800eaa4 <__alt_data_end+0xfc00eaa4>

0800eae4 <fflush>:
 800eae4:	20000526 	beq	r4,zero,800eafc <fflush+0x18>
 800eae8:	00821974 	movhi	r2,2149
 800eaec:	10be7904 	addi	r2,r2,-1564
 800eaf0:	200b883a 	mov	r5,r4
 800eaf4:	11000017 	ldw	r4,0(r2)
 800eaf8:	800ea881 	jmpi	800ea88 <_fflush_r>
 800eafc:	00821974 	movhi	r2,2149
 800eb00:	10be7804 	addi	r2,r2,-1568
 800eb04:	11000017 	ldw	r4,0(r2)
 800eb08:	01420074 	movhi	r5,2049
 800eb0c:	297aa204 	addi	r5,r5,-5496
 800eb10:	800f8841 	jmpi	800f884 <_fwalk_reent>

0800eb14 <__fp_unlock>:
 800eb14:	0005883a 	mov	r2,zero
 800eb18:	f800283a 	ret

0800eb1c <_cleanup_r>:
 800eb1c:	01420074 	movhi	r5,2049
 800eb20:	294dec04 	addi	r5,r5,14256
 800eb24:	800f8841 	jmpi	800f884 <_fwalk_reent>

0800eb28 <__sinit.part.1>:
 800eb28:	defff704 	addi	sp,sp,-36
 800eb2c:	00c20074 	movhi	r3,2049
 800eb30:	dfc00815 	stw	ra,32(sp)
 800eb34:	ddc00715 	stw	r23,28(sp)
 800eb38:	dd800615 	stw	r22,24(sp)
 800eb3c:	dd400515 	stw	r21,20(sp)
 800eb40:	dd000415 	stw	r20,16(sp)
 800eb44:	dcc00315 	stw	r19,12(sp)
 800eb48:	dc800215 	stw	r18,8(sp)
 800eb4c:	dc400115 	stw	r17,4(sp)
 800eb50:	dc000015 	stw	r16,0(sp)
 800eb54:	18fac704 	addi	r3,r3,-5348
 800eb58:	24000117 	ldw	r16,4(r4)
 800eb5c:	20c00f15 	stw	r3,60(r4)
 800eb60:	2080bb04 	addi	r2,r4,748
 800eb64:	00c000c4 	movi	r3,3
 800eb68:	20c0b915 	stw	r3,740(r4)
 800eb6c:	2080ba15 	stw	r2,744(r4)
 800eb70:	2000b815 	stw	zero,736(r4)
 800eb74:	05c00204 	movi	r23,8
 800eb78:	00800104 	movi	r2,4
 800eb7c:	2025883a 	mov	r18,r4
 800eb80:	b80d883a 	mov	r6,r23
 800eb84:	81001704 	addi	r4,r16,92
 800eb88:	000b883a 	mov	r5,zero
 800eb8c:	80000015 	stw	zero,0(r16)
 800eb90:	80000115 	stw	zero,4(r16)
 800eb94:	80000215 	stw	zero,8(r16)
 800eb98:	8080030d 	sth	r2,12(r16)
 800eb9c:	80001915 	stw	zero,100(r16)
 800eba0:	8000038d 	sth	zero,14(r16)
 800eba4:	80000415 	stw	zero,16(r16)
 800eba8:	80000515 	stw	zero,20(r16)
 800ebac:	80000615 	stw	zero,24(r16)
 800ebb0:	800a7380 	call	800a738 <memset>
 800ebb4:	05820074 	movhi	r22,2049
 800ebb8:	94400217 	ldw	r17,8(r18)
 800ebbc:	05420074 	movhi	r21,2049
 800ebc0:	05020074 	movhi	r20,2049
 800ebc4:	04c20074 	movhi	r19,2049
 800ebc8:	b5874404 	addi	r22,r22,7440
 800ebcc:	ad475b04 	addi	r21,r21,7532
 800ebd0:	a5077a04 	addi	r20,r20,7656
 800ebd4:	9cc79104 	addi	r19,r19,7748
 800ebd8:	85800815 	stw	r22,32(r16)
 800ebdc:	85400915 	stw	r21,36(r16)
 800ebe0:	85000a15 	stw	r20,40(r16)
 800ebe4:	84c00b15 	stw	r19,44(r16)
 800ebe8:	84000715 	stw	r16,28(r16)
 800ebec:	00800284 	movi	r2,10
 800ebf0:	8880030d 	sth	r2,12(r17)
 800ebf4:	00800044 	movi	r2,1
 800ebf8:	b80d883a 	mov	r6,r23
 800ebfc:	89001704 	addi	r4,r17,92
 800ec00:	000b883a 	mov	r5,zero
 800ec04:	88000015 	stw	zero,0(r17)
 800ec08:	88000115 	stw	zero,4(r17)
 800ec0c:	88000215 	stw	zero,8(r17)
 800ec10:	88001915 	stw	zero,100(r17)
 800ec14:	8880038d 	sth	r2,14(r17)
 800ec18:	88000415 	stw	zero,16(r17)
 800ec1c:	88000515 	stw	zero,20(r17)
 800ec20:	88000615 	stw	zero,24(r17)
 800ec24:	800a7380 	call	800a738 <memset>
 800ec28:	94000317 	ldw	r16,12(r18)
 800ec2c:	00800484 	movi	r2,18
 800ec30:	8c400715 	stw	r17,28(r17)
 800ec34:	8d800815 	stw	r22,32(r17)
 800ec38:	8d400915 	stw	r21,36(r17)
 800ec3c:	8d000a15 	stw	r20,40(r17)
 800ec40:	8cc00b15 	stw	r19,44(r17)
 800ec44:	8080030d 	sth	r2,12(r16)
 800ec48:	00800084 	movi	r2,2
 800ec4c:	80000015 	stw	zero,0(r16)
 800ec50:	80000115 	stw	zero,4(r16)
 800ec54:	80000215 	stw	zero,8(r16)
 800ec58:	80001915 	stw	zero,100(r16)
 800ec5c:	8080038d 	sth	r2,14(r16)
 800ec60:	80000415 	stw	zero,16(r16)
 800ec64:	80000515 	stw	zero,20(r16)
 800ec68:	80000615 	stw	zero,24(r16)
 800ec6c:	b80d883a 	mov	r6,r23
 800ec70:	000b883a 	mov	r5,zero
 800ec74:	81001704 	addi	r4,r16,92
 800ec78:	800a7380 	call	800a738 <memset>
 800ec7c:	00800044 	movi	r2,1
 800ec80:	84000715 	stw	r16,28(r16)
 800ec84:	85800815 	stw	r22,32(r16)
 800ec88:	85400915 	stw	r21,36(r16)
 800ec8c:	85000a15 	stw	r20,40(r16)
 800ec90:	84c00b15 	stw	r19,44(r16)
 800ec94:	90800e15 	stw	r2,56(r18)
 800ec98:	dfc00817 	ldw	ra,32(sp)
 800ec9c:	ddc00717 	ldw	r23,28(sp)
 800eca0:	dd800617 	ldw	r22,24(sp)
 800eca4:	dd400517 	ldw	r21,20(sp)
 800eca8:	dd000417 	ldw	r20,16(sp)
 800ecac:	dcc00317 	ldw	r19,12(sp)
 800ecb0:	dc800217 	ldw	r18,8(sp)
 800ecb4:	dc400117 	ldw	r17,4(sp)
 800ecb8:	dc000017 	ldw	r16,0(sp)
 800ecbc:	dec00904 	addi	sp,sp,36
 800ecc0:	f800283a 	ret

0800ecc4 <__fp_lock>:
 800ecc4:	0005883a 	mov	r2,zero
 800ecc8:	f800283a 	ret

0800eccc <__sfmoreglue>:
 800eccc:	defffc04 	addi	sp,sp,-16
 800ecd0:	dc800215 	stw	r18,8(sp)
 800ecd4:	2825883a 	mov	r18,r5
 800ecd8:	dc000015 	stw	r16,0(sp)
 800ecdc:	01401a04 	movi	r5,104
 800ece0:	2021883a 	mov	r16,r4
 800ece4:	913fffc4 	addi	r4,r18,-1
 800ece8:	dfc00315 	stw	ra,12(sp)
 800ecec:	dc400115 	stw	r17,4(sp)
 800ecf0:	80071600 	call	8007160 <__mulsi3>
 800ecf4:	8009883a 	mov	r4,r16
 800ecf8:	11401d04 	addi	r5,r2,116
 800ecfc:	1023883a 	mov	r17,r2
 800ed00:	800fbe00 	call	800fbe0 <_malloc_r>
 800ed04:	1021883a 	mov	r16,r2
 800ed08:	10000726 	beq	r2,zero,800ed28 <__sfmoreglue+0x5c>
 800ed0c:	11000304 	addi	r4,r2,12
 800ed10:	10000015 	stw	zero,0(r2)
 800ed14:	14800115 	stw	r18,4(r2)
 800ed18:	11000215 	stw	r4,8(r2)
 800ed1c:	89801a04 	addi	r6,r17,104
 800ed20:	000b883a 	mov	r5,zero
 800ed24:	800a7380 	call	800a738 <memset>
 800ed28:	8005883a 	mov	r2,r16
 800ed2c:	dfc00317 	ldw	ra,12(sp)
 800ed30:	dc800217 	ldw	r18,8(sp)
 800ed34:	dc400117 	ldw	r17,4(sp)
 800ed38:	dc000017 	ldw	r16,0(sp)
 800ed3c:	dec00404 	addi	sp,sp,16
 800ed40:	f800283a 	ret

0800ed44 <__sfp>:
 800ed44:	defffb04 	addi	sp,sp,-20
 800ed48:	dc000015 	stw	r16,0(sp)
 800ed4c:	04021974 	movhi	r16,2149
 800ed50:	843e7804 	addi	r16,r16,-1568
 800ed54:	dcc00315 	stw	r19,12(sp)
 800ed58:	2027883a 	mov	r19,r4
 800ed5c:	81000017 	ldw	r4,0(r16)
 800ed60:	dfc00415 	stw	ra,16(sp)
 800ed64:	dc800215 	stw	r18,8(sp)
 800ed68:	20800e17 	ldw	r2,56(r4)
 800ed6c:	dc400115 	stw	r17,4(sp)
 800ed70:	1000021e 	bne	r2,zero,800ed7c <__sfp+0x38>
 800ed74:	800eb280 	call	800eb28 <__sinit.part.1>
 800ed78:	81000017 	ldw	r4,0(r16)
 800ed7c:	2480b804 	addi	r18,r4,736
 800ed80:	047fffc4 	movi	r17,-1
 800ed84:	91000117 	ldw	r4,4(r18)
 800ed88:	94000217 	ldw	r16,8(r18)
 800ed8c:	213fffc4 	addi	r4,r4,-1
 800ed90:	20000a16 	blt	r4,zero,800edbc <__sfp+0x78>
 800ed94:	8080030f 	ldh	r2,12(r16)
 800ed98:	10000c26 	beq	r2,zero,800edcc <__sfp+0x88>
 800ed9c:	80c01d04 	addi	r3,r16,116
 800eda0:	00000206 	br	800edac <__sfp+0x68>
 800eda4:	18bfe60f 	ldh	r2,-104(r3)
 800eda8:	10000826 	beq	r2,zero,800edcc <__sfp+0x88>
 800edac:	213fffc4 	addi	r4,r4,-1
 800edb0:	1c3ffd04 	addi	r16,r3,-12
 800edb4:	18c01a04 	addi	r3,r3,104
 800edb8:	247ffa1e 	bne	r4,r17,800eda4 <__alt_data_end+0xfc00eda4>
 800edbc:	90800017 	ldw	r2,0(r18)
 800edc0:	10001d26 	beq	r2,zero,800ee38 <__sfp+0xf4>
 800edc4:	1025883a 	mov	r18,r2
 800edc8:	003fee06 	br	800ed84 <__alt_data_end+0xfc00ed84>
 800edcc:	00bfffc4 	movi	r2,-1
 800edd0:	8080038d 	sth	r2,14(r16)
 800edd4:	00800044 	movi	r2,1
 800edd8:	8080030d 	sth	r2,12(r16)
 800eddc:	80001915 	stw	zero,100(r16)
 800ede0:	80000015 	stw	zero,0(r16)
 800ede4:	80000215 	stw	zero,8(r16)
 800ede8:	80000115 	stw	zero,4(r16)
 800edec:	80000415 	stw	zero,16(r16)
 800edf0:	80000515 	stw	zero,20(r16)
 800edf4:	80000615 	stw	zero,24(r16)
 800edf8:	01800204 	movi	r6,8
 800edfc:	000b883a 	mov	r5,zero
 800ee00:	81001704 	addi	r4,r16,92
 800ee04:	800a7380 	call	800a738 <memset>
 800ee08:	8005883a 	mov	r2,r16
 800ee0c:	80000c15 	stw	zero,48(r16)
 800ee10:	80000d15 	stw	zero,52(r16)
 800ee14:	80001115 	stw	zero,68(r16)
 800ee18:	80001215 	stw	zero,72(r16)
 800ee1c:	dfc00417 	ldw	ra,16(sp)
 800ee20:	dcc00317 	ldw	r19,12(sp)
 800ee24:	dc800217 	ldw	r18,8(sp)
 800ee28:	dc400117 	ldw	r17,4(sp)
 800ee2c:	dc000017 	ldw	r16,0(sp)
 800ee30:	dec00504 	addi	sp,sp,20
 800ee34:	f800283a 	ret
 800ee38:	01400104 	movi	r5,4
 800ee3c:	9809883a 	mov	r4,r19
 800ee40:	800eccc0 	call	800eccc <__sfmoreglue>
 800ee44:	90800015 	stw	r2,0(r18)
 800ee48:	103fde1e 	bne	r2,zero,800edc4 <__alt_data_end+0xfc00edc4>
 800ee4c:	00800304 	movi	r2,12
 800ee50:	98800015 	stw	r2,0(r19)
 800ee54:	0005883a 	mov	r2,zero
 800ee58:	003ff006 	br	800ee1c <__alt_data_end+0xfc00ee1c>

0800ee5c <_cleanup>:
 800ee5c:	00821974 	movhi	r2,2149
 800ee60:	10be7804 	addi	r2,r2,-1568
 800ee64:	11000017 	ldw	r4,0(r2)
 800ee68:	01420074 	movhi	r5,2049
 800ee6c:	294dec04 	addi	r5,r5,14256
 800ee70:	800f8841 	jmpi	800f884 <_fwalk_reent>

0800ee74 <__sinit>:
 800ee74:	20800e17 	ldw	r2,56(r4)
 800ee78:	10000126 	beq	r2,zero,800ee80 <__sinit+0xc>
 800ee7c:	f800283a 	ret
 800ee80:	800eb281 	jmpi	800eb28 <__sinit.part.1>

0800ee84 <__sfp_lock_acquire>:
 800ee84:	f800283a 	ret

0800ee88 <__sfp_lock_release>:
 800ee88:	f800283a 	ret

0800ee8c <__sinit_lock_acquire>:
 800ee8c:	f800283a 	ret

0800ee90 <__sinit_lock_release>:
 800ee90:	f800283a 	ret

0800ee94 <__fp_lock_all>:
 800ee94:	00821974 	movhi	r2,2149
 800ee98:	10be7904 	addi	r2,r2,-1564
 800ee9c:	11000017 	ldw	r4,0(r2)
 800eea0:	01420074 	movhi	r5,2049
 800eea4:	297b3104 	addi	r5,r5,-4924
 800eea8:	800f7c01 	jmpi	800f7c0 <_fwalk>

0800eeac <__fp_unlock_all>:
 800eeac:	00821974 	movhi	r2,2149
 800eeb0:	10be7904 	addi	r2,r2,-1564
 800eeb4:	11000017 	ldw	r4,0(r2)
 800eeb8:	01420074 	movhi	r5,2049
 800eebc:	297ac504 	addi	r5,r5,-5356
 800eec0:	800f7c01 	jmpi	800f7c0 <_fwalk>

0800eec4 <_malloc_trim_r>:
 800eec4:	defffb04 	addi	sp,sp,-20
 800eec8:	dcc00315 	stw	r19,12(sp)
 800eecc:	04c21974 	movhi	r19,2149
 800eed0:	dc800215 	stw	r18,8(sp)
 800eed4:	dc400115 	stw	r17,4(sp)
 800eed8:	dc000015 	stw	r16,0(sp)
 800eedc:	dfc00415 	stw	ra,16(sp)
 800eee0:	2821883a 	mov	r16,r5
 800eee4:	9cf8ed04 	addi	r19,r19,-7244
 800eee8:	2025883a 	mov	r18,r4
 800eeec:	80158000 	call	8015800 <__malloc_lock>
 800eef0:	98800217 	ldw	r2,8(r19)
 800eef4:	14400117 	ldw	r17,4(r2)
 800eef8:	00bfff04 	movi	r2,-4
 800eefc:	88a2703a 	and	r17,r17,r2
 800ef00:	8c21c83a 	sub	r16,r17,r16
 800ef04:	8403fbc4 	addi	r16,r16,4079
 800ef08:	8020d33a 	srli	r16,r16,12
 800ef0c:	0083ffc4 	movi	r2,4095
 800ef10:	843fffc4 	addi	r16,r16,-1
 800ef14:	8020933a 	slli	r16,r16,12
 800ef18:	1400060e 	bge	r2,r16,800ef34 <_malloc_trim_r+0x70>
 800ef1c:	000b883a 	mov	r5,zero
 800ef20:	9009883a 	mov	r4,r18
 800ef24:	8011cbc0 	call	8011cbc <_sbrk_r>
 800ef28:	98c00217 	ldw	r3,8(r19)
 800ef2c:	1c47883a 	add	r3,r3,r17
 800ef30:	10c00a26 	beq	r2,r3,800ef5c <_malloc_trim_r+0x98>
 800ef34:	9009883a 	mov	r4,r18
 800ef38:	80158240 	call	8015824 <__malloc_unlock>
 800ef3c:	0005883a 	mov	r2,zero
 800ef40:	dfc00417 	ldw	ra,16(sp)
 800ef44:	dcc00317 	ldw	r19,12(sp)
 800ef48:	dc800217 	ldw	r18,8(sp)
 800ef4c:	dc400117 	ldw	r17,4(sp)
 800ef50:	dc000017 	ldw	r16,0(sp)
 800ef54:	dec00504 	addi	sp,sp,20
 800ef58:	f800283a 	ret
 800ef5c:	040bc83a 	sub	r5,zero,r16
 800ef60:	9009883a 	mov	r4,r18
 800ef64:	8011cbc0 	call	8011cbc <_sbrk_r>
 800ef68:	00ffffc4 	movi	r3,-1
 800ef6c:	10c00d26 	beq	r2,r3,800efa4 <_malloc_trim_r+0xe0>
 800ef70:	00c21e34 	movhi	r3,2168
 800ef74:	18f57504 	addi	r3,r3,-10796
 800ef78:	18800017 	ldw	r2,0(r3)
 800ef7c:	99000217 	ldw	r4,8(r19)
 800ef80:	8c23c83a 	sub	r17,r17,r16
 800ef84:	8c400054 	ori	r17,r17,1
 800ef88:	1421c83a 	sub	r16,r2,r16
 800ef8c:	24400115 	stw	r17,4(r4)
 800ef90:	9009883a 	mov	r4,r18
 800ef94:	1c000015 	stw	r16,0(r3)
 800ef98:	80158240 	call	8015824 <__malloc_unlock>
 800ef9c:	00800044 	movi	r2,1
 800efa0:	003fe706 	br	800ef40 <__alt_data_end+0xfc00ef40>
 800efa4:	000b883a 	mov	r5,zero
 800efa8:	9009883a 	mov	r4,r18
 800efac:	8011cbc0 	call	8011cbc <_sbrk_r>
 800efb0:	99000217 	ldw	r4,8(r19)
 800efb4:	014003c4 	movi	r5,15
 800efb8:	1107c83a 	sub	r3,r2,r4
 800efbc:	28ffdd0e 	bge	r5,r3,800ef34 <__alt_data_end+0xfc00ef34>
 800efc0:	01421974 	movhi	r5,2149
 800efc4:	297e7b04 	addi	r5,r5,-1556
 800efc8:	29400017 	ldw	r5,0(r5)
 800efcc:	18c00054 	ori	r3,r3,1
 800efd0:	20c00115 	stw	r3,4(r4)
 800efd4:	00c21e34 	movhi	r3,2168
 800efd8:	1145c83a 	sub	r2,r2,r5
 800efdc:	18f57504 	addi	r3,r3,-10796
 800efe0:	18800015 	stw	r2,0(r3)
 800efe4:	003fd306 	br	800ef34 <__alt_data_end+0xfc00ef34>

0800efe8 <_free_r>:
 800efe8:	28004126 	beq	r5,zero,800f0f0 <_free_r+0x108>
 800efec:	defffd04 	addi	sp,sp,-12
 800eff0:	dc400115 	stw	r17,4(sp)
 800eff4:	dc000015 	stw	r16,0(sp)
 800eff8:	2023883a 	mov	r17,r4
 800effc:	2821883a 	mov	r16,r5
 800f000:	dfc00215 	stw	ra,8(sp)
 800f004:	80158000 	call	8015800 <__malloc_lock>
 800f008:	81ffff17 	ldw	r7,-4(r16)
 800f00c:	00bfff84 	movi	r2,-2
 800f010:	01021974 	movhi	r4,2149
 800f014:	81bffe04 	addi	r6,r16,-8
 800f018:	3884703a 	and	r2,r7,r2
 800f01c:	2138ed04 	addi	r4,r4,-7244
 800f020:	308b883a 	add	r5,r6,r2
 800f024:	2a400117 	ldw	r9,4(r5)
 800f028:	22000217 	ldw	r8,8(r4)
 800f02c:	00ffff04 	movi	r3,-4
 800f030:	48c6703a 	and	r3,r9,r3
 800f034:	2a005726 	beq	r5,r8,800f194 <_free_r+0x1ac>
 800f038:	28c00115 	stw	r3,4(r5)
 800f03c:	39c0004c 	andi	r7,r7,1
 800f040:	3800091e 	bne	r7,zero,800f068 <_free_r+0x80>
 800f044:	823ffe17 	ldw	r8,-8(r16)
 800f048:	22400204 	addi	r9,r4,8
 800f04c:	320dc83a 	sub	r6,r6,r8
 800f050:	31c00217 	ldw	r7,8(r6)
 800f054:	1205883a 	add	r2,r2,r8
 800f058:	3a406526 	beq	r7,r9,800f1f0 <_free_r+0x208>
 800f05c:	32000317 	ldw	r8,12(r6)
 800f060:	3a000315 	stw	r8,12(r7)
 800f064:	41c00215 	stw	r7,8(r8)
 800f068:	28cf883a 	add	r7,r5,r3
 800f06c:	39c00117 	ldw	r7,4(r7)
 800f070:	39c0004c 	andi	r7,r7,1
 800f074:	38003a26 	beq	r7,zero,800f160 <_free_r+0x178>
 800f078:	10c00054 	ori	r3,r2,1
 800f07c:	30c00115 	stw	r3,4(r6)
 800f080:	3087883a 	add	r3,r6,r2
 800f084:	18800015 	stw	r2,0(r3)
 800f088:	00c07fc4 	movi	r3,511
 800f08c:	18801936 	bltu	r3,r2,800f0f4 <_free_r+0x10c>
 800f090:	1004d0fa 	srli	r2,r2,3
 800f094:	01c00044 	movi	r7,1
 800f098:	21400117 	ldw	r5,4(r4)
 800f09c:	10c00044 	addi	r3,r2,1
 800f0a0:	18c7883a 	add	r3,r3,r3
 800f0a4:	1005d0ba 	srai	r2,r2,2
 800f0a8:	18c7883a 	add	r3,r3,r3
 800f0ac:	18c7883a 	add	r3,r3,r3
 800f0b0:	1907883a 	add	r3,r3,r4
 800f0b4:	3884983a 	sll	r2,r7,r2
 800f0b8:	19c00017 	ldw	r7,0(r3)
 800f0bc:	1a3ffe04 	addi	r8,r3,-8
 800f0c0:	1144b03a 	or	r2,r2,r5
 800f0c4:	32000315 	stw	r8,12(r6)
 800f0c8:	31c00215 	stw	r7,8(r6)
 800f0cc:	20800115 	stw	r2,4(r4)
 800f0d0:	19800015 	stw	r6,0(r3)
 800f0d4:	39800315 	stw	r6,12(r7)
 800f0d8:	8809883a 	mov	r4,r17
 800f0dc:	dfc00217 	ldw	ra,8(sp)
 800f0e0:	dc400117 	ldw	r17,4(sp)
 800f0e4:	dc000017 	ldw	r16,0(sp)
 800f0e8:	dec00304 	addi	sp,sp,12
 800f0ec:	80158241 	jmpi	8015824 <__malloc_unlock>
 800f0f0:	f800283a 	ret
 800f0f4:	100ad27a 	srli	r5,r2,9
 800f0f8:	00c00104 	movi	r3,4
 800f0fc:	19404a36 	bltu	r3,r5,800f228 <_free_r+0x240>
 800f100:	100ad1ba 	srli	r5,r2,6
 800f104:	28c00e44 	addi	r3,r5,57
 800f108:	18c7883a 	add	r3,r3,r3
 800f10c:	29400e04 	addi	r5,r5,56
 800f110:	18c7883a 	add	r3,r3,r3
 800f114:	18c7883a 	add	r3,r3,r3
 800f118:	1909883a 	add	r4,r3,r4
 800f11c:	20c00017 	ldw	r3,0(r4)
 800f120:	01c21974 	movhi	r7,2149
 800f124:	213ffe04 	addi	r4,r4,-8
 800f128:	39f8ed04 	addi	r7,r7,-7244
 800f12c:	20c04426 	beq	r4,r3,800f240 <_free_r+0x258>
 800f130:	01ffff04 	movi	r7,-4
 800f134:	19400117 	ldw	r5,4(r3)
 800f138:	29ca703a 	and	r5,r5,r7
 800f13c:	1140022e 	bgeu	r2,r5,800f148 <_free_r+0x160>
 800f140:	18c00217 	ldw	r3,8(r3)
 800f144:	20fffb1e 	bne	r4,r3,800f134 <__alt_data_end+0xfc00f134>
 800f148:	19000317 	ldw	r4,12(r3)
 800f14c:	31000315 	stw	r4,12(r6)
 800f150:	30c00215 	stw	r3,8(r6)
 800f154:	21800215 	stw	r6,8(r4)
 800f158:	19800315 	stw	r6,12(r3)
 800f15c:	003fde06 	br	800f0d8 <__alt_data_end+0xfc00f0d8>
 800f160:	29c00217 	ldw	r7,8(r5)
 800f164:	10c5883a 	add	r2,r2,r3
 800f168:	00c21974 	movhi	r3,2149
 800f16c:	18f8ef04 	addi	r3,r3,-7236
 800f170:	38c03b26 	beq	r7,r3,800f260 <_free_r+0x278>
 800f174:	2a000317 	ldw	r8,12(r5)
 800f178:	11400054 	ori	r5,r2,1
 800f17c:	3087883a 	add	r3,r6,r2
 800f180:	3a000315 	stw	r8,12(r7)
 800f184:	41c00215 	stw	r7,8(r8)
 800f188:	31400115 	stw	r5,4(r6)
 800f18c:	18800015 	stw	r2,0(r3)
 800f190:	003fbd06 	br	800f088 <__alt_data_end+0xfc00f088>
 800f194:	39c0004c 	andi	r7,r7,1
 800f198:	10c5883a 	add	r2,r2,r3
 800f19c:	3800071e 	bne	r7,zero,800f1bc <_free_r+0x1d4>
 800f1a0:	81fffe17 	ldw	r7,-8(r16)
 800f1a4:	31cdc83a 	sub	r6,r6,r7
 800f1a8:	30c00317 	ldw	r3,12(r6)
 800f1ac:	31400217 	ldw	r5,8(r6)
 800f1b0:	11c5883a 	add	r2,r2,r7
 800f1b4:	28c00315 	stw	r3,12(r5)
 800f1b8:	19400215 	stw	r5,8(r3)
 800f1bc:	10c00054 	ori	r3,r2,1
 800f1c0:	30c00115 	stw	r3,4(r6)
 800f1c4:	00c21974 	movhi	r3,2149
 800f1c8:	18fe7c04 	addi	r3,r3,-1552
 800f1cc:	18c00017 	ldw	r3,0(r3)
 800f1d0:	21800215 	stw	r6,8(r4)
 800f1d4:	10ffc036 	bltu	r2,r3,800f0d8 <__alt_data_end+0xfc00f0d8>
 800f1d8:	00821974 	movhi	r2,2149
 800f1dc:	10856204 	addi	r2,r2,5512
 800f1e0:	11400017 	ldw	r5,0(r2)
 800f1e4:	8809883a 	mov	r4,r17
 800f1e8:	800eec40 	call	800eec4 <_malloc_trim_r>
 800f1ec:	003fba06 	br	800f0d8 <__alt_data_end+0xfc00f0d8>
 800f1f0:	28c9883a 	add	r4,r5,r3
 800f1f4:	21000117 	ldw	r4,4(r4)
 800f1f8:	2100004c 	andi	r4,r4,1
 800f1fc:	2000391e 	bne	r4,zero,800f2e4 <_free_r+0x2fc>
 800f200:	29c00217 	ldw	r7,8(r5)
 800f204:	29000317 	ldw	r4,12(r5)
 800f208:	1885883a 	add	r2,r3,r2
 800f20c:	10c00054 	ori	r3,r2,1
 800f210:	39000315 	stw	r4,12(r7)
 800f214:	21c00215 	stw	r7,8(r4)
 800f218:	30c00115 	stw	r3,4(r6)
 800f21c:	308d883a 	add	r6,r6,r2
 800f220:	30800015 	stw	r2,0(r6)
 800f224:	003fac06 	br	800f0d8 <__alt_data_end+0xfc00f0d8>
 800f228:	00c00504 	movi	r3,20
 800f22c:	19401536 	bltu	r3,r5,800f284 <_free_r+0x29c>
 800f230:	28c01704 	addi	r3,r5,92
 800f234:	18c7883a 	add	r3,r3,r3
 800f238:	294016c4 	addi	r5,r5,91
 800f23c:	003fb406 	br	800f110 <__alt_data_end+0xfc00f110>
 800f240:	280bd0ba 	srai	r5,r5,2
 800f244:	00c00044 	movi	r3,1
 800f248:	38800117 	ldw	r2,4(r7)
 800f24c:	194a983a 	sll	r5,r3,r5
 800f250:	2007883a 	mov	r3,r4
 800f254:	2884b03a 	or	r2,r5,r2
 800f258:	38800115 	stw	r2,4(r7)
 800f25c:	003fbb06 	br	800f14c <__alt_data_end+0xfc00f14c>
 800f260:	21800515 	stw	r6,20(r4)
 800f264:	21800415 	stw	r6,16(r4)
 800f268:	10c00054 	ori	r3,r2,1
 800f26c:	31c00315 	stw	r7,12(r6)
 800f270:	31c00215 	stw	r7,8(r6)
 800f274:	30c00115 	stw	r3,4(r6)
 800f278:	308d883a 	add	r6,r6,r2
 800f27c:	30800015 	stw	r2,0(r6)
 800f280:	003f9506 	br	800f0d8 <__alt_data_end+0xfc00f0d8>
 800f284:	00c01504 	movi	r3,84
 800f288:	19400536 	bltu	r3,r5,800f2a0 <_free_r+0x2b8>
 800f28c:	100ad33a 	srli	r5,r2,12
 800f290:	28c01bc4 	addi	r3,r5,111
 800f294:	18c7883a 	add	r3,r3,r3
 800f298:	29401b84 	addi	r5,r5,110
 800f29c:	003f9c06 	br	800f110 <__alt_data_end+0xfc00f110>
 800f2a0:	00c05504 	movi	r3,340
 800f2a4:	19400536 	bltu	r3,r5,800f2bc <_free_r+0x2d4>
 800f2a8:	100ad3fa 	srli	r5,r2,15
 800f2ac:	28c01e04 	addi	r3,r5,120
 800f2b0:	18c7883a 	add	r3,r3,r3
 800f2b4:	29401dc4 	addi	r5,r5,119
 800f2b8:	003f9506 	br	800f110 <__alt_data_end+0xfc00f110>
 800f2bc:	00c15504 	movi	r3,1364
 800f2c0:	19400536 	bltu	r3,r5,800f2d8 <_free_r+0x2f0>
 800f2c4:	100ad4ba 	srli	r5,r2,18
 800f2c8:	28c01f44 	addi	r3,r5,125
 800f2cc:	18c7883a 	add	r3,r3,r3
 800f2d0:	29401f04 	addi	r5,r5,124
 800f2d4:	003f8e06 	br	800f110 <__alt_data_end+0xfc00f110>
 800f2d8:	00c03f84 	movi	r3,254
 800f2dc:	01401f84 	movi	r5,126
 800f2e0:	003f8b06 	br	800f110 <__alt_data_end+0xfc00f110>
 800f2e4:	10c00054 	ori	r3,r2,1
 800f2e8:	30c00115 	stw	r3,4(r6)
 800f2ec:	308d883a 	add	r6,r6,r2
 800f2f0:	30800015 	stw	r2,0(r6)
 800f2f4:	003f7806 	br	800f0d8 <__alt_data_end+0xfc00f0d8>

0800f2f8 <__sfvwrite_r>:
 800f2f8:	30800217 	ldw	r2,8(r6)
 800f2fc:	10006726 	beq	r2,zero,800f49c <__sfvwrite_r+0x1a4>
 800f300:	28c0030b 	ldhu	r3,12(r5)
 800f304:	defff404 	addi	sp,sp,-48
 800f308:	dd400715 	stw	r21,28(sp)
 800f30c:	dd000615 	stw	r20,24(sp)
 800f310:	dc000215 	stw	r16,8(sp)
 800f314:	dfc00b15 	stw	ra,44(sp)
 800f318:	df000a15 	stw	fp,40(sp)
 800f31c:	ddc00915 	stw	r23,36(sp)
 800f320:	dd800815 	stw	r22,32(sp)
 800f324:	dcc00515 	stw	r19,20(sp)
 800f328:	dc800415 	stw	r18,16(sp)
 800f32c:	dc400315 	stw	r17,12(sp)
 800f330:	1880020c 	andi	r2,r3,8
 800f334:	2821883a 	mov	r16,r5
 800f338:	202b883a 	mov	r21,r4
 800f33c:	3029883a 	mov	r20,r6
 800f340:	10002726 	beq	r2,zero,800f3e0 <__sfvwrite_r+0xe8>
 800f344:	28800417 	ldw	r2,16(r5)
 800f348:	10002526 	beq	r2,zero,800f3e0 <__sfvwrite_r+0xe8>
 800f34c:	1880008c 	andi	r2,r3,2
 800f350:	a4400017 	ldw	r17,0(r20)
 800f354:	10002a26 	beq	r2,zero,800f400 <__sfvwrite_r+0x108>
 800f358:	05a00034 	movhi	r22,32768
 800f35c:	0027883a 	mov	r19,zero
 800f360:	0025883a 	mov	r18,zero
 800f364:	b5bf0004 	addi	r22,r22,-1024
 800f368:	980d883a 	mov	r6,r19
 800f36c:	a809883a 	mov	r4,r21
 800f370:	90004626 	beq	r18,zero,800f48c <__sfvwrite_r+0x194>
 800f374:	900f883a 	mov	r7,r18
 800f378:	b480022e 	bgeu	r22,r18,800f384 <__sfvwrite_r+0x8c>
 800f37c:	01e00034 	movhi	r7,32768
 800f380:	39ff0004 	addi	r7,r7,-1024
 800f384:	80800917 	ldw	r2,36(r16)
 800f388:	81400717 	ldw	r5,28(r16)
 800f38c:	103ee83a 	callr	r2
 800f390:	00805a0e 	bge	zero,r2,800f4fc <__sfvwrite_r+0x204>
 800f394:	a0c00217 	ldw	r3,8(r20)
 800f398:	98a7883a 	add	r19,r19,r2
 800f39c:	90a5c83a 	sub	r18,r18,r2
 800f3a0:	1885c83a 	sub	r2,r3,r2
 800f3a4:	a0800215 	stw	r2,8(r20)
 800f3a8:	103fef1e 	bne	r2,zero,800f368 <__alt_data_end+0xfc00f368>
 800f3ac:	0005883a 	mov	r2,zero
 800f3b0:	dfc00b17 	ldw	ra,44(sp)
 800f3b4:	df000a17 	ldw	fp,40(sp)
 800f3b8:	ddc00917 	ldw	r23,36(sp)
 800f3bc:	dd800817 	ldw	r22,32(sp)
 800f3c0:	dd400717 	ldw	r21,28(sp)
 800f3c4:	dd000617 	ldw	r20,24(sp)
 800f3c8:	dcc00517 	ldw	r19,20(sp)
 800f3cc:	dc800417 	ldw	r18,16(sp)
 800f3d0:	dc400317 	ldw	r17,12(sp)
 800f3d4:	dc000217 	ldw	r16,8(sp)
 800f3d8:	dec00c04 	addi	sp,sp,48
 800f3dc:	f800283a 	ret
 800f3e0:	800b883a 	mov	r5,r16
 800f3e4:	a809883a 	mov	r4,r21
 800f3e8:	800ce680 	call	800ce68 <__swsetup_r>
 800f3ec:	1000ee1e 	bne	r2,zero,800f7a8 <__sfvwrite_r+0x4b0>
 800f3f0:	80c0030b 	ldhu	r3,12(r16)
 800f3f4:	a4400017 	ldw	r17,0(r20)
 800f3f8:	1880008c 	andi	r2,r3,2
 800f3fc:	103fd61e 	bne	r2,zero,800f358 <__alt_data_end+0xfc00f358>
 800f400:	1880004c 	andi	r2,r3,1
 800f404:	1000421e 	bne	r2,zero,800f510 <__sfvwrite_r+0x218>
 800f408:	0039883a 	mov	fp,zero
 800f40c:	0025883a 	mov	r18,zero
 800f410:	90001a26 	beq	r18,zero,800f47c <__sfvwrite_r+0x184>
 800f414:	1880800c 	andi	r2,r3,512
 800f418:	84c00217 	ldw	r19,8(r16)
 800f41c:	10002126 	beq	r2,zero,800f4a4 <__sfvwrite_r+0x1ac>
 800f420:	982f883a 	mov	r23,r19
 800f424:	94c09636 	bltu	r18,r19,800f680 <__sfvwrite_r+0x388>
 800f428:	1881200c 	andi	r2,r3,1152
 800f42c:	1000a11e 	bne	r2,zero,800f6b4 <__sfvwrite_r+0x3bc>
 800f430:	81000017 	ldw	r4,0(r16)
 800f434:	b80d883a 	mov	r6,r23
 800f438:	e00b883a 	mov	r5,fp
 800f43c:	80104d00 	call	80104d0 <memmove>
 800f440:	80c00217 	ldw	r3,8(r16)
 800f444:	81000017 	ldw	r4,0(r16)
 800f448:	9005883a 	mov	r2,r18
 800f44c:	1ce7c83a 	sub	r19,r3,r19
 800f450:	25cf883a 	add	r7,r4,r23
 800f454:	84c00215 	stw	r19,8(r16)
 800f458:	81c00015 	stw	r7,0(r16)
 800f45c:	a0c00217 	ldw	r3,8(r20)
 800f460:	e0b9883a 	add	fp,fp,r2
 800f464:	90a5c83a 	sub	r18,r18,r2
 800f468:	18a7c83a 	sub	r19,r3,r2
 800f46c:	a4c00215 	stw	r19,8(r20)
 800f470:	983fce26 	beq	r19,zero,800f3ac <__alt_data_end+0xfc00f3ac>
 800f474:	80c0030b 	ldhu	r3,12(r16)
 800f478:	903fe61e 	bne	r18,zero,800f414 <__alt_data_end+0xfc00f414>
 800f47c:	8f000017 	ldw	fp,0(r17)
 800f480:	8c800117 	ldw	r18,4(r17)
 800f484:	8c400204 	addi	r17,r17,8
 800f488:	003fe106 	br	800f410 <__alt_data_end+0xfc00f410>
 800f48c:	8cc00017 	ldw	r19,0(r17)
 800f490:	8c800117 	ldw	r18,4(r17)
 800f494:	8c400204 	addi	r17,r17,8
 800f498:	003fb306 	br	800f368 <__alt_data_end+0xfc00f368>
 800f49c:	0005883a 	mov	r2,zero
 800f4a0:	f800283a 	ret
 800f4a4:	81000017 	ldw	r4,0(r16)
 800f4a8:	80800417 	ldw	r2,16(r16)
 800f4ac:	11005a36 	bltu	r2,r4,800f618 <__sfvwrite_r+0x320>
 800f4b0:	85c00517 	ldw	r23,20(r16)
 800f4b4:	95c05836 	bltu	r18,r23,800f618 <__sfvwrite_r+0x320>
 800f4b8:	00a00034 	movhi	r2,32768
 800f4bc:	10bfffc4 	addi	r2,r2,-1
 800f4c0:	9009883a 	mov	r4,r18
 800f4c4:	1480012e 	bgeu	r2,r18,800f4cc <__sfvwrite_r+0x1d4>
 800f4c8:	1009883a 	mov	r4,r2
 800f4cc:	b80b883a 	mov	r5,r23
 800f4d0:	8006fac0 	call	8006fac <__divsi3>
 800f4d4:	b80b883a 	mov	r5,r23
 800f4d8:	1009883a 	mov	r4,r2
 800f4dc:	80071600 	call	8007160 <__mulsi3>
 800f4e0:	81400717 	ldw	r5,28(r16)
 800f4e4:	80c00917 	ldw	r3,36(r16)
 800f4e8:	100f883a 	mov	r7,r2
 800f4ec:	e00d883a 	mov	r6,fp
 800f4f0:	a809883a 	mov	r4,r21
 800f4f4:	183ee83a 	callr	r3
 800f4f8:	00bfd816 	blt	zero,r2,800f45c <__alt_data_end+0xfc00f45c>
 800f4fc:	8080030b 	ldhu	r2,12(r16)
 800f500:	10801014 	ori	r2,r2,64
 800f504:	8080030d 	sth	r2,12(r16)
 800f508:	00bfffc4 	movi	r2,-1
 800f50c:	003fa806 	br	800f3b0 <__alt_data_end+0xfc00f3b0>
 800f510:	0027883a 	mov	r19,zero
 800f514:	0011883a 	mov	r8,zero
 800f518:	0039883a 	mov	fp,zero
 800f51c:	0025883a 	mov	r18,zero
 800f520:	90001f26 	beq	r18,zero,800f5a0 <__sfvwrite_r+0x2a8>
 800f524:	40005a26 	beq	r8,zero,800f690 <__sfvwrite_r+0x398>
 800f528:	982d883a 	mov	r22,r19
 800f52c:	94c0012e 	bgeu	r18,r19,800f534 <__sfvwrite_r+0x23c>
 800f530:	902d883a 	mov	r22,r18
 800f534:	81000017 	ldw	r4,0(r16)
 800f538:	80800417 	ldw	r2,16(r16)
 800f53c:	b02f883a 	mov	r23,r22
 800f540:	81c00517 	ldw	r7,20(r16)
 800f544:	1100032e 	bgeu	r2,r4,800f554 <__sfvwrite_r+0x25c>
 800f548:	80c00217 	ldw	r3,8(r16)
 800f54c:	38c7883a 	add	r3,r7,r3
 800f550:	1d801816 	blt	r3,r22,800f5b4 <__sfvwrite_r+0x2bc>
 800f554:	b1c03e16 	blt	r22,r7,800f650 <__sfvwrite_r+0x358>
 800f558:	80800917 	ldw	r2,36(r16)
 800f55c:	81400717 	ldw	r5,28(r16)
 800f560:	e00d883a 	mov	r6,fp
 800f564:	da000115 	stw	r8,4(sp)
 800f568:	a809883a 	mov	r4,r21
 800f56c:	103ee83a 	callr	r2
 800f570:	102f883a 	mov	r23,r2
 800f574:	da000117 	ldw	r8,4(sp)
 800f578:	00bfe00e 	bge	zero,r2,800f4fc <__alt_data_end+0xfc00f4fc>
 800f57c:	9de7c83a 	sub	r19,r19,r23
 800f580:	98001f26 	beq	r19,zero,800f600 <__sfvwrite_r+0x308>
 800f584:	a0800217 	ldw	r2,8(r20)
 800f588:	e5f9883a 	add	fp,fp,r23
 800f58c:	95e5c83a 	sub	r18,r18,r23
 800f590:	15efc83a 	sub	r23,r2,r23
 800f594:	a5c00215 	stw	r23,8(r20)
 800f598:	b83f8426 	beq	r23,zero,800f3ac <__alt_data_end+0xfc00f3ac>
 800f59c:	903fe11e 	bne	r18,zero,800f524 <__alt_data_end+0xfc00f524>
 800f5a0:	8f000017 	ldw	fp,0(r17)
 800f5a4:	8c800117 	ldw	r18,4(r17)
 800f5a8:	0011883a 	mov	r8,zero
 800f5ac:	8c400204 	addi	r17,r17,8
 800f5b0:	003fdb06 	br	800f520 <__alt_data_end+0xfc00f520>
 800f5b4:	180d883a 	mov	r6,r3
 800f5b8:	e00b883a 	mov	r5,fp
 800f5bc:	da000115 	stw	r8,4(sp)
 800f5c0:	d8c00015 	stw	r3,0(sp)
 800f5c4:	80104d00 	call	80104d0 <memmove>
 800f5c8:	d8c00017 	ldw	r3,0(sp)
 800f5cc:	80800017 	ldw	r2,0(r16)
 800f5d0:	800b883a 	mov	r5,r16
 800f5d4:	a809883a 	mov	r4,r21
 800f5d8:	10c5883a 	add	r2,r2,r3
 800f5dc:	80800015 	stw	r2,0(r16)
 800f5e0:	d8c00015 	stw	r3,0(sp)
 800f5e4:	800ea880 	call	800ea88 <_fflush_r>
 800f5e8:	d8c00017 	ldw	r3,0(sp)
 800f5ec:	da000117 	ldw	r8,4(sp)
 800f5f0:	103fc21e 	bne	r2,zero,800f4fc <__alt_data_end+0xfc00f4fc>
 800f5f4:	182f883a 	mov	r23,r3
 800f5f8:	9de7c83a 	sub	r19,r19,r23
 800f5fc:	983fe11e 	bne	r19,zero,800f584 <__alt_data_end+0xfc00f584>
 800f600:	800b883a 	mov	r5,r16
 800f604:	a809883a 	mov	r4,r21
 800f608:	800ea880 	call	800ea88 <_fflush_r>
 800f60c:	103fbb1e 	bne	r2,zero,800f4fc <__alt_data_end+0xfc00f4fc>
 800f610:	0011883a 	mov	r8,zero
 800f614:	003fdb06 	br	800f584 <__alt_data_end+0xfc00f584>
 800f618:	94c0012e 	bgeu	r18,r19,800f620 <__sfvwrite_r+0x328>
 800f61c:	9027883a 	mov	r19,r18
 800f620:	980d883a 	mov	r6,r19
 800f624:	e00b883a 	mov	r5,fp
 800f628:	80104d00 	call	80104d0 <memmove>
 800f62c:	80800217 	ldw	r2,8(r16)
 800f630:	80c00017 	ldw	r3,0(r16)
 800f634:	14c5c83a 	sub	r2,r2,r19
 800f638:	1cc7883a 	add	r3,r3,r19
 800f63c:	80800215 	stw	r2,8(r16)
 800f640:	80c00015 	stw	r3,0(r16)
 800f644:	10004326 	beq	r2,zero,800f754 <__sfvwrite_r+0x45c>
 800f648:	9805883a 	mov	r2,r19
 800f64c:	003f8306 	br	800f45c <__alt_data_end+0xfc00f45c>
 800f650:	b00d883a 	mov	r6,r22
 800f654:	e00b883a 	mov	r5,fp
 800f658:	da000115 	stw	r8,4(sp)
 800f65c:	80104d00 	call	80104d0 <memmove>
 800f660:	80800217 	ldw	r2,8(r16)
 800f664:	80c00017 	ldw	r3,0(r16)
 800f668:	da000117 	ldw	r8,4(sp)
 800f66c:	1585c83a 	sub	r2,r2,r22
 800f670:	1dad883a 	add	r22,r3,r22
 800f674:	80800215 	stw	r2,8(r16)
 800f678:	85800015 	stw	r22,0(r16)
 800f67c:	003fbf06 	br	800f57c <__alt_data_end+0xfc00f57c>
 800f680:	81000017 	ldw	r4,0(r16)
 800f684:	9027883a 	mov	r19,r18
 800f688:	902f883a 	mov	r23,r18
 800f68c:	003f6906 	br	800f434 <__alt_data_end+0xfc00f434>
 800f690:	900d883a 	mov	r6,r18
 800f694:	01400284 	movi	r5,10
 800f698:	e009883a 	mov	r4,fp
 800f69c:	80103ec0 	call	80103ec <memchr>
 800f6a0:	10003e26 	beq	r2,zero,800f79c <__sfvwrite_r+0x4a4>
 800f6a4:	10800044 	addi	r2,r2,1
 800f6a8:	1727c83a 	sub	r19,r2,fp
 800f6ac:	02000044 	movi	r8,1
 800f6b0:	003f9d06 	br	800f528 <__alt_data_end+0xfc00f528>
 800f6b4:	80800517 	ldw	r2,20(r16)
 800f6b8:	81400417 	ldw	r5,16(r16)
 800f6bc:	81c00017 	ldw	r7,0(r16)
 800f6c0:	10a7883a 	add	r19,r2,r2
 800f6c4:	9885883a 	add	r2,r19,r2
 800f6c8:	1026d7fa 	srli	r19,r2,31
 800f6cc:	396dc83a 	sub	r22,r7,r5
 800f6d0:	b1000044 	addi	r4,r22,1
 800f6d4:	9885883a 	add	r2,r19,r2
 800f6d8:	1027d07a 	srai	r19,r2,1
 800f6dc:	2485883a 	add	r2,r4,r18
 800f6e0:	980d883a 	mov	r6,r19
 800f6e4:	9880022e 	bgeu	r19,r2,800f6f0 <__sfvwrite_r+0x3f8>
 800f6e8:	1027883a 	mov	r19,r2
 800f6ec:	100d883a 	mov	r6,r2
 800f6f0:	18c1000c 	andi	r3,r3,1024
 800f6f4:	18001c26 	beq	r3,zero,800f768 <__sfvwrite_r+0x470>
 800f6f8:	300b883a 	mov	r5,r6
 800f6fc:	a809883a 	mov	r4,r21
 800f700:	800fbe00 	call	800fbe0 <_malloc_r>
 800f704:	102f883a 	mov	r23,r2
 800f708:	10002926 	beq	r2,zero,800f7b0 <__sfvwrite_r+0x4b8>
 800f70c:	81400417 	ldw	r5,16(r16)
 800f710:	b00d883a 	mov	r6,r22
 800f714:	1009883a 	mov	r4,r2
 800f718:	800a5f00 	call	800a5f0 <memcpy>
 800f71c:	8080030b 	ldhu	r2,12(r16)
 800f720:	00fedfc4 	movi	r3,-1153
 800f724:	10c4703a 	and	r2,r2,r3
 800f728:	10802014 	ori	r2,r2,128
 800f72c:	8080030d 	sth	r2,12(r16)
 800f730:	bd89883a 	add	r4,r23,r22
 800f734:	9d8fc83a 	sub	r7,r19,r22
 800f738:	85c00415 	stw	r23,16(r16)
 800f73c:	84c00515 	stw	r19,20(r16)
 800f740:	81000015 	stw	r4,0(r16)
 800f744:	9027883a 	mov	r19,r18
 800f748:	81c00215 	stw	r7,8(r16)
 800f74c:	902f883a 	mov	r23,r18
 800f750:	003f3806 	br	800f434 <__alt_data_end+0xfc00f434>
 800f754:	800b883a 	mov	r5,r16
 800f758:	a809883a 	mov	r4,r21
 800f75c:	800ea880 	call	800ea88 <_fflush_r>
 800f760:	103fb926 	beq	r2,zero,800f648 <__alt_data_end+0xfc00f648>
 800f764:	003f6506 	br	800f4fc <__alt_data_end+0xfc00f4fc>
 800f768:	a809883a 	mov	r4,r21
 800f76c:	80116e40 	call	80116e4 <_realloc_r>
 800f770:	102f883a 	mov	r23,r2
 800f774:	103fee1e 	bne	r2,zero,800f730 <__alt_data_end+0xfc00f730>
 800f778:	81400417 	ldw	r5,16(r16)
 800f77c:	a809883a 	mov	r4,r21
 800f780:	800efe80 	call	800efe8 <_free_r>
 800f784:	8080030b 	ldhu	r2,12(r16)
 800f788:	00ffdfc4 	movi	r3,-129
 800f78c:	1884703a 	and	r2,r3,r2
 800f790:	00c00304 	movi	r3,12
 800f794:	a8c00015 	stw	r3,0(r21)
 800f798:	003f5906 	br	800f500 <__alt_data_end+0xfc00f500>
 800f79c:	94c00044 	addi	r19,r18,1
 800f7a0:	02000044 	movi	r8,1
 800f7a4:	003f6006 	br	800f528 <__alt_data_end+0xfc00f528>
 800f7a8:	00bfffc4 	movi	r2,-1
 800f7ac:	003f0006 	br	800f3b0 <__alt_data_end+0xfc00f3b0>
 800f7b0:	00800304 	movi	r2,12
 800f7b4:	a8800015 	stw	r2,0(r21)
 800f7b8:	8080030b 	ldhu	r2,12(r16)
 800f7bc:	003f5006 	br	800f500 <__alt_data_end+0xfc00f500>

0800f7c0 <_fwalk>:
 800f7c0:	defff704 	addi	sp,sp,-36
 800f7c4:	dd000415 	stw	r20,16(sp)
 800f7c8:	dfc00815 	stw	ra,32(sp)
 800f7cc:	ddc00715 	stw	r23,28(sp)
 800f7d0:	dd800615 	stw	r22,24(sp)
 800f7d4:	dd400515 	stw	r21,20(sp)
 800f7d8:	dcc00315 	stw	r19,12(sp)
 800f7dc:	dc800215 	stw	r18,8(sp)
 800f7e0:	dc400115 	stw	r17,4(sp)
 800f7e4:	dc000015 	stw	r16,0(sp)
 800f7e8:	2500b804 	addi	r20,r4,736
 800f7ec:	a0002326 	beq	r20,zero,800f87c <_fwalk+0xbc>
 800f7f0:	282b883a 	mov	r21,r5
 800f7f4:	002f883a 	mov	r23,zero
 800f7f8:	05800044 	movi	r22,1
 800f7fc:	04ffffc4 	movi	r19,-1
 800f800:	a4400117 	ldw	r17,4(r20)
 800f804:	a4800217 	ldw	r18,8(r20)
 800f808:	8c7fffc4 	addi	r17,r17,-1
 800f80c:	88000d16 	blt	r17,zero,800f844 <_fwalk+0x84>
 800f810:	94000304 	addi	r16,r18,12
 800f814:	94800384 	addi	r18,r18,14
 800f818:	8080000b 	ldhu	r2,0(r16)
 800f81c:	8c7fffc4 	addi	r17,r17,-1
 800f820:	813ffd04 	addi	r4,r16,-12
 800f824:	b080042e 	bgeu	r22,r2,800f838 <_fwalk+0x78>
 800f828:	9080000f 	ldh	r2,0(r18)
 800f82c:	14c00226 	beq	r2,r19,800f838 <_fwalk+0x78>
 800f830:	a83ee83a 	callr	r21
 800f834:	b8aeb03a 	or	r23,r23,r2
 800f838:	84001a04 	addi	r16,r16,104
 800f83c:	94801a04 	addi	r18,r18,104
 800f840:	8cfff51e 	bne	r17,r19,800f818 <__alt_data_end+0xfc00f818>
 800f844:	a5000017 	ldw	r20,0(r20)
 800f848:	a03fed1e 	bne	r20,zero,800f800 <__alt_data_end+0xfc00f800>
 800f84c:	b805883a 	mov	r2,r23
 800f850:	dfc00817 	ldw	ra,32(sp)
 800f854:	ddc00717 	ldw	r23,28(sp)
 800f858:	dd800617 	ldw	r22,24(sp)
 800f85c:	dd400517 	ldw	r21,20(sp)
 800f860:	dd000417 	ldw	r20,16(sp)
 800f864:	dcc00317 	ldw	r19,12(sp)
 800f868:	dc800217 	ldw	r18,8(sp)
 800f86c:	dc400117 	ldw	r17,4(sp)
 800f870:	dc000017 	ldw	r16,0(sp)
 800f874:	dec00904 	addi	sp,sp,36
 800f878:	f800283a 	ret
 800f87c:	002f883a 	mov	r23,zero
 800f880:	003ff206 	br	800f84c <__alt_data_end+0xfc00f84c>

0800f884 <_fwalk_reent>:
 800f884:	defff704 	addi	sp,sp,-36
 800f888:	dd000415 	stw	r20,16(sp)
 800f88c:	dfc00815 	stw	ra,32(sp)
 800f890:	ddc00715 	stw	r23,28(sp)
 800f894:	dd800615 	stw	r22,24(sp)
 800f898:	dd400515 	stw	r21,20(sp)
 800f89c:	dcc00315 	stw	r19,12(sp)
 800f8a0:	dc800215 	stw	r18,8(sp)
 800f8a4:	dc400115 	stw	r17,4(sp)
 800f8a8:	dc000015 	stw	r16,0(sp)
 800f8ac:	2500b804 	addi	r20,r4,736
 800f8b0:	a0002326 	beq	r20,zero,800f940 <_fwalk_reent+0xbc>
 800f8b4:	282b883a 	mov	r21,r5
 800f8b8:	2027883a 	mov	r19,r4
 800f8bc:	002f883a 	mov	r23,zero
 800f8c0:	05800044 	movi	r22,1
 800f8c4:	04bfffc4 	movi	r18,-1
 800f8c8:	a4400117 	ldw	r17,4(r20)
 800f8cc:	a4000217 	ldw	r16,8(r20)
 800f8d0:	8c7fffc4 	addi	r17,r17,-1
 800f8d4:	88000c16 	blt	r17,zero,800f908 <_fwalk_reent+0x84>
 800f8d8:	84000304 	addi	r16,r16,12
 800f8dc:	8080000b 	ldhu	r2,0(r16)
 800f8e0:	8c7fffc4 	addi	r17,r17,-1
 800f8e4:	817ffd04 	addi	r5,r16,-12
 800f8e8:	b080052e 	bgeu	r22,r2,800f900 <_fwalk_reent+0x7c>
 800f8ec:	8080008f 	ldh	r2,2(r16)
 800f8f0:	9809883a 	mov	r4,r19
 800f8f4:	14800226 	beq	r2,r18,800f900 <_fwalk_reent+0x7c>
 800f8f8:	a83ee83a 	callr	r21
 800f8fc:	b8aeb03a 	or	r23,r23,r2
 800f900:	84001a04 	addi	r16,r16,104
 800f904:	8cbff51e 	bne	r17,r18,800f8dc <__alt_data_end+0xfc00f8dc>
 800f908:	a5000017 	ldw	r20,0(r20)
 800f90c:	a03fee1e 	bne	r20,zero,800f8c8 <__alt_data_end+0xfc00f8c8>
 800f910:	b805883a 	mov	r2,r23
 800f914:	dfc00817 	ldw	ra,32(sp)
 800f918:	ddc00717 	ldw	r23,28(sp)
 800f91c:	dd800617 	ldw	r22,24(sp)
 800f920:	dd400517 	ldw	r21,20(sp)
 800f924:	dd000417 	ldw	r20,16(sp)
 800f928:	dcc00317 	ldw	r19,12(sp)
 800f92c:	dc800217 	ldw	r18,8(sp)
 800f930:	dc400117 	ldw	r17,4(sp)
 800f934:	dc000017 	ldw	r16,0(sp)
 800f938:	dec00904 	addi	sp,sp,36
 800f93c:	f800283a 	ret
 800f940:	002f883a 	mov	r23,zero
 800f944:	003ff206 	br	800f910 <__alt_data_end+0xfc00f910>

0800f948 <_setlocale_r>:
 800f948:	30001b26 	beq	r6,zero,800f9b8 <_setlocale_r+0x70>
 800f94c:	01421974 	movhi	r5,2149
 800f950:	defffe04 	addi	sp,sp,-8
 800f954:	29775904 	addi	r5,r5,-8860
 800f958:	3009883a 	mov	r4,r6
 800f95c:	dc000015 	stw	r16,0(sp)
 800f960:	dfc00115 	stw	ra,4(sp)
 800f964:	3021883a 	mov	r16,r6
 800f968:	8011e4c0 	call	8011e4c <strcmp>
 800f96c:	1000061e 	bne	r2,zero,800f988 <_setlocale_r+0x40>
 800f970:	00821974 	movhi	r2,2149
 800f974:	10b75804 	addi	r2,r2,-8864
 800f978:	dfc00117 	ldw	ra,4(sp)
 800f97c:	dc000017 	ldw	r16,0(sp)
 800f980:	dec00204 	addi	sp,sp,8
 800f984:	f800283a 	ret
 800f988:	01421974 	movhi	r5,2149
 800f98c:	29775804 	addi	r5,r5,-8864
 800f990:	8009883a 	mov	r4,r16
 800f994:	8011e4c0 	call	8011e4c <strcmp>
 800f998:	103ff526 	beq	r2,zero,800f970 <__alt_data_end+0xfc00f970>
 800f99c:	01421974 	movhi	r5,2149
 800f9a0:	29774304 	addi	r5,r5,-8948
 800f9a4:	8009883a 	mov	r4,r16
 800f9a8:	8011e4c0 	call	8011e4c <strcmp>
 800f9ac:	103ff026 	beq	r2,zero,800f970 <__alt_data_end+0xfc00f970>
 800f9b0:	0005883a 	mov	r2,zero
 800f9b4:	003ff006 	br	800f978 <__alt_data_end+0xfc00f978>
 800f9b8:	00821974 	movhi	r2,2149
 800f9bc:	10b75804 	addi	r2,r2,-8864
 800f9c0:	f800283a 	ret

0800f9c4 <__locale_charset>:
 800f9c4:	00821974 	movhi	r2,2149
 800f9c8:	10b8d704 	addi	r2,r2,-7332
 800f9cc:	f800283a 	ret

0800f9d0 <__locale_mb_cur_max>:
 800f9d0:	00821974 	movhi	r2,2149
 800f9d4:	10be7a04 	addi	r2,r2,-1560
 800f9d8:	10800017 	ldw	r2,0(r2)
 800f9dc:	f800283a 	ret

0800f9e0 <__locale_msgcharset>:
 800f9e0:	00821974 	movhi	r2,2149
 800f9e4:	10b8cf04 	addi	r2,r2,-7364
 800f9e8:	f800283a 	ret

0800f9ec <__locale_cjk_lang>:
 800f9ec:	0005883a 	mov	r2,zero
 800f9f0:	f800283a 	ret

0800f9f4 <_localeconv_r>:
 800f9f4:	00821974 	movhi	r2,2149
 800f9f8:	10b8df04 	addi	r2,r2,-7300
 800f9fc:	f800283a 	ret

0800fa00 <setlocale>:
 800fa00:	00821974 	movhi	r2,2149
 800fa04:	10be7904 	addi	r2,r2,-1564
 800fa08:	280d883a 	mov	r6,r5
 800fa0c:	200b883a 	mov	r5,r4
 800fa10:	11000017 	ldw	r4,0(r2)
 800fa14:	800f9481 	jmpi	800f948 <_setlocale_r>

0800fa18 <localeconv>:
 800fa18:	00821974 	movhi	r2,2149
 800fa1c:	10b8df04 	addi	r2,r2,-7300
 800fa20:	f800283a 	ret

0800fa24 <__smakebuf_r>:
 800fa24:	2880030b 	ldhu	r2,12(r5)
 800fa28:	10c0008c 	andi	r3,r2,2
 800fa2c:	1800411e 	bne	r3,zero,800fb34 <__smakebuf_r+0x110>
 800fa30:	deffec04 	addi	sp,sp,-80
 800fa34:	dc000f15 	stw	r16,60(sp)
 800fa38:	2821883a 	mov	r16,r5
 800fa3c:	2940038f 	ldh	r5,14(r5)
 800fa40:	dc401015 	stw	r17,64(sp)
 800fa44:	dfc01315 	stw	ra,76(sp)
 800fa48:	dcc01215 	stw	r19,72(sp)
 800fa4c:	dc801115 	stw	r18,68(sp)
 800fa50:	2023883a 	mov	r17,r4
 800fa54:	28001c16 	blt	r5,zero,800fac8 <__smakebuf_r+0xa4>
 800fa58:	d80d883a 	mov	r6,sp
 800fa5c:	8013abc0 	call	8013abc <_fstat_r>
 800fa60:	10001816 	blt	r2,zero,800fac4 <__smakebuf_r+0xa0>
 800fa64:	d8800117 	ldw	r2,4(sp)
 800fa68:	00e00014 	movui	r3,32768
 800fa6c:	10bc000c 	andi	r2,r2,61440
 800fa70:	14c80020 	cmpeqi	r19,r2,8192
 800fa74:	10c03726 	beq	r2,r3,800fb54 <__smakebuf_r+0x130>
 800fa78:	80c0030b 	ldhu	r3,12(r16)
 800fa7c:	18c20014 	ori	r3,r3,2048
 800fa80:	80c0030d 	sth	r3,12(r16)
 800fa84:	00c80004 	movi	r3,8192
 800fa88:	10c0521e 	bne	r2,r3,800fbd4 <__smakebuf_r+0x1b0>
 800fa8c:	8140038f 	ldh	r5,14(r16)
 800fa90:	8809883a 	mov	r4,r17
 800fa94:	8013b180 	call	8013b18 <_isatty_r>
 800fa98:	10004c26 	beq	r2,zero,800fbcc <__smakebuf_r+0x1a8>
 800fa9c:	8080030b 	ldhu	r2,12(r16)
 800faa0:	80c010c4 	addi	r3,r16,67
 800faa4:	80c00015 	stw	r3,0(r16)
 800faa8:	10800054 	ori	r2,r2,1
 800faac:	8080030d 	sth	r2,12(r16)
 800fab0:	00800044 	movi	r2,1
 800fab4:	80c00415 	stw	r3,16(r16)
 800fab8:	80800515 	stw	r2,20(r16)
 800fabc:	04810004 	movi	r18,1024
 800fac0:	00000706 	br	800fae0 <__smakebuf_r+0xbc>
 800fac4:	8080030b 	ldhu	r2,12(r16)
 800fac8:	10c0200c 	andi	r3,r2,128
 800facc:	18001f1e 	bne	r3,zero,800fb4c <__smakebuf_r+0x128>
 800fad0:	04810004 	movi	r18,1024
 800fad4:	10820014 	ori	r2,r2,2048
 800fad8:	8080030d 	sth	r2,12(r16)
 800fadc:	0027883a 	mov	r19,zero
 800fae0:	900b883a 	mov	r5,r18
 800fae4:	8809883a 	mov	r4,r17
 800fae8:	800fbe00 	call	800fbe0 <_malloc_r>
 800faec:	10002c26 	beq	r2,zero,800fba0 <__smakebuf_r+0x17c>
 800faf0:	80c0030b 	ldhu	r3,12(r16)
 800faf4:	01020074 	movhi	r4,2049
 800faf8:	213ac704 	addi	r4,r4,-5348
 800fafc:	89000f15 	stw	r4,60(r17)
 800fb00:	18c02014 	ori	r3,r3,128
 800fb04:	80c0030d 	sth	r3,12(r16)
 800fb08:	80800015 	stw	r2,0(r16)
 800fb0c:	80800415 	stw	r2,16(r16)
 800fb10:	84800515 	stw	r18,20(r16)
 800fb14:	98001a1e 	bne	r19,zero,800fb80 <__smakebuf_r+0x15c>
 800fb18:	dfc01317 	ldw	ra,76(sp)
 800fb1c:	dcc01217 	ldw	r19,72(sp)
 800fb20:	dc801117 	ldw	r18,68(sp)
 800fb24:	dc401017 	ldw	r17,64(sp)
 800fb28:	dc000f17 	ldw	r16,60(sp)
 800fb2c:	dec01404 	addi	sp,sp,80
 800fb30:	f800283a 	ret
 800fb34:	288010c4 	addi	r2,r5,67
 800fb38:	28800015 	stw	r2,0(r5)
 800fb3c:	28800415 	stw	r2,16(r5)
 800fb40:	00800044 	movi	r2,1
 800fb44:	28800515 	stw	r2,20(r5)
 800fb48:	f800283a 	ret
 800fb4c:	04801004 	movi	r18,64
 800fb50:	003fe006 	br	800fad4 <__alt_data_end+0xfc00fad4>
 800fb54:	81000a17 	ldw	r4,40(r16)
 800fb58:	00c20074 	movhi	r3,2049
 800fb5c:	18c77a04 	addi	r3,r3,7656
 800fb60:	20ffc51e 	bne	r4,r3,800fa78 <__alt_data_end+0xfc00fa78>
 800fb64:	8080030b 	ldhu	r2,12(r16)
 800fb68:	04810004 	movi	r18,1024
 800fb6c:	84801315 	stw	r18,76(r16)
 800fb70:	1484b03a 	or	r2,r2,r18
 800fb74:	8080030d 	sth	r2,12(r16)
 800fb78:	0027883a 	mov	r19,zero
 800fb7c:	003fd806 	br	800fae0 <__alt_data_end+0xfc00fae0>
 800fb80:	8140038f 	ldh	r5,14(r16)
 800fb84:	8809883a 	mov	r4,r17
 800fb88:	8013b180 	call	8013b18 <_isatty_r>
 800fb8c:	103fe226 	beq	r2,zero,800fb18 <__alt_data_end+0xfc00fb18>
 800fb90:	8080030b 	ldhu	r2,12(r16)
 800fb94:	10800054 	ori	r2,r2,1
 800fb98:	8080030d 	sth	r2,12(r16)
 800fb9c:	003fde06 	br	800fb18 <__alt_data_end+0xfc00fb18>
 800fba0:	8080030b 	ldhu	r2,12(r16)
 800fba4:	10c0800c 	andi	r3,r2,512
 800fba8:	183fdb1e 	bne	r3,zero,800fb18 <__alt_data_end+0xfc00fb18>
 800fbac:	10800094 	ori	r2,r2,2
 800fbb0:	80c010c4 	addi	r3,r16,67
 800fbb4:	8080030d 	sth	r2,12(r16)
 800fbb8:	00800044 	movi	r2,1
 800fbbc:	80c00015 	stw	r3,0(r16)
 800fbc0:	80c00415 	stw	r3,16(r16)
 800fbc4:	80800515 	stw	r2,20(r16)
 800fbc8:	003fd306 	br	800fb18 <__alt_data_end+0xfc00fb18>
 800fbcc:	04810004 	movi	r18,1024
 800fbd0:	003fc306 	br	800fae0 <__alt_data_end+0xfc00fae0>
 800fbd4:	0027883a 	mov	r19,zero
 800fbd8:	04810004 	movi	r18,1024
 800fbdc:	003fc006 	br	800fae0 <__alt_data_end+0xfc00fae0>

0800fbe0 <_malloc_r>:
 800fbe0:	defff504 	addi	sp,sp,-44
 800fbe4:	dc800315 	stw	r18,12(sp)
 800fbe8:	dfc00a15 	stw	ra,40(sp)
 800fbec:	df000915 	stw	fp,36(sp)
 800fbf0:	ddc00815 	stw	r23,32(sp)
 800fbf4:	dd800715 	stw	r22,28(sp)
 800fbf8:	dd400615 	stw	r21,24(sp)
 800fbfc:	dd000515 	stw	r20,20(sp)
 800fc00:	dcc00415 	stw	r19,16(sp)
 800fc04:	dc400215 	stw	r17,8(sp)
 800fc08:	dc000115 	stw	r16,4(sp)
 800fc0c:	288002c4 	addi	r2,r5,11
 800fc10:	00c00584 	movi	r3,22
 800fc14:	2025883a 	mov	r18,r4
 800fc18:	18807f2e 	bgeu	r3,r2,800fe18 <_malloc_r+0x238>
 800fc1c:	047ffe04 	movi	r17,-8
 800fc20:	1462703a 	and	r17,r2,r17
 800fc24:	8800a316 	blt	r17,zero,800feb4 <_malloc_r+0x2d4>
 800fc28:	8940a236 	bltu	r17,r5,800feb4 <_malloc_r+0x2d4>
 800fc2c:	80158000 	call	8015800 <__malloc_lock>
 800fc30:	00807dc4 	movi	r2,503
 800fc34:	1441e92e 	bgeu	r2,r17,80103dc <_malloc_r+0x7fc>
 800fc38:	8804d27a 	srli	r2,r17,9
 800fc3c:	1000a126 	beq	r2,zero,800fec4 <_malloc_r+0x2e4>
 800fc40:	00c00104 	movi	r3,4
 800fc44:	18811e36 	bltu	r3,r2,80100c0 <_malloc_r+0x4e0>
 800fc48:	8804d1ba 	srli	r2,r17,6
 800fc4c:	12000e44 	addi	r8,r2,57
 800fc50:	11c00e04 	addi	r7,r2,56
 800fc54:	4209883a 	add	r4,r8,r8
 800fc58:	04c21974 	movhi	r19,2149
 800fc5c:	2109883a 	add	r4,r4,r4
 800fc60:	9cf8ed04 	addi	r19,r19,-7244
 800fc64:	2109883a 	add	r4,r4,r4
 800fc68:	9909883a 	add	r4,r19,r4
 800fc6c:	24000117 	ldw	r16,4(r4)
 800fc70:	213ffe04 	addi	r4,r4,-8
 800fc74:	24009726 	beq	r4,r16,800fed4 <_malloc_r+0x2f4>
 800fc78:	80800117 	ldw	r2,4(r16)
 800fc7c:	01bfff04 	movi	r6,-4
 800fc80:	014003c4 	movi	r5,15
 800fc84:	1184703a 	and	r2,r2,r6
 800fc88:	1447c83a 	sub	r3,r2,r17
 800fc8c:	28c00716 	blt	r5,r3,800fcac <_malloc_r+0xcc>
 800fc90:	1800920e 	bge	r3,zero,800fedc <_malloc_r+0x2fc>
 800fc94:	84000317 	ldw	r16,12(r16)
 800fc98:	24008e26 	beq	r4,r16,800fed4 <_malloc_r+0x2f4>
 800fc9c:	80800117 	ldw	r2,4(r16)
 800fca0:	1184703a 	and	r2,r2,r6
 800fca4:	1447c83a 	sub	r3,r2,r17
 800fca8:	28fff90e 	bge	r5,r3,800fc90 <__alt_data_end+0xfc00fc90>
 800fcac:	3809883a 	mov	r4,r7
 800fcb0:	01821974 	movhi	r6,2149
 800fcb4:	9c000417 	ldw	r16,16(r19)
 800fcb8:	31b8ed04 	addi	r6,r6,-7244
 800fcbc:	32000204 	addi	r8,r6,8
 800fcc0:	82013426 	beq	r16,r8,8010194 <_malloc_r+0x5b4>
 800fcc4:	80c00117 	ldw	r3,4(r16)
 800fcc8:	00bfff04 	movi	r2,-4
 800fccc:	188e703a 	and	r7,r3,r2
 800fcd0:	3c45c83a 	sub	r2,r7,r17
 800fcd4:	00c003c4 	movi	r3,15
 800fcd8:	18811f16 	blt	r3,r2,8010158 <_malloc_r+0x578>
 800fcdc:	32000515 	stw	r8,20(r6)
 800fce0:	32000415 	stw	r8,16(r6)
 800fce4:	10007f0e 	bge	r2,zero,800fee4 <_malloc_r+0x304>
 800fce8:	00807fc4 	movi	r2,511
 800fcec:	11c0fd36 	bltu	r2,r7,80100e4 <_malloc_r+0x504>
 800fcf0:	3806d0fa 	srli	r3,r7,3
 800fcf4:	01c00044 	movi	r7,1
 800fcf8:	30800117 	ldw	r2,4(r6)
 800fcfc:	19400044 	addi	r5,r3,1
 800fd00:	294b883a 	add	r5,r5,r5
 800fd04:	1807d0ba 	srai	r3,r3,2
 800fd08:	294b883a 	add	r5,r5,r5
 800fd0c:	294b883a 	add	r5,r5,r5
 800fd10:	298b883a 	add	r5,r5,r6
 800fd14:	38c6983a 	sll	r3,r7,r3
 800fd18:	29c00017 	ldw	r7,0(r5)
 800fd1c:	2a7ffe04 	addi	r9,r5,-8
 800fd20:	1886b03a 	or	r3,r3,r2
 800fd24:	82400315 	stw	r9,12(r16)
 800fd28:	81c00215 	stw	r7,8(r16)
 800fd2c:	30c00115 	stw	r3,4(r6)
 800fd30:	2c000015 	stw	r16,0(r5)
 800fd34:	3c000315 	stw	r16,12(r7)
 800fd38:	2005d0ba 	srai	r2,r4,2
 800fd3c:	01400044 	movi	r5,1
 800fd40:	288a983a 	sll	r5,r5,r2
 800fd44:	19406f36 	bltu	r3,r5,800ff04 <_malloc_r+0x324>
 800fd48:	28c4703a 	and	r2,r5,r3
 800fd4c:	10000a1e 	bne	r2,zero,800fd78 <_malloc_r+0x198>
 800fd50:	00bfff04 	movi	r2,-4
 800fd54:	294b883a 	add	r5,r5,r5
 800fd58:	2088703a 	and	r4,r4,r2
 800fd5c:	28c4703a 	and	r2,r5,r3
 800fd60:	21000104 	addi	r4,r4,4
 800fd64:	1000041e 	bne	r2,zero,800fd78 <_malloc_r+0x198>
 800fd68:	294b883a 	add	r5,r5,r5
 800fd6c:	28c4703a 	and	r2,r5,r3
 800fd70:	21000104 	addi	r4,r4,4
 800fd74:	103ffc26 	beq	r2,zero,800fd68 <__alt_data_end+0xfc00fd68>
 800fd78:	02bfff04 	movi	r10,-4
 800fd7c:	024003c4 	movi	r9,15
 800fd80:	21800044 	addi	r6,r4,1
 800fd84:	318d883a 	add	r6,r6,r6
 800fd88:	318d883a 	add	r6,r6,r6
 800fd8c:	318d883a 	add	r6,r6,r6
 800fd90:	998d883a 	add	r6,r19,r6
 800fd94:	333ffe04 	addi	r12,r6,-8
 800fd98:	2017883a 	mov	r11,r4
 800fd9c:	31800104 	addi	r6,r6,4
 800fda0:	34000017 	ldw	r16,0(r6)
 800fda4:	31fffd04 	addi	r7,r6,-12
 800fda8:	81c0041e 	bne	r16,r7,800fdbc <_malloc_r+0x1dc>
 800fdac:	0000fb06 	br	801019c <_malloc_r+0x5bc>
 800fdb0:	1801030e 	bge	r3,zero,80101c0 <_malloc_r+0x5e0>
 800fdb4:	84000317 	ldw	r16,12(r16)
 800fdb8:	81c0f826 	beq	r16,r7,801019c <_malloc_r+0x5bc>
 800fdbc:	80800117 	ldw	r2,4(r16)
 800fdc0:	1284703a 	and	r2,r2,r10
 800fdc4:	1447c83a 	sub	r3,r2,r17
 800fdc8:	48fff90e 	bge	r9,r3,800fdb0 <__alt_data_end+0xfc00fdb0>
 800fdcc:	80800317 	ldw	r2,12(r16)
 800fdd0:	81000217 	ldw	r4,8(r16)
 800fdd4:	89400054 	ori	r5,r17,1
 800fdd8:	81400115 	stw	r5,4(r16)
 800fddc:	20800315 	stw	r2,12(r4)
 800fde0:	11000215 	stw	r4,8(r2)
 800fde4:	8463883a 	add	r17,r16,r17
 800fde8:	9c400515 	stw	r17,20(r19)
 800fdec:	9c400415 	stw	r17,16(r19)
 800fdf0:	18800054 	ori	r2,r3,1
 800fdf4:	88800115 	stw	r2,4(r17)
 800fdf8:	8a000315 	stw	r8,12(r17)
 800fdfc:	8a000215 	stw	r8,8(r17)
 800fe00:	88e3883a 	add	r17,r17,r3
 800fe04:	88c00015 	stw	r3,0(r17)
 800fe08:	9009883a 	mov	r4,r18
 800fe0c:	80158240 	call	8015824 <__malloc_unlock>
 800fe10:	80800204 	addi	r2,r16,8
 800fe14:	00001b06 	br	800fe84 <_malloc_r+0x2a4>
 800fe18:	04400404 	movi	r17,16
 800fe1c:	89402536 	bltu	r17,r5,800feb4 <_malloc_r+0x2d4>
 800fe20:	80158000 	call	8015800 <__malloc_lock>
 800fe24:	00800184 	movi	r2,6
 800fe28:	01000084 	movi	r4,2
 800fe2c:	04c21974 	movhi	r19,2149
 800fe30:	1085883a 	add	r2,r2,r2
 800fe34:	9cf8ed04 	addi	r19,r19,-7244
 800fe38:	1085883a 	add	r2,r2,r2
 800fe3c:	9885883a 	add	r2,r19,r2
 800fe40:	14000117 	ldw	r16,4(r2)
 800fe44:	10fffe04 	addi	r3,r2,-8
 800fe48:	80c0d926 	beq	r16,r3,80101b0 <_malloc_r+0x5d0>
 800fe4c:	80c00117 	ldw	r3,4(r16)
 800fe50:	81000317 	ldw	r4,12(r16)
 800fe54:	00bfff04 	movi	r2,-4
 800fe58:	1884703a 	and	r2,r3,r2
 800fe5c:	81400217 	ldw	r5,8(r16)
 800fe60:	8085883a 	add	r2,r16,r2
 800fe64:	10c00117 	ldw	r3,4(r2)
 800fe68:	29000315 	stw	r4,12(r5)
 800fe6c:	21400215 	stw	r5,8(r4)
 800fe70:	18c00054 	ori	r3,r3,1
 800fe74:	10c00115 	stw	r3,4(r2)
 800fe78:	9009883a 	mov	r4,r18
 800fe7c:	80158240 	call	8015824 <__malloc_unlock>
 800fe80:	80800204 	addi	r2,r16,8
 800fe84:	dfc00a17 	ldw	ra,40(sp)
 800fe88:	df000917 	ldw	fp,36(sp)
 800fe8c:	ddc00817 	ldw	r23,32(sp)
 800fe90:	dd800717 	ldw	r22,28(sp)
 800fe94:	dd400617 	ldw	r21,24(sp)
 800fe98:	dd000517 	ldw	r20,20(sp)
 800fe9c:	dcc00417 	ldw	r19,16(sp)
 800fea0:	dc800317 	ldw	r18,12(sp)
 800fea4:	dc400217 	ldw	r17,8(sp)
 800fea8:	dc000117 	ldw	r16,4(sp)
 800feac:	dec00b04 	addi	sp,sp,44
 800feb0:	f800283a 	ret
 800feb4:	00800304 	movi	r2,12
 800feb8:	90800015 	stw	r2,0(r18)
 800febc:	0005883a 	mov	r2,zero
 800fec0:	003ff006 	br	800fe84 <__alt_data_end+0xfc00fe84>
 800fec4:	01002004 	movi	r4,128
 800fec8:	02001004 	movi	r8,64
 800fecc:	01c00fc4 	movi	r7,63
 800fed0:	003f6106 	br	800fc58 <__alt_data_end+0xfc00fc58>
 800fed4:	4009883a 	mov	r4,r8
 800fed8:	003f7506 	br	800fcb0 <__alt_data_end+0xfc00fcb0>
 800fedc:	81000317 	ldw	r4,12(r16)
 800fee0:	003fde06 	br	800fe5c <__alt_data_end+0xfc00fe5c>
 800fee4:	81c5883a 	add	r2,r16,r7
 800fee8:	11400117 	ldw	r5,4(r2)
 800feec:	9009883a 	mov	r4,r18
 800fef0:	29400054 	ori	r5,r5,1
 800fef4:	11400115 	stw	r5,4(r2)
 800fef8:	80158240 	call	8015824 <__malloc_unlock>
 800fefc:	80800204 	addi	r2,r16,8
 800ff00:	003fe006 	br	800fe84 <__alt_data_end+0xfc00fe84>
 800ff04:	9c000217 	ldw	r16,8(r19)
 800ff08:	00bfff04 	movi	r2,-4
 800ff0c:	85800117 	ldw	r22,4(r16)
 800ff10:	b0ac703a 	and	r22,r22,r2
 800ff14:	b4400336 	bltu	r22,r17,800ff24 <_malloc_r+0x344>
 800ff18:	b445c83a 	sub	r2,r22,r17
 800ff1c:	00c003c4 	movi	r3,15
 800ff20:	18805d16 	blt	r3,r2,8010098 <_malloc_r+0x4b8>
 800ff24:	05c21974 	movhi	r23,2149
 800ff28:	00821974 	movhi	r2,2149
 800ff2c:	10856204 	addi	r2,r2,5512
 800ff30:	bdfe7b04 	addi	r23,r23,-1556
 800ff34:	15400017 	ldw	r21,0(r2)
 800ff38:	b8c00017 	ldw	r3,0(r23)
 800ff3c:	00bfffc4 	movi	r2,-1
 800ff40:	858d883a 	add	r6,r16,r22
 800ff44:	8d6b883a 	add	r21,r17,r21
 800ff48:	1880ea26 	beq	r3,r2,80102f4 <_malloc_r+0x714>
 800ff4c:	ad4403c4 	addi	r21,r21,4111
 800ff50:	00bc0004 	movi	r2,-4096
 800ff54:	a8aa703a 	and	r21,r21,r2
 800ff58:	a80b883a 	mov	r5,r21
 800ff5c:	9009883a 	mov	r4,r18
 800ff60:	d9800015 	stw	r6,0(sp)
 800ff64:	8011cbc0 	call	8011cbc <_sbrk_r>
 800ff68:	1029883a 	mov	r20,r2
 800ff6c:	00bfffc4 	movi	r2,-1
 800ff70:	d9800017 	ldw	r6,0(sp)
 800ff74:	a080e826 	beq	r20,r2,8010318 <_malloc_r+0x738>
 800ff78:	a180a636 	bltu	r20,r6,8010214 <_malloc_r+0x634>
 800ff7c:	07021e34 	movhi	fp,2168
 800ff80:	e7357504 	addi	fp,fp,-10796
 800ff84:	e0800017 	ldw	r2,0(fp)
 800ff88:	a887883a 	add	r3,r21,r2
 800ff8c:	e0c00015 	stw	r3,0(fp)
 800ff90:	3500e626 	beq	r6,r20,801032c <_malloc_r+0x74c>
 800ff94:	b9000017 	ldw	r4,0(r23)
 800ff98:	00bfffc4 	movi	r2,-1
 800ff9c:	2080ee26 	beq	r4,r2,8010358 <_malloc_r+0x778>
 800ffa0:	a185c83a 	sub	r2,r20,r6
 800ffa4:	10c5883a 	add	r2,r2,r3
 800ffa8:	e0800015 	stw	r2,0(fp)
 800ffac:	a0c001cc 	andi	r3,r20,7
 800ffb0:	1800bc26 	beq	r3,zero,80102a4 <_malloc_r+0x6c4>
 800ffb4:	a0e9c83a 	sub	r20,r20,r3
 800ffb8:	00840204 	movi	r2,4104
 800ffbc:	a5000204 	addi	r20,r20,8
 800ffc0:	10c7c83a 	sub	r3,r2,r3
 800ffc4:	a545883a 	add	r2,r20,r21
 800ffc8:	1083ffcc 	andi	r2,r2,4095
 800ffcc:	18abc83a 	sub	r21,r3,r2
 800ffd0:	a80b883a 	mov	r5,r21
 800ffd4:	9009883a 	mov	r4,r18
 800ffd8:	8011cbc0 	call	8011cbc <_sbrk_r>
 800ffdc:	00ffffc4 	movi	r3,-1
 800ffe0:	10c0e126 	beq	r2,r3,8010368 <_malloc_r+0x788>
 800ffe4:	1505c83a 	sub	r2,r2,r20
 800ffe8:	1545883a 	add	r2,r2,r21
 800ffec:	10800054 	ori	r2,r2,1
 800fff0:	e0c00017 	ldw	r3,0(fp)
 800fff4:	9d000215 	stw	r20,8(r19)
 800fff8:	a0800115 	stw	r2,4(r20)
 800fffc:	a8c7883a 	add	r3,r21,r3
 8010000:	e0c00015 	stw	r3,0(fp)
 8010004:	84c00e26 	beq	r16,r19,8010040 <_malloc_r+0x460>
 8010008:	018003c4 	movi	r6,15
 801000c:	3580a72e 	bgeu	r6,r22,80102ac <_malloc_r+0x6cc>
 8010010:	81400117 	ldw	r5,4(r16)
 8010014:	013ffe04 	movi	r4,-8
 8010018:	b0bffd04 	addi	r2,r22,-12
 801001c:	1104703a 	and	r2,r2,r4
 8010020:	2900004c 	andi	r4,r5,1
 8010024:	2088b03a 	or	r4,r4,r2
 8010028:	81000115 	stw	r4,4(r16)
 801002c:	01400144 	movi	r5,5
 8010030:	8089883a 	add	r4,r16,r2
 8010034:	21400115 	stw	r5,4(r4)
 8010038:	21400215 	stw	r5,8(r4)
 801003c:	3080cd36 	bltu	r6,r2,8010374 <_malloc_r+0x794>
 8010040:	00821974 	movhi	r2,2149
 8010044:	10856104 	addi	r2,r2,5508
 8010048:	11000017 	ldw	r4,0(r2)
 801004c:	20c0012e 	bgeu	r4,r3,8010054 <_malloc_r+0x474>
 8010050:	10c00015 	stw	r3,0(r2)
 8010054:	00821974 	movhi	r2,2149
 8010058:	10856004 	addi	r2,r2,5504
 801005c:	11000017 	ldw	r4,0(r2)
 8010060:	9c000217 	ldw	r16,8(r19)
 8010064:	20c0012e 	bgeu	r4,r3,801006c <_malloc_r+0x48c>
 8010068:	10c00015 	stw	r3,0(r2)
 801006c:	80c00117 	ldw	r3,4(r16)
 8010070:	00bfff04 	movi	r2,-4
 8010074:	1886703a 	and	r3,r3,r2
 8010078:	1c45c83a 	sub	r2,r3,r17
 801007c:	1c400236 	bltu	r3,r17,8010088 <_malloc_r+0x4a8>
 8010080:	00c003c4 	movi	r3,15
 8010084:	18800416 	blt	r3,r2,8010098 <_malloc_r+0x4b8>
 8010088:	9009883a 	mov	r4,r18
 801008c:	80158240 	call	8015824 <__malloc_unlock>
 8010090:	0005883a 	mov	r2,zero
 8010094:	003f7b06 	br	800fe84 <__alt_data_end+0xfc00fe84>
 8010098:	88c00054 	ori	r3,r17,1
 801009c:	80c00115 	stw	r3,4(r16)
 80100a0:	8463883a 	add	r17,r16,r17
 80100a4:	10800054 	ori	r2,r2,1
 80100a8:	9c400215 	stw	r17,8(r19)
 80100ac:	88800115 	stw	r2,4(r17)
 80100b0:	9009883a 	mov	r4,r18
 80100b4:	80158240 	call	8015824 <__malloc_unlock>
 80100b8:	80800204 	addi	r2,r16,8
 80100bc:	003f7106 	br	800fe84 <__alt_data_end+0xfc00fe84>
 80100c0:	00c00504 	movi	r3,20
 80100c4:	18804a2e 	bgeu	r3,r2,80101f0 <_malloc_r+0x610>
 80100c8:	00c01504 	movi	r3,84
 80100cc:	18806e36 	bltu	r3,r2,8010288 <_malloc_r+0x6a8>
 80100d0:	8804d33a 	srli	r2,r17,12
 80100d4:	12001bc4 	addi	r8,r2,111
 80100d8:	11c01b84 	addi	r7,r2,110
 80100dc:	4209883a 	add	r4,r8,r8
 80100e0:	003edd06 	br	800fc58 <__alt_data_end+0xfc00fc58>
 80100e4:	3804d27a 	srli	r2,r7,9
 80100e8:	00c00104 	movi	r3,4
 80100ec:	1880442e 	bgeu	r3,r2,8010200 <_malloc_r+0x620>
 80100f0:	00c00504 	movi	r3,20
 80100f4:	18808136 	bltu	r3,r2,80102fc <_malloc_r+0x71c>
 80100f8:	11401704 	addi	r5,r2,92
 80100fc:	10c016c4 	addi	r3,r2,91
 8010100:	294b883a 	add	r5,r5,r5
 8010104:	294b883a 	add	r5,r5,r5
 8010108:	294b883a 	add	r5,r5,r5
 801010c:	994b883a 	add	r5,r19,r5
 8010110:	28800017 	ldw	r2,0(r5)
 8010114:	01821974 	movhi	r6,2149
 8010118:	297ffe04 	addi	r5,r5,-8
 801011c:	31b8ed04 	addi	r6,r6,-7244
 8010120:	28806526 	beq	r5,r2,80102b8 <_malloc_r+0x6d8>
 8010124:	01bfff04 	movi	r6,-4
 8010128:	10c00117 	ldw	r3,4(r2)
 801012c:	1986703a 	and	r3,r3,r6
 8010130:	38c0022e 	bgeu	r7,r3,801013c <_malloc_r+0x55c>
 8010134:	10800217 	ldw	r2,8(r2)
 8010138:	28bffb1e 	bne	r5,r2,8010128 <__alt_data_end+0xfc010128>
 801013c:	11400317 	ldw	r5,12(r2)
 8010140:	98c00117 	ldw	r3,4(r19)
 8010144:	81400315 	stw	r5,12(r16)
 8010148:	80800215 	stw	r2,8(r16)
 801014c:	2c000215 	stw	r16,8(r5)
 8010150:	14000315 	stw	r16,12(r2)
 8010154:	003ef806 	br	800fd38 <__alt_data_end+0xfc00fd38>
 8010158:	88c00054 	ori	r3,r17,1
 801015c:	80c00115 	stw	r3,4(r16)
 8010160:	8463883a 	add	r17,r16,r17
 8010164:	34400515 	stw	r17,20(r6)
 8010168:	34400415 	stw	r17,16(r6)
 801016c:	10c00054 	ori	r3,r2,1
 8010170:	8a000315 	stw	r8,12(r17)
 8010174:	8a000215 	stw	r8,8(r17)
 8010178:	88c00115 	stw	r3,4(r17)
 801017c:	88a3883a 	add	r17,r17,r2
 8010180:	88800015 	stw	r2,0(r17)
 8010184:	9009883a 	mov	r4,r18
 8010188:	80158240 	call	8015824 <__malloc_unlock>
 801018c:	80800204 	addi	r2,r16,8
 8010190:	003f3c06 	br	800fe84 <__alt_data_end+0xfc00fe84>
 8010194:	30c00117 	ldw	r3,4(r6)
 8010198:	003ee706 	br	800fd38 <__alt_data_end+0xfc00fd38>
 801019c:	5ac00044 	addi	r11,r11,1
 80101a0:	588000cc 	andi	r2,r11,3
 80101a4:	31800204 	addi	r6,r6,8
 80101a8:	103efd1e 	bne	r2,zero,800fda0 <__alt_data_end+0xfc00fda0>
 80101ac:	00002406 	br	8010240 <_malloc_r+0x660>
 80101b0:	14000317 	ldw	r16,12(r2)
 80101b4:	143f251e 	bne	r2,r16,800fe4c <__alt_data_end+0xfc00fe4c>
 80101b8:	21000084 	addi	r4,r4,2
 80101bc:	003ebc06 	br	800fcb0 <__alt_data_end+0xfc00fcb0>
 80101c0:	8085883a 	add	r2,r16,r2
 80101c4:	10c00117 	ldw	r3,4(r2)
 80101c8:	81000317 	ldw	r4,12(r16)
 80101cc:	81400217 	ldw	r5,8(r16)
 80101d0:	18c00054 	ori	r3,r3,1
 80101d4:	10c00115 	stw	r3,4(r2)
 80101d8:	29000315 	stw	r4,12(r5)
 80101dc:	21400215 	stw	r5,8(r4)
 80101e0:	9009883a 	mov	r4,r18
 80101e4:	80158240 	call	8015824 <__malloc_unlock>
 80101e8:	80800204 	addi	r2,r16,8
 80101ec:	003f2506 	br	800fe84 <__alt_data_end+0xfc00fe84>
 80101f0:	12001704 	addi	r8,r2,92
 80101f4:	11c016c4 	addi	r7,r2,91
 80101f8:	4209883a 	add	r4,r8,r8
 80101fc:	003e9606 	br	800fc58 <__alt_data_end+0xfc00fc58>
 8010200:	3804d1ba 	srli	r2,r7,6
 8010204:	11400e44 	addi	r5,r2,57
 8010208:	10c00e04 	addi	r3,r2,56
 801020c:	294b883a 	add	r5,r5,r5
 8010210:	003fbc06 	br	8010104 <__alt_data_end+0xfc010104>
 8010214:	84ff5926 	beq	r16,r19,800ff7c <__alt_data_end+0xfc00ff7c>
 8010218:	00821974 	movhi	r2,2149
 801021c:	10b8ed04 	addi	r2,r2,-7244
 8010220:	14000217 	ldw	r16,8(r2)
 8010224:	00bfff04 	movi	r2,-4
 8010228:	80c00117 	ldw	r3,4(r16)
 801022c:	1886703a 	and	r3,r3,r2
 8010230:	003f9106 	br	8010078 <__alt_data_end+0xfc010078>
 8010234:	60800217 	ldw	r2,8(r12)
 8010238:	213fffc4 	addi	r4,r4,-1
 801023c:	1300651e 	bne	r2,r12,80103d4 <_malloc_r+0x7f4>
 8010240:	208000cc 	andi	r2,r4,3
 8010244:	633ffe04 	addi	r12,r12,-8
 8010248:	103ffa1e 	bne	r2,zero,8010234 <__alt_data_end+0xfc010234>
 801024c:	98800117 	ldw	r2,4(r19)
 8010250:	0146303a 	nor	r3,zero,r5
 8010254:	1884703a 	and	r2,r3,r2
 8010258:	98800115 	stw	r2,4(r19)
 801025c:	294b883a 	add	r5,r5,r5
 8010260:	117f2836 	bltu	r2,r5,800ff04 <__alt_data_end+0xfc00ff04>
 8010264:	283f2726 	beq	r5,zero,800ff04 <__alt_data_end+0xfc00ff04>
 8010268:	2886703a 	and	r3,r5,r2
 801026c:	5809883a 	mov	r4,r11
 8010270:	183ec31e 	bne	r3,zero,800fd80 <__alt_data_end+0xfc00fd80>
 8010274:	294b883a 	add	r5,r5,r5
 8010278:	2886703a 	and	r3,r5,r2
 801027c:	21000104 	addi	r4,r4,4
 8010280:	183ffc26 	beq	r3,zero,8010274 <__alt_data_end+0xfc010274>
 8010284:	003ebe06 	br	800fd80 <__alt_data_end+0xfc00fd80>
 8010288:	00c05504 	movi	r3,340
 801028c:	18801236 	bltu	r3,r2,80102d8 <_malloc_r+0x6f8>
 8010290:	8804d3fa 	srli	r2,r17,15
 8010294:	12001e04 	addi	r8,r2,120
 8010298:	11c01dc4 	addi	r7,r2,119
 801029c:	4209883a 	add	r4,r8,r8
 80102a0:	003e6d06 	br	800fc58 <__alt_data_end+0xfc00fc58>
 80102a4:	00c40004 	movi	r3,4096
 80102a8:	003f4606 	br	800ffc4 <__alt_data_end+0xfc00ffc4>
 80102ac:	00800044 	movi	r2,1
 80102b0:	a0800115 	stw	r2,4(r20)
 80102b4:	003f7406 	br	8010088 <__alt_data_end+0xfc010088>
 80102b8:	1805d0ba 	srai	r2,r3,2
 80102bc:	01c00044 	movi	r7,1
 80102c0:	30c00117 	ldw	r3,4(r6)
 80102c4:	388e983a 	sll	r7,r7,r2
 80102c8:	2805883a 	mov	r2,r5
 80102cc:	38c6b03a 	or	r3,r7,r3
 80102d0:	30c00115 	stw	r3,4(r6)
 80102d4:	003f9b06 	br	8010144 <__alt_data_end+0xfc010144>
 80102d8:	00c15504 	movi	r3,1364
 80102dc:	18801a36 	bltu	r3,r2,8010348 <_malloc_r+0x768>
 80102e0:	8804d4ba 	srli	r2,r17,18
 80102e4:	12001f44 	addi	r8,r2,125
 80102e8:	11c01f04 	addi	r7,r2,124
 80102ec:	4209883a 	add	r4,r8,r8
 80102f0:	003e5906 	br	800fc58 <__alt_data_end+0xfc00fc58>
 80102f4:	ad400404 	addi	r21,r21,16
 80102f8:	003f1706 	br	800ff58 <__alt_data_end+0xfc00ff58>
 80102fc:	00c01504 	movi	r3,84
 8010300:	18802336 	bltu	r3,r2,8010390 <_malloc_r+0x7b0>
 8010304:	3804d33a 	srli	r2,r7,12
 8010308:	11401bc4 	addi	r5,r2,111
 801030c:	10c01b84 	addi	r3,r2,110
 8010310:	294b883a 	add	r5,r5,r5
 8010314:	003f7b06 	br	8010104 <__alt_data_end+0xfc010104>
 8010318:	9c000217 	ldw	r16,8(r19)
 801031c:	00bfff04 	movi	r2,-4
 8010320:	80c00117 	ldw	r3,4(r16)
 8010324:	1886703a 	and	r3,r3,r2
 8010328:	003f5306 	br	8010078 <__alt_data_end+0xfc010078>
 801032c:	3083ffcc 	andi	r2,r6,4095
 8010330:	103f181e 	bne	r2,zero,800ff94 <__alt_data_end+0xfc00ff94>
 8010334:	99000217 	ldw	r4,8(r19)
 8010338:	b545883a 	add	r2,r22,r21
 801033c:	10800054 	ori	r2,r2,1
 8010340:	20800115 	stw	r2,4(r4)
 8010344:	003f3e06 	br	8010040 <__alt_data_end+0xfc010040>
 8010348:	01003f84 	movi	r4,254
 801034c:	02001fc4 	movi	r8,127
 8010350:	01c01f84 	movi	r7,126
 8010354:	003e4006 	br	800fc58 <__alt_data_end+0xfc00fc58>
 8010358:	00821974 	movhi	r2,2149
 801035c:	10be7b04 	addi	r2,r2,-1556
 8010360:	15000015 	stw	r20,0(r2)
 8010364:	003f1106 	br	800ffac <__alt_data_end+0xfc00ffac>
 8010368:	00800044 	movi	r2,1
 801036c:	002b883a 	mov	r21,zero
 8010370:	003f1f06 	br	800fff0 <__alt_data_end+0xfc00fff0>
 8010374:	81400204 	addi	r5,r16,8
 8010378:	9009883a 	mov	r4,r18
 801037c:	800efe80 	call	800efe8 <_free_r>
 8010380:	00821e34 	movhi	r2,2168
 8010384:	10b57504 	addi	r2,r2,-10796
 8010388:	10c00017 	ldw	r3,0(r2)
 801038c:	003f2c06 	br	8010040 <__alt_data_end+0xfc010040>
 8010390:	00c05504 	movi	r3,340
 8010394:	18800536 	bltu	r3,r2,80103ac <_malloc_r+0x7cc>
 8010398:	3804d3fa 	srli	r2,r7,15
 801039c:	11401e04 	addi	r5,r2,120
 80103a0:	10c01dc4 	addi	r3,r2,119
 80103a4:	294b883a 	add	r5,r5,r5
 80103a8:	003f5606 	br	8010104 <__alt_data_end+0xfc010104>
 80103ac:	00c15504 	movi	r3,1364
 80103b0:	18800536 	bltu	r3,r2,80103c8 <_malloc_r+0x7e8>
 80103b4:	3804d4ba 	srli	r2,r7,18
 80103b8:	11401f44 	addi	r5,r2,125
 80103bc:	10c01f04 	addi	r3,r2,124
 80103c0:	294b883a 	add	r5,r5,r5
 80103c4:	003f4f06 	br	8010104 <__alt_data_end+0xfc010104>
 80103c8:	01403f84 	movi	r5,254
 80103cc:	00c01f84 	movi	r3,126
 80103d0:	003f4c06 	br	8010104 <__alt_data_end+0xfc010104>
 80103d4:	98800117 	ldw	r2,4(r19)
 80103d8:	003fa006 	br	801025c <__alt_data_end+0xfc01025c>
 80103dc:	8808d0fa 	srli	r4,r17,3
 80103e0:	20800044 	addi	r2,r4,1
 80103e4:	1085883a 	add	r2,r2,r2
 80103e8:	003e9006 	br	800fe2c <__alt_data_end+0xfc00fe2c>

080103ec <memchr>:
 80103ec:	208000cc 	andi	r2,r4,3
 80103f0:	280f883a 	mov	r7,r5
 80103f4:	10003426 	beq	r2,zero,80104c8 <memchr+0xdc>
 80103f8:	30bfffc4 	addi	r2,r6,-1
 80103fc:	30001a26 	beq	r6,zero,8010468 <memchr+0x7c>
 8010400:	20c00003 	ldbu	r3,0(r4)
 8010404:	29803fcc 	andi	r6,r5,255
 8010408:	30c0051e 	bne	r6,r3,8010420 <memchr+0x34>
 801040c:	00001806 	br	8010470 <memchr+0x84>
 8010410:	10001526 	beq	r2,zero,8010468 <memchr+0x7c>
 8010414:	20c00003 	ldbu	r3,0(r4)
 8010418:	10bfffc4 	addi	r2,r2,-1
 801041c:	30c01426 	beq	r6,r3,8010470 <memchr+0x84>
 8010420:	21000044 	addi	r4,r4,1
 8010424:	20c000cc 	andi	r3,r4,3
 8010428:	183ff91e 	bne	r3,zero,8010410 <__alt_data_end+0xfc010410>
 801042c:	020000c4 	movi	r8,3
 8010430:	40801136 	bltu	r8,r2,8010478 <memchr+0x8c>
 8010434:	10000c26 	beq	r2,zero,8010468 <memchr+0x7c>
 8010438:	20c00003 	ldbu	r3,0(r4)
 801043c:	29403fcc 	andi	r5,r5,255
 8010440:	28c00b26 	beq	r5,r3,8010470 <memchr+0x84>
 8010444:	20c00044 	addi	r3,r4,1
 8010448:	39803fcc 	andi	r6,r7,255
 801044c:	2089883a 	add	r4,r4,r2
 8010450:	00000306 	br	8010460 <memchr+0x74>
 8010454:	18c00044 	addi	r3,r3,1
 8010458:	197fffc3 	ldbu	r5,-1(r3)
 801045c:	31400526 	beq	r6,r5,8010474 <memchr+0x88>
 8010460:	1805883a 	mov	r2,r3
 8010464:	20fffb1e 	bne	r4,r3,8010454 <__alt_data_end+0xfc010454>
 8010468:	0005883a 	mov	r2,zero
 801046c:	f800283a 	ret
 8010470:	2005883a 	mov	r2,r4
 8010474:	f800283a 	ret
 8010478:	28c03fcc 	andi	r3,r5,255
 801047c:	1812923a 	slli	r9,r3,8
 8010480:	02ffbff4 	movhi	r11,65279
 8010484:	02a02074 	movhi	r10,32897
 8010488:	48d2b03a 	or	r9,r9,r3
 801048c:	4806943a 	slli	r3,r9,16
 8010490:	5affbfc4 	addi	r11,r11,-257
 8010494:	52a02004 	addi	r10,r10,-32640
 8010498:	48d2b03a 	or	r9,r9,r3
 801049c:	20c00017 	ldw	r3,0(r4)
 80104a0:	48c6f03a 	xor	r3,r9,r3
 80104a4:	1acd883a 	add	r6,r3,r11
 80104a8:	00c6303a 	nor	r3,zero,r3
 80104ac:	30c6703a 	and	r3,r6,r3
 80104b0:	1a86703a 	and	r3,r3,r10
 80104b4:	183fe01e 	bne	r3,zero,8010438 <__alt_data_end+0xfc010438>
 80104b8:	10bfff04 	addi	r2,r2,-4
 80104bc:	21000104 	addi	r4,r4,4
 80104c0:	40bff636 	bltu	r8,r2,801049c <__alt_data_end+0xfc01049c>
 80104c4:	003fdb06 	br	8010434 <__alt_data_end+0xfc010434>
 80104c8:	3005883a 	mov	r2,r6
 80104cc:	003fd706 	br	801042c <__alt_data_end+0xfc01042c>

080104d0 <memmove>:
 80104d0:	2005883a 	mov	r2,r4
 80104d4:	29000b2e 	bgeu	r5,r4,8010504 <memmove+0x34>
 80104d8:	298f883a 	add	r7,r5,r6
 80104dc:	21c0092e 	bgeu	r4,r7,8010504 <memmove+0x34>
 80104e0:	2187883a 	add	r3,r4,r6
 80104e4:	198bc83a 	sub	r5,r3,r6
 80104e8:	30004826 	beq	r6,zero,801060c <memmove+0x13c>
 80104ec:	39ffffc4 	addi	r7,r7,-1
 80104f0:	39000003 	ldbu	r4,0(r7)
 80104f4:	18ffffc4 	addi	r3,r3,-1
 80104f8:	19000005 	stb	r4,0(r3)
 80104fc:	28fffb1e 	bne	r5,r3,80104ec <__alt_data_end+0xfc0104ec>
 8010500:	f800283a 	ret
 8010504:	00c003c4 	movi	r3,15
 8010508:	1980412e 	bgeu	r3,r6,8010610 <memmove+0x140>
 801050c:	2886b03a 	or	r3,r5,r2
 8010510:	18c000cc 	andi	r3,r3,3
 8010514:	1800401e 	bne	r3,zero,8010618 <memmove+0x148>
 8010518:	33fffc04 	addi	r15,r6,-16
 801051c:	781ed13a 	srli	r15,r15,4
 8010520:	28c00104 	addi	r3,r5,4
 8010524:	13400104 	addi	r13,r2,4
 8010528:	781c913a 	slli	r14,r15,4
 801052c:	2b000204 	addi	r12,r5,8
 8010530:	12c00204 	addi	r11,r2,8
 8010534:	73800504 	addi	r14,r14,20
 8010538:	2a800304 	addi	r10,r5,12
 801053c:	12400304 	addi	r9,r2,12
 8010540:	2b9d883a 	add	r14,r5,r14
 8010544:	2811883a 	mov	r8,r5
 8010548:	100f883a 	mov	r7,r2
 801054c:	41000017 	ldw	r4,0(r8)
 8010550:	39c00404 	addi	r7,r7,16
 8010554:	18c00404 	addi	r3,r3,16
 8010558:	393ffc15 	stw	r4,-16(r7)
 801055c:	193ffc17 	ldw	r4,-16(r3)
 8010560:	6b400404 	addi	r13,r13,16
 8010564:	5ac00404 	addi	r11,r11,16
 8010568:	693ffc15 	stw	r4,-16(r13)
 801056c:	61000017 	ldw	r4,0(r12)
 8010570:	4a400404 	addi	r9,r9,16
 8010574:	42000404 	addi	r8,r8,16
 8010578:	593ffc15 	stw	r4,-16(r11)
 801057c:	51000017 	ldw	r4,0(r10)
 8010580:	63000404 	addi	r12,r12,16
 8010584:	52800404 	addi	r10,r10,16
 8010588:	493ffc15 	stw	r4,-16(r9)
 801058c:	1bbfef1e 	bne	r3,r14,801054c <__alt_data_end+0xfc01054c>
 8010590:	79000044 	addi	r4,r15,1
 8010594:	2008913a 	slli	r4,r4,4
 8010598:	328003cc 	andi	r10,r6,15
 801059c:	02c000c4 	movi	r11,3
 80105a0:	1107883a 	add	r3,r2,r4
 80105a4:	290b883a 	add	r5,r5,r4
 80105a8:	5a801e2e 	bgeu	r11,r10,8010624 <memmove+0x154>
 80105ac:	1813883a 	mov	r9,r3
 80105b0:	2811883a 	mov	r8,r5
 80105b4:	500f883a 	mov	r7,r10
 80105b8:	41000017 	ldw	r4,0(r8)
 80105bc:	4a400104 	addi	r9,r9,4
 80105c0:	39ffff04 	addi	r7,r7,-4
 80105c4:	493fff15 	stw	r4,-4(r9)
 80105c8:	42000104 	addi	r8,r8,4
 80105cc:	59fffa36 	bltu	r11,r7,80105b8 <__alt_data_end+0xfc0105b8>
 80105d0:	513fff04 	addi	r4,r10,-4
 80105d4:	2008d0ba 	srli	r4,r4,2
 80105d8:	318000cc 	andi	r6,r6,3
 80105dc:	21000044 	addi	r4,r4,1
 80105e0:	2109883a 	add	r4,r4,r4
 80105e4:	2109883a 	add	r4,r4,r4
 80105e8:	1907883a 	add	r3,r3,r4
 80105ec:	290b883a 	add	r5,r5,r4
 80105f0:	30000b26 	beq	r6,zero,8010620 <memmove+0x150>
 80105f4:	198d883a 	add	r6,r3,r6
 80105f8:	29c00003 	ldbu	r7,0(r5)
 80105fc:	18c00044 	addi	r3,r3,1
 8010600:	29400044 	addi	r5,r5,1
 8010604:	19ffffc5 	stb	r7,-1(r3)
 8010608:	19bffb1e 	bne	r3,r6,80105f8 <__alt_data_end+0xfc0105f8>
 801060c:	f800283a 	ret
 8010610:	1007883a 	mov	r3,r2
 8010614:	003ff606 	br	80105f0 <__alt_data_end+0xfc0105f0>
 8010618:	1007883a 	mov	r3,r2
 801061c:	003ff506 	br	80105f4 <__alt_data_end+0xfc0105f4>
 8010620:	f800283a 	ret
 8010624:	500d883a 	mov	r6,r10
 8010628:	003ff106 	br	80105f0 <__alt_data_end+0xfc0105f0>

0801062c <_Balloc>:
 801062c:	20801317 	ldw	r2,76(r4)
 8010630:	defffc04 	addi	sp,sp,-16
 8010634:	dc400115 	stw	r17,4(sp)
 8010638:	dc000015 	stw	r16,0(sp)
 801063c:	dfc00315 	stw	ra,12(sp)
 8010640:	dc800215 	stw	r18,8(sp)
 8010644:	2023883a 	mov	r17,r4
 8010648:	2821883a 	mov	r16,r5
 801064c:	10000f26 	beq	r2,zero,801068c <_Balloc+0x60>
 8010650:	8407883a 	add	r3,r16,r16
 8010654:	18c7883a 	add	r3,r3,r3
 8010658:	10c7883a 	add	r3,r2,r3
 801065c:	18800017 	ldw	r2,0(r3)
 8010660:	10001126 	beq	r2,zero,80106a8 <_Balloc+0x7c>
 8010664:	11000017 	ldw	r4,0(r2)
 8010668:	19000015 	stw	r4,0(r3)
 801066c:	10000415 	stw	zero,16(r2)
 8010670:	10000315 	stw	zero,12(r2)
 8010674:	dfc00317 	ldw	ra,12(sp)
 8010678:	dc800217 	ldw	r18,8(sp)
 801067c:	dc400117 	ldw	r17,4(sp)
 8010680:	dc000017 	ldw	r16,0(sp)
 8010684:	dec00404 	addi	sp,sp,16
 8010688:	f800283a 	ret
 801068c:	01800844 	movi	r6,33
 8010690:	01400104 	movi	r5,4
 8010694:	80136d40 	call	80136d4 <_calloc_r>
 8010698:	88801315 	stw	r2,76(r17)
 801069c:	103fec1e 	bne	r2,zero,8010650 <__alt_data_end+0xfc010650>
 80106a0:	0005883a 	mov	r2,zero
 80106a4:	003ff306 	br	8010674 <__alt_data_end+0xfc010674>
 80106a8:	01400044 	movi	r5,1
 80106ac:	2c24983a 	sll	r18,r5,r16
 80106b0:	8809883a 	mov	r4,r17
 80106b4:	91800144 	addi	r6,r18,5
 80106b8:	318d883a 	add	r6,r6,r6
 80106bc:	318d883a 	add	r6,r6,r6
 80106c0:	80136d40 	call	80136d4 <_calloc_r>
 80106c4:	103ff626 	beq	r2,zero,80106a0 <__alt_data_end+0xfc0106a0>
 80106c8:	14000115 	stw	r16,4(r2)
 80106cc:	14800215 	stw	r18,8(r2)
 80106d0:	003fe606 	br	801066c <__alt_data_end+0xfc01066c>

080106d4 <_Bfree>:
 80106d4:	28000826 	beq	r5,zero,80106f8 <_Bfree+0x24>
 80106d8:	28c00117 	ldw	r3,4(r5)
 80106dc:	20801317 	ldw	r2,76(r4)
 80106e0:	18c7883a 	add	r3,r3,r3
 80106e4:	18c7883a 	add	r3,r3,r3
 80106e8:	10c5883a 	add	r2,r2,r3
 80106ec:	10c00017 	ldw	r3,0(r2)
 80106f0:	28c00015 	stw	r3,0(r5)
 80106f4:	11400015 	stw	r5,0(r2)
 80106f8:	f800283a 	ret

080106fc <__multadd>:
 80106fc:	defff704 	addi	sp,sp,-36
 8010700:	dc800215 	stw	r18,8(sp)
 8010704:	2c800417 	ldw	r18,16(r5)
 8010708:	dd800615 	stw	r22,24(sp)
 801070c:	dd400515 	stw	r21,20(sp)
 8010710:	dd000415 	stw	r20,16(sp)
 8010714:	dcc00315 	stw	r19,12(sp)
 8010718:	dc400115 	stw	r17,4(sp)
 801071c:	dc000015 	stw	r16,0(sp)
 8010720:	dfc00815 	stw	ra,32(sp)
 8010724:	ddc00715 	stw	r23,28(sp)
 8010728:	2827883a 	mov	r19,r5
 801072c:	2029883a 	mov	r20,r4
 8010730:	3023883a 	mov	r17,r6
 8010734:	3821883a 	mov	r16,r7
 8010738:	2d400504 	addi	r21,r5,20
 801073c:	002d883a 	mov	r22,zero
 8010740:	adc00017 	ldw	r23,0(r21)
 8010744:	880b883a 	mov	r5,r17
 8010748:	ad400104 	addi	r21,r21,4
 801074c:	b93fffcc 	andi	r4,r23,65535
 8010750:	80071600 	call	8007160 <__mulsi3>
 8010754:	b808d43a 	srli	r4,r23,16
 8010758:	880b883a 	mov	r5,r17
 801075c:	1421883a 	add	r16,r2,r16
 8010760:	80071600 	call	8007160 <__mulsi3>
 8010764:	800ed43a 	srli	r7,r16,16
 8010768:	80ffffcc 	andi	r3,r16,65535
 801076c:	b5800044 	addi	r22,r22,1
 8010770:	11c5883a 	add	r2,r2,r7
 8010774:	100e943a 	slli	r7,r2,16
 8010778:	1020d43a 	srli	r16,r2,16
 801077c:	38c7883a 	add	r3,r7,r3
 8010780:	a8ffff15 	stw	r3,-4(r21)
 8010784:	b4bfee16 	blt	r22,r18,8010740 <__alt_data_end+0xfc010740>
 8010788:	80000926 	beq	r16,zero,80107b0 <__multadd+0xb4>
 801078c:	98800217 	ldw	r2,8(r19)
 8010790:	9080130e 	bge	r18,r2,80107e0 <__multadd+0xe4>
 8010794:	90800144 	addi	r2,r18,5
 8010798:	1085883a 	add	r2,r2,r2
 801079c:	1085883a 	add	r2,r2,r2
 80107a0:	9885883a 	add	r2,r19,r2
 80107a4:	14000015 	stw	r16,0(r2)
 80107a8:	94800044 	addi	r18,r18,1
 80107ac:	9c800415 	stw	r18,16(r19)
 80107b0:	9805883a 	mov	r2,r19
 80107b4:	dfc00817 	ldw	ra,32(sp)
 80107b8:	ddc00717 	ldw	r23,28(sp)
 80107bc:	dd800617 	ldw	r22,24(sp)
 80107c0:	dd400517 	ldw	r21,20(sp)
 80107c4:	dd000417 	ldw	r20,16(sp)
 80107c8:	dcc00317 	ldw	r19,12(sp)
 80107cc:	dc800217 	ldw	r18,8(sp)
 80107d0:	dc400117 	ldw	r17,4(sp)
 80107d4:	dc000017 	ldw	r16,0(sp)
 80107d8:	dec00904 	addi	sp,sp,36
 80107dc:	f800283a 	ret
 80107e0:	99400117 	ldw	r5,4(r19)
 80107e4:	a009883a 	mov	r4,r20
 80107e8:	29400044 	addi	r5,r5,1
 80107ec:	801062c0 	call	801062c <_Balloc>
 80107f0:	99800417 	ldw	r6,16(r19)
 80107f4:	99400304 	addi	r5,r19,12
 80107f8:	11000304 	addi	r4,r2,12
 80107fc:	31800084 	addi	r6,r6,2
 8010800:	318d883a 	add	r6,r6,r6
 8010804:	318d883a 	add	r6,r6,r6
 8010808:	1023883a 	mov	r17,r2
 801080c:	800a5f00 	call	800a5f0 <memcpy>
 8010810:	98000a26 	beq	r19,zero,801083c <__multadd+0x140>
 8010814:	98c00117 	ldw	r3,4(r19)
 8010818:	a0801317 	ldw	r2,76(r20)
 801081c:	18c7883a 	add	r3,r3,r3
 8010820:	18c7883a 	add	r3,r3,r3
 8010824:	10c5883a 	add	r2,r2,r3
 8010828:	10c00017 	ldw	r3,0(r2)
 801082c:	98c00015 	stw	r3,0(r19)
 8010830:	14c00015 	stw	r19,0(r2)
 8010834:	8827883a 	mov	r19,r17
 8010838:	003fd606 	br	8010794 <__alt_data_end+0xfc010794>
 801083c:	8827883a 	mov	r19,r17
 8010840:	003fd406 	br	8010794 <__alt_data_end+0xfc010794>

08010844 <__s2b>:
 8010844:	defff904 	addi	sp,sp,-28
 8010848:	dc400115 	stw	r17,4(sp)
 801084c:	dc000015 	stw	r16,0(sp)
 8010850:	2023883a 	mov	r17,r4
 8010854:	2821883a 	mov	r16,r5
 8010858:	39000204 	addi	r4,r7,8
 801085c:	01400244 	movi	r5,9
 8010860:	dcc00315 	stw	r19,12(sp)
 8010864:	dc800215 	stw	r18,8(sp)
 8010868:	dfc00615 	stw	ra,24(sp)
 801086c:	dd400515 	stw	r21,20(sp)
 8010870:	dd000415 	stw	r20,16(sp)
 8010874:	3825883a 	mov	r18,r7
 8010878:	3027883a 	mov	r19,r6
 801087c:	8006fac0 	call	8006fac <__divsi3>
 8010880:	00c00044 	movi	r3,1
 8010884:	000b883a 	mov	r5,zero
 8010888:	1880030e 	bge	r3,r2,8010898 <__s2b+0x54>
 801088c:	18c7883a 	add	r3,r3,r3
 8010890:	29400044 	addi	r5,r5,1
 8010894:	18bffd16 	blt	r3,r2,801088c <__alt_data_end+0xfc01088c>
 8010898:	8809883a 	mov	r4,r17
 801089c:	801062c0 	call	801062c <_Balloc>
 80108a0:	d8c00717 	ldw	r3,28(sp)
 80108a4:	10c00515 	stw	r3,20(r2)
 80108a8:	00c00044 	movi	r3,1
 80108ac:	10c00415 	stw	r3,16(r2)
 80108b0:	00c00244 	movi	r3,9
 80108b4:	1cc0210e 	bge	r3,r19,801093c <__s2b+0xf8>
 80108b8:	80eb883a 	add	r21,r16,r3
 80108bc:	a829883a 	mov	r20,r21
 80108c0:	84e1883a 	add	r16,r16,r19
 80108c4:	a1c00007 	ldb	r7,0(r20)
 80108c8:	01800284 	movi	r6,10
 80108cc:	a5000044 	addi	r20,r20,1
 80108d0:	100b883a 	mov	r5,r2
 80108d4:	39fff404 	addi	r7,r7,-48
 80108d8:	8809883a 	mov	r4,r17
 80108dc:	80106fc0 	call	80106fc <__multadd>
 80108e0:	a43ff81e 	bne	r20,r16,80108c4 <__alt_data_end+0xfc0108c4>
 80108e4:	ace1883a 	add	r16,r21,r19
 80108e8:	843ffe04 	addi	r16,r16,-8
 80108ec:	9c800a0e 	bge	r19,r18,8010918 <__s2b+0xd4>
 80108f0:	94e5c83a 	sub	r18,r18,r19
 80108f4:	84a5883a 	add	r18,r16,r18
 80108f8:	81c00007 	ldb	r7,0(r16)
 80108fc:	01800284 	movi	r6,10
 8010900:	84000044 	addi	r16,r16,1
 8010904:	100b883a 	mov	r5,r2
 8010908:	39fff404 	addi	r7,r7,-48
 801090c:	8809883a 	mov	r4,r17
 8010910:	80106fc0 	call	80106fc <__multadd>
 8010914:	84bff81e 	bne	r16,r18,80108f8 <__alt_data_end+0xfc0108f8>
 8010918:	dfc00617 	ldw	ra,24(sp)
 801091c:	dd400517 	ldw	r21,20(sp)
 8010920:	dd000417 	ldw	r20,16(sp)
 8010924:	dcc00317 	ldw	r19,12(sp)
 8010928:	dc800217 	ldw	r18,8(sp)
 801092c:	dc400117 	ldw	r17,4(sp)
 8010930:	dc000017 	ldw	r16,0(sp)
 8010934:	dec00704 	addi	sp,sp,28
 8010938:	f800283a 	ret
 801093c:	84000284 	addi	r16,r16,10
 8010940:	1827883a 	mov	r19,r3
 8010944:	003fe906 	br	80108ec <__alt_data_end+0xfc0108ec>

08010948 <__hi0bits>:
 8010948:	20bfffec 	andhi	r2,r4,65535
 801094c:	1000141e 	bne	r2,zero,80109a0 <__hi0bits+0x58>
 8010950:	2008943a 	slli	r4,r4,16
 8010954:	00800404 	movi	r2,16
 8010958:	20ffc02c 	andhi	r3,r4,65280
 801095c:	1800021e 	bne	r3,zero,8010968 <__hi0bits+0x20>
 8010960:	2008923a 	slli	r4,r4,8
 8010964:	10800204 	addi	r2,r2,8
 8010968:	20fc002c 	andhi	r3,r4,61440
 801096c:	1800021e 	bne	r3,zero,8010978 <__hi0bits+0x30>
 8010970:	2008913a 	slli	r4,r4,4
 8010974:	10800104 	addi	r2,r2,4
 8010978:	20f0002c 	andhi	r3,r4,49152
 801097c:	1800031e 	bne	r3,zero,801098c <__hi0bits+0x44>
 8010980:	2109883a 	add	r4,r4,r4
 8010984:	10800084 	addi	r2,r2,2
 8010988:	2109883a 	add	r4,r4,r4
 801098c:	20000316 	blt	r4,zero,801099c <__hi0bits+0x54>
 8010990:	2110002c 	andhi	r4,r4,16384
 8010994:	2000041e 	bne	r4,zero,80109a8 <__hi0bits+0x60>
 8010998:	00800804 	movi	r2,32
 801099c:	f800283a 	ret
 80109a0:	0005883a 	mov	r2,zero
 80109a4:	003fec06 	br	8010958 <__alt_data_end+0xfc010958>
 80109a8:	10800044 	addi	r2,r2,1
 80109ac:	f800283a 	ret

080109b0 <__lo0bits>:
 80109b0:	20c00017 	ldw	r3,0(r4)
 80109b4:	188001cc 	andi	r2,r3,7
 80109b8:	10000826 	beq	r2,zero,80109dc <__lo0bits+0x2c>
 80109bc:	1880004c 	andi	r2,r3,1
 80109c0:	1000211e 	bne	r2,zero,8010a48 <__lo0bits+0x98>
 80109c4:	1880008c 	andi	r2,r3,2
 80109c8:	1000211e 	bne	r2,zero,8010a50 <__lo0bits+0xa0>
 80109cc:	1806d0ba 	srli	r3,r3,2
 80109d0:	00800084 	movi	r2,2
 80109d4:	20c00015 	stw	r3,0(r4)
 80109d8:	f800283a 	ret
 80109dc:	18bfffcc 	andi	r2,r3,65535
 80109e0:	10001326 	beq	r2,zero,8010a30 <__lo0bits+0x80>
 80109e4:	0005883a 	mov	r2,zero
 80109e8:	19403fcc 	andi	r5,r3,255
 80109ec:	2800021e 	bne	r5,zero,80109f8 <__lo0bits+0x48>
 80109f0:	1806d23a 	srli	r3,r3,8
 80109f4:	10800204 	addi	r2,r2,8
 80109f8:	194003cc 	andi	r5,r3,15
 80109fc:	2800021e 	bne	r5,zero,8010a08 <__lo0bits+0x58>
 8010a00:	1806d13a 	srli	r3,r3,4
 8010a04:	10800104 	addi	r2,r2,4
 8010a08:	194000cc 	andi	r5,r3,3
 8010a0c:	2800021e 	bne	r5,zero,8010a18 <__lo0bits+0x68>
 8010a10:	1806d0ba 	srli	r3,r3,2
 8010a14:	10800084 	addi	r2,r2,2
 8010a18:	1940004c 	andi	r5,r3,1
 8010a1c:	2800081e 	bne	r5,zero,8010a40 <__lo0bits+0x90>
 8010a20:	1806d07a 	srli	r3,r3,1
 8010a24:	1800051e 	bne	r3,zero,8010a3c <__lo0bits+0x8c>
 8010a28:	00800804 	movi	r2,32
 8010a2c:	f800283a 	ret
 8010a30:	1806d43a 	srli	r3,r3,16
 8010a34:	00800404 	movi	r2,16
 8010a38:	003feb06 	br	80109e8 <__alt_data_end+0xfc0109e8>
 8010a3c:	10800044 	addi	r2,r2,1
 8010a40:	20c00015 	stw	r3,0(r4)
 8010a44:	f800283a 	ret
 8010a48:	0005883a 	mov	r2,zero
 8010a4c:	f800283a 	ret
 8010a50:	1806d07a 	srli	r3,r3,1
 8010a54:	00800044 	movi	r2,1
 8010a58:	20c00015 	stw	r3,0(r4)
 8010a5c:	f800283a 	ret

08010a60 <__i2b>:
 8010a60:	defffd04 	addi	sp,sp,-12
 8010a64:	dc000015 	stw	r16,0(sp)
 8010a68:	04000044 	movi	r16,1
 8010a6c:	dc400115 	stw	r17,4(sp)
 8010a70:	2823883a 	mov	r17,r5
 8010a74:	800b883a 	mov	r5,r16
 8010a78:	dfc00215 	stw	ra,8(sp)
 8010a7c:	801062c0 	call	801062c <_Balloc>
 8010a80:	14400515 	stw	r17,20(r2)
 8010a84:	14000415 	stw	r16,16(r2)
 8010a88:	dfc00217 	ldw	ra,8(sp)
 8010a8c:	dc400117 	ldw	r17,4(sp)
 8010a90:	dc000017 	ldw	r16,0(sp)
 8010a94:	dec00304 	addi	sp,sp,12
 8010a98:	f800283a 	ret

08010a9c <__multiply>:
 8010a9c:	deffef04 	addi	sp,sp,-68
 8010aa0:	dc400815 	stw	r17,32(sp)
 8010aa4:	dc000715 	stw	r16,28(sp)
 8010aa8:	34400417 	ldw	r17,16(r6)
 8010aac:	2c000417 	ldw	r16,16(r5)
 8010ab0:	dd800d15 	stw	r22,52(sp)
 8010ab4:	dc800915 	stw	r18,36(sp)
 8010ab8:	dfc01015 	stw	ra,64(sp)
 8010abc:	df000f15 	stw	fp,60(sp)
 8010ac0:	ddc00e15 	stw	r23,56(sp)
 8010ac4:	dd400c15 	stw	r21,48(sp)
 8010ac8:	dd000b15 	stw	r20,44(sp)
 8010acc:	dcc00a15 	stw	r19,40(sp)
 8010ad0:	2825883a 	mov	r18,r5
 8010ad4:	302d883a 	mov	r22,r6
 8010ad8:	8440050e 	bge	r16,r17,8010af0 <__multiply+0x54>
 8010adc:	8007883a 	mov	r3,r16
 8010ae0:	3025883a 	mov	r18,r6
 8010ae4:	8821883a 	mov	r16,r17
 8010ae8:	282d883a 	mov	r22,r5
 8010aec:	1823883a 	mov	r17,r3
 8010af0:	90800217 	ldw	r2,8(r18)
 8010af4:	8447883a 	add	r3,r16,r17
 8010af8:	d8c00215 	stw	r3,8(sp)
 8010afc:	91400117 	ldw	r5,4(r18)
 8010b00:	10c0010e 	bge	r2,r3,8010b08 <__multiply+0x6c>
 8010b04:	29400044 	addi	r5,r5,1
 8010b08:	801062c0 	call	801062c <_Balloc>
 8010b0c:	d8c00217 	ldw	r3,8(sp)
 8010b10:	d8800615 	stw	r2,24(sp)
 8010b14:	18eb883a 	add	r21,r3,r3
 8010b18:	ad6b883a 	add	r21,r21,r21
 8010b1c:	10c00504 	addi	r3,r2,20
 8010b20:	1d6b883a 	add	r21,r3,r21
 8010b24:	d8c00115 	stw	r3,4(sp)
 8010b28:	dd400315 	stw	r21,12(sp)
 8010b2c:	1805883a 	mov	r2,r3
 8010b30:	1d40042e 	bgeu	r3,r21,8010b44 <__multiply+0xa8>
 8010b34:	d8c00317 	ldw	r3,12(sp)
 8010b38:	10000015 	stw	zero,0(r2)
 8010b3c:	10800104 	addi	r2,r2,4
 8010b40:	10fffc36 	bltu	r2,r3,8010b34 <__alt_data_end+0xfc010b34>
 8010b44:	8c63883a 	add	r17,r17,r17
 8010b48:	b5800504 	addi	r22,r22,20
 8010b4c:	8c63883a 	add	r17,r17,r17
 8010b50:	94800504 	addi	r18,r18,20
 8010b54:	8421883a 	add	r16,r16,r16
 8010b58:	b463883a 	add	r17,r22,r17
 8010b5c:	8421883a 	add	r16,r16,r16
 8010b60:	dd800015 	stw	r22,0(sp)
 8010b64:	dc800415 	stw	r18,16(sp)
 8010b68:	dc400515 	stw	r17,20(sp)
 8010b6c:	9429883a 	add	r20,r18,r16
 8010b70:	b4404f2e 	bgeu	r22,r17,8010cb0 <__multiply+0x214>
 8010b74:	d8c00017 	ldw	r3,0(sp)
 8010b78:	1c800017 	ldw	r18,0(r3)
 8010b7c:	947fffcc 	andi	r17,r18,65535
 8010b80:	88001e26 	beq	r17,zero,8010bfc <__multiply+0x160>
 8010b84:	dd800117 	ldw	r22,4(sp)
 8010b88:	dd400417 	ldw	r21,16(sp)
 8010b8c:	0027883a 	mov	r19,zero
 8010b90:	ac800017 	ldw	r18,0(r21)
 8010b94:	b4000017 	ldw	r16,0(r22)
 8010b98:	880b883a 	mov	r5,r17
 8010b9c:	913fffcc 	andi	r4,r18,65535
 8010ba0:	80071600 	call	8007160 <__mulsi3>
 8010ba4:	9008d43a 	srli	r4,r18,16
 8010ba8:	84bfffcc 	andi	r18,r16,65535
 8010bac:	1485883a 	add	r2,r2,r18
 8010bb0:	14e5883a 	add	r18,r2,r19
 8010bb4:	8020d43a 	srli	r16,r16,16
 8010bb8:	9026d43a 	srli	r19,r18,16
 8010bbc:	880b883a 	mov	r5,r17
 8010bc0:	80071600 	call	8007160 <__mulsi3>
 8010bc4:	1405883a 	add	r2,r2,r16
 8010bc8:	14e1883a 	add	r16,r2,r19
 8010bcc:	90ffffcc 	andi	r3,r18,65535
 8010bd0:	8024943a 	slli	r18,r16,16
 8010bd4:	ad400104 	addi	r21,r21,4
 8010bd8:	b005883a 	mov	r2,r22
 8010bdc:	90c6b03a 	or	r3,r18,r3
 8010be0:	b0c00015 	stw	r3,0(r22)
 8010be4:	8026d43a 	srli	r19,r16,16
 8010be8:	b5800104 	addi	r22,r22,4
 8010bec:	ad3fe836 	bltu	r21,r20,8010b90 <__alt_data_end+0xfc010b90>
 8010bf0:	d8c00017 	ldw	r3,0(sp)
 8010bf4:	14c00115 	stw	r19,4(r2)
 8010bf8:	1c800017 	ldw	r18,0(r3)
 8010bfc:	9024d43a 	srli	r18,r18,16
 8010c00:	90002226 	beq	r18,zero,8010c8c <__multiply+0x1f0>
 8010c04:	d8c00117 	ldw	r3,4(sp)
 8010c08:	dd800417 	ldw	r22,16(sp)
 8010c0c:	002f883a 	mov	r23,zero
 8010c10:	1f000017 	ldw	fp,0(r3)
 8010c14:	1823883a 	mov	r17,r3
 8010c18:	182b883a 	mov	r21,r3
 8010c1c:	e021883a 	mov	r16,fp
 8010c20:	00000106 	br	8010c28 <__multiply+0x18c>
 8010c24:	982b883a 	mov	r21,r19
 8010c28:	b100000b 	ldhu	r4,0(r22)
 8010c2c:	8020d43a 	srli	r16,r16,16
 8010c30:	900b883a 	mov	r5,r18
 8010c34:	80071600 	call	8007160 <__mulsi3>
 8010c38:	1405883a 	add	r2,r2,r16
 8010c3c:	15ef883a 	add	r23,r2,r23
 8010c40:	b804943a 	slli	r2,r23,16
 8010c44:	e0ffffcc 	andi	r3,fp,65535
 8010c48:	8c400104 	addi	r17,r17,4
 8010c4c:	10c6b03a 	or	r3,r2,r3
 8010c50:	88ffff15 	stw	r3,-4(r17)
 8010c54:	b5800104 	addi	r22,r22,4
 8010c58:	b13fff17 	ldw	r4,-4(r22)
 8010c5c:	acc00104 	addi	r19,r21,4
 8010c60:	900b883a 	mov	r5,r18
 8010c64:	2008d43a 	srli	r4,r4,16
 8010c68:	9c000017 	ldw	r16,0(r19)
 8010c6c:	80071600 	call	8007160 <__mulsi3>
 8010c70:	b806d43a 	srli	r3,r23,16
 8010c74:	813fffcc 	andi	r4,r16,65535
 8010c78:	1105883a 	add	r2,r2,r4
 8010c7c:	10f9883a 	add	fp,r2,r3
 8010c80:	e02ed43a 	srli	r23,fp,16
 8010c84:	b53fe736 	bltu	r22,r20,8010c24 <__alt_data_end+0xfc010c24>
 8010c88:	af000115 	stw	fp,4(r21)
 8010c8c:	d8c00017 	ldw	r3,0(sp)
 8010c90:	d9000517 	ldw	r4,20(sp)
 8010c94:	18c00104 	addi	r3,r3,4
 8010c98:	d8c00015 	stw	r3,0(sp)
 8010c9c:	d8c00117 	ldw	r3,4(sp)
 8010ca0:	18c00104 	addi	r3,r3,4
 8010ca4:	d8c00115 	stw	r3,4(sp)
 8010ca8:	d8c00017 	ldw	r3,0(sp)
 8010cac:	193fb136 	bltu	r3,r4,8010b74 <__alt_data_end+0xfc010b74>
 8010cb0:	d8c00217 	ldw	r3,8(sp)
 8010cb4:	00c00c0e 	bge	zero,r3,8010ce8 <__multiply+0x24c>
 8010cb8:	d8c00317 	ldw	r3,12(sp)
 8010cbc:	18bfff17 	ldw	r2,-4(r3)
 8010cc0:	1d7fff04 	addi	r21,r3,-4
 8010cc4:	10000326 	beq	r2,zero,8010cd4 <__multiply+0x238>
 8010cc8:	00000706 	br	8010ce8 <__multiply+0x24c>
 8010ccc:	a8800017 	ldw	r2,0(r21)
 8010cd0:	1000051e 	bne	r2,zero,8010ce8 <__multiply+0x24c>
 8010cd4:	d8c00217 	ldw	r3,8(sp)
 8010cd8:	ad7fff04 	addi	r21,r21,-4
 8010cdc:	18ffffc4 	addi	r3,r3,-1
 8010ce0:	d8c00215 	stw	r3,8(sp)
 8010ce4:	183ff91e 	bne	r3,zero,8010ccc <__alt_data_end+0xfc010ccc>
 8010ce8:	d8c00617 	ldw	r3,24(sp)
 8010cec:	d9000217 	ldw	r4,8(sp)
 8010cf0:	1805883a 	mov	r2,r3
 8010cf4:	19000415 	stw	r4,16(r3)
 8010cf8:	dfc01017 	ldw	ra,64(sp)
 8010cfc:	df000f17 	ldw	fp,60(sp)
 8010d00:	ddc00e17 	ldw	r23,56(sp)
 8010d04:	dd800d17 	ldw	r22,52(sp)
 8010d08:	dd400c17 	ldw	r21,48(sp)
 8010d0c:	dd000b17 	ldw	r20,44(sp)
 8010d10:	dcc00a17 	ldw	r19,40(sp)
 8010d14:	dc800917 	ldw	r18,36(sp)
 8010d18:	dc400817 	ldw	r17,32(sp)
 8010d1c:	dc000717 	ldw	r16,28(sp)
 8010d20:	dec01104 	addi	sp,sp,68
 8010d24:	f800283a 	ret

08010d28 <__pow5mult>:
 8010d28:	defffa04 	addi	sp,sp,-24
 8010d2c:	dcc00315 	stw	r19,12(sp)
 8010d30:	dc000015 	stw	r16,0(sp)
 8010d34:	dfc00515 	stw	ra,20(sp)
 8010d38:	dd000415 	stw	r20,16(sp)
 8010d3c:	dc800215 	stw	r18,8(sp)
 8010d40:	dc400115 	stw	r17,4(sp)
 8010d44:	308000cc 	andi	r2,r6,3
 8010d48:	3021883a 	mov	r16,r6
 8010d4c:	2027883a 	mov	r19,r4
 8010d50:	10002f1e 	bne	r2,zero,8010e10 <__pow5mult+0xe8>
 8010d54:	2825883a 	mov	r18,r5
 8010d58:	8021d0ba 	srai	r16,r16,2
 8010d5c:	80001a26 	beq	r16,zero,8010dc8 <__pow5mult+0xa0>
 8010d60:	9c401217 	ldw	r17,72(r19)
 8010d64:	8800061e 	bne	r17,zero,8010d80 <__pow5mult+0x58>
 8010d68:	00003406 	br	8010e3c <__pow5mult+0x114>
 8010d6c:	8021d07a 	srai	r16,r16,1
 8010d70:	80001526 	beq	r16,zero,8010dc8 <__pow5mult+0xa0>
 8010d74:	88800017 	ldw	r2,0(r17)
 8010d78:	10001c26 	beq	r2,zero,8010dec <__pow5mult+0xc4>
 8010d7c:	1023883a 	mov	r17,r2
 8010d80:	8080004c 	andi	r2,r16,1
 8010d84:	103ff926 	beq	r2,zero,8010d6c <__alt_data_end+0xfc010d6c>
 8010d88:	880d883a 	mov	r6,r17
 8010d8c:	900b883a 	mov	r5,r18
 8010d90:	9809883a 	mov	r4,r19
 8010d94:	8010a9c0 	call	8010a9c <__multiply>
 8010d98:	90001b26 	beq	r18,zero,8010e08 <__pow5mult+0xe0>
 8010d9c:	91000117 	ldw	r4,4(r18)
 8010da0:	98c01317 	ldw	r3,76(r19)
 8010da4:	8021d07a 	srai	r16,r16,1
 8010da8:	2109883a 	add	r4,r4,r4
 8010dac:	2109883a 	add	r4,r4,r4
 8010db0:	1907883a 	add	r3,r3,r4
 8010db4:	19000017 	ldw	r4,0(r3)
 8010db8:	91000015 	stw	r4,0(r18)
 8010dbc:	1c800015 	stw	r18,0(r3)
 8010dc0:	1025883a 	mov	r18,r2
 8010dc4:	803feb1e 	bne	r16,zero,8010d74 <__alt_data_end+0xfc010d74>
 8010dc8:	9005883a 	mov	r2,r18
 8010dcc:	dfc00517 	ldw	ra,20(sp)
 8010dd0:	dd000417 	ldw	r20,16(sp)
 8010dd4:	dcc00317 	ldw	r19,12(sp)
 8010dd8:	dc800217 	ldw	r18,8(sp)
 8010ddc:	dc400117 	ldw	r17,4(sp)
 8010de0:	dc000017 	ldw	r16,0(sp)
 8010de4:	dec00604 	addi	sp,sp,24
 8010de8:	f800283a 	ret
 8010dec:	880d883a 	mov	r6,r17
 8010df0:	880b883a 	mov	r5,r17
 8010df4:	9809883a 	mov	r4,r19
 8010df8:	8010a9c0 	call	8010a9c <__multiply>
 8010dfc:	88800015 	stw	r2,0(r17)
 8010e00:	10000015 	stw	zero,0(r2)
 8010e04:	003fdd06 	br	8010d7c <__alt_data_end+0xfc010d7c>
 8010e08:	1025883a 	mov	r18,r2
 8010e0c:	003fd706 	br	8010d6c <__alt_data_end+0xfc010d6c>
 8010e10:	10bfffc4 	addi	r2,r2,-1
 8010e14:	1085883a 	add	r2,r2,r2
 8010e18:	00c21974 	movhi	r3,2149
 8010e1c:	18f75c04 	addi	r3,r3,-8848
 8010e20:	1085883a 	add	r2,r2,r2
 8010e24:	1885883a 	add	r2,r3,r2
 8010e28:	11800017 	ldw	r6,0(r2)
 8010e2c:	000f883a 	mov	r7,zero
 8010e30:	80106fc0 	call	80106fc <__multadd>
 8010e34:	1025883a 	mov	r18,r2
 8010e38:	003fc706 	br	8010d58 <__alt_data_end+0xfc010d58>
 8010e3c:	05000044 	movi	r20,1
 8010e40:	a00b883a 	mov	r5,r20
 8010e44:	9809883a 	mov	r4,r19
 8010e48:	801062c0 	call	801062c <_Balloc>
 8010e4c:	1023883a 	mov	r17,r2
 8010e50:	00809c44 	movi	r2,625
 8010e54:	88800515 	stw	r2,20(r17)
 8010e58:	8d000415 	stw	r20,16(r17)
 8010e5c:	9c401215 	stw	r17,72(r19)
 8010e60:	88000015 	stw	zero,0(r17)
 8010e64:	003fc606 	br	8010d80 <__alt_data_end+0xfc010d80>

08010e68 <__lshift>:
 8010e68:	defff904 	addi	sp,sp,-28
 8010e6c:	dd400515 	stw	r21,20(sp)
 8010e70:	dcc00315 	stw	r19,12(sp)
 8010e74:	302bd17a 	srai	r21,r6,5
 8010e78:	2cc00417 	ldw	r19,16(r5)
 8010e7c:	28800217 	ldw	r2,8(r5)
 8010e80:	dd000415 	stw	r20,16(sp)
 8010e84:	ace7883a 	add	r19,r21,r19
 8010e88:	dc800215 	stw	r18,8(sp)
 8010e8c:	dc400115 	stw	r17,4(sp)
 8010e90:	dc000015 	stw	r16,0(sp)
 8010e94:	dfc00615 	stw	ra,24(sp)
 8010e98:	9c000044 	addi	r16,r19,1
 8010e9c:	2823883a 	mov	r17,r5
 8010ea0:	3029883a 	mov	r20,r6
 8010ea4:	2025883a 	mov	r18,r4
 8010ea8:	29400117 	ldw	r5,4(r5)
 8010eac:	1400030e 	bge	r2,r16,8010ebc <__lshift+0x54>
 8010eb0:	1085883a 	add	r2,r2,r2
 8010eb4:	29400044 	addi	r5,r5,1
 8010eb8:	143ffd16 	blt	r2,r16,8010eb0 <__alt_data_end+0xfc010eb0>
 8010ebc:	9009883a 	mov	r4,r18
 8010ec0:	801062c0 	call	801062c <_Balloc>
 8010ec4:	10c00504 	addi	r3,r2,20
 8010ec8:	0540070e 	bge	zero,r21,8010ee8 <__lshift+0x80>
 8010ecc:	ad6b883a 	add	r21,r21,r21
 8010ed0:	ad6b883a 	add	r21,r21,r21
 8010ed4:	1809883a 	mov	r4,r3
 8010ed8:	1d47883a 	add	r3,r3,r21
 8010edc:	20000015 	stw	zero,0(r4)
 8010ee0:	21000104 	addi	r4,r4,4
 8010ee4:	193ffd1e 	bne	r3,r4,8010edc <__alt_data_end+0xfc010edc>
 8010ee8:	8a000417 	ldw	r8,16(r17)
 8010eec:	89000504 	addi	r4,r17,20
 8010ef0:	a18007cc 	andi	r6,r20,31
 8010ef4:	4211883a 	add	r8,r8,r8
 8010ef8:	4211883a 	add	r8,r8,r8
 8010efc:	2211883a 	add	r8,r4,r8
 8010f00:	30002326 	beq	r6,zero,8010f90 <__lshift+0x128>
 8010f04:	02400804 	movi	r9,32
 8010f08:	4993c83a 	sub	r9,r9,r6
 8010f0c:	000b883a 	mov	r5,zero
 8010f10:	21c00017 	ldw	r7,0(r4)
 8010f14:	1815883a 	mov	r10,r3
 8010f18:	18c00104 	addi	r3,r3,4
 8010f1c:	398e983a 	sll	r7,r7,r6
 8010f20:	21000104 	addi	r4,r4,4
 8010f24:	394ab03a 	or	r5,r7,r5
 8010f28:	197fff15 	stw	r5,-4(r3)
 8010f2c:	217fff17 	ldw	r5,-4(r4)
 8010f30:	2a4ad83a 	srl	r5,r5,r9
 8010f34:	223ff636 	bltu	r4,r8,8010f10 <__alt_data_end+0xfc010f10>
 8010f38:	51400115 	stw	r5,4(r10)
 8010f3c:	28001a1e 	bne	r5,zero,8010fa8 <__lshift+0x140>
 8010f40:	843fffc4 	addi	r16,r16,-1
 8010f44:	14000415 	stw	r16,16(r2)
 8010f48:	88000826 	beq	r17,zero,8010f6c <__lshift+0x104>
 8010f4c:	89000117 	ldw	r4,4(r17)
 8010f50:	90c01317 	ldw	r3,76(r18)
 8010f54:	2109883a 	add	r4,r4,r4
 8010f58:	2109883a 	add	r4,r4,r4
 8010f5c:	1907883a 	add	r3,r3,r4
 8010f60:	19000017 	ldw	r4,0(r3)
 8010f64:	89000015 	stw	r4,0(r17)
 8010f68:	1c400015 	stw	r17,0(r3)
 8010f6c:	dfc00617 	ldw	ra,24(sp)
 8010f70:	dd400517 	ldw	r21,20(sp)
 8010f74:	dd000417 	ldw	r20,16(sp)
 8010f78:	dcc00317 	ldw	r19,12(sp)
 8010f7c:	dc800217 	ldw	r18,8(sp)
 8010f80:	dc400117 	ldw	r17,4(sp)
 8010f84:	dc000017 	ldw	r16,0(sp)
 8010f88:	dec00704 	addi	sp,sp,28
 8010f8c:	f800283a 	ret
 8010f90:	21400017 	ldw	r5,0(r4)
 8010f94:	18c00104 	addi	r3,r3,4
 8010f98:	21000104 	addi	r4,r4,4
 8010f9c:	197fff15 	stw	r5,-4(r3)
 8010fa0:	223ffb36 	bltu	r4,r8,8010f90 <__alt_data_end+0xfc010f90>
 8010fa4:	003fe606 	br	8010f40 <__alt_data_end+0xfc010f40>
 8010fa8:	9c000084 	addi	r16,r19,2
 8010fac:	003fe406 	br	8010f40 <__alt_data_end+0xfc010f40>

08010fb0 <__mcmp>:
 8010fb0:	20800417 	ldw	r2,16(r4)
 8010fb4:	28c00417 	ldw	r3,16(r5)
 8010fb8:	10c5c83a 	sub	r2,r2,r3
 8010fbc:	1000111e 	bne	r2,zero,8011004 <__mcmp+0x54>
 8010fc0:	18c7883a 	add	r3,r3,r3
 8010fc4:	18c7883a 	add	r3,r3,r3
 8010fc8:	21000504 	addi	r4,r4,20
 8010fcc:	29400504 	addi	r5,r5,20
 8010fd0:	20c5883a 	add	r2,r4,r3
 8010fd4:	28cb883a 	add	r5,r5,r3
 8010fd8:	00000106 	br	8010fe0 <__mcmp+0x30>
 8010fdc:	20800a2e 	bgeu	r4,r2,8011008 <__mcmp+0x58>
 8010fe0:	10bfff04 	addi	r2,r2,-4
 8010fe4:	297fff04 	addi	r5,r5,-4
 8010fe8:	11800017 	ldw	r6,0(r2)
 8010fec:	28c00017 	ldw	r3,0(r5)
 8010ff0:	30fffa26 	beq	r6,r3,8010fdc <__alt_data_end+0xfc010fdc>
 8010ff4:	30c00236 	bltu	r6,r3,8011000 <__mcmp+0x50>
 8010ff8:	00800044 	movi	r2,1
 8010ffc:	f800283a 	ret
 8011000:	00bfffc4 	movi	r2,-1
 8011004:	f800283a 	ret
 8011008:	0005883a 	mov	r2,zero
 801100c:	f800283a 	ret

08011010 <__mdiff>:
 8011010:	28c00417 	ldw	r3,16(r5)
 8011014:	30800417 	ldw	r2,16(r6)
 8011018:	defffa04 	addi	sp,sp,-24
 801101c:	dcc00315 	stw	r19,12(sp)
 8011020:	dc800215 	stw	r18,8(sp)
 8011024:	dfc00515 	stw	ra,20(sp)
 8011028:	dd000415 	stw	r20,16(sp)
 801102c:	dc400115 	stw	r17,4(sp)
 8011030:	dc000015 	stw	r16,0(sp)
 8011034:	1887c83a 	sub	r3,r3,r2
 8011038:	2825883a 	mov	r18,r5
 801103c:	3027883a 	mov	r19,r6
 8011040:	1800141e 	bne	r3,zero,8011094 <__mdiff+0x84>
 8011044:	1085883a 	add	r2,r2,r2
 8011048:	1085883a 	add	r2,r2,r2
 801104c:	2a000504 	addi	r8,r5,20
 8011050:	34000504 	addi	r16,r6,20
 8011054:	4087883a 	add	r3,r8,r2
 8011058:	8085883a 	add	r2,r16,r2
 801105c:	00000106 	br	8011064 <__mdiff+0x54>
 8011060:	40c0592e 	bgeu	r8,r3,80111c8 <__mdiff+0x1b8>
 8011064:	18ffff04 	addi	r3,r3,-4
 8011068:	10bfff04 	addi	r2,r2,-4
 801106c:	19c00017 	ldw	r7,0(r3)
 8011070:	11400017 	ldw	r5,0(r2)
 8011074:	397ffa26 	beq	r7,r5,8011060 <__alt_data_end+0xfc011060>
 8011078:	3940592e 	bgeu	r7,r5,80111e0 <__mdiff+0x1d0>
 801107c:	9005883a 	mov	r2,r18
 8011080:	4023883a 	mov	r17,r8
 8011084:	9825883a 	mov	r18,r19
 8011088:	05000044 	movi	r20,1
 801108c:	1027883a 	mov	r19,r2
 8011090:	00000406 	br	80110a4 <__mdiff+0x94>
 8011094:	18005616 	blt	r3,zero,80111f0 <__mdiff+0x1e0>
 8011098:	34400504 	addi	r17,r6,20
 801109c:	2c000504 	addi	r16,r5,20
 80110a0:	0029883a 	mov	r20,zero
 80110a4:	91400117 	ldw	r5,4(r18)
 80110a8:	801062c0 	call	801062c <_Balloc>
 80110ac:	92400417 	ldw	r9,16(r18)
 80110b0:	9b000417 	ldw	r12,16(r19)
 80110b4:	12c00504 	addi	r11,r2,20
 80110b8:	4a51883a 	add	r8,r9,r9
 80110bc:	6319883a 	add	r12,r12,r12
 80110c0:	4211883a 	add	r8,r8,r8
 80110c4:	6319883a 	add	r12,r12,r12
 80110c8:	15000315 	stw	r20,12(r2)
 80110cc:	8211883a 	add	r8,r16,r8
 80110d0:	8b19883a 	add	r12,r17,r12
 80110d4:	0007883a 	mov	r3,zero
 80110d8:	81400017 	ldw	r5,0(r16)
 80110dc:	89c00017 	ldw	r7,0(r17)
 80110e0:	59800104 	addi	r6,r11,4
 80110e4:	293fffcc 	andi	r4,r5,65535
 80110e8:	20c7883a 	add	r3,r4,r3
 80110ec:	393fffcc 	andi	r4,r7,65535
 80110f0:	1909c83a 	sub	r4,r3,r4
 80110f4:	280ad43a 	srli	r5,r5,16
 80110f8:	380ed43a 	srli	r7,r7,16
 80110fc:	2007d43a 	srai	r3,r4,16
 8011100:	213fffcc 	andi	r4,r4,65535
 8011104:	29cbc83a 	sub	r5,r5,r7
 8011108:	28c7883a 	add	r3,r5,r3
 801110c:	180a943a 	slli	r5,r3,16
 8011110:	8c400104 	addi	r17,r17,4
 8011114:	84000104 	addi	r16,r16,4
 8011118:	2908b03a 	or	r4,r5,r4
 801111c:	59000015 	stw	r4,0(r11)
 8011120:	1807d43a 	srai	r3,r3,16
 8011124:	3015883a 	mov	r10,r6
 8011128:	3017883a 	mov	r11,r6
 801112c:	8b3fea36 	bltu	r17,r12,80110d8 <__alt_data_end+0xfc0110d8>
 8011130:	8200162e 	bgeu	r16,r8,801118c <__mdiff+0x17c>
 8011134:	8017883a 	mov	r11,r16
 8011138:	59400017 	ldw	r5,0(r11)
 801113c:	31800104 	addi	r6,r6,4
 8011140:	5ac00104 	addi	r11,r11,4
 8011144:	293fffcc 	andi	r4,r5,65535
 8011148:	20c7883a 	add	r3,r4,r3
 801114c:	280ed43a 	srli	r7,r5,16
 8011150:	180bd43a 	srai	r5,r3,16
 8011154:	193fffcc 	andi	r4,r3,65535
 8011158:	3947883a 	add	r3,r7,r5
 801115c:	180a943a 	slli	r5,r3,16
 8011160:	1807d43a 	srai	r3,r3,16
 8011164:	2908b03a 	or	r4,r5,r4
 8011168:	313fff15 	stw	r4,-4(r6)
 801116c:	5a3ff236 	bltu	r11,r8,8011138 <__alt_data_end+0xfc011138>
 8011170:	0406303a 	nor	r3,zero,r16
 8011174:	1a07883a 	add	r3,r3,r8
 8011178:	1806d0ba 	srli	r3,r3,2
 801117c:	18c00044 	addi	r3,r3,1
 8011180:	18c7883a 	add	r3,r3,r3
 8011184:	18c7883a 	add	r3,r3,r3
 8011188:	50d5883a 	add	r10,r10,r3
 801118c:	50ffff04 	addi	r3,r10,-4
 8011190:	2000041e 	bne	r4,zero,80111a4 <__mdiff+0x194>
 8011194:	18ffff04 	addi	r3,r3,-4
 8011198:	19000017 	ldw	r4,0(r3)
 801119c:	4a7fffc4 	addi	r9,r9,-1
 80111a0:	203ffc26 	beq	r4,zero,8011194 <__alt_data_end+0xfc011194>
 80111a4:	12400415 	stw	r9,16(r2)
 80111a8:	dfc00517 	ldw	ra,20(sp)
 80111ac:	dd000417 	ldw	r20,16(sp)
 80111b0:	dcc00317 	ldw	r19,12(sp)
 80111b4:	dc800217 	ldw	r18,8(sp)
 80111b8:	dc400117 	ldw	r17,4(sp)
 80111bc:	dc000017 	ldw	r16,0(sp)
 80111c0:	dec00604 	addi	sp,sp,24
 80111c4:	f800283a 	ret
 80111c8:	000b883a 	mov	r5,zero
 80111cc:	801062c0 	call	801062c <_Balloc>
 80111d0:	00c00044 	movi	r3,1
 80111d4:	10c00415 	stw	r3,16(r2)
 80111d8:	10000515 	stw	zero,20(r2)
 80111dc:	003ff206 	br	80111a8 <__alt_data_end+0xfc0111a8>
 80111e0:	8023883a 	mov	r17,r16
 80111e4:	0029883a 	mov	r20,zero
 80111e8:	4021883a 	mov	r16,r8
 80111ec:	003fad06 	br	80110a4 <__alt_data_end+0xfc0110a4>
 80111f0:	9005883a 	mov	r2,r18
 80111f4:	94400504 	addi	r17,r18,20
 80111f8:	9c000504 	addi	r16,r19,20
 80111fc:	9825883a 	mov	r18,r19
 8011200:	05000044 	movi	r20,1
 8011204:	1027883a 	mov	r19,r2
 8011208:	003fa606 	br	80110a4 <__alt_data_end+0xfc0110a4>

0801120c <__ulp>:
 801120c:	295ffc2c 	andhi	r5,r5,32752
 8011210:	00bf3034 	movhi	r2,64704
 8011214:	2887883a 	add	r3,r5,r2
 8011218:	00c0020e 	bge	zero,r3,8011224 <__ulp+0x18>
 801121c:	0005883a 	mov	r2,zero
 8011220:	f800283a 	ret
 8011224:	00c7c83a 	sub	r3,zero,r3
 8011228:	1807d53a 	srai	r3,r3,20
 801122c:	008004c4 	movi	r2,19
 8011230:	10c00b0e 	bge	r2,r3,8011260 <__ulp+0x54>
 8011234:	18bffb04 	addi	r2,r3,-20
 8011238:	01000784 	movi	r4,30
 801123c:	0007883a 	mov	r3,zero
 8011240:	20800516 	blt	r4,r2,8011258 <__ulp+0x4c>
 8011244:	010007c4 	movi	r4,31
 8011248:	2089c83a 	sub	r4,r4,r2
 801124c:	00800044 	movi	r2,1
 8011250:	1104983a 	sll	r2,r2,r4
 8011254:	f800283a 	ret
 8011258:	00800044 	movi	r2,1
 801125c:	f800283a 	ret
 8011260:	01400234 	movhi	r5,8
 8011264:	28c7d83a 	sra	r3,r5,r3
 8011268:	0005883a 	mov	r2,zero
 801126c:	f800283a 	ret

08011270 <__b2d>:
 8011270:	defffa04 	addi	sp,sp,-24
 8011274:	dc000015 	stw	r16,0(sp)
 8011278:	24000417 	ldw	r16,16(r4)
 801127c:	dc400115 	stw	r17,4(sp)
 8011280:	24400504 	addi	r17,r4,20
 8011284:	8421883a 	add	r16,r16,r16
 8011288:	8421883a 	add	r16,r16,r16
 801128c:	8c21883a 	add	r16,r17,r16
 8011290:	dc800215 	stw	r18,8(sp)
 8011294:	84bfff17 	ldw	r18,-4(r16)
 8011298:	dd000415 	stw	r20,16(sp)
 801129c:	dcc00315 	stw	r19,12(sp)
 80112a0:	9009883a 	mov	r4,r18
 80112a4:	2829883a 	mov	r20,r5
 80112a8:	dfc00515 	stw	ra,20(sp)
 80112ac:	80109480 	call	8010948 <__hi0bits>
 80112b0:	00c00804 	movi	r3,32
 80112b4:	1889c83a 	sub	r4,r3,r2
 80112b8:	a1000015 	stw	r4,0(r20)
 80112bc:	01000284 	movi	r4,10
 80112c0:	84ffff04 	addi	r19,r16,-4
 80112c4:	20801216 	blt	r4,r2,8011310 <__b2d+0xa0>
 80112c8:	018002c4 	movi	r6,11
 80112cc:	308dc83a 	sub	r6,r6,r2
 80112d0:	9186d83a 	srl	r3,r18,r6
 80112d4:	18cffc34 	orhi	r3,r3,16368
 80112d8:	8cc0212e 	bgeu	r17,r19,8011360 <__b2d+0xf0>
 80112dc:	813ffe17 	ldw	r4,-8(r16)
 80112e0:	218cd83a 	srl	r6,r4,r6
 80112e4:	10800544 	addi	r2,r2,21
 80112e8:	9084983a 	sll	r2,r18,r2
 80112ec:	1184b03a 	or	r2,r2,r6
 80112f0:	dfc00517 	ldw	ra,20(sp)
 80112f4:	dd000417 	ldw	r20,16(sp)
 80112f8:	dcc00317 	ldw	r19,12(sp)
 80112fc:	dc800217 	ldw	r18,8(sp)
 8011300:	dc400117 	ldw	r17,4(sp)
 8011304:	dc000017 	ldw	r16,0(sp)
 8011308:	dec00604 	addi	sp,sp,24
 801130c:	f800283a 	ret
 8011310:	8cc00f2e 	bgeu	r17,r19,8011350 <__b2d+0xe0>
 8011314:	117ffd44 	addi	r5,r2,-11
 8011318:	80bffe17 	ldw	r2,-8(r16)
 801131c:	28000e26 	beq	r5,zero,8011358 <__b2d+0xe8>
 8011320:	1949c83a 	sub	r4,r3,r5
 8011324:	9164983a 	sll	r18,r18,r5
 8011328:	1106d83a 	srl	r3,r2,r4
 801132c:	81bffe04 	addi	r6,r16,-8
 8011330:	948ffc34 	orhi	r18,r18,16368
 8011334:	90c6b03a 	or	r3,r18,r3
 8011338:	89800e2e 	bgeu	r17,r6,8011374 <__b2d+0x104>
 801133c:	81bffd17 	ldw	r6,-12(r16)
 8011340:	1144983a 	sll	r2,r2,r5
 8011344:	310ad83a 	srl	r5,r6,r4
 8011348:	2884b03a 	or	r2,r5,r2
 801134c:	003fe806 	br	80112f0 <__alt_data_end+0xfc0112f0>
 8011350:	10bffd44 	addi	r2,r2,-11
 8011354:	1000041e 	bne	r2,zero,8011368 <__b2d+0xf8>
 8011358:	90cffc34 	orhi	r3,r18,16368
 801135c:	003fe406 	br	80112f0 <__alt_data_end+0xfc0112f0>
 8011360:	000d883a 	mov	r6,zero
 8011364:	003fdf06 	br	80112e4 <__alt_data_end+0xfc0112e4>
 8011368:	90a4983a 	sll	r18,r18,r2
 801136c:	0005883a 	mov	r2,zero
 8011370:	003ff906 	br	8011358 <__alt_data_end+0xfc011358>
 8011374:	1144983a 	sll	r2,r2,r5
 8011378:	003fdd06 	br	80112f0 <__alt_data_end+0xfc0112f0>

0801137c <__d2b>:
 801137c:	defff804 	addi	sp,sp,-32
 8011380:	dc000215 	stw	r16,8(sp)
 8011384:	3021883a 	mov	r16,r6
 8011388:	dc400315 	stw	r17,12(sp)
 801138c:	8022907a 	slli	r17,r16,1
 8011390:	dd000615 	stw	r20,24(sp)
 8011394:	2829883a 	mov	r20,r5
 8011398:	01400044 	movi	r5,1
 801139c:	dcc00515 	stw	r19,20(sp)
 80113a0:	dc800415 	stw	r18,16(sp)
 80113a4:	dfc00715 	stw	ra,28(sp)
 80113a8:	3825883a 	mov	r18,r7
 80113ac:	8822d57a 	srli	r17,r17,21
 80113b0:	801062c0 	call	801062c <_Balloc>
 80113b4:	1027883a 	mov	r19,r2
 80113b8:	00800434 	movhi	r2,16
 80113bc:	10bfffc4 	addi	r2,r2,-1
 80113c0:	808c703a 	and	r6,r16,r2
 80113c4:	88000126 	beq	r17,zero,80113cc <__d2b+0x50>
 80113c8:	31800434 	orhi	r6,r6,16
 80113cc:	d9800015 	stw	r6,0(sp)
 80113d0:	a0002426 	beq	r20,zero,8011464 <__d2b+0xe8>
 80113d4:	d9000104 	addi	r4,sp,4
 80113d8:	dd000115 	stw	r20,4(sp)
 80113dc:	80109b00 	call	80109b0 <__lo0bits>
 80113e0:	d8c00017 	ldw	r3,0(sp)
 80113e4:	10002f1e 	bne	r2,zero,80114a4 <__d2b+0x128>
 80113e8:	d9000117 	ldw	r4,4(sp)
 80113ec:	99000515 	stw	r4,20(r19)
 80113f0:	1821003a 	cmpeq	r16,r3,zero
 80113f4:	01000084 	movi	r4,2
 80113f8:	2421c83a 	sub	r16,r4,r16
 80113fc:	98c00615 	stw	r3,24(r19)
 8011400:	9c000415 	stw	r16,16(r19)
 8011404:	88001f1e 	bne	r17,zero,8011484 <__d2b+0x108>
 8011408:	10bef384 	addi	r2,r2,-1074
 801140c:	90800015 	stw	r2,0(r18)
 8011410:	00900034 	movhi	r2,16384
 8011414:	10bfffc4 	addi	r2,r2,-1
 8011418:	8085883a 	add	r2,r16,r2
 801141c:	1085883a 	add	r2,r2,r2
 8011420:	1085883a 	add	r2,r2,r2
 8011424:	9885883a 	add	r2,r19,r2
 8011428:	11000517 	ldw	r4,20(r2)
 801142c:	8020917a 	slli	r16,r16,5
 8011430:	80109480 	call	8010948 <__hi0bits>
 8011434:	d8c00817 	ldw	r3,32(sp)
 8011438:	8085c83a 	sub	r2,r16,r2
 801143c:	18800015 	stw	r2,0(r3)
 8011440:	9805883a 	mov	r2,r19
 8011444:	dfc00717 	ldw	ra,28(sp)
 8011448:	dd000617 	ldw	r20,24(sp)
 801144c:	dcc00517 	ldw	r19,20(sp)
 8011450:	dc800417 	ldw	r18,16(sp)
 8011454:	dc400317 	ldw	r17,12(sp)
 8011458:	dc000217 	ldw	r16,8(sp)
 801145c:	dec00804 	addi	sp,sp,32
 8011460:	f800283a 	ret
 8011464:	d809883a 	mov	r4,sp
 8011468:	80109b00 	call	80109b0 <__lo0bits>
 801146c:	d8c00017 	ldw	r3,0(sp)
 8011470:	04000044 	movi	r16,1
 8011474:	9c000415 	stw	r16,16(r19)
 8011478:	98c00515 	stw	r3,20(r19)
 801147c:	10800804 	addi	r2,r2,32
 8011480:	883fe126 	beq	r17,zero,8011408 <__alt_data_end+0xfc011408>
 8011484:	00c00d44 	movi	r3,53
 8011488:	8c7ef344 	addi	r17,r17,-1075
 801148c:	88a3883a 	add	r17,r17,r2
 8011490:	1885c83a 	sub	r2,r3,r2
 8011494:	d8c00817 	ldw	r3,32(sp)
 8011498:	94400015 	stw	r17,0(r18)
 801149c:	18800015 	stw	r2,0(r3)
 80114a0:	003fe706 	br	8011440 <__alt_data_end+0xfc011440>
 80114a4:	01000804 	movi	r4,32
 80114a8:	2089c83a 	sub	r4,r4,r2
 80114ac:	1908983a 	sll	r4,r3,r4
 80114b0:	d9400117 	ldw	r5,4(sp)
 80114b4:	1886d83a 	srl	r3,r3,r2
 80114b8:	2148b03a 	or	r4,r4,r5
 80114bc:	99000515 	stw	r4,20(r19)
 80114c0:	d8c00015 	stw	r3,0(sp)
 80114c4:	003fca06 	br	80113f0 <__alt_data_end+0xfc0113f0>

080114c8 <__ratio>:
 80114c8:	defff904 	addi	sp,sp,-28
 80114cc:	dc400315 	stw	r17,12(sp)
 80114d0:	2823883a 	mov	r17,r5
 80114d4:	d9400104 	addi	r5,sp,4
 80114d8:	dfc00615 	stw	ra,24(sp)
 80114dc:	dcc00515 	stw	r19,20(sp)
 80114e0:	dc800415 	stw	r18,16(sp)
 80114e4:	2027883a 	mov	r19,r4
 80114e8:	dc000215 	stw	r16,8(sp)
 80114ec:	80112700 	call	8011270 <__b2d>
 80114f0:	d80b883a 	mov	r5,sp
 80114f4:	8809883a 	mov	r4,r17
 80114f8:	1025883a 	mov	r18,r2
 80114fc:	1821883a 	mov	r16,r3
 8011500:	80112700 	call	8011270 <__b2d>
 8011504:	8a000417 	ldw	r8,16(r17)
 8011508:	99000417 	ldw	r4,16(r19)
 801150c:	d9400117 	ldw	r5,4(sp)
 8011510:	2209c83a 	sub	r4,r4,r8
 8011514:	2010917a 	slli	r8,r4,5
 8011518:	d9000017 	ldw	r4,0(sp)
 801151c:	2909c83a 	sub	r4,r5,r4
 8011520:	4109883a 	add	r4,r8,r4
 8011524:	01000e0e 	bge	zero,r4,8011560 <__ratio+0x98>
 8011528:	2008953a 	slli	r4,r4,20
 801152c:	2421883a 	add	r16,r4,r16
 8011530:	100d883a 	mov	r6,r2
 8011534:	180f883a 	mov	r7,r3
 8011538:	9009883a 	mov	r4,r18
 801153c:	800b883a 	mov	r5,r16
 8011540:	801463c0 	call	801463c <__divdf3>
 8011544:	dfc00617 	ldw	ra,24(sp)
 8011548:	dcc00517 	ldw	r19,20(sp)
 801154c:	dc800417 	ldw	r18,16(sp)
 8011550:	dc400317 	ldw	r17,12(sp)
 8011554:	dc000217 	ldw	r16,8(sp)
 8011558:	dec00704 	addi	sp,sp,28
 801155c:	f800283a 	ret
 8011560:	2008953a 	slli	r4,r4,20
 8011564:	1907c83a 	sub	r3,r3,r4
 8011568:	003ff106 	br	8011530 <__alt_data_end+0xfc011530>

0801156c <_mprec_log10>:
 801156c:	defffe04 	addi	sp,sp,-8
 8011570:	dc000015 	stw	r16,0(sp)
 8011574:	dfc00115 	stw	ra,4(sp)
 8011578:	008005c4 	movi	r2,23
 801157c:	2021883a 	mov	r16,r4
 8011580:	11000d0e 	bge	r2,r4,80115b8 <_mprec_log10+0x4c>
 8011584:	0005883a 	mov	r2,zero
 8011588:	00cffc34 	movhi	r3,16368
 801158c:	843fffc4 	addi	r16,r16,-1
 8011590:	000d883a 	mov	r6,zero
 8011594:	01d00934 	movhi	r7,16420
 8011598:	1009883a 	mov	r4,r2
 801159c:	180b883a 	mov	r5,r3
 80115a0:	80090440 	call	8009044 <__muldf3>
 80115a4:	803ff91e 	bne	r16,zero,801158c <__alt_data_end+0xfc01158c>
 80115a8:	dfc00117 	ldw	ra,4(sp)
 80115ac:	dc000017 	ldw	r16,0(sp)
 80115b0:	dec00204 	addi	sp,sp,8
 80115b4:	f800283a 	ret
 80115b8:	202090fa 	slli	r16,r4,3
 80115bc:	00821974 	movhi	r2,2149
 80115c0:	10b77304 	addi	r2,r2,-8756
 80115c4:	1421883a 	add	r16,r2,r16
 80115c8:	80800017 	ldw	r2,0(r16)
 80115cc:	80c00117 	ldw	r3,4(r16)
 80115d0:	dfc00117 	ldw	ra,4(sp)
 80115d4:	dc000017 	ldw	r16,0(sp)
 80115d8:	dec00204 	addi	sp,sp,8
 80115dc:	f800283a 	ret

080115e0 <__copybits>:
 80115e0:	297fffc4 	addi	r5,r5,-1
 80115e4:	280fd17a 	srai	r7,r5,5
 80115e8:	30c00417 	ldw	r3,16(r6)
 80115ec:	30800504 	addi	r2,r6,20
 80115f0:	39c00044 	addi	r7,r7,1
 80115f4:	18c7883a 	add	r3,r3,r3
 80115f8:	39cf883a 	add	r7,r7,r7
 80115fc:	18c7883a 	add	r3,r3,r3
 8011600:	39cf883a 	add	r7,r7,r7
 8011604:	10c7883a 	add	r3,r2,r3
 8011608:	21cf883a 	add	r7,r4,r7
 801160c:	10c00d2e 	bgeu	r2,r3,8011644 <__copybits+0x64>
 8011610:	200b883a 	mov	r5,r4
 8011614:	12000017 	ldw	r8,0(r2)
 8011618:	29400104 	addi	r5,r5,4
 801161c:	10800104 	addi	r2,r2,4
 8011620:	2a3fff15 	stw	r8,-4(r5)
 8011624:	10fffb36 	bltu	r2,r3,8011614 <__alt_data_end+0xfc011614>
 8011628:	1985c83a 	sub	r2,r3,r6
 801162c:	10bffac4 	addi	r2,r2,-21
 8011630:	1004d0ba 	srli	r2,r2,2
 8011634:	10800044 	addi	r2,r2,1
 8011638:	1085883a 	add	r2,r2,r2
 801163c:	1085883a 	add	r2,r2,r2
 8011640:	2089883a 	add	r4,r4,r2
 8011644:	21c0032e 	bgeu	r4,r7,8011654 <__copybits+0x74>
 8011648:	20000015 	stw	zero,0(r4)
 801164c:	21000104 	addi	r4,r4,4
 8011650:	21fffd36 	bltu	r4,r7,8011648 <__alt_data_end+0xfc011648>
 8011654:	f800283a 	ret

08011658 <__any_on>:
 8011658:	20c00417 	ldw	r3,16(r4)
 801165c:	2805d17a 	srai	r2,r5,5
 8011660:	21000504 	addi	r4,r4,20
 8011664:	18800d0e 	bge	r3,r2,801169c <__any_on+0x44>
 8011668:	18c7883a 	add	r3,r3,r3
 801166c:	18c7883a 	add	r3,r3,r3
 8011670:	20c7883a 	add	r3,r4,r3
 8011674:	20c0192e 	bgeu	r4,r3,80116dc <__any_on+0x84>
 8011678:	18bfff17 	ldw	r2,-4(r3)
 801167c:	18ffff04 	addi	r3,r3,-4
 8011680:	1000041e 	bne	r2,zero,8011694 <__any_on+0x3c>
 8011684:	20c0142e 	bgeu	r4,r3,80116d8 <__any_on+0x80>
 8011688:	18ffff04 	addi	r3,r3,-4
 801168c:	19400017 	ldw	r5,0(r3)
 8011690:	283ffc26 	beq	r5,zero,8011684 <__alt_data_end+0xfc011684>
 8011694:	00800044 	movi	r2,1
 8011698:	f800283a 	ret
 801169c:	10c00a0e 	bge	r2,r3,80116c8 <__any_on+0x70>
 80116a0:	1085883a 	add	r2,r2,r2
 80116a4:	1085883a 	add	r2,r2,r2
 80116a8:	294007cc 	andi	r5,r5,31
 80116ac:	2087883a 	add	r3,r4,r2
 80116b0:	283ff026 	beq	r5,zero,8011674 <__alt_data_end+0xfc011674>
 80116b4:	19800017 	ldw	r6,0(r3)
 80116b8:	3144d83a 	srl	r2,r6,r5
 80116bc:	114a983a 	sll	r5,r2,r5
 80116c0:	317ff41e 	bne	r6,r5,8011694 <__alt_data_end+0xfc011694>
 80116c4:	003feb06 	br	8011674 <__alt_data_end+0xfc011674>
 80116c8:	1085883a 	add	r2,r2,r2
 80116cc:	1085883a 	add	r2,r2,r2
 80116d0:	2087883a 	add	r3,r4,r2
 80116d4:	003fe706 	br	8011674 <__alt_data_end+0xfc011674>
 80116d8:	f800283a 	ret
 80116dc:	0005883a 	mov	r2,zero
 80116e0:	f800283a 	ret

080116e4 <_realloc_r>:
 80116e4:	defff604 	addi	sp,sp,-40
 80116e8:	dc800215 	stw	r18,8(sp)
 80116ec:	dfc00915 	stw	ra,36(sp)
 80116f0:	df000815 	stw	fp,32(sp)
 80116f4:	ddc00715 	stw	r23,28(sp)
 80116f8:	dd800615 	stw	r22,24(sp)
 80116fc:	dd400515 	stw	r21,20(sp)
 8011700:	dd000415 	stw	r20,16(sp)
 8011704:	dcc00315 	stw	r19,12(sp)
 8011708:	dc400115 	stw	r17,4(sp)
 801170c:	dc000015 	stw	r16,0(sp)
 8011710:	3025883a 	mov	r18,r6
 8011714:	2800b726 	beq	r5,zero,80119f4 <_realloc_r+0x310>
 8011718:	282b883a 	mov	r21,r5
 801171c:	2029883a 	mov	r20,r4
 8011720:	80158000 	call	8015800 <__malloc_lock>
 8011724:	a8bfff17 	ldw	r2,-4(r21)
 8011728:	043fff04 	movi	r16,-4
 801172c:	90c002c4 	addi	r3,r18,11
 8011730:	01000584 	movi	r4,22
 8011734:	acfffe04 	addi	r19,r21,-8
 8011738:	1420703a 	and	r16,r2,r16
 801173c:	20c0332e 	bgeu	r4,r3,801180c <_realloc_r+0x128>
 8011740:	047ffe04 	movi	r17,-8
 8011744:	1c62703a 	and	r17,r3,r17
 8011748:	8807883a 	mov	r3,r17
 801174c:	88005816 	blt	r17,zero,80118b0 <_realloc_r+0x1cc>
 8011750:	8c805736 	bltu	r17,r18,80118b0 <_realloc_r+0x1cc>
 8011754:	80c0300e 	bge	r16,r3,8011818 <_realloc_r+0x134>
 8011758:	07021974 	movhi	fp,2149
 801175c:	e738ed04 	addi	fp,fp,-7244
 8011760:	e1c00217 	ldw	r7,8(fp)
 8011764:	9c09883a 	add	r4,r19,r16
 8011768:	22000117 	ldw	r8,4(r4)
 801176c:	21c06326 	beq	r4,r7,80118fc <_realloc_r+0x218>
 8011770:	017fff84 	movi	r5,-2
 8011774:	414a703a 	and	r5,r8,r5
 8011778:	214b883a 	add	r5,r4,r5
 801177c:	29800117 	ldw	r6,4(r5)
 8011780:	3180004c 	andi	r6,r6,1
 8011784:	30003f26 	beq	r6,zero,8011884 <_realloc_r+0x1a0>
 8011788:	1080004c 	andi	r2,r2,1
 801178c:	10008326 	beq	r2,zero,801199c <_realloc_r+0x2b8>
 8011790:	900b883a 	mov	r5,r18
 8011794:	a009883a 	mov	r4,r20
 8011798:	800fbe00 	call	800fbe0 <_malloc_r>
 801179c:	1025883a 	mov	r18,r2
 80117a0:	10011e26 	beq	r2,zero,8011c1c <_realloc_r+0x538>
 80117a4:	a93fff17 	ldw	r4,-4(r21)
 80117a8:	10fffe04 	addi	r3,r2,-8
 80117ac:	00bfff84 	movi	r2,-2
 80117b0:	2084703a 	and	r2,r4,r2
 80117b4:	9885883a 	add	r2,r19,r2
 80117b8:	1880ee26 	beq	r3,r2,8011b74 <_realloc_r+0x490>
 80117bc:	81bfff04 	addi	r6,r16,-4
 80117c0:	00800904 	movi	r2,36
 80117c4:	1180b836 	bltu	r2,r6,8011aa8 <_realloc_r+0x3c4>
 80117c8:	00c004c4 	movi	r3,19
 80117cc:	19809636 	bltu	r3,r6,8011a28 <_realloc_r+0x344>
 80117d0:	9005883a 	mov	r2,r18
 80117d4:	a807883a 	mov	r3,r21
 80117d8:	19000017 	ldw	r4,0(r3)
 80117dc:	11000015 	stw	r4,0(r2)
 80117e0:	19000117 	ldw	r4,4(r3)
 80117e4:	11000115 	stw	r4,4(r2)
 80117e8:	18c00217 	ldw	r3,8(r3)
 80117ec:	10c00215 	stw	r3,8(r2)
 80117f0:	a80b883a 	mov	r5,r21
 80117f4:	a009883a 	mov	r4,r20
 80117f8:	800efe80 	call	800efe8 <_free_r>
 80117fc:	a009883a 	mov	r4,r20
 8011800:	80158240 	call	8015824 <__malloc_unlock>
 8011804:	9005883a 	mov	r2,r18
 8011808:	00001206 	br	8011854 <_realloc_r+0x170>
 801180c:	00c00404 	movi	r3,16
 8011810:	1823883a 	mov	r17,r3
 8011814:	003fce06 	br	8011750 <__alt_data_end+0xfc011750>
 8011818:	a825883a 	mov	r18,r21
 801181c:	8445c83a 	sub	r2,r16,r17
 8011820:	00c003c4 	movi	r3,15
 8011824:	18802636 	bltu	r3,r2,80118c0 <_realloc_r+0x1dc>
 8011828:	99800117 	ldw	r6,4(r19)
 801182c:	9c07883a 	add	r3,r19,r16
 8011830:	3180004c 	andi	r6,r6,1
 8011834:	3420b03a 	or	r16,r6,r16
 8011838:	9c000115 	stw	r16,4(r19)
 801183c:	18800117 	ldw	r2,4(r3)
 8011840:	10800054 	ori	r2,r2,1
 8011844:	18800115 	stw	r2,4(r3)
 8011848:	a009883a 	mov	r4,r20
 801184c:	80158240 	call	8015824 <__malloc_unlock>
 8011850:	9005883a 	mov	r2,r18
 8011854:	dfc00917 	ldw	ra,36(sp)
 8011858:	df000817 	ldw	fp,32(sp)
 801185c:	ddc00717 	ldw	r23,28(sp)
 8011860:	dd800617 	ldw	r22,24(sp)
 8011864:	dd400517 	ldw	r21,20(sp)
 8011868:	dd000417 	ldw	r20,16(sp)
 801186c:	dcc00317 	ldw	r19,12(sp)
 8011870:	dc800217 	ldw	r18,8(sp)
 8011874:	dc400117 	ldw	r17,4(sp)
 8011878:	dc000017 	ldw	r16,0(sp)
 801187c:	dec00a04 	addi	sp,sp,40
 8011880:	f800283a 	ret
 8011884:	017fff04 	movi	r5,-4
 8011888:	414a703a 	and	r5,r8,r5
 801188c:	814d883a 	add	r6,r16,r5
 8011890:	30c01f16 	blt	r6,r3,8011910 <_realloc_r+0x22c>
 8011894:	20800317 	ldw	r2,12(r4)
 8011898:	20c00217 	ldw	r3,8(r4)
 801189c:	a825883a 	mov	r18,r21
 80118a0:	3021883a 	mov	r16,r6
 80118a4:	18800315 	stw	r2,12(r3)
 80118a8:	10c00215 	stw	r3,8(r2)
 80118ac:	003fdb06 	br	801181c <__alt_data_end+0xfc01181c>
 80118b0:	00800304 	movi	r2,12
 80118b4:	a0800015 	stw	r2,0(r20)
 80118b8:	0005883a 	mov	r2,zero
 80118bc:	003fe506 	br	8011854 <__alt_data_end+0xfc011854>
 80118c0:	98c00117 	ldw	r3,4(r19)
 80118c4:	9c4b883a 	add	r5,r19,r17
 80118c8:	11000054 	ori	r4,r2,1
 80118cc:	18c0004c 	andi	r3,r3,1
 80118d0:	1c62b03a 	or	r17,r3,r17
 80118d4:	9c400115 	stw	r17,4(r19)
 80118d8:	29000115 	stw	r4,4(r5)
 80118dc:	2885883a 	add	r2,r5,r2
 80118e0:	10c00117 	ldw	r3,4(r2)
 80118e4:	29400204 	addi	r5,r5,8
 80118e8:	a009883a 	mov	r4,r20
 80118ec:	18c00054 	ori	r3,r3,1
 80118f0:	10c00115 	stw	r3,4(r2)
 80118f4:	800efe80 	call	800efe8 <_free_r>
 80118f8:	003fd306 	br	8011848 <__alt_data_end+0xfc011848>
 80118fc:	017fff04 	movi	r5,-4
 8011900:	414a703a 	and	r5,r8,r5
 8011904:	89800404 	addi	r6,r17,16
 8011908:	8151883a 	add	r8,r16,r5
 801190c:	4180590e 	bge	r8,r6,8011a74 <_realloc_r+0x390>
 8011910:	1080004c 	andi	r2,r2,1
 8011914:	103f9e1e 	bne	r2,zero,8011790 <__alt_data_end+0xfc011790>
 8011918:	adbffe17 	ldw	r22,-8(r21)
 801191c:	00bfff04 	movi	r2,-4
 8011920:	9dadc83a 	sub	r22,r19,r22
 8011924:	b1800117 	ldw	r6,4(r22)
 8011928:	3084703a 	and	r2,r6,r2
 801192c:	20002026 	beq	r4,zero,80119b0 <_realloc_r+0x2cc>
 8011930:	80af883a 	add	r23,r16,r2
 8011934:	b96f883a 	add	r23,r23,r5
 8011938:	21c05f26 	beq	r4,r7,8011ab8 <_realloc_r+0x3d4>
 801193c:	b8c01c16 	blt	r23,r3,80119b0 <_realloc_r+0x2cc>
 8011940:	20800317 	ldw	r2,12(r4)
 8011944:	20c00217 	ldw	r3,8(r4)
 8011948:	81bfff04 	addi	r6,r16,-4
 801194c:	01000904 	movi	r4,36
 8011950:	18800315 	stw	r2,12(r3)
 8011954:	10c00215 	stw	r3,8(r2)
 8011958:	b0c00217 	ldw	r3,8(r22)
 801195c:	b0800317 	ldw	r2,12(r22)
 8011960:	b4800204 	addi	r18,r22,8
 8011964:	18800315 	stw	r2,12(r3)
 8011968:	10c00215 	stw	r3,8(r2)
 801196c:	21801b36 	bltu	r4,r6,80119dc <_realloc_r+0x2f8>
 8011970:	008004c4 	movi	r2,19
 8011974:	1180352e 	bgeu	r2,r6,8011a4c <_realloc_r+0x368>
 8011978:	a8800017 	ldw	r2,0(r21)
 801197c:	b0800215 	stw	r2,8(r22)
 8011980:	a8800117 	ldw	r2,4(r21)
 8011984:	b0800315 	stw	r2,12(r22)
 8011988:	008006c4 	movi	r2,27
 801198c:	11807f36 	bltu	r2,r6,8011b8c <_realloc_r+0x4a8>
 8011990:	b0800404 	addi	r2,r22,16
 8011994:	ad400204 	addi	r21,r21,8
 8011998:	00002d06 	br	8011a50 <_realloc_r+0x36c>
 801199c:	adbffe17 	ldw	r22,-8(r21)
 80119a0:	00bfff04 	movi	r2,-4
 80119a4:	9dadc83a 	sub	r22,r19,r22
 80119a8:	b1000117 	ldw	r4,4(r22)
 80119ac:	2084703a 	and	r2,r4,r2
 80119b0:	b03f7726 	beq	r22,zero,8011790 <__alt_data_end+0xfc011790>
 80119b4:	80af883a 	add	r23,r16,r2
 80119b8:	b8ff7516 	blt	r23,r3,8011790 <__alt_data_end+0xfc011790>
 80119bc:	b0800317 	ldw	r2,12(r22)
 80119c0:	b0c00217 	ldw	r3,8(r22)
 80119c4:	81bfff04 	addi	r6,r16,-4
 80119c8:	01000904 	movi	r4,36
 80119cc:	18800315 	stw	r2,12(r3)
 80119d0:	10c00215 	stw	r3,8(r2)
 80119d4:	b4800204 	addi	r18,r22,8
 80119d8:	21bfe52e 	bgeu	r4,r6,8011970 <__alt_data_end+0xfc011970>
 80119dc:	a80b883a 	mov	r5,r21
 80119e0:	9009883a 	mov	r4,r18
 80119e4:	80104d00 	call	80104d0 <memmove>
 80119e8:	b821883a 	mov	r16,r23
 80119ec:	b027883a 	mov	r19,r22
 80119f0:	003f8a06 	br	801181c <__alt_data_end+0xfc01181c>
 80119f4:	300b883a 	mov	r5,r6
 80119f8:	dfc00917 	ldw	ra,36(sp)
 80119fc:	df000817 	ldw	fp,32(sp)
 8011a00:	ddc00717 	ldw	r23,28(sp)
 8011a04:	dd800617 	ldw	r22,24(sp)
 8011a08:	dd400517 	ldw	r21,20(sp)
 8011a0c:	dd000417 	ldw	r20,16(sp)
 8011a10:	dcc00317 	ldw	r19,12(sp)
 8011a14:	dc800217 	ldw	r18,8(sp)
 8011a18:	dc400117 	ldw	r17,4(sp)
 8011a1c:	dc000017 	ldw	r16,0(sp)
 8011a20:	dec00a04 	addi	sp,sp,40
 8011a24:	800fbe01 	jmpi	800fbe0 <_malloc_r>
 8011a28:	a8c00017 	ldw	r3,0(r21)
 8011a2c:	90c00015 	stw	r3,0(r18)
 8011a30:	a8c00117 	ldw	r3,4(r21)
 8011a34:	90c00115 	stw	r3,4(r18)
 8011a38:	00c006c4 	movi	r3,27
 8011a3c:	19804536 	bltu	r3,r6,8011b54 <_realloc_r+0x470>
 8011a40:	90800204 	addi	r2,r18,8
 8011a44:	a8c00204 	addi	r3,r21,8
 8011a48:	003f6306 	br	80117d8 <__alt_data_end+0xfc0117d8>
 8011a4c:	9005883a 	mov	r2,r18
 8011a50:	a8c00017 	ldw	r3,0(r21)
 8011a54:	b821883a 	mov	r16,r23
 8011a58:	b027883a 	mov	r19,r22
 8011a5c:	10c00015 	stw	r3,0(r2)
 8011a60:	a8c00117 	ldw	r3,4(r21)
 8011a64:	10c00115 	stw	r3,4(r2)
 8011a68:	a8c00217 	ldw	r3,8(r21)
 8011a6c:	10c00215 	stw	r3,8(r2)
 8011a70:	003f6a06 	br	801181c <__alt_data_end+0xfc01181c>
 8011a74:	9c67883a 	add	r19,r19,r17
 8011a78:	4445c83a 	sub	r2,r8,r17
 8011a7c:	e4c00215 	stw	r19,8(fp)
 8011a80:	10800054 	ori	r2,r2,1
 8011a84:	98800115 	stw	r2,4(r19)
 8011a88:	a8bfff17 	ldw	r2,-4(r21)
 8011a8c:	a009883a 	mov	r4,r20
 8011a90:	1080004c 	andi	r2,r2,1
 8011a94:	1462b03a 	or	r17,r2,r17
 8011a98:	ac7fff15 	stw	r17,-4(r21)
 8011a9c:	80158240 	call	8015824 <__malloc_unlock>
 8011aa0:	a805883a 	mov	r2,r21
 8011aa4:	003f6b06 	br	8011854 <__alt_data_end+0xfc011854>
 8011aa8:	a80b883a 	mov	r5,r21
 8011aac:	9009883a 	mov	r4,r18
 8011ab0:	80104d00 	call	80104d0 <memmove>
 8011ab4:	003f4e06 	br	80117f0 <__alt_data_end+0xfc0117f0>
 8011ab8:	89000404 	addi	r4,r17,16
 8011abc:	b93fbc16 	blt	r23,r4,80119b0 <__alt_data_end+0xfc0119b0>
 8011ac0:	b0800317 	ldw	r2,12(r22)
 8011ac4:	b0c00217 	ldw	r3,8(r22)
 8011ac8:	81bfff04 	addi	r6,r16,-4
 8011acc:	01000904 	movi	r4,36
 8011ad0:	18800315 	stw	r2,12(r3)
 8011ad4:	10c00215 	stw	r3,8(r2)
 8011ad8:	b4800204 	addi	r18,r22,8
 8011adc:	21804336 	bltu	r4,r6,8011bec <_realloc_r+0x508>
 8011ae0:	008004c4 	movi	r2,19
 8011ae4:	11803f2e 	bgeu	r2,r6,8011be4 <_realloc_r+0x500>
 8011ae8:	a8800017 	ldw	r2,0(r21)
 8011aec:	b0800215 	stw	r2,8(r22)
 8011af0:	a8800117 	ldw	r2,4(r21)
 8011af4:	b0800315 	stw	r2,12(r22)
 8011af8:	008006c4 	movi	r2,27
 8011afc:	11803f36 	bltu	r2,r6,8011bfc <_realloc_r+0x518>
 8011b00:	b0800404 	addi	r2,r22,16
 8011b04:	ad400204 	addi	r21,r21,8
 8011b08:	a8c00017 	ldw	r3,0(r21)
 8011b0c:	10c00015 	stw	r3,0(r2)
 8011b10:	a8c00117 	ldw	r3,4(r21)
 8011b14:	10c00115 	stw	r3,4(r2)
 8011b18:	a8c00217 	ldw	r3,8(r21)
 8011b1c:	10c00215 	stw	r3,8(r2)
 8011b20:	b447883a 	add	r3,r22,r17
 8011b24:	bc45c83a 	sub	r2,r23,r17
 8011b28:	e0c00215 	stw	r3,8(fp)
 8011b2c:	10800054 	ori	r2,r2,1
 8011b30:	18800115 	stw	r2,4(r3)
 8011b34:	b0800117 	ldw	r2,4(r22)
 8011b38:	a009883a 	mov	r4,r20
 8011b3c:	1080004c 	andi	r2,r2,1
 8011b40:	1462b03a 	or	r17,r2,r17
 8011b44:	b4400115 	stw	r17,4(r22)
 8011b48:	80158240 	call	8015824 <__malloc_unlock>
 8011b4c:	9005883a 	mov	r2,r18
 8011b50:	003f4006 	br	8011854 <__alt_data_end+0xfc011854>
 8011b54:	a8c00217 	ldw	r3,8(r21)
 8011b58:	90c00215 	stw	r3,8(r18)
 8011b5c:	a8c00317 	ldw	r3,12(r21)
 8011b60:	90c00315 	stw	r3,12(r18)
 8011b64:	30801126 	beq	r6,r2,8011bac <_realloc_r+0x4c8>
 8011b68:	90800404 	addi	r2,r18,16
 8011b6c:	a8c00404 	addi	r3,r21,16
 8011b70:	003f1906 	br	80117d8 <__alt_data_end+0xfc0117d8>
 8011b74:	90ffff17 	ldw	r3,-4(r18)
 8011b78:	00bfff04 	movi	r2,-4
 8011b7c:	a825883a 	mov	r18,r21
 8011b80:	1884703a 	and	r2,r3,r2
 8011b84:	80a1883a 	add	r16,r16,r2
 8011b88:	003f2406 	br	801181c <__alt_data_end+0xfc01181c>
 8011b8c:	a8800217 	ldw	r2,8(r21)
 8011b90:	b0800415 	stw	r2,16(r22)
 8011b94:	a8800317 	ldw	r2,12(r21)
 8011b98:	b0800515 	stw	r2,20(r22)
 8011b9c:	31000a26 	beq	r6,r4,8011bc8 <_realloc_r+0x4e4>
 8011ba0:	b0800604 	addi	r2,r22,24
 8011ba4:	ad400404 	addi	r21,r21,16
 8011ba8:	003fa906 	br	8011a50 <__alt_data_end+0xfc011a50>
 8011bac:	a9000417 	ldw	r4,16(r21)
 8011bb0:	90800604 	addi	r2,r18,24
 8011bb4:	a8c00604 	addi	r3,r21,24
 8011bb8:	91000415 	stw	r4,16(r18)
 8011bbc:	a9000517 	ldw	r4,20(r21)
 8011bc0:	91000515 	stw	r4,20(r18)
 8011bc4:	003f0406 	br	80117d8 <__alt_data_end+0xfc0117d8>
 8011bc8:	a8c00417 	ldw	r3,16(r21)
 8011bcc:	ad400604 	addi	r21,r21,24
 8011bd0:	b0800804 	addi	r2,r22,32
 8011bd4:	b0c00615 	stw	r3,24(r22)
 8011bd8:	a8ffff17 	ldw	r3,-4(r21)
 8011bdc:	b0c00715 	stw	r3,28(r22)
 8011be0:	003f9b06 	br	8011a50 <__alt_data_end+0xfc011a50>
 8011be4:	9005883a 	mov	r2,r18
 8011be8:	003fc706 	br	8011b08 <__alt_data_end+0xfc011b08>
 8011bec:	a80b883a 	mov	r5,r21
 8011bf0:	9009883a 	mov	r4,r18
 8011bf4:	80104d00 	call	80104d0 <memmove>
 8011bf8:	003fc906 	br	8011b20 <__alt_data_end+0xfc011b20>
 8011bfc:	a8800217 	ldw	r2,8(r21)
 8011c00:	b0800415 	stw	r2,16(r22)
 8011c04:	a8800317 	ldw	r2,12(r21)
 8011c08:	b0800515 	stw	r2,20(r22)
 8011c0c:	31000726 	beq	r6,r4,8011c2c <_realloc_r+0x548>
 8011c10:	b0800604 	addi	r2,r22,24
 8011c14:	ad400404 	addi	r21,r21,16
 8011c18:	003fbb06 	br	8011b08 <__alt_data_end+0xfc011b08>
 8011c1c:	a009883a 	mov	r4,r20
 8011c20:	80158240 	call	8015824 <__malloc_unlock>
 8011c24:	0005883a 	mov	r2,zero
 8011c28:	003f0a06 	br	8011854 <__alt_data_end+0xfc011854>
 8011c2c:	a8c00417 	ldw	r3,16(r21)
 8011c30:	ad400604 	addi	r21,r21,24
 8011c34:	b0800804 	addi	r2,r22,32
 8011c38:	b0c00615 	stw	r3,24(r22)
 8011c3c:	a8ffff17 	ldw	r3,-4(r21)
 8011c40:	b0c00715 	stw	r3,28(r22)
 8011c44:	003fb006 	br	8011b08 <__alt_data_end+0xfc011b08>

08011c48 <__fpclassifyd>:
 8011c48:	00a00034 	movhi	r2,32768
 8011c4c:	10bfffc4 	addi	r2,r2,-1
 8011c50:	2884703a 	and	r2,r5,r2
 8011c54:	10000726 	beq	r2,zero,8011c74 <__fpclassifyd+0x2c>
 8011c58:	00fffc34 	movhi	r3,65520
 8011c5c:	019ff834 	movhi	r6,32736
 8011c60:	28c7883a 	add	r3,r5,r3
 8011c64:	31bfffc4 	addi	r6,r6,-1
 8011c68:	30c00536 	bltu	r6,r3,8011c80 <__fpclassifyd+0x38>
 8011c6c:	00800104 	movi	r2,4
 8011c70:	f800283a 	ret
 8011c74:	2000021e 	bne	r4,zero,8011c80 <__fpclassifyd+0x38>
 8011c78:	00800084 	movi	r2,2
 8011c7c:	f800283a 	ret
 8011c80:	00dffc34 	movhi	r3,32752
 8011c84:	019ff834 	movhi	r6,32736
 8011c88:	28cb883a 	add	r5,r5,r3
 8011c8c:	31bfffc4 	addi	r6,r6,-1
 8011c90:	317ff62e 	bgeu	r6,r5,8011c6c <__alt_data_end+0xfc011c6c>
 8011c94:	01400434 	movhi	r5,16
 8011c98:	297fffc4 	addi	r5,r5,-1
 8011c9c:	28800236 	bltu	r5,r2,8011ca8 <__fpclassifyd+0x60>
 8011ca0:	008000c4 	movi	r2,3
 8011ca4:	f800283a 	ret
 8011ca8:	10c00226 	beq	r2,r3,8011cb4 <__fpclassifyd+0x6c>
 8011cac:	0005883a 	mov	r2,zero
 8011cb0:	f800283a 	ret
 8011cb4:	2005003a 	cmpeq	r2,r4,zero
 8011cb8:	f800283a 	ret

08011cbc <_sbrk_r>:
 8011cbc:	defffd04 	addi	sp,sp,-12
 8011cc0:	dc000015 	stw	r16,0(sp)
 8011cc4:	04021974 	movhi	r16,2149
 8011cc8:	dc400115 	stw	r17,4(sp)
 8011ccc:	84056304 	addi	r16,r16,5516
 8011cd0:	2023883a 	mov	r17,r4
 8011cd4:	2809883a 	mov	r4,r5
 8011cd8:	dfc00215 	stw	ra,8(sp)
 8011cdc:	80000015 	stw	zero,0(r16)
 8011ce0:	8015a0c0 	call	8015a0c <sbrk>
 8011ce4:	00ffffc4 	movi	r3,-1
 8011ce8:	10c00526 	beq	r2,r3,8011d00 <_sbrk_r+0x44>
 8011cec:	dfc00217 	ldw	ra,8(sp)
 8011cf0:	dc400117 	ldw	r17,4(sp)
 8011cf4:	dc000017 	ldw	r16,0(sp)
 8011cf8:	dec00304 	addi	sp,sp,12
 8011cfc:	f800283a 	ret
 8011d00:	80c00017 	ldw	r3,0(r16)
 8011d04:	183ff926 	beq	r3,zero,8011cec <__alt_data_end+0xfc011cec>
 8011d08:	88c00015 	stw	r3,0(r17)
 8011d0c:	003ff706 	br	8011cec <__alt_data_end+0xfc011cec>

08011d10 <__sread>:
 8011d10:	defffe04 	addi	sp,sp,-8
 8011d14:	dc000015 	stw	r16,0(sp)
 8011d18:	2821883a 	mov	r16,r5
 8011d1c:	2940038f 	ldh	r5,14(r5)
 8011d20:	dfc00115 	stw	ra,4(sp)
 8011d24:	8013bcc0 	call	8013bcc <_read_r>
 8011d28:	10000716 	blt	r2,zero,8011d48 <__sread+0x38>
 8011d2c:	80c01417 	ldw	r3,80(r16)
 8011d30:	1887883a 	add	r3,r3,r2
 8011d34:	80c01415 	stw	r3,80(r16)
 8011d38:	dfc00117 	ldw	ra,4(sp)
 8011d3c:	dc000017 	ldw	r16,0(sp)
 8011d40:	dec00204 	addi	sp,sp,8
 8011d44:	f800283a 	ret
 8011d48:	80c0030b 	ldhu	r3,12(r16)
 8011d4c:	18fbffcc 	andi	r3,r3,61439
 8011d50:	80c0030d 	sth	r3,12(r16)
 8011d54:	dfc00117 	ldw	ra,4(sp)
 8011d58:	dc000017 	ldw	r16,0(sp)
 8011d5c:	dec00204 	addi	sp,sp,8
 8011d60:	f800283a 	ret

08011d64 <__seofread>:
 8011d64:	0005883a 	mov	r2,zero
 8011d68:	f800283a 	ret

08011d6c <__swrite>:
 8011d6c:	2880030b 	ldhu	r2,12(r5)
 8011d70:	defffb04 	addi	sp,sp,-20
 8011d74:	dcc00315 	stw	r19,12(sp)
 8011d78:	dc800215 	stw	r18,8(sp)
 8011d7c:	dc400115 	stw	r17,4(sp)
 8011d80:	dc000015 	stw	r16,0(sp)
 8011d84:	dfc00415 	stw	ra,16(sp)
 8011d88:	10c0400c 	andi	r3,r2,256
 8011d8c:	2821883a 	mov	r16,r5
 8011d90:	2023883a 	mov	r17,r4
 8011d94:	3025883a 	mov	r18,r6
 8011d98:	3827883a 	mov	r19,r7
 8011d9c:	18000526 	beq	r3,zero,8011db4 <__swrite+0x48>
 8011da0:	2940038f 	ldh	r5,14(r5)
 8011da4:	01c00084 	movi	r7,2
 8011da8:	000d883a 	mov	r6,zero
 8011dac:	8013b6c0 	call	8013b6c <_lseek_r>
 8011db0:	8080030b 	ldhu	r2,12(r16)
 8011db4:	8140038f 	ldh	r5,14(r16)
 8011db8:	10bbffcc 	andi	r2,r2,61439
 8011dbc:	980f883a 	mov	r7,r19
 8011dc0:	900d883a 	mov	r6,r18
 8011dc4:	8809883a 	mov	r4,r17
 8011dc8:	8080030d 	sth	r2,12(r16)
 8011dcc:	dfc00417 	ldw	ra,16(sp)
 8011dd0:	dcc00317 	ldw	r19,12(sp)
 8011dd4:	dc800217 	ldw	r18,8(sp)
 8011dd8:	dc400117 	ldw	r17,4(sp)
 8011ddc:	dc000017 	ldw	r16,0(sp)
 8011de0:	dec00504 	addi	sp,sp,20
 8011de4:	80136201 	jmpi	8013620 <_write_r>

08011de8 <__sseek>:
 8011de8:	defffe04 	addi	sp,sp,-8
 8011dec:	dc000015 	stw	r16,0(sp)
 8011df0:	2821883a 	mov	r16,r5
 8011df4:	2940038f 	ldh	r5,14(r5)
 8011df8:	dfc00115 	stw	ra,4(sp)
 8011dfc:	8013b6c0 	call	8013b6c <_lseek_r>
 8011e00:	00ffffc4 	movi	r3,-1
 8011e04:	10c00826 	beq	r2,r3,8011e28 <__sseek+0x40>
 8011e08:	80c0030b 	ldhu	r3,12(r16)
 8011e0c:	80801415 	stw	r2,80(r16)
 8011e10:	18c40014 	ori	r3,r3,4096
 8011e14:	80c0030d 	sth	r3,12(r16)
 8011e18:	dfc00117 	ldw	ra,4(sp)
 8011e1c:	dc000017 	ldw	r16,0(sp)
 8011e20:	dec00204 	addi	sp,sp,8
 8011e24:	f800283a 	ret
 8011e28:	80c0030b 	ldhu	r3,12(r16)
 8011e2c:	18fbffcc 	andi	r3,r3,61439
 8011e30:	80c0030d 	sth	r3,12(r16)
 8011e34:	dfc00117 	ldw	ra,4(sp)
 8011e38:	dc000017 	ldw	r16,0(sp)
 8011e3c:	dec00204 	addi	sp,sp,8
 8011e40:	f800283a 	ret

08011e44 <__sclose>:
 8011e44:	2940038f 	ldh	r5,14(r5)
 8011e48:	80136801 	jmpi	8013680 <_close_r>

08011e4c <strcmp>:
 8011e4c:	2144b03a 	or	r2,r4,r5
 8011e50:	108000cc 	andi	r2,r2,3
 8011e54:	1000171e 	bne	r2,zero,8011eb4 <strcmp+0x68>
 8011e58:	20800017 	ldw	r2,0(r4)
 8011e5c:	28c00017 	ldw	r3,0(r5)
 8011e60:	10c0141e 	bne	r2,r3,8011eb4 <strcmp+0x68>
 8011e64:	027fbff4 	movhi	r9,65279
 8011e68:	4a7fbfc4 	addi	r9,r9,-257
 8011e6c:	0086303a 	nor	r3,zero,r2
 8011e70:	02202074 	movhi	r8,32897
 8011e74:	1245883a 	add	r2,r2,r9
 8011e78:	42202004 	addi	r8,r8,-32640
 8011e7c:	10c4703a 	and	r2,r2,r3
 8011e80:	1204703a 	and	r2,r2,r8
 8011e84:	10000226 	beq	r2,zero,8011e90 <strcmp+0x44>
 8011e88:	00002306 	br	8011f18 <strcmp+0xcc>
 8011e8c:	1000221e 	bne	r2,zero,8011f18 <strcmp+0xcc>
 8011e90:	21000104 	addi	r4,r4,4
 8011e94:	20c00017 	ldw	r3,0(r4)
 8011e98:	29400104 	addi	r5,r5,4
 8011e9c:	29800017 	ldw	r6,0(r5)
 8011ea0:	1a4f883a 	add	r7,r3,r9
 8011ea4:	00c4303a 	nor	r2,zero,r3
 8011ea8:	3884703a 	and	r2,r7,r2
 8011eac:	1204703a 	and	r2,r2,r8
 8011eb0:	19bff626 	beq	r3,r6,8011e8c <__alt_data_end+0xfc011e8c>
 8011eb4:	20800003 	ldbu	r2,0(r4)
 8011eb8:	10c03fcc 	andi	r3,r2,255
 8011ebc:	18c0201c 	xori	r3,r3,128
 8011ec0:	18ffe004 	addi	r3,r3,-128
 8011ec4:	18000c26 	beq	r3,zero,8011ef8 <strcmp+0xac>
 8011ec8:	29800007 	ldb	r6,0(r5)
 8011ecc:	19800326 	beq	r3,r6,8011edc <strcmp+0x90>
 8011ed0:	00001306 	br	8011f20 <strcmp+0xd4>
 8011ed4:	29800007 	ldb	r6,0(r5)
 8011ed8:	11800b1e 	bne	r2,r6,8011f08 <strcmp+0xbc>
 8011edc:	21000044 	addi	r4,r4,1
 8011ee0:	20c00003 	ldbu	r3,0(r4)
 8011ee4:	29400044 	addi	r5,r5,1
 8011ee8:	18803fcc 	andi	r2,r3,255
 8011eec:	1080201c 	xori	r2,r2,128
 8011ef0:	10bfe004 	addi	r2,r2,-128
 8011ef4:	103ff71e 	bne	r2,zero,8011ed4 <__alt_data_end+0xfc011ed4>
 8011ef8:	0007883a 	mov	r3,zero
 8011efc:	28800003 	ldbu	r2,0(r5)
 8011f00:	1885c83a 	sub	r2,r3,r2
 8011f04:	f800283a 	ret
 8011f08:	28800003 	ldbu	r2,0(r5)
 8011f0c:	18c03fcc 	andi	r3,r3,255
 8011f10:	1885c83a 	sub	r2,r3,r2
 8011f14:	f800283a 	ret
 8011f18:	0005883a 	mov	r2,zero
 8011f1c:	f800283a 	ret
 8011f20:	10c03fcc 	andi	r3,r2,255
 8011f24:	003ff506 	br	8011efc <__alt_data_end+0xfc011efc>

08011f28 <__sprint_r.part.0>:
 8011f28:	28801917 	ldw	r2,100(r5)
 8011f2c:	defff604 	addi	sp,sp,-40
 8011f30:	dd400515 	stw	r21,20(sp)
 8011f34:	dfc00915 	stw	ra,36(sp)
 8011f38:	df000815 	stw	fp,32(sp)
 8011f3c:	ddc00715 	stw	r23,28(sp)
 8011f40:	dd800615 	stw	r22,24(sp)
 8011f44:	dd000415 	stw	r20,16(sp)
 8011f48:	dcc00315 	stw	r19,12(sp)
 8011f4c:	dc800215 	stw	r18,8(sp)
 8011f50:	dc400115 	stw	r17,4(sp)
 8011f54:	dc000015 	stw	r16,0(sp)
 8011f58:	1088000c 	andi	r2,r2,8192
 8011f5c:	302b883a 	mov	r21,r6
 8011f60:	10002e26 	beq	r2,zero,801201c <__sprint_r.part.0+0xf4>
 8011f64:	30800217 	ldw	r2,8(r6)
 8011f68:	35800017 	ldw	r22,0(r6)
 8011f6c:	10002926 	beq	r2,zero,8012014 <__sprint_r.part.0+0xec>
 8011f70:	2827883a 	mov	r19,r5
 8011f74:	2029883a 	mov	r20,r4
 8011f78:	b5c00104 	addi	r23,r22,4
 8011f7c:	04bfffc4 	movi	r18,-1
 8011f80:	bc400017 	ldw	r17,0(r23)
 8011f84:	b4000017 	ldw	r16,0(r22)
 8011f88:	0039883a 	mov	fp,zero
 8011f8c:	8822d0ba 	srli	r17,r17,2
 8011f90:	8800031e 	bne	r17,zero,8011fa0 <__sprint_r.part.0+0x78>
 8011f94:	00001806 	br	8011ff8 <__sprint_r.part.0+0xd0>
 8011f98:	84000104 	addi	r16,r16,4
 8011f9c:	8f001526 	beq	r17,fp,8011ff4 <__sprint_r.part.0+0xcc>
 8011fa0:	81400017 	ldw	r5,0(r16)
 8011fa4:	980d883a 	mov	r6,r19
 8011fa8:	a009883a 	mov	r4,r20
 8011fac:	8013a180 	call	8013a18 <_fputwc_r>
 8011fb0:	e7000044 	addi	fp,fp,1
 8011fb4:	14bff81e 	bne	r2,r18,8011f98 <__alt_data_end+0xfc011f98>
 8011fb8:	9005883a 	mov	r2,r18
 8011fbc:	a8000215 	stw	zero,8(r21)
 8011fc0:	a8000115 	stw	zero,4(r21)
 8011fc4:	dfc00917 	ldw	ra,36(sp)
 8011fc8:	df000817 	ldw	fp,32(sp)
 8011fcc:	ddc00717 	ldw	r23,28(sp)
 8011fd0:	dd800617 	ldw	r22,24(sp)
 8011fd4:	dd400517 	ldw	r21,20(sp)
 8011fd8:	dd000417 	ldw	r20,16(sp)
 8011fdc:	dcc00317 	ldw	r19,12(sp)
 8011fe0:	dc800217 	ldw	r18,8(sp)
 8011fe4:	dc400117 	ldw	r17,4(sp)
 8011fe8:	dc000017 	ldw	r16,0(sp)
 8011fec:	dec00a04 	addi	sp,sp,40
 8011ff0:	f800283a 	ret
 8011ff4:	a8800217 	ldw	r2,8(r21)
 8011ff8:	8c63883a 	add	r17,r17,r17
 8011ffc:	8c63883a 	add	r17,r17,r17
 8012000:	1445c83a 	sub	r2,r2,r17
 8012004:	a8800215 	stw	r2,8(r21)
 8012008:	b5800204 	addi	r22,r22,8
 801200c:	bdc00204 	addi	r23,r23,8
 8012010:	103fdb1e 	bne	r2,zero,8011f80 <__alt_data_end+0xfc011f80>
 8012014:	0005883a 	mov	r2,zero
 8012018:	003fe806 	br	8011fbc <__alt_data_end+0xfc011fbc>
 801201c:	800f2f80 	call	800f2f8 <__sfvwrite_r>
 8012020:	003fe606 	br	8011fbc <__alt_data_end+0xfc011fbc>

08012024 <__sprint_r>:
 8012024:	30c00217 	ldw	r3,8(r6)
 8012028:	18000126 	beq	r3,zero,8012030 <__sprint_r+0xc>
 801202c:	8011f281 	jmpi	8011f28 <__sprint_r.part.0>
 8012030:	30000115 	stw	zero,4(r6)
 8012034:	0005883a 	mov	r2,zero
 8012038:	f800283a 	ret

0801203c <___vfiprintf_internal_r>:
 801203c:	deffca04 	addi	sp,sp,-216
 8012040:	dd403115 	stw	r21,196(sp)
 8012044:	dfc03515 	stw	ra,212(sp)
 8012048:	df003415 	stw	fp,208(sp)
 801204c:	ddc03315 	stw	r23,204(sp)
 8012050:	dd803215 	stw	r22,200(sp)
 8012054:	dd003015 	stw	r20,192(sp)
 8012058:	dcc02f15 	stw	r19,188(sp)
 801205c:	dc802e15 	stw	r18,184(sp)
 8012060:	dc402d15 	stw	r17,180(sp)
 8012064:	dc002c15 	stw	r16,176(sp)
 8012068:	d9002115 	stw	r4,132(sp)
 801206c:	d9402015 	stw	r5,128(sp)
 8012070:	d9c02215 	stw	r7,136(sp)
 8012074:	302b883a 	mov	r21,r6
 8012078:	20000226 	beq	r4,zero,8012084 <___vfiprintf_internal_r+0x48>
 801207c:	20800e17 	ldw	r2,56(r4)
 8012080:	1000cf26 	beq	r2,zero,80123c0 <___vfiprintf_internal_r+0x384>
 8012084:	d8c02017 	ldw	r3,128(sp)
 8012088:	1880030b 	ldhu	r2,12(r3)
 801208c:	10c8000c 	andi	r3,r2,8192
 8012090:	1800071e 	bne	r3,zero,80120b0 <___vfiprintf_internal_r+0x74>
 8012094:	d9402017 	ldw	r5,128(sp)
 8012098:	00f7ffc4 	movi	r3,-8193
 801209c:	10880014 	ori	r2,r2,8192
 80120a0:	29001917 	ldw	r4,100(r5)
 80120a4:	2880030d 	sth	r2,12(r5)
 80120a8:	20c6703a 	and	r3,r4,r3
 80120ac:	28c01915 	stw	r3,100(r5)
 80120b0:	10c0020c 	andi	r3,r2,8
 80120b4:	1800a526 	beq	r3,zero,801234c <___vfiprintf_internal_r+0x310>
 80120b8:	d9002017 	ldw	r4,128(sp)
 80120bc:	20c00417 	ldw	r3,16(r4)
 80120c0:	1800a226 	beq	r3,zero,801234c <___vfiprintf_internal_r+0x310>
 80120c4:	1080068c 	andi	r2,r2,26
 80120c8:	00c00284 	movi	r3,10
 80120cc:	10c0a826 	beq	r2,r3,8012370 <___vfiprintf_internal_r+0x334>
 80120d0:	d9001a04 	addi	r4,sp,104
 80120d4:	d94019c4 	addi	r5,sp,103
 80120d8:	04821974 	movhi	r18,2149
 80120dc:	2145c83a 	sub	r2,r4,r5
 80120e0:	94b7a504 	addi	r18,r18,-8556
 80120e4:	d9001e15 	stw	r4,120(sp)
 80120e8:	d9401f15 	stw	r5,124(sp)
 80120ec:	dec01a15 	stw	sp,104(sp)
 80120f0:	d8001c15 	stw	zero,112(sp)
 80120f4:	d8001b15 	stw	zero,108(sp)
 80120f8:	d811883a 	mov	r8,sp
 80120fc:	d8002615 	stw	zero,152(sp)
 8012100:	d8002415 	stw	zero,144(sp)
 8012104:	d8802815 	stw	r2,160(sp)
 8012108:	a82d883a 	mov	r22,r21
 801210c:	b0800007 	ldb	r2,0(r22)
 8012110:	10040d26 	beq	r2,zero,8013148 <___vfiprintf_internal_r+0x110c>
 8012114:	00c00944 	movi	r3,37
 8012118:	b029883a 	mov	r20,r22
 801211c:	10c0021e 	bne	r2,r3,8012128 <___vfiprintf_internal_r+0xec>
 8012120:	00001606 	br	801217c <___vfiprintf_internal_r+0x140>
 8012124:	10c00326 	beq	r2,r3,8012134 <___vfiprintf_internal_r+0xf8>
 8012128:	a5000044 	addi	r20,r20,1
 801212c:	a0800007 	ldb	r2,0(r20)
 8012130:	103ffc1e 	bne	r2,zero,8012124 <__alt_data_end+0xfc012124>
 8012134:	a5a1c83a 	sub	r16,r20,r22
 8012138:	80001026 	beq	r16,zero,801217c <___vfiprintf_internal_r+0x140>
 801213c:	d8c01c17 	ldw	r3,112(sp)
 8012140:	d8801b17 	ldw	r2,108(sp)
 8012144:	45800015 	stw	r22,0(r8)
 8012148:	80c7883a 	add	r3,r16,r3
 801214c:	10800044 	addi	r2,r2,1
 8012150:	44000115 	stw	r16,4(r8)
 8012154:	d8c01c15 	stw	r3,112(sp)
 8012158:	d8801b15 	stw	r2,108(sp)
 801215c:	010001c4 	movi	r4,7
 8012160:	2080750e 	bge	r4,r2,8012338 <___vfiprintf_internal_r+0x2fc>
 8012164:	1803951e 	bne	r3,zero,8012fbc <___vfiprintf_internal_r+0xf80>
 8012168:	d8c02417 	ldw	r3,144(sp)
 801216c:	d8001b15 	stw	zero,108(sp)
 8012170:	d811883a 	mov	r8,sp
 8012174:	1c07883a 	add	r3,r3,r16
 8012178:	d8c02415 	stw	r3,144(sp)
 801217c:	a0800007 	ldb	r2,0(r20)
 8012180:	1002e026 	beq	r2,zero,8012d04 <___vfiprintf_internal_r+0xcc8>
 8012184:	a5800044 	addi	r22,r20,1
 8012188:	a0c00047 	ldb	r3,1(r20)
 801218c:	d8001d85 	stb	zero,118(sp)
 8012190:	0027883a 	mov	r19,zero
 8012194:	d8002305 	stb	zero,140(sp)
 8012198:	043fffc4 	movi	r16,-1
 801219c:	d8002515 	stw	zero,148(sp)
 80121a0:	0023883a 	mov	r17,zero
 80121a4:	05001604 	movi	r20,88
 80121a8:	05400244 	movi	r21,9
 80121ac:	402f883a 	mov	r23,r8
 80121b0:	b5800044 	addi	r22,r22,1
 80121b4:	18bff804 	addi	r2,r3,-32
 80121b8:	a0827736 	bltu	r20,r2,8012b98 <___vfiprintf_internal_r+0xb5c>
 80121bc:	100490ba 	slli	r2,r2,2
 80121c0:	01020074 	movhi	r4,2049
 80121c4:	21087504 	addi	r4,r4,8660
 80121c8:	1105883a 	add	r2,r2,r4
 80121cc:	10800017 	ldw	r2,0(r2)
 80121d0:	1000683a 	jmp	r2
 80121d4:	08012898 	cmpnei	zero,at,1186
 80121d8:	08012b98 	cmpnei	zero,at,1198
 80121dc:	08012b98 	cmpnei	zero,at,1198
 80121e0:	080128b4 	orhi	zero,at,1186
 80121e4:	08012b98 	cmpnei	zero,at,1198
 80121e8:	08012b98 	cmpnei	zero,at,1198
 80121ec:	08012b98 	cmpnei	zero,at,1198
 80121f0:	08012b98 	cmpnei	zero,at,1198
 80121f4:	08012b98 	cmpnei	zero,at,1198
 80121f8:	08012b98 	cmpnei	zero,at,1198
 80121fc:	08012abc 	xorhi	zero,at,1194
 8012200:	08012ae0 	cmpeqi	zero,at,1195
 8012204:	08012b98 	cmpnei	zero,at,1198
 8012208:	080123d8 	cmpnei	zero,at,1167
 801220c:	08012af4 	orhi	zero,at,1195
 8012210:	08012b98 	cmpnei	zero,at,1198
 8012214:	080128c0 	call	80128c <__alt_exception_stack_pointer+0x80028c>
 8012218:	080128cc 	andi	zero,at,1187
 801221c:	080128cc 	andi	zero,at,1187
 8012220:	080128cc 	andi	zero,at,1187
 8012224:	080128cc 	andi	zero,at,1187
 8012228:	080128cc 	andi	zero,at,1187
 801222c:	080128cc 	andi	zero,at,1187
 8012230:	080128cc 	andi	zero,at,1187
 8012234:	080128cc 	andi	zero,at,1187
 8012238:	080128cc 	andi	zero,at,1187
 801223c:	08012b98 	cmpnei	zero,at,1198
 8012240:	08012b98 	cmpnei	zero,at,1198
 8012244:	08012b98 	cmpnei	zero,at,1198
 8012248:	08012b98 	cmpnei	zero,at,1198
 801224c:	08012b98 	cmpnei	zero,at,1198
 8012250:	08012b98 	cmpnei	zero,at,1198
 8012254:	08012b98 	cmpnei	zero,at,1198
 8012258:	08012b98 	cmpnei	zero,at,1198
 801225c:	08012b98 	cmpnei	zero,at,1198
 8012260:	08012b98 	cmpnei	zero,at,1198
 8012264:	0801290c 	andi	zero,at,1188
 8012268:	08012b98 	cmpnei	zero,at,1198
 801226c:	08012b98 	cmpnei	zero,at,1198
 8012270:	08012b98 	cmpnei	zero,at,1198
 8012274:	08012b98 	cmpnei	zero,at,1198
 8012278:	08012b98 	cmpnei	zero,at,1198
 801227c:	08012b98 	cmpnei	zero,at,1198
 8012280:	08012b98 	cmpnei	zero,at,1198
 8012284:	08012b98 	cmpnei	zero,at,1198
 8012288:	08012b98 	cmpnei	zero,at,1198
 801228c:	08012b98 	cmpnei	zero,at,1198
 8012290:	08012948 	cmpgei	zero,at,1189
 8012294:	08012b98 	cmpnei	zero,at,1198
 8012298:	08012b98 	cmpnei	zero,at,1198
 801229c:	08012b98 	cmpnei	zero,at,1198
 80122a0:	08012b98 	cmpnei	zero,at,1198
 80122a4:	08012b98 	cmpnei	zero,at,1198
 80122a8:	080129a4 	muli	zero,at,1190
 80122ac:	08012b98 	cmpnei	zero,at,1198
 80122b0:	08012b98 	cmpnei	zero,at,1198
 80122b4:	08012a18 	cmpnei	zero,at,1192
 80122b8:	08012b98 	cmpnei	zero,at,1198
 80122bc:	08012b98 	cmpnei	zero,at,1198
 80122c0:	08012b98 	cmpnei	zero,at,1198
 80122c4:	08012b98 	cmpnei	zero,at,1198
 80122c8:	08012b98 	cmpnei	zero,at,1198
 80122cc:	08012b98 	cmpnei	zero,at,1198
 80122d0:	08012b98 	cmpnei	zero,at,1198
 80122d4:	08012b98 	cmpnei	zero,at,1198
 80122d8:	08012b98 	cmpnei	zero,at,1198
 80122dc:	08012b98 	cmpnei	zero,at,1198
 80122e0:	080127c0 	call	80127c <__alt_exception_stack_pointer+0x80027c>
 80122e4:	080127f0 	cmpltui	zero,at,1183
 80122e8:	08012b98 	cmpnei	zero,at,1198
 80122ec:	08012b98 	cmpnei	zero,at,1198
 80122f0:	08012b98 	cmpnei	zero,at,1198
 80122f4:	08012b40 	call	8012b4 <__alt_exception_stack_pointer+0x8002b4>
 80122f8:	080127f0 	cmpltui	zero,at,1183
 80122fc:	08012b98 	cmpnei	zero,at,1198
 8012300:	08012b98 	cmpnei	zero,at,1198
 8012304:	08012698 	cmpnei	zero,at,1178
 8012308:	08012b98 	cmpnei	zero,at,1198
 801230c:	080126ac 	andhi	zero,at,1178
 8012310:	080126e4 	muli	zero,at,1179
 8012314:	080123e4 	muli	zero,at,1167
 8012318:	0801268c 	andi	zero,at,1178
 801231c:	08012b98 	cmpnei	zero,at,1198
 8012320:	08012a58 	cmpnei	zero,at,1193
 8012324:	08012b98 	cmpnei	zero,at,1198
 8012328:	08012aa4 	muli	zero,at,1194
 801232c:	08012b98 	cmpnei	zero,at,1198
 8012330:	08012b98 	cmpnei	zero,at,1198
 8012334:	08012768 	cmpgeui	zero,at,1181
 8012338:	42000204 	addi	r8,r8,8
 801233c:	d8c02417 	ldw	r3,144(sp)
 8012340:	1c07883a 	add	r3,r3,r16
 8012344:	d8c02415 	stw	r3,144(sp)
 8012348:	003f8c06 	br	801217c <__alt_data_end+0xfc01217c>
 801234c:	d9402017 	ldw	r5,128(sp)
 8012350:	d9002117 	ldw	r4,132(sp)
 8012354:	800ce680 	call	800ce68 <__swsetup_r>
 8012358:	1003c11e 	bne	r2,zero,8013260 <___vfiprintf_internal_r+0x1224>
 801235c:	d9402017 	ldw	r5,128(sp)
 8012360:	00c00284 	movi	r3,10
 8012364:	2880030b 	ldhu	r2,12(r5)
 8012368:	1080068c 	andi	r2,r2,26
 801236c:	10ff581e 	bne	r2,r3,80120d0 <__alt_data_end+0xfc0120d0>
 8012370:	d8c02017 	ldw	r3,128(sp)
 8012374:	1880038f 	ldh	r2,14(r3)
 8012378:	103f5516 	blt	r2,zero,80120d0 <__alt_data_end+0xfc0120d0>
 801237c:	d9c02217 	ldw	r7,136(sp)
 8012380:	d9002117 	ldw	r4,132(sp)
 8012384:	a80d883a 	mov	r6,r21
 8012388:	180b883a 	mov	r5,r3
 801238c:	80135640 	call	8013564 <__sbprintf>
 8012390:	dfc03517 	ldw	ra,212(sp)
 8012394:	df003417 	ldw	fp,208(sp)
 8012398:	ddc03317 	ldw	r23,204(sp)
 801239c:	dd803217 	ldw	r22,200(sp)
 80123a0:	dd403117 	ldw	r21,196(sp)
 80123a4:	dd003017 	ldw	r20,192(sp)
 80123a8:	dcc02f17 	ldw	r19,188(sp)
 80123ac:	dc802e17 	ldw	r18,184(sp)
 80123b0:	dc402d17 	ldw	r17,180(sp)
 80123b4:	dc002c17 	ldw	r16,176(sp)
 80123b8:	dec03604 	addi	sp,sp,216
 80123bc:	f800283a 	ret
 80123c0:	800ee740 	call	800ee74 <__sinit>
 80123c4:	003f2f06 	br	8012084 <__alt_data_end+0xfc012084>
 80123c8:	d8c02517 	ldw	r3,148(sp)
 80123cc:	d8802215 	stw	r2,136(sp)
 80123d0:	00c7c83a 	sub	r3,zero,r3
 80123d4:	d8c02515 	stw	r3,148(sp)
 80123d8:	8c400114 	ori	r17,r17,4
 80123dc:	b0c00007 	ldb	r3,0(r22)
 80123e0:	003f7306 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80123e4:	00800c04 	movi	r2,48
 80123e8:	d9402217 	ldw	r5,136(sp)
 80123ec:	d8801d05 	stb	r2,116(sp)
 80123f0:	00801e04 	movi	r2,120
 80123f4:	d8801d45 	stb	r2,117(sp)
 80123f8:	d8001d85 	stb	zero,118(sp)
 80123fc:	b811883a 	mov	r8,r23
 8012400:	28c00104 	addi	r3,r5,4
 8012404:	2cc00017 	ldw	r19,0(r5)
 8012408:	0029883a 	mov	r20,zero
 801240c:	88800094 	ori	r2,r17,2
 8012410:	80032516 	blt	r16,zero,80130a8 <___vfiprintf_internal_r+0x106c>
 8012414:	00bfdfc4 	movi	r2,-129
 8012418:	88a2703a 	and	r17,r17,r2
 801241c:	d8c02215 	stw	r3,136(sp)
 8012420:	8c400094 	ori	r17,r17,2
 8012424:	98032a1e 	bne	r19,zero,80130d0 <___vfiprintf_internal_r+0x1094>
 8012428:	00821974 	movhi	r2,2149
 801242c:	10b74404 	addi	r2,r2,-8944
 8012430:	d8802615 	stw	r2,152(sp)
 8012434:	002b883a 	mov	r21,zero
 8012438:	8001741e 	bne	r16,zero,8012a0c <___vfiprintf_internal_r+0x9d0>
 801243c:	0021883a 	mov	r16,zero
 8012440:	0029883a 	mov	r20,zero
 8012444:	ddc01a04 	addi	r23,sp,104
 8012448:	8027883a 	mov	r19,r16
 801244c:	8500010e 	bge	r16,r20,8012454 <___vfiprintf_internal_r+0x418>
 8012450:	a027883a 	mov	r19,r20
 8012454:	ad403fcc 	andi	r21,r21,255
 8012458:	ad40201c 	xori	r21,r21,128
 801245c:	ad7fe004 	addi	r21,r21,-128
 8012460:	a8000126 	beq	r21,zero,8012468 <___vfiprintf_internal_r+0x42c>
 8012464:	9cc00044 	addi	r19,r19,1
 8012468:	89c0008c 	andi	r7,r17,2
 801246c:	38000126 	beq	r7,zero,8012474 <___vfiprintf_internal_r+0x438>
 8012470:	9cc00084 	addi	r19,r19,2
 8012474:	88c0210c 	andi	r3,r17,132
 8012478:	1801dd1e 	bne	r3,zero,8012bf0 <___vfiprintf_internal_r+0xbb4>
 801247c:	d9402517 	ldw	r5,148(sp)
 8012480:	2cebc83a 	sub	r21,r5,r19
 8012484:	0541da0e 	bge	zero,r21,8012bf0 <___vfiprintf_internal_r+0xbb4>
 8012488:	07000404 	movi	fp,16
 801248c:	d8801c17 	ldw	r2,112(sp)
 8012490:	e543be0e 	bge	fp,r21,801338c <___vfiprintf_internal_r+0x1350>
 8012494:	01421974 	movhi	r5,2149
 8012498:	2977a904 	addi	r5,r5,-8540
 801249c:	dc002715 	stw	r16,156(sp)
 80124a0:	d9801b17 	ldw	r6,108(sp)
 80124a4:	a821883a 	mov	r16,r21
 80124a8:	d9402315 	stw	r5,140(sp)
 80124ac:	028001c4 	movi	r10,7
 80124b0:	d9c02915 	stw	r7,164(sp)
 80124b4:	182b883a 	mov	r21,r3
 80124b8:	00000506 	br	80124d0 <___vfiprintf_internal_r+0x494>
 80124bc:	31000084 	addi	r4,r6,2
 80124c0:	42000204 	addi	r8,r8,8
 80124c4:	180d883a 	mov	r6,r3
 80124c8:	843ffc04 	addi	r16,r16,-16
 80124cc:	e4000f0e 	bge	fp,r16,801250c <___vfiprintf_internal_r+0x4d0>
 80124d0:	01021974 	movhi	r4,2149
 80124d4:	10800404 	addi	r2,r2,16
 80124d8:	30c00044 	addi	r3,r6,1
 80124dc:	2137a904 	addi	r4,r4,-8540
 80124e0:	41000015 	stw	r4,0(r8)
 80124e4:	47000115 	stw	fp,4(r8)
 80124e8:	d8801c15 	stw	r2,112(sp)
 80124ec:	d8c01b15 	stw	r3,108(sp)
 80124f0:	50fff20e 	bge	r10,r3,80124bc <__alt_data_end+0xfc0124bc>
 80124f4:	1001b21e 	bne	r2,zero,8012bc0 <___vfiprintf_internal_r+0xb84>
 80124f8:	843ffc04 	addi	r16,r16,-16
 80124fc:	000d883a 	mov	r6,zero
 8012500:	01000044 	movi	r4,1
 8012504:	d811883a 	mov	r8,sp
 8012508:	e43ff116 	blt	fp,r16,80124d0 <__alt_data_end+0xfc0124d0>
 801250c:	a807883a 	mov	r3,r21
 8012510:	d9c02917 	ldw	r7,164(sp)
 8012514:	802b883a 	mov	r21,r16
 8012518:	dc002717 	ldw	r16,156(sp)
 801251c:	d9402317 	ldw	r5,140(sp)
 8012520:	a885883a 	add	r2,r21,r2
 8012524:	45400115 	stw	r21,4(r8)
 8012528:	41400015 	stw	r5,0(r8)
 801252c:	d8801c15 	stw	r2,112(sp)
 8012530:	d9001b15 	stw	r4,108(sp)
 8012534:	014001c4 	movi	r5,7
 8012538:	29026216 	blt	r5,r4,8012ec4 <___vfiprintf_internal_r+0xe88>
 801253c:	d9801d87 	ldb	r6,118(sp)
 8012540:	42000204 	addi	r8,r8,8
 8012544:	21400044 	addi	r5,r4,1
 8012548:	3001ae1e 	bne	r6,zero,8012c04 <___vfiprintf_internal_r+0xbc8>
 801254c:	3801bb26 	beq	r7,zero,8012c3c <___vfiprintf_internal_r+0xc00>
 8012550:	d9001d04 	addi	r4,sp,116
 8012554:	10800084 	addi	r2,r2,2
 8012558:	41000015 	stw	r4,0(r8)
 801255c:	01000084 	movi	r4,2
 8012560:	41000115 	stw	r4,4(r8)
 8012564:	d8801c15 	stw	r2,112(sp)
 8012568:	d9401b15 	stw	r5,108(sp)
 801256c:	010001c4 	movi	r4,7
 8012570:	2142680e 	bge	r4,r5,8012f14 <___vfiprintf_internal_r+0xed8>
 8012574:	1002b11e 	bne	r2,zero,801303c <___vfiprintf_internal_r+0x1000>
 8012578:	01802004 	movi	r6,128
 801257c:	01400044 	movi	r5,1
 8012580:	0009883a 	mov	r4,zero
 8012584:	d811883a 	mov	r8,sp
 8012588:	1981ae1e 	bne	r3,r6,8012c44 <___vfiprintf_internal_r+0xc08>
 801258c:	d8c02517 	ldw	r3,148(sp)
 8012590:	1cf9c83a 	sub	fp,r3,r19
 8012594:	0701ab0e 	bge	zero,fp,8012c44 <___vfiprintf_internal_r+0xc08>
 8012598:	05400404 	movi	r21,16
 801259c:	af03a90e 	bge	r21,fp,8013444 <___vfiprintf_internal_r+0x1408>
 80125a0:	01421974 	movhi	r5,2149
 80125a4:	2977a504 	addi	r5,r5,-8556
 80125a8:	d9402315 	stw	r5,140(sp)
 80125ac:	01c001c4 	movi	r7,7
 80125b0:	00000506 	br	80125c8 <___vfiprintf_internal_r+0x58c>
 80125b4:	21800084 	addi	r6,r4,2
 80125b8:	42000204 	addi	r8,r8,8
 80125bc:	1809883a 	mov	r4,r3
 80125c0:	e73ffc04 	addi	fp,fp,-16
 80125c4:	af000d0e 	bge	r21,fp,80125fc <___vfiprintf_internal_r+0x5c0>
 80125c8:	10800404 	addi	r2,r2,16
 80125cc:	20c00044 	addi	r3,r4,1
 80125d0:	44800015 	stw	r18,0(r8)
 80125d4:	45400115 	stw	r21,4(r8)
 80125d8:	d8801c15 	stw	r2,112(sp)
 80125dc:	d8c01b15 	stw	r3,108(sp)
 80125e0:	38fff40e 	bge	r7,r3,80125b4 <__alt_data_end+0xfc0125b4>
 80125e4:	10022b1e 	bne	r2,zero,8012e94 <___vfiprintf_internal_r+0xe58>
 80125e8:	e73ffc04 	addi	fp,fp,-16
 80125ec:	01800044 	movi	r6,1
 80125f0:	0009883a 	mov	r4,zero
 80125f4:	d811883a 	mov	r8,sp
 80125f8:	af3ff316 	blt	r21,fp,80125c8 <__alt_data_end+0xfc0125c8>
 80125fc:	d8c02317 	ldw	r3,140(sp)
 8012600:	1705883a 	add	r2,r2,fp
 8012604:	47000115 	stw	fp,4(r8)
 8012608:	40c00015 	stw	r3,0(r8)
 801260c:	d8801c15 	stw	r2,112(sp)
 8012610:	d9801b15 	stw	r6,108(sp)
 8012614:	00c001c4 	movi	r3,7
 8012618:	19829416 	blt	r3,r6,801306c <___vfiprintf_internal_r+0x1030>
 801261c:	8521c83a 	sub	r16,r16,r20
 8012620:	42000204 	addi	r8,r8,8
 8012624:	31400044 	addi	r5,r6,1
 8012628:	3009883a 	mov	r4,r6
 801262c:	04018716 	blt	zero,r16,8012c4c <___vfiprintf_internal_r+0xc10>
 8012630:	a085883a 	add	r2,r20,r2
 8012634:	45c00015 	stw	r23,0(r8)
 8012638:	45000115 	stw	r20,4(r8)
 801263c:	d8801c15 	stw	r2,112(sp)
 8012640:	d9401b15 	stw	r5,108(sp)
 8012644:	00c001c4 	movi	r3,7
 8012648:	1941c20e 	bge	r3,r5,8012d54 <___vfiprintf_internal_r+0xd18>
 801264c:	1002531e 	bne	r2,zero,8012f9c <___vfiprintf_internal_r+0xf60>
 8012650:	d8001b15 	stw	zero,108(sp)
 8012654:	8c40010c 	andi	r17,r17,4
 8012658:	88023226 	beq	r17,zero,8012f24 <___vfiprintf_internal_r+0xee8>
 801265c:	d9002517 	ldw	r4,148(sp)
 8012660:	24e3c83a 	sub	r17,r4,r19
 8012664:	04432916 	blt	zero,r17,801330c <___vfiprintf_internal_r+0x12d0>
 8012668:	d8802517 	ldw	r2,148(sp)
 801266c:	14c0010e 	bge	r2,r19,8012674 <___vfiprintf_internal_r+0x638>
 8012670:	9805883a 	mov	r2,r19
 8012674:	d8c02417 	ldw	r3,144(sp)
 8012678:	1887883a 	add	r3,r3,r2
 801267c:	d8c02415 	stw	r3,144(sp)
 8012680:	d8001b15 	stw	zero,108(sp)
 8012684:	d811883a 	mov	r8,sp
 8012688:	003ea006 	br	801210c <__alt_data_end+0xfc01210c>
 801268c:	8c400814 	ori	r17,r17,32
 8012690:	b0c00007 	ldb	r3,0(r22)
 8012694:	003ec606 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8012698:	b0c00007 	ldb	r3,0(r22)
 801269c:	00801b04 	movi	r2,108
 80126a0:	18832026 	beq	r3,r2,8013324 <___vfiprintf_internal_r+0x12e8>
 80126a4:	8c400414 	ori	r17,r17,16
 80126a8:	003ec106 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80126ac:	9cc03fcc 	andi	r19,r19,255
 80126b0:	b811883a 	mov	r8,r23
 80126b4:	9803981e 	bne	r19,zero,8013518 <___vfiprintf_internal_r+0x14dc>
 80126b8:	8880080c 	andi	r2,r17,32
 80126bc:	1002be26 	beq	r2,zero,80131b8 <___vfiprintf_internal_r+0x117c>
 80126c0:	d9002217 	ldw	r4,136(sp)
 80126c4:	d9402417 	ldw	r5,144(sp)
 80126c8:	20800017 	ldw	r2,0(r4)
 80126cc:	2807d7fa 	srai	r3,r5,31
 80126d0:	21000104 	addi	r4,r4,4
 80126d4:	d9002215 	stw	r4,136(sp)
 80126d8:	11400015 	stw	r5,0(r2)
 80126dc:	10c00115 	stw	r3,4(r2)
 80126e0:	003e8a06 	br	801210c <__alt_data_end+0xfc01210c>
 80126e4:	9cc03fcc 	andi	r19,r19,255
 80126e8:	b811883a 	mov	r8,r23
 80126ec:	9803871e 	bne	r19,zero,801350c <___vfiprintf_internal_r+0x14d0>
 80126f0:	8880080c 	andi	r2,r17,32
 80126f4:	10009a26 	beq	r2,zero,8012960 <___vfiprintf_internal_r+0x924>
 80126f8:	d9002217 	ldw	r4,136(sp)
 80126fc:	d8001d85 	stb	zero,118(sp)
 8012700:	20800204 	addi	r2,r4,8
 8012704:	24c00017 	ldw	r19,0(r4)
 8012708:	25000117 	ldw	r20,4(r4)
 801270c:	8002a416 	blt	r16,zero,80131a0 <___vfiprintf_internal_r+0x1164>
 8012710:	013fdfc4 	movi	r4,-129
 8012714:	9d06b03a 	or	r3,r19,r20
 8012718:	d8802215 	stw	r2,136(sp)
 801271c:	8922703a 	and	r17,r17,r4
 8012720:	18009b26 	beq	r3,zero,8012990 <___vfiprintf_internal_r+0x954>
 8012724:	002b883a 	mov	r21,zero
 8012728:	ddc01a04 	addi	r23,sp,104
 801272c:	9806d0fa 	srli	r3,r19,3
 8012730:	a008977a 	slli	r4,r20,29
 8012734:	a028d0fa 	srli	r20,r20,3
 8012738:	9cc001cc 	andi	r19,r19,7
 801273c:	98800c04 	addi	r2,r19,48
 8012740:	bdffffc4 	addi	r23,r23,-1
 8012744:	20e6b03a 	or	r19,r4,r3
 8012748:	b8800005 	stb	r2,0(r23)
 801274c:	9d06b03a 	or	r3,r19,r20
 8012750:	183ff61e 	bne	r3,zero,801272c <__alt_data_end+0xfc01272c>
 8012754:	88c0004c 	andi	r3,r17,1
 8012758:	18021f1e 	bne	r3,zero,8012fd8 <___vfiprintf_internal_r+0xf9c>
 801275c:	d9401e17 	ldw	r5,120(sp)
 8012760:	2de9c83a 	sub	r20,r5,r23
 8012764:	003f3806 	br	8012448 <__alt_data_end+0xfc012448>
 8012768:	9cc03fcc 	andi	r19,r19,255
 801276c:	b811883a 	mov	r8,r23
 8012770:	98034f1e 	bne	r19,zero,80134b0 <___vfiprintf_internal_r+0x1474>
 8012774:	00821974 	movhi	r2,2149
 8012778:	10b74404 	addi	r2,r2,-8944
 801277c:	d8802615 	stw	r2,152(sp)
 8012780:	8880080c 	andi	r2,r17,32
 8012784:	1000ac26 	beq	r2,zero,8012a38 <___vfiprintf_internal_r+0x9fc>
 8012788:	d9002217 	ldw	r4,136(sp)
 801278c:	24c00017 	ldw	r19,0(r4)
 8012790:	25000117 	ldw	r20,4(r4)
 8012794:	21000204 	addi	r4,r4,8
 8012798:	d9002215 	stw	r4,136(sp)
 801279c:	8880004c 	andi	r2,r17,1
 80127a0:	1001e726 	beq	r2,zero,8012f40 <___vfiprintf_internal_r+0xf04>
 80127a4:	9d04b03a 	or	r2,r19,r20
 80127a8:	10025c1e 	bne	r2,zero,801311c <___vfiprintf_internal_r+0x10e0>
 80127ac:	d8001d85 	stb	zero,118(sp)
 80127b0:	80024416 	blt	r16,zero,80130c4 <___vfiprintf_internal_r+0x1088>
 80127b4:	00bfdfc4 	movi	r2,-129
 80127b8:	88a2703a 	and	r17,r17,r2
 80127bc:	003f1d06 	br	8012434 <__alt_data_end+0xfc012434>
 80127c0:	d8c02217 	ldw	r3,136(sp)
 80127c4:	04c00044 	movi	r19,1
 80127c8:	b811883a 	mov	r8,r23
 80127cc:	18800017 	ldw	r2,0(r3)
 80127d0:	18c00104 	addi	r3,r3,4
 80127d4:	d8001d85 	stb	zero,118(sp)
 80127d8:	d8801005 	stb	r2,64(sp)
 80127dc:	d8c02215 	stw	r3,136(sp)
 80127e0:	9829883a 	mov	r20,r19
 80127e4:	ddc01004 	addi	r23,sp,64
 80127e8:	0021883a 	mov	r16,zero
 80127ec:	003f1e06 	br	8012468 <__alt_data_end+0xfc012468>
 80127f0:	9cc03fcc 	andi	r19,r19,255
 80127f4:	b811883a 	mov	r8,r23
 80127f8:	9803331e 	bne	r19,zero,80134c8 <___vfiprintf_internal_r+0x148c>
 80127fc:	8880080c 	andi	r2,r17,32
 8012800:	10004826 	beq	r2,zero,8012924 <___vfiprintf_internal_r+0x8e8>
 8012804:	d9002217 	ldw	r4,136(sp)
 8012808:	20800117 	ldw	r2,4(r4)
 801280c:	24c00017 	ldw	r19,0(r4)
 8012810:	21000204 	addi	r4,r4,8
 8012814:	d9002215 	stw	r4,136(sp)
 8012818:	1029883a 	mov	r20,r2
 801281c:	10024c16 	blt	r2,zero,8013150 <___vfiprintf_internal_r+0x1114>
 8012820:	dd401d83 	ldbu	r21,118(sp)
 8012824:	80007116 	blt	r16,zero,80129ec <___vfiprintf_internal_r+0x9b0>
 8012828:	00ffdfc4 	movi	r3,-129
 801282c:	9d04b03a 	or	r2,r19,r20
 8012830:	88e2703a 	and	r17,r17,r3
 8012834:	1000d126 	beq	r2,zero,8012b7c <___vfiprintf_internal_r+0xb40>
 8012838:	a0023526 	beq	r20,zero,8013110 <___vfiprintf_internal_r+0x10d4>
 801283c:	ddc01a04 	addi	r23,sp,104
 8012840:	4039883a 	mov	fp,r8
 8012844:	9809883a 	mov	r4,r19
 8012848:	a00b883a 	mov	r5,r20
 801284c:	01800284 	movi	r6,10
 8012850:	000f883a 	mov	r7,zero
 8012854:	80140780 	call	8014078 <__umoddi3>
 8012858:	10800c04 	addi	r2,r2,48
 801285c:	bdffffc4 	addi	r23,r23,-1
 8012860:	9809883a 	mov	r4,r19
 8012864:	a00b883a 	mov	r5,r20
 8012868:	b8800005 	stb	r2,0(r23)
 801286c:	01800284 	movi	r6,10
 8012870:	000f883a 	mov	r7,zero
 8012874:	80069b00 	call	80069b0 <__udivdi3>
 8012878:	1027883a 	mov	r19,r2
 801287c:	10c4b03a 	or	r2,r2,r3
 8012880:	1829883a 	mov	r20,r3
 8012884:	103fef1e 	bne	r2,zero,8012844 <__alt_data_end+0xfc012844>
 8012888:	d9001e17 	ldw	r4,120(sp)
 801288c:	e011883a 	mov	r8,fp
 8012890:	25e9c83a 	sub	r20,r4,r23
 8012894:	003eec06 	br	8012448 <__alt_data_end+0xfc012448>
 8012898:	d8802307 	ldb	r2,140(sp)
 801289c:	1002361e 	bne	r2,zero,8013178 <___vfiprintf_internal_r+0x113c>
 80128a0:	00c00804 	movi	r3,32
 80128a4:	d8c02305 	stb	r3,140(sp)
 80128a8:	04c00044 	movi	r19,1
 80128ac:	b0c00007 	ldb	r3,0(r22)
 80128b0:	003e3f06 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80128b4:	8c400054 	ori	r17,r17,1
 80128b8:	b0c00007 	ldb	r3,0(r22)
 80128bc:	003e3c06 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80128c0:	8c402014 	ori	r17,r17,128
 80128c4:	b0c00007 	ldb	r3,0(r22)
 80128c8:	003e3906 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80128cc:	dc002715 	stw	r16,156(sp)
 80128d0:	d8002515 	stw	zero,148(sp)
 80128d4:	1f3ff404 	addi	fp,r3,-48
 80128d8:	0009883a 	mov	r4,zero
 80128dc:	b021883a 	mov	r16,r22
 80128e0:	01400284 	movi	r5,10
 80128e4:	80071600 	call	8007160 <__mulsi3>
 80128e8:	80c00007 	ldb	r3,0(r16)
 80128ec:	e089883a 	add	r4,fp,r2
 80128f0:	b5800044 	addi	r22,r22,1
 80128f4:	1f3ff404 	addi	fp,r3,-48
 80128f8:	b021883a 	mov	r16,r22
 80128fc:	af3ff82e 	bgeu	r21,fp,80128e0 <__alt_data_end+0xfc0128e0>
 8012900:	d9002515 	stw	r4,148(sp)
 8012904:	dc002717 	ldw	r16,156(sp)
 8012908:	003e2a06 	br	80121b4 <__alt_data_end+0xfc0121b4>
 801290c:	9cc03fcc 	andi	r19,r19,255
 8012910:	b811883a 	mov	r8,r23
 8012914:	9802e91e 	bne	r19,zero,80134bc <___vfiprintf_internal_r+0x1480>
 8012918:	8c400414 	ori	r17,r17,16
 801291c:	8880080c 	andi	r2,r17,32
 8012920:	103fb81e 	bne	r2,zero,8012804 <__alt_data_end+0xfc012804>
 8012924:	8880040c 	andi	r2,r17,16
 8012928:	10022e26 	beq	r2,zero,80131e4 <___vfiprintf_internal_r+0x11a8>
 801292c:	d9402217 	ldw	r5,136(sp)
 8012930:	2cc00017 	ldw	r19,0(r5)
 8012934:	29400104 	addi	r5,r5,4
 8012938:	d9402215 	stw	r5,136(sp)
 801293c:	9829d7fa 	srai	r20,r19,31
 8012940:	a005883a 	mov	r2,r20
 8012944:	003fb506 	br	801281c <__alt_data_end+0xfc01281c>
 8012948:	9cc03fcc 	andi	r19,r19,255
 801294c:	b811883a 	mov	r8,r23
 8012950:	9802fa1e 	bne	r19,zero,801353c <___vfiprintf_internal_r+0x1500>
 8012954:	8c400414 	ori	r17,r17,16
 8012958:	8880080c 	andi	r2,r17,32
 801295c:	103f661e 	bne	r2,zero,80126f8 <__alt_data_end+0xfc0126f8>
 8012960:	8880040c 	andi	r2,r17,16
 8012964:	10020626 	beq	r2,zero,8013180 <___vfiprintf_internal_r+0x1144>
 8012968:	d9402217 	ldw	r5,136(sp)
 801296c:	d8001d85 	stb	zero,118(sp)
 8012970:	0029883a 	mov	r20,zero
 8012974:	28800104 	addi	r2,r5,4
 8012978:	2cc00017 	ldw	r19,0(r5)
 801297c:	80020816 	blt	r16,zero,80131a0 <___vfiprintf_internal_r+0x1164>
 8012980:	00ffdfc4 	movi	r3,-129
 8012984:	d8802215 	stw	r2,136(sp)
 8012988:	88e2703a 	and	r17,r17,r3
 801298c:	983f651e 	bne	r19,zero,8012724 <__alt_data_end+0xfc012724>
 8012990:	002b883a 	mov	r21,zero
 8012994:	8002cf26 	beq	r16,zero,80134d4 <___vfiprintf_internal_r+0x1498>
 8012998:	0027883a 	mov	r19,zero
 801299c:	0029883a 	mov	r20,zero
 80129a0:	003f6106 	br	8012728 <__alt_data_end+0xfc012728>
 80129a4:	9cc03fcc 	andi	r19,r19,255
 80129a8:	b811883a 	mov	r8,r23
 80129ac:	9802e01e 	bne	r19,zero,8013530 <___vfiprintf_internal_r+0x14f4>
 80129b0:	8c400414 	ori	r17,r17,16
 80129b4:	8880080c 	andi	r2,r17,32
 80129b8:	1000641e 	bne	r2,zero,8012b4c <___vfiprintf_internal_r+0xb10>
 80129bc:	8880040c 	andi	r2,r17,16
 80129c0:	1001c81e 	bne	r2,zero,80130e4 <___vfiprintf_internal_r+0x10a8>
 80129c4:	8880100c 	andi	r2,r17,64
 80129c8:	d8001d85 	stb	zero,118(sp)
 80129cc:	1002281e 	bne	r2,zero,8013270 <___vfiprintf_internal_r+0x1234>
 80129d0:	d9002217 	ldw	r4,136(sp)
 80129d4:	0029883a 	mov	r20,zero
 80129d8:	20800104 	addi	r2,r4,4
 80129dc:	24c00017 	ldw	r19,0(r4)
 80129e0:	8001c60e 	bge	r16,zero,80130fc <___vfiprintf_internal_r+0x10c0>
 80129e4:	d8802215 	stw	r2,136(sp)
 80129e8:	002b883a 	mov	r21,zero
 80129ec:	9d04b03a 	or	r2,r19,r20
 80129f0:	103f911e 	bne	r2,zero,8012838 <__alt_data_end+0xfc012838>
 80129f4:	00800044 	movi	r2,1
 80129f8:	10803fcc 	andi	r2,r2,255
 80129fc:	00c00044 	movi	r3,1
 8012a00:	10c05f26 	beq	r2,r3,8012b80 <___vfiprintf_internal_r+0xb44>
 8012a04:	00c00084 	movi	r3,2
 8012a08:	10ffe31e 	bne	r2,r3,8012998 <__alt_data_end+0xfc012998>
 8012a0c:	0027883a 	mov	r19,zero
 8012a10:	0029883a 	mov	r20,zero
 8012a14:	00015106 	br	8012f5c <___vfiprintf_internal_r+0xf20>
 8012a18:	9cc03fcc 	andi	r19,r19,255
 8012a1c:	b811883a 	mov	r8,r23
 8012a20:	9802c01e 	bne	r19,zero,8013524 <___vfiprintf_internal_r+0x14e8>
 8012a24:	01421974 	movhi	r5,2149
 8012a28:	29773f04 	addi	r5,r5,-8964
 8012a2c:	d9402615 	stw	r5,152(sp)
 8012a30:	8880080c 	andi	r2,r17,32
 8012a34:	103f541e 	bne	r2,zero,8012788 <__alt_data_end+0xfc012788>
 8012a38:	8880040c 	andi	r2,r17,16
 8012a3c:	1001f226 	beq	r2,zero,8013208 <___vfiprintf_internal_r+0x11cc>
 8012a40:	d9402217 	ldw	r5,136(sp)
 8012a44:	0029883a 	mov	r20,zero
 8012a48:	2cc00017 	ldw	r19,0(r5)
 8012a4c:	29400104 	addi	r5,r5,4
 8012a50:	d9402215 	stw	r5,136(sp)
 8012a54:	003f5106 	br	801279c <__alt_data_end+0xfc01279c>
 8012a58:	d8c02217 	ldw	r3,136(sp)
 8012a5c:	b811883a 	mov	r8,r23
 8012a60:	d8001d85 	stb	zero,118(sp)
 8012a64:	1dc00017 	ldw	r23,0(r3)
 8012a68:	1f000104 	addi	fp,r3,4
 8012a6c:	b8025926 	beq	r23,zero,80133d4 <___vfiprintf_internal_r+0x1398>
 8012a70:	80023316 	blt	r16,zero,8013340 <___vfiprintf_internal_r+0x1304>
 8012a74:	800d883a 	mov	r6,r16
 8012a78:	000b883a 	mov	r5,zero
 8012a7c:	b809883a 	mov	r4,r23
 8012a80:	da002a15 	stw	r8,168(sp)
 8012a84:	80103ec0 	call	80103ec <memchr>
 8012a88:	da002a17 	ldw	r8,168(sp)
 8012a8c:	10026826 	beq	r2,zero,8013430 <___vfiprintf_internal_r+0x13f4>
 8012a90:	15e9c83a 	sub	r20,r2,r23
 8012a94:	dd401d83 	ldbu	r21,118(sp)
 8012a98:	df002215 	stw	fp,136(sp)
 8012a9c:	0021883a 	mov	r16,zero
 8012aa0:	003e6906 	br	8012448 <__alt_data_end+0xfc012448>
 8012aa4:	9cc03fcc 	andi	r19,r19,255
 8012aa8:	b811883a 	mov	r8,r23
 8012aac:	983fc126 	beq	r19,zero,80129b4 <__alt_data_end+0xfc0129b4>
 8012ab0:	d8c02303 	ldbu	r3,140(sp)
 8012ab4:	d8c01d85 	stb	r3,118(sp)
 8012ab8:	003fbe06 	br	80129b4 <__alt_data_end+0xfc0129b4>
 8012abc:	d9002217 	ldw	r4,136(sp)
 8012ac0:	d9402217 	ldw	r5,136(sp)
 8012ac4:	21000017 	ldw	r4,0(r4)
 8012ac8:	28800104 	addi	r2,r5,4
 8012acc:	d9002515 	stw	r4,148(sp)
 8012ad0:	203e3d16 	blt	r4,zero,80123c8 <__alt_data_end+0xfc0123c8>
 8012ad4:	d8802215 	stw	r2,136(sp)
 8012ad8:	b0c00007 	ldb	r3,0(r22)
 8012adc:	003db406 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8012ae0:	00c00ac4 	movi	r3,43
 8012ae4:	d8c02305 	stb	r3,140(sp)
 8012ae8:	04c00044 	movi	r19,1
 8012aec:	b0c00007 	ldb	r3,0(r22)
 8012af0:	003daf06 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8012af4:	b0c00007 	ldb	r3,0(r22)
 8012af8:	01000a84 	movi	r4,42
 8012afc:	b4000044 	addi	r16,r22,1
 8012b00:	19025e26 	beq	r3,r4,801347c <___vfiprintf_internal_r+0x1440>
 8012b04:	1f3ff404 	addi	fp,r3,-48
 8012b08:	0009883a 	mov	r4,zero
 8012b0c:	af025236 	bltu	r21,fp,8013458 <___vfiprintf_internal_r+0x141c>
 8012b10:	01400284 	movi	r5,10
 8012b14:	80071600 	call	8007160 <__mulsi3>
 8012b18:	80c00007 	ldb	r3,0(r16)
 8012b1c:	1709883a 	add	r4,r2,fp
 8012b20:	85800044 	addi	r22,r16,1
 8012b24:	1f3ff404 	addi	fp,r3,-48
 8012b28:	b021883a 	mov	r16,r22
 8012b2c:	af3ff82e 	bgeu	r21,fp,8012b10 <__alt_data_end+0xfc012b10>
 8012b30:	2021883a 	mov	r16,r4
 8012b34:	203d9f0e 	bge	r4,zero,80121b4 <__alt_data_end+0xfc0121b4>
 8012b38:	043fffc4 	movi	r16,-1
 8012b3c:	003d9d06 	br	80121b4 <__alt_data_end+0xfc0121b4>
 8012b40:	8c401014 	ori	r17,r17,64
 8012b44:	b0c00007 	ldb	r3,0(r22)
 8012b48:	003d9906 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8012b4c:	d9002217 	ldw	r4,136(sp)
 8012b50:	d8001d85 	stb	zero,118(sp)
 8012b54:	20c00204 	addi	r3,r4,8
 8012b58:	24c00017 	ldw	r19,0(r4)
 8012b5c:	25000117 	ldw	r20,4(r4)
 8012b60:	8001e716 	blt	r16,zero,8013300 <___vfiprintf_internal_r+0x12c4>
 8012b64:	013fdfc4 	movi	r4,-129
 8012b68:	9d04b03a 	or	r2,r19,r20
 8012b6c:	d8c02215 	stw	r3,136(sp)
 8012b70:	8922703a 	and	r17,r17,r4
 8012b74:	002b883a 	mov	r21,zero
 8012b78:	103f2f1e 	bne	r2,zero,8012838 <__alt_data_end+0xfc012838>
 8012b7c:	803e2f26 	beq	r16,zero,801243c <__alt_data_end+0xfc01243c>
 8012b80:	0027883a 	mov	r19,zero
 8012b84:	9cc00c04 	addi	r19,r19,48
 8012b88:	dcc019c5 	stb	r19,103(sp)
 8012b8c:	dd002817 	ldw	r20,160(sp)
 8012b90:	ddc019c4 	addi	r23,sp,103
 8012b94:	003e2c06 	br	8012448 <__alt_data_end+0xfc012448>
 8012b98:	9cc03fcc 	andi	r19,r19,255
 8012b9c:	b811883a 	mov	r8,r23
 8012ba0:	9802571e 	bne	r19,zero,8013500 <___vfiprintf_internal_r+0x14c4>
 8012ba4:	18005726 	beq	r3,zero,8012d04 <___vfiprintf_internal_r+0xcc8>
 8012ba8:	04c00044 	movi	r19,1
 8012bac:	d8c01005 	stb	r3,64(sp)
 8012bb0:	d8001d85 	stb	zero,118(sp)
 8012bb4:	9829883a 	mov	r20,r19
 8012bb8:	ddc01004 	addi	r23,sp,64
 8012bbc:	003f0a06 	br	80127e8 <__alt_data_end+0xfc0127e8>
 8012bc0:	d9402017 	ldw	r5,128(sp)
 8012bc4:	d9002117 	ldw	r4,132(sp)
 8012bc8:	d9801a04 	addi	r6,sp,104
 8012bcc:	da802a15 	stw	r10,168(sp)
 8012bd0:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012bd4:	da802a17 	ldw	r10,168(sp)
 8012bd8:	1000501e 	bne	r2,zero,8012d1c <___vfiprintf_internal_r+0xce0>
 8012bdc:	d9801b17 	ldw	r6,108(sp)
 8012be0:	d8801c17 	ldw	r2,112(sp)
 8012be4:	d811883a 	mov	r8,sp
 8012be8:	31000044 	addi	r4,r6,1
 8012bec:	003e3606 	br	80124c8 <__alt_data_end+0xfc0124c8>
 8012bf0:	d9001b17 	ldw	r4,108(sp)
 8012bf4:	d8801c17 	ldw	r2,112(sp)
 8012bf8:	21400044 	addi	r5,r4,1
 8012bfc:	d9801d87 	ldb	r6,118(sp)
 8012c00:	303e5226 	beq	r6,zero,801254c <__alt_data_end+0xfc01254c>
 8012c04:	01800044 	movi	r6,1
 8012c08:	d9001d84 	addi	r4,sp,118
 8012c0c:	1185883a 	add	r2,r2,r6
 8012c10:	41000015 	stw	r4,0(r8)
 8012c14:	41800115 	stw	r6,4(r8)
 8012c18:	d8801c15 	stw	r2,112(sp)
 8012c1c:	d9401b15 	stw	r5,108(sp)
 8012c20:	010001c4 	movi	r4,7
 8012c24:	2140b00e 	bge	r4,r5,8012ee8 <___vfiprintf_internal_r+0xeac>
 8012c28:	1000f61e 	bne	r2,zero,8013004 <___vfiprintf_internal_r+0xfc8>
 8012c2c:	3800b31e 	bne	r7,zero,8012efc <___vfiprintf_internal_r+0xec0>
 8012c30:	0009883a 	mov	r4,zero
 8012c34:	300b883a 	mov	r5,r6
 8012c38:	d811883a 	mov	r8,sp
 8012c3c:	01802004 	movi	r6,128
 8012c40:	19be5226 	beq	r3,r6,801258c <__alt_data_end+0xfc01258c>
 8012c44:	8521c83a 	sub	r16,r16,r20
 8012c48:	043e790e 	bge	zero,r16,8012630 <__alt_data_end+0xfc012630>
 8012c4c:	05400404 	movi	r21,16
 8012c50:	ac01b00e 	bge	r21,r16,8013314 <___vfiprintf_internal_r+0x12d8>
 8012c54:	01421974 	movhi	r5,2149
 8012c58:	2977a504 	addi	r5,r5,-8556
 8012c5c:	d9402315 	stw	r5,140(sp)
 8012c60:	070001c4 	movi	fp,7
 8012c64:	00000506 	br	8012c7c <___vfiprintf_internal_r+0xc40>
 8012c68:	21400084 	addi	r5,r4,2
 8012c6c:	42000204 	addi	r8,r8,8
 8012c70:	1809883a 	mov	r4,r3
 8012c74:	843ffc04 	addi	r16,r16,-16
 8012c78:	ac000d0e 	bge	r21,r16,8012cb0 <___vfiprintf_internal_r+0xc74>
 8012c7c:	10800404 	addi	r2,r2,16
 8012c80:	20c00044 	addi	r3,r4,1
 8012c84:	44800015 	stw	r18,0(r8)
 8012c88:	45400115 	stw	r21,4(r8)
 8012c8c:	d8801c15 	stw	r2,112(sp)
 8012c90:	d8c01b15 	stw	r3,108(sp)
 8012c94:	e0fff40e 	bge	fp,r3,8012c68 <__alt_data_end+0xfc012c68>
 8012c98:	1000101e 	bne	r2,zero,8012cdc <___vfiprintf_internal_r+0xca0>
 8012c9c:	843ffc04 	addi	r16,r16,-16
 8012ca0:	01400044 	movi	r5,1
 8012ca4:	0009883a 	mov	r4,zero
 8012ca8:	d811883a 	mov	r8,sp
 8012cac:	ac3ff316 	blt	r21,r16,8012c7c <__alt_data_end+0xfc012c7c>
 8012cb0:	d8c02317 	ldw	r3,140(sp)
 8012cb4:	1405883a 	add	r2,r2,r16
 8012cb8:	44000115 	stw	r16,4(r8)
 8012cbc:	40c00015 	stw	r3,0(r8)
 8012cc0:	d8801c15 	stw	r2,112(sp)
 8012cc4:	d9401b15 	stw	r5,108(sp)
 8012cc8:	00c001c4 	movi	r3,7
 8012ccc:	19401916 	blt	r3,r5,8012d34 <___vfiprintf_internal_r+0xcf8>
 8012cd0:	42000204 	addi	r8,r8,8
 8012cd4:	29400044 	addi	r5,r5,1
 8012cd8:	003e5506 	br	8012630 <__alt_data_end+0xfc012630>
 8012cdc:	d9402017 	ldw	r5,128(sp)
 8012ce0:	d9002117 	ldw	r4,132(sp)
 8012ce4:	d9801a04 	addi	r6,sp,104
 8012ce8:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012cec:	10000b1e 	bne	r2,zero,8012d1c <___vfiprintf_internal_r+0xce0>
 8012cf0:	d9001b17 	ldw	r4,108(sp)
 8012cf4:	d8801c17 	ldw	r2,112(sp)
 8012cf8:	d811883a 	mov	r8,sp
 8012cfc:	21400044 	addi	r5,r4,1
 8012d00:	003fdc06 	br	8012c74 <__alt_data_end+0xfc012c74>
 8012d04:	d8801c17 	ldw	r2,112(sp)
 8012d08:	10000426 	beq	r2,zero,8012d1c <___vfiprintf_internal_r+0xce0>
 8012d0c:	d9402017 	ldw	r5,128(sp)
 8012d10:	d9002117 	ldw	r4,132(sp)
 8012d14:	d9801a04 	addi	r6,sp,104
 8012d18:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012d1c:	d9402017 	ldw	r5,128(sp)
 8012d20:	2880030b 	ldhu	r2,12(r5)
 8012d24:	1080100c 	andi	r2,r2,64
 8012d28:	10014d1e 	bne	r2,zero,8013260 <___vfiprintf_internal_r+0x1224>
 8012d2c:	d8802417 	ldw	r2,144(sp)
 8012d30:	003d9706 	br	8012390 <__alt_data_end+0xfc012390>
 8012d34:	1000d21e 	bne	r2,zero,8013080 <___vfiprintf_internal_r+0x1044>
 8012d38:	00c00044 	movi	r3,1
 8012d3c:	a005883a 	mov	r2,r20
 8012d40:	ddc00015 	stw	r23,0(sp)
 8012d44:	dd000115 	stw	r20,4(sp)
 8012d48:	dd001c15 	stw	r20,112(sp)
 8012d4c:	d8c01b15 	stw	r3,108(sp)
 8012d50:	d811883a 	mov	r8,sp
 8012d54:	42000204 	addi	r8,r8,8
 8012d58:	8c40010c 	andi	r17,r17,4
 8012d5c:	88004026 	beq	r17,zero,8012e60 <___vfiprintf_internal_r+0xe24>
 8012d60:	d9002517 	ldw	r4,148(sp)
 8012d64:	24e3c83a 	sub	r17,r4,r19
 8012d68:	04403d0e 	bge	zero,r17,8012e60 <___vfiprintf_internal_r+0xe24>
 8012d6c:	04000404 	movi	r16,16
 8012d70:	8441a90e 	bge	r16,r17,8013418 <___vfiprintf_internal_r+0x13dc>
 8012d74:	00c21974 	movhi	r3,2149
 8012d78:	18f7a904 	addi	r3,r3,-8540
 8012d7c:	d9001b17 	ldw	r4,108(sp)
 8012d80:	d8c02315 	stw	r3,140(sp)
 8012d84:	050001c4 	movi	r20,7
 8012d88:	dd402117 	ldw	r21,132(sp)
 8012d8c:	ddc02017 	ldw	r23,128(sp)
 8012d90:	00000506 	br	8012da8 <___vfiprintf_internal_r+0xd6c>
 8012d94:	21400084 	addi	r5,r4,2
 8012d98:	42000204 	addi	r8,r8,8
 8012d9c:	1809883a 	mov	r4,r3
 8012da0:	8c7ffc04 	addi	r17,r17,-16
 8012da4:	84400f0e 	bge	r16,r17,8012de4 <___vfiprintf_internal_r+0xda8>
 8012da8:	01421974 	movhi	r5,2149
 8012dac:	10800404 	addi	r2,r2,16
 8012db0:	20c00044 	addi	r3,r4,1
 8012db4:	2977a904 	addi	r5,r5,-8540
 8012db8:	41400015 	stw	r5,0(r8)
 8012dbc:	44000115 	stw	r16,4(r8)
 8012dc0:	d8801c15 	stw	r2,112(sp)
 8012dc4:	d8c01b15 	stw	r3,108(sp)
 8012dc8:	a0fff20e 	bge	r20,r3,8012d94 <__alt_data_end+0xfc012d94>
 8012dcc:	1000141e 	bne	r2,zero,8012e20 <___vfiprintf_internal_r+0xde4>
 8012dd0:	8c7ffc04 	addi	r17,r17,-16
 8012dd4:	01400044 	movi	r5,1
 8012dd8:	0009883a 	mov	r4,zero
 8012ddc:	d811883a 	mov	r8,sp
 8012de0:	847ff116 	blt	r16,r17,8012da8 <__alt_data_end+0xfc012da8>
 8012de4:	d8c02317 	ldw	r3,140(sp)
 8012de8:	1445883a 	add	r2,r2,r17
 8012dec:	44400115 	stw	r17,4(r8)
 8012df0:	40c00015 	stw	r3,0(r8)
 8012df4:	d8801c15 	stw	r2,112(sp)
 8012df8:	d9401b15 	stw	r5,108(sp)
 8012dfc:	00c001c4 	movi	r3,7
 8012e00:	1940170e 	bge	r3,r5,8012e60 <___vfiprintf_internal_r+0xe24>
 8012e04:	1000101e 	bne	r2,zero,8012e48 <___vfiprintf_internal_r+0xe0c>
 8012e08:	d8802517 	ldw	r2,148(sp)
 8012e0c:	14c11616 	blt	r2,r19,8013268 <___vfiprintf_internal_r+0x122c>
 8012e10:	d9002417 	ldw	r4,144(sp)
 8012e14:	2089883a 	add	r4,r4,r2
 8012e18:	d9002415 	stw	r4,144(sp)
 8012e1c:	003e1806 	br	8012680 <__alt_data_end+0xfc012680>
 8012e20:	d9801a04 	addi	r6,sp,104
 8012e24:	b80b883a 	mov	r5,r23
 8012e28:	a809883a 	mov	r4,r21
 8012e2c:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012e30:	103fba1e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8012e34:	d9001b17 	ldw	r4,108(sp)
 8012e38:	d8801c17 	ldw	r2,112(sp)
 8012e3c:	d811883a 	mov	r8,sp
 8012e40:	21400044 	addi	r5,r4,1
 8012e44:	003fd606 	br	8012da0 <__alt_data_end+0xfc012da0>
 8012e48:	d9402017 	ldw	r5,128(sp)
 8012e4c:	d9002117 	ldw	r4,132(sp)
 8012e50:	d9801a04 	addi	r6,sp,104
 8012e54:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012e58:	103fb01e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8012e5c:	d8801c17 	ldw	r2,112(sp)
 8012e60:	d8c02517 	ldw	r3,148(sp)
 8012e64:	1cc0010e 	bge	r3,r19,8012e6c <___vfiprintf_internal_r+0xe30>
 8012e68:	9807883a 	mov	r3,r19
 8012e6c:	d9002417 	ldw	r4,144(sp)
 8012e70:	20c9883a 	add	r4,r4,r3
 8012e74:	d9002415 	stw	r4,144(sp)
 8012e78:	103e0126 	beq	r2,zero,8012680 <__alt_data_end+0xfc012680>
 8012e7c:	d9402017 	ldw	r5,128(sp)
 8012e80:	d9002117 	ldw	r4,132(sp)
 8012e84:	d9801a04 	addi	r6,sp,104
 8012e88:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012e8c:	103dfc26 	beq	r2,zero,8012680 <__alt_data_end+0xfc012680>
 8012e90:	003fa206 	br	8012d1c <__alt_data_end+0xfc012d1c>
 8012e94:	d9402017 	ldw	r5,128(sp)
 8012e98:	d9002117 	ldw	r4,132(sp)
 8012e9c:	d9801a04 	addi	r6,sp,104
 8012ea0:	d9c02b15 	stw	r7,172(sp)
 8012ea4:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012ea8:	d9c02b17 	ldw	r7,172(sp)
 8012eac:	103f9b1e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8012eb0:	d9001b17 	ldw	r4,108(sp)
 8012eb4:	d8801c17 	ldw	r2,112(sp)
 8012eb8:	d811883a 	mov	r8,sp
 8012ebc:	21800044 	addi	r6,r4,1
 8012ec0:	003dbf06 	br	80125c0 <__alt_data_end+0xfc0125c0>
 8012ec4:	1000d81e 	bne	r2,zero,8013228 <___vfiprintf_internal_r+0x11ec>
 8012ec8:	d9001d87 	ldb	r4,118(sp)
 8012ecc:	20000a26 	beq	r4,zero,8012ef8 <___vfiprintf_internal_r+0xebc>
 8012ed0:	00800044 	movi	r2,1
 8012ed4:	d9001d84 	addi	r4,sp,118
 8012ed8:	100b883a 	mov	r5,r2
 8012edc:	d9000015 	stw	r4,0(sp)
 8012ee0:	d8800115 	stw	r2,4(sp)
 8012ee4:	d811883a 	mov	r8,sp
 8012ee8:	2809883a 	mov	r4,r5
 8012eec:	42000204 	addi	r8,r8,8
 8012ef0:	29400044 	addi	r5,r5,1
 8012ef4:	003d9506 	br	801254c <__alt_data_end+0xfc01254c>
 8012ef8:	3800fd26 	beq	r7,zero,80132f0 <___vfiprintf_internal_r+0x12b4>
 8012efc:	00800084 	movi	r2,2
 8012f00:	d9001d04 	addi	r4,sp,116
 8012f04:	d9000015 	stw	r4,0(sp)
 8012f08:	d8800115 	stw	r2,4(sp)
 8012f0c:	01400044 	movi	r5,1
 8012f10:	d811883a 	mov	r8,sp
 8012f14:	2809883a 	mov	r4,r5
 8012f18:	42000204 	addi	r8,r8,8
 8012f1c:	29400044 	addi	r5,r5,1
 8012f20:	003f4606 	br	8012c3c <__alt_data_end+0xfc012c3c>
 8012f24:	d8802517 	ldw	r2,148(sp)
 8012f28:	14c0010e 	bge	r2,r19,8012f30 <___vfiprintf_internal_r+0xef4>
 8012f2c:	9805883a 	mov	r2,r19
 8012f30:	d9402417 	ldw	r5,144(sp)
 8012f34:	288b883a 	add	r5,r5,r2
 8012f38:	d9402415 	stw	r5,144(sp)
 8012f3c:	003dd006 	br	8012680 <__alt_data_end+0xfc012680>
 8012f40:	d8001d85 	stb	zero,118(sp)
 8012f44:	80005d16 	blt	r16,zero,80130bc <___vfiprintf_internal_r+0x1080>
 8012f48:	00ffdfc4 	movi	r3,-129
 8012f4c:	9d04b03a 	or	r2,r19,r20
 8012f50:	88e2703a 	and	r17,r17,r3
 8012f54:	103d3726 	beq	r2,zero,8012434 <__alt_data_end+0xfc012434>
 8012f58:	002b883a 	mov	r21,zero
 8012f5c:	d9002617 	ldw	r4,152(sp)
 8012f60:	ddc01a04 	addi	r23,sp,104
 8012f64:	988003cc 	andi	r2,r19,15
 8012f68:	a006973a 	slli	r3,r20,28
 8012f6c:	2085883a 	add	r2,r4,r2
 8012f70:	9826d13a 	srli	r19,r19,4
 8012f74:	10800003 	ldbu	r2,0(r2)
 8012f78:	a028d13a 	srli	r20,r20,4
 8012f7c:	bdffffc4 	addi	r23,r23,-1
 8012f80:	1ce6b03a 	or	r19,r3,r19
 8012f84:	b8800005 	stb	r2,0(r23)
 8012f88:	9d04b03a 	or	r2,r19,r20
 8012f8c:	103ff51e 	bne	r2,zero,8012f64 <__alt_data_end+0xfc012f64>
 8012f90:	d8801e17 	ldw	r2,120(sp)
 8012f94:	15e9c83a 	sub	r20,r2,r23
 8012f98:	003d2b06 	br	8012448 <__alt_data_end+0xfc012448>
 8012f9c:	d9402017 	ldw	r5,128(sp)
 8012fa0:	d9002117 	ldw	r4,132(sp)
 8012fa4:	d9801a04 	addi	r6,sp,104
 8012fa8:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012fac:	103f5b1e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8012fb0:	d8801c17 	ldw	r2,112(sp)
 8012fb4:	d811883a 	mov	r8,sp
 8012fb8:	003f6706 	br	8012d58 <__alt_data_end+0xfc012d58>
 8012fbc:	d9402017 	ldw	r5,128(sp)
 8012fc0:	d9002117 	ldw	r4,132(sp)
 8012fc4:	d9801a04 	addi	r6,sp,104
 8012fc8:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8012fcc:	103f531e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8012fd0:	d811883a 	mov	r8,sp
 8012fd4:	003cd906 	br	801233c <__alt_data_end+0xfc01233c>
 8012fd8:	10803fcc 	andi	r2,r2,255
 8012fdc:	1080201c 	xori	r2,r2,128
 8012fe0:	10bfe004 	addi	r2,r2,-128
 8012fe4:	00c00c04 	movi	r3,48
 8012fe8:	10ffe926 	beq	r2,r3,8012f90 <__alt_data_end+0xfc012f90>
 8012fec:	b8ffffc5 	stb	r3,-1(r23)
 8012ff0:	d8c01e17 	ldw	r3,120(sp)
 8012ff4:	b8bfffc4 	addi	r2,r23,-1
 8012ff8:	102f883a 	mov	r23,r2
 8012ffc:	18a9c83a 	sub	r20,r3,r2
 8013000:	003d1106 	br	8012448 <__alt_data_end+0xfc012448>
 8013004:	d9402017 	ldw	r5,128(sp)
 8013008:	d9002117 	ldw	r4,132(sp)
 801300c:	d9801a04 	addi	r6,sp,104
 8013010:	d8c02a15 	stw	r3,168(sp)
 8013014:	d9c02b15 	stw	r7,172(sp)
 8013018:	8011f280 	call	8011f28 <__sprint_r.part.0>
 801301c:	d8c02a17 	ldw	r3,168(sp)
 8013020:	d9c02b17 	ldw	r7,172(sp)
 8013024:	103f3d1e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8013028:	d9001b17 	ldw	r4,108(sp)
 801302c:	d8801c17 	ldw	r2,112(sp)
 8013030:	d811883a 	mov	r8,sp
 8013034:	21400044 	addi	r5,r4,1
 8013038:	003d4406 	br	801254c <__alt_data_end+0xfc01254c>
 801303c:	d9402017 	ldw	r5,128(sp)
 8013040:	d9002117 	ldw	r4,132(sp)
 8013044:	d9801a04 	addi	r6,sp,104
 8013048:	d8c02a15 	stw	r3,168(sp)
 801304c:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8013050:	d8c02a17 	ldw	r3,168(sp)
 8013054:	103f311e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8013058:	d9001b17 	ldw	r4,108(sp)
 801305c:	d8801c17 	ldw	r2,112(sp)
 8013060:	d811883a 	mov	r8,sp
 8013064:	21400044 	addi	r5,r4,1
 8013068:	003ef406 	br	8012c3c <__alt_data_end+0xfc012c3c>
 801306c:	1000bd1e 	bne	r2,zero,8013364 <___vfiprintf_internal_r+0x1328>
 8013070:	01400044 	movi	r5,1
 8013074:	0009883a 	mov	r4,zero
 8013078:	d811883a 	mov	r8,sp
 801307c:	003ef106 	br	8012c44 <__alt_data_end+0xfc012c44>
 8013080:	d9402017 	ldw	r5,128(sp)
 8013084:	d9002117 	ldw	r4,132(sp)
 8013088:	d9801a04 	addi	r6,sp,104
 801308c:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8013090:	103f221e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8013094:	d9401b17 	ldw	r5,108(sp)
 8013098:	d8801c17 	ldw	r2,112(sp)
 801309c:	d811883a 	mov	r8,sp
 80130a0:	29400044 	addi	r5,r5,1
 80130a4:	003d6206 	br	8012630 <__alt_data_end+0xfc012630>
 80130a8:	01421974 	movhi	r5,2149
 80130ac:	29774404 	addi	r5,r5,-8944
 80130b0:	d9402615 	stw	r5,152(sp)
 80130b4:	d8c02215 	stw	r3,136(sp)
 80130b8:	1023883a 	mov	r17,r2
 80130bc:	9d04b03a 	or	r2,r19,r20
 80130c0:	103fa51e 	bne	r2,zero,8012f58 <__alt_data_end+0xfc012f58>
 80130c4:	002b883a 	mov	r21,zero
 80130c8:	00800084 	movi	r2,2
 80130cc:	003e4a06 	br	80129f8 <__alt_data_end+0xfc0129f8>
 80130d0:	01421974 	movhi	r5,2149
 80130d4:	29774404 	addi	r5,r5,-8944
 80130d8:	002b883a 	mov	r21,zero
 80130dc:	d9402615 	stw	r5,152(sp)
 80130e0:	003f9e06 	br	8012f5c <__alt_data_end+0xfc012f5c>
 80130e4:	d9402217 	ldw	r5,136(sp)
 80130e8:	d8001d85 	stb	zero,118(sp)
 80130ec:	0029883a 	mov	r20,zero
 80130f0:	28800104 	addi	r2,r5,4
 80130f4:	2cc00017 	ldw	r19,0(r5)
 80130f8:	803e3a16 	blt	r16,zero,80129e4 <__alt_data_end+0xfc0129e4>
 80130fc:	00ffdfc4 	movi	r3,-129
 8013100:	d8802215 	stw	r2,136(sp)
 8013104:	88e2703a 	and	r17,r17,r3
 8013108:	002b883a 	mov	r21,zero
 801310c:	983e9b26 	beq	r19,zero,8012b7c <__alt_data_end+0xfc012b7c>
 8013110:	00800244 	movi	r2,9
 8013114:	14fdc936 	bltu	r2,r19,801283c <__alt_data_end+0xfc01283c>
 8013118:	003e9a06 	br	8012b84 <__alt_data_end+0xfc012b84>
 801311c:	00800c04 	movi	r2,48
 8013120:	d8c01d45 	stb	r3,117(sp)
 8013124:	d8801d05 	stb	r2,116(sp)
 8013128:	d8001d85 	stb	zero,118(sp)
 801312c:	88c00094 	ori	r3,r17,2
 8013130:	80009c16 	blt	r16,zero,80133a4 <___vfiprintf_internal_r+0x1368>
 8013134:	00bfdfc4 	movi	r2,-129
 8013138:	88a2703a 	and	r17,r17,r2
 801313c:	8c400094 	ori	r17,r17,2
 8013140:	002b883a 	mov	r21,zero
 8013144:	003f8506 	br	8012f5c <__alt_data_end+0xfc012f5c>
 8013148:	b029883a 	mov	r20,r22
 801314c:	003c0b06 	br	801217c <__alt_data_end+0xfc01217c>
 8013150:	04e7c83a 	sub	r19,zero,r19
 8013154:	05400b44 	movi	r21,45
 8013158:	9804c03a 	cmpne	r2,r19,zero
 801315c:	0529c83a 	sub	r20,zero,r20
 8013160:	dd401d85 	stb	r21,118(sp)
 8013164:	a0a9c83a 	sub	r20,r20,r2
 8013168:	80009716 	blt	r16,zero,80133c8 <___vfiprintf_internal_r+0x138c>
 801316c:	00bfdfc4 	movi	r2,-129
 8013170:	88a2703a 	and	r17,r17,r2
 8013174:	003db006 	br	8012838 <__alt_data_end+0xfc012838>
 8013178:	b0c00007 	ldb	r3,0(r22)
 801317c:	003c0c06 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8013180:	8880100c 	andi	r2,r17,64
 8013184:	d8001d85 	stb	zero,118(sp)
 8013188:	1000461e 	bne	r2,zero,80132a4 <___vfiprintf_internal_r+0x1268>
 801318c:	d9002217 	ldw	r4,136(sp)
 8013190:	0029883a 	mov	r20,zero
 8013194:	20800104 	addi	r2,r4,4
 8013198:	24c00017 	ldw	r19,0(r4)
 801319c:	803df80e 	bge	r16,zero,8012980 <__alt_data_end+0xfc012980>
 80131a0:	9d06b03a 	or	r3,r19,r20
 80131a4:	d8802215 	stw	r2,136(sp)
 80131a8:	183d5e1e 	bne	r3,zero,8012724 <__alt_data_end+0xfc012724>
 80131ac:	002b883a 	mov	r21,zero
 80131b0:	0005883a 	mov	r2,zero
 80131b4:	003e1006 	br	80129f8 <__alt_data_end+0xfc0129f8>
 80131b8:	8880040c 	andi	r2,r17,16
 80131bc:	1000321e 	bne	r2,zero,8013288 <___vfiprintf_internal_r+0x124c>
 80131c0:	8c40100c 	andi	r17,r17,64
 80131c4:	88008d26 	beq	r17,zero,80133fc <___vfiprintf_internal_r+0x13c0>
 80131c8:	d9402217 	ldw	r5,136(sp)
 80131cc:	d8c02417 	ldw	r3,144(sp)
 80131d0:	28800017 	ldw	r2,0(r5)
 80131d4:	29400104 	addi	r5,r5,4
 80131d8:	d9402215 	stw	r5,136(sp)
 80131dc:	10c0000d 	sth	r3,0(r2)
 80131e0:	003bca06 	br	801210c <__alt_data_end+0xfc01210c>
 80131e4:	8880100c 	andi	r2,r17,64
 80131e8:	10003a26 	beq	r2,zero,80132d4 <___vfiprintf_internal_r+0x1298>
 80131ec:	d8802217 	ldw	r2,136(sp)
 80131f0:	14c0000f 	ldh	r19,0(r2)
 80131f4:	10800104 	addi	r2,r2,4
 80131f8:	d8802215 	stw	r2,136(sp)
 80131fc:	9829d7fa 	srai	r20,r19,31
 8013200:	a005883a 	mov	r2,r20
 8013204:	003d8506 	br	801281c <__alt_data_end+0xfc01281c>
 8013208:	8880100c 	andi	r2,r17,64
 801320c:	10002b26 	beq	r2,zero,80132bc <___vfiprintf_internal_r+0x1280>
 8013210:	d8802217 	ldw	r2,136(sp)
 8013214:	0029883a 	mov	r20,zero
 8013218:	14c0000b 	ldhu	r19,0(r2)
 801321c:	10800104 	addi	r2,r2,4
 8013220:	d8802215 	stw	r2,136(sp)
 8013224:	003d5d06 	br	801279c <__alt_data_end+0xfc01279c>
 8013228:	d9402017 	ldw	r5,128(sp)
 801322c:	d9002117 	ldw	r4,132(sp)
 8013230:	d9801a04 	addi	r6,sp,104
 8013234:	d8c02a15 	stw	r3,168(sp)
 8013238:	d9c02b15 	stw	r7,172(sp)
 801323c:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8013240:	d8c02a17 	ldw	r3,168(sp)
 8013244:	d9c02b17 	ldw	r7,172(sp)
 8013248:	103eb41e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 801324c:	d9001b17 	ldw	r4,108(sp)
 8013250:	d8801c17 	ldw	r2,112(sp)
 8013254:	d811883a 	mov	r8,sp
 8013258:	21400044 	addi	r5,r4,1
 801325c:	003e6706 	br	8012bfc <__alt_data_end+0xfc012bfc>
 8013260:	00bfffc4 	movi	r2,-1
 8013264:	003c4a06 	br	8012390 <__alt_data_end+0xfc012390>
 8013268:	9805883a 	mov	r2,r19
 801326c:	003ee806 	br	8012e10 <__alt_data_end+0xfc012e10>
 8013270:	d8c02217 	ldw	r3,136(sp)
 8013274:	0029883a 	mov	r20,zero
 8013278:	18800104 	addi	r2,r3,4
 801327c:	1cc0000b 	ldhu	r19,0(r3)
 8013280:	803f9e0e 	bge	r16,zero,80130fc <__alt_data_end+0xfc0130fc>
 8013284:	003dd706 	br	80129e4 <__alt_data_end+0xfc0129e4>
 8013288:	d8c02217 	ldw	r3,136(sp)
 801328c:	d9002417 	ldw	r4,144(sp)
 8013290:	18800017 	ldw	r2,0(r3)
 8013294:	18c00104 	addi	r3,r3,4
 8013298:	d8c02215 	stw	r3,136(sp)
 801329c:	11000015 	stw	r4,0(r2)
 80132a0:	003b9a06 	br	801210c <__alt_data_end+0xfc01210c>
 80132a4:	d8c02217 	ldw	r3,136(sp)
 80132a8:	0029883a 	mov	r20,zero
 80132ac:	18800104 	addi	r2,r3,4
 80132b0:	1cc0000b 	ldhu	r19,0(r3)
 80132b4:	803db20e 	bge	r16,zero,8012980 <__alt_data_end+0xfc012980>
 80132b8:	003fb906 	br	80131a0 <__alt_data_end+0xfc0131a0>
 80132bc:	d9002217 	ldw	r4,136(sp)
 80132c0:	0029883a 	mov	r20,zero
 80132c4:	24c00017 	ldw	r19,0(r4)
 80132c8:	21000104 	addi	r4,r4,4
 80132cc:	d9002215 	stw	r4,136(sp)
 80132d0:	003d3206 	br	801279c <__alt_data_end+0xfc01279c>
 80132d4:	d8c02217 	ldw	r3,136(sp)
 80132d8:	1cc00017 	ldw	r19,0(r3)
 80132dc:	18c00104 	addi	r3,r3,4
 80132e0:	d8c02215 	stw	r3,136(sp)
 80132e4:	9829d7fa 	srai	r20,r19,31
 80132e8:	a005883a 	mov	r2,r20
 80132ec:	003d4b06 	br	801281c <__alt_data_end+0xfc01281c>
 80132f0:	0009883a 	mov	r4,zero
 80132f4:	01400044 	movi	r5,1
 80132f8:	d811883a 	mov	r8,sp
 80132fc:	003e4f06 	br	8012c3c <__alt_data_end+0xfc012c3c>
 8013300:	d8c02215 	stw	r3,136(sp)
 8013304:	002b883a 	mov	r21,zero
 8013308:	003db806 	br	80129ec <__alt_data_end+0xfc0129ec>
 801330c:	d811883a 	mov	r8,sp
 8013310:	003e9606 	br	8012d6c <__alt_data_end+0xfc012d6c>
 8013314:	01021974 	movhi	r4,2149
 8013318:	2137a504 	addi	r4,r4,-8556
 801331c:	d9002315 	stw	r4,140(sp)
 8013320:	003e6306 	br	8012cb0 <__alt_data_end+0xfc012cb0>
 8013324:	b0c00043 	ldbu	r3,1(r22)
 8013328:	8c400814 	ori	r17,r17,32
 801332c:	b5800044 	addi	r22,r22,1
 8013330:	18c03fcc 	andi	r3,r3,255
 8013334:	18c0201c 	xori	r3,r3,128
 8013338:	18ffe004 	addi	r3,r3,-128
 801333c:	003b9c06 	br	80121b0 <__alt_data_end+0xfc0121b0>
 8013340:	b809883a 	mov	r4,r23
 8013344:	da002a15 	stw	r8,168(sp)
 8013348:	800aa1c0 	call	800aa1c <strlen>
 801334c:	1029883a 	mov	r20,r2
 8013350:	dd401d83 	ldbu	r21,118(sp)
 8013354:	df002215 	stw	fp,136(sp)
 8013358:	0021883a 	mov	r16,zero
 801335c:	da002a17 	ldw	r8,168(sp)
 8013360:	003c3906 	br	8012448 <__alt_data_end+0xfc012448>
 8013364:	d9402017 	ldw	r5,128(sp)
 8013368:	d9002117 	ldw	r4,132(sp)
 801336c:	d9801a04 	addi	r6,sp,104
 8013370:	8011f280 	call	8011f28 <__sprint_r.part.0>
 8013374:	103e691e 	bne	r2,zero,8012d1c <__alt_data_end+0xfc012d1c>
 8013378:	d9001b17 	ldw	r4,108(sp)
 801337c:	d8801c17 	ldw	r2,112(sp)
 8013380:	d811883a 	mov	r8,sp
 8013384:	21400044 	addi	r5,r4,1
 8013388:	003e2e06 	br	8012c44 <__alt_data_end+0xfc012c44>
 801338c:	01021974 	movhi	r4,2149
 8013390:	2137a904 	addi	r4,r4,-8540
 8013394:	d9002315 	stw	r4,140(sp)
 8013398:	d9001b17 	ldw	r4,108(sp)
 801339c:	21000044 	addi	r4,r4,1
 80133a0:	003c5e06 	br	801251c <__alt_data_end+0xfc01251c>
 80133a4:	002b883a 	mov	r21,zero
 80133a8:	00800084 	movi	r2,2
 80133ac:	10803fcc 	andi	r2,r2,255
 80133b0:	01000044 	movi	r4,1
 80133b4:	11002b26 	beq	r2,r4,8013464 <___vfiprintf_internal_r+0x1428>
 80133b8:	01000084 	movi	r4,2
 80133bc:	11002b1e 	bne	r2,r4,801346c <___vfiprintf_internal_r+0x1430>
 80133c0:	1823883a 	mov	r17,r3
 80133c4:	003ee506 	br	8012f5c <__alt_data_end+0xfc012f5c>
 80133c8:	8807883a 	mov	r3,r17
 80133cc:	00800044 	movi	r2,1
 80133d0:	003ff606 	br	80133ac <__alt_data_end+0xfc0133ac>
 80133d4:	00800184 	movi	r2,6
 80133d8:	1400012e 	bgeu	r2,r16,80133e0 <___vfiprintf_internal_r+0x13a4>
 80133dc:	1021883a 	mov	r16,r2
 80133e0:	8029883a 	mov	r20,r16
 80133e4:	8027883a 	mov	r19,r16
 80133e8:	80002216 	blt	r16,zero,8013474 <___vfiprintf_internal_r+0x1438>
 80133ec:	05c21974 	movhi	r23,2149
 80133f0:	df002215 	stw	fp,136(sp)
 80133f4:	bdf74904 	addi	r23,r23,-8924
 80133f8:	003cfb06 	br	80127e8 <__alt_data_end+0xfc0127e8>
 80133fc:	d9002217 	ldw	r4,136(sp)
 8013400:	d9402417 	ldw	r5,144(sp)
 8013404:	20800017 	ldw	r2,0(r4)
 8013408:	21000104 	addi	r4,r4,4
 801340c:	d9002215 	stw	r4,136(sp)
 8013410:	11400015 	stw	r5,0(r2)
 8013414:	003b3d06 	br	801210c <__alt_data_end+0xfc01210c>
 8013418:	01421974 	movhi	r5,2149
 801341c:	2977a904 	addi	r5,r5,-8540
 8013420:	d9402315 	stw	r5,140(sp)
 8013424:	d9401b17 	ldw	r5,108(sp)
 8013428:	29400044 	addi	r5,r5,1
 801342c:	003e6d06 	br	8012de4 <__alt_data_end+0xfc012de4>
 8013430:	8029883a 	mov	r20,r16
 8013434:	dd401d83 	ldbu	r21,118(sp)
 8013438:	df002215 	stw	fp,136(sp)
 801343c:	0021883a 	mov	r16,zero
 8013440:	003c0106 	br	8012448 <__alt_data_end+0xfc012448>
 8013444:	00c21974 	movhi	r3,2149
 8013448:	18f7a504 	addi	r3,r3,-8556
 801344c:	d8c02315 	stw	r3,140(sp)
 8013450:	280d883a 	mov	r6,r5
 8013454:	003c6906 	br	80125fc <__alt_data_end+0xfc0125fc>
 8013458:	802d883a 	mov	r22,r16
 801345c:	0021883a 	mov	r16,zero
 8013460:	003b5406 	br	80121b4 <__alt_data_end+0xfc0121b4>
 8013464:	1823883a 	mov	r17,r3
 8013468:	003cf306 	br	8012838 <__alt_data_end+0xfc012838>
 801346c:	1823883a 	mov	r17,r3
 8013470:	003cad06 	br	8012728 <__alt_data_end+0xfc012728>
 8013474:	0027883a 	mov	r19,zero
 8013478:	003fdc06 	br	80133ec <__alt_data_end+0xfc0133ec>
 801347c:	d9402217 	ldw	r5,136(sp)
 8013480:	8005883a 	mov	r2,r16
 8013484:	b0c00043 	ldbu	r3,1(r22)
 8013488:	2c000017 	ldw	r16,0(r5)
 801348c:	29000104 	addi	r4,r5,4
 8013490:	d9002215 	stw	r4,136(sp)
 8013494:	102d883a 	mov	r22,r2
 8013498:	803fa50e 	bge	r16,zero,8013330 <__alt_data_end+0xfc013330>
 801349c:	18c03fcc 	andi	r3,r3,255
 80134a0:	18c0201c 	xori	r3,r3,128
 80134a4:	043fffc4 	movi	r16,-1
 80134a8:	18ffe004 	addi	r3,r3,-128
 80134ac:	003b4006 	br	80121b0 <__alt_data_end+0xfc0121b0>
 80134b0:	d9402303 	ldbu	r5,140(sp)
 80134b4:	d9401d85 	stb	r5,118(sp)
 80134b8:	003cae06 	br	8012774 <__alt_data_end+0xfc012774>
 80134bc:	d8c02303 	ldbu	r3,140(sp)
 80134c0:	d8c01d85 	stb	r3,118(sp)
 80134c4:	003d1406 	br	8012918 <__alt_data_end+0xfc012918>
 80134c8:	d8c02303 	ldbu	r3,140(sp)
 80134cc:	d8c01d85 	stb	r3,118(sp)
 80134d0:	003cca06 	br	80127fc <__alt_data_end+0xfc0127fc>
 80134d4:	8880004c 	andi	r2,r17,1
 80134d8:	002b883a 	mov	r21,zero
 80134dc:	10000526 	beq	r2,zero,80134f4 <___vfiprintf_internal_r+0x14b8>
 80134e0:	00800c04 	movi	r2,48
 80134e4:	d88019c5 	stb	r2,103(sp)
 80134e8:	dd002817 	ldw	r20,160(sp)
 80134ec:	ddc019c4 	addi	r23,sp,103
 80134f0:	003bd506 	br	8012448 <__alt_data_end+0xfc012448>
 80134f4:	0029883a 	mov	r20,zero
 80134f8:	ddc01a04 	addi	r23,sp,104
 80134fc:	003bd206 	br	8012448 <__alt_data_end+0xfc012448>
 8013500:	d9002303 	ldbu	r4,140(sp)
 8013504:	d9001d85 	stb	r4,118(sp)
 8013508:	003da606 	br	8012ba4 <__alt_data_end+0xfc012ba4>
 801350c:	d8c02303 	ldbu	r3,140(sp)
 8013510:	d8c01d85 	stb	r3,118(sp)
 8013514:	003c7606 	br	80126f0 <__alt_data_end+0xfc0126f0>
 8013518:	d8c02303 	ldbu	r3,140(sp)
 801351c:	d8c01d85 	stb	r3,118(sp)
 8013520:	003c6506 	br	80126b8 <__alt_data_end+0xfc0126b8>
 8013524:	d9002303 	ldbu	r4,140(sp)
 8013528:	d9001d85 	stb	r4,118(sp)
 801352c:	003d3d06 	br	8012a24 <__alt_data_end+0xfc012a24>
 8013530:	d8c02303 	ldbu	r3,140(sp)
 8013534:	d8c01d85 	stb	r3,118(sp)
 8013538:	003d1d06 	br	80129b0 <__alt_data_end+0xfc0129b0>
 801353c:	d8c02303 	ldbu	r3,140(sp)
 8013540:	d8c01d85 	stb	r3,118(sp)
 8013544:	003d0306 	br	8012954 <__alt_data_end+0xfc012954>

08013548 <__vfiprintf_internal>:
 8013548:	00821974 	movhi	r2,2149
 801354c:	10be7904 	addi	r2,r2,-1564
 8013550:	300f883a 	mov	r7,r6
 8013554:	280d883a 	mov	r6,r5
 8013558:	200b883a 	mov	r5,r4
 801355c:	11000017 	ldw	r4,0(r2)
 8013560:	801203c1 	jmpi	801203c <___vfiprintf_internal_r>

08013564 <__sbprintf>:
 8013564:	2880030b 	ldhu	r2,12(r5)
 8013568:	2ac01917 	ldw	r11,100(r5)
 801356c:	2a80038b 	ldhu	r10,14(r5)
 8013570:	2a400717 	ldw	r9,28(r5)
 8013574:	2a000917 	ldw	r8,36(r5)
 8013578:	defee204 	addi	sp,sp,-1144
 801357c:	00c10004 	movi	r3,1024
 8013580:	dc011a15 	stw	r16,1128(sp)
 8013584:	10bfff4c 	andi	r2,r2,65533
 8013588:	2821883a 	mov	r16,r5
 801358c:	d8cb883a 	add	r5,sp,r3
 8013590:	dc811c15 	stw	r18,1136(sp)
 8013594:	dc411b15 	stw	r17,1132(sp)
 8013598:	dfc11d15 	stw	ra,1140(sp)
 801359c:	2025883a 	mov	r18,r4
 80135a0:	d881030d 	sth	r2,1036(sp)
 80135a4:	dac11915 	stw	r11,1124(sp)
 80135a8:	da81038d 	sth	r10,1038(sp)
 80135ac:	da410715 	stw	r9,1052(sp)
 80135b0:	da010915 	stw	r8,1060(sp)
 80135b4:	dec10015 	stw	sp,1024(sp)
 80135b8:	dec10415 	stw	sp,1040(sp)
 80135bc:	d8c10215 	stw	r3,1032(sp)
 80135c0:	d8c10515 	stw	r3,1044(sp)
 80135c4:	d8010615 	stw	zero,1048(sp)
 80135c8:	801203c0 	call	801203c <___vfiprintf_internal_r>
 80135cc:	1023883a 	mov	r17,r2
 80135d0:	10000416 	blt	r2,zero,80135e4 <__sbprintf+0x80>
 80135d4:	d9410004 	addi	r5,sp,1024
 80135d8:	9009883a 	mov	r4,r18
 80135dc:	800ea880 	call	800ea88 <_fflush_r>
 80135e0:	10000d1e 	bne	r2,zero,8013618 <__sbprintf+0xb4>
 80135e4:	d881030b 	ldhu	r2,1036(sp)
 80135e8:	1080100c 	andi	r2,r2,64
 80135ec:	10000326 	beq	r2,zero,80135fc <__sbprintf+0x98>
 80135f0:	8080030b 	ldhu	r2,12(r16)
 80135f4:	10801014 	ori	r2,r2,64
 80135f8:	8080030d 	sth	r2,12(r16)
 80135fc:	8805883a 	mov	r2,r17
 8013600:	dfc11d17 	ldw	ra,1140(sp)
 8013604:	dc811c17 	ldw	r18,1136(sp)
 8013608:	dc411b17 	ldw	r17,1132(sp)
 801360c:	dc011a17 	ldw	r16,1128(sp)
 8013610:	dec11e04 	addi	sp,sp,1144
 8013614:	f800283a 	ret
 8013618:	047fffc4 	movi	r17,-1
 801361c:	003ff106 	br	80135e4 <__alt_data_end+0xfc0135e4>

08013620 <_write_r>:
 8013620:	defffd04 	addi	sp,sp,-12
 8013624:	2805883a 	mov	r2,r5
 8013628:	dc000015 	stw	r16,0(sp)
 801362c:	04021974 	movhi	r16,2149
 8013630:	dc400115 	stw	r17,4(sp)
 8013634:	300b883a 	mov	r5,r6
 8013638:	84056304 	addi	r16,r16,5516
 801363c:	2023883a 	mov	r17,r4
 8013640:	380d883a 	mov	r6,r7
 8013644:	1009883a 	mov	r4,r2
 8013648:	dfc00215 	stw	ra,8(sp)
 801364c:	80000015 	stw	zero,0(r16)
 8013650:	8015ccc0 	call	8015ccc <write>
 8013654:	00ffffc4 	movi	r3,-1
 8013658:	10c00526 	beq	r2,r3,8013670 <_write_r+0x50>
 801365c:	dfc00217 	ldw	ra,8(sp)
 8013660:	dc400117 	ldw	r17,4(sp)
 8013664:	dc000017 	ldw	r16,0(sp)
 8013668:	dec00304 	addi	sp,sp,12
 801366c:	f800283a 	ret
 8013670:	80c00017 	ldw	r3,0(r16)
 8013674:	183ff926 	beq	r3,zero,801365c <__alt_data_end+0xfc01365c>
 8013678:	88c00015 	stw	r3,0(r17)
 801367c:	003ff706 	br	801365c <__alt_data_end+0xfc01365c>

08013680 <_close_r>:
 8013680:	defffd04 	addi	sp,sp,-12
 8013684:	dc000015 	stw	r16,0(sp)
 8013688:	04021974 	movhi	r16,2149
 801368c:	dc400115 	stw	r17,4(sp)
 8013690:	84056304 	addi	r16,r16,5516
 8013694:	2023883a 	mov	r17,r4
 8013698:	2809883a 	mov	r4,r5
 801369c:	dfc00215 	stw	ra,8(sp)
 80136a0:	80000015 	stw	zero,0(r16)
 80136a4:	80152a00 	call	80152a0 <close>
 80136a8:	00ffffc4 	movi	r3,-1
 80136ac:	10c00526 	beq	r2,r3,80136c4 <_close_r+0x44>
 80136b0:	dfc00217 	ldw	ra,8(sp)
 80136b4:	dc400117 	ldw	r17,4(sp)
 80136b8:	dc000017 	ldw	r16,0(sp)
 80136bc:	dec00304 	addi	sp,sp,12
 80136c0:	f800283a 	ret
 80136c4:	80c00017 	ldw	r3,0(r16)
 80136c8:	183ff926 	beq	r3,zero,80136b0 <__alt_data_end+0xfc0136b0>
 80136cc:	88c00015 	stw	r3,0(r17)
 80136d0:	003ff706 	br	80136b0 <__alt_data_end+0xfc0136b0>

080136d4 <_calloc_r>:
 80136d4:	defffe04 	addi	sp,sp,-8
 80136d8:	2805883a 	mov	r2,r5
 80136dc:	dc000015 	stw	r16,0(sp)
 80136e0:	300b883a 	mov	r5,r6
 80136e4:	2021883a 	mov	r16,r4
 80136e8:	1009883a 	mov	r4,r2
 80136ec:	dfc00115 	stw	ra,4(sp)
 80136f0:	80071600 	call	8007160 <__mulsi3>
 80136f4:	100b883a 	mov	r5,r2
 80136f8:	8009883a 	mov	r4,r16
 80136fc:	800fbe00 	call	800fbe0 <_malloc_r>
 8013700:	10002926 	beq	r2,zero,80137a8 <_calloc_r+0xd4>
 8013704:	11bfff17 	ldw	r6,-4(r2)
 8013708:	1021883a 	mov	r16,r2
 801370c:	00bfff04 	movi	r2,-4
 8013710:	308c703a 	and	r6,r6,r2
 8013714:	00c00904 	movi	r3,36
 8013718:	308d883a 	add	r6,r6,r2
 801371c:	19801636 	bltu	r3,r6,8013778 <_calloc_r+0xa4>
 8013720:	008004c4 	movi	r2,19
 8013724:	11800b2e 	bgeu	r2,r6,8013754 <_calloc_r+0x80>
 8013728:	80000015 	stw	zero,0(r16)
 801372c:	80000115 	stw	zero,4(r16)
 8013730:	008006c4 	movi	r2,27
 8013734:	11801a2e 	bgeu	r2,r6,80137a0 <_calloc_r+0xcc>
 8013738:	80000215 	stw	zero,8(r16)
 801373c:	80000315 	stw	zero,12(r16)
 8013740:	30c0151e 	bne	r6,r3,8013798 <_calloc_r+0xc4>
 8013744:	80000415 	stw	zero,16(r16)
 8013748:	80800604 	addi	r2,r16,24
 801374c:	80000515 	stw	zero,20(r16)
 8013750:	00000106 	br	8013758 <_calloc_r+0x84>
 8013754:	8005883a 	mov	r2,r16
 8013758:	10000015 	stw	zero,0(r2)
 801375c:	10000115 	stw	zero,4(r2)
 8013760:	10000215 	stw	zero,8(r2)
 8013764:	8005883a 	mov	r2,r16
 8013768:	dfc00117 	ldw	ra,4(sp)
 801376c:	dc000017 	ldw	r16,0(sp)
 8013770:	dec00204 	addi	sp,sp,8
 8013774:	f800283a 	ret
 8013778:	000b883a 	mov	r5,zero
 801377c:	8009883a 	mov	r4,r16
 8013780:	800a7380 	call	800a738 <memset>
 8013784:	8005883a 	mov	r2,r16
 8013788:	dfc00117 	ldw	ra,4(sp)
 801378c:	dc000017 	ldw	r16,0(sp)
 8013790:	dec00204 	addi	sp,sp,8
 8013794:	f800283a 	ret
 8013798:	80800404 	addi	r2,r16,16
 801379c:	003fee06 	br	8013758 <__alt_data_end+0xfc013758>
 80137a0:	80800204 	addi	r2,r16,8
 80137a4:	003fec06 	br	8013758 <__alt_data_end+0xfc013758>
 80137a8:	0005883a 	mov	r2,zero
 80137ac:	003fee06 	br	8013768 <__alt_data_end+0xfc013768>

080137b0 <_fclose_r>:
 80137b0:	28003926 	beq	r5,zero,8013898 <_fclose_r+0xe8>
 80137b4:	defffc04 	addi	sp,sp,-16
 80137b8:	dc400115 	stw	r17,4(sp)
 80137bc:	dc000015 	stw	r16,0(sp)
 80137c0:	dfc00315 	stw	ra,12(sp)
 80137c4:	dc800215 	stw	r18,8(sp)
 80137c8:	2023883a 	mov	r17,r4
 80137cc:	2821883a 	mov	r16,r5
 80137d0:	20000226 	beq	r4,zero,80137dc <_fclose_r+0x2c>
 80137d4:	20800e17 	ldw	r2,56(r4)
 80137d8:	10002726 	beq	r2,zero,8013878 <_fclose_r+0xc8>
 80137dc:	8080030f 	ldh	r2,12(r16)
 80137e0:	1000071e 	bne	r2,zero,8013800 <_fclose_r+0x50>
 80137e4:	0005883a 	mov	r2,zero
 80137e8:	dfc00317 	ldw	ra,12(sp)
 80137ec:	dc800217 	ldw	r18,8(sp)
 80137f0:	dc400117 	ldw	r17,4(sp)
 80137f4:	dc000017 	ldw	r16,0(sp)
 80137f8:	dec00404 	addi	sp,sp,16
 80137fc:	f800283a 	ret
 8013800:	800b883a 	mov	r5,r16
 8013804:	8809883a 	mov	r4,r17
 8013808:	800e86c0 	call	800e86c <__sflush_r>
 801380c:	1025883a 	mov	r18,r2
 8013810:	80800b17 	ldw	r2,44(r16)
 8013814:	10000426 	beq	r2,zero,8013828 <_fclose_r+0x78>
 8013818:	81400717 	ldw	r5,28(r16)
 801381c:	8809883a 	mov	r4,r17
 8013820:	103ee83a 	callr	r2
 8013824:	10001616 	blt	r2,zero,8013880 <_fclose_r+0xd0>
 8013828:	8080030b 	ldhu	r2,12(r16)
 801382c:	1080200c 	andi	r2,r2,128
 8013830:	1000151e 	bne	r2,zero,8013888 <_fclose_r+0xd8>
 8013834:	81400c17 	ldw	r5,48(r16)
 8013838:	28000526 	beq	r5,zero,8013850 <_fclose_r+0xa0>
 801383c:	80801004 	addi	r2,r16,64
 8013840:	28800226 	beq	r5,r2,801384c <_fclose_r+0x9c>
 8013844:	8809883a 	mov	r4,r17
 8013848:	800efe80 	call	800efe8 <_free_r>
 801384c:	80000c15 	stw	zero,48(r16)
 8013850:	81401117 	ldw	r5,68(r16)
 8013854:	28000326 	beq	r5,zero,8013864 <_fclose_r+0xb4>
 8013858:	8809883a 	mov	r4,r17
 801385c:	800efe80 	call	800efe8 <_free_r>
 8013860:	80001115 	stw	zero,68(r16)
 8013864:	800ee840 	call	800ee84 <__sfp_lock_acquire>
 8013868:	8000030d 	sth	zero,12(r16)
 801386c:	800ee880 	call	800ee88 <__sfp_lock_release>
 8013870:	9005883a 	mov	r2,r18
 8013874:	003fdc06 	br	80137e8 <__alt_data_end+0xfc0137e8>
 8013878:	800ee740 	call	800ee74 <__sinit>
 801387c:	003fd706 	br	80137dc <__alt_data_end+0xfc0137dc>
 8013880:	04bfffc4 	movi	r18,-1
 8013884:	003fe806 	br	8013828 <__alt_data_end+0xfc013828>
 8013888:	81400417 	ldw	r5,16(r16)
 801388c:	8809883a 	mov	r4,r17
 8013890:	800efe80 	call	800efe8 <_free_r>
 8013894:	003fe706 	br	8013834 <__alt_data_end+0xfc013834>
 8013898:	0005883a 	mov	r2,zero
 801389c:	f800283a 	ret

080138a0 <fclose>:
 80138a0:	00821974 	movhi	r2,2149
 80138a4:	10be7904 	addi	r2,r2,-1564
 80138a8:	200b883a 	mov	r5,r4
 80138ac:	11000017 	ldw	r4,0(r2)
 80138b0:	80137b01 	jmpi	80137b0 <_fclose_r>

080138b4 <__fputwc>:
 80138b4:	defff804 	addi	sp,sp,-32
 80138b8:	dcc00415 	stw	r19,16(sp)
 80138bc:	dc800315 	stw	r18,12(sp)
 80138c0:	dc000115 	stw	r16,4(sp)
 80138c4:	dfc00715 	stw	ra,28(sp)
 80138c8:	dd400615 	stw	r21,24(sp)
 80138cc:	dd000515 	stw	r20,20(sp)
 80138d0:	dc400215 	stw	r17,8(sp)
 80138d4:	2027883a 	mov	r19,r4
 80138d8:	2825883a 	mov	r18,r5
 80138dc:	3021883a 	mov	r16,r6
 80138e0:	800f9d00 	call	800f9d0 <__locale_mb_cur_max>
 80138e4:	00c00044 	movi	r3,1
 80138e8:	10c03e26 	beq	r2,r3,80139e4 <__fputwc+0x130>
 80138ec:	81c01704 	addi	r7,r16,92
 80138f0:	900d883a 	mov	r6,r18
 80138f4:	d80b883a 	mov	r5,sp
 80138f8:	9809883a 	mov	r4,r19
 80138fc:	8013d840 	call	8013d84 <_wcrtomb_r>
 8013900:	1029883a 	mov	r20,r2
 8013904:	00bfffc4 	movi	r2,-1
 8013908:	a0802026 	beq	r20,r2,801398c <__fputwc+0xd8>
 801390c:	d9400003 	ldbu	r5,0(sp)
 8013910:	a0001c26 	beq	r20,zero,8013984 <__fputwc+0xd0>
 8013914:	0023883a 	mov	r17,zero
 8013918:	05400284 	movi	r21,10
 801391c:	00000906 	br	8013944 <__fputwc+0x90>
 8013920:	80800017 	ldw	r2,0(r16)
 8013924:	11400005 	stb	r5,0(r2)
 8013928:	80c00017 	ldw	r3,0(r16)
 801392c:	18c00044 	addi	r3,r3,1
 8013930:	80c00015 	stw	r3,0(r16)
 8013934:	8c400044 	addi	r17,r17,1
 8013938:	dc45883a 	add	r2,sp,r17
 801393c:	8d00112e 	bgeu	r17,r20,8013984 <__fputwc+0xd0>
 8013940:	11400003 	ldbu	r5,0(r2)
 8013944:	80c00217 	ldw	r3,8(r16)
 8013948:	18ffffc4 	addi	r3,r3,-1
 801394c:	80c00215 	stw	r3,8(r16)
 8013950:	183ff30e 	bge	r3,zero,8013920 <__alt_data_end+0xfc013920>
 8013954:	80800617 	ldw	r2,24(r16)
 8013958:	18801916 	blt	r3,r2,80139c0 <__fputwc+0x10c>
 801395c:	80800017 	ldw	r2,0(r16)
 8013960:	11400005 	stb	r5,0(r2)
 8013964:	80800017 	ldw	r2,0(r16)
 8013968:	10c00003 	ldbu	r3,0(r2)
 801396c:	10800044 	addi	r2,r2,1
 8013970:	1d402326 	beq	r3,r21,8013a00 <__fputwc+0x14c>
 8013974:	80800015 	stw	r2,0(r16)
 8013978:	8c400044 	addi	r17,r17,1
 801397c:	dc45883a 	add	r2,sp,r17
 8013980:	8d3fef36 	bltu	r17,r20,8013940 <__alt_data_end+0xfc013940>
 8013984:	9005883a 	mov	r2,r18
 8013988:	00000406 	br	801399c <__fputwc+0xe8>
 801398c:	80c0030b 	ldhu	r3,12(r16)
 8013990:	a005883a 	mov	r2,r20
 8013994:	18c01014 	ori	r3,r3,64
 8013998:	80c0030d 	sth	r3,12(r16)
 801399c:	dfc00717 	ldw	ra,28(sp)
 80139a0:	dd400617 	ldw	r21,24(sp)
 80139a4:	dd000517 	ldw	r20,20(sp)
 80139a8:	dcc00417 	ldw	r19,16(sp)
 80139ac:	dc800317 	ldw	r18,12(sp)
 80139b0:	dc400217 	ldw	r17,8(sp)
 80139b4:	dc000117 	ldw	r16,4(sp)
 80139b8:	dec00804 	addi	sp,sp,32
 80139bc:	f800283a 	ret
 80139c0:	800d883a 	mov	r6,r16
 80139c4:	29403fcc 	andi	r5,r5,255
 80139c8:	9809883a 	mov	r4,r19
 80139cc:	8013c2c0 	call	8013c2c <__swbuf_r>
 80139d0:	10bfffe0 	cmpeqi	r2,r2,-1
 80139d4:	10803fcc 	andi	r2,r2,255
 80139d8:	103fd626 	beq	r2,zero,8013934 <__alt_data_end+0xfc013934>
 80139dc:	00bfffc4 	movi	r2,-1
 80139e0:	003fee06 	br	801399c <__alt_data_end+0xfc01399c>
 80139e4:	90ffffc4 	addi	r3,r18,-1
 80139e8:	01003f84 	movi	r4,254
 80139ec:	20ffbf36 	bltu	r4,r3,80138ec <__alt_data_end+0xfc0138ec>
 80139f0:	900b883a 	mov	r5,r18
 80139f4:	dc800005 	stb	r18,0(sp)
 80139f8:	1029883a 	mov	r20,r2
 80139fc:	003fc506 	br	8013914 <__alt_data_end+0xfc013914>
 8013a00:	800d883a 	mov	r6,r16
 8013a04:	a80b883a 	mov	r5,r21
 8013a08:	9809883a 	mov	r4,r19
 8013a0c:	8013c2c0 	call	8013c2c <__swbuf_r>
 8013a10:	10bfffe0 	cmpeqi	r2,r2,-1
 8013a14:	003fef06 	br	80139d4 <__alt_data_end+0xfc0139d4>

08013a18 <_fputwc_r>:
 8013a18:	3080030b 	ldhu	r2,12(r6)
 8013a1c:	10c8000c 	andi	r3,r2,8192
 8013a20:	1800051e 	bne	r3,zero,8013a38 <_fputwc_r+0x20>
 8013a24:	30c01917 	ldw	r3,100(r6)
 8013a28:	10880014 	ori	r2,r2,8192
 8013a2c:	3080030d 	sth	r2,12(r6)
 8013a30:	18880014 	ori	r2,r3,8192
 8013a34:	30801915 	stw	r2,100(r6)
 8013a38:	80138b41 	jmpi	80138b4 <__fputwc>

08013a3c <fputwc>:
 8013a3c:	00821974 	movhi	r2,2149
 8013a40:	defffc04 	addi	sp,sp,-16
 8013a44:	10be7904 	addi	r2,r2,-1564
 8013a48:	dc000115 	stw	r16,4(sp)
 8013a4c:	14000017 	ldw	r16,0(r2)
 8013a50:	dc400215 	stw	r17,8(sp)
 8013a54:	dfc00315 	stw	ra,12(sp)
 8013a58:	2023883a 	mov	r17,r4
 8013a5c:	80000226 	beq	r16,zero,8013a68 <fputwc+0x2c>
 8013a60:	80800e17 	ldw	r2,56(r16)
 8013a64:	10001026 	beq	r2,zero,8013aa8 <fputwc+0x6c>
 8013a68:	2880030b 	ldhu	r2,12(r5)
 8013a6c:	10c8000c 	andi	r3,r2,8192
 8013a70:	1800051e 	bne	r3,zero,8013a88 <fputwc+0x4c>
 8013a74:	28c01917 	ldw	r3,100(r5)
 8013a78:	10880014 	ori	r2,r2,8192
 8013a7c:	2880030d 	sth	r2,12(r5)
 8013a80:	18880014 	ori	r2,r3,8192
 8013a84:	28801915 	stw	r2,100(r5)
 8013a88:	280d883a 	mov	r6,r5
 8013a8c:	8009883a 	mov	r4,r16
 8013a90:	880b883a 	mov	r5,r17
 8013a94:	dfc00317 	ldw	ra,12(sp)
 8013a98:	dc400217 	ldw	r17,8(sp)
 8013a9c:	dc000117 	ldw	r16,4(sp)
 8013aa0:	dec00404 	addi	sp,sp,16
 8013aa4:	80138b41 	jmpi	80138b4 <__fputwc>
 8013aa8:	8009883a 	mov	r4,r16
 8013aac:	d9400015 	stw	r5,0(sp)
 8013ab0:	800ee740 	call	800ee74 <__sinit>
 8013ab4:	d9400017 	ldw	r5,0(sp)
 8013ab8:	003feb06 	br	8013a68 <__alt_data_end+0xfc013a68>

08013abc <_fstat_r>:
 8013abc:	defffd04 	addi	sp,sp,-12
 8013ac0:	2805883a 	mov	r2,r5
 8013ac4:	dc000015 	stw	r16,0(sp)
 8013ac8:	04021974 	movhi	r16,2149
 8013acc:	dc400115 	stw	r17,4(sp)
 8013ad0:	84056304 	addi	r16,r16,5516
 8013ad4:	2023883a 	mov	r17,r4
 8013ad8:	300b883a 	mov	r5,r6
 8013adc:	1009883a 	mov	r4,r2
 8013ae0:	dfc00215 	stw	ra,8(sp)
 8013ae4:	80000015 	stw	zero,0(r16)
 8013ae8:	80153e00 	call	80153e0 <fstat>
 8013aec:	00ffffc4 	movi	r3,-1
 8013af0:	10c00526 	beq	r2,r3,8013b08 <_fstat_r+0x4c>
 8013af4:	dfc00217 	ldw	ra,8(sp)
 8013af8:	dc400117 	ldw	r17,4(sp)
 8013afc:	dc000017 	ldw	r16,0(sp)
 8013b00:	dec00304 	addi	sp,sp,12
 8013b04:	f800283a 	ret
 8013b08:	80c00017 	ldw	r3,0(r16)
 8013b0c:	183ff926 	beq	r3,zero,8013af4 <__alt_data_end+0xfc013af4>
 8013b10:	88c00015 	stw	r3,0(r17)
 8013b14:	003ff706 	br	8013af4 <__alt_data_end+0xfc013af4>

08013b18 <_isatty_r>:
 8013b18:	defffd04 	addi	sp,sp,-12
 8013b1c:	dc000015 	stw	r16,0(sp)
 8013b20:	04021974 	movhi	r16,2149
 8013b24:	dc400115 	stw	r17,4(sp)
 8013b28:	84056304 	addi	r16,r16,5516
 8013b2c:	2023883a 	mov	r17,r4
 8013b30:	2809883a 	mov	r4,r5
 8013b34:	dfc00215 	stw	ra,8(sp)
 8013b38:	80000015 	stw	zero,0(r16)
 8013b3c:	80154d40 	call	80154d4 <isatty>
 8013b40:	00ffffc4 	movi	r3,-1
 8013b44:	10c00526 	beq	r2,r3,8013b5c <_isatty_r+0x44>
 8013b48:	dfc00217 	ldw	ra,8(sp)
 8013b4c:	dc400117 	ldw	r17,4(sp)
 8013b50:	dc000017 	ldw	r16,0(sp)
 8013b54:	dec00304 	addi	sp,sp,12
 8013b58:	f800283a 	ret
 8013b5c:	80c00017 	ldw	r3,0(r16)
 8013b60:	183ff926 	beq	r3,zero,8013b48 <__alt_data_end+0xfc013b48>
 8013b64:	88c00015 	stw	r3,0(r17)
 8013b68:	003ff706 	br	8013b48 <__alt_data_end+0xfc013b48>

08013b6c <_lseek_r>:
 8013b6c:	defffd04 	addi	sp,sp,-12
 8013b70:	2805883a 	mov	r2,r5
 8013b74:	dc000015 	stw	r16,0(sp)
 8013b78:	04021974 	movhi	r16,2149
 8013b7c:	dc400115 	stw	r17,4(sp)
 8013b80:	300b883a 	mov	r5,r6
 8013b84:	84056304 	addi	r16,r16,5516
 8013b88:	2023883a 	mov	r17,r4
 8013b8c:	380d883a 	mov	r6,r7
 8013b90:	1009883a 	mov	r4,r2
 8013b94:	dfc00215 	stw	ra,8(sp)
 8013b98:	80000015 	stw	zero,0(r16)
 8013b9c:	80156a80 	call	80156a8 <lseek>
 8013ba0:	00ffffc4 	movi	r3,-1
 8013ba4:	10c00526 	beq	r2,r3,8013bbc <_lseek_r+0x50>
 8013ba8:	dfc00217 	ldw	ra,8(sp)
 8013bac:	dc400117 	ldw	r17,4(sp)
 8013bb0:	dc000017 	ldw	r16,0(sp)
 8013bb4:	dec00304 	addi	sp,sp,12
 8013bb8:	f800283a 	ret
 8013bbc:	80c00017 	ldw	r3,0(r16)
 8013bc0:	183ff926 	beq	r3,zero,8013ba8 <__alt_data_end+0xfc013ba8>
 8013bc4:	88c00015 	stw	r3,0(r17)
 8013bc8:	003ff706 	br	8013ba8 <__alt_data_end+0xfc013ba8>

08013bcc <_read_r>:
 8013bcc:	defffd04 	addi	sp,sp,-12
 8013bd0:	2805883a 	mov	r2,r5
 8013bd4:	dc000015 	stw	r16,0(sp)
 8013bd8:	04021974 	movhi	r16,2149
 8013bdc:	dc400115 	stw	r17,4(sp)
 8013be0:	300b883a 	mov	r5,r6
 8013be4:	84056304 	addi	r16,r16,5516
 8013be8:	2023883a 	mov	r17,r4
 8013bec:	380d883a 	mov	r6,r7
 8013bf0:	1009883a 	mov	r4,r2
 8013bf4:	dfc00215 	stw	ra,8(sp)
 8013bf8:	80000015 	stw	zero,0(r16)
 8013bfc:	80158840 	call	8015884 <read>
 8013c00:	00ffffc4 	movi	r3,-1
 8013c04:	10c00526 	beq	r2,r3,8013c1c <_read_r+0x50>
 8013c08:	dfc00217 	ldw	ra,8(sp)
 8013c0c:	dc400117 	ldw	r17,4(sp)
 8013c10:	dc000017 	ldw	r16,0(sp)
 8013c14:	dec00304 	addi	sp,sp,12
 8013c18:	f800283a 	ret
 8013c1c:	80c00017 	ldw	r3,0(r16)
 8013c20:	183ff926 	beq	r3,zero,8013c08 <__alt_data_end+0xfc013c08>
 8013c24:	88c00015 	stw	r3,0(r17)
 8013c28:	003ff706 	br	8013c08 <__alt_data_end+0xfc013c08>

08013c2c <__swbuf_r>:
 8013c2c:	defffb04 	addi	sp,sp,-20
 8013c30:	dcc00315 	stw	r19,12(sp)
 8013c34:	dc800215 	stw	r18,8(sp)
 8013c38:	dc000015 	stw	r16,0(sp)
 8013c3c:	dfc00415 	stw	ra,16(sp)
 8013c40:	dc400115 	stw	r17,4(sp)
 8013c44:	2025883a 	mov	r18,r4
 8013c48:	2827883a 	mov	r19,r5
 8013c4c:	3021883a 	mov	r16,r6
 8013c50:	20000226 	beq	r4,zero,8013c5c <__swbuf_r+0x30>
 8013c54:	20800e17 	ldw	r2,56(r4)
 8013c58:	10004226 	beq	r2,zero,8013d64 <__swbuf_r+0x138>
 8013c5c:	80800617 	ldw	r2,24(r16)
 8013c60:	8100030b 	ldhu	r4,12(r16)
 8013c64:	80800215 	stw	r2,8(r16)
 8013c68:	2080020c 	andi	r2,r4,8
 8013c6c:	10003626 	beq	r2,zero,8013d48 <__swbuf_r+0x11c>
 8013c70:	80c00417 	ldw	r3,16(r16)
 8013c74:	18003426 	beq	r3,zero,8013d48 <__swbuf_r+0x11c>
 8013c78:	2088000c 	andi	r2,r4,8192
 8013c7c:	9c403fcc 	andi	r17,r19,255
 8013c80:	10001a26 	beq	r2,zero,8013cec <__swbuf_r+0xc0>
 8013c84:	80800017 	ldw	r2,0(r16)
 8013c88:	81000517 	ldw	r4,20(r16)
 8013c8c:	10c7c83a 	sub	r3,r2,r3
 8013c90:	1900200e 	bge	r3,r4,8013d14 <__swbuf_r+0xe8>
 8013c94:	18c00044 	addi	r3,r3,1
 8013c98:	81000217 	ldw	r4,8(r16)
 8013c9c:	11400044 	addi	r5,r2,1
 8013ca0:	81400015 	stw	r5,0(r16)
 8013ca4:	213fffc4 	addi	r4,r4,-1
 8013ca8:	81000215 	stw	r4,8(r16)
 8013cac:	14c00005 	stb	r19,0(r2)
 8013cb0:	80800517 	ldw	r2,20(r16)
 8013cb4:	10c01e26 	beq	r2,r3,8013d30 <__swbuf_r+0x104>
 8013cb8:	8080030b 	ldhu	r2,12(r16)
 8013cbc:	1080004c 	andi	r2,r2,1
 8013cc0:	10000226 	beq	r2,zero,8013ccc <__swbuf_r+0xa0>
 8013cc4:	00800284 	movi	r2,10
 8013cc8:	88801926 	beq	r17,r2,8013d30 <__swbuf_r+0x104>
 8013ccc:	8805883a 	mov	r2,r17
 8013cd0:	dfc00417 	ldw	ra,16(sp)
 8013cd4:	dcc00317 	ldw	r19,12(sp)
 8013cd8:	dc800217 	ldw	r18,8(sp)
 8013cdc:	dc400117 	ldw	r17,4(sp)
 8013ce0:	dc000017 	ldw	r16,0(sp)
 8013ce4:	dec00504 	addi	sp,sp,20
 8013ce8:	f800283a 	ret
 8013cec:	81401917 	ldw	r5,100(r16)
 8013cf0:	00b7ffc4 	movi	r2,-8193
 8013cf4:	21080014 	ori	r4,r4,8192
 8013cf8:	2884703a 	and	r2,r5,r2
 8013cfc:	80801915 	stw	r2,100(r16)
 8013d00:	80800017 	ldw	r2,0(r16)
 8013d04:	8100030d 	sth	r4,12(r16)
 8013d08:	81000517 	ldw	r4,20(r16)
 8013d0c:	10c7c83a 	sub	r3,r2,r3
 8013d10:	193fe016 	blt	r3,r4,8013c94 <__alt_data_end+0xfc013c94>
 8013d14:	800b883a 	mov	r5,r16
 8013d18:	9009883a 	mov	r4,r18
 8013d1c:	800ea880 	call	800ea88 <_fflush_r>
 8013d20:	1000071e 	bne	r2,zero,8013d40 <__swbuf_r+0x114>
 8013d24:	80800017 	ldw	r2,0(r16)
 8013d28:	00c00044 	movi	r3,1
 8013d2c:	003fda06 	br	8013c98 <__alt_data_end+0xfc013c98>
 8013d30:	800b883a 	mov	r5,r16
 8013d34:	9009883a 	mov	r4,r18
 8013d38:	800ea880 	call	800ea88 <_fflush_r>
 8013d3c:	103fe326 	beq	r2,zero,8013ccc <__alt_data_end+0xfc013ccc>
 8013d40:	00bfffc4 	movi	r2,-1
 8013d44:	003fe206 	br	8013cd0 <__alt_data_end+0xfc013cd0>
 8013d48:	800b883a 	mov	r5,r16
 8013d4c:	9009883a 	mov	r4,r18
 8013d50:	800ce680 	call	800ce68 <__swsetup_r>
 8013d54:	103ffa1e 	bne	r2,zero,8013d40 <__alt_data_end+0xfc013d40>
 8013d58:	8100030b 	ldhu	r4,12(r16)
 8013d5c:	80c00417 	ldw	r3,16(r16)
 8013d60:	003fc506 	br	8013c78 <__alt_data_end+0xfc013c78>
 8013d64:	800ee740 	call	800ee74 <__sinit>
 8013d68:	003fbc06 	br	8013c5c <__alt_data_end+0xfc013c5c>

08013d6c <__swbuf>:
 8013d6c:	00821974 	movhi	r2,2149
 8013d70:	10be7904 	addi	r2,r2,-1564
 8013d74:	280d883a 	mov	r6,r5
 8013d78:	200b883a 	mov	r5,r4
 8013d7c:	11000017 	ldw	r4,0(r2)
 8013d80:	8013c2c1 	jmpi	8013c2c <__swbuf_r>

08013d84 <_wcrtomb_r>:
 8013d84:	defff604 	addi	sp,sp,-40
 8013d88:	00821974 	movhi	r2,2149
 8013d8c:	dc800815 	stw	r18,32(sp)
 8013d90:	dc400715 	stw	r17,28(sp)
 8013d94:	dc000615 	stw	r16,24(sp)
 8013d98:	10be7d04 	addi	r2,r2,-1548
 8013d9c:	dfc00915 	stw	ra,36(sp)
 8013da0:	2021883a 	mov	r16,r4
 8013da4:	3823883a 	mov	r17,r7
 8013da8:	14800017 	ldw	r18,0(r2)
 8013dac:	28001426 	beq	r5,zero,8013e00 <_wcrtomb_r+0x7c>
 8013db0:	d9400415 	stw	r5,16(sp)
 8013db4:	d9800515 	stw	r6,20(sp)
 8013db8:	800f9c40 	call	800f9c4 <__locale_charset>
 8013dbc:	d9800517 	ldw	r6,20(sp)
 8013dc0:	d9400417 	ldw	r5,16(sp)
 8013dc4:	100f883a 	mov	r7,r2
 8013dc8:	dc400015 	stw	r17,0(sp)
 8013dcc:	8009883a 	mov	r4,r16
 8013dd0:	903ee83a 	callr	r18
 8013dd4:	00ffffc4 	movi	r3,-1
 8013dd8:	10c0031e 	bne	r2,r3,8013de8 <_wcrtomb_r+0x64>
 8013ddc:	88000015 	stw	zero,0(r17)
 8013de0:	00c02284 	movi	r3,138
 8013de4:	80c00015 	stw	r3,0(r16)
 8013de8:	dfc00917 	ldw	ra,36(sp)
 8013dec:	dc800817 	ldw	r18,32(sp)
 8013df0:	dc400717 	ldw	r17,28(sp)
 8013df4:	dc000617 	ldw	r16,24(sp)
 8013df8:	dec00a04 	addi	sp,sp,40
 8013dfc:	f800283a 	ret
 8013e00:	800f9c40 	call	800f9c4 <__locale_charset>
 8013e04:	100f883a 	mov	r7,r2
 8013e08:	dc400015 	stw	r17,0(sp)
 8013e0c:	000d883a 	mov	r6,zero
 8013e10:	d9400104 	addi	r5,sp,4
 8013e14:	8009883a 	mov	r4,r16
 8013e18:	903ee83a 	callr	r18
 8013e1c:	003fed06 	br	8013dd4 <__alt_data_end+0xfc013dd4>

08013e20 <wcrtomb>:
 8013e20:	defff604 	addi	sp,sp,-40
 8013e24:	00821974 	movhi	r2,2149
 8013e28:	dc800615 	stw	r18,24(sp)
 8013e2c:	dc400515 	stw	r17,20(sp)
 8013e30:	10be7904 	addi	r2,r2,-1564
 8013e34:	dfc00915 	stw	ra,36(sp)
 8013e38:	dd000815 	stw	r20,32(sp)
 8013e3c:	dcc00715 	stw	r19,28(sp)
 8013e40:	dc000415 	stw	r16,16(sp)
 8013e44:	3025883a 	mov	r18,r6
 8013e48:	14400017 	ldw	r17,0(r2)
 8013e4c:	20001926 	beq	r4,zero,8013eb4 <wcrtomb+0x94>
 8013e50:	00821974 	movhi	r2,2149
 8013e54:	10be7d04 	addi	r2,r2,-1548
 8013e58:	15000017 	ldw	r20,0(r2)
 8013e5c:	2021883a 	mov	r16,r4
 8013e60:	2827883a 	mov	r19,r5
 8013e64:	800f9c40 	call	800f9c4 <__locale_charset>
 8013e68:	100f883a 	mov	r7,r2
 8013e6c:	dc800015 	stw	r18,0(sp)
 8013e70:	980d883a 	mov	r6,r19
 8013e74:	800b883a 	mov	r5,r16
 8013e78:	8809883a 	mov	r4,r17
 8013e7c:	a03ee83a 	callr	r20
 8013e80:	00ffffc4 	movi	r3,-1
 8013e84:	10c0031e 	bne	r2,r3,8013e94 <wcrtomb+0x74>
 8013e88:	90000015 	stw	zero,0(r18)
 8013e8c:	00c02284 	movi	r3,138
 8013e90:	88c00015 	stw	r3,0(r17)
 8013e94:	dfc00917 	ldw	ra,36(sp)
 8013e98:	dd000817 	ldw	r20,32(sp)
 8013e9c:	dcc00717 	ldw	r19,28(sp)
 8013ea0:	dc800617 	ldw	r18,24(sp)
 8013ea4:	dc400517 	ldw	r17,20(sp)
 8013ea8:	dc000417 	ldw	r16,16(sp)
 8013eac:	dec00a04 	addi	sp,sp,40
 8013eb0:	f800283a 	ret
 8013eb4:	00821974 	movhi	r2,2149
 8013eb8:	10be7d04 	addi	r2,r2,-1548
 8013ebc:	14000017 	ldw	r16,0(r2)
 8013ec0:	800f9c40 	call	800f9c4 <__locale_charset>
 8013ec4:	100f883a 	mov	r7,r2
 8013ec8:	dc800015 	stw	r18,0(sp)
 8013ecc:	000d883a 	mov	r6,zero
 8013ed0:	d9400104 	addi	r5,sp,4
 8013ed4:	8809883a 	mov	r4,r17
 8013ed8:	803ee83a 	callr	r16
 8013edc:	003fe806 	br	8013e80 <__alt_data_end+0xfc013e80>

08013ee0 <__ascii_wctomb>:
 8013ee0:	28000526 	beq	r5,zero,8013ef8 <__ascii_wctomb+0x18>
 8013ee4:	00803fc4 	movi	r2,255
 8013ee8:	11800536 	bltu	r2,r6,8013f00 <__ascii_wctomb+0x20>
 8013eec:	29800005 	stb	r6,0(r5)
 8013ef0:	00800044 	movi	r2,1
 8013ef4:	f800283a 	ret
 8013ef8:	0005883a 	mov	r2,zero
 8013efc:	f800283a 	ret
 8013f00:	00802284 	movi	r2,138
 8013f04:	20800015 	stw	r2,0(r4)
 8013f08:	00bfffc4 	movi	r2,-1
 8013f0c:	f800283a 	ret

08013f10 <_wctomb_r>:
 8013f10:	00821974 	movhi	r2,2149
 8013f14:	defff904 	addi	sp,sp,-28
 8013f18:	10be7d04 	addi	r2,r2,-1548
 8013f1c:	dfc00615 	stw	ra,24(sp)
 8013f20:	dc400515 	stw	r17,20(sp)
 8013f24:	dc000415 	stw	r16,16(sp)
 8013f28:	3823883a 	mov	r17,r7
 8013f2c:	14000017 	ldw	r16,0(r2)
 8013f30:	d9000115 	stw	r4,4(sp)
 8013f34:	d9400215 	stw	r5,8(sp)
 8013f38:	d9800315 	stw	r6,12(sp)
 8013f3c:	800f9c40 	call	800f9c4 <__locale_charset>
 8013f40:	d9800317 	ldw	r6,12(sp)
 8013f44:	d9400217 	ldw	r5,8(sp)
 8013f48:	d9000117 	ldw	r4,4(sp)
 8013f4c:	100f883a 	mov	r7,r2
 8013f50:	dc400015 	stw	r17,0(sp)
 8013f54:	803ee83a 	callr	r16
 8013f58:	dfc00617 	ldw	ra,24(sp)
 8013f5c:	dc400517 	ldw	r17,20(sp)
 8013f60:	dc000417 	ldw	r16,16(sp)
 8013f64:	dec00704 	addi	sp,sp,28
 8013f68:	f800283a 	ret

08013f6c <__muldi3>:
 8013f6c:	defff604 	addi	sp,sp,-40
 8013f70:	dd800615 	stw	r22,24(sp)
 8013f74:	dd400515 	stw	r21,20(sp)
 8013f78:	dc400115 	stw	r17,4(sp)
 8013f7c:	357fffcc 	andi	r21,r6,65535
 8013f80:	2022d43a 	srli	r17,r4,16
 8013f84:	25bfffcc 	andi	r22,r4,65535
 8013f88:	dcc00315 	stw	r19,12(sp)
 8013f8c:	dc800215 	stw	r18,8(sp)
 8013f90:	2027883a 	mov	r19,r4
 8013f94:	2825883a 	mov	r18,r5
 8013f98:	b009883a 	mov	r4,r22
 8013f9c:	a80b883a 	mov	r5,r21
 8013fa0:	dfc00915 	stw	ra,36(sp)
 8013fa4:	df000815 	stw	fp,32(sp)
 8013fa8:	ddc00715 	stw	r23,28(sp)
 8013fac:	3839883a 	mov	fp,r7
 8013fb0:	302ed43a 	srli	r23,r6,16
 8013fb4:	dd000415 	stw	r20,16(sp)
 8013fb8:	dc000015 	stw	r16,0(sp)
 8013fbc:	3029883a 	mov	r20,r6
 8013fc0:	80071600 	call	8007160 <__mulsi3>
 8013fc4:	a80b883a 	mov	r5,r21
 8013fc8:	8809883a 	mov	r4,r17
 8013fcc:	1021883a 	mov	r16,r2
 8013fd0:	80071600 	call	8007160 <__mulsi3>
 8013fd4:	8809883a 	mov	r4,r17
 8013fd8:	b80b883a 	mov	r5,r23
 8013fdc:	102b883a 	mov	r21,r2
 8013fe0:	80071600 	call	8007160 <__mulsi3>
 8013fe4:	b80b883a 	mov	r5,r23
 8013fe8:	b009883a 	mov	r4,r22
 8013fec:	1023883a 	mov	r17,r2
 8013ff0:	80071600 	call	8007160 <__mulsi3>
 8013ff4:	8006d43a 	srli	r3,r16,16
 8013ff8:	1545883a 	add	r2,r2,r21
 8013ffc:	1885883a 	add	r2,r3,r2
 8014000:	1540022e 	bgeu	r2,r21,801400c <__muldi3+0xa0>
 8014004:	00c00074 	movhi	r3,1
 8014008:	88e3883a 	add	r17,r17,r3
 801400c:	1006d43a 	srli	r3,r2,16
 8014010:	1004943a 	slli	r2,r2,16
 8014014:	e00b883a 	mov	r5,fp
 8014018:	9809883a 	mov	r4,r19
 801401c:	843fffcc 	andi	r16,r16,65535
 8014020:	1c63883a 	add	r17,r3,r17
 8014024:	1421883a 	add	r16,r2,r16
 8014028:	80071600 	call	8007160 <__mulsi3>
 801402c:	900b883a 	mov	r5,r18
 8014030:	a009883a 	mov	r4,r20
 8014034:	1027883a 	mov	r19,r2
 8014038:	80071600 	call	8007160 <__mulsi3>
 801403c:	9885883a 	add	r2,r19,r2
 8014040:	1447883a 	add	r3,r2,r17
 8014044:	8005883a 	mov	r2,r16
 8014048:	dfc00917 	ldw	ra,36(sp)
 801404c:	df000817 	ldw	fp,32(sp)
 8014050:	ddc00717 	ldw	r23,28(sp)
 8014054:	dd800617 	ldw	r22,24(sp)
 8014058:	dd400517 	ldw	r21,20(sp)
 801405c:	dd000417 	ldw	r20,16(sp)
 8014060:	dcc00317 	ldw	r19,12(sp)
 8014064:	dc800217 	ldw	r18,8(sp)
 8014068:	dc400117 	ldw	r17,4(sp)
 801406c:	dc000017 	ldw	r16,0(sp)
 8014070:	dec00a04 	addi	sp,sp,40
 8014074:	f800283a 	ret

08014078 <__umoddi3>:
 8014078:	defff304 	addi	sp,sp,-52
 801407c:	df000b15 	stw	fp,44(sp)
 8014080:	dc400415 	stw	r17,16(sp)
 8014084:	dc000315 	stw	r16,12(sp)
 8014088:	dfc00c15 	stw	ra,48(sp)
 801408c:	ddc00a15 	stw	r23,40(sp)
 8014090:	dd800915 	stw	r22,36(sp)
 8014094:	dd400815 	stw	r21,32(sp)
 8014098:	dd000715 	stw	r20,28(sp)
 801409c:	dcc00615 	stw	r19,24(sp)
 80140a0:	dc800515 	stw	r18,20(sp)
 80140a4:	2021883a 	mov	r16,r4
 80140a8:	2823883a 	mov	r17,r5
 80140ac:	2839883a 	mov	fp,r5
 80140b0:	3800401e 	bne	r7,zero,80141b4 <__umoddi3+0x13c>
 80140b4:	3027883a 	mov	r19,r6
 80140b8:	2029883a 	mov	r20,r4
 80140bc:	2980552e 	bgeu	r5,r6,8014214 <__umoddi3+0x19c>
 80140c0:	00bfffd4 	movui	r2,65535
 80140c4:	1180a236 	bltu	r2,r6,8014350 <__umoddi3+0x2d8>
 80140c8:	01003fc4 	movi	r4,255
 80140cc:	2189803a 	cmpltu	r4,r4,r6
 80140d0:	200890fa 	slli	r4,r4,3
 80140d4:	3104d83a 	srl	r2,r6,r4
 80140d8:	00c21974 	movhi	r3,2149
 80140dc:	18f6fa04 	addi	r3,r3,-9240
 80140e0:	1885883a 	add	r2,r3,r2
 80140e4:	10c00003 	ldbu	r3,0(r2)
 80140e8:	00800804 	movi	r2,32
 80140ec:	1909883a 	add	r4,r3,r4
 80140f0:	1125c83a 	sub	r18,r2,r4
 80140f4:	90000526 	beq	r18,zero,801410c <__umoddi3+0x94>
 80140f8:	8ca2983a 	sll	r17,r17,r18
 80140fc:	8108d83a 	srl	r4,r16,r4
 8014100:	34a6983a 	sll	r19,r6,r18
 8014104:	84a8983a 	sll	r20,r16,r18
 8014108:	2478b03a 	or	fp,r4,r17
 801410c:	982cd43a 	srli	r22,r19,16
 8014110:	e009883a 	mov	r4,fp
 8014114:	9dffffcc 	andi	r23,r19,65535
 8014118:	b00b883a 	mov	r5,r22
 801411c:	80071080 	call	8007108 <__umodsi3>
 8014120:	b00b883a 	mov	r5,r22
 8014124:	e009883a 	mov	r4,fp
 8014128:	102b883a 	mov	r21,r2
 801412c:	80070a40 	call	80070a4 <__udivsi3>
 8014130:	100b883a 	mov	r5,r2
 8014134:	b809883a 	mov	r4,r23
 8014138:	80071600 	call	8007160 <__mulsi3>
 801413c:	a82a943a 	slli	r21,r21,16
 8014140:	a006d43a 	srli	r3,r20,16
 8014144:	1d46b03a 	or	r3,r3,r21
 8014148:	1880032e 	bgeu	r3,r2,8014158 <__umoddi3+0xe0>
 801414c:	1cc7883a 	add	r3,r3,r19
 8014150:	1cc00136 	bltu	r3,r19,8014158 <__umoddi3+0xe0>
 8014154:	18813136 	bltu	r3,r2,801461c <__umoddi3+0x5a4>
 8014158:	18a1c83a 	sub	r16,r3,r2
 801415c:	b00b883a 	mov	r5,r22
 8014160:	8009883a 	mov	r4,r16
 8014164:	80071080 	call	8007108 <__umodsi3>
 8014168:	b00b883a 	mov	r5,r22
 801416c:	8009883a 	mov	r4,r16
 8014170:	1023883a 	mov	r17,r2
 8014174:	80070a40 	call	80070a4 <__udivsi3>
 8014178:	100b883a 	mov	r5,r2
 801417c:	b809883a 	mov	r4,r23
 8014180:	8822943a 	slli	r17,r17,16
 8014184:	80071600 	call	8007160 <__mulsi3>
 8014188:	a0ffffcc 	andi	r3,r20,65535
 801418c:	1c46b03a 	or	r3,r3,r17
 8014190:	1880042e 	bgeu	r3,r2,80141a4 <__umoddi3+0x12c>
 8014194:	1cc7883a 	add	r3,r3,r19
 8014198:	1cc00236 	bltu	r3,r19,80141a4 <__umoddi3+0x12c>
 801419c:	1880012e 	bgeu	r3,r2,80141a4 <__umoddi3+0x12c>
 80141a0:	1cc7883a 	add	r3,r3,r19
 80141a4:	1885c83a 	sub	r2,r3,r2
 80141a8:	1484d83a 	srl	r2,r2,r18
 80141ac:	0007883a 	mov	r3,zero
 80141b0:	00005306 	br	8014300 <__umoddi3+0x288>
 80141b4:	29c05036 	bltu	r5,r7,80142f8 <__umoddi3+0x280>
 80141b8:	00bfffd4 	movui	r2,65535
 80141bc:	11c05c2e 	bgeu	r2,r7,8014330 <__umoddi3+0x2b8>
 80141c0:	00804034 	movhi	r2,256
 80141c4:	10bfffc4 	addi	r2,r2,-1
 80141c8:	11c10636 	bltu	r2,r7,80145e4 <__umoddi3+0x56c>
 80141cc:	01000404 	movi	r4,16
 80141d0:	3904d83a 	srl	r2,r7,r4
 80141d4:	00c21974 	movhi	r3,2149
 80141d8:	18f6fa04 	addi	r3,r3,-9240
 80141dc:	1885883a 	add	r2,r3,r2
 80141e0:	14c00003 	ldbu	r19,0(r2)
 80141e4:	00c00804 	movi	r3,32
 80141e8:	9927883a 	add	r19,r19,r4
 80141ec:	1ce9c83a 	sub	r20,r3,r19
 80141f0:	a0005c1e 	bne	r20,zero,8014364 <__umoddi3+0x2ec>
 80141f4:	3c400136 	bltu	r7,r17,80141fc <__umoddi3+0x184>
 80141f8:	81810a36 	bltu	r16,r6,8014624 <__umoddi3+0x5ac>
 80141fc:	8185c83a 	sub	r2,r16,r6
 8014200:	89e3c83a 	sub	r17,r17,r7
 8014204:	8089803a 	cmpltu	r4,r16,r2
 8014208:	8939c83a 	sub	fp,r17,r4
 801420c:	e007883a 	mov	r3,fp
 8014210:	00003b06 	br	8014300 <__umoddi3+0x288>
 8014214:	3000041e 	bne	r6,zero,8014228 <__umoddi3+0x1b0>
 8014218:	000b883a 	mov	r5,zero
 801421c:	01000044 	movi	r4,1
 8014220:	80070a40 	call	80070a4 <__udivsi3>
 8014224:	1027883a 	mov	r19,r2
 8014228:	00bfffd4 	movui	r2,65535
 801422c:	14c0442e 	bgeu	r2,r19,8014340 <__umoddi3+0x2c8>
 8014230:	00804034 	movhi	r2,256
 8014234:	10bfffc4 	addi	r2,r2,-1
 8014238:	14c0ec36 	bltu	r2,r19,80145ec <__umoddi3+0x574>
 801423c:	00800404 	movi	r2,16
 8014240:	9886d83a 	srl	r3,r19,r2
 8014244:	01021974 	movhi	r4,2149
 8014248:	2136fa04 	addi	r4,r4,-9240
 801424c:	20c7883a 	add	r3,r4,r3
 8014250:	18c00003 	ldbu	r3,0(r3)
 8014254:	1887883a 	add	r3,r3,r2
 8014258:	00800804 	movi	r2,32
 801425c:	10e5c83a 	sub	r18,r2,r3
 8014260:	9000ab1e 	bne	r18,zero,8014510 <__umoddi3+0x498>
 8014264:	982cd43a 	srli	r22,r19,16
 8014268:	8ce3c83a 	sub	r17,r17,r19
 801426c:	9dffffcc 	andi	r23,r19,65535
 8014270:	b00b883a 	mov	r5,r22
 8014274:	8809883a 	mov	r4,r17
 8014278:	80071080 	call	8007108 <__umodsi3>
 801427c:	b00b883a 	mov	r5,r22
 8014280:	8809883a 	mov	r4,r17
 8014284:	102b883a 	mov	r21,r2
 8014288:	80070a40 	call	80070a4 <__udivsi3>
 801428c:	b80b883a 	mov	r5,r23
 8014290:	1009883a 	mov	r4,r2
 8014294:	80071600 	call	8007160 <__mulsi3>
 8014298:	a82a943a 	slli	r21,r21,16
 801429c:	a006d43a 	srli	r3,r20,16
 80142a0:	1d46b03a 	or	r3,r3,r21
 80142a4:	1880042e 	bgeu	r3,r2,80142b8 <__umoddi3+0x240>
 80142a8:	1cc7883a 	add	r3,r3,r19
 80142ac:	1cc00236 	bltu	r3,r19,80142b8 <__umoddi3+0x240>
 80142b0:	1880012e 	bgeu	r3,r2,80142b8 <__umoddi3+0x240>
 80142b4:	1cc7883a 	add	r3,r3,r19
 80142b8:	18a1c83a 	sub	r16,r3,r2
 80142bc:	b00b883a 	mov	r5,r22
 80142c0:	8009883a 	mov	r4,r16
 80142c4:	80071080 	call	8007108 <__umodsi3>
 80142c8:	1023883a 	mov	r17,r2
 80142cc:	b00b883a 	mov	r5,r22
 80142d0:	8009883a 	mov	r4,r16
 80142d4:	80070a40 	call	80070a4 <__udivsi3>
 80142d8:	8822943a 	slli	r17,r17,16
 80142dc:	b80b883a 	mov	r5,r23
 80142e0:	1009883a 	mov	r4,r2
 80142e4:	80071600 	call	8007160 <__mulsi3>
 80142e8:	a53fffcc 	andi	r20,r20,65535
 80142ec:	a446b03a 	or	r3,r20,r17
 80142f0:	18bfac2e 	bgeu	r3,r2,80141a4 <__alt_data_end+0xfc0141a4>
 80142f4:	003fa706 	br	8014194 <__alt_data_end+0xfc014194>
 80142f8:	2005883a 	mov	r2,r4
 80142fc:	2807883a 	mov	r3,r5
 8014300:	dfc00c17 	ldw	ra,48(sp)
 8014304:	df000b17 	ldw	fp,44(sp)
 8014308:	ddc00a17 	ldw	r23,40(sp)
 801430c:	dd800917 	ldw	r22,36(sp)
 8014310:	dd400817 	ldw	r21,32(sp)
 8014314:	dd000717 	ldw	r20,28(sp)
 8014318:	dcc00617 	ldw	r19,24(sp)
 801431c:	dc800517 	ldw	r18,20(sp)
 8014320:	dc400417 	ldw	r17,16(sp)
 8014324:	dc000317 	ldw	r16,12(sp)
 8014328:	dec00d04 	addi	sp,sp,52
 801432c:	f800283a 	ret
 8014330:	04c03fc4 	movi	r19,255
 8014334:	99c9803a 	cmpltu	r4,r19,r7
 8014338:	200890fa 	slli	r4,r4,3
 801433c:	003fa406 	br	80141d0 <__alt_data_end+0xfc0141d0>
 8014340:	00803fc4 	movi	r2,255
 8014344:	14c5803a 	cmpltu	r2,r2,r19
 8014348:	100490fa 	slli	r2,r2,3
 801434c:	003fbc06 	br	8014240 <__alt_data_end+0xfc014240>
 8014350:	00804034 	movhi	r2,256
 8014354:	10bfffc4 	addi	r2,r2,-1
 8014358:	1180a636 	bltu	r2,r6,80145f4 <__umoddi3+0x57c>
 801435c:	01000404 	movi	r4,16
 8014360:	003f5c06 	br	80140d4 <__alt_data_end+0xfc0140d4>
 8014364:	3d0e983a 	sll	r7,r7,r20
 8014368:	34ead83a 	srl	r21,r6,r19
 801436c:	8cc6d83a 	srl	r3,r17,r19
 8014370:	8d10983a 	sll	r8,r17,r20
 8014374:	3d6ab03a 	or	r21,r7,r21
 8014378:	a82cd43a 	srli	r22,r21,16
 801437c:	84e2d83a 	srl	r17,r16,r19
 8014380:	1809883a 	mov	r4,r3
 8014384:	b00b883a 	mov	r5,r22
 8014388:	8a22b03a 	or	r17,r17,r8
 801438c:	3524983a 	sll	r18,r6,r20
 8014390:	dc400015 	stw	r17,0(sp)
 8014394:	d8c00115 	stw	r3,4(sp)
 8014398:	80071080 	call	8007108 <__umodsi3>
 801439c:	d8c00117 	ldw	r3,4(sp)
 80143a0:	b00b883a 	mov	r5,r22
 80143a4:	1039883a 	mov	fp,r2
 80143a8:	1809883a 	mov	r4,r3
 80143ac:	80070a40 	call	80070a4 <__udivsi3>
 80143b0:	adffffcc 	andi	r23,r21,65535
 80143b4:	100b883a 	mov	r5,r2
 80143b8:	b809883a 	mov	r4,r23
 80143bc:	1023883a 	mov	r17,r2
 80143c0:	80071600 	call	8007160 <__mulsi3>
 80143c4:	d9400017 	ldw	r5,0(sp)
 80143c8:	e008943a 	slli	r4,fp,16
 80143cc:	8520983a 	sll	r16,r16,r20
 80143d0:	2806d43a 	srli	r3,r5,16
 80143d4:	1906b03a 	or	r3,r3,r4
 80143d8:	1880042e 	bgeu	r3,r2,80143ec <__umoddi3+0x374>
 80143dc:	1d47883a 	add	r3,r3,r21
 80143e0:	893fffc4 	addi	r4,r17,-1
 80143e4:	1d40892e 	bgeu	r3,r21,801460c <__umoddi3+0x594>
 80143e8:	2023883a 	mov	r17,r4
 80143ec:	18b9c83a 	sub	fp,r3,r2
 80143f0:	b00b883a 	mov	r5,r22
 80143f4:	e009883a 	mov	r4,fp
 80143f8:	80071080 	call	8007108 <__umodsi3>
 80143fc:	b00b883a 	mov	r5,r22
 8014400:	e009883a 	mov	r4,fp
 8014404:	d8800215 	stw	r2,8(sp)
 8014408:	80070a40 	call	80070a4 <__udivsi3>
 801440c:	100b883a 	mov	r5,r2
 8014410:	b809883a 	mov	r4,r23
 8014414:	102d883a 	mov	r22,r2
 8014418:	80071600 	call	8007160 <__mulsi3>
 801441c:	d9800217 	ldw	r6,8(sp)
 8014420:	d8c00017 	ldw	r3,0(sp)
 8014424:	300c943a 	slli	r6,r6,16
 8014428:	1a3fffcc 	andi	r8,r3,65535
 801442c:	4190b03a 	or	r8,r8,r6
 8014430:	4080042e 	bgeu	r8,r2,8014444 <__umoddi3+0x3cc>
 8014434:	4551883a 	add	r8,r8,r21
 8014438:	b0ffffc4 	addi	r3,r22,-1
 801443c:	45406f2e 	bgeu	r8,r21,80145fc <__umoddi3+0x584>
 8014440:	182d883a 	mov	r22,r3
 8014444:	880e943a 	slli	r7,r17,16
 8014448:	9006d43a 	srli	r3,r18,16
 801444c:	91bfffcc 	andi	r6,r18,65535
 8014450:	3dacb03a 	or	r22,r7,r22
 8014454:	b02ed43a 	srli	r23,r22,16
 8014458:	b5bfffcc 	andi	r22,r22,65535
 801445c:	300b883a 	mov	r5,r6
 8014460:	b009883a 	mov	r4,r22
 8014464:	40a3c83a 	sub	r17,r8,r2
 8014468:	d8c00115 	stw	r3,4(sp)
 801446c:	d9800215 	stw	r6,8(sp)
 8014470:	80071600 	call	8007160 <__mulsi3>
 8014474:	d9800217 	ldw	r6,8(sp)
 8014478:	b809883a 	mov	r4,r23
 801447c:	1039883a 	mov	fp,r2
 8014480:	300b883a 	mov	r5,r6
 8014484:	80071600 	call	8007160 <__mulsi3>
 8014488:	d8c00117 	ldw	r3,4(sp)
 801448c:	b809883a 	mov	r4,r23
 8014490:	d8800215 	stw	r2,8(sp)
 8014494:	180b883a 	mov	r5,r3
 8014498:	80071600 	call	8007160 <__mulsi3>
 801449c:	d8c00117 	ldw	r3,4(sp)
 80144a0:	b009883a 	mov	r4,r22
 80144a4:	102f883a 	mov	r23,r2
 80144a8:	180b883a 	mov	r5,r3
 80144ac:	80071600 	call	8007160 <__mulsi3>
 80144b0:	d9800217 	ldw	r6,8(sp)
 80144b4:	e006d43a 	srli	r3,fp,16
 80144b8:	1185883a 	add	r2,r2,r6
 80144bc:	1885883a 	add	r2,r3,r2
 80144c0:	1180022e 	bgeu	r2,r6,80144cc <__umoddi3+0x454>
 80144c4:	00c00074 	movhi	r3,1
 80144c8:	b8ef883a 	add	r23,r23,r3
 80144cc:	1006d43a 	srli	r3,r2,16
 80144d0:	1004943a 	slli	r2,r2,16
 80144d4:	e73fffcc 	andi	fp,fp,65535
 80144d8:	1dc7883a 	add	r3,r3,r23
 80144dc:	1739883a 	add	fp,r2,fp
 80144e0:	88c03a36 	bltu	r17,r3,80145cc <__umoddi3+0x554>
 80144e4:	88c05126 	beq	r17,r3,801462c <__umoddi3+0x5b4>
 80144e8:	88c9c83a 	sub	r4,r17,r3
 80144ec:	e00f883a 	mov	r7,fp
 80144f0:	81cfc83a 	sub	r7,r16,r7
 80144f4:	81c7803a 	cmpltu	r3,r16,r7
 80144f8:	20c7c83a 	sub	r3,r4,r3
 80144fc:	1cc4983a 	sll	r2,r3,r19
 8014500:	3d0ed83a 	srl	r7,r7,r20
 8014504:	1d06d83a 	srl	r3,r3,r20
 8014508:	11c4b03a 	or	r2,r2,r7
 801450c:	003f7c06 	br	8014300 <__alt_data_end+0xfc014300>
 8014510:	9ca6983a 	sll	r19,r19,r18
 8014514:	88f8d83a 	srl	fp,r17,r3
 8014518:	80c4d83a 	srl	r2,r16,r3
 801451c:	982cd43a 	srli	r22,r19,16
 8014520:	8ca2983a 	sll	r17,r17,r18
 8014524:	e009883a 	mov	r4,fp
 8014528:	b00b883a 	mov	r5,r22
 801452c:	146ab03a 	or	r21,r2,r17
 8014530:	80071080 	call	8007108 <__umodsi3>
 8014534:	b00b883a 	mov	r5,r22
 8014538:	e009883a 	mov	r4,fp
 801453c:	1029883a 	mov	r20,r2
 8014540:	9dffffcc 	andi	r23,r19,65535
 8014544:	80070a40 	call	80070a4 <__udivsi3>
 8014548:	b809883a 	mov	r4,r23
 801454c:	100b883a 	mov	r5,r2
 8014550:	80071600 	call	8007160 <__mulsi3>
 8014554:	a008943a 	slli	r4,r20,16
 8014558:	a806d43a 	srli	r3,r21,16
 801455c:	84a8983a 	sll	r20,r16,r18
 8014560:	1906b03a 	or	r3,r3,r4
 8014564:	1880042e 	bgeu	r3,r2,8014578 <__umoddi3+0x500>
 8014568:	1cc7883a 	add	r3,r3,r19
 801456c:	1cc00236 	bltu	r3,r19,8014578 <__umoddi3+0x500>
 8014570:	1880012e 	bgeu	r3,r2,8014578 <__umoddi3+0x500>
 8014574:	1cc7883a 	add	r3,r3,r19
 8014578:	18a3c83a 	sub	r17,r3,r2
 801457c:	b00b883a 	mov	r5,r22
 8014580:	8809883a 	mov	r4,r17
 8014584:	80071080 	call	8007108 <__umodsi3>
 8014588:	b00b883a 	mov	r5,r22
 801458c:	8809883a 	mov	r4,r17
 8014590:	1021883a 	mov	r16,r2
 8014594:	80070a40 	call	80070a4 <__udivsi3>
 8014598:	100b883a 	mov	r5,r2
 801459c:	b809883a 	mov	r4,r23
 80145a0:	8020943a 	slli	r16,r16,16
 80145a4:	80071600 	call	8007160 <__mulsi3>
 80145a8:	a8ffffcc 	andi	r3,r21,65535
 80145ac:	1c06b03a 	or	r3,r3,r16
 80145b0:	1880042e 	bgeu	r3,r2,80145c4 <__umoddi3+0x54c>
 80145b4:	1cc7883a 	add	r3,r3,r19
 80145b8:	1cc00236 	bltu	r3,r19,80145c4 <__umoddi3+0x54c>
 80145bc:	1880012e 	bgeu	r3,r2,80145c4 <__umoddi3+0x54c>
 80145c0:	1cc7883a 	add	r3,r3,r19
 80145c4:	18a3c83a 	sub	r17,r3,r2
 80145c8:	003f2906 	br	8014270 <__alt_data_end+0xfc014270>
 80145cc:	e48fc83a 	sub	r7,fp,r18
 80145d0:	1d49c83a 	sub	r4,r3,r21
 80145d4:	e1f9803a 	cmpltu	fp,fp,r7
 80145d8:	2739c83a 	sub	fp,r4,fp
 80145dc:	8f09c83a 	sub	r4,r17,fp
 80145e0:	003fc306 	br	80144f0 <__alt_data_end+0xfc0144f0>
 80145e4:	01000604 	movi	r4,24
 80145e8:	003ef906 	br	80141d0 <__alt_data_end+0xfc0141d0>
 80145ec:	00800604 	movi	r2,24
 80145f0:	003f1306 	br	8014240 <__alt_data_end+0xfc014240>
 80145f4:	01000604 	movi	r4,24
 80145f8:	003eb606 	br	80140d4 <__alt_data_end+0xfc0140d4>
 80145fc:	40bf902e 	bgeu	r8,r2,8014440 <__alt_data_end+0xfc014440>
 8014600:	b5bfff84 	addi	r22,r22,-2
 8014604:	4551883a 	add	r8,r8,r21
 8014608:	003f8e06 	br	8014444 <__alt_data_end+0xfc014444>
 801460c:	18bf762e 	bgeu	r3,r2,80143e8 <__alt_data_end+0xfc0143e8>
 8014610:	8c7fff84 	addi	r17,r17,-2
 8014614:	1d47883a 	add	r3,r3,r21
 8014618:	003f7406 	br	80143ec <__alt_data_end+0xfc0143ec>
 801461c:	1cc7883a 	add	r3,r3,r19
 8014620:	003ecd06 	br	8014158 <__alt_data_end+0xfc014158>
 8014624:	8005883a 	mov	r2,r16
 8014628:	003ef806 	br	801420c <__alt_data_end+0xfc01420c>
 801462c:	873fe736 	bltu	r16,fp,80145cc <__alt_data_end+0xfc0145cc>
 8014630:	e00f883a 	mov	r7,fp
 8014634:	0009883a 	mov	r4,zero
 8014638:	003fad06 	br	80144f0 <__alt_data_end+0xfc0144f0>

0801463c <__divdf3>:
 801463c:	defff004 	addi	sp,sp,-64
 8014640:	dc800815 	stw	r18,32(sp)
 8014644:	2824d53a 	srli	r18,r5,20
 8014648:	dd800c15 	stw	r22,48(sp)
 801464c:	282cd7fa 	srli	r22,r5,31
 8014650:	dc000615 	stw	r16,24(sp)
 8014654:	04000434 	movhi	r16,16
 8014658:	843fffc4 	addi	r16,r16,-1
 801465c:	dfc00f15 	stw	ra,60(sp)
 8014660:	df000e15 	stw	fp,56(sp)
 8014664:	ddc00d15 	stw	r23,52(sp)
 8014668:	dd400b15 	stw	r21,44(sp)
 801466c:	dd000a15 	stw	r20,40(sp)
 8014670:	dcc00915 	stw	r19,36(sp)
 8014674:	dc400715 	stw	r17,28(sp)
 8014678:	9481ffcc 	andi	r18,r18,2047
 801467c:	2c20703a 	and	r16,r5,r16
 8014680:	b2003fcc 	andi	r8,r22,255
 8014684:	90006126 	beq	r18,zero,801480c <__divdf3+0x1d0>
 8014688:	0081ffc4 	movi	r2,2047
 801468c:	202b883a 	mov	r21,r4
 8014690:	90803726 	beq	r18,r2,8014770 <__divdf3+0x134>
 8014694:	80800434 	orhi	r2,r16,16
 8014698:	100490fa 	slli	r2,r2,3
 801469c:	2020d77a 	srli	r16,r4,29
 80146a0:	202a90fa 	slli	r21,r4,3
 80146a4:	94bf0044 	addi	r18,r18,-1023
 80146a8:	80a0b03a 	or	r16,r16,r2
 80146ac:	0013883a 	mov	r9,zero
 80146b0:	000b883a 	mov	r5,zero
 80146b4:	3806d53a 	srli	r3,r7,20
 80146b8:	382ed7fa 	srli	r23,r7,31
 80146bc:	04400434 	movhi	r17,16
 80146c0:	8c7fffc4 	addi	r17,r17,-1
 80146c4:	18c1ffcc 	andi	r3,r3,2047
 80146c8:	3029883a 	mov	r20,r6
 80146cc:	3c62703a 	and	r17,r7,r17
 80146d0:	bf003fcc 	andi	fp,r23,255
 80146d4:	18006e26 	beq	r3,zero,8014890 <__divdf3+0x254>
 80146d8:	0081ffc4 	movi	r2,2047
 80146dc:	18806626 	beq	r3,r2,8014878 <__divdf3+0x23c>
 80146e0:	88800434 	orhi	r2,r17,16
 80146e4:	100490fa 	slli	r2,r2,3
 80146e8:	3022d77a 	srli	r17,r6,29
 80146ec:	302890fa 	slli	r20,r6,3
 80146f0:	18ff0044 	addi	r3,r3,-1023
 80146f4:	88a2b03a 	or	r17,r17,r2
 80146f8:	000f883a 	mov	r7,zero
 80146fc:	b5e6f03a 	xor	r19,r22,r23
 8014700:	3a4cb03a 	or	r6,r7,r9
 8014704:	008003c4 	movi	r2,15
 8014708:	9809883a 	mov	r4,r19
 801470c:	90c7c83a 	sub	r3,r18,r3
 8014710:	9cc03fcc 	andi	r19,r19,255
 8014714:	11809636 	bltu	r2,r6,8014970 <__divdf3+0x334>
 8014718:	300c90ba 	slli	r6,r6,2
 801471c:	00820074 	movhi	r2,2049
 8014720:	1091cc04 	addi	r2,r2,18224
 8014724:	308d883a 	add	r6,r6,r2
 8014728:	30800017 	ldw	r2,0(r6)
 801472c:	1000683a 	jmp	r2
 8014730:	08014970 	cmpltui	zero,at,1317
 8014734:	080147a8 	cmpgeui	zero,at,1310
 8014738:	08014960 	cmpeqi	zero,at,1317
 801473c:	0801479c 	xori	zero,at,1310
 8014740:	08014960 	cmpeqi	zero,at,1317
 8014744:	08014934 	orhi	zero,at,1316
 8014748:	08014960 	cmpeqi	zero,at,1317
 801474c:	0801479c 	xori	zero,at,1310
 8014750:	080147a8 	cmpgeui	zero,at,1310
 8014754:	080147a8 	cmpgeui	zero,at,1310
 8014758:	08014934 	orhi	zero,at,1316
 801475c:	0801479c 	xori	zero,at,1310
 8014760:	0801478c 	andi	zero,at,1310
 8014764:	0801478c 	andi	zero,at,1310
 8014768:	0801478c 	andi	zero,at,1310
 801476c:	08014cf8 	rdprs	zero,at,1331
 8014770:	2404b03a 	or	r2,r4,r16
 8014774:	10006c1e 	bne	r2,zero,8014928 <__divdf3+0x2ec>
 8014778:	02400204 	movi	r9,8
 801477c:	0021883a 	mov	r16,zero
 8014780:	002b883a 	mov	r21,zero
 8014784:	01400084 	movi	r5,2
 8014788:	003fca06 	br	80146b4 <__alt_data_end+0xfc0146b4>
 801478c:	8023883a 	mov	r17,r16
 8014790:	a829883a 	mov	r20,r21
 8014794:	4039883a 	mov	fp,r8
 8014798:	280f883a 	mov	r7,r5
 801479c:	00800084 	movi	r2,2
 80147a0:	3881601e 	bne	r7,r2,8014d24 <__divdf3+0x6e8>
 80147a4:	e027883a 	mov	r19,fp
 80147a8:	9900004c 	andi	r4,r19,1
 80147ac:	0081ffc4 	movi	r2,2047
 80147b0:	0021883a 	mov	r16,zero
 80147b4:	002b883a 	mov	r21,zero
 80147b8:	1004953a 	slli	r2,r2,20
 80147bc:	20c03fcc 	andi	r3,r4,255
 80147c0:	01400434 	movhi	r5,16
 80147c4:	297fffc4 	addi	r5,r5,-1
 80147c8:	180697fa 	slli	r3,r3,31
 80147cc:	8160703a 	and	r16,r16,r5
 80147d0:	80a0b03a 	or	r16,r16,r2
 80147d4:	80c6b03a 	or	r3,r16,r3
 80147d8:	a805883a 	mov	r2,r21
 80147dc:	dfc00f17 	ldw	ra,60(sp)
 80147e0:	df000e17 	ldw	fp,56(sp)
 80147e4:	ddc00d17 	ldw	r23,52(sp)
 80147e8:	dd800c17 	ldw	r22,48(sp)
 80147ec:	dd400b17 	ldw	r21,44(sp)
 80147f0:	dd000a17 	ldw	r20,40(sp)
 80147f4:	dcc00917 	ldw	r19,36(sp)
 80147f8:	dc800817 	ldw	r18,32(sp)
 80147fc:	dc400717 	ldw	r17,28(sp)
 8014800:	dc000617 	ldw	r16,24(sp)
 8014804:	dec01004 	addi	sp,sp,64
 8014808:	f800283a 	ret
 801480c:	2404b03a 	or	r2,r4,r16
 8014810:	2023883a 	mov	r17,r4
 8014814:	10003f26 	beq	r2,zero,8014914 <__divdf3+0x2d8>
 8014818:	80015e26 	beq	r16,zero,8014d94 <__divdf3+0x758>
 801481c:	8009883a 	mov	r4,r16
 8014820:	d9800215 	stw	r6,8(sp)
 8014824:	d9c00515 	stw	r7,20(sp)
 8014828:	da000415 	stw	r8,16(sp)
 801482c:	800a58c0 	call	800a58c <__clzsi2>
 8014830:	d9800217 	ldw	r6,8(sp)
 8014834:	d9c00517 	ldw	r7,20(sp)
 8014838:	da000417 	ldw	r8,16(sp)
 801483c:	113ffd44 	addi	r4,r2,-11
 8014840:	00c00704 	movi	r3,28
 8014844:	19014f16 	blt	r3,r4,8014d84 <__divdf3+0x748>
 8014848:	00c00744 	movi	r3,29
 801484c:	157ffe04 	addi	r21,r2,-8
 8014850:	1907c83a 	sub	r3,r3,r4
 8014854:	8560983a 	sll	r16,r16,r21
 8014858:	88c6d83a 	srl	r3,r17,r3
 801485c:	8d6a983a 	sll	r21,r17,r21
 8014860:	1c20b03a 	or	r16,r3,r16
 8014864:	1080fcc4 	addi	r2,r2,1011
 8014868:	00a5c83a 	sub	r18,zero,r2
 801486c:	0013883a 	mov	r9,zero
 8014870:	000b883a 	mov	r5,zero
 8014874:	003f8f06 	br	80146b4 <__alt_data_end+0xfc0146b4>
 8014878:	3444b03a 	or	r2,r6,r17
 801487c:	1000231e 	bne	r2,zero,801490c <__divdf3+0x2d0>
 8014880:	0023883a 	mov	r17,zero
 8014884:	0029883a 	mov	r20,zero
 8014888:	01c00084 	movi	r7,2
 801488c:	003f9b06 	br	80146fc <__alt_data_end+0xfc0146fc>
 8014890:	3444b03a 	or	r2,r6,r17
 8014894:	10001926 	beq	r2,zero,80148fc <__divdf3+0x2c0>
 8014898:	88014b26 	beq	r17,zero,8014dc8 <__divdf3+0x78c>
 801489c:	8809883a 	mov	r4,r17
 80148a0:	d9400115 	stw	r5,4(sp)
 80148a4:	d9800215 	stw	r6,8(sp)
 80148a8:	da000415 	stw	r8,16(sp)
 80148ac:	da400315 	stw	r9,12(sp)
 80148b0:	800a58c0 	call	800a58c <__clzsi2>
 80148b4:	d9400117 	ldw	r5,4(sp)
 80148b8:	d9800217 	ldw	r6,8(sp)
 80148bc:	da000417 	ldw	r8,16(sp)
 80148c0:	da400317 	ldw	r9,12(sp)
 80148c4:	113ffd44 	addi	r4,r2,-11
 80148c8:	00c00704 	movi	r3,28
 80148cc:	19013a16 	blt	r3,r4,8014db8 <__divdf3+0x77c>
 80148d0:	00c00744 	movi	r3,29
 80148d4:	153ffe04 	addi	r20,r2,-8
 80148d8:	1907c83a 	sub	r3,r3,r4
 80148dc:	8d22983a 	sll	r17,r17,r20
 80148e0:	30c6d83a 	srl	r3,r6,r3
 80148e4:	3528983a 	sll	r20,r6,r20
 80148e8:	1c62b03a 	or	r17,r3,r17
 80148ec:	1080fcc4 	addi	r2,r2,1011
 80148f0:	0087c83a 	sub	r3,zero,r2
 80148f4:	000f883a 	mov	r7,zero
 80148f8:	003f8006 	br	80146fc <__alt_data_end+0xfc0146fc>
 80148fc:	0023883a 	mov	r17,zero
 8014900:	0029883a 	mov	r20,zero
 8014904:	01c00044 	movi	r7,1
 8014908:	003f7c06 	br	80146fc <__alt_data_end+0xfc0146fc>
 801490c:	01c000c4 	movi	r7,3
 8014910:	003f7a06 	br	80146fc <__alt_data_end+0xfc0146fc>
 8014914:	02400104 	movi	r9,4
 8014918:	0021883a 	mov	r16,zero
 801491c:	002b883a 	mov	r21,zero
 8014920:	01400044 	movi	r5,1
 8014924:	003f6306 	br	80146b4 <__alt_data_end+0xfc0146b4>
 8014928:	02400304 	movi	r9,12
 801492c:	014000c4 	movi	r5,3
 8014930:	003f6006 	br	80146b4 <__alt_data_end+0xfc0146b4>
 8014934:	04000434 	movhi	r16,16
 8014938:	0009883a 	mov	r4,zero
 801493c:	843fffc4 	addi	r16,r16,-1
 8014940:	057fffc4 	movi	r21,-1
 8014944:	0081ffc4 	movi	r2,2047
 8014948:	003f9b06 	br	80147b8 <__alt_data_end+0xfc0147b8>
 801494c:	00c00044 	movi	r3,1
 8014950:	1887c83a 	sub	r3,r3,r2
 8014954:	01000e04 	movi	r4,56
 8014958:	20c1530e 	bge	r4,r3,8014ea8 <__divdf3+0x86c>
 801495c:	9900004c 	andi	r4,r19,1
 8014960:	0005883a 	mov	r2,zero
 8014964:	0021883a 	mov	r16,zero
 8014968:	002b883a 	mov	r21,zero
 801496c:	003f9206 	br	80147b8 <__alt_data_end+0xfc0147b8>
 8014970:	8c012e36 	bltu	r17,r16,8014e2c <__divdf3+0x7f0>
 8014974:	84412c26 	beq	r16,r17,8014e28 <__divdf3+0x7ec>
 8014978:	a82f883a 	mov	r23,r21
 801497c:	18ffffc4 	addi	r3,r3,-1
 8014980:	002b883a 	mov	r21,zero
 8014984:	a004d63a 	srli	r2,r20,24
 8014988:	8822923a 	slli	r17,r17,8
 801498c:	a028923a 	slli	r20,r20,8
 8014990:	8009883a 	mov	r4,r16
 8014994:	88acb03a 	or	r22,r17,r2
 8014998:	dd000015 	stw	r20,0(sp)
 801499c:	b028d43a 	srli	r20,r22,16
 80149a0:	d8c00215 	stw	r3,8(sp)
 80149a4:	b4bfffcc 	andi	r18,r22,65535
 80149a8:	a00b883a 	mov	r5,r20
 80149ac:	80070a40 	call	80070a4 <__udivsi3>
 80149b0:	100b883a 	mov	r5,r2
 80149b4:	9009883a 	mov	r4,r18
 80149b8:	1023883a 	mov	r17,r2
 80149bc:	80071600 	call	8007160 <__mulsi3>
 80149c0:	8009883a 	mov	r4,r16
 80149c4:	a00b883a 	mov	r5,r20
 80149c8:	1039883a 	mov	fp,r2
 80149cc:	80071080 	call	8007108 <__umodsi3>
 80149d0:	1004943a 	slli	r2,r2,16
 80149d4:	b808d43a 	srli	r4,r23,16
 80149d8:	d8c00217 	ldw	r3,8(sp)
 80149dc:	2084b03a 	or	r2,r4,r2
 80149e0:	1700062e 	bgeu	r2,fp,80149fc <__divdf3+0x3c0>
 80149e4:	1585883a 	add	r2,r2,r22
 80149e8:	893fffc4 	addi	r4,r17,-1
 80149ec:	15811d36 	bltu	r2,r22,8014e64 <__divdf3+0x828>
 80149f0:	17011c2e 	bgeu	r2,fp,8014e64 <__divdf3+0x828>
 80149f4:	8c7fff84 	addi	r17,r17,-2
 80149f8:	1585883a 	add	r2,r2,r22
 80149fc:	1739c83a 	sub	fp,r2,fp
 8014a00:	a00b883a 	mov	r5,r20
 8014a04:	e009883a 	mov	r4,fp
 8014a08:	d8c00215 	stw	r3,8(sp)
 8014a0c:	80070a40 	call	80070a4 <__udivsi3>
 8014a10:	100b883a 	mov	r5,r2
 8014a14:	9009883a 	mov	r4,r18
 8014a18:	1021883a 	mov	r16,r2
 8014a1c:	80071600 	call	8007160 <__mulsi3>
 8014a20:	a00b883a 	mov	r5,r20
 8014a24:	e009883a 	mov	r4,fp
 8014a28:	d8800415 	stw	r2,16(sp)
 8014a2c:	80071080 	call	8007108 <__umodsi3>
 8014a30:	1004943a 	slli	r2,r2,16
 8014a34:	da000417 	ldw	r8,16(sp)
 8014a38:	bdffffcc 	andi	r23,r23,65535
 8014a3c:	b884b03a 	or	r2,r23,r2
 8014a40:	d8c00217 	ldw	r3,8(sp)
 8014a44:	1200062e 	bgeu	r2,r8,8014a60 <__divdf3+0x424>
 8014a48:	1585883a 	add	r2,r2,r22
 8014a4c:	813fffc4 	addi	r4,r16,-1
 8014a50:	15810236 	bltu	r2,r22,8014e5c <__divdf3+0x820>
 8014a54:	1201012e 	bgeu	r2,r8,8014e5c <__divdf3+0x820>
 8014a58:	843fff84 	addi	r16,r16,-2
 8014a5c:	1585883a 	add	r2,r2,r22
 8014a60:	8822943a 	slli	r17,r17,16
 8014a64:	d9800017 	ldw	r6,0(sp)
 8014a68:	1211c83a 	sub	r8,r2,r8
 8014a6c:	8c22b03a 	or	r17,r17,r16
 8014a70:	373fffcc 	andi	fp,r6,65535
 8014a74:	8abfffcc 	andi	r10,r17,65535
 8014a78:	8820d43a 	srli	r16,r17,16
 8014a7c:	5009883a 	mov	r4,r10
 8014a80:	e00b883a 	mov	r5,fp
 8014a84:	302ed43a 	srli	r23,r6,16
 8014a88:	d8c00215 	stw	r3,8(sp)
 8014a8c:	da000415 	stw	r8,16(sp)
 8014a90:	da800115 	stw	r10,4(sp)
 8014a94:	80071600 	call	8007160 <__mulsi3>
 8014a98:	800b883a 	mov	r5,r16
 8014a9c:	e009883a 	mov	r4,fp
 8014aa0:	d8800515 	stw	r2,20(sp)
 8014aa4:	80071600 	call	8007160 <__mulsi3>
 8014aa8:	8009883a 	mov	r4,r16
 8014aac:	b80b883a 	mov	r5,r23
 8014ab0:	d8800315 	stw	r2,12(sp)
 8014ab4:	80071600 	call	8007160 <__mulsi3>
 8014ab8:	da800117 	ldw	r10,4(sp)
 8014abc:	b80b883a 	mov	r5,r23
 8014ac0:	1021883a 	mov	r16,r2
 8014ac4:	5009883a 	mov	r4,r10
 8014ac8:	80071600 	call	8007160 <__mulsi3>
 8014acc:	d9c00517 	ldw	r7,20(sp)
 8014ad0:	da400317 	ldw	r9,12(sp)
 8014ad4:	d8c00217 	ldw	r3,8(sp)
 8014ad8:	3808d43a 	srli	r4,r7,16
 8014adc:	1245883a 	add	r2,r2,r9
 8014ae0:	da000417 	ldw	r8,16(sp)
 8014ae4:	2085883a 	add	r2,r4,r2
 8014ae8:	1240022e 	bgeu	r2,r9,8014af4 <__divdf3+0x4b8>
 8014aec:	01000074 	movhi	r4,1
 8014af0:	8121883a 	add	r16,r16,r4
 8014af4:	1008d43a 	srli	r4,r2,16
 8014af8:	1004943a 	slli	r2,r2,16
 8014afc:	39ffffcc 	andi	r7,r7,65535
 8014b00:	2409883a 	add	r4,r4,r16
 8014b04:	11c5883a 	add	r2,r2,r7
 8014b08:	4100bb36 	bltu	r8,r4,8014df8 <__divdf3+0x7bc>
 8014b0c:	4100d726 	beq	r8,r4,8014e6c <__divdf3+0x830>
 8014b10:	4109c83a 	sub	r4,r8,r4
 8014b14:	a8a1c83a 	sub	r16,r21,r2
 8014b18:	ac2b803a 	cmpltu	r21,r21,r16
 8014b1c:	256bc83a 	sub	r21,r4,r21
 8014b20:	b540d926 	beq	r22,r21,8014e88 <__divdf3+0x84c>
 8014b24:	a00b883a 	mov	r5,r20
 8014b28:	a809883a 	mov	r4,r21
 8014b2c:	d8c00215 	stw	r3,8(sp)
 8014b30:	80070a40 	call	80070a4 <__udivsi3>
 8014b34:	100b883a 	mov	r5,r2
 8014b38:	9009883a 	mov	r4,r18
 8014b3c:	d8800515 	stw	r2,20(sp)
 8014b40:	80071600 	call	8007160 <__mulsi3>
 8014b44:	a809883a 	mov	r4,r21
 8014b48:	a00b883a 	mov	r5,r20
 8014b4c:	d8800415 	stw	r2,16(sp)
 8014b50:	80071080 	call	8007108 <__umodsi3>
 8014b54:	1004943a 	slli	r2,r2,16
 8014b58:	8008d43a 	srli	r4,r16,16
 8014b5c:	da000417 	ldw	r8,16(sp)
 8014b60:	d8c00217 	ldw	r3,8(sp)
 8014b64:	2084b03a 	or	r2,r4,r2
 8014b68:	d9c00517 	ldw	r7,20(sp)
 8014b6c:	1200062e 	bgeu	r2,r8,8014b88 <__divdf3+0x54c>
 8014b70:	1585883a 	add	r2,r2,r22
 8014b74:	393fffc4 	addi	r4,r7,-1
 8014b78:	1580c536 	bltu	r2,r22,8014e90 <__divdf3+0x854>
 8014b7c:	1200c42e 	bgeu	r2,r8,8014e90 <__divdf3+0x854>
 8014b80:	39ffff84 	addi	r7,r7,-2
 8014b84:	1585883a 	add	r2,r2,r22
 8014b88:	122bc83a 	sub	r21,r2,r8
 8014b8c:	a00b883a 	mov	r5,r20
 8014b90:	a809883a 	mov	r4,r21
 8014b94:	d8c00215 	stw	r3,8(sp)
 8014b98:	d9c00515 	stw	r7,20(sp)
 8014b9c:	80070a40 	call	80070a4 <__udivsi3>
 8014ba0:	9009883a 	mov	r4,r18
 8014ba4:	100b883a 	mov	r5,r2
 8014ba8:	d8800415 	stw	r2,16(sp)
 8014bac:	80071600 	call	8007160 <__mulsi3>
 8014bb0:	a809883a 	mov	r4,r21
 8014bb4:	a00b883a 	mov	r5,r20
 8014bb8:	1025883a 	mov	r18,r2
 8014bbc:	80071080 	call	8007108 <__umodsi3>
 8014bc0:	1004943a 	slli	r2,r2,16
 8014bc4:	813fffcc 	andi	r4,r16,65535
 8014bc8:	d8c00217 	ldw	r3,8(sp)
 8014bcc:	20a0b03a 	or	r16,r4,r2
 8014bd0:	d9c00517 	ldw	r7,20(sp)
 8014bd4:	da000417 	ldw	r8,16(sp)
 8014bd8:	8480062e 	bgeu	r16,r18,8014bf4 <__divdf3+0x5b8>
 8014bdc:	85a1883a 	add	r16,r16,r22
 8014be0:	40bfffc4 	addi	r2,r8,-1
 8014be4:	8580ac36 	bltu	r16,r22,8014e98 <__divdf3+0x85c>
 8014be8:	8480ab2e 	bgeu	r16,r18,8014e98 <__divdf3+0x85c>
 8014bec:	423fff84 	addi	r8,r8,-2
 8014bf0:	85a1883a 	add	r16,r16,r22
 8014bf4:	3804943a 	slli	r2,r7,16
 8014bf8:	84a1c83a 	sub	r16,r16,r18
 8014bfc:	e009883a 	mov	r4,fp
 8014c00:	1228b03a 	or	r20,r2,r8
 8014c04:	a1ffffcc 	andi	r7,r20,65535
 8014c08:	a024d43a 	srli	r18,r20,16
 8014c0c:	380b883a 	mov	r5,r7
 8014c10:	d8c00215 	stw	r3,8(sp)
 8014c14:	d9c00515 	stw	r7,20(sp)
 8014c18:	80071600 	call	8007160 <__mulsi3>
 8014c1c:	900b883a 	mov	r5,r18
 8014c20:	e009883a 	mov	r4,fp
 8014c24:	102b883a 	mov	r21,r2
 8014c28:	80071600 	call	8007160 <__mulsi3>
 8014c2c:	900b883a 	mov	r5,r18
 8014c30:	b809883a 	mov	r4,r23
 8014c34:	1039883a 	mov	fp,r2
 8014c38:	80071600 	call	8007160 <__mulsi3>
 8014c3c:	d9c00517 	ldw	r7,20(sp)
 8014c40:	b80b883a 	mov	r5,r23
 8014c44:	1025883a 	mov	r18,r2
 8014c48:	3809883a 	mov	r4,r7
 8014c4c:	80071600 	call	8007160 <__mulsi3>
 8014c50:	a808d43a 	srli	r4,r21,16
 8014c54:	1705883a 	add	r2,r2,fp
 8014c58:	d8c00217 	ldw	r3,8(sp)
 8014c5c:	2085883a 	add	r2,r4,r2
 8014c60:	1700022e 	bgeu	r2,fp,8014c6c <__divdf3+0x630>
 8014c64:	01000074 	movhi	r4,1
 8014c68:	9125883a 	add	r18,r18,r4
 8014c6c:	1008d43a 	srli	r4,r2,16
 8014c70:	1004943a 	slli	r2,r2,16
 8014c74:	ad7fffcc 	andi	r21,r21,65535
 8014c78:	2489883a 	add	r4,r4,r18
 8014c7c:	1545883a 	add	r2,r2,r21
 8014c80:	81003836 	bltu	r16,r4,8014d64 <__divdf3+0x728>
 8014c84:	81003626 	beq	r16,r4,8014d60 <__divdf3+0x724>
 8014c88:	a5000054 	ori	r20,r20,1
 8014c8c:	1880ffc4 	addi	r2,r3,1023
 8014c90:	00bf2e0e 	bge	zero,r2,801494c <__alt_data_end+0xfc01494c>
 8014c94:	a10001cc 	andi	r4,r20,7
 8014c98:	20000726 	beq	r4,zero,8014cb8 <__divdf3+0x67c>
 8014c9c:	a10003cc 	andi	r4,r20,15
 8014ca0:	01400104 	movi	r5,4
 8014ca4:	21400426 	beq	r4,r5,8014cb8 <__divdf3+0x67c>
 8014ca8:	a149883a 	add	r4,r20,r5
 8014cac:	2529803a 	cmpltu	r20,r4,r20
 8014cb0:	8d23883a 	add	r17,r17,r20
 8014cb4:	2029883a 	mov	r20,r4
 8014cb8:	8900402c 	andhi	r4,r17,256
 8014cbc:	20000426 	beq	r4,zero,8014cd0 <__divdf3+0x694>
 8014cc0:	18810004 	addi	r2,r3,1024
 8014cc4:	00ffc034 	movhi	r3,65280
 8014cc8:	18ffffc4 	addi	r3,r3,-1
 8014ccc:	88e2703a 	and	r17,r17,r3
 8014cd0:	00c1ff84 	movi	r3,2046
 8014cd4:	18beb416 	blt	r3,r2,80147a8 <__alt_data_end+0xfc0147a8>
 8014cd8:	a028d0fa 	srli	r20,r20,3
 8014cdc:	882a977a 	slli	r21,r17,29
 8014ce0:	8820927a 	slli	r16,r17,9
 8014ce4:	1081ffcc 	andi	r2,r2,2047
 8014ce8:	ad2ab03a 	or	r21,r21,r20
 8014cec:	8020d33a 	srli	r16,r16,12
 8014cf0:	9900004c 	andi	r4,r19,1
 8014cf4:	003eb006 	br	80147b8 <__alt_data_end+0xfc0147b8>
 8014cf8:	8080022c 	andhi	r2,r16,8
 8014cfc:	10001226 	beq	r2,zero,8014d48 <__divdf3+0x70c>
 8014d00:	8880022c 	andhi	r2,r17,8
 8014d04:	1000101e 	bne	r2,zero,8014d48 <__divdf3+0x70c>
 8014d08:	00800434 	movhi	r2,16
 8014d0c:	8c000234 	orhi	r16,r17,8
 8014d10:	10bfffc4 	addi	r2,r2,-1
 8014d14:	b809883a 	mov	r4,r23
 8014d18:	80a0703a 	and	r16,r16,r2
 8014d1c:	a02b883a 	mov	r21,r20
 8014d20:	003f0806 	br	8014944 <__alt_data_end+0xfc014944>
 8014d24:	008000c4 	movi	r2,3
 8014d28:	3880b126 	beq	r7,r2,8014ff0 <__divdf3+0x9b4>
 8014d2c:	00800044 	movi	r2,1
 8014d30:	38805b1e 	bne	r7,r2,8014ea0 <__divdf3+0x864>
 8014d34:	e009883a 	mov	r4,fp
 8014d38:	0005883a 	mov	r2,zero
 8014d3c:	0021883a 	mov	r16,zero
 8014d40:	002b883a 	mov	r21,zero
 8014d44:	003e9c06 	br	80147b8 <__alt_data_end+0xfc0147b8>
 8014d48:	00800434 	movhi	r2,16
 8014d4c:	84000234 	orhi	r16,r16,8
 8014d50:	10bfffc4 	addi	r2,r2,-1
 8014d54:	b009883a 	mov	r4,r22
 8014d58:	80a0703a 	and	r16,r16,r2
 8014d5c:	003ef906 	br	8014944 <__alt_data_end+0xfc014944>
 8014d60:	103fca26 	beq	r2,zero,8014c8c <__alt_data_end+0xfc014c8c>
 8014d64:	b421883a 	add	r16,r22,r16
 8014d68:	a17fffc4 	addi	r5,r20,-1
 8014d6c:	8580422e 	bgeu	r16,r22,8014e78 <__divdf3+0x83c>
 8014d70:	2829883a 	mov	r20,r5
 8014d74:	813fc41e 	bne	r16,r4,8014c88 <__alt_data_end+0xfc014c88>
 8014d78:	d9800017 	ldw	r6,0(sp)
 8014d7c:	30bfc21e 	bne	r6,r2,8014c88 <__alt_data_end+0xfc014c88>
 8014d80:	003fc206 	br	8014c8c <__alt_data_end+0xfc014c8c>
 8014d84:	143ff604 	addi	r16,r2,-40
 8014d88:	8c20983a 	sll	r16,r17,r16
 8014d8c:	002b883a 	mov	r21,zero
 8014d90:	003eb406 	br	8014864 <__alt_data_end+0xfc014864>
 8014d94:	d9800215 	stw	r6,8(sp)
 8014d98:	d9c00515 	stw	r7,20(sp)
 8014d9c:	da000415 	stw	r8,16(sp)
 8014da0:	800a58c0 	call	800a58c <__clzsi2>
 8014da4:	10800804 	addi	r2,r2,32
 8014da8:	da000417 	ldw	r8,16(sp)
 8014dac:	d9c00517 	ldw	r7,20(sp)
 8014db0:	d9800217 	ldw	r6,8(sp)
 8014db4:	003ea106 	br	801483c <__alt_data_end+0xfc01483c>
 8014db8:	147ff604 	addi	r17,r2,-40
 8014dbc:	3462983a 	sll	r17,r6,r17
 8014dc0:	0029883a 	mov	r20,zero
 8014dc4:	003ec906 	br	80148ec <__alt_data_end+0xfc0148ec>
 8014dc8:	3009883a 	mov	r4,r6
 8014dcc:	d9400115 	stw	r5,4(sp)
 8014dd0:	d9800215 	stw	r6,8(sp)
 8014dd4:	da000415 	stw	r8,16(sp)
 8014dd8:	da400315 	stw	r9,12(sp)
 8014ddc:	800a58c0 	call	800a58c <__clzsi2>
 8014de0:	10800804 	addi	r2,r2,32
 8014de4:	da400317 	ldw	r9,12(sp)
 8014de8:	da000417 	ldw	r8,16(sp)
 8014dec:	d9800217 	ldw	r6,8(sp)
 8014df0:	d9400117 	ldw	r5,4(sp)
 8014df4:	003eb306 	br	80148c4 <__alt_data_end+0xfc0148c4>
 8014df8:	d9800017 	ldw	r6,0(sp)
 8014dfc:	a9ab883a 	add	r21,r21,r6
 8014e00:	a98b803a 	cmpltu	r5,r21,r6
 8014e04:	2d8b883a 	add	r5,r5,r22
 8014e08:	2a11883a 	add	r8,r5,r8
 8014e0c:	897fffc4 	addi	r5,r17,-1
 8014e10:	b2000c2e 	bgeu	r22,r8,8014e44 <__divdf3+0x808>
 8014e14:	41003f36 	bltu	r8,r4,8014f14 <__divdf3+0x8d8>
 8014e18:	22006c26 	beq	r4,r8,8014fcc <__divdf3+0x990>
 8014e1c:	4109c83a 	sub	r4,r8,r4
 8014e20:	2823883a 	mov	r17,r5
 8014e24:	003f3b06 	br	8014b14 <__alt_data_end+0xfc014b14>
 8014e28:	ad3ed336 	bltu	r21,r20,8014978 <__alt_data_end+0xfc014978>
 8014e2c:	a804d07a 	srli	r2,r21,1
 8014e30:	802e97fa 	slli	r23,r16,31
 8014e34:	a82a97fa 	slli	r21,r21,31
 8014e38:	8020d07a 	srli	r16,r16,1
 8014e3c:	b8aeb03a 	or	r23,r23,r2
 8014e40:	003ed006 	br	8014984 <__alt_data_end+0xfc014984>
 8014e44:	b23ff51e 	bne	r22,r8,8014e1c <__alt_data_end+0xfc014e1c>
 8014e48:	d9800017 	ldw	r6,0(sp)
 8014e4c:	a9bff12e 	bgeu	r21,r6,8014e14 <__alt_data_end+0xfc014e14>
 8014e50:	b109c83a 	sub	r4,r22,r4
 8014e54:	2823883a 	mov	r17,r5
 8014e58:	003f2e06 	br	8014b14 <__alt_data_end+0xfc014b14>
 8014e5c:	2021883a 	mov	r16,r4
 8014e60:	003eff06 	br	8014a60 <__alt_data_end+0xfc014a60>
 8014e64:	2023883a 	mov	r17,r4
 8014e68:	003ee406 	br	80149fc <__alt_data_end+0xfc0149fc>
 8014e6c:	a8bfe236 	bltu	r21,r2,8014df8 <__alt_data_end+0xfc014df8>
 8014e70:	0009883a 	mov	r4,zero
 8014e74:	003f2706 	br	8014b14 <__alt_data_end+0xfc014b14>
 8014e78:	81002d36 	bltu	r16,r4,8014f30 <__divdf3+0x8f4>
 8014e7c:	24005626 	beq	r4,r16,8014fd8 <__divdf3+0x99c>
 8014e80:	2829883a 	mov	r20,r5
 8014e84:	003f8006 	br	8014c88 <__alt_data_end+0xfc014c88>
 8014e88:	053fffc4 	movi	r20,-1
 8014e8c:	003f7f06 	br	8014c8c <__alt_data_end+0xfc014c8c>
 8014e90:	200f883a 	mov	r7,r4
 8014e94:	003f3c06 	br	8014b88 <__alt_data_end+0xfc014b88>
 8014e98:	1011883a 	mov	r8,r2
 8014e9c:	003f5506 	br	8014bf4 <__alt_data_end+0xfc014bf4>
 8014ea0:	e027883a 	mov	r19,fp
 8014ea4:	003f7906 	br	8014c8c <__alt_data_end+0xfc014c8c>
 8014ea8:	010007c4 	movi	r4,31
 8014eac:	20c02816 	blt	r4,r3,8014f50 <__divdf3+0x914>
 8014eb0:	00800804 	movi	r2,32
 8014eb4:	10c5c83a 	sub	r2,r2,r3
 8014eb8:	888a983a 	sll	r5,r17,r2
 8014ebc:	a0c8d83a 	srl	r4,r20,r3
 8014ec0:	a084983a 	sll	r2,r20,r2
 8014ec4:	88e2d83a 	srl	r17,r17,r3
 8014ec8:	2906b03a 	or	r3,r5,r4
 8014ecc:	1004c03a 	cmpne	r2,r2,zero
 8014ed0:	1886b03a 	or	r3,r3,r2
 8014ed4:	188001cc 	andi	r2,r3,7
 8014ed8:	10000726 	beq	r2,zero,8014ef8 <__divdf3+0x8bc>
 8014edc:	188003cc 	andi	r2,r3,15
 8014ee0:	01000104 	movi	r4,4
 8014ee4:	11000426 	beq	r2,r4,8014ef8 <__divdf3+0x8bc>
 8014ee8:	1805883a 	mov	r2,r3
 8014eec:	10c00104 	addi	r3,r2,4
 8014ef0:	1885803a 	cmpltu	r2,r3,r2
 8014ef4:	88a3883a 	add	r17,r17,r2
 8014ef8:	8880202c 	andhi	r2,r17,128
 8014efc:	10002926 	beq	r2,zero,8014fa4 <__divdf3+0x968>
 8014f00:	9900004c 	andi	r4,r19,1
 8014f04:	00800044 	movi	r2,1
 8014f08:	0021883a 	mov	r16,zero
 8014f0c:	002b883a 	mov	r21,zero
 8014f10:	003e2906 	br	80147b8 <__alt_data_end+0xfc0147b8>
 8014f14:	d9800017 	ldw	r6,0(sp)
 8014f18:	8c7fff84 	addi	r17,r17,-2
 8014f1c:	a9ab883a 	add	r21,r21,r6
 8014f20:	a98b803a 	cmpltu	r5,r21,r6
 8014f24:	2d8b883a 	add	r5,r5,r22
 8014f28:	2a11883a 	add	r8,r5,r8
 8014f2c:	003ef806 	br	8014b10 <__alt_data_end+0xfc014b10>
 8014f30:	d9800017 	ldw	r6,0(sp)
 8014f34:	318f883a 	add	r7,r6,r6
 8014f38:	398b803a 	cmpltu	r5,r7,r6
 8014f3c:	2d8d883a 	add	r6,r5,r22
 8014f40:	81a1883a 	add	r16,r16,r6
 8014f44:	a17fff84 	addi	r5,r20,-2
 8014f48:	d9c00015 	stw	r7,0(sp)
 8014f4c:	003f8806 	br	8014d70 <__alt_data_end+0xfc014d70>
 8014f50:	013ff844 	movi	r4,-31
 8014f54:	2085c83a 	sub	r2,r4,r2
 8014f58:	8888d83a 	srl	r4,r17,r2
 8014f5c:	00800804 	movi	r2,32
 8014f60:	18802126 	beq	r3,r2,8014fe8 <__divdf3+0x9ac>
 8014f64:	04001004 	movi	r16,64
 8014f68:	80c7c83a 	sub	r3,r16,r3
 8014f6c:	88e0983a 	sll	r16,r17,r3
 8014f70:	8504b03a 	or	r2,r16,r20
 8014f74:	1004c03a 	cmpne	r2,r2,zero
 8014f78:	2084b03a 	or	r2,r4,r2
 8014f7c:	144001cc 	andi	r17,r2,7
 8014f80:	88000d1e 	bne	r17,zero,8014fb8 <__divdf3+0x97c>
 8014f84:	0021883a 	mov	r16,zero
 8014f88:	102ad0fa 	srli	r21,r2,3
 8014f8c:	9900004c 	andi	r4,r19,1
 8014f90:	0005883a 	mov	r2,zero
 8014f94:	ac6ab03a 	or	r21,r21,r17
 8014f98:	003e0706 	br	80147b8 <__alt_data_end+0xfc0147b8>
 8014f9c:	1007883a 	mov	r3,r2
 8014fa0:	0023883a 	mov	r17,zero
 8014fa4:	8820927a 	slli	r16,r17,9
 8014fa8:	1805883a 	mov	r2,r3
 8014fac:	8822977a 	slli	r17,r17,29
 8014fb0:	8020d33a 	srli	r16,r16,12
 8014fb4:	003ff406 	br	8014f88 <__alt_data_end+0xfc014f88>
 8014fb8:	10c003cc 	andi	r3,r2,15
 8014fbc:	01000104 	movi	r4,4
 8014fc0:	193ff626 	beq	r3,r4,8014f9c <__alt_data_end+0xfc014f9c>
 8014fc4:	0023883a 	mov	r17,zero
 8014fc8:	003fc806 	br	8014eec <__alt_data_end+0xfc014eec>
 8014fcc:	a8bfd136 	bltu	r21,r2,8014f14 <__alt_data_end+0xfc014f14>
 8014fd0:	2823883a 	mov	r17,r5
 8014fd4:	003fa606 	br	8014e70 <__alt_data_end+0xfc014e70>
 8014fd8:	d9800017 	ldw	r6,0(sp)
 8014fdc:	30bfd436 	bltu	r6,r2,8014f30 <__alt_data_end+0xfc014f30>
 8014fe0:	2829883a 	mov	r20,r5
 8014fe4:	003f6406 	br	8014d78 <__alt_data_end+0xfc014d78>
 8014fe8:	0021883a 	mov	r16,zero
 8014fec:	003fe006 	br	8014f70 <__alt_data_end+0xfc014f70>
 8014ff0:	00800434 	movhi	r2,16
 8014ff4:	8c000234 	orhi	r16,r17,8
 8014ff8:	10bfffc4 	addi	r2,r2,-1
 8014ffc:	e009883a 	mov	r4,fp
 8015000:	80a0703a 	and	r16,r16,r2
 8015004:	a02b883a 	mov	r21,r20
 8015008:	003e4e06 	br	8014944 <__alt_data_end+0xfc014944>

0801500c <__eqdf2>:
 801500c:	2804d53a 	srli	r2,r5,20
 8015010:	3806d53a 	srli	r3,r7,20
 8015014:	02000434 	movhi	r8,16
 8015018:	423fffc4 	addi	r8,r8,-1
 801501c:	1081ffcc 	andi	r2,r2,2047
 8015020:	0281ffc4 	movi	r10,2047
 8015024:	2a12703a 	and	r9,r5,r8
 8015028:	18c1ffcc 	andi	r3,r3,2047
 801502c:	3a10703a 	and	r8,r7,r8
 8015030:	280ad7fa 	srli	r5,r5,31
 8015034:	380ed7fa 	srli	r7,r7,31
 8015038:	12801026 	beq	r2,r10,801507c <__eqdf2+0x70>
 801503c:	0281ffc4 	movi	r10,2047
 8015040:	1a800a26 	beq	r3,r10,801506c <__eqdf2+0x60>
 8015044:	10c00226 	beq	r2,r3,8015050 <__eqdf2+0x44>
 8015048:	00800044 	movi	r2,1
 801504c:	f800283a 	ret
 8015050:	4a3ffd1e 	bne	r9,r8,8015048 <__alt_data_end+0xfc015048>
 8015054:	21bffc1e 	bne	r4,r6,8015048 <__alt_data_end+0xfc015048>
 8015058:	29c00c26 	beq	r5,r7,801508c <__eqdf2+0x80>
 801505c:	103ffa1e 	bne	r2,zero,8015048 <__alt_data_end+0xfc015048>
 8015060:	2244b03a 	or	r2,r4,r9
 8015064:	1004c03a 	cmpne	r2,r2,zero
 8015068:	f800283a 	ret
 801506c:	3214b03a 	or	r10,r6,r8
 8015070:	503ff426 	beq	r10,zero,8015044 <__alt_data_end+0xfc015044>
 8015074:	00800044 	movi	r2,1
 8015078:	f800283a 	ret
 801507c:	2254b03a 	or	r10,r4,r9
 8015080:	503fee26 	beq	r10,zero,801503c <__alt_data_end+0xfc01503c>
 8015084:	00800044 	movi	r2,1
 8015088:	f800283a 	ret
 801508c:	0005883a 	mov	r2,zero
 8015090:	f800283a 	ret

08015094 <__ledf2>:
 8015094:	2804d53a 	srli	r2,r5,20
 8015098:	3810d53a 	srli	r8,r7,20
 801509c:	00c00434 	movhi	r3,16
 80150a0:	18ffffc4 	addi	r3,r3,-1
 80150a4:	1081ffcc 	andi	r2,r2,2047
 80150a8:	0241ffc4 	movi	r9,2047
 80150ac:	28d4703a 	and	r10,r5,r3
 80150b0:	4201ffcc 	andi	r8,r8,2047
 80150b4:	38c6703a 	and	r3,r7,r3
 80150b8:	280ad7fa 	srli	r5,r5,31
 80150bc:	380ed7fa 	srli	r7,r7,31
 80150c0:	12401f26 	beq	r2,r9,8015140 <__ledf2+0xac>
 80150c4:	0241ffc4 	movi	r9,2047
 80150c8:	42401426 	beq	r8,r9,801511c <__ledf2+0x88>
 80150cc:	1000091e 	bne	r2,zero,80150f4 <__ledf2+0x60>
 80150d0:	2296b03a 	or	r11,r4,r10
 80150d4:	5813003a 	cmpeq	r9,r11,zero
 80150d8:	29403fcc 	andi	r5,r5,255
 80150dc:	40000a1e 	bne	r8,zero,8015108 <__ledf2+0x74>
 80150e0:	30d8b03a 	or	r12,r6,r3
 80150e4:	6000081e 	bne	r12,zero,8015108 <__ledf2+0x74>
 80150e8:	0005883a 	mov	r2,zero
 80150ec:	5800111e 	bne	r11,zero,8015134 <__ledf2+0xa0>
 80150f0:	f800283a 	ret
 80150f4:	29403fcc 	andi	r5,r5,255
 80150f8:	40000c1e 	bne	r8,zero,801512c <__ledf2+0x98>
 80150fc:	30d2b03a 	or	r9,r6,r3
 8015100:	48000c26 	beq	r9,zero,8015134 <__ledf2+0xa0>
 8015104:	0013883a 	mov	r9,zero
 8015108:	39c03fcc 	andi	r7,r7,255
 801510c:	48000826 	beq	r9,zero,8015130 <__ledf2+0x9c>
 8015110:	38001126 	beq	r7,zero,8015158 <__ledf2+0xc4>
 8015114:	00800044 	movi	r2,1
 8015118:	f800283a 	ret
 801511c:	30d2b03a 	or	r9,r6,r3
 8015120:	483fea26 	beq	r9,zero,80150cc <__alt_data_end+0xfc0150cc>
 8015124:	00800084 	movi	r2,2
 8015128:	f800283a 	ret
 801512c:	39c03fcc 	andi	r7,r7,255
 8015130:	39400726 	beq	r7,r5,8015150 <__ledf2+0xbc>
 8015134:	2800081e 	bne	r5,zero,8015158 <__ledf2+0xc4>
 8015138:	00800044 	movi	r2,1
 801513c:	f800283a 	ret
 8015140:	2292b03a 	or	r9,r4,r10
 8015144:	483fdf26 	beq	r9,zero,80150c4 <__alt_data_end+0xfc0150c4>
 8015148:	00800084 	movi	r2,2
 801514c:	f800283a 	ret
 8015150:	4080030e 	bge	r8,r2,8015160 <__ledf2+0xcc>
 8015154:	383fef26 	beq	r7,zero,8015114 <__alt_data_end+0xfc015114>
 8015158:	00bfffc4 	movi	r2,-1
 801515c:	f800283a 	ret
 8015160:	123feb16 	blt	r2,r8,8015110 <__alt_data_end+0xfc015110>
 8015164:	1abff336 	bltu	r3,r10,8015134 <__alt_data_end+0xfc015134>
 8015168:	50c00326 	beq	r10,r3,8015178 <__ledf2+0xe4>
 801516c:	50c0042e 	bgeu	r10,r3,8015180 <__ledf2+0xec>
 8015170:	283fe81e 	bne	r5,zero,8015114 <__alt_data_end+0xfc015114>
 8015174:	003ff806 	br	8015158 <__alt_data_end+0xfc015158>
 8015178:	313fee36 	bltu	r6,r4,8015134 <__alt_data_end+0xfc015134>
 801517c:	21bffc36 	bltu	r4,r6,8015170 <__alt_data_end+0xfc015170>
 8015180:	0005883a 	mov	r2,zero
 8015184:	f800283a 	ret

08015188 <__floatsidf>:
 8015188:	defffd04 	addi	sp,sp,-12
 801518c:	dfc00215 	stw	ra,8(sp)
 8015190:	dc400115 	stw	r17,4(sp)
 8015194:	dc000015 	stw	r16,0(sp)
 8015198:	20002b26 	beq	r4,zero,8015248 <__floatsidf+0xc0>
 801519c:	2023883a 	mov	r17,r4
 80151a0:	2020d7fa 	srli	r16,r4,31
 80151a4:	20002d16 	blt	r4,zero,801525c <__floatsidf+0xd4>
 80151a8:	8809883a 	mov	r4,r17
 80151ac:	800a58c0 	call	800a58c <__clzsi2>
 80151b0:	01410784 	movi	r5,1054
 80151b4:	288bc83a 	sub	r5,r5,r2
 80151b8:	01010cc4 	movi	r4,1075
 80151bc:	2149c83a 	sub	r4,r4,r5
 80151c0:	00c007c4 	movi	r3,31
 80151c4:	1900160e 	bge	r3,r4,8015220 <__floatsidf+0x98>
 80151c8:	00c104c4 	movi	r3,1043
 80151cc:	1947c83a 	sub	r3,r3,r5
 80151d0:	88c6983a 	sll	r3,r17,r3
 80151d4:	00800434 	movhi	r2,16
 80151d8:	10bfffc4 	addi	r2,r2,-1
 80151dc:	1886703a 	and	r3,r3,r2
 80151e0:	2941ffcc 	andi	r5,r5,2047
 80151e4:	800d883a 	mov	r6,r16
 80151e8:	0005883a 	mov	r2,zero
 80151ec:	280a953a 	slli	r5,r5,20
 80151f0:	31803fcc 	andi	r6,r6,255
 80151f4:	01000434 	movhi	r4,16
 80151f8:	300c97fa 	slli	r6,r6,31
 80151fc:	213fffc4 	addi	r4,r4,-1
 8015200:	1906703a 	and	r3,r3,r4
 8015204:	1946b03a 	or	r3,r3,r5
 8015208:	1986b03a 	or	r3,r3,r6
 801520c:	dfc00217 	ldw	ra,8(sp)
 8015210:	dc400117 	ldw	r17,4(sp)
 8015214:	dc000017 	ldw	r16,0(sp)
 8015218:	dec00304 	addi	sp,sp,12
 801521c:	f800283a 	ret
 8015220:	00c002c4 	movi	r3,11
 8015224:	1887c83a 	sub	r3,r3,r2
 8015228:	88c6d83a 	srl	r3,r17,r3
 801522c:	8904983a 	sll	r2,r17,r4
 8015230:	01000434 	movhi	r4,16
 8015234:	213fffc4 	addi	r4,r4,-1
 8015238:	2941ffcc 	andi	r5,r5,2047
 801523c:	1906703a 	and	r3,r3,r4
 8015240:	800d883a 	mov	r6,r16
 8015244:	003fe906 	br	80151ec <__alt_data_end+0xfc0151ec>
 8015248:	000d883a 	mov	r6,zero
 801524c:	000b883a 	mov	r5,zero
 8015250:	0007883a 	mov	r3,zero
 8015254:	0005883a 	mov	r2,zero
 8015258:	003fe406 	br	80151ec <__alt_data_end+0xfc0151ec>
 801525c:	0123c83a 	sub	r17,zero,r4
 8015260:	003fd106 	br	80151a8 <__alt_data_end+0xfc0151a8>

08015264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015264:	defffe04 	addi	sp,sp,-8
 8015268:	dfc00115 	stw	ra,4(sp)
 801526c:	df000015 	stw	fp,0(sp)
 8015270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015274:	d0a01217 	ldw	r2,-32696(gp)
 8015278:	10000326 	beq	r2,zero,8015288 <alt_get_errno+0x24>
 801527c:	d0a01217 	ldw	r2,-32696(gp)
 8015280:	103ee83a 	callr	r2
 8015284:	00000106 	br	801528c <alt_get_errno+0x28>
 8015288:	d0a6f204 	addi	r2,gp,-25656
}
 801528c:	e037883a 	mov	sp,fp
 8015290:	dfc00117 	ldw	ra,4(sp)
 8015294:	df000017 	ldw	fp,0(sp)
 8015298:	dec00204 	addi	sp,sp,8
 801529c:	f800283a 	ret

080152a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 80152a0:	defffb04 	addi	sp,sp,-20
 80152a4:	dfc00415 	stw	ra,16(sp)
 80152a8:	df000315 	stw	fp,12(sp)
 80152ac:	df000304 	addi	fp,sp,12
 80152b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 80152b4:	e0bfff17 	ldw	r2,-4(fp)
 80152b8:	10000816 	blt	r2,zero,80152dc <close+0x3c>
 80152bc:	01400304 	movi	r5,12
 80152c0:	e13fff17 	ldw	r4,-4(fp)
 80152c4:	80071600 	call	8007160 <__mulsi3>
 80152c8:	1007883a 	mov	r3,r2
 80152cc:	00821974 	movhi	r2,2149
 80152d0:	10b9f904 	addi	r2,r2,-6172
 80152d4:	1885883a 	add	r2,r3,r2
 80152d8:	00000106 	br	80152e0 <close+0x40>
 80152dc:	0005883a 	mov	r2,zero
 80152e0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80152e4:	e0bffd17 	ldw	r2,-12(fp)
 80152e8:	10001926 	beq	r2,zero,8015350 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80152ec:	e0bffd17 	ldw	r2,-12(fp)
 80152f0:	10800017 	ldw	r2,0(r2)
 80152f4:	10800417 	ldw	r2,16(r2)
 80152f8:	10000626 	beq	r2,zero,8015314 <close+0x74>
 80152fc:	e0bffd17 	ldw	r2,-12(fp)
 8015300:	10800017 	ldw	r2,0(r2)
 8015304:	10800417 	ldw	r2,16(r2)
 8015308:	e13ffd17 	ldw	r4,-12(fp)
 801530c:	103ee83a 	callr	r2
 8015310:	00000106 	br	8015318 <close+0x78>
 8015314:	0005883a 	mov	r2,zero
 8015318:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 801531c:	e13fff17 	ldw	r4,-4(fp)
 8015320:	80159880 	call	8015988 <alt_release_fd>
    if (rval < 0)
 8015324:	e0bffe17 	ldw	r2,-8(fp)
 8015328:	1000070e 	bge	r2,zero,8015348 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 801532c:	80152640 	call	8015264 <alt_get_errno>
 8015330:	1007883a 	mov	r3,r2
 8015334:	e0bffe17 	ldw	r2,-8(fp)
 8015338:	0085c83a 	sub	r2,zero,r2
 801533c:	18800015 	stw	r2,0(r3)
      return -1;
 8015340:	00bfffc4 	movi	r2,-1
 8015344:	00000706 	br	8015364 <close+0xc4>
    }
    return 0;
 8015348:	0005883a 	mov	r2,zero
 801534c:	00000506 	br	8015364 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015350:	80152640 	call	8015264 <alt_get_errno>
 8015354:	1007883a 	mov	r3,r2
 8015358:	00801444 	movi	r2,81
 801535c:	18800015 	stw	r2,0(r3)
    return -1;
 8015360:	00bfffc4 	movi	r2,-1
  }
}
 8015364:	e037883a 	mov	sp,fp
 8015368:	dfc00117 	ldw	ra,4(sp)
 801536c:	df000017 	ldw	fp,0(sp)
 8015370:	dec00204 	addi	sp,sp,8
 8015374:	f800283a 	ret

08015378 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8015378:	defffc04 	addi	sp,sp,-16
 801537c:	df000315 	stw	fp,12(sp)
 8015380:	df000304 	addi	fp,sp,12
 8015384:	e13ffd15 	stw	r4,-12(fp)
 8015388:	e17ffe15 	stw	r5,-8(fp)
 801538c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8015390:	e0bfff17 	ldw	r2,-4(fp)
}
 8015394:	e037883a 	mov	sp,fp
 8015398:	df000017 	ldw	fp,0(sp)
 801539c:	dec00104 	addi	sp,sp,4
 80153a0:	f800283a 	ret

080153a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80153a4:	defffe04 	addi	sp,sp,-8
 80153a8:	dfc00115 	stw	ra,4(sp)
 80153ac:	df000015 	stw	fp,0(sp)
 80153b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80153b4:	d0a01217 	ldw	r2,-32696(gp)
 80153b8:	10000326 	beq	r2,zero,80153c8 <alt_get_errno+0x24>
 80153bc:	d0a01217 	ldw	r2,-32696(gp)
 80153c0:	103ee83a 	callr	r2
 80153c4:	00000106 	br	80153cc <alt_get_errno+0x28>
 80153c8:	d0a6f204 	addi	r2,gp,-25656
}
 80153cc:	e037883a 	mov	sp,fp
 80153d0:	dfc00117 	ldw	ra,4(sp)
 80153d4:	df000017 	ldw	fp,0(sp)
 80153d8:	dec00204 	addi	sp,sp,8
 80153dc:	f800283a 	ret

080153e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 80153e0:	defffb04 	addi	sp,sp,-20
 80153e4:	dfc00415 	stw	ra,16(sp)
 80153e8:	df000315 	stw	fp,12(sp)
 80153ec:	df000304 	addi	fp,sp,12
 80153f0:	e13ffe15 	stw	r4,-8(fp)
 80153f4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80153f8:	e0bffe17 	ldw	r2,-8(fp)
 80153fc:	10000816 	blt	r2,zero,8015420 <fstat+0x40>
 8015400:	01400304 	movi	r5,12
 8015404:	e13ffe17 	ldw	r4,-8(fp)
 8015408:	80071600 	call	8007160 <__mulsi3>
 801540c:	1007883a 	mov	r3,r2
 8015410:	00821974 	movhi	r2,2149
 8015414:	10b9f904 	addi	r2,r2,-6172
 8015418:	1885883a 	add	r2,r3,r2
 801541c:	00000106 	br	8015424 <fstat+0x44>
 8015420:	0005883a 	mov	r2,zero
 8015424:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8015428:	e0bffd17 	ldw	r2,-12(fp)
 801542c:	10001026 	beq	r2,zero,8015470 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8015430:	e0bffd17 	ldw	r2,-12(fp)
 8015434:	10800017 	ldw	r2,0(r2)
 8015438:	10800817 	ldw	r2,32(r2)
 801543c:	10000726 	beq	r2,zero,801545c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8015440:	e0bffd17 	ldw	r2,-12(fp)
 8015444:	10800017 	ldw	r2,0(r2)
 8015448:	10800817 	ldw	r2,32(r2)
 801544c:	e17fff17 	ldw	r5,-4(fp)
 8015450:	e13ffd17 	ldw	r4,-12(fp)
 8015454:	103ee83a 	callr	r2
 8015458:	00000a06 	br	8015484 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801545c:	e0bfff17 	ldw	r2,-4(fp)
 8015460:	00c80004 	movi	r3,8192
 8015464:	10c00115 	stw	r3,4(r2)
      return 0;
 8015468:	0005883a 	mov	r2,zero
 801546c:	00000506 	br	8015484 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015470:	80153a40 	call	80153a4 <alt_get_errno>
 8015474:	1007883a 	mov	r3,r2
 8015478:	00801444 	movi	r2,81
 801547c:	18800015 	stw	r2,0(r3)
    return -1;
 8015480:	00bfffc4 	movi	r2,-1
  }
}
 8015484:	e037883a 	mov	sp,fp
 8015488:	dfc00117 	ldw	ra,4(sp)
 801548c:	df000017 	ldw	fp,0(sp)
 8015490:	dec00204 	addi	sp,sp,8
 8015494:	f800283a 	ret

08015498 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015498:	defffe04 	addi	sp,sp,-8
 801549c:	dfc00115 	stw	ra,4(sp)
 80154a0:	df000015 	stw	fp,0(sp)
 80154a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80154a8:	d0a01217 	ldw	r2,-32696(gp)
 80154ac:	10000326 	beq	r2,zero,80154bc <alt_get_errno+0x24>
 80154b0:	d0a01217 	ldw	r2,-32696(gp)
 80154b4:	103ee83a 	callr	r2
 80154b8:	00000106 	br	80154c0 <alt_get_errno+0x28>
 80154bc:	d0a6f204 	addi	r2,gp,-25656
}
 80154c0:	e037883a 	mov	sp,fp
 80154c4:	dfc00117 	ldw	ra,4(sp)
 80154c8:	df000017 	ldw	fp,0(sp)
 80154cc:	dec00204 	addi	sp,sp,8
 80154d0:	f800283a 	ret

080154d4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80154d4:	deffed04 	addi	sp,sp,-76
 80154d8:	dfc01215 	stw	ra,72(sp)
 80154dc:	df001115 	stw	fp,68(sp)
 80154e0:	df001104 	addi	fp,sp,68
 80154e4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80154e8:	e0bfff17 	ldw	r2,-4(fp)
 80154ec:	10000816 	blt	r2,zero,8015510 <isatty+0x3c>
 80154f0:	01400304 	movi	r5,12
 80154f4:	e13fff17 	ldw	r4,-4(fp)
 80154f8:	80071600 	call	8007160 <__mulsi3>
 80154fc:	1007883a 	mov	r3,r2
 8015500:	00821974 	movhi	r2,2149
 8015504:	10b9f904 	addi	r2,r2,-6172
 8015508:	1885883a 	add	r2,r3,r2
 801550c:	00000106 	br	8015514 <isatty+0x40>
 8015510:	0005883a 	mov	r2,zero
 8015514:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8015518:	e0bfef17 	ldw	r2,-68(fp)
 801551c:	10000e26 	beq	r2,zero,8015558 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8015520:	e0bfef17 	ldw	r2,-68(fp)
 8015524:	10800017 	ldw	r2,0(r2)
 8015528:	10800817 	ldw	r2,32(r2)
 801552c:	1000021e 	bne	r2,zero,8015538 <isatty+0x64>
    {
      return 1;
 8015530:	00800044 	movi	r2,1
 8015534:	00000d06 	br	801556c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8015538:	e0bff004 	addi	r2,fp,-64
 801553c:	100b883a 	mov	r5,r2
 8015540:	e13fff17 	ldw	r4,-4(fp)
 8015544:	80153e00 	call	80153e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8015548:	e0bff117 	ldw	r2,-60(fp)
 801554c:	10880020 	cmpeqi	r2,r2,8192
 8015550:	10803fcc 	andi	r2,r2,255
 8015554:	00000506 	br	801556c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8015558:	80154980 	call	8015498 <alt_get_errno>
 801555c:	1007883a 	mov	r3,r2
 8015560:	00801444 	movi	r2,81
 8015564:	18800015 	stw	r2,0(r3)
    return 0;
 8015568:	0005883a 	mov	r2,zero
  }
}
 801556c:	e037883a 	mov	sp,fp
 8015570:	dfc00117 	ldw	ra,4(sp)
 8015574:	df000017 	ldw	fp,0(sp)
 8015578:	dec00204 	addi	sp,sp,8
 801557c:	f800283a 	ret

08015580 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8015580:	defffc04 	addi	sp,sp,-16
 8015584:	df000315 	stw	fp,12(sp)
 8015588:	df000304 	addi	fp,sp,12
 801558c:	e13ffd15 	stw	r4,-12(fp)
 8015590:	e17ffe15 	stw	r5,-8(fp)
 8015594:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8015598:	e0fffe17 	ldw	r3,-8(fp)
 801559c:	e0bffd17 	ldw	r2,-12(fp)
 80155a0:	18800c26 	beq	r3,r2,80155d4 <alt_load_section+0x54>
  {
    while( to != end )
 80155a4:	00000806 	br	80155c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 80155a8:	e0bffe17 	ldw	r2,-8(fp)
 80155ac:	10c00104 	addi	r3,r2,4
 80155b0:	e0fffe15 	stw	r3,-8(fp)
 80155b4:	e0fffd17 	ldw	r3,-12(fp)
 80155b8:	19000104 	addi	r4,r3,4
 80155bc:	e13ffd15 	stw	r4,-12(fp)
 80155c0:	18c00017 	ldw	r3,0(r3)
 80155c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80155c8:	e0fffe17 	ldw	r3,-8(fp)
 80155cc:	e0bfff17 	ldw	r2,-4(fp)
 80155d0:	18bff51e 	bne	r3,r2,80155a8 <__alt_data_end+0xfc0155a8>
    {
      *to++ = *from++;
    }
  }
}
 80155d4:	0001883a 	nop
 80155d8:	e037883a 	mov	sp,fp
 80155dc:	df000017 	ldw	fp,0(sp)
 80155e0:	dec00104 	addi	sp,sp,4
 80155e4:	f800283a 	ret

080155e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80155e8:	defffe04 	addi	sp,sp,-8
 80155ec:	dfc00115 	stw	ra,4(sp)
 80155f0:	df000015 	stw	fp,0(sp)
 80155f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80155f8:	01821974 	movhi	r6,2149
 80155fc:	31be8704 	addi	r6,r6,-1508
 8015600:	01421974 	movhi	r5,2149
 8015604:	2977ba04 	addi	r5,r5,-8472
 8015608:	01021974 	movhi	r4,2149
 801560c:	213e8704 	addi	r4,r4,-1508
 8015610:	80155800 	call	8015580 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8015614:	01800034 	movhi	r6,0
 8015618:	31808f04 	addi	r6,r6,572
 801561c:	01400034 	movhi	r5,0
 8015620:	29400804 	addi	r5,r5,32
 8015624:	01000034 	movhi	r4,0
 8015628:	21000804 	addi	r4,r4,32
 801562c:	80155800 	call	8015580 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8015630:	01821974 	movhi	r6,2149
 8015634:	31b7ba04 	addi	r6,r6,-8472
 8015638:	01420074 	movhi	r5,2049
 801563c:	295f6304 	addi	r5,r5,32140
 8015640:	01020074 	movhi	r4,2049
 8015644:	211f6304 	addi	r4,r4,32140
 8015648:	80155800 	call	8015580 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801564c:	8016e780 	call	8016e78 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8015650:	80170380 	call	8017038 <alt_icache_flush_all>
}
 8015654:	0001883a 	nop
 8015658:	e037883a 	mov	sp,fp
 801565c:	dfc00117 	ldw	ra,4(sp)
 8015660:	df000017 	ldw	fp,0(sp)
 8015664:	dec00204 	addi	sp,sp,8
 8015668:	f800283a 	ret

0801566c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801566c:	defffe04 	addi	sp,sp,-8
 8015670:	dfc00115 	stw	ra,4(sp)
 8015674:	df000015 	stw	fp,0(sp)
 8015678:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801567c:	d0a01217 	ldw	r2,-32696(gp)
 8015680:	10000326 	beq	r2,zero,8015690 <alt_get_errno+0x24>
 8015684:	d0a01217 	ldw	r2,-32696(gp)
 8015688:	103ee83a 	callr	r2
 801568c:	00000106 	br	8015694 <alt_get_errno+0x28>
 8015690:	d0a6f204 	addi	r2,gp,-25656
}
 8015694:	e037883a 	mov	sp,fp
 8015698:	dfc00117 	ldw	ra,4(sp)
 801569c:	df000017 	ldw	fp,0(sp)
 80156a0:	dec00204 	addi	sp,sp,8
 80156a4:	f800283a 	ret

080156a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80156a8:	defff904 	addi	sp,sp,-28
 80156ac:	dfc00615 	stw	ra,24(sp)
 80156b0:	df000515 	stw	fp,20(sp)
 80156b4:	df000504 	addi	fp,sp,20
 80156b8:	e13ffd15 	stw	r4,-12(fp)
 80156bc:	e17ffe15 	stw	r5,-8(fp)
 80156c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80156c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80156c8:	e0bffd17 	ldw	r2,-12(fp)
 80156cc:	10000816 	blt	r2,zero,80156f0 <lseek+0x48>
 80156d0:	01400304 	movi	r5,12
 80156d4:	e13ffd17 	ldw	r4,-12(fp)
 80156d8:	80071600 	call	8007160 <__mulsi3>
 80156dc:	1007883a 	mov	r3,r2
 80156e0:	00821974 	movhi	r2,2149
 80156e4:	10b9f904 	addi	r2,r2,-6172
 80156e8:	1885883a 	add	r2,r3,r2
 80156ec:	00000106 	br	80156f4 <lseek+0x4c>
 80156f0:	0005883a 	mov	r2,zero
 80156f4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80156f8:	e0bffc17 	ldw	r2,-16(fp)
 80156fc:	10001026 	beq	r2,zero,8015740 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8015700:	e0bffc17 	ldw	r2,-16(fp)
 8015704:	10800017 	ldw	r2,0(r2)
 8015708:	10800717 	ldw	r2,28(r2)
 801570c:	10000926 	beq	r2,zero,8015734 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8015710:	e0bffc17 	ldw	r2,-16(fp)
 8015714:	10800017 	ldw	r2,0(r2)
 8015718:	10800717 	ldw	r2,28(r2)
 801571c:	e1bfff17 	ldw	r6,-4(fp)
 8015720:	e17ffe17 	ldw	r5,-8(fp)
 8015724:	e13ffc17 	ldw	r4,-16(fp)
 8015728:	103ee83a 	callr	r2
 801572c:	e0bffb15 	stw	r2,-20(fp)
 8015730:	00000506 	br	8015748 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8015734:	00bfde84 	movi	r2,-134
 8015738:	e0bffb15 	stw	r2,-20(fp)
 801573c:	00000206 	br	8015748 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8015740:	00bfebc4 	movi	r2,-81
 8015744:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8015748:	e0bffb17 	ldw	r2,-20(fp)
 801574c:	1000070e 	bge	r2,zero,801576c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8015750:	801566c0 	call	801566c <alt_get_errno>
 8015754:	1007883a 	mov	r3,r2
 8015758:	e0bffb17 	ldw	r2,-20(fp)
 801575c:	0085c83a 	sub	r2,zero,r2
 8015760:	18800015 	stw	r2,0(r3)
    rc = -1;
 8015764:	00bfffc4 	movi	r2,-1
 8015768:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801576c:	e0bffb17 	ldw	r2,-20(fp)
}
 8015770:	e037883a 	mov	sp,fp
 8015774:	dfc00117 	ldw	ra,4(sp)
 8015778:	df000017 	ldw	fp,0(sp)
 801577c:	dec00204 	addi	sp,sp,8
 8015780:	f800283a 	ret

08015784 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8015784:	defffd04 	addi	sp,sp,-12
 8015788:	dfc00215 	stw	ra,8(sp)
 801578c:	df000115 	stw	fp,4(sp)
 8015790:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8015794:	0009883a 	mov	r4,zero
 8015798:	8015e000 	call	8015e00 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 801579c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80157a0:	8015e380 	call	8015e38 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80157a4:	01821974 	movhi	r6,2149
 80157a8:	31b7b004 	addi	r6,r6,-8512
 80157ac:	01421974 	movhi	r5,2149
 80157b0:	2977b004 	addi	r5,r5,-8512
 80157b4:	01021974 	movhi	r4,2149
 80157b8:	2137b004 	addi	r4,r4,-8512
 80157bc:	80173dc0 	call	80173dc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80157c0:	8016f780 	call	8016f78 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80157c4:	01020074 	movhi	r4,2049
 80157c8:	211bf604 	addi	r4,r4,28632
 80157cc:	80179f80 	call	80179f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80157d0:	d0a6f317 	ldw	r2,-25652(gp)
 80157d4:	d0e6f417 	ldw	r3,-25648(gp)
 80157d8:	d126f517 	ldw	r4,-25644(gp)
 80157dc:	200d883a 	mov	r6,r4
 80157e0:	180b883a 	mov	r5,r3
 80157e4:	1009883a 	mov	r4,r2
 80157e8:	8003e200 	call	8003e20 <main>
 80157ec:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80157f0:	01000044 	movi	r4,1
 80157f4:	80152a00 	call	80152a0 <close>
  exit (result);
 80157f8:	e13fff17 	ldw	r4,-4(fp)
 80157fc:	8017a0c0 	call	8017a0c <exit>

08015800 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8015800:	defffe04 	addi	sp,sp,-8
 8015804:	df000115 	stw	fp,4(sp)
 8015808:	df000104 	addi	fp,sp,4
 801580c:	e13fff15 	stw	r4,-4(fp)
}
 8015810:	0001883a 	nop
 8015814:	e037883a 	mov	sp,fp
 8015818:	df000017 	ldw	fp,0(sp)
 801581c:	dec00104 	addi	sp,sp,4
 8015820:	f800283a 	ret

08015824 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8015824:	defffe04 	addi	sp,sp,-8
 8015828:	df000115 	stw	fp,4(sp)
 801582c:	df000104 	addi	fp,sp,4
 8015830:	e13fff15 	stw	r4,-4(fp)
}
 8015834:	0001883a 	nop
 8015838:	e037883a 	mov	sp,fp
 801583c:	df000017 	ldw	fp,0(sp)
 8015840:	dec00104 	addi	sp,sp,4
 8015844:	f800283a 	ret

08015848 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015848:	defffe04 	addi	sp,sp,-8
 801584c:	dfc00115 	stw	ra,4(sp)
 8015850:	df000015 	stw	fp,0(sp)
 8015854:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015858:	d0a01217 	ldw	r2,-32696(gp)
 801585c:	10000326 	beq	r2,zero,801586c <alt_get_errno+0x24>
 8015860:	d0a01217 	ldw	r2,-32696(gp)
 8015864:	103ee83a 	callr	r2
 8015868:	00000106 	br	8015870 <alt_get_errno+0x28>
 801586c:	d0a6f204 	addi	r2,gp,-25656
}
 8015870:	e037883a 	mov	sp,fp
 8015874:	dfc00117 	ldw	ra,4(sp)
 8015878:	df000017 	ldw	fp,0(sp)
 801587c:	dec00204 	addi	sp,sp,8
 8015880:	f800283a 	ret

08015884 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8015884:	defff904 	addi	sp,sp,-28
 8015888:	dfc00615 	stw	ra,24(sp)
 801588c:	df000515 	stw	fp,20(sp)
 8015890:	df000504 	addi	fp,sp,20
 8015894:	e13ffd15 	stw	r4,-12(fp)
 8015898:	e17ffe15 	stw	r5,-8(fp)
 801589c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80158a0:	e0bffd17 	ldw	r2,-12(fp)
 80158a4:	10000816 	blt	r2,zero,80158c8 <read+0x44>
 80158a8:	01400304 	movi	r5,12
 80158ac:	e13ffd17 	ldw	r4,-12(fp)
 80158b0:	80071600 	call	8007160 <__mulsi3>
 80158b4:	1007883a 	mov	r3,r2
 80158b8:	00821974 	movhi	r2,2149
 80158bc:	10b9f904 	addi	r2,r2,-6172
 80158c0:	1885883a 	add	r2,r3,r2
 80158c4:	00000106 	br	80158cc <read+0x48>
 80158c8:	0005883a 	mov	r2,zero
 80158cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80158d0:	e0bffb17 	ldw	r2,-20(fp)
 80158d4:	10002226 	beq	r2,zero,8015960 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80158d8:	e0bffb17 	ldw	r2,-20(fp)
 80158dc:	10800217 	ldw	r2,8(r2)
 80158e0:	108000cc 	andi	r2,r2,3
 80158e4:	10800060 	cmpeqi	r2,r2,1
 80158e8:	1000181e 	bne	r2,zero,801594c <read+0xc8>
        (fd->dev->read))
 80158ec:	e0bffb17 	ldw	r2,-20(fp)
 80158f0:	10800017 	ldw	r2,0(r2)
 80158f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80158f8:	10001426 	beq	r2,zero,801594c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80158fc:	e0bffb17 	ldw	r2,-20(fp)
 8015900:	10800017 	ldw	r2,0(r2)
 8015904:	10800517 	ldw	r2,20(r2)
 8015908:	e0ffff17 	ldw	r3,-4(fp)
 801590c:	180d883a 	mov	r6,r3
 8015910:	e17ffe17 	ldw	r5,-8(fp)
 8015914:	e13ffb17 	ldw	r4,-20(fp)
 8015918:	103ee83a 	callr	r2
 801591c:	e0bffc15 	stw	r2,-16(fp)
 8015920:	e0bffc17 	ldw	r2,-16(fp)
 8015924:	1000070e 	bge	r2,zero,8015944 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8015928:	80158480 	call	8015848 <alt_get_errno>
 801592c:	1007883a 	mov	r3,r2
 8015930:	e0bffc17 	ldw	r2,-16(fp)
 8015934:	0085c83a 	sub	r2,zero,r2
 8015938:	18800015 	stw	r2,0(r3)
          return -1;
 801593c:	00bfffc4 	movi	r2,-1
 8015940:	00000c06 	br	8015974 <read+0xf0>
        }
        return rval;
 8015944:	e0bffc17 	ldw	r2,-16(fp)
 8015948:	00000a06 	br	8015974 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 801594c:	80158480 	call	8015848 <alt_get_errno>
 8015950:	1007883a 	mov	r3,r2
 8015954:	00800344 	movi	r2,13
 8015958:	18800015 	stw	r2,0(r3)
 801595c:	00000406 	br	8015970 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8015960:	80158480 	call	8015848 <alt_get_errno>
 8015964:	1007883a 	mov	r3,r2
 8015968:	00801444 	movi	r2,81
 801596c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015970:	00bfffc4 	movi	r2,-1
}
 8015974:	e037883a 	mov	sp,fp
 8015978:	dfc00117 	ldw	ra,4(sp)
 801597c:	df000017 	ldw	fp,0(sp)
 8015980:	dec00204 	addi	sp,sp,8
 8015984:	f800283a 	ret

08015988 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8015988:	defffc04 	addi	sp,sp,-16
 801598c:	dfc00315 	stw	ra,12(sp)
 8015990:	df000215 	stw	fp,8(sp)
 8015994:	dc000115 	stw	r16,4(sp)
 8015998:	df000204 	addi	fp,sp,8
 801599c:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80159a0:	e0bffe17 	ldw	r2,-8(fp)
 80159a4:	108000d0 	cmplti	r2,r2,3
 80159a8:	1000111e 	bne	r2,zero,80159f0 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80159ac:	04021974 	movhi	r16,2149
 80159b0:	8439f904 	addi	r16,r16,-6172
 80159b4:	e0bffe17 	ldw	r2,-8(fp)
 80159b8:	01400304 	movi	r5,12
 80159bc:	1009883a 	mov	r4,r2
 80159c0:	80071600 	call	8007160 <__mulsi3>
 80159c4:	8085883a 	add	r2,r16,r2
 80159c8:	10800204 	addi	r2,r2,8
 80159cc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80159d0:	04021974 	movhi	r16,2149
 80159d4:	8439f904 	addi	r16,r16,-6172
 80159d8:	e0bffe17 	ldw	r2,-8(fp)
 80159dc:	01400304 	movi	r5,12
 80159e0:	1009883a 	mov	r4,r2
 80159e4:	80071600 	call	8007160 <__mulsi3>
 80159e8:	8085883a 	add	r2,r16,r2
 80159ec:	10000015 	stw	zero,0(r2)
  }
}
 80159f0:	0001883a 	nop
 80159f4:	e6ffff04 	addi	sp,fp,-4
 80159f8:	dfc00217 	ldw	ra,8(sp)
 80159fc:	df000117 	ldw	fp,4(sp)
 8015a00:	dc000017 	ldw	r16,0(sp)
 8015a04:	dec00304 	addi	sp,sp,12
 8015a08:	f800283a 	ret

08015a0c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8015a0c:	defff904 	addi	sp,sp,-28
 8015a10:	df000615 	stw	fp,24(sp)
 8015a14:	df000604 	addi	fp,sp,24
 8015a18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a1c:	0005303a 	rdctl	r2,status
 8015a20:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a24:	e0fffe17 	ldw	r3,-8(fp)
 8015a28:	00bfff84 	movi	r2,-2
 8015a2c:	1884703a 	and	r2,r3,r2
 8015a30:	1001703a 	wrctl	status,r2
  
  return context;
 8015a34:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8015a38:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8015a3c:	d0a01317 	ldw	r2,-32692(gp)
 8015a40:	10c000c4 	addi	r3,r2,3
 8015a44:	00bfff04 	movi	r2,-4
 8015a48:	1884703a 	and	r2,r3,r2
 8015a4c:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8015a50:	d0e01317 	ldw	r3,-32692(gp)
 8015a54:	e0bfff17 	ldw	r2,-4(fp)
 8015a58:	1887883a 	add	r3,r3,r2
 8015a5c:	00830034 	movhi	r2,3072
 8015a60:	10800004 	addi	r2,r2,0
 8015a64:	10c0062e 	bgeu	r2,r3,8015a80 <sbrk+0x74>
 8015a68:	e0bffb17 	ldw	r2,-20(fp)
 8015a6c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015a70:	e0bffa17 	ldw	r2,-24(fp)
 8015a74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8015a78:	00bfffc4 	movi	r2,-1
 8015a7c:	00000b06 	br	8015aac <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8015a80:	d0a01317 	ldw	r2,-32692(gp)
 8015a84:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8015a88:	d0e01317 	ldw	r3,-32692(gp)
 8015a8c:	e0bfff17 	ldw	r2,-4(fp)
 8015a90:	1885883a 	add	r2,r3,r2
 8015a94:	d0a01315 	stw	r2,-32692(gp)
 8015a98:	e0bffb17 	ldw	r2,-20(fp)
 8015a9c:	e0bffc15 	stw	r2,-16(fp)
 8015aa0:	e0bffc17 	ldw	r2,-16(fp)
 8015aa4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 8015aa8:	e0bffd17 	ldw	r2,-12(fp)
} 
 8015aac:	e037883a 	mov	sp,fp
 8015ab0:	df000017 	ldw	fp,0(sp)
 8015ab4:	dec00104 	addi	sp,sp,4
 8015ab8:	f800283a 	ret

08015abc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8015abc:	defffa04 	addi	sp,sp,-24
 8015ac0:	df000515 	stw	fp,20(sp)
 8015ac4:	df000504 	addi	fp,sp,20
 8015ac8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015acc:	0005303a 	rdctl	r2,status
 8015ad0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015ad4:	e0fffc17 	ldw	r3,-16(fp)
 8015ad8:	00bfff84 	movi	r2,-2
 8015adc:	1884703a 	and	r2,r3,r2
 8015ae0:	1001703a 	wrctl	status,r2
  
  return context;
 8015ae4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8015ae8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8015aec:	e0bfff17 	ldw	r2,-4(fp)
 8015af0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8015af4:	e0bffd17 	ldw	r2,-12(fp)
 8015af8:	10800017 	ldw	r2,0(r2)
 8015afc:	e0fffd17 	ldw	r3,-12(fp)
 8015b00:	18c00117 	ldw	r3,4(r3)
 8015b04:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8015b08:	e0bffd17 	ldw	r2,-12(fp)
 8015b0c:	10800117 	ldw	r2,4(r2)
 8015b10:	e0fffd17 	ldw	r3,-12(fp)
 8015b14:	18c00017 	ldw	r3,0(r3)
 8015b18:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8015b1c:	e0bffd17 	ldw	r2,-12(fp)
 8015b20:	e0fffd17 	ldw	r3,-12(fp)
 8015b24:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8015b28:	e0bffd17 	ldw	r2,-12(fp)
 8015b2c:	e0fffd17 	ldw	r3,-12(fp)
 8015b30:	10c00015 	stw	r3,0(r2)
 8015b34:	e0bffb17 	ldw	r2,-20(fp)
 8015b38:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015b3c:	e0bffe17 	ldw	r2,-8(fp)
 8015b40:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8015b44:	0001883a 	nop
 8015b48:	e037883a 	mov	sp,fp
 8015b4c:	df000017 	ldw	fp,0(sp)
 8015b50:	dec00104 	addi	sp,sp,4
 8015b54:	f800283a 	ret

08015b58 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8015b58:	defffb04 	addi	sp,sp,-20
 8015b5c:	dfc00415 	stw	ra,16(sp)
 8015b60:	df000315 	stw	fp,12(sp)
 8015b64:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8015b68:	d0a01417 	ldw	r2,-32688(gp)
 8015b6c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8015b70:	d0a6f717 	ldw	r2,-25636(gp)
 8015b74:	10800044 	addi	r2,r2,1
 8015b78:	d0a6f715 	stw	r2,-25636(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015b7c:	00002e06 	br	8015c38 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8015b80:	e0bffd17 	ldw	r2,-12(fp)
 8015b84:	10800017 	ldw	r2,0(r2)
 8015b88:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8015b8c:	e0bffd17 	ldw	r2,-12(fp)
 8015b90:	10800403 	ldbu	r2,16(r2)
 8015b94:	10803fcc 	andi	r2,r2,255
 8015b98:	10000426 	beq	r2,zero,8015bac <alt_tick+0x54>
 8015b9c:	d0a6f717 	ldw	r2,-25636(gp)
 8015ba0:	1000021e 	bne	r2,zero,8015bac <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8015ba4:	e0bffd17 	ldw	r2,-12(fp)
 8015ba8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8015bac:	e0bffd17 	ldw	r2,-12(fp)
 8015bb0:	10800217 	ldw	r2,8(r2)
 8015bb4:	d0e6f717 	ldw	r3,-25636(gp)
 8015bb8:	18801d36 	bltu	r3,r2,8015c30 <alt_tick+0xd8>
 8015bbc:	e0bffd17 	ldw	r2,-12(fp)
 8015bc0:	10800403 	ldbu	r2,16(r2)
 8015bc4:	10803fcc 	andi	r2,r2,255
 8015bc8:	1000191e 	bne	r2,zero,8015c30 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8015bcc:	e0bffd17 	ldw	r2,-12(fp)
 8015bd0:	10800317 	ldw	r2,12(r2)
 8015bd4:	e0fffd17 	ldw	r3,-12(fp)
 8015bd8:	18c00517 	ldw	r3,20(r3)
 8015bdc:	1809883a 	mov	r4,r3
 8015be0:	103ee83a 	callr	r2
 8015be4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8015be8:	e0bfff17 	ldw	r2,-4(fp)
 8015bec:	1000031e 	bne	r2,zero,8015bfc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8015bf0:	e13ffd17 	ldw	r4,-12(fp)
 8015bf4:	8015abc0 	call	8015abc <alt_alarm_stop>
 8015bf8:	00000d06 	br	8015c30 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8015bfc:	e0bffd17 	ldw	r2,-12(fp)
 8015c00:	10c00217 	ldw	r3,8(r2)
 8015c04:	e0bfff17 	ldw	r2,-4(fp)
 8015c08:	1887883a 	add	r3,r3,r2
 8015c0c:	e0bffd17 	ldw	r2,-12(fp)
 8015c10:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8015c14:	e0bffd17 	ldw	r2,-12(fp)
 8015c18:	10c00217 	ldw	r3,8(r2)
 8015c1c:	d0a6f717 	ldw	r2,-25636(gp)
 8015c20:	1880032e 	bgeu	r3,r2,8015c30 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8015c24:	e0bffd17 	ldw	r2,-12(fp)
 8015c28:	00c00044 	movi	r3,1
 8015c2c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8015c30:	e0bffe17 	ldw	r2,-8(fp)
 8015c34:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8015c38:	e0fffd17 	ldw	r3,-12(fp)
 8015c3c:	d0a01404 	addi	r2,gp,-32688
 8015c40:	18bfcf1e 	bne	r3,r2,8015b80 <__alt_data_end+0xfc015b80>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8015c44:	0001883a 	nop
}
 8015c48:	0001883a 	nop
 8015c4c:	e037883a 	mov	sp,fp
 8015c50:	dfc00117 	ldw	ra,4(sp)
 8015c54:	df000017 	ldw	fp,0(sp)
 8015c58:	dec00204 	addi	sp,sp,8
 8015c5c:	f800283a 	ret

08015c60 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 8015c60:	defffd04 	addi	sp,sp,-12
 8015c64:	dfc00215 	stw	ra,8(sp)
 8015c68:	df000115 	stw	fp,4(sp)
 8015c6c:	df000104 	addi	fp,sp,4
 8015c70:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8015c74:	e13fff17 	ldw	r4,-4(fp)
 8015c78:	8016d200 	call	8016d20 <alt_busy_sleep>
}
 8015c7c:	e037883a 	mov	sp,fp
 8015c80:	dfc00117 	ldw	ra,4(sp)
 8015c84:	df000017 	ldw	fp,0(sp)
 8015c88:	dec00204 	addi	sp,sp,8
 8015c8c:	f800283a 	ret

08015c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8015c90:	defffe04 	addi	sp,sp,-8
 8015c94:	dfc00115 	stw	ra,4(sp)
 8015c98:	df000015 	stw	fp,0(sp)
 8015c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8015ca0:	d0a01217 	ldw	r2,-32696(gp)
 8015ca4:	10000326 	beq	r2,zero,8015cb4 <alt_get_errno+0x24>
 8015ca8:	d0a01217 	ldw	r2,-32696(gp)
 8015cac:	103ee83a 	callr	r2
 8015cb0:	00000106 	br	8015cb8 <alt_get_errno+0x28>
 8015cb4:	d0a6f204 	addi	r2,gp,-25656
}
 8015cb8:	e037883a 	mov	sp,fp
 8015cbc:	dfc00117 	ldw	ra,4(sp)
 8015cc0:	df000017 	ldw	fp,0(sp)
 8015cc4:	dec00204 	addi	sp,sp,8
 8015cc8:	f800283a 	ret

08015ccc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8015ccc:	defff904 	addi	sp,sp,-28
 8015cd0:	dfc00615 	stw	ra,24(sp)
 8015cd4:	df000515 	stw	fp,20(sp)
 8015cd8:	df000504 	addi	fp,sp,20
 8015cdc:	e13ffd15 	stw	r4,-12(fp)
 8015ce0:	e17ffe15 	stw	r5,-8(fp)
 8015ce4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8015ce8:	e0bffd17 	ldw	r2,-12(fp)
 8015cec:	10000816 	blt	r2,zero,8015d10 <write+0x44>
 8015cf0:	01400304 	movi	r5,12
 8015cf4:	e13ffd17 	ldw	r4,-12(fp)
 8015cf8:	80071600 	call	8007160 <__mulsi3>
 8015cfc:	1007883a 	mov	r3,r2
 8015d00:	00821974 	movhi	r2,2149
 8015d04:	10b9f904 	addi	r2,r2,-6172
 8015d08:	1885883a 	add	r2,r3,r2
 8015d0c:	00000106 	br	8015d14 <write+0x48>
 8015d10:	0005883a 	mov	r2,zero
 8015d14:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8015d18:	e0bffb17 	ldw	r2,-20(fp)
 8015d1c:	10002126 	beq	r2,zero,8015da4 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8015d20:	e0bffb17 	ldw	r2,-20(fp)
 8015d24:	10800217 	ldw	r2,8(r2)
 8015d28:	108000cc 	andi	r2,r2,3
 8015d2c:	10001826 	beq	r2,zero,8015d90 <write+0xc4>
 8015d30:	e0bffb17 	ldw	r2,-20(fp)
 8015d34:	10800017 	ldw	r2,0(r2)
 8015d38:	10800617 	ldw	r2,24(r2)
 8015d3c:	10001426 	beq	r2,zero,8015d90 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8015d40:	e0bffb17 	ldw	r2,-20(fp)
 8015d44:	10800017 	ldw	r2,0(r2)
 8015d48:	10800617 	ldw	r2,24(r2)
 8015d4c:	e0ffff17 	ldw	r3,-4(fp)
 8015d50:	180d883a 	mov	r6,r3
 8015d54:	e17ffe17 	ldw	r5,-8(fp)
 8015d58:	e13ffb17 	ldw	r4,-20(fp)
 8015d5c:	103ee83a 	callr	r2
 8015d60:	e0bffc15 	stw	r2,-16(fp)
 8015d64:	e0bffc17 	ldw	r2,-16(fp)
 8015d68:	1000070e 	bge	r2,zero,8015d88 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8015d6c:	8015c900 	call	8015c90 <alt_get_errno>
 8015d70:	1007883a 	mov	r3,r2
 8015d74:	e0bffc17 	ldw	r2,-16(fp)
 8015d78:	0085c83a 	sub	r2,zero,r2
 8015d7c:	18800015 	stw	r2,0(r3)
        return -1;
 8015d80:	00bfffc4 	movi	r2,-1
 8015d84:	00000c06 	br	8015db8 <write+0xec>
      }
      return rval;
 8015d88:	e0bffc17 	ldw	r2,-16(fp)
 8015d8c:	00000a06 	br	8015db8 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8015d90:	8015c900 	call	8015c90 <alt_get_errno>
 8015d94:	1007883a 	mov	r3,r2
 8015d98:	00800344 	movi	r2,13
 8015d9c:	18800015 	stw	r2,0(r3)
 8015da0:	00000406 	br	8015db4 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8015da4:	8015c900 	call	8015c90 <alt_get_errno>
 8015da8:	1007883a 	mov	r3,r2
 8015dac:	00801444 	movi	r2,81
 8015db0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8015db4:	00bfffc4 	movi	r2,-1
}
 8015db8:	e037883a 	mov	sp,fp
 8015dbc:	dfc00117 	ldw	ra,4(sp)
 8015dc0:	df000017 	ldw	fp,0(sp)
 8015dc4:	dec00204 	addi	sp,sp,8
 8015dc8:	f800283a 	ret

08015dcc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8015dcc:	defffd04 	addi	sp,sp,-12
 8015dd0:	dfc00215 	stw	ra,8(sp)
 8015dd4:	df000115 	stw	fp,4(sp)
 8015dd8:	df000104 	addi	fp,sp,4
 8015ddc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8015de0:	d1600f04 	addi	r5,gp,-32708
 8015de4:	e13fff17 	ldw	r4,-4(fp)
 8015de8:	8016ed40 	call	8016ed4 <alt_dev_llist_insert>
}
 8015dec:	e037883a 	mov	sp,fp
 8015df0:	dfc00117 	ldw	ra,4(sp)
 8015df4:	df000017 	ldw	fp,0(sp)
 8015df8:	dec00204 	addi	sp,sp,8
 8015dfc:	f800283a 	ret

08015e00 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8015e00:	defffd04 	addi	sp,sp,-12
 8015e04:	dfc00215 	stw	ra,8(sp)
 8015e08:	df000115 	stw	fp,4(sp)
 8015e0c:	df000104 	addi	fp,sp,4
 8015e10:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8015e14:	80176dc0 	call	80176dc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8015e18:	00800044 	movi	r2,1
 8015e1c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8015e20:	0001883a 	nop
 8015e24:	e037883a 	mov	sp,fp
 8015e28:	dfc00117 	ldw	ra,4(sp)
 8015e2c:	df000017 	ldw	fp,0(sp)
 8015e30:	dec00204 	addi	sp,sp,8
 8015e34:	f800283a 	ret

08015e38 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8015e38:	defffe04 	addi	sp,sp,-8
 8015e3c:	dfc00115 	stw	ra,4(sp)
 8015e40:	df000015 	stw	fp,0(sp)
 8015e44:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8015e48:	01c0fa04 	movi	r7,1000
 8015e4c:	01800084 	movi	r6,2
 8015e50:	000b883a 	mov	r5,zero
 8015e54:	01082004 	movi	r4,8320
 8015e58:	8016b780 	call	8016b78 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8015e5c:	01800044 	movi	r6,1
 8015e60:	000b883a 	mov	r5,zero
 8015e64:	01021974 	movhi	r4,2149
 8015e68:	213a6304 	addi	r4,r4,-5748
 8015e6c:	80160000 	call	8016000 <altera_avalon_jtag_uart_init>
 8015e70:	01021974 	movhi	r4,2149
 8015e74:	213a5904 	addi	r4,r4,-5788
 8015e78:	8015dcc0 	call	8015dcc <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8015e7c:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8015e80:	0001883a 	nop
}
 8015e84:	0001883a 	nop
 8015e88:	e037883a 	mov	sp,fp
 8015e8c:	dfc00117 	ldw	ra,4(sp)
 8015e90:	df000017 	ldw	fp,0(sp)
 8015e94:	dec00204 	addi	sp,sp,8
 8015e98:	f800283a 	ret

08015e9c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8015e9c:	defffa04 	addi	sp,sp,-24
 8015ea0:	dfc00515 	stw	ra,20(sp)
 8015ea4:	df000415 	stw	fp,16(sp)
 8015ea8:	df000404 	addi	fp,sp,16
 8015eac:	e13ffd15 	stw	r4,-12(fp)
 8015eb0:	e17ffe15 	stw	r5,-8(fp)
 8015eb4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015eb8:	e0bffd17 	ldw	r2,-12(fp)
 8015ebc:	10800017 	ldw	r2,0(r2)
 8015ec0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8015ec4:	e0bffc17 	ldw	r2,-16(fp)
 8015ec8:	10c00a04 	addi	r3,r2,40
 8015ecc:	e0bffd17 	ldw	r2,-12(fp)
 8015ed0:	10800217 	ldw	r2,8(r2)
 8015ed4:	100f883a 	mov	r7,r2
 8015ed8:	e1bfff17 	ldw	r6,-4(fp)
 8015edc:	e17ffe17 	ldw	r5,-8(fp)
 8015ee0:	1809883a 	mov	r4,r3
 8015ee4:	80164c40 	call	80164c4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015ee8:	e037883a 	mov	sp,fp
 8015eec:	dfc00117 	ldw	ra,4(sp)
 8015ef0:	df000017 	ldw	fp,0(sp)
 8015ef4:	dec00204 	addi	sp,sp,8
 8015ef8:	f800283a 	ret

08015efc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8015efc:	defffa04 	addi	sp,sp,-24
 8015f00:	dfc00515 	stw	ra,20(sp)
 8015f04:	df000415 	stw	fp,16(sp)
 8015f08:	df000404 	addi	fp,sp,16
 8015f0c:	e13ffd15 	stw	r4,-12(fp)
 8015f10:	e17ffe15 	stw	r5,-8(fp)
 8015f14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015f18:	e0bffd17 	ldw	r2,-12(fp)
 8015f1c:	10800017 	ldw	r2,0(r2)
 8015f20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8015f24:	e0bffc17 	ldw	r2,-16(fp)
 8015f28:	10c00a04 	addi	r3,r2,40
 8015f2c:	e0bffd17 	ldw	r2,-12(fp)
 8015f30:	10800217 	ldw	r2,8(r2)
 8015f34:	100f883a 	mov	r7,r2
 8015f38:	e1bfff17 	ldw	r6,-4(fp)
 8015f3c:	e17ffe17 	ldw	r5,-8(fp)
 8015f40:	1809883a 	mov	r4,r3
 8015f44:	80166e00 	call	80166e0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8015f48:	e037883a 	mov	sp,fp
 8015f4c:	dfc00117 	ldw	ra,4(sp)
 8015f50:	df000017 	ldw	fp,0(sp)
 8015f54:	dec00204 	addi	sp,sp,8
 8015f58:	f800283a 	ret

08015f5c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8015f5c:	defffc04 	addi	sp,sp,-16
 8015f60:	dfc00315 	stw	ra,12(sp)
 8015f64:	df000215 	stw	fp,8(sp)
 8015f68:	df000204 	addi	fp,sp,8
 8015f6c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015f70:	e0bfff17 	ldw	r2,-4(fp)
 8015f74:	10800017 	ldw	r2,0(r2)
 8015f78:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8015f7c:	e0bffe17 	ldw	r2,-8(fp)
 8015f80:	10c00a04 	addi	r3,r2,40
 8015f84:	e0bfff17 	ldw	r2,-4(fp)
 8015f88:	10800217 	ldw	r2,8(r2)
 8015f8c:	100b883a 	mov	r5,r2
 8015f90:	1809883a 	mov	r4,r3
 8015f94:	801636c0 	call	801636c <altera_avalon_jtag_uart_close>
}
 8015f98:	e037883a 	mov	sp,fp
 8015f9c:	dfc00117 	ldw	ra,4(sp)
 8015fa0:	df000017 	ldw	fp,0(sp)
 8015fa4:	dec00204 	addi	sp,sp,8
 8015fa8:	f800283a 	ret

08015fac <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8015fac:	defffa04 	addi	sp,sp,-24
 8015fb0:	dfc00515 	stw	ra,20(sp)
 8015fb4:	df000415 	stw	fp,16(sp)
 8015fb8:	df000404 	addi	fp,sp,16
 8015fbc:	e13ffd15 	stw	r4,-12(fp)
 8015fc0:	e17ffe15 	stw	r5,-8(fp)
 8015fc4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 8015fc8:	e0bffd17 	ldw	r2,-12(fp)
 8015fcc:	10800017 	ldw	r2,0(r2)
 8015fd0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8015fd4:	e0bffc17 	ldw	r2,-16(fp)
 8015fd8:	10800a04 	addi	r2,r2,40
 8015fdc:	e1bfff17 	ldw	r6,-4(fp)
 8015fe0:	e17ffe17 	ldw	r5,-8(fp)
 8015fe4:	1009883a 	mov	r4,r2
 8015fe8:	80163d40 	call	80163d4 <altera_avalon_jtag_uart_ioctl>
}
 8015fec:	e037883a 	mov	sp,fp
 8015ff0:	dfc00117 	ldw	ra,4(sp)
 8015ff4:	df000017 	ldw	fp,0(sp)
 8015ff8:	dec00204 	addi	sp,sp,8
 8015ffc:	f800283a 	ret

08016000 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8016000:	defffa04 	addi	sp,sp,-24
 8016004:	dfc00515 	stw	ra,20(sp)
 8016008:	df000415 	stw	fp,16(sp)
 801600c:	df000404 	addi	fp,sp,16
 8016010:	e13ffd15 	stw	r4,-12(fp)
 8016014:	e17ffe15 	stw	r5,-8(fp)
 8016018:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801601c:	e0bffd17 	ldw	r2,-12(fp)
 8016020:	00c00044 	movi	r3,1
 8016024:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016028:	e0bffd17 	ldw	r2,-12(fp)
 801602c:	10800017 	ldw	r2,0(r2)
 8016030:	10800104 	addi	r2,r2,4
 8016034:	1007883a 	mov	r3,r2
 8016038:	e0bffd17 	ldw	r2,-12(fp)
 801603c:	10800817 	ldw	r2,32(r2)
 8016040:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8016044:	e0bffe17 	ldw	r2,-8(fp)
 8016048:	e0ffff17 	ldw	r3,-4(fp)
 801604c:	d8000015 	stw	zero,0(sp)
 8016050:	e1fffd17 	ldw	r7,-12(fp)
 8016054:	01820074 	movhi	r6,2049
 8016058:	31983004 	addi	r6,r6,24768
 801605c:	180b883a 	mov	r5,r3
 8016060:	1009883a 	mov	r4,r2
 8016064:	80170580 	call	8017058 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8016068:	e0bffd17 	ldw	r2,-12(fp)
 801606c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8016070:	e0bffd17 	ldw	r2,-12(fp)
 8016074:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016078:	d0e6f617 	ldw	r3,-25640(gp)
 801607c:	e1fffd17 	ldw	r7,-12(fp)
 8016080:	01820074 	movhi	r6,2049
 8016084:	3198b304 	addi	r6,r6,25292
 8016088:	180b883a 	mov	r5,r3
 801608c:	1009883a 	mov	r4,r2
 8016090:	8016bf40 	call	8016bf4 <alt_alarm_start>
 8016094:	1000040e 	bge	r2,zero,80160a8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8016098:	e0fffd17 	ldw	r3,-12(fp)
 801609c:	00a00034 	movhi	r2,32768
 80160a0:	10bfffc4 	addi	r2,r2,-1
 80160a4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80160a8:	0001883a 	nop
 80160ac:	e037883a 	mov	sp,fp
 80160b0:	dfc00117 	ldw	ra,4(sp)
 80160b4:	df000017 	ldw	fp,0(sp)
 80160b8:	dec00204 	addi	sp,sp,8
 80160bc:	f800283a 	ret

080160c0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80160c0:	defff804 	addi	sp,sp,-32
 80160c4:	df000715 	stw	fp,28(sp)
 80160c8:	df000704 	addi	fp,sp,28
 80160cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80160d0:	e0bfff17 	ldw	r2,-4(fp)
 80160d4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80160d8:	e0bffb17 	ldw	r2,-20(fp)
 80160dc:	10800017 	ldw	r2,0(r2)
 80160e0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80160e4:	e0bffc17 	ldw	r2,-16(fp)
 80160e8:	10800104 	addi	r2,r2,4
 80160ec:	10800037 	ldwio	r2,0(r2)
 80160f0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80160f4:	e0bffd17 	ldw	r2,-12(fp)
 80160f8:	1080c00c 	andi	r2,r2,768
 80160fc:	10006d26 	beq	r2,zero,80162b4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016100:	e0bffd17 	ldw	r2,-12(fp)
 8016104:	1080400c 	andi	r2,r2,256
 8016108:	10003526 	beq	r2,zero,80161e0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801610c:	00800074 	movhi	r2,1
 8016110:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016114:	e0bffb17 	ldw	r2,-20(fp)
 8016118:	10800a17 	ldw	r2,40(r2)
 801611c:	10800044 	addi	r2,r2,1
 8016120:	1081ffcc 	andi	r2,r2,2047
 8016124:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8016128:	e0bffb17 	ldw	r2,-20(fp)
 801612c:	10c00b17 	ldw	r3,44(r2)
 8016130:	e0bffe17 	ldw	r2,-8(fp)
 8016134:	18801526 	beq	r3,r2,801618c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8016138:	e0bffc17 	ldw	r2,-16(fp)
 801613c:	10800037 	ldwio	r2,0(r2)
 8016140:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016144:	e0bff917 	ldw	r2,-28(fp)
 8016148:	10a0000c 	andi	r2,r2,32768
 801614c:	10001126 	beq	r2,zero,8016194 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8016150:	e0bffb17 	ldw	r2,-20(fp)
 8016154:	10800a17 	ldw	r2,40(r2)
 8016158:	e0fff917 	ldw	r3,-28(fp)
 801615c:	1809883a 	mov	r4,r3
 8016160:	e0fffb17 	ldw	r3,-20(fp)
 8016164:	1885883a 	add	r2,r3,r2
 8016168:	10800e04 	addi	r2,r2,56
 801616c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016170:	e0bffb17 	ldw	r2,-20(fp)
 8016174:	10800a17 	ldw	r2,40(r2)
 8016178:	10800044 	addi	r2,r2,1
 801617c:	10c1ffcc 	andi	r3,r2,2047
 8016180:	e0bffb17 	ldw	r2,-20(fp)
 8016184:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8016188:	003fe206 	br	8016114 <__alt_data_end+0xfc016114>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 801618c:	0001883a 	nop
 8016190:	00000106 	br	8016198 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8016194:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016198:	e0bff917 	ldw	r2,-28(fp)
 801619c:	10bfffec 	andhi	r2,r2,65535
 80161a0:	10000f26 	beq	r2,zero,80161e0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80161a4:	e0bffb17 	ldw	r2,-20(fp)
 80161a8:	10c00817 	ldw	r3,32(r2)
 80161ac:	00bfff84 	movi	r2,-2
 80161b0:	1886703a 	and	r3,r3,r2
 80161b4:	e0bffb17 	ldw	r2,-20(fp)
 80161b8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80161bc:	e0bffc17 	ldw	r2,-16(fp)
 80161c0:	10800104 	addi	r2,r2,4
 80161c4:	1007883a 	mov	r3,r2
 80161c8:	e0bffb17 	ldw	r2,-20(fp)
 80161cc:	10800817 	ldw	r2,32(r2)
 80161d0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80161d4:	e0bffc17 	ldw	r2,-16(fp)
 80161d8:	10800104 	addi	r2,r2,4
 80161dc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80161e0:	e0bffd17 	ldw	r2,-12(fp)
 80161e4:	1080800c 	andi	r2,r2,512
 80161e8:	103fbe26 	beq	r2,zero,80160e4 <__alt_data_end+0xfc0160e4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80161ec:	e0bffd17 	ldw	r2,-12(fp)
 80161f0:	1004d43a 	srli	r2,r2,16
 80161f4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80161f8:	00001406 	br	801624c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80161fc:	e0bffc17 	ldw	r2,-16(fp)
 8016200:	e0fffb17 	ldw	r3,-20(fp)
 8016204:	18c00d17 	ldw	r3,52(r3)
 8016208:	e13ffb17 	ldw	r4,-20(fp)
 801620c:	20c7883a 	add	r3,r4,r3
 8016210:	18c20e04 	addi	r3,r3,2104
 8016214:	18c00003 	ldbu	r3,0(r3)
 8016218:	18c03fcc 	andi	r3,r3,255
 801621c:	18c0201c 	xori	r3,r3,128
 8016220:	18ffe004 	addi	r3,r3,-128
 8016224:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016228:	e0bffb17 	ldw	r2,-20(fp)
 801622c:	10800d17 	ldw	r2,52(r2)
 8016230:	10800044 	addi	r2,r2,1
 8016234:	10c1ffcc 	andi	r3,r2,2047
 8016238:	e0bffb17 	ldw	r2,-20(fp)
 801623c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8016240:	e0bffa17 	ldw	r2,-24(fp)
 8016244:	10bfffc4 	addi	r2,r2,-1
 8016248:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801624c:	e0bffa17 	ldw	r2,-24(fp)
 8016250:	10000526 	beq	r2,zero,8016268 <altera_avalon_jtag_uart_irq+0x1a8>
 8016254:	e0bffb17 	ldw	r2,-20(fp)
 8016258:	10c00d17 	ldw	r3,52(r2)
 801625c:	e0bffb17 	ldw	r2,-20(fp)
 8016260:	10800c17 	ldw	r2,48(r2)
 8016264:	18bfe51e 	bne	r3,r2,80161fc <__alt_data_end+0xfc0161fc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8016268:	e0bffa17 	ldw	r2,-24(fp)
 801626c:	103f9d26 	beq	r2,zero,80160e4 <__alt_data_end+0xfc0160e4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016270:	e0bffb17 	ldw	r2,-20(fp)
 8016274:	10c00817 	ldw	r3,32(r2)
 8016278:	00bfff44 	movi	r2,-3
 801627c:	1886703a 	and	r3,r3,r2
 8016280:	e0bffb17 	ldw	r2,-20(fp)
 8016284:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016288:	e0bffb17 	ldw	r2,-20(fp)
 801628c:	10800017 	ldw	r2,0(r2)
 8016290:	10800104 	addi	r2,r2,4
 8016294:	1007883a 	mov	r3,r2
 8016298:	e0bffb17 	ldw	r2,-20(fp)
 801629c:	10800817 	ldw	r2,32(r2)
 80162a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80162a4:	e0bffc17 	ldw	r2,-16(fp)
 80162a8:	10800104 	addi	r2,r2,4
 80162ac:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 80162b0:	003f8c06 	br	80160e4 <__alt_data_end+0xfc0160e4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 80162b4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 80162b8:	0001883a 	nop
 80162bc:	e037883a 	mov	sp,fp
 80162c0:	df000017 	ldw	fp,0(sp)
 80162c4:	dec00104 	addi	sp,sp,4
 80162c8:	f800283a 	ret

080162cc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80162cc:	defff804 	addi	sp,sp,-32
 80162d0:	df000715 	stw	fp,28(sp)
 80162d4:	df000704 	addi	fp,sp,28
 80162d8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80162dc:	e0bffb17 	ldw	r2,-20(fp)
 80162e0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80162e4:	e0bff917 	ldw	r2,-28(fp)
 80162e8:	10800017 	ldw	r2,0(r2)
 80162ec:	10800104 	addi	r2,r2,4
 80162f0:	10800037 	ldwio	r2,0(r2)
 80162f4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80162f8:	e0bffa17 	ldw	r2,-24(fp)
 80162fc:	1081000c 	andi	r2,r2,1024
 8016300:	10000b26 	beq	r2,zero,8016330 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8016304:	e0bff917 	ldw	r2,-28(fp)
 8016308:	10800017 	ldw	r2,0(r2)
 801630c:	10800104 	addi	r2,r2,4
 8016310:	1007883a 	mov	r3,r2
 8016314:	e0bff917 	ldw	r2,-28(fp)
 8016318:	10800817 	ldw	r2,32(r2)
 801631c:	10810014 	ori	r2,r2,1024
 8016320:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016324:	e0bff917 	ldw	r2,-28(fp)
 8016328:	10000915 	stw	zero,36(r2)
 801632c:	00000a06 	br	8016358 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016330:	e0bff917 	ldw	r2,-28(fp)
 8016334:	10c00917 	ldw	r3,36(r2)
 8016338:	00a00034 	movhi	r2,32768
 801633c:	10bfff04 	addi	r2,r2,-4
 8016340:	10c00536 	bltu	r2,r3,8016358 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8016344:	e0bff917 	ldw	r2,-28(fp)
 8016348:	10800917 	ldw	r2,36(r2)
 801634c:	10c00044 	addi	r3,r2,1
 8016350:	e0bff917 	ldw	r2,-28(fp)
 8016354:	10c00915 	stw	r3,36(r2)
 8016358:	d0a6f617 	ldw	r2,-25640(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801635c:	e037883a 	mov	sp,fp
 8016360:	df000017 	ldw	fp,0(sp)
 8016364:	dec00104 	addi	sp,sp,4
 8016368:	f800283a 	ret

0801636c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801636c:	defffd04 	addi	sp,sp,-12
 8016370:	df000215 	stw	fp,8(sp)
 8016374:	df000204 	addi	fp,sp,8
 8016378:	e13ffe15 	stw	r4,-8(fp)
 801637c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016380:	00000506 	br	8016398 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8016384:	e0bfff17 	ldw	r2,-4(fp)
 8016388:	1090000c 	andi	r2,r2,16384
 801638c:	10000226 	beq	r2,zero,8016398 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8016390:	00bffd44 	movi	r2,-11
 8016394:	00000b06 	br	80163c4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8016398:	e0bffe17 	ldw	r2,-8(fp)
 801639c:	10c00d17 	ldw	r3,52(r2)
 80163a0:	e0bffe17 	ldw	r2,-8(fp)
 80163a4:	10800c17 	ldw	r2,48(r2)
 80163a8:	18800526 	beq	r3,r2,80163c0 <altera_avalon_jtag_uart_close+0x54>
 80163ac:	e0bffe17 	ldw	r2,-8(fp)
 80163b0:	10c00917 	ldw	r3,36(r2)
 80163b4:	e0bffe17 	ldw	r2,-8(fp)
 80163b8:	10800117 	ldw	r2,4(r2)
 80163bc:	18bff136 	bltu	r3,r2,8016384 <__alt_data_end+0xfc016384>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 80163c0:	0005883a 	mov	r2,zero
}
 80163c4:	e037883a 	mov	sp,fp
 80163c8:	df000017 	ldw	fp,0(sp)
 80163cc:	dec00104 	addi	sp,sp,4
 80163d0:	f800283a 	ret

080163d4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80163d4:	defffa04 	addi	sp,sp,-24
 80163d8:	df000515 	stw	fp,20(sp)
 80163dc:	df000504 	addi	fp,sp,20
 80163e0:	e13ffd15 	stw	r4,-12(fp)
 80163e4:	e17ffe15 	stw	r5,-8(fp)
 80163e8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80163ec:	00bff9c4 	movi	r2,-25
 80163f0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80163f4:	e0bffe17 	ldw	r2,-8(fp)
 80163f8:	10da8060 	cmpeqi	r3,r2,27137
 80163fc:	1800031e 	bne	r3,zero,801640c <altera_avalon_jtag_uart_ioctl+0x38>
 8016400:	109a80a0 	cmpeqi	r2,r2,27138
 8016404:	1000181e 	bne	r2,zero,8016468 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 8016408:	00002906 	br	80164b0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801640c:	e0bffd17 	ldw	r2,-12(fp)
 8016410:	10c00117 	ldw	r3,4(r2)
 8016414:	00a00034 	movhi	r2,32768
 8016418:	10bfffc4 	addi	r2,r2,-1
 801641c:	18802126 	beq	r3,r2,80164a4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 8016420:	e0bfff17 	ldw	r2,-4(fp)
 8016424:	10800017 	ldw	r2,0(r2)
 8016428:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801642c:	e0bffc17 	ldw	r2,-16(fp)
 8016430:	10800090 	cmplti	r2,r2,2
 8016434:	1000061e 	bne	r2,zero,8016450 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016438:	e0fffc17 	ldw	r3,-16(fp)
 801643c:	00a00034 	movhi	r2,32768
 8016440:	10bfffc4 	addi	r2,r2,-1
 8016444:	18800226 	beq	r3,r2,8016450 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016448:	e0bffc17 	ldw	r2,-16(fp)
 801644c:	00000206 	br	8016458 <altera_avalon_jtag_uart_ioctl+0x84>
 8016450:	00a00034 	movhi	r2,32768
 8016454:	10bfff84 	addi	r2,r2,-2
 8016458:	e0fffd17 	ldw	r3,-12(fp)
 801645c:	18800115 	stw	r2,4(r3)
      rc = 0;
 8016460:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8016464:	00000f06 	br	80164a4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8016468:	e0bffd17 	ldw	r2,-12(fp)
 801646c:	10c00117 	ldw	r3,4(r2)
 8016470:	00a00034 	movhi	r2,32768
 8016474:	10bfffc4 	addi	r2,r2,-1
 8016478:	18800c26 	beq	r3,r2,80164ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801647c:	e0bffd17 	ldw	r2,-12(fp)
 8016480:	10c00917 	ldw	r3,36(r2)
 8016484:	e0bffd17 	ldw	r2,-12(fp)
 8016488:	10800117 	ldw	r2,4(r2)
 801648c:	1885803a 	cmpltu	r2,r3,r2
 8016490:	10c03fcc 	andi	r3,r2,255
 8016494:	e0bfff17 	ldw	r2,-4(fp)
 8016498:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801649c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80164a0:	00000206 	br	80164ac <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 80164a4:	0001883a 	nop
 80164a8:	00000106 	br	80164b0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 80164ac:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80164b0:	e0bffb17 	ldw	r2,-20(fp)
}
 80164b4:	e037883a 	mov	sp,fp
 80164b8:	df000017 	ldw	fp,0(sp)
 80164bc:	dec00104 	addi	sp,sp,4
 80164c0:	f800283a 	ret

080164c4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80164c4:	defff304 	addi	sp,sp,-52
 80164c8:	dfc00c15 	stw	ra,48(sp)
 80164cc:	df000b15 	stw	fp,44(sp)
 80164d0:	df000b04 	addi	fp,sp,44
 80164d4:	e13ffc15 	stw	r4,-16(fp)
 80164d8:	e17ffd15 	stw	r5,-12(fp)
 80164dc:	e1bffe15 	stw	r6,-8(fp)
 80164e0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80164e4:	e0bffd17 	ldw	r2,-12(fp)
 80164e8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80164ec:	00004706 	br	801660c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80164f0:	e0bffc17 	ldw	r2,-16(fp)
 80164f4:	10800a17 	ldw	r2,40(r2)
 80164f8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80164fc:	e0bffc17 	ldw	r2,-16(fp)
 8016500:	10800b17 	ldw	r2,44(r2)
 8016504:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8016508:	e0fff717 	ldw	r3,-36(fp)
 801650c:	e0bff817 	ldw	r2,-32(fp)
 8016510:	18800536 	bltu	r3,r2,8016528 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8016514:	e0fff717 	ldw	r3,-36(fp)
 8016518:	e0bff817 	ldw	r2,-32(fp)
 801651c:	1885c83a 	sub	r2,r3,r2
 8016520:	e0bff615 	stw	r2,-40(fp)
 8016524:	00000406 	br	8016538 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8016528:	00c20004 	movi	r3,2048
 801652c:	e0bff817 	ldw	r2,-32(fp)
 8016530:	1885c83a 	sub	r2,r3,r2
 8016534:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016538:	e0bff617 	ldw	r2,-40(fp)
 801653c:	10001e26 	beq	r2,zero,80165b8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8016540:	e0fffe17 	ldw	r3,-8(fp)
 8016544:	e0bff617 	ldw	r2,-40(fp)
 8016548:	1880022e 	bgeu	r3,r2,8016554 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 801654c:	e0bffe17 	ldw	r2,-8(fp)
 8016550:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8016554:	e0bffc17 	ldw	r2,-16(fp)
 8016558:	10c00e04 	addi	r3,r2,56
 801655c:	e0bff817 	ldw	r2,-32(fp)
 8016560:	1885883a 	add	r2,r3,r2
 8016564:	e1bff617 	ldw	r6,-40(fp)
 8016568:	100b883a 	mov	r5,r2
 801656c:	e13ff517 	ldw	r4,-44(fp)
 8016570:	800a5f00 	call	800a5f0 <memcpy>
      ptr   += n;
 8016574:	e0fff517 	ldw	r3,-44(fp)
 8016578:	e0bff617 	ldw	r2,-40(fp)
 801657c:	1885883a 	add	r2,r3,r2
 8016580:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8016584:	e0fffe17 	ldw	r3,-8(fp)
 8016588:	e0bff617 	ldw	r2,-40(fp)
 801658c:	1885c83a 	sub	r2,r3,r2
 8016590:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016594:	e0fff817 	ldw	r3,-32(fp)
 8016598:	e0bff617 	ldw	r2,-40(fp)
 801659c:	1885883a 	add	r2,r3,r2
 80165a0:	10c1ffcc 	andi	r3,r2,2047
 80165a4:	e0bffc17 	ldw	r2,-16(fp)
 80165a8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80165ac:	e0bffe17 	ldw	r2,-8(fp)
 80165b0:	00bfcf16 	blt	zero,r2,80164f0 <__alt_data_end+0xfc0164f0>
 80165b4:	00000106 	br	80165bc <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 80165b8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 80165bc:	e0fff517 	ldw	r3,-44(fp)
 80165c0:	e0bffd17 	ldw	r2,-12(fp)
 80165c4:	1880141e 	bne	r3,r2,8016618 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80165c8:	e0bfff17 	ldw	r2,-4(fp)
 80165cc:	1090000c 	andi	r2,r2,16384
 80165d0:	1000131e 	bne	r2,zero,8016620 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80165d4:	0001883a 	nop
 80165d8:	e0bffc17 	ldw	r2,-16(fp)
 80165dc:	10c00a17 	ldw	r3,40(r2)
 80165e0:	e0bff717 	ldw	r2,-36(fp)
 80165e4:	1880051e 	bne	r3,r2,80165fc <altera_avalon_jtag_uart_read+0x138>
 80165e8:	e0bffc17 	ldw	r2,-16(fp)
 80165ec:	10c00917 	ldw	r3,36(r2)
 80165f0:	e0bffc17 	ldw	r2,-16(fp)
 80165f4:	10800117 	ldw	r2,4(r2)
 80165f8:	18bff736 	bltu	r3,r2,80165d8 <__alt_data_end+0xfc0165d8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80165fc:	e0bffc17 	ldw	r2,-16(fp)
 8016600:	10c00a17 	ldw	r3,40(r2)
 8016604:	e0bff717 	ldw	r2,-36(fp)
 8016608:	18800726 	beq	r3,r2,8016628 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801660c:	e0bffe17 	ldw	r2,-8(fp)
 8016610:	00bfb716 	blt	zero,r2,80164f0 <__alt_data_end+0xfc0164f0>
 8016614:	00000506 	br	801662c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 8016618:	0001883a 	nop
 801661c:	00000306 	br	801662c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 8016620:	0001883a 	nop
 8016624:	00000106 	br	801662c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8016628:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801662c:	e0fff517 	ldw	r3,-44(fp)
 8016630:	e0bffd17 	ldw	r2,-12(fp)
 8016634:	18801826 	beq	r3,r2,8016698 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016638:	0005303a 	rdctl	r2,status
 801663c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016640:	e0fffb17 	ldw	r3,-20(fp)
 8016644:	00bfff84 	movi	r2,-2
 8016648:	1884703a 	and	r2,r3,r2
 801664c:	1001703a 	wrctl	status,r2
  
  return context;
 8016650:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8016654:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016658:	e0bffc17 	ldw	r2,-16(fp)
 801665c:	10800817 	ldw	r2,32(r2)
 8016660:	10c00054 	ori	r3,r2,1
 8016664:	e0bffc17 	ldw	r2,-16(fp)
 8016668:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801666c:	e0bffc17 	ldw	r2,-16(fp)
 8016670:	10800017 	ldw	r2,0(r2)
 8016674:	10800104 	addi	r2,r2,4
 8016678:	1007883a 	mov	r3,r2
 801667c:	e0bffc17 	ldw	r2,-16(fp)
 8016680:	10800817 	ldw	r2,32(r2)
 8016684:	18800035 	stwio	r2,0(r3)
 8016688:	e0bffa17 	ldw	r2,-24(fp)
 801668c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016690:	e0bff917 	ldw	r2,-28(fp)
 8016694:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8016698:	e0fff517 	ldw	r3,-44(fp)
 801669c:	e0bffd17 	ldw	r2,-12(fp)
 80166a0:	18800426 	beq	r3,r2,80166b4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80166a4:	e0fff517 	ldw	r3,-44(fp)
 80166a8:	e0bffd17 	ldw	r2,-12(fp)
 80166ac:	1885c83a 	sub	r2,r3,r2
 80166b0:	00000606 	br	80166cc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80166b4:	e0bfff17 	ldw	r2,-4(fp)
 80166b8:	1090000c 	andi	r2,r2,16384
 80166bc:	10000226 	beq	r2,zero,80166c8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80166c0:	00bffd44 	movi	r2,-11
 80166c4:	00000106 	br	80166cc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80166c8:	00bffec4 	movi	r2,-5
}
 80166cc:	e037883a 	mov	sp,fp
 80166d0:	dfc00117 	ldw	ra,4(sp)
 80166d4:	df000017 	ldw	fp,0(sp)
 80166d8:	dec00204 	addi	sp,sp,8
 80166dc:	f800283a 	ret

080166e0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80166e0:	defff304 	addi	sp,sp,-52
 80166e4:	dfc00c15 	stw	ra,48(sp)
 80166e8:	df000b15 	stw	fp,44(sp)
 80166ec:	df000b04 	addi	fp,sp,44
 80166f0:	e13ffc15 	stw	r4,-16(fp)
 80166f4:	e17ffd15 	stw	r5,-12(fp)
 80166f8:	e1bffe15 	stw	r6,-8(fp)
 80166fc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8016700:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8016704:	e0bffd17 	ldw	r2,-12(fp)
 8016708:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801670c:	00003706 	br	80167ec <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8016710:	e0bffc17 	ldw	r2,-16(fp)
 8016714:	10800c17 	ldw	r2,48(r2)
 8016718:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 801671c:	e0bffc17 	ldw	r2,-16(fp)
 8016720:	10800d17 	ldw	r2,52(r2)
 8016724:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8016728:	e0fff917 	ldw	r3,-28(fp)
 801672c:	e0bff517 	ldw	r2,-44(fp)
 8016730:	1880062e 	bgeu	r3,r2,801674c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8016734:	e0fff517 	ldw	r3,-44(fp)
 8016738:	e0bff917 	ldw	r2,-28(fp)
 801673c:	1885c83a 	sub	r2,r3,r2
 8016740:	10bfffc4 	addi	r2,r2,-1
 8016744:	e0bff615 	stw	r2,-40(fp)
 8016748:	00000b06 	br	8016778 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801674c:	e0bff517 	ldw	r2,-44(fp)
 8016750:	10000526 	beq	r2,zero,8016768 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8016754:	00c20004 	movi	r3,2048
 8016758:	e0bff917 	ldw	r2,-28(fp)
 801675c:	1885c83a 	sub	r2,r3,r2
 8016760:	e0bff615 	stw	r2,-40(fp)
 8016764:	00000406 	br	8016778 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8016768:	00c1ffc4 	movi	r3,2047
 801676c:	e0bff917 	ldw	r2,-28(fp)
 8016770:	1885c83a 	sub	r2,r3,r2
 8016774:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8016778:	e0bff617 	ldw	r2,-40(fp)
 801677c:	10001e26 	beq	r2,zero,80167f8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8016780:	e0fffe17 	ldw	r3,-8(fp)
 8016784:	e0bff617 	ldw	r2,-40(fp)
 8016788:	1880022e 	bgeu	r3,r2,8016794 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 801678c:	e0bffe17 	ldw	r2,-8(fp)
 8016790:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8016794:	e0bffc17 	ldw	r2,-16(fp)
 8016798:	10c20e04 	addi	r3,r2,2104
 801679c:	e0bff917 	ldw	r2,-28(fp)
 80167a0:	1885883a 	add	r2,r3,r2
 80167a4:	e1bff617 	ldw	r6,-40(fp)
 80167a8:	e17ffd17 	ldw	r5,-12(fp)
 80167ac:	1009883a 	mov	r4,r2
 80167b0:	800a5f00 	call	800a5f0 <memcpy>
      ptr   += n;
 80167b4:	e0fffd17 	ldw	r3,-12(fp)
 80167b8:	e0bff617 	ldw	r2,-40(fp)
 80167bc:	1885883a 	add	r2,r3,r2
 80167c0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80167c4:	e0fffe17 	ldw	r3,-8(fp)
 80167c8:	e0bff617 	ldw	r2,-40(fp)
 80167cc:	1885c83a 	sub	r2,r3,r2
 80167d0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80167d4:	e0fff917 	ldw	r3,-28(fp)
 80167d8:	e0bff617 	ldw	r2,-40(fp)
 80167dc:	1885883a 	add	r2,r3,r2
 80167e0:	10c1ffcc 	andi	r3,r2,2047
 80167e4:	e0bffc17 	ldw	r2,-16(fp)
 80167e8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80167ec:	e0bffe17 	ldw	r2,-8(fp)
 80167f0:	00bfc716 	blt	zero,r2,8016710 <__alt_data_end+0xfc016710>
 80167f4:	00000106 	br	80167fc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80167f8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80167fc:	0005303a 	rdctl	r2,status
 8016800:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016804:	e0fffb17 	ldw	r3,-20(fp)
 8016808:	00bfff84 	movi	r2,-2
 801680c:	1884703a 	and	r2,r3,r2
 8016810:	1001703a 	wrctl	status,r2
  
  return context;
 8016814:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8016818:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801681c:	e0bffc17 	ldw	r2,-16(fp)
 8016820:	10800817 	ldw	r2,32(r2)
 8016824:	10c00094 	ori	r3,r2,2
 8016828:	e0bffc17 	ldw	r2,-16(fp)
 801682c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016830:	e0bffc17 	ldw	r2,-16(fp)
 8016834:	10800017 	ldw	r2,0(r2)
 8016838:	10800104 	addi	r2,r2,4
 801683c:	1007883a 	mov	r3,r2
 8016840:	e0bffc17 	ldw	r2,-16(fp)
 8016844:	10800817 	ldw	r2,32(r2)
 8016848:	18800035 	stwio	r2,0(r3)
 801684c:	e0bffa17 	ldw	r2,-24(fp)
 8016850:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016854:	e0bff817 	ldw	r2,-32(fp)
 8016858:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801685c:	e0bffe17 	ldw	r2,-8(fp)
 8016860:	0080100e 	bge	zero,r2,80168a4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8016864:	e0bfff17 	ldw	r2,-4(fp)
 8016868:	1090000c 	andi	r2,r2,16384
 801686c:	1000101e 	bne	r2,zero,80168b0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8016870:	0001883a 	nop
 8016874:	e0bffc17 	ldw	r2,-16(fp)
 8016878:	10c00d17 	ldw	r3,52(r2)
 801687c:	e0bff517 	ldw	r2,-44(fp)
 8016880:	1880051e 	bne	r3,r2,8016898 <altera_avalon_jtag_uart_write+0x1b8>
 8016884:	e0bffc17 	ldw	r2,-16(fp)
 8016888:	10c00917 	ldw	r3,36(r2)
 801688c:	e0bffc17 	ldw	r2,-16(fp)
 8016890:	10800117 	ldw	r2,4(r2)
 8016894:	18bff736 	bltu	r3,r2,8016874 <__alt_data_end+0xfc016874>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8016898:	e0bffc17 	ldw	r2,-16(fp)
 801689c:	10800917 	ldw	r2,36(r2)
 80168a0:	1000051e 	bne	r2,zero,80168b8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 80168a4:	e0bffe17 	ldw	r2,-8(fp)
 80168a8:	00bfd016 	blt	zero,r2,80167ec <__alt_data_end+0xfc0167ec>
 80168ac:	00000306 	br	80168bc <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 80168b0:	0001883a 	nop
 80168b4:	00000106 	br	80168bc <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 80168b8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80168bc:	e0fffd17 	ldw	r3,-12(fp)
 80168c0:	e0bff717 	ldw	r2,-36(fp)
 80168c4:	18800426 	beq	r3,r2,80168d8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 80168c8:	e0fffd17 	ldw	r3,-12(fp)
 80168cc:	e0bff717 	ldw	r2,-36(fp)
 80168d0:	1885c83a 	sub	r2,r3,r2
 80168d4:	00000606 	br	80168f0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80168d8:	e0bfff17 	ldw	r2,-4(fp)
 80168dc:	1090000c 	andi	r2,r2,16384
 80168e0:	10000226 	beq	r2,zero,80168ec <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80168e4:	00bffd44 	movi	r2,-11
 80168e8:	00000106 	br	80168f0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80168ec:	00bffec4 	movi	r2,-5
}
 80168f0:	e037883a 	mov	sp,fp
 80168f4:	dfc00117 	ldw	ra,4(sp)
 80168f8:	df000017 	ldw	fp,0(sp)
 80168fc:	dec00204 	addi	sp,sp,8
 8016900:	f800283a 	ret

08016904 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8016904:	defff404 	addi	sp,sp,-48
 8016908:	df000b15 	stw	fp,44(sp)
 801690c:	df000b04 	addi	fp,sp,44
 8016910:	e13ffc15 	stw	r4,-16(fp)
 8016914:	e17ffd15 	stw	r5,-12(fp)
 8016918:	e1bffe15 	stw	r6,-8(fp)
 801691c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 8016920:	e0ffff17 	ldw	r3,-4(fp)
 8016924:	e0bffe17 	ldw	r2,-8(fp)
 8016928:	1885883a 	add	r2,r3,r2
 801692c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 8016930:	e0c00217 	ldw	r3,8(fp)
 8016934:	e0800117 	ldw	r2,4(fp)
 8016938:	1885883a 	add	r2,r3,r2
 801693c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 8016940:	e0800117 	ldw	r2,4(fp)
 8016944:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 8016948:	e0bffe17 	ldw	r2,-8(fp)
 801694c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8016950:	00800044 	movi	r2,1
 8016954:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8016958:	e0bffc17 	ldw	r2,-16(fp)
 801695c:	10800504 	addi	r2,r2,20
 8016960:	1009883a 	mov	r4,r2
 8016964:	00c00044 	movi	r3,1
 8016968:	e0bffd17 	ldw	r2,-12(fp)
 801696c:	1884983a 	sll	r2,r3,r2
 8016970:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8016974:	e0800317 	ldw	r2,12(fp)
 8016978:	1080008c 	andi	r2,r2,2
 801697c:	1000051e 	bne	r2,zero,8016994 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8016980:	e0bffc17 	ldw	r2,-16(fp)
 8016984:	10800304 	addi	r2,r2,12
 8016988:	1007883a 	mov	r3,r2
 801698c:	00810004 	movi	r2,1024
 8016990:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8016994:	e0bffc17 	ldw	r2,-16(fp)
 8016998:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 801699c:	e0bffc17 	ldw	r2,-16(fp)
 80169a0:	10800204 	addi	r2,r2,8
 80169a4:	10800037 	ldwio	r2,0(r2)
 80169a8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80169ac:	e0bffa17 	ldw	r2,-24(fp)
 80169b0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80169b4:	10000226 	beq	r2,zero,80169c0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80169b8:	e0bff717 	ldw	r2,-36(fp)
 80169bc:	1000031e 	bne	r2,zero,80169cc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 80169c0:	e0bffa17 	ldw	r2,-24(fp)
 80169c4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 80169c8:	103ff426 	beq	r2,zero,801699c <__alt_data_end+0xfc01699c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 80169cc:	e0bffa17 	ldw	r2,-24(fp)
 80169d0:	1080100c 	andi	r2,r2,64
 80169d4:	10001e26 	beq	r2,zero,8016a50 <alt_avalon_spi_command+0x14c>
 80169d8:	e0bff717 	ldw	r2,-36(fp)
 80169dc:	00801c0e 	bge	zero,r2,8016a50 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 80169e0:	e0bff717 	ldw	r2,-36(fp)
 80169e4:	10bfffc4 	addi	r2,r2,-1
 80169e8:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 80169ec:	e0ffff17 	ldw	r3,-4(fp)
 80169f0:	e0bff817 	ldw	r2,-32(fp)
 80169f4:	18800a2e 	bgeu	r3,r2,8016a20 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 80169f8:	e0bffc17 	ldw	r2,-16(fp)
 80169fc:	10800104 	addi	r2,r2,4
 8016a00:	1009883a 	mov	r4,r2
 8016a04:	e0bfff17 	ldw	r2,-4(fp)
 8016a08:	10c00044 	addi	r3,r2,1
 8016a0c:	e0ffff15 	stw	r3,-4(fp)
 8016a10:	10800003 	ldbu	r2,0(r2)
 8016a14:	10803fcc 	andi	r2,r2,255
 8016a18:	20800035 	stwio	r2,0(r4)
 8016a1c:	00000c06 	br	8016a50 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8016a20:	e0bff517 	ldw	r2,-44(fp)
 8016a24:	10000826 	beq	r2,zero,8016a48 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8016a28:	e0bff517 	ldw	r2,-44(fp)
 8016a2c:	10bfffc4 	addi	r2,r2,-1
 8016a30:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8016a34:	e0bffc17 	ldw	r2,-16(fp)
 8016a38:	10800104 	addi	r2,r2,4
 8016a3c:	0007883a 	mov	r3,zero
 8016a40:	10c00035 	stwio	r3,0(r2)
 8016a44:	00000206 	br	8016a50 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8016a48:	00bf0004 	movi	r2,-1024
 8016a4c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8016a50:	e0bffa17 	ldw	r2,-24(fp)
 8016a54:	1080200c 	andi	r2,r2,128
 8016a58:	103fd026 	beq	r2,zero,801699c <__alt_data_end+0xfc01699c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8016a5c:	e0bffc17 	ldw	r2,-16(fp)
 8016a60:	10800037 	ldwio	r2,0(r2)
 8016a64:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 8016a68:	e0bff617 	ldw	r2,-40(fp)
 8016a6c:	10000426 	beq	r2,zero,8016a80 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8016a70:	e0bff617 	ldw	r2,-40(fp)
 8016a74:	10bfffc4 	addi	r2,r2,-1
 8016a78:	e0bff615 	stw	r2,-40(fp)
 8016a7c:	00000506 	br	8016a94 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8016a80:	e0800217 	ldw	r2,8(fp)
 8016a84:	10c00044 	addi	r3,r2,1
 8016a88:	e0c00215 	stw	r3,8(fp)
 8016a8c:	e0fffb17 	ldw	r3,-20(fp)
 8016a90:	10c00005 	stb	r3,0(r2)
      credits++;
 8016a94:	e0bff717 	ldw	r2,-36(fp)
 8016a98:	10800044 	addi	r2,r2,1
 8016a9c:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 8016aa0:	e0bff617 	ldw	r2,-40(fp)
 8016aa4:	103fbd1e 	bne	r2,zero,801699c <__alt_data_end+0xfc01699c>
 8016aa8:	e0c00217 	ldw	r3,8(fp)
 8016aac:	e0bff917 	ldw	r2,-28(fp)
 8016ab0:	18bfba1e 	bne	r3,r2,801699c <__alt_data_end+0xfc01699c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8016ab4:	e0bffc17 	ldw	r2,-16(fp)
 8016ab8:	10800204 	addi	r2,r2,8
 8016abc:	10800037 	ldwio	r2,0(r2)
 8016ac0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8016ac4:	e0bffa17 	ldw	r2,-24(fp)
 8016ac8:	1080080c 	andi	r2,r2,32
 8016acc:	103ff926 	beq	r2,zero,8016ab4 <__alt_data_end+0xfc016ab4>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8016ad0:	e0800317 	ldw	r2,12(fp)
 8016ad4:	1080004c 	andi	r2,r2,1
 8016ad8:	1000041e 	bne	r2,zero,8016aec <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8016adc:	e0bffc17 	ldw	r2,-16(fp)
 8016ae0:	10800304 	addi	r2,r2,12
 8016ae4:	0007883a 	mov	r3,zero
 8016ae8:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8016aec:	e0800117 	ldw	r2,4(fp)
}
 8016af0:	e037883a 	mov	sp,fp
 8016af4:	df000017 	ldw	fp,0(sp)
 8016af8:	dec00104 	addi	sp,sp,4
 8016afc:	f800283a 	ret

08016b00 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8016b00:	defffa04 	addi	sp,sp,-24
 8016b04:	dfc00515 	stw	ra,20(sp)
 8016b08:	df000415 	stw	fp,16(sp)
 8016b0c:	df000404 	addi	fp,sp,16
 8016b10:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8016b14:	0007883a 	mov	r3,zero
 8016b18:	e0bfff17 	ldw	r2,-4(fp)
 8016b1c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8016b20:	e0bfff17 	ldw	r2,-4(fp)
 8016b24:	10800104 	addi	r2,r2,4
 8016b28:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016b2c:	0005303a 	rdctl	r2,status
 8016b30:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016b34:	e0fffd17 	ldw	r3,-12(fp)
 8016b38:	00bfff84 	movi	r2,-2
 8016b3c:	1884703a 	and	r2,r3,r2
 8016b40:	1001703a 	wrctl	status,r2
  
  return context;
 8016b44:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8016b48:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8016b4c:	8015b580 	call	8015b58 <alt_tick>
 8016b50:	e0bffc17 	ldw	r2,-16(fp)
 8016b54:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016b58:	e0bffe17 	ldw	r2,-8(fp)
 8016b5c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8016b60:	0001883a 	nop
 8016b64:	e037883a 	mov	sp,fp
 8016b68:	dfc00117 	ldw	ra,4(sp)
 8016b6c:	df000017 	ldw	fp,0(sp)
 8016b70:	dec00204 	addi	sp,sp,8
 8016b74:	f800283a 	ret

08016b78 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016b78:	defff804 	addi	sp,sp,-32
 8016b7c:	dfc00715 	stw	ra,28(sp)
 8016b80:	df000615 	stw	fp,24(sp)
 8016b84:	df000604 	addi	fp,sp,24
 8016b88:	e13ffc15 	stw	r4,-16(fp)
 8016b8c:	e17ffd15 	stw	r5,-12(fp)
 8016b90:	e1bffe15 	stw	r6,-8(fp)
 8016b94:	e1ffff15 	stw	r7,-4(fp)
 8016b98:	e0bfff17 	ldw	r2,-4(fp)
 8016b9c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8016ba0:	d0a6f617 	ldw	r2,-25640(gp)
 8016ba4:	1000021e 	bne	r2,zero,8016bb0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8016ba8:	e0bffb17 	ldw	r2,-20(fp)
 8016bac:	d0a6f615 	stw	r2,-25640(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8016bb0:	e0bffc17 	ldw	r2,-16(fp)
 8016bb4:	10800104 	addi	r2,r2,4
 8016bb8:	00c001c4 	movi	r3,7
 8016bbc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8016bc0:	d8000015 	stw	zero,0(sp)
 8016bc4:	e1fffc17 	ldw	r7,-16(fp)
 8016bc8:	01820074 	movhi	r6,2049
 8016bcc:	319ac004 	addi	r6,r6,27392
 8016bd0:	e17ffe17 	ldw	r5,-8(fp)
 8016bd4:	e13ffd17 	ldw	r4,-12(fp)
 8016bd8:	80170580 	call	8017058 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8016bdc:	0001883a 	nop
 8016be0:	e037883a 	mov	sp,fp
 8016be4:	dfc00117 	ldw	ra,4(sp)
 8016be8:	df000017 	ldw	fp,0(sp)
 8016bec:	dec00204 	addi	sp,sp,8
 8016bf0:	f800283a 	ret

08016bf4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8016bf4:	defff504 	addi	sp,sp,-44
 8016bf8:	df000a15 	stw	fp,40(sp)
 8016bfc:	df000a04 	addi	fp,sp,40
 8016c00:	e13ffc15 	stw	r4,-16(fp)
 8016c04:	e17ffd15 	stw	r5,-12(fp)
 8016c08:	e1bffe15 	stw	r6,-8(fp)
 8016c0c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8016c10:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8016c14:	d0a6f617 	ldw	r2,-25640(gp)
  
  if (alt_ticks_per_second ())
 8016c18:	10003c26 	beq	r2,zero,8016d0c <alt_alarm_start+0x118>
  {
    if (alarm)
 8016c1c:	e0bffc17 	ldw	r2,-16(fp)
 8016c20:	10003826 	beq	r2,zero,8016d04 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8016c24:	e0bffc17 	ldw	r2,-16(fp)
 8016c28:	e0fffe17 	ldw	r3,-8(fp)
 8016c2c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8016c30:	e0bffc17 	ldw	r2,-16(fp)
 8016c34:	e0ffff17 	ldw	r3,-4(fp)
 8016c38:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016c3c:	0005303a 	rdctl	r2,status
 8016c40:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016c44:	e0fff917 	ldw	r3,-28(fp)
 8016c48:	00bfff84 	movi	r2,-2
 8016c4c:	1884703a 	and	r2,r3,r2
 8016c50:	1001703a 	wrctl	status,r2
  
  return context;
 8016c54:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8016c58:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8016c5c:	d0a6f717 	ldw	r2,-25636(gp)
      
      current_nticks = alt_nticks();
 8016c60:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8016c64:	e0fffd17 	ldw	r3,-12(fp)
 8016c68:	e0bff617 	ldw	r2,-40(fp)
 8016c6c:	1885883a 	add	r2,r3,r2
 8016c70:	10c00044 	addi	r3,r2,1
 8016c74:	e0bffc17 	ldw	r2,-16(fp)
 8016c78:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8016c7c:	e0bffc17 	ldw	r2,-16(fp)
 8016c80:	10c00217 	ldw	r3,8(r2)
 8016c84:	e0bff617 	ldw	r2,-40(fp)
 8016c88:	1880042e 	bgeu	r3,r2,8016c9c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8016c8c:	e0bffc17 	ldw	r2,-16(fp)
 8016c90:	00c00044 	movi	r3,1
 8016c94:	10c00405 	stb	r3,16(r2)
 8016c98:	00000206 	br	8016ca4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8016c9c:	e0bffc17 	ldw	r2,-16(fp)
 8016ca0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8016ca4:	e0bffc17 	ldw	r2,-16(fp)
 8016ca8:	d0e01404 	addi	r3,gp,-32688
 8016cac:	e0fffa15 	stw	r3,-24(fp)
 8016cb0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016cb4:	e0bffb17 	ldw	r2,-20(fp)
 8016cb8:	e0fffa17 	ldw	r3,-24(fp)
 8016cbc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016cc0:	e0bffa17 	ldw	r2,-24(fp)
 8016cc4:	10c00017 	ldw	r3,0(r2)
 8016cc8:	e0bffb17 	ldw	r2,-20(fp)
 8016ccc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016cd0:	e0bffa17 	ldw	r2,-24(fp)
 8016cd4:	10800017 	ldw	r2,0(r2)
 8016cd8:	e0fffb17 	ldw	r3,-20(fp)
 8016cdc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016ce0:	e0bffa17 	ldw	r2,-24(fp)
 8016ce4:	e0fffb17 	ldw	r3,-20(fp)
 8016ce8:	10c00015 	stw	r3,0(r2)
 8016cec:	e0bff817 	ldw	r2,-32(fp)
 8016cf0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016cf4:	e0bff717 	ldw	r2,-36(fp)
 8016cf8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8016cfc:	0005883a 	mov	r2,zero
 8016d00:	00000306 	br	8016d10 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8016d04:	00bffa84 	movi	r2,-22
 8016d08:	00000106 	br	8016d10 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8016d0c:	00bfde84 	movi	r2,-134
  }
}
 8016d10:	e037883a 	mov	sp,fp
 8016d14:	df000017 	ldw	fp,0(sp)
 8016d18:	dec00104 	addi	sp,sp,4
 8016d1c:	f800283a 	ret

08016d20 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8016d20:	defffa04 	addi	sp,sp,-24
 8016d24:	dfc00515 	stw	ra,20(sp)
 8016d28:	df000415 	stw	fp,16(sp)
 8016d2c:	df000404 	addi	fp,sp,16
 8016d30:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8016d34:	00800244 	movi	r2,9
 8016d38:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8016d3c:	014003f4 	movhi	r5,15
 8016d40:	29509004 	addi	r5,r5,16960
 8016d44:	e13ffd17 	ldw	r4,-12(fp)
 8016d48:	80071600 	call	8007160 <__mulsi3>
 8016d4c:	100b883a 	mov	r5,r2
 8016d50:	0100bef4 	movhi	r4,763
 8016d54:	213c2004 	addi	r4,r4,-3968
 8016d58:	80070a40 	call	80070a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8016d5c:	100b883a 	mov	r5,r2
 8016d60:	01200034 	movhi	r4,32768
 8016d64:	213fffc4 	addi	r4,r4,-1
 8016d68:	80070a40 	call	80070a4 <__udivsi3>
 8016d6c:	100b883a 	mov	r5,r2
 8016d70:	e13fff17 	ldw	r4,-4(fp)
 8016d74:	80070a40 	call	80070a4 <__udivsi3>
 8016d78:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8016d7c:	e0bffe17 	ldw	r2,-8(fp)
 8016d80:	10002a26 	beq	r2,zero,8016e2c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8016d84:	e03ffc15 	stw	zero,-16(fp)
 8016d88:	00001706 	br	8016de8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8016d8c:	00a00034 	movhi	r2,32768
 8016d90:	10bfffc4 	addi	r2,r2,-1
 8016d94:	10bfffc4 	addi	r2,r2,-1
 8016d98:	103ffe1e 	bne	r2,zero,8016d94 <__alt_data_end+0xfc016d94>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8016d9c:	014003f4 	movhi	r5,15
 8016da0:	29509004 	addi	r5,r5,16960
 8016da4:	e13ffd17 	ldw	r4,-12(fp)
 8016da8:	80071600 	call	8007160 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8016dac:	100b883a 	mov	r5,r2
 8016db0:	0100bef4 	movhi	r4,763
 8016db4:	213c2004 	addi	r4,r4,-3968
 8016db8:	80070a40 	call	80070a4 <__udivsi3>
 8016dbc:	100b883a 	mov	r5,r2
 8016dc0:	01200034 	movhi	r4,32768
 8016dc4:	213fffc4 	addi	r4,r4,-1
 8016dc8:	80070a40 	call	80070a4 <__udivsi3>
 8016dcc:	1007883a 	mov	r3,r2
 8016dd0:	e0bfff17 	ldw	r2,-4(fp)
 8016dd4:	10c5c83a 	sub	r2,r2,r3
 8016dd8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8016ddc:	e0bffc17 	ldw	r2,-16(fp)
 8016de0:	10800044 	addi	r2,r2,1
 8016de4:	e0bffc15 	stw	r2,-16(fp)
 8016de8:	e0fffc17 	ldw	r3,-16(fp)
 8016dec:	e0bffe17 	ldw	r2,-8(fp)
 8016df0:	18bfe616 	blt	r3,r2,8016d8c <__alt_data_end+0xfc016d8c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8016df4:	014003f4 	movhi	r5,15
 8016df8:	29509004 	addi	r5,r5,16960
 8016dfc:	e13ffd17 	ldw	r4,-12(fp)
 8016e00:	80071600 	call	8007160 <__mulsi3>
 8016e04:	100b883a 	mov	r5,r2
 8016e08:	0100bef4 	movhi	r4,763
 8016e0c:	213c2004 	addi	r4,r4,-3968
 8016e10:	80070a40 	call	80070a4 <__udivsi3>
 8016e14:	e17fff17 	ldw	r5,-4(fp)
 8016e18:	1009883a 	mov	r4,r2
 8016e1c:	80071600 	call	8007160 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016e20:	10bfffc4 	addi	r2,r2,-1
 8016e24:	103ffe1e 	bne	r2,zero,8016e20 <__alt_data_end+0xfc016e20>
 8016e28:	00000d06 	br	8016e60 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8016e2c:	014003f4 	movhi	r5,15
 8016e30:	29509004 	addi	r5,r5,16960
 8016e34:	e13ffd17 	ldw	r4,-12(fp)
 8016e38:	80071600 	call	8007160 <__mulsi3>
 8016e3c:	100b883a 	mov	r5,r2
 8016e40:	0100bef4 	movhi	r4,763
 8016e44:	213c2004 	addi	r4,r4,-3968
 8016e48:	80070a40 	call	80070a4 <__udivsi3>
 8016e4c:	e17fff17 	ldw	r5,-4(fp)
 8016e50:	1009883a 	mov	r4,r2
 8016e54:	80071600 	call	8007160 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8016e58:	10bfffc4 	addi	r2,r2,-1
 8016e5c:	00bffe16 	blt	zero,r2,8016e58 <__alt_data_end+0xfc016e58>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8016e60:	0005883a 	mov	r2,zero
}
 8016e64:	e037883a 	mov	sp,fp
 8016e68:	dfc00117 	ldw	ra,4(sp)
 8016e6c:	df000017 	ldw	fp,0(sp)
 8016e70:	dec00204 	addi	sp,sp,8
 8016e74:	f800283a 	ret

08016e78 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8016e78:	deffff04 	addi	sp,sp,-4
 8016e7c:	df000015 	stw	fp,0(sp)
 8016e80:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8016e84:	0001883a 	nop
 8016e88:	e037883a 	mov	sp,fp
 8016e8c:	df000017 	ldw	fp,0(sp)
 8016e90:	dec00104 	addi	sp,sp,4
 8016e94:	f800283a 	ret

08016e98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8016e98:	defffe04 	addi	sp,sp,-8
 8016e9c:	dfc00115 	stw	ra,4(sp)
 8016ea0:	df000015 	stw	fp,0(sp)
 8016ea4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8016ea8:	d0a01217 	ldw	r2,-32696(gp)
 8016eac:	10000326 	beq	r2,zero,8016ebc <alt_get_errno+0x24>
 8016eb0:	d0a01217 	ldw	r2,-32696(gp)
 8016eb4:	103ee83a 	callr	r2
 8016eb8:	00000106 	br	8016ec0 <alt_get_errno+0x28>
 8016ebc:	d0a6f204 	addi	r2,gp,-25656
}
 8016ec0:	e037883a 	mov	sp,fp
 8016ec4:	dfc00117 	ldw	ra,4(sp)
 8016ec8:	df000017 	ldw	fp,0(sp)
 8016ecc:	dec00204 	addi	sp,sp,8
 8016ed0:	f800283a 	ret

08016ed4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8016ed4:	defffa04 	addi	sp,sp,-24
 8016ed8:	dfc00515 	stw	ra,20(sp)
 8016edc:	df000415 	stw	fp,16(sp)
 8016ee0:	df000404 	addi	fp,sp,16
 8016ee4:	e13ffe15 	stw	r4,-8(fp)
 8016ee8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8016eec:	e0bffe17 	ldw	r2,-8(fp)
 8016ef0:	10000326 	beq	r2,zero,8016f00 <alt_dev_llist_insert+0x2c>
 8016ef4:	e0bffe17 	ldw	r2,-8(fp)
 8016ef8:	10800217 	ldw	r2,8(r2)
 8016efc:	1000061e 	bne	r2,zero,8016f18 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8016f00:	8016e980 	call	8016e98 <alt_get_errno>
 8016f04:	1007883a 	mov	r3,r2
 8016f08:	00800584 	movi	r2,22
 8016f0c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8016f10:	00bffa84 	movi	r2,-22
 8016f14:	00001306 	br	8016f64 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8016f18:	e0bffe17 	ldw	r2,-8(fp)
 8016f1c:	e0ffff17 	ldw	r3,-4(fp)
 8016f20:	e0fffc15 	stw	r3,-16(fp)
 8016f24:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8016f28:	e0bffd17 	ldw	r2,-12(fp)
 8016f2c:	e0fffc17 	ldw	r3,-16(fp)
 8016f30:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8016f34:	e0bffc17 	ldw	r2,-16(fp)
 8016f38:	10c00017 	ldw	r3,0(r2)
 8016f3c:	e0bffd17 	ldw	r2,-12(fp)
 8016f40:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8016f44:	e0bffc17 	ldw	r2,-16(fp)
 8016f48:	10800017 	ldw	r2,0(r2)
 8016f4c:	e0fffd17 	ldw	r3,-12(fp)
 8016f50:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8016f54:	e0bffc17 	ldw	r2,-16(fp)
 8016f58:	e0fffd17 	ldw	r3,-12(fp)
 8016f5c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8016f60:	0005883a 	mov	r2,zero
}
 8016f64:	e037883a 	mov	sp,fp
 8016f68:	dfc00117 	ldw	ra,4(sp)
 8016f6c:	df000017 	ldw	fp,0(sp)
 8016f70:	dec00204 	addi	sp,sp,8
 8016f74:	f800283a 	ret

08016f78 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8016f78:	defffd04 	addi	sp,sp,-12
 8016f7c:	dfc00215 	stw	ra,8(sp)
 8016f80:	df000115 	stw	fp,4(sp)
 8016f84:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8016f88:	00820074 	movhi	r2,2049
 8016f8c:	109f6204 	addi	r2,r2,32136
 8016f90:	e0bfff15 	stw	r2,-4(fp)
 8016f94:	00000606 	br	8016fb0 <_do_ctors+0x38>
        (*ctor) (); 
 8016f98:	e0bfff17 	ldw	r2,-4(fp)
 8016f9c:	10800017 	ldw	r2,0(r2)
 8016fa0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8016fa4:	e0bfff17 	ldw	r2,-4(fp)
 8016fa8:	10bfff04 	addi	r2,r2,-4
 8016fac:	e0bfff15 	stw	r2,-4(fp)
 8016fb0:	e0ffff17 	ldw	r3,-4(fp)
 8016fb4:	00820074 	movhi	r2,2049
 8016fb8:	109f6304 	addi	r2,r2,32140
 8016fbc:	18bff62e 	bgeu	r3,r2,8016f98 <__alt_data_end+0xfc016f98>
        (*ctor) (); 
}
 8016fc0:	0001883a 	nop
 8016fc4:	e037883a 	mov	sp,fp
 8016fc8:	dfc00117 	ldw	ra,4(sp)
 8016fcc:	df000017 	ldw	fp,0(sp)
 8016fd0:	dec00204 	addi	sp,sp,8
 8016fd4:	f800283a 	ret

08016fd8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8016fd8:	defffd04 	addi	sp,sp,-12
 8016fdc:	dfc00215 	stw	ra,8(sp)
 8016fe0:	df000115 	stw	fp,4(sp)
 8016fe4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8016fe8:	00820074 	movhi	r2,2049
 8016fec:	109f6204 	addi	r2,r2,32136
 8016ff0:	e0bfff15 	stw	r2,-4(fp)
 8016ff4:	00000606 	br	8017010 <_do_dtors+0x38>
        (*dtor) (); 
 8016ff8:	e0bfff17 	ldw	r2,-4(fp)
 8016ffc:	10800017 	ldw	r2,0(r2)
 8017000:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8017004:	e0bfff17 	ldw	r2,-4(fp)
 8017008:	10bfff04 	addi	r2,r2,-4
 801700c:	e0bfff15 	stw	r2,-4(fp)
 8017010:	e0ffff17 	ldw	r3,-4(fp)
 8017014:	00820074 	movhi	r2,2049
 8017018:	109f6304 	addi	r2,r2,32140
 801701c:	18bff62e 	bgeu	r3,r2,8016ff8 <__alt_data_end+0xfc016ff8>
        (*dtor) (); 
}
 8017020:	0001883a 	nop
 8017024:	e037883a 	mov	sp,fp
 8017028:	dfc00117 	ldw	ra,4(sp)
 801702c:	df000017 	ldw	fp,0(sp)
 8017030:	dec00204 	addi	sp,sp,8
 8017034:	f800283a 	ret

08017038 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8017038:	deffff04 	addi	sp,sp,-4
 801703c:	df000015 	stw	fp,0(sp)
 8017040:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8017044:	0001883a 	nop
 8017048:	e037883a 	mov	sp,fp
 801704c:	df000017 	ldw	fp,0(sp)
 8017050:	dec00104 	addi	sp,sp,4
 8017054:	f800283a 	ret

08017058 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017058:	defff904 	addi	sp,sp,-28
 801705c:	dfc00615 	stw	ra,24(sp)
 8017060:	df000515 	stw	fp,20(sp)
 8017064:	df000504 	addi	fp,sp,20
 8017068:	e13ffc15 	stw	r4,-16(fp)
 801706c:	e17ffd15 	stw	r5,-12(fp)
 8017070:	e1bffe15 	stw	r6,-8(fp)
 8017074:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8017078:	e0800217 	ldw	r2,8(fp)
 801707c:	d8800015 	stw	r2,0(sp)
 8017080:	e1ffff17 	ldw	r7,-4(fp)
 8017084:	e1bffe17 	ldw	r6,-8(fp)
 8017088:	e17ffd17 	ldw	r5,-12(fp)
 801708c:	e13ffc17 	ldw	r4,-16(fp)
 8017090:	80172080 	call	8017208 <alt_iic_isr_register>
}  
 8017094:	e037883a 	mov	sp,fp
 8017098:	dfc00117 	ldw	ra,4(sp)
 801709c:	df000017 	ldw	fp,0(sp)
 80170a0:	dec00204 	addi	sp,sp,8
 80170a4:	f800283a 	ret

080170a8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80170a8:	defff904 	addi	sp,sp,-28
 80170ac:	df000615 	stw	fp,24(sp)
 80170b0:	df000604 	addi	fp,sp,24
 80170b4:	e13ffe15 	stw	r4,-8(fp)
 80170b8:	e17fff15 	stw	r5,-4(fp)
 80170bc:	e0bfff17 	ldw	r2,-4(fp)
 80170c0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80170c4:	0005303a 	rdctl	r2,status
 80170c8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80170cc:	e0fffb17 	ldw	r3,-20(fp)
 80170d0:	00bfff84 	movi	r2,-2
 80170d4:	1884703a 	and	r2,r3,r2
 80170d8:	1001703a 	wrctl	status,r2
  
  return context;
 80170dc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80170e0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 80170e4:	00c00044 	movi	r3,1
 80170e8:	e0bffa17 	ldw	r2,-24(fp)
 80170ec:	1884983a 	sll	r2,r3,r2
 80170f0:	1007883a 	mov	r3,r2
 80170f4:	d0a6f817 	ldw	r2,-25632(gp)
 80170f8:	1884b03a 	or	r2,r3,r2
 80170fc:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8017100:	d0a6f817 	ldw	r2,-25632(gp)
 8017104:	100170fa 	wrctl	ienable,r2
 8017108:	e0bffc17 	ldw	r2,-16(fp)
 801710c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8017110:	e0bffd17 	ldw	r2,-12(fp)
 8017114:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8017118:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801711c:	0001883a 	nop
}
 8017120:	e037883a 	mov	sp,fp
 8017124:	df000017 	ldw	fp,0(sp)
 8017128:	dec00104 	addi	sp,sp,4
 801712c:	f800283a 	ret

08017130 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8017130:	defff904 	addi	sp,sp,-28
 8017134:	df000615 	stw	fp,24(sp)
 8017138:	df000604 	addi	fp,sp,24
 801713c:	e13ffe15 	stw	r4,-8(fp)
 8017140:	e17fff15 	stw	r5,-4(fp)
 8017144:	e0bfff17 	ldw	r2,-4(fp)
 8017148:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801714c:	0005303a 	rdctl	r2,status
 8017150:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8017154:	e0fffb17 	ldw	r3,-20(fp)
 8017158:	00bfff84 	movi	r2,-2
 801715c:	1884703a 	and	r2,r3,r2
 8017160:	1001703a 	wrctl	status,r2
  
  return context;
 8017164:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8017168:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801716c:	00c00044 	movi	r3,1
 8017170:	e0bffa17 	ldw	r2,-24(fp)
 8017174:	1884983a 	sll	r2,r3,r2
 8017178:	0084303a 	nor	r2,zero,r2
 801717c:	1007883a 	mov	r3,r2
 8017180:	d0a6f817 	ldw	r2,-25632(gp)
 8017184:	1884703a 	and	r2,r3,r2
 8017188:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801718c:	d0a6f817 	ldw	r2,-25632(gp)
 8017190:	100170fa 	wrctl	ienable,r2
 8017194:	e0bffc17 	ldw	r2,-16(fp)
 8017198:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801719c:	e0bffd17 	ldw	r2,-12(fp)
 80171a0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80171a4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80171a8:	0001883a 	nop
}
 80171ac:	e037883a 	mov	sp,fp
 80171b0:	df000017 	ldw	fp,0(sp)
 80171b4:	dec00104 	addi	sp,sp,4
 80171b8:	f800283a 	ret

080171bc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80171bc:	defffc04 	addi	sp,sp,-16
 80171c0:	df000315 	stw	fp,12(sp)
 80171c4:	df000304 	addi	fp,sp,12
 80171c8:	e13ffe15 	stw	r4,-8(fp)
 80171cc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80171d0:	000530fa 	rdctl	r2,ienable
 80171d4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80171d8:	00c00044 	movi	r3,1
 80171dc:	e0bfff17 	ldw	r2,-4(fp)
 80171e0:	1884983a 	sll	r2,r3,r2
 80171e4:	1007883a 	mov	r3,r2
 80171e8:	e0bffd17 	ldw	r2,-12(fp)
 80171ec:	1884703a 	and	r2,r3,r2
 80171f0:	1004c03a 	cmpne	r2,r2,zero
 80171f4:	10803fcc 	andi	r2,r2,255
}
 80171f8:	e037883a 	mov	sp,fp
 80171fc:	df000017 	ldw	fp,0(sp)
 8017200:	dec00104 	addi	sp,sp,4
 8017204:	f800283a 	ret

08017208 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8017208:	defff504 	addi	sp,sp,-44
 801720c:	dfc00a15 	stw	ra,40(sp)
 8017210:	df000915 	stw	fp,36(sp)
 8017214:	df000904 	addi	fp,sp,36
 8017218:	e13ffc15 	stw	r4,-16(fp)
 801721c:	e17ffd15 	stw	r5,-12(fp)
 8017220:	e1bffe15 	stw	r6,-8(fp)
 8017224:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8017228:	00bffa84 	movi	r2,-22
 801722c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8017230:	e0bffd17 	ldw	r2,-12(fp)
 8017234:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8017238:	e0bff817 	ldw	r2,-32(fp)
 801723c:	10800808 	cmpgei	r2,r2,32
 8017240:	1000271e 	bne	r2,zero,80172e0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8017244:	0005303a 	rdctl	r2,status
 8017248:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801724c:	e0fffb17 	ldw	r3,-20(fp)
 8017250:	00bfff84 	movi	r2,-2
 8017254:	1884703a 	and	r2,r3,r2
 8017258:	1001703a 	wrctl	status,r2
  
  return context;
 801725c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8017260:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8017264:	00821e34 	movhi	r2,2168
 8017268:	10b5d104 	addi	r2,r2,-10428
 801726c:	e0fff817 	ldw	r3,-32(fp)
 8017270:	180690fa 	slli	r3,r3,3
 8017274:	10c5883a 	add	r2,r2,r3
 8017278:	e0fffe17 	ldw	r3,-8(fp)
 801727c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8017280:	00821e34 	movhi	r2,2168
 8017284:	10b5d104 	addi	r2,r2,-10428
 8017288:	e0fff817 	ldw	r3,-32(fp)
 801728c:	180690fa 	slli	r3,r3,3
 8017290:	10c5883a 	add	r2,r2,r3
 8017294:	10800104 	addi	r2,r2,4
 8017298:	e0ffff17 	ldw	r3,-4(fp)
 801729c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80172a0:	e0bffe17 	ldw	r2,-8(fp)
 80172a4:	10000526 	beq	r2,zero,80172bc <alt_iic_isr_register+0xb4>
 80172a8:	e0bff817 	ldw	r2,-32(fp)
 80172ac:	100b883a 	mov	r5,r2
 80172b0:	e13ffc17 	ldw	r4,-16(fp)
 80172b4:	80170a80 	call	80170a8 <alt_ic_irq_enable>
 80172b8:	00000406 	br	80172cc <alt_iic_isr_register+0xc4>
 80172bc:	e0bff817 	ldw	r2,-32(fp)
 80172c0:	100b883a 	mov	r5,r2
 80172c4:	e13ffc17 	ldw	r4,-16(fp)
 80172c8:	80171300 	call	8017130 <alt_ic_irq_disable>
 80172cc:	e0bff715 	stw	r2,-36(fp)
 80172d0:	e0bffa17 	ldw	r2,-24(fp)
 80172d4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80172d8:	e0bff917 	ldw	r2,-28(fp)
 80172dc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80172e0:	e0bff717 	ldw	r2,-36(fp)
}
 80172e4:	e037883a 	mov	sp,fp
 80172e8:	dfc00117 	ldw	ra,4(sp)
 80172ec:	df000017 	ldw	fp,0(sp)
 80172f0:	dec00204 	addi	sp,sp,8
 80172f4:	f800283a 	ret

080172f8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80172f8:	defff804 	addi	sp,sp,-32
 80172fc:	dfc00715 	stw	ra,28(sp)
 8017300:	df000615 	stw	fp,24(sp)
 8017304:	dc000515 	stw	r16,20(sp)
 8017308:	df000604 	addi	fp,sp,24
 801730c:	e13ffb15 	stw	r4,-20(fp)
 8017310:	e17ffc15 	stw	r5,-16(fp)
 8017314:	e1bffd15 	stw	r6,-12(fp)
 8017318:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 801731c:	e1bffe17 	ldw	r6,-8(fp)
 8017320:	e17ffd17 	ldw	r5,-12(fp)
 8017324:	e13ffc17 	ldw	r4,-16(fp)
 8017328:	80175800 	call	8017580 <open>
 801732c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8017330:	e0bffa17 	ldw	r2,-24(fp)
 8017334:	10002216 	blt	r2,zero,80173c0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 8017338:	04021974 	movhi	r16,2149
 801733c:	8439f904 	addi	r16,r16,-6172
 8017340:	e0bffa17 	ldw	r2,-24(fp)
 8017344:	01400304 	movi	r5,12
 8017348:	1009883a 	mov	r4,r2
 801734c:	80071600 	call	8007160 <__mulsi3>
 8017350:	8085883a 	add	r2,r16,r2
 8017354:	10c00017 	ldw	r3,0(r2)
 8017358:	e0bffb17 	ldw	r2,-20(fp)
 801735c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8017360:	04021974 	movhi	r16,2149
 8017364:	8439f904 	addi	r16,r16,-6172
 8017368:	e0bffa17 	ldw	r2,-24(fp)
 801736c:	01400304 	movi	r5,12
 8017370:	1009883a 	mov	r4,r2
 8017374:	80071600 	call	8007160 <__mulsi3>
 8017378:	8085883a 	add	r2,r16,r2
 801737c:	10800104 	addi	r2,r2,4
 8017380:	10c00017 	ldw	r3,0(r2)
 8017384:	e0bffb17 	ldw	r2,-20(fp)
 8017388:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801738c:	04021974 	movhi	r16,2149
 8017390:	8439f904 	addi	r16,r16,-6172
 8017394:	e0bffa17 	ldw	r2,-24(fp)
 8017398:	01400304 	movi	r5,12
 801739c:	1009883a 	mov	r4,r2
 80173a0:	80071600 	call	8007160 <__mulsi3>
 80173a4:	8085883a 	add	r2,r16,r2
 80173a8:	10800204 	addi	r2,r2,8
 80173ac:	10c00017 	ldw	r3,0(r2)
 80173b0:	e0bffb17 	ldw	r2,-20(fp)
 80173b4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80173b8:	e13ffa17 	ldw	r4,-24(fp)
 80173bc:	80159880 	call	8015988 <alt_release_fd>
  }
} 
 80173c0:	0001883a 	nop
 80173c4:	e6ffff04 	addi	sp,fp,-4
 80173c8:	dfc00217 	ldw	ra,8(sp)
 80173cc:	df000117 	ldw	fp,4(sp)
 80173d0:	dc000017 	ldw	r16,0(sp)
 80173d4:	dec00304 	addi	sp,sp,12
 80173d8:	f800283a 	ret

080173dc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80173dc:	defffb04 	addi	sp,sp,-20
 80173e0:	dfc00415 	stw	ra,16(sp)
 80173e4:	df000315 	stw	fp,12(sp)
 80173e8:	df000304 	addi	fp,sp,12
 80173ec:	e13ffd15 	stw	r4,-12(fp)
 80173f0:	e17ffe15 	stw	r5,-8(fp)
 80173f4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80173f8:	01c07fc4 	movi	r7,511
 80173fc:	01800044 	movi	r6,1
 8017400:	e17ffd17 	ldw	r5,-12(fp)
 8017404:	01021974 	movhi	r4,2149
 8017408:	2139fc04 	addi	r4,r4,-6160
 801740c:	80172f80 	call	80172f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8017410:	01c07fc4 	movi	r7,511
 8017414:	000d883a 	mov	r6,zero
 8017418:	e17ffe17 	ldw	r5,-8(fp)
 801741c:	01021974 	movhi	r4,2149
 8017420:	2139f904 	addi	r4,r4,-6172
 8017424:	80172f80 	call	80172f8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8017428:	01c07fc4 	movi	r7,511
 801742c:	01800044 	movi	r6,1
 8017430:	e17fff17 	ldw	r5,-4(fp)
 8017434:	01021974 	movhi	r4,2149
 8017438:	2139ff04 	addi	r4,r4,-6148
 801743c:	80172f80 	call	80172f8 <alt_open_fd>
}  
 8017440:	0001883a 	nop
 8017444:	e037883a 	mov	sp,fp
 8017448:	dfc00117 	ldw	ra,4(sp)
 801744c:	df000017 	ldw	fp,0(sp)
 8017450:	dec00204 	addi	sp,sp,8
 8017454:	f800283a 	ret

08017458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8017458:	defffe04 	addi	sp,sp,-8
 801745c:	dfc00115 	stw	ra,4(sp)
 8017460:	df000015 	stw	fp,0(sp)
 8017464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8017468:	d0a01217 	ldw	r2,-32696(gp)
 801746c:	10000326 	beq	r2,zero,801747c <alt_get_errno+0x24>
 8017470:	d0a01217 	ldw	r2,-32696(gp)
 8017474:	103ee83a 	callr	r2
 8017478:	00000106 	br	8017480 <alt_get_errno+0x28>
 801747c:	d0a6f204 	addi	r2,gp,-25656
}
 8017480:	e037883a 	mov	sp,fp
 8017484:	dfc00117 	ldw	ra,4(sp)
 8017488:	df000017 	ldw	fp,0(sp)
 801748c:	dec00204 	addi	sp,sp,8
 8017490:	f800283a 	ret

08017494 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8017494:	defffb04 	addi	sp,sp,-20
 8017498:	dfc00415 	stw	ra,16(sp)
 801749c:	df000315 	stw	fp,12(sp)
 80174a0:	dc000215 	stw	r16,8(sp)
 80174a4:	df000304 	addi	fp,sp,12
 80174a8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80174ac:	e0bffe17 	ldw	r2,-8(fp)
 80174b0:	10800217 	ldw	r2,8(r2)
 80174b4:	10d00034 	orhi	r3,r2,16384
 80174b8:	e0bffe17 	ldw	r2,-8(fp)
 80174bc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80174c0:	e03ffd15 	stw	zero,-12(fp)
 80174c4:	00002306 	br	8017554 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80174c8:	04021974 	movhi	r16,2149
 80174cc:	8439f904 	addi	r16,r16,-6172
 80174d0:	e0bffd17 	ldw	r2,-12(fp)
 80174d4:	01400304 	movi	r5,12
 80174d8:	1009883a 	mov	r4,r2
 80174dc:	80071600 	call	8007160 <__mulsi3>
 80174e0:	8085883a 	add	r2,r16,r2
 80174e4:	10c00017 	ldw	r3,0(r2)
 80174e8:	e0bffe17 	ldw	r2,-8(fp)
 80174ec:	10800017 	ldw	r2,0(r2)
 80174f0:	1880151e 	bne	r3,r2,8017548 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80174f4:	04021974 	movhi	r16,2149
 80174f8:	8439f904 	addi	r16,r16,-6172
 80174fc:	e0bffd17 	ldw	r2,-12(fp)
 8017500:	01400304 	movi	r5,12
 8017504:	1009883a 	mov	r4,r2
 8017508:	80071600 	call	8007160 <__mulsi3>
 801750c:	8085883a 	add	r2,r16,r2
 8017510:	10800204 	addi	r2,r2,8
 8017514:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8017518:	10000b0e 	bge	r2,zero,8017548 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801751c:	01400304 	movi	r5,12
 8017520:	e13ffd17 	ldw	r4,-12(fp)
 8017524:	80071600 	call	8007160 <__mulsi3>
 8017528:	1007883a 	mov	r3,r2
 801752c:	00821974 	movhi	r2,2149
 8017530:	10b9f904 	addi	r2,r2,-6172
 8017534:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8017538:	e0bffe17 	ldw	r2,-8(fp)
 801753c:	18800226 	beq	r3,r2,8017548 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8017540:	00bffcc4 	movi	r2,-13
 8017544:	00000806 	br	8017568 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8017548:	e0bffd17 	ldw	r2,-12(fp)
 801754c:	10800044 	addi	r2,r2,1
 8017550:	e0bffd15 	stw	r2,-12(fp)
 8017554:	d0a01117 	ldw	r2,-32700(gp)
 8017558:	1007883a 	mov	r3,r2
 801755c:	e0bffd17 	ldw	r2,-12(fp)
 8017560:	18bfd92e 	bgeu	r3,r2,80174c8 <__alt_data_end+0xfc0174c8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8017564:	0005883a 	mov	r2,zero
}
 8017568:	e6ffff04 	addi	sp,fp,-4
 801756c:	dfc00217 	ldw	ra,8(sp)
 8017570:	df000117 	ldw	fp,4(sp)
 8017574:	dc000017 	ldw	r16,0(sp)
 8017578:	dec00304 	addi	sp,sp,12
 801757c:	f800283a 	ret

08017580 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8017580:	defff604 	addi	sp,sp,-40
 8017584:	dfc00915 	stw	ra,36(sp)
 8017588:	df000815 	stw	fp,32(sp)
 801758c:	df000804 	addi	fp,sp,32
 8017590:	e13ffd15 	stw	r4,-12(fp)
 8017594:	e17ffe15 	stw	r5,-8(fp)
 8017598:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801759c:	00bfffc4 	movi	r2,-1
 80175a0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80175a4:	00bffb44 	movi	r2,-19
 80175a8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80175ac:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80175b0:	d1600f04 	addi	r5,gp,-32708
 80175b4:	e13ffd17 	ldw	r4,-12(fp)
 80175b8:	80177000 	call	8017700 <alt_find_dev>
 80175bc:	e0bff815 	stw	r2,-32(fp)
 80175c0:	e0bff817 	ldw	r2,-32(fp)
 80175c4:	1000051e 	bne	r2,zero,80175dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80175c8:	e13ffd17 	ldw	r4,-12(fp)
 80175cc:	80177900 	call	8017790 <alt_find_file>
 80175d0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80175d4:	00800044 	movi	r2,1
 80175d8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80175dc:	e0bff817 	ldw	r2,-32(fp)
 80175e0:	10002b26 	beq	r2,zero,8017690 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80175e4:	e13ff817 	ldw	r4,-32(fp)
 80175e8:	80178980 	call	8017898 <alt_get_fd>
 80175ec:	e0bff915 	stw	r2,-28(fp)
 80175f0:	e0bff917 	ldw	r2,-28(fp)
 80175f4:	1000030e 	bge	r2,zero,8017604 <open+0x84>
    {
      status = index;
 80175f8:	e0bff917 	ldw	r2,-28(fp)
 80175fc:	e0bffa15 	stw	r2,-24(fp)
 8017600:	00002506 	br	8017698 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8017604:	01400304 	movi	r5,12
 8017608:	e13ff917 	ldw	r4,-28(fp)
 801760c:	80071600 	call	8007160 <__mulsi3>
 8017610:	1007883a 	mov	r3,r2
 8017614:	00821974 	movhi	r2,2149
 8017618:	10b9f904 	addi	r2,r2,-6172
 801761c:	1885883a 	add	r2,r3,r2
 8017620:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8017624:	e0fffe17 	ldw	r3,-8(fp)
 8017628:	00900034 	movhi	r2,16384
 801762c:	10bfffc4 	addi	r2,r2,-1
 8017630:	1886703a 	and	r3,r3,r2
 8017634:	e0bffc17 	ldw	r2,-16(fp)
 8017638:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801763c:	e0bffb17 	ldw	r2,-20(fp)
 8017640:	1000051e 	bne	r2,zero,8017658 <open+0xd8>
 8017644:	e13ffc17 	ldw	r4,-16(fp)
 8017648:	80174940 	call	8017494 <alt_file_locked>
 801764c:	e0bffa15 	stw	r2,-24(fp)
 8017650:	e0bffa17 	ldw	r2,-24(fp)
 8017654:	10001016 	blt	r2,zero,8017698 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8017658:	e0bff817 	ldw	r2,-32(fp)
 801765c:	10800317 	ldw	r2,12(r2)
 8017660:	10000826 	beq	r2,zero,8017684 <open+0x104>
 8017664:	e0bff817 	ldw	r2,-32(fp)
 8017668:	10800317 	ldw	r2,12(r2)
 801766c:	e1ffff17 	ldw	r7,-4(fp)
 8017670:	e1bffe17 	ldw	r6,-8(fp)
 8017674:	e17ffd17 	ldw	r5,-12(fp)
 8017678:	e13ffc17 	ldw	r4,-16(fp)
 801767c:	103ee83a 	callr	r2
 8017680:	00000106 	br	8017688 <open+0x108>
 8017684:	0005883a 	mov	r2,zero
 8017688:	e0bffa15 	stw	r2,-24(fp)
 801768c:	00000206 	br	8017698 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8017690:	00bffb44 	movi	r2,-19
 8017694:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8017698:	e0bffa17 	ldw	r2,-24(fp)
 801769c:	1000090e 	bge	r2,zero,80176c4 <open+0x144>
  {
    alt_release_fd (index);  
 80176a0:	e13ff917 	ldw	r4,-28(fp)
 80176a4:	80159880 	call	8015988 <alt_release_fd>
    ALT_ERRNO = -status;
 80176a8:	80174580 	call	8017458 <alt_get_errno>
 80176ac:	1007883a 	mov	r3,r2
 80176b0:	e0bffa17 	ldw	r2,-24(fp)
 80176b4:	0085c83a 	sub	r2,zero,r2
 80176b8:	18800015 	stw	r2,0(r3)
    return -1;
 80176bc:	00bfffc4 	movi	r2,-1
 80176c0:	00000106 	br	80176c8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80176c4:	e0bff917 	ldw	r2,-28(fp)
}
 80176c8:	e037883a 	mov	sp,fp
 80176cc:	dfc00117 	ldw	ra,4(sp)
 80176d0:	df000017 	ldw	fp,0(sp)
 80176d4:	dec00204 	addi	sp,sp,8
 80176d8:	f800283a 	ret

080176dc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80176dc:	deffff04 	addi	sp,sp,-4
 80176e0:	df000015 	stw	fp,0(sp)
 80176e4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80176e8:	000170fa 	wrctl	ienable,zero
}
 80176ec:	0001883a 	nop
 80176f0:	e037883a 	mov	sp,fp
 80176f4:	df000017 	ldw	fp,0(sp)
 80176f8:	dec00104 	addi	sp,sp,4
 80176fc:	f800283a 	ret

08017700 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8017700:	defffa04 	addi	sp,sp,-24
 8017704:	dfc00515 	stw	ra,20(sp)
 8017708:	df000415 	stw	fp,16(sp)
 801770c:	df000404 	addi	fp,sp,16
 8017710:	e13ffe15 	stw	r4,-8(fp)
 8017714:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8017718:	e0bfff17 	ldw	r2,-4(fp)
 801771c:	10800017 	ldw	r2,0(r2)
 8017720:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8017724:	e13ffe17 	ldw	r4,-8(fp)
 8017728:	800aa1c0 	call	800aa1c <strlen>
 801772c:	10800044 	addi	r2,r2,1
 8017730:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8017734:	00000d06 	br	801776c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8017738:	e0bffc17 	ldw	r2,-16(fp)
 801773c:	10800217 	ldw	r2,8(r2)
 8017740:	e0fffd17 	ldw	r3,-12(fp)
 8017744:	180d883a 	mov	r6,r3
 8017748:	e17ffe17 	ldw	r5,-8(fp)
 801774c:	1009883a 	mov	r4,r2
 8017750:	8017a440 	call	8017a44 <memcmp>
 8017754:	1000021e 	bne	r2,zero,8017760 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8017758:	e0bffc17 	ldw	r2,-16(fp)
 801775c:	00000706 	br	801777c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8017760:	e0bffc17 	ldw	r2,-16(fp)
 8017764:	10800017 	ldw	r2,0(r2)
 8017768:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801776c:	e0fffc17 	ldw	r3,-16(fp)
 8017770:	e0bfff17 	ldw	r2,-4(fp)
 8017774:	18bff01e 	bne	r3,r2,8017738 <__alt_data_end+0xfc017738>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8017778:	0005883a 	mov	r2,zero
}
 801777c:	e037883a 	mov	sp,fp
 8017780:	dfc00117 	ldw	ra,4(sp)
 8017784:	df000017 	ldw	fp,0(sp)
 8017788:	dec00204 	addi	sp,sp,8
 801778c:	f800283a 	ret

08017790 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8017790:	defffb04 	addi	sp,sp,-20
 8017794:	dfc00415 	stw	ra,16(sp)
 8017798:	df000315 	stw	fp,12(sp)
 801779c:	df000304 	addi	fp,sp,12
 80177a0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80177a4:	d0a00d17 	ldw	r2,-32716(gp)
 80177a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80177ac:	00003106 	br	8017874 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80177b0:	e0bffd17 	ldw	r2,-12(fp)
 80177b4:	10800217 	ldw	r2,8(r2)
 80177b8:	1009883a 	mov	r4,r2
 80177bc:	800aa1c0 	call	800aa1c <strlen>
 80177c0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80177c4:	e0bffd17 	ldw	r2,-12(fp)
 80177c8:	10c00217 	ldw	r3,8(r2)
 80177cc:	e0bffe17 	ldw	r2,-8(fp)
 80177d0:	10bfffc4 	addi	r2,r2,-1
 80177d4:	1885883a 	add	r2,r3,r2
 80177d8:	10800003 	ldbu	r2,0(r2)
 80177dc:	10803fcc 	andi	r2,r2,255
 80177e0:	1080201c 	xori	r2,r2,128
 80177e4:	10bfe004 	addi	r2,r2,-128
 80177e8:	10800bd8 	cmpnei	r2,r2,47
 80177ec:	1000031e 	bne	r2,zero,80177fc <alt_find_file+0x6c>
    {
      len -= 1;
 80177f0:	e0bffe17 	ldw	r2,-8(fp)
 80177f4:	10bfffc4 	addi	r2,r2,-1
 80177f8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80177fc:	e0bffe17 	ldw	r2,-8(fp)
 8017800:	e0ffff17 	ldw	r3,-4(fp)
 8017804:	1885883a 	add	r2,r3,r2
 8017808:	10800003 	ldbu	r2,0(r2)
 801780c:	10803fcc 	andi	r2,r2,255
 8017810:	1080201c 	xori	r2,r2,128
 8017814:	10bfe004 	addi	r2,r2,-128
 8017818:	10800be0 	cmpeqi	r2,r2,47
 801781c:	1000081e 	bne	r2,zero,8017840 <alt_find_file+0xb0>
 8017820:	e0bffe17 	ldw	r2,-8(fp)
 8017824:	e0ffff17 	ldw	r3,-4(fp)
 8017828:	1885883a 	add	r2,r3,r2
 801782c:	10800003 	ldbu	r2,0(r2)
 8017830:	10803fcc 	andi	r2,r2,255
 8017834:	1080201c 	xori	r2,r2,128
 8017838:	10bfe004 	addi	r2,r2,-128
 801783c:	10000a1e 	bne	r2,zero,8017868 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8017840:	e0bffd17 	ldw	r2,-12(fp)
 8017844:	10800217 	ldw	r2,8(r2)
 8017848:	e0fffe17 	ldw	r3,-8(fp)
 801784c:	180d883a 	mov	r6,r3
 8017850:	e17fff17 	ldw	r5,-4(fp)
 8017854:	1009883a 	mov	r4,r2
 8017858:	8017a440 	call	8017a44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801785c:	1000021e 	bne	r2,zero,8017868 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8017860:	e0bffd17 	ldw	r2,-12(fp)
 8017864:	00000706 	br	8017884 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8017868:	e0bffd17 	ldw	r2,-12(fp)
 801786c:	10800017 	ldw	r2,0(r2)
 8017870:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8017874:	e0fffd17 	ldw	r3,-12(fp)
 8017878:	d0a00d04 	addi	r2,gp,-32716
 801787c:	18bfcc1e 	bne	r3,r2,80177b0 <__alt_data_end+0xfc0177b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8017880:	0005883a 	mov	r2,zero
}
 8017884:	e037883a 	mov	sp,fp
 8017888:	dfc00117 	ldw	ra,4(sp)
 801788c:	df000017 	ldw	fp,0(sp)
 8017890:	dec00204 	addi	sp,sp,8
 8017894:	f800283a 	ret

08017898 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8017898:	defffa04 	addi	sp,sp,-24
 801789c:	dfc00515 	stw	ra,20(sp)
 80178a0:	df000415 	stw	fp,16(sp)
 80178a4:	dc000315 	stw	r16,12(sp)
 80178a8:	df000404 	addi	fp,sp,16
 80178ac:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 80178b0:	00bffa04 	movi	r2,-24
 80178b4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80178b8:	e03ffc15 	stw	zero,-16(fp)
 80178bc:	00001d06 	br	8017934 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 80178c0:	04021974 	movhi	r16,2149
 80178c4:	8439f904 	addi	r16,r16,-6172
 80178c8:	e0bffc17 	ldw	r2,-16(fp)
 80178cc:	01400304 	movi	r5,12
 80178d0:	1009883a 	mov	r4,r2
 80178d4:	80071600 	call	8007160 <__mulsi3>
 80178d8:	8085883a 	add	r2,r16,r2
 80178dc:	10800017 	ldw	r2,0(r2)
 80178e0:	1000111e 	bne	r2,zero,8017928 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 80178e4:	04021974 	movhi	r16,2149
 80178e8:	8439f904 	addi	r16,r16,-6172
 80178ec:	e0bffc17 	ldw	r2,-16(fp)
 80178f0:	01400304 	movi	r5,12
 80178f4:	1009883a 	mov	r4,r2
 80178f8:	80071600 	call	8007160 <__mulsi3>
 80178fc:	8085883a 	add	r2,r16,r2
 8017900:	e0fffe17 	ldw	r3,-8(fp)
 8017904:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8017908:	d0e01117 	ldw	r3,-32700(gp)
 801790c:	e0bffc17 	ldw	r2,-16(fp)
 8017910:	1880020e 	bge	r3,r2,801791c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 8017914:	e0bffc17 	ldw	r2,-16(fp)
 8017918:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
 801791c:	e0bffc17 	ldw	r2,-16(fp)
 8017920:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8017924:	00000606 	br	8017940 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8017928:	e0bffc17 	ldw	r2,-16(fp)
 801792c:	10800044 	addi	r2,r2,1
 8017930:	e0bffc15 	stw	r2,-16(fp)
 8017934:	e0bffc17 	ldw	r2,-16(fp)
 8017938:	10800810 	cmplti	r2,r2,32
 801793c:	103fe01e 	bne	r2,zero,80178c0 <__alt_data_end+0xfc0178c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8017940:	e0bffd17 	ldw	r2,-12(fp)
}
 8017944:	e6ffff04 	addi	sp,fp,-4
 8017948:	dfc00217 	ldw	ra,8(sp)
 801794c:	df000117 	ldw	fp,4(sp)
 8017950:	dc000017 	ldw	r16,0(sp)
 8017954:	dec00304 	addi	sp,sp,12
 8017958:	f800283a 	ret

0801795c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801795c:	defffe04 	addi	sp,sp,-8
 8017960:	df000115 	stw	fp,4(sp)
 8017964:	df000104 	addi	fp,sp,4
 8017968:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801796c:	e0bfff17 	ldw	r2,-4(fp)
 8017970:	10bffe84 	addi	r2,r2,-6
 8017974:	10c00428 	cmpgeui	r3,r2,16
 8017978:	18001a1e 	bne	r3,zero,80179e4 <alt_exception_cause_generated_bad_addr+0x88>
 801797c:	100690ba 	slli	r3,r2,2
 8017980:	00820074 	movhi	r2,2049
 8017984:	109e6504 	addi	r2,r2,31124
 8017988:	1885883a 	add	r2,r3,r2
 801798c:	10800017 	ldw	r2,0(r2)
 8017990:	1000683a 	jmp	r2
 8017994:	080179d4 	ori	zero,at,1511
 8017998:	080179d4 	ori	zero,at,1511
 801799c:	080179e4 	muli	zero,at,1511
 80179a0:	080179e4 	muli	zero,at,1511
 80179a4:	080179e4 	muli	zero,at,1511
 80179a8:	080179d4 	ori	zero,at,1511
 80179ac:	080179dc 	xori	zero,at,1511
 80179b0:	080179e4 	muli	zero,at,1511
 80179b4:	080179d4 	ori	zero,at,1511
 80179b8:	080179d4 	ori	zero,at,1511
 80179bc:	080179e4 	muli	zero,at,1511
 80179c0:	080179d4 	ori	zero,at,1511
 80179c4:	080179dc 	xori	zero,at,1511
 80179c8:	080179e4 	muli	zero,at,1511
 80179cc:	080179e4 	muli	zero,at,1511
 80179d0:	080179d4 	ori	zero,at,1511
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80179d4:	00800044 	movi	r2,1
 80179d8:	00000306 	br	80179e8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80179dc:	0005883a 	mov	r2,zero
 80179e0:	00000106 	br	80179e8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80179e4:	0005883a 	mov	r2,zero
  }
}
 80179e8:	e037883a 	mov	sp,fp
 80179ec:	df000017 	ldw	fp,0(sp)
 80179f0:	dec00104 	addi	sp,sp,4
 80179f4:	f800283a 	ret

080179f8 <atexit>:
 80179f8:	200b883a 	mov	r5,r4
 80179fc:	000f883a 	mov	r7,zero
 8017a00:	000d883a 	mov	r6,zero
 8017a04:	0009883a 	mov	r4,zero
 8017a08:	8017ac01 	jmpi	8017ac0 <__register_exitproc>

08017a0c <exit>:
 8017a0c:	defffe04 	addi	sp,sp,-8
 8017a10:	000b883a 	mov	r5,zero
 8017a14:	dc000015 	stw	r16,0(sp)
 8017a18:	dfc00115 	stw	ra,4(sp)
 8017a1c:	2021883a 	mov	r16,r4
 8017a20:	8017bd80 	call	8017bd8 <__call_exitprocs>
 8017a24:	00821974 	movhi	r2,2149
 8017a28:	10be7804 	addi	r2,r2,-1568
 8017a2c:	11000017 	ldw	r4,0(r2)
 8017a30:	20800f17 	ldw	r2,60(r4)
 8017a34:	10000126 	beq	r2,zero,8017a3c <exit+0x30>
 8017a38:	103ee83a 	callr	r2
 8017a3c:	8009883a 	mov	r4,r16
 8017a40:	8017d580 	call	8017d58 <_exit>

08017a44 <memcmp>:
 8017a44:	01c000c4 	movi	r7,3
 8017a48:	3980192e 	bgeu	r7,r6,8017ab0 <memcmp+0x6c>
 8017a4c:	2144b03a 	or	r2,r4,r5
 8017a50:	11c4703a 	and	r2,r2,r7
 8017a54:	10000f26 	beq	r2,zero,8017a94 <memcmp+0x50>
 8017a58:	20800003 	ldbu	r2,0(r4)
 8017a5c:	28c00003 	ldbu	r3,0(r5)
 8017a60:	10c0151e 	bne	r2,r3,8017ab8 <memcmp+0x74>
 8017a64:	31bfff84 	addi	r6,r6,-2
 8017a68:	01ffffc4 	movi	r7,-1
 8017a6c:	00000406 	br	8017a80 <memcmp+0x3c>
 8017a70:	20800003 	ldbu	r2,0(r4)
 8017a74:	28c00003 	ldbu	r3,0(r5)
 8017a78:	31bfffc4 	addi	r6,r6,-1
 8017a7c:	10c00e1e 	bne	r2,r3,8017ab8 <memcmp+0x74>
 8017a80:	21000044 	addi	r4,r4,1
 8017a84:	29400044 	addi	r5,r5,1
 8017a88:	31fff91e 	bne	r6,r7,8017a70 <__alt_data_end+0xfc017a70>
 8017a8c:	0005883a 	mov	r2,zero
 8017a90:	f800283a 	ret
 8017a94:	20c00017 	ldw	r3,0(r4)
 8017a98:	28800017 	ldw	r2,0(r5)
 8017a9c:	18bfee1e 	bne	r3,r2,8017a58 <__alt_data_end+0xfc017a58>
 8017aa0:	31bfff04 	addi	r6,r6,-4
 8017aa4:	21000104 	addi	r4,r4,4
 8017aa8:	29400104 	addi	r5,r5,4
 8017aac:	39bff936 	bltu	r7,r6,8017a94 <__alt_data_end+0xfc017a94>
 8017ab0:	303fe91e 	bne	r6,zero,8017a58 <__alt_data_end+0xfc017a58>
 8017ab4:	003ff506 	br	8017a8c <__alt_data_end+0xfc017a8c>
 8017ab8:	10c5c83a 	sub	r2,r2,r3
 8017abc:	f800283a 	ret

08017ac0 <__register_exitproc>:
 8017ac0:	defffa04 	addi	sp,sp,-24
 8017ac4:	dc000315 	stw	r16,12(sp)
 8017ac8:	04021974 	movhi	r16,2149
 8017acc:	843e7804 	addi	r16,r16,-1568
 8017ad0:	80c00017 	ldw	r3,0(r16)
 8017ad4:	dc400415 	stw	r17,16(sp)
 8017ad8:	dfc00515 	stw	ra,20(sp)
 8017adc:	18805217 	ldw	r2,328(r3)
 8017ae0:	2023883a 	mov	r17,r4
 8017ae4:	10003726 	beq	r2,zero,8017bc4 <__register_exitproc+0x104>
 8017ae8:	10c00117 	ldw	r3,4(r2)
 8017aec:	010007c4 	movi	r4,31
 8017af0:	20c00e16 	blt	r4,r3,8017b2c <__register_exitproc+0x6c>
 8017af4:	1a000044 	addi	r8,r3,1
 8017af8:	8800221e 	bne	r17,zero,8017b84 <__register_exitproc+0xc4>
 8017afc:	18c00084 	addi	r3,r3,2
 8017b00:	18c7883a 	add	r3,r3,r3
 8017b04:	18c7883a 	add	r3,r3,r3
 8017b08:	12000115 	stw	r8,4(r2)
 8017b0c:	10c7883a 	add	r3,r2,r3
 8017b10:	19400015 	stw	r5,0(r3)
 8017b14:	0005883a 	mov	r2,zero
 8017b18:	dfc00517 	ldw	ra,20(sp)
 8017b1c:	dc400417 	ldw	r17,16(sp)
 8017b20:	dc000317 	ldw	r16,12(sp)
 8017b24:	dec00604 	addi	sp,sp,24
 8017b28:	f800283a 	ret
 8017b2c:	00800034 	movhi	r2,0
 8017b30:	10800004 	addi	r2,r2,0
 8017b34:	10002626 	beq	r2,zero,8017bd0 <__register_exitproc+0x110>
 8017b38:	01006404 	movi	r4,400
 8017b3c:	d9400015 	stw	r5,0(sp)
 8017b40:	d9800115 	stw	r6,4(sp)
 8017b44:	d9c00215 	stw	r7,8(sp)
 8017b48:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017b4c:	d9400017 	ldw	r5,0(sp)
 8017b50:	d9800117 	ldw	r6,4(sp)
 8017b54:	d9c00217 	ldw	r7,8(sp)
 8017b58:	10001d26 	beq	r2,zero,8017bd0 <__register_exitproc+0x110>
 8017b5c:	81000017 	ldw	r4,0(r16)
 8017b60:	10000115 	stw	zero,4(r2)
 8017b64:	02000044 	movi	r8,1
 8017b68:	22405217 	ldw	r9,328(r4)
 8017b6c:	0007883a 	mov	r3,zero
 8017b70:	12400015 	stw	r9,0(r2)
 8017b74:	20805215 	stw	r2,328(r4)
 8017b78:	10006215 	stw	zero,392(r2)
 8017b7c:	10006315 	stw	zero,396(r2)
 8017b80:	883fde26 	beq	r17,zero,8017afc <__alt_data_end+0xfc017afc>
 8017b84:	18c9883a 	add	r4,r3,r3
 8017b88:	2109883a 	add	r4,r4,r4
 8017b8c:	1109883a 	add	r4,r2,r4
 8017b90:	21802215 	stw	r6,136(r4)
 8017b94:	01800044 	movi	r6,1
 8017b98:	12406217 	ldw	r9,392(r2)
 8017b9c:	30cc983a 	sll	r6,r6,r3
 8017ba0:	4992b03a 	or	r9,r9,r6
 8017ba4:	12406215 	stw	r9,392(r2)
 8017ba8:	21c04215 	stw	r7,264(r4)
 8017bac:	01000084 	movi	r4,2
 8017bb0:	893fd21e 	bne	r17,r4,8017afc <__alt_data_end+0xfc017afc>
 8017bb4:	11006317 	ldw	r4,396(r2)
 8017bb8:	218cb03a 	or	r6,r4,r6
 8017bbc:	11806315 	stw	r6,396(r2)
 8017bc0:	003fce06 	br	8017afc <__alt_data_end+0xfc017afc>
 8017bc4:	18805304 	addi	r2,r3,332
 8017bc8:	18805215 	stw	r2,328(r3)
 8017bcc:	003fc606 	br	8017ae8 <__alt_data_end+0xfc017ae8>
 8017bd0:	00bfffc4 	movi	r2,-1
 8017bd4:	003fd006 	br	8017b18 <__alt_data_end+0xfc017b18>

08017bd8 <__call_exitprocs>:
 8017bd8:	defff504 	addi	sp,sp,-44
 8017bdc:	df000915 	stw	fp,36(sp)
 8017be0:	dd400615 	stw	r21,24(sp)
 8017be4:	dc800315 	stw	r18,12(sp)
 8017be8:	dfc00a15 	stw	ra,40(sp)
 8017bec:	ddc00815 	stw	r23,32(sp)
 8017bf0:	dd800715 	stw	r22,28(sp)
 8017bf4:	dd000515 	stw	r20,20(sp)
 8017bf8:	dcc00415 	stw	r19,16(sp)
 8017bfc:	dc400215 	stw	r17,8(sp)
 8017c00:	dc000115 	stw	r16,4(sp)
 8017c04:	d9000015 	stw	r4,0(sp)
 8017c08:	2839883a 	mov	fp,r5
 8017c0c:	04800044 	movi	r18,1
 8017c10:	057fffc4 	movi	r21,-1
 8017c14:	00821974 	movhi	r2,2149
 8017c18:	10be7804 	addi	r2,r2,-1568
 8017c1c:	12000017 	ldw	r8,0(r2)
 8017c20:	45005217 	ldw	r20,328(r8)
 8017c24:	44c05204 	addi	r19,r8,328
 8017c28:	a0001c26 	beq	r20,zero,8017c9c <__call_exitprocs+0xc4>
 8017c2c:	a0800117 	ldw	r2,4(r20)
 8017c30:	15ffffc4 	addi	r23,r2,-1
 8017c34:	b8000d16 	blt	r23,zero,8017c6c <__call_exitprocs+0x94>
 8017c38:	14000044 	addi	r16,r2,1
 8017c3c:	8421883a 	add	r16,r16,r16
 8017c40:	8421883a 	add	r16,r16,r16
 8017c44:	84402004 	addi	r17,r16,128
 8017c48:	a463883a 	add	r17,r20,r17
 8017c4c:	a421883a 	add	r16,r20,r16
 8017c50:	e0001e26 	beq	fp,zero,8017ccc <__call_exitprocs+0xf4>
 8017c54:	80804017 	ldw	r2,256(r16)
 8017c58:	e0801c26 	beq	fp,r2,8017ccc <__call_exitprocs+0xf4>
 8017c5c:	bdffffc4 	addi	r23,r23,-1
 8017c60:	843fff04 	addi	r16,r16,-4
 8017c64:	8c7fff04 	addi	r17,r17,-4
 8017c68:	bd7ff91e 	bne	r23,r21,8017c50 <__alt_data_end+0xfc017c50>
 8017c6c:	00800034 	movhi	r2,0
 8017c70:	10800004 	addi	r2,r2,0
 8017c74:	10000926 	beq	r2,zero,8017c9c <__call_exitprocs+0xc4>
 8017c78:	a0800117 	ldw	r2,4(r20)
 8017c7c:	1000301e 	bne	r2,zero,8017d40 <__call_exitprocs+0x168>
 8017c80:	a0800017 	ldw	r2,0(r20)
 8017c84:	10003226 	beq	r2,zero,8017d50 <__call_exitprocs+0x178>
 8017c88:	a009883a 	mov	r4,r20
 8017c8c:	98800015 	stw	r2,0(r19)
 8017c90:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8017c94:	9d000017 	ldw	r20,0(r19)
 8017c98:	a03fe41e 	bne	r20,zero,8017c2c <__alt_data_end+0xfc017c2c>
 8017c9c:	dfc00a17 	ldw	ra,40(sp)
 8017ca0:	df000917 	ldw	fp,36(sp)
 8017ca4:	ddc00817 	ldw	r23,32(sp)
 8017ca8:	dd800717 	ldw	r22,28(sp)
 8017cac:	dd400617 	ldw	r21,24(sp)
 8017cb0:	dd000517 	ldw	r20,20(sp)
 8017cb4:	dcc00417 	ldw	r19,16(sp)
 8017cb8:	dc800317 	ldw	r18,12(sp)
 8017cbc:	dc400217 	ldw	r17,8(sp)
 8017cc0:	dc000117 	ldw	r16,4(sp)
 8017cc4:	dec00b04 	addi	sp,sp,44
 8017cc8:	f800283a 	ret
 8017ccc:	a0800117 	ldw	r2,4(r20)
 8017cd0:	80c00017 	ldw	r3,0(r16)
 8017cd4:	10bfffc4 	addi	r2,r2,-1
 8017cd8:	15c01426 	beq	r2,r23,8017d2c <__call_exitprocs+0x154>
 8017cdc:	80000015 	stw	zero,0(r16)
 8017ce0:	183fde26 	beq	r3,zero,8017c5c <__alt_data_end+0xfc017c5c>
 8017ce4:	95c8983a 	sll	r4,r18,r23
 8017ce8:	a0806217 	ldw	r2,392(r20)
 8017cec:	a5800117 	ldw	r22,4(r20)
 8017cf0:	2084703a 	and	r2,r4,r2
 8017cf4:	10000b26 	beq	r2,zero,8017d24 <__call_exitprocs+0x14c>
 8017cf8:	a0806317 	ldw	r2,396(r20)
 8017cfc:	2088703a 	and	r4,r4,r2
 8017d00:	20000c1e 	bne	r4,zero,8017d34 <__call_exitprocs+0x15c>
 8017d04:	89400017 	ldw	r5,0(r17)
 8017d08:	d9000017 	ldw	r4,0(sp)
 8017d0c:	183ee83a 	callr	r3
 8017d10:	a0800117 	ldw	r2,4(r20)
 8017d14:	15bfbf1e 	bne	r2,r22,8017c14 <__alt_data_end+0xfc017c14>
 8017d18:	98800017 	ldw	r2,0(r19)
 8017d1c:	153fcf26 	beq	r2,r20,8017c5c <__alt_data_end+0xfc017c5c>
 8017d20:	003fbc06 	br	8017c14 <__alt_data_end+0xfc017c14>
 8017d24:	183ee83a 	callr	r3
 8017d28:	003ff906 	br	8017d10 <__alt_data_end+0xfc017d10>
 8017d2c:	a5c00115 	stw	r23,4(r20)
 8017d30:	003feb06 	br	8017ce0 <__alt_data_end+0xfc017ce0>
 8017d34:	89000017 	ldw	r4,0(r17)
 8017d38:	183ee83a 	callr	r3
 8017d3c:	003ff406 	br	8017d10 <__alt_data_end+0xfc017d10>
 8017d40:	a0800017 	ldw	r2,0(r20)
 8017d44:	a027883a 	mov	r19,r20
 8017d48:	1029883a 	mov	r20,r2
 8017d4c:	003fb606 	br	8017c28 <__alt_data_end+0xfc017c28>
 8017d50:	0005883a 	mov	r2,zero
 8017d54:	003ffb06 	br	8017d44 <__alt_data_end+0xfc017d44>

08017d58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8017d58:	defffd04 	addi	sp,sp,-12
 8017d5c:	df000215 	stw	fp,8(sp)
 8017d60:	df000204 	addi	fp,sp,8
 8017d64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8017d68:	0001883a 	nop
 8017d6c:	e0bfff17 	ldw	r2,-4(fp)
 8017d70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8017d74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8017d78:	10000226 	beq	r2,zero,8017d84 <_exit+0x2c>
    ALT_SIM_FAIL();
 8017d7c:	002af070 	cmpltui	zero,zero,43969
 8017d80:	00000106 	br	8017d88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8017d84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8017d88:	003fff06 	br	8017d88 <__alt_data_end+0xfc017d88>
